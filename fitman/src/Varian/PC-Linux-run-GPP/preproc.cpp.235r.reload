
;; Function int pre_process(int*, Preprocess*, Procpar_info*, float**, float**) (_Z11pre_processPiP10PreprocessP12Procpar_infoPPfS5_, funcdef_no=2, decl_uid=5453, cgraph_uid=2, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 23:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 31:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 41:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 47
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 50:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 52
	 Choosing alt 0 in insn 52:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 56:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 57:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 58:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 59:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 75:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 81
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 87:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 94
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 101:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 114:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 0 in insn 117:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 120:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 121:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 122:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 129:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 130:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 133:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 148
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 153:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 160:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 167:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 168:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 169
	 Choosing alt 0 in insn 169:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 170:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 192:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 193
	 Choosing alt 0 in insn 193:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 194:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 200:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 207:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 214:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 215:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 217:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 237
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 238:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 239:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 241:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 248:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 259:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 261
	 Choosing alt 0 in insn 261:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 263:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 269:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 277
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 284:  (0) r  (1) rm  (2) e {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 289:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 291
	 Choosing alt 0 in insn 291:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 292:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 307
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 314:  (0) r  (1) rm  (2) e {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 315:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 319:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 320:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 321
	 Choosing alt 0 in insn 321:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 322:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 325:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 326:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 327
	 Choosing alt 0 in insn 327:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 335:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 347:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 360:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 367:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 369:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 370:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 371:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 372:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 373:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 383:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 388:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 389:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 390:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 392:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 394:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 395:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 396:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 397:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 406:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 410:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 414:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 421:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 422
	 Choosing alt 0 in insn 422:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 429:  (0) r  (1) rm  (2) e {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 430:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 434:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 435:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 436
	 Choosing alt 0 in insn 436:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 437:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 443:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 449:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 450:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 451:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 454:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) x  (1) xm {*cmpiusf_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 458:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 459:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 460:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 461:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 464:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) x  (1) xm {*cmpiusf_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 468:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 473:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 474:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 480:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 481:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 482:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 483:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 484:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 485:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 486:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 494:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 498:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 502:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 509:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 510
	 Choosing alt 0 in insn 510:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 515:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 516:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 517:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 518:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 519:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 520:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 521:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 529:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46

********** Pseudo live ranges #1: **********

  BB 46
   Insn 543: point = 0
   Insn 542: point = 0
   Insn 538: point = 1
   Insn 535: point = 3
  BB 42
   Insn 499: point = 4
   Insn 498: point = 4
   Insn 497: point = 5
   Insn 496: point = 7
  BB 45
   Insn 571: point = 8
   Insn 529: point = 8
  BB 44
   Insn 526: point = 8
   Insn 525: point = 8
   Insn 524: point = 9
   Insn 523: point = 10
   Insn 522: point = 11
   Insn 521: point = 12
   Insn 520: point = 13
   Insn 519: point = 14
   Insn 518: point = 16
   Insn 517: point = 17
   Insn 516: point = 19
   Insn 515: point = 21
  BB 43
   Insn 513: point = 22
   Insn 512: point = 22
   Insn 511: point = 23
   Insn 510: point = 25
   Insn 509: point = 27
   Insn 508: point = 28
   Insn 507: point = 30
   Insn 506: point = 32
   Insn 505: point = 34
   Insn 504: point = 35
   Insn 503: point = 35
   Insn 502: point = 36
   Insn 501: point = 38
  BB 41
   Insn 494: point = 39
  BB 40
   Insn 491: point = 39
   Insn 490: point = 39
   Insn 489: point = 40
   Insn 488: point = 41
   Insn 487: point = 42
   Insn 486: point = 43
   Insn 485: point = 44
   Insn 484: point = 45
   Insn 483: point = 47
   Insn 482: point = 48
   Insn 481: point = 50
   Insn 480: point = 52
  BB 39
   Insn 477: point = 53
   Insn 476: point = 53
   Insn 475: point = 54
   Insn 474: point = 56
   Insn 473: point = 58
  BB 38
   Insn 471: point = 59
   Insn 470: point = 59
   Insn 469: point = 60
   Insn 468: point = 62
  BB 37
   Insn 466: point = 63
   Insn 465: point = 63
   Insn 464: point = 64
  BB 36
   Insn 463: point = 66
   Insn 462: point = 66
   Insn 461: point = 67
   Insn 460: point = 68
   Insn 459: point = 70
   Insn 458: point = 72
  BB 35
   Insn 456: point = 73
   Insn 455: point = 73
   Insn 454: point = 74
  BB 34
   Insn 453: point = 76
   Insn 452: point = 76
   Insn 451: point = 77
   Insn 450: point = 78
   Insn 449: point = 80
  BB 30
   Insn 411: point = 81
   Insn 410: point = 81
   Insn 409: point = 82
   Insn 408: point = 84
  BB 33
   Insn 569: point = 85
   Insn 443: point = 85
  BB 32
   Insn 440: point = 85
   Insn 439: point = 85
   Insn 438: point = 86
   Insn 437: point = 87
   Insn 436: point = 89
   Insn 435: point = 91
   Insn 434: point = 92
   Insn 433: point = 94
   Insn 432: point = 96
   Insn 431: point = 97
   Insn 430: point = 99
   Insn 429: point = 100
   Insn 428: point = 102
   Insn 427: point = 104
  BB 31
   Insn 425: point = 105
   Insn 424: point = 105
   Insn 423: point = 106
   Insn 422: point = 108
   Insn 421: point = 110
   Insn 420: point = 111
   Insn 419: point = 113
   Insn 418: point = 115
   Insn 417: point = 117
   Insn 416: point = 118
   Insn 415: point = 118
   Insn 414: point = 119
   Insn 413: point = 121
  BB 29
   Insn 406: point = 122
  BB 28
   Insn 403: point = 122
   Insn 402: point = 122
   Insn 401: point = 123
   Insn 400: point = 124
   Insn 399: point = 125
   Insn 398: point = 126
   Insn 397: point = 127
   Insn 396: point = 128
   Insn 395: point = 129
   Insn 394: point = 131
   Insn 393: point = 132
   Insn 392: point = 134
   Insn 391: point = 136
   Insn 390: point = 137
   Insn 389: point = 139
   Insn 388: point = 141
  BB 27
   Insn 386: point = 142
   Insn 385: point = 142
   Insn 384: point = 143
   Insn 383: point = 145
  BB 26
   Insn 380: point = 146
   Insn 379: point = 146
   Insn 378: point = 147
   Insn 377: point = 148
   Insn 376: point = 149
   Insn 375: point = 150
   Insn 374: point = 151
   Insn 373: point = 152
   Insn 372: point = 153
   Insn 371: point = 155
   Insn 370: point = 156
   Insn 369: point = 158
   Insn 368: point = 160
   Insn 367: point = 161
   Insn 366: point = 163
   Insn 365: point = 165
  BB 25
   Insn 363: point = 166
   Insn 362: point = 166
   Insn 361: point = 167
   Insn 360: point = 169
  BB 24
   Insn 357: point = 170
   Insn 356: point = 170
   Insn 355: point = 171
   Insn 354: point = 172
   Insn 353: point = 173
   Insn 352: point = 174
   Insn 351: point = 175
   Insn 350: point = 176
   Insn 349: point = 178
   Insn 348: point = 179
   Insn 347: point = 181
   Insn 346: point = 183
  BB 23
   Insn 344: point = 184
   Insn 343: point = 184
   Insn 342: point = 185
   Insn 341: point = 187
  BB 3
   Insn 15: point = 188
   Insn 14: point = 188
   Insn 13: point = 189
   Insn 12: point = 191
  BB 22
   Insn 567: point = 192
   Insn 335: point = 192
  BB 21
   Insn 332: point = 192
   Insn 331: point = 192
   Insn 330: point = 193
   Insn 329: point = 194
   Insn 328: point = 195
   Insn 327: point = 197
   Insn 326: point = 199
   Insn 325: point = 200
   Insn 324: point = 202
   Insn 323: point = 204
   Insn 322: point = 205
   Insn 321: point = 207
   Insn 320: point = 209
   Insn 319: point = 210
   Insn 318: point = 212
   Insn 317: point = 214
   Insn 316: point = 215
   Insn 315: point = 217
   Insn 314: point = 218
   Insn 313: point = 220
   Insn 312: point = 222
  BB 20
   Insn 310: point = 223
   Insn 309: point = 223
   Insn 308: point = 224
   Insn 307: point = 226
   Insn 306: point = 228
   Insn 305: point = 229
   Insn 304: point = 231
   Insn 303: point = 233
   Insn 302: point = 235
   Insn 301: point = 236
   Insn 300: point = 236
   Insn 299: point = 237
   Insn 298: point = 239
  BB 19
   Insn 295: point = 240
   Insn 294: point = 240
   Insn 293: point = 241
   Insn 292: point = 242
   Insn 291: point = 244
   Insn 290: point = 246
   Insn 289: point = 247
   Insn 288: point = 249
   Insn 287: point = 251
   Insn 286: point = 252
   Insn 285: point = 254
   Insn 284: point = 255
   Insn 283: point = 257
   Insn 282: point = 259
  BB 18
   Insn 280: point = 260
   Insn 279: point = 260
   Insn 278: point = 261
   Insn 277: point = 263
   Insn 276: point = 265
   Insn 275: point = 266
   Insn 274: point = 268
   Insn 273: point = 270
   Insn 272: point = 272
   Insn 271: point = 273
   Insn 270: point = 273
   Insn 269: point = 274
   Insn 268: point = 276
   Insn 267: point = 277
   Insn 266: point = 277
   Insn 265: point = 278
   Insn 264: point = 279
   Insn 263: point = 280
   Insn 262: point = 281
   Insn 261: point = 283
   Insn 260: point = 285
   Insn 259: point = 286
   Insn 258: point = 288
   Insn 257: point = 290
   Insn 256: point = 291
   Insn 255: point = 293
   Insn 254: point = 294
   Insn 253: point = 296
   Insn 252: point = 298
   Insn 251: point = 300
   Insn 250: point = 301
   Insn 249: point = 301
   Insn 248: point = 302
   Insn 247: point = 304
  BB 16
   Insn 209: point = 305
   Insn 208: point = 305
   Insn 207: point = 306
  BB 17
   Insn 565: point = 307
   Insn 241: point = 307
   Insn 240: point = 308
   Insn 239: point = 310
   Insn 238: point = 311
   Insn 237: point = 313
   Insn 236: point = 315
   Insn 235: point = 316
   Insn 234: point = 318
   Insn 233: point = 320
   Insn 232: point = 322
   Insn 231: point = 323
   Insn 230: point = 323
   Insn 229: point = 324
   Insn 228: point = 326
   Insn 227: point = 327
   Insn 226: point = 329
   Insn 225: point = 330
   Insn 224: point = 332
   Insn 223: point = 334
   Insn 222: point = 336
   Insn 221: point = 337
   Insn 220: point = 337
   Insn 219: point = 338
   Insn 218: point = 340
   Insn 217: point = 341
   Insn 216: point = 342
   Insn 215: point = 344
   Insn 214: point = 345
  BB 15
  BB 14
   Insn 202: point = 346
   Insn 201: point = 346
   Insn 200: point = 347
  BB 12
   Insn 162: point = 348
   Insn 161: point = 348
   Insn 160: point = 349
  BB 13
   Insn 563: point = 350
   Insn 194: point = 350
   Insn 193: point = 351
   Insn 192: point = 353
   Insn 191: point = 354
   Insn 190: point = 356
   Insn 189: point = 358
   Insn 188: point = 359
   Insn 187: point = 361
   Insn 186: point = 363
   Insn 185: point = 365
   Insn 184: point = 366
   Insn 183: point = 366
   Insn 182: point = 367
   Insn 181: point = 369
   Insn 180: point = 370
   Insn 179: point = 372
   Insn 178: point = 373
   Insn 177: point = 375
   Insn 176: point = 377
   Insn 175: point = 379
   Insn 174: point = 380
   Insn 173: point = 380
   Insn 172: point = 381
   Insn 171: point = 383
   Insn 170: point = 384
   Insn 169: point = 385
   Insn 168: point = 387
   Insn 167: point = 388
  BB 11
  BB 10
   Insn 155: point = 389
   Insn 154: point = 389
   Insn 153: point = 390
  BB 9
   Insn 151: point = 391
   Insn 150: point = 391
   Insn 149: point = 392
   Insn 148: point = 394
   Insn 147: point = 396
   Insn 146: point = 397
   Insn 145: point = 399
   Insn 144: point = 401
   Insn 143: point = 403
   Insn 142: point = 404
   Insn 141: point = 404
   Insn 140: point = 405
   Insn 139: point = 407
  BB 5
   Insn 63: point = 408
   Insn 62: point = 408
  BB 8
   Insn 560: point = 408
   Insn 133: point = 408
  BB 7
   Insn 130: point = 408
   Insn 129: point = 409
  BB 6
   Insn 124: point = 410
   Insn 123: point = 410
   Insn 122: point = 411
   Insn 121: point = 412
   Insn 120: point = 413
   Insn 119: point = 414
   Insn 118: point = 414
   Insn 117: point = 415
   Insn 116: point = 417
   Insn 115: point = 419
   Insn 114: point = 421
   Insn 113: point = 423
   Insn 112: point = 425
   Insn 111: point = 427
   Insn 110: point = 429
   Insn 109: point = 431
   Insn 108: point = 432
   Insn 107: point = 434
   Insn 106: point = 436
   Insn 105: point = 437
   Insn 104: point = 439
   Insn 103: point = 441
   Insn 102: point = 442
   Insn 101: point = 444
   Insn 100: point = 446
   Insn 99: point = 448
   Insn 98: point = 450
   Insn 97: point = 452
   Insn 96: point = 454
   Insn 95: point = 455
   Insn 94: point = 457
   Insn 93: point = 459
   Insn 92: point = 460
   Insn 91: point = 462
   Insn 90: point = 464
   Insn 89: point = 465
   Insn 88: point = 467
   Insn 87: point = 469
   Insn 86: point = 471
   Insn 85: point = 473
   Insn 84: point = 475
   Insn 83: point = 477
   Insn 82: point = 478
   Insn 81: point = 480
   Insn 80: point = 482
   Insn 79: point = 483
   Insn 78: point = 485
   Insn 77: point = 487
   Insn 76: point = 488
   Insn 75: point = 490
   Insn 74: point = 492
   Insn 73: point = 494
   Insn 72: point = 496
   Insn 71: point = 498
   Insn 70: point = 499
   Insn 69: point = 501
   Insn 68: point = 503
   Insn 67: point = 504
   Insn 66: point = 506
   Insn 65: point = 508
  BB 4
   Insn 60: point = 509
   Insn 59: point = 509
   Insn 58: point = 510
   Insn 57: point = 511
   Insn 56: point = 512
   Insn 55: point = 513
   Insn 54: point = 513
   Insn 53: point = 514
   Insn 52: point = 516
   Insn 51: point = 518
   Insn 50: point = 520
   Insn 49: point = 522
   Insn 48: point = 524
   Insn 47: point = 526
   Insn 46: point = 528
   Insn 45: point = 529
   Insn 44: point = 531
   Insn 43: point = 533
   Insn 42: point = 534
   Insn 41: point = 536
   Insn 40: point = 538
   Insn 39: point = 540
   Insn 38: point = 542
   Insn 37: point = 544
   Insn 36: point = 545
   Insn 35: point = 547
   Insn 34: point = 549
   Insn 33: point = 550
   Insn 32: point = 552
   Insn 31: point = 554
   Insn 30: point = 556
   Insn 29: point = 558
   Insn 28: point = 560
   Insn 27: point = 561
   Insn 26: point = 563
   Insn 25: point = 565
   Insn 24: point = 566
   Insn 23: point = 568
   Insn 22: point = 570
   Insn 21: point = 572
   Insn 20: point = 574
   Insn 19: point = 575
   Insn 18: point = 577
   Insn 17: point = 579
  BB 2
   Insn 10: point = 580
   Insn 6: point = 580
   Insn 5: point = 580
   Insn 4: point = 580
   Insn 3: point = 580
   Insn 2: point = 580
 r87: [188..189]
 r88: [576..577]
 r89: [573..575]
 r90: [571..572]
 r91: [569..570]
 r92: [567..568]
 r93: [551..566]
 r94: [562..563]
 r95: [559..561]
 r96: [557..558]
 r97: [555..556]
 r98: [553..554]
 r99: [551..552]
 r100: [515..550]
 r101: [546..547]
 r102: [543..545]
 r103: [541..542]
 r104: [539..540]
 r105: [537..538]
 r106: [535..536]
 r107: [517..534]
 r108: [530..531]
 r109: [527..529]
 r110: [525..526]
 r111: [523..524]
 r112: [521..522]
 r113: [519..520]
 r114: [517..518]
 r115: [515..516]
 r116: [513..514]
 r117: [505..506]
 r118: [502..504]
 r119: [500..501]
 r120: [493..499]
 r121: [495..496]
 r122: [493..494]
 r123: [491..492]
 r124: [489..490]
 r125: [466..488]
 r126: [484..485]
 r127: [481..483]
 r128: [479..480]
 r129: [472..478]
 r130: [474..475]
 r131: [472..473]
 r132: [470..471]
 r133: [468..469]
 r134: [466..467]
 r135: [416..465]
 r136: [461..462]
 r137: [458..460]
 r138: [456..457]
 r139: [447..455]
 r140: [451..452]
 r141: [449..450]
 r142: [447..448]
 r143: [445..446]
 r144: [443..444]
 r145: [418..442]
 r146: [438..439]
 r147: [435..437]
 r148: [433..434]
 r149: [424..432]
 r150: [428..429]
 r151: [426..427]
 r152: [424..425]
 r153: [422..423]
 r154: [420..421]
 r155: [418..419]
 r156: [416..417]
 r157: [414..415]
 r158: [403..405]
 r159: [395..397]
 r160: [393..394]
 r161: [391..392]
 r162: [336..338]
 r163: [328..330]
 r164: [307..327]
 r165: [322..324]
 r166: [314..316]
 r167: [312..313]
 r168: [309..311]
 r169: [307..308]
 r170: [379..381]
 r171: [371..373]
 r172: [350..370]
 r173: [365..367]
 r174: [357..359]
 r175: [355..356]
 r176: [352..354]
 r177: [350..351]
 r178: [300..302]
 r179: [292..294]
 r180: [279..291]
 r181: [287..288]
 r182: [284..286]
 r183: [282..283]
 r184: [277..281]
 r185: [272..274]
 r186: [264..266]
 r187: [262..263]
 r188: [260..261]
 r189: [256..257]
 r190: [253..255]
 r191: [241..252]
 r192: [248..249]
 r193: [245..247]
 r194: [243..244]
 r195: [240..242]
 r196: [235..237]
 r197: [227..229]
 r198: [225..226]
 r199: [223..224]
 r200: [219..220]
 r201: [216..218]
 r202: [194..215]
 r203: [211..212]
 r204: [208..210]
 r205: [206..207]
 r206: [193..205]
 r207: [201..202]
 r208: [198..200]
 r209: [196..197]
 r210: [192..195]
 r211: [184..185]
 r212: [180..181]
 r213: [171..179]
 r214: [170..176]
 r215: [166..167]
 r216: [162..163]
 r217: [148..161]
 r218: [157..158]
 r219: [147..156]
 r220: [146..153]
 r221: [142..143]
 r222: [138..139]
 r223: [124..137]
 r224: [133..134]
 r225: [123..132]
 r226: [122..129]
 r227: [81..82]
 r228: [117..119]
 r229: [109..111]
 r230: [107..108]
 r231: [105..106]
 r232: [101..102]
 r233: [98..100]
 r234: [86..97]
 r235: [93..94]
 r236: [90..92]
 r237: [88..89]
 r238: [85..87]
 r239: [73..78]
 r240: [69..70]
 r241: [63..68]
 r242: [59..60]
 r243: [55..56]
 r244: [53..54]
 r245: [49..50]
 r246: [40..48]
 r247: [39..45]
 r248: [4..5]
 r249: [34..36]
 r250: [26..28]
 r251: [24..25]
 r252: [22..23]
 r253: [18..19]
 r254: [9..17]
 r255: [8..14]
 r256: [2..3]
 r257: [0..1]
 r258: [190..191]
 r259: [578..579]
 r260: [573..574]
 r261: [564..565]
 r262: [559..560]
 r263: [548..549]
 r264: [543..544]
 r265: [532..533]
 r266: [527..528]
 r267: [511..512]
 r268: [509..510]
 r269: [507..508]
 r270: [502..503]
 r271: [497..498]
 r272: [486..487]
 r273: [481..482]
 r274: [476..477]
 r275: [463..464]
 r276: [458..459]
 r277: [453..454]
 r278: [440..441]
 r279: [435..436]
 r280: [430..431]
 r281: [412..413]
 r282: [410..411]
 r283: [408..409]
 r284: [406..407]
 r285: [402..404] [398..399]
 r286: [400..401]
 r287: [395..396]
 r288: [389..390]
 r289: [348..349]
 r290: [384..385]
 r291: [386..388]
 r292: [386..387]
 r293: [382..383]
 r294: [378..380] [374..375]
 r295: [376..377]
 r296: [371..372]
 r297: [368..369]
 r298: [364..366] [360..361]
 r299: [362..363]
 r300: [357..358]
 r301: [352..353]
 r302: [346..347]
 r303: [305..306]
 r304: [341..342]
 r305: [343..345]
 r306: [343..344]
 r307: [339..340]
 r308: [335..337] [331..332]
 r309: [333..334]
 r310: [328..329]
 r311: [325..326]
 r312: [321..323] [317..318]
 r313: [319..320]
 r314: [314..315]
 r315: [309..310]
 r316: [303..304]
 r317: [299..301] [295..296]
 r318: [297..298]
 r319: [292..293]
 r320: [289..290]
 r321: [284..285]
 r322: [278..280]
 r323: [275..276]
 r324: [271..273] [267..268]
 r325: [269..270]
 r326: [264..265]
 r327: [258..259]
 r328: [253..254]
 r329: [250..251]
 r330: [245..246]
 r331: [238..239]
 r332: [234..236] [230..231]
 r333: [232..233]
 r334: [227..228]
 r335: [221..222]
 r336: [216..217]
 r337: [213..214]
 r338: [208..209]
 r339: [203..204]
 r340: [198..199]
 r341: [186..187]
 r342: [182..183]
 r343: [177..178]
 r344: [173..175]
 r345: [172..174]
 r346: [168..169]
 r347: [164..165]
 r348: [159..160]
 r349: [154..155]
 r350: [150..152]
 r351: [149..151]
 r352: [144..145]
 r353: [140..141]
 r354: [135..136]
 r355: [130..131]
 r356: [126..128]
 r357: [125..127]
 r358: [83..84]
 r359: [120..121]
 r360: [116..118] [112..113]
 r361: [114..115]
 r362: [109..110]
 r363: [103..104]
 r364: [98..99]
 r365: [95..96]
 r366: [90..91]
 r367: [79..80]
 r368: [76..77]
 r369: [73..74]
 r370: [71..72]
 r371: [66..67]
 r372: [63..64]
 r373: [61..62]
 r374: [57..58]
 r375: [51..52]
 r376: [46..47]
 r377: [42..44]
 r378: [41..43]
 r379: [6..7]
 r380: [37..38]
 r381: [33..35] [29..30]
 r382: [31..32]
 r383: [26..27]
 r384: [20..21]
 r385: [15..16]
 r386: [11..13]
 r387: [10..12]
Compressing live ranges: from 580 to 468 - 80%
Ranges after the compression:
 r87: [140..141]
 r88: [464..465]
 r89: [462..463]
 r90: [460..461]
 r91: [458..459]
 r92: [456..457]
 r93: [442..455]
 r94: [452..453]
 r95: [450..451]
 r96: [448..449]
 r97: [446..447]
 r98: [444..445]
 r99: [442..443]
 r100: [410..441]
 r101: [438..439]
 r102: [436..437]
 r103: [434..435]
 r104: [432..433]
 r105: [430..431]
 r106: [428..429]
 r107: [412..427]
 r108: [424..425]
 r109: [422..423]
 r110: [420..421]
 r111: [418..419]
 r112: [416..417]
 r113: [414..415]
 r114: [412..413]
 r115: [410..411]
 r116: [408..409]
 r117: [400..401]
 r118: [398..399]
 r119: [396..397]
 r120: [390..395]
 r121: [392..393]
 r122: [390..391]
 r123: [388..389]
 r124: [386..387]
 r125: [366..385]
 r126: [382..383]
 r127: [380..381]
 r128: [378..379]
 r129: [372..377]
 r130: [374..375]
 r131: [372..373]
 r132: [370..371]
 r133: [368..369]
 r134: [366..367]
 r135: [322..365]
 r136: [362..363]
 r137: [360..361]
 r138: [358..359]
 r139: [350..357]
 r140: [354..355]
 r141: [352..353]
 r142: [350..351]
 r143: [348..349]
 r144: [346..347]
 r145: [324..345]
 r146: [342..343]
 r147: [340..341]
 r148: [338..339]
 r149: [330..337]
 r150: [334..335]
 r151: [332..333]
 r152: [330..331]
 r153: [328..329]
 r154: [326..327]
 r155: [324..325]
 r156: [322..323]
 r157: [320..321]
 r158: [310..311]
 r159: [304..305]
 r160: [302..303]
 r161: [300..301]
 r162: [256..257]
 r163: [250..251]
 r164: [234..249]
 r165: [246..247]
 r166: [240..241]
 r167: [238..239]
 r168: [236..237]
 r169: [234..235]
 r170: [290..291]
 r171: [284..285]
 r172: [268..283]
 r173: [280..281]
 r174: [274..275]
 r175: [272..273]
 r176: [270..271]
 r177: [268..269]
 r178: [228..229]
 r179: [222..223]
 r180: [212..221]
 r181: [218..219]
 r182: [216..217]
 r183: [214..215]
 r184: [212..213]
 r185: [208..209]
 r186: [202..203]
 r187: [200..201]
 r188: [198..199]
 r189: [194..195]
 r190: [192..193]
 r191: [182..191]
 r192: [188..189]
 r193: [186..187]
 r194: [184..185]
 r195: [182..183]
 r196: [178..179]
 r197: [172..173]
 r198: [170..171]
 r199: [168..169]
 r200: [164..165]
 r201: [162..163]
 r202: [144..161]
 r203: [158..159]
 r204: [156..157]
 r205: [154..155]
 r206: [144..153]
 r207: [150..151]
 r208: [148..149]
 r209: [146..147]
 r210: [144..145]
 r211: [136..137]
 r212: [132..133]
 r213: [128..131]
 r214: [128..129]
 r215: [124..125]
 r216: [120..121]
 r217: [112..119]
 r218: [116..117]
 r219: [112..115]
 r220: [112..113]
 r221: [108..109]
 r222: [104..105]
 r223: [96..103]
 r224: [100..101]
 r225: [96..99]
 r226: [96..97]
 r227: [62..63]
 r228: [92..93]
 r229: [86..87]
 r230: [84..85]
 r231: [82..83]
 r232: [78..79]
 r233: [76..77]
 r234: [66..75]
 r235: [72..73]
 r236: [70..71]
 r237: [68..69]
 r238: [66..67]
 r239: [56..59]
 r240: [52..53]
 r241: [48..51]
 r242: [44..45]
 r243: [40..41]
 r244: [38..39]
 r245: [34..35]
 r246: [30..33]
 r247: [30..31]
 r248: [4..5]
 r249: [26..27]
 r250: [20..21]
 r251: [18..19]
 r252: [16..17]
 r253: [12..13]
 r254: [8..11]
 r255: [8..9]
 r256: [2..3]
 r257: [0..1]
 r258: [142..143]
 r259: [466..467]
 r260: [462..463]
 r261: [454..455]
 r262: [450..451]
 r263: [440..441]
 r264: [436..437]
 r265: [426..427]
 r266: [422..423]
 r267: [406..407]
 r268: [404..405]
 r269: [402..403]
 r270: [398..399]
 r271: [394..395]
 r272: [384..385]
 r273: [380..381]
 r274: [376..377]
 r275: [364..365]
 r276: [360..361]
 r277: [356..357]
 r278: [344..345]
 r279: [340..341]
 r280: [336..337]
 r281: [318..319]
 r282: [316..317]
 r283: [314..315]
 r284: [312..313]
 r285: [310..311] [306..307]
 r286: [308..309]
 r287: [304..305]
 r288: [298..299]
 r289: [266..267]
 r290: [294..295]
 r291: [296..297]
 r292: [296..297]
 r293: [292..293]
 r294: [290..291] [286..287]
 r295: [288..289]
 r296: [284..285]
 r297: [282..283]
 r298: [280..281] [276..277]
 r299: [278..279]
 r300: [274..275]
 r301: [270..271]
 r302: [264..265]
 r303: [232..233]
 r304: [260..261]
 r305: [262..263]
 r306: [262..263]
 r307: [258..259]
 r308: [256..257] [252..253]
 r309: [254..255]
 r310: [250..251]
 r311: [248..249]
 r312: [246..247] [242..243]
 r313: [244..245]
 r314: [240..241]
 r315: [236..237]
 r316: [230..231]
 r317: [228..229] [224..225]
 r318: [226..227]
 r319: [222..223]
 r320: [220..221]
 r321: [216..217]
 r322: [212..213]
 r323: [210..211]
 r324: [208..209] [204..205]
 r325: [206..207]
 r326: [202..203]
 r327: [196..197]
 r328: [192..193]
 r329: [190..191]
 r330: [186..187]
 r331: [180..181]
 r332: [178..179] [174..175]
 r333: [176..177]
 r334: [172..173]
 r335: [166..167]
 r336: [162..163]
 r337: [160..161]
 r338: [156..157]
 r339: [152..153]
 r340: [148..149]
 r341: [138..139]
 r342: [134..135]
 r343: [130..131]
 r344: [128..129]
 r345: [128..129]
 r346: [126..127]
 r347: [122..123]
 r348: [118..119]
 r349: [114..115]
 r350: [112..113]
 r351: [112..113]
 r352: [110..111]
 r353: [106..107]
 r354: [102..103]
 r355: [98..99]
 r356: [96..97]
 r357: [96..97]
 r358: [64..65]
 r359: [94..95]
 r360: [92..93] [88..89]
 r361: [90..91]
 r362: [86..87]
 r363: [80..81]
 r364: [76..77]
 r365: [74..75]
 r366: [70..71]
 r367: [60..61]
 r368: [58..59]
 r369: [56..57]
 r370: [54..55]
 r371: [50..51]
 r372: [48..49]
 r373: [46..47]
 r374: [42..43]
 r375: [36..37]
 r376: [32..33]
 r377: [30..31]
 r378: [30..31]
 r379: [6..7]
 r380: [28..29]
 r381: [26..27] [22..23]
 r382: [24..25]
 r383: [20..21]
 r384: [14..15]
 r385: [10..11]
 r386: [8..9]
 r387: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 33
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 74
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 89
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 86
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 100
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 113
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 140
changing reg in insn 143
changing reg in insn 141
changing reg in insn 143
changing reg in insn 146
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 219
changing reg in insn 222
changing reg in insn 220
changing reg in insn 222
changing reg in insn 225
changing reg in insn 227
changing reg in insn 227
changing reg in insn 227
changing reg in insn 241
changing reg in insn 229
changing reg in insn 232
changing reg in insn 230
changing reg in insn 232
changing reg in insn 235
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 240
changing reg in insn 240
changing reg in insn 241
changing reg in insn 172
changing reg in insn 175
changing reg in insn 173
changing reg in insn 175
changing reg in insn 178
changing reg in insn 180
changing reg in insn 180
changing reg in insn 180
changing reg in insn 194
changing reg in insn 182
changing reg in insn 185
changing reg in insn 183
changing reg in insn 185
changing reg in insn 188
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 193
changing reg in insn 194
changing reg in insn 248
changing reg in insn 251
changing reg in insn 249
changing reg in insn 251
changing reg in insn 254
changing reg in insn 256
changing reg in insn 256
changing reg in insn 256
changing reg in insn 264
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 266
changing reg in insn 269
changing reg in insn 272
changing reg in insn 270
changing reg in insn 272
changing reg in insn 275
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 279
changing reg in insn 283
changing reg in insn 284
changing reg in insn 284
changing reg in insn 286
changing reg in insn 286
changing reg in insn 286
changing reg in insn 293
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 291
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 294
changing reg in insn 299
changing reg in insn 302
changing reg in insn 300
changing reg in insn 302
changing reg in insn 305
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 309
changing reg in insn 313
changing reg in insn 314
changing reg in insn 314
changing reg in insn 316
changing reg in insn 316
changing reg in insn 316
changing reg in insn 329
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 321
changing reg in insn 321
changing reg in insn 322
changing reg in insn 322
changing reg in insn 330
changing reg in insn 324
changing reg in insn 325
changing reg in insn 325
changing reg in insn 327
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 331
changing reg in insn 342
changing reg in insn 343
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 355
changing reg in insn 350
changing reg in insn 356
changing reg in insn 361
changing reg in insn 362
changing reg in insn 366
changing reg in insn 367
changing reg in insn 367
changing reg in insn 377
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 378
changing reg in insn 372
changing reg in insn 379
changing reg in insn 384
changing reg in insn 385
changing reg in insn 389
changing reg in insn 390
changing reg in insn 390
changing reg in insn 400
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 401
changing reg in insn 395
changing reg in insn 402
changing reg in insn 409
changing reg in insn 410
changing reg in insn 414
changing reg in insn 417
changing reg in insn 415
changing reg in insn 417
changing reg in insn 420
changing reg in insn 422
changing reg in insn 422
changing reg in insn 423
changing reg in insn 423
changing reg in insn 424
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 431
changing reg in insn 431
changing reg in insn 431
changing reg in insn 438
changing reg in insn 433
changing reg in insn 434
changing reg in insn 434
changing reg in insn 436
changing reg in insn 436
changing reg in insn 437
changing reg in insn 437
changing reg in insn 439
changing reg in insn 450
changing reg in insn 455
changing reg in insn 452
changing reg in insn 459
changing reg in insn 460
changing reg in insn 460
changing reg in insn 465
changing reg in insn 462
changing reg in insn 469
changing reg in insn 470
changing reg in insn 474
changing reg in insn 475
changing reg in insn 475
changing reg in insn 476
changing reg in insn 481
changing reg in insn 482
changing reg in insn 482
changing reg in insn 489
changing reg in insn 484
changing reg in insn 490
changing reg in insn 497
changing reg in insn 498
changing reg in insn 502
changing reg in insn 505
changing reg in insn 503
changing reg in insn 505
changing reg in insn 508
changing reg in insn 510
changing reg in insn 510
changing reg in insn 511
changing reg in insn 511
changing reg in insn 512
changing reg in insn 516
changing reg in insn 517
changing reg in insn 517
changing reg in insn 524
changing reg in insn 519
changing reg in insn 525
changing reg in insn 535
changing reg in insn 538
changing reg in insn 538
changing reg in insn 542
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 83
changing reg in insn 84
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 129
changing reg in insn 130
changing reg in insn 139
changing reg in insn 140
changing reg in insn 145
changing reg in insn 143
changing reg in insn 142
changing reg in insn 141
changing reg in insn 146
changing reg in insn 144
changing reg in insn 143
changing reg in insn 142
changing reg in insn 144
changing reg in insn 145
changing reg in insn 147
changing reg in insn 153
changing reg in insn 154
changing reg in insn 160
changing reg in insn 161
changing reg in insn 169
changing reg in insn 170
changing reg in insn 167
changing reg in insn 168
changing reg in insn 171
changing reg in insn 172
changing reg in insn 177
changing reg in insn 175
changing reg in insn 174
changing reg in insn 173
changing reg in insn 178
changing reg in insn 176
changing reg in insn 175
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 187
changing reg in insn 185
changing reg in insn 184
changing reg in insn 183
changing reg in insn 188
changing reg in insn 186
changing reg in insn 185
changing reg in insn 184
changing reg in insn 186
changing reg in insn 187
changing reg in insn 189
changing reg in insn 192
changing reg in insn 200
changing reg in insn 201
changing reg in insn 207
changing reg in insn 208
changing reg in insn 216
changing reg in insn 217
changing reg in insn 214
changing reg in insn 216
changing reg in insn 215
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 224
changing reg in insn 222
changing reg in insn 221
changing reg in insn 220
changing reg in insn 225
changing reg in insn 223
changing reg in insn 222
changing reg in insn 221
changing reg in insn 223
changing reg in insn 224
changing reg in insn 226
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 234
changing reg in insn 232
changing reg in insn 231
changing reg in insn 230
changing reg in insn 235
changing reg in insn 233
changing reg in insn 232
changing reg in insn 231
changing reg in insn 233
changing reg in insn 234
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 247
changing reg in insn 248
changing reg in insn 253
changing reg in insn 251
changing reg in insn 250
changing reg in insn 249
changing reg in insn 254
changing reg in insn 252
changing reg in insn 251
changing reg in insn 250
changing reg in insn 252
changing reg in insn 253
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 258
changing reg in insn 260
changing reg in insn 263
changing reg in insn 265
changing reg in insn 268
changing reg in insn 269
changing reg in insn 274
changing reg in insn 272
changing reg in insn 271
changing reg in insn 270
changing reg in insn 275
changing reg in insn 273
changing reg in insn 272
changing reg in insn 271
changing reg in insn 273
changing reg in insn 274
changing reg in insn 276
changing reg in insn 282
changing reg in insn 283
changing reg in insn 285
changing reg in insn 286
changing reg in insn 287
changing reg in insn 288
changing reg in insn 290
changing reg in insn 298
changing reg in insn 299
changing reg in insn 304
changing reg in insn 302
changing reg in insn 301
changing reg in insn 300
changing reg in insn 305
changing reg in insn 303
changing reg in insn 302
changing reg in insn 301
changing reg in insn 303
changing reg in insn 304
changing reg in insn 306
changing reg in insn 312
changing reg in insn 313
changing reg in insn 315
changing reg in insn 316
changing reg in insn 317
changing reg in insn 318
changing reg in insn 320
changing reg in insn 323
changing reg in insn 324
changing reg in insn 326
changing reg in insn 341
changing reg in insn 342
changing reg in insn 346
changing reg in insn 347
changing reg in insn 349
changing reg in insn 350
changing reg in insn 351
changing reg in insn 353
changing reg in insn 352
changing reg in insn 354
changing reg in insn 360
changing reg in insn 361
changing reg in insn 365
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 371
changing reg in insn 372
changing reg in insn 373
changing reg in insn 375
changing reg in insn 374
changing reg in insn 376
changing reg in insn 383
changing reg in insn 384
changing reg in insn 388
changing reg in insn 389
changing reg in insn 391
changing reg in insn 392
changing reg in insn 394
changing reg in insn 395
changing reg in insn 396
changing reg in insn 398
changing reg in insn 397
changing reg in insn 399
changing reg in insn 408
changing reg in insn 409
changing reg in insn 413
changing reg in insn 414
changing reg in insn 419
changing reg in insn 417
changing reg in insn 416
changing reg in insn 415
changing reg in insn 420
changing reg in insn 418
changing reg in insn 417
changing reg in insn 416
changing reg in insn 418
changing reg in insn 419
changing reg in insn 421
changing reg in insn 427
changing reg in insn 428
changing reg in insn 430
changing reg in insn 431
changing reg in insn 432
changing reg in insn 433
changing reg in insn 435
changing reg in insn 449
changing reg in insn 450
changing reg in insn 451
changing reg in insn 452
changing reg in insn 454
changing reg in insn 455
changing reg in insn 458
changing reg in insn 459
changing reg in insn 461
changing reg in insn 462
changing reg in insn 464
changing reg in insn 465
changing reg in insn 468
changing reg in insn 469
changing reg in insn 473
changing reg in insn 474
changing reg in insn 480
changing reg in insn 481
changing reg in insn 483
changing reg in insn 484
changing reg in insn 485
changing reg in insn 487
changing reg in insn 486
changing reg in insn 488
changing reg in insn 496
changing reg in insn 497
changing reg in insn 501
changing reg in insn 502
changing reg in insn 507
changing reg in insn 505
changing reg in insn 504
changing reg in insn 503
changing reg in insn 508
changing reg in insn 506
changing reg in insn 505
changing reg in insn 504
changing reg in insn 506
changing reg in insn 507
changing reg in insn 509
changing reg in insn 515
changing reg in insn 516
changing reg in insn 518
changing reg in insn 519
changing reg in insn 520
changing reg in insn 522
changing reg in insn 521
changing reg in insn 523
deleting insn with uid = 54.
deleting insn with uid = 118.
deleting insn with uid = 264.
deleting insn with uid = 329.
deleting insn with uid = 353.
deleting insn with uid = 354.
deleting insn with uid = 355.
deleting insn with uid = 376.
deleting insn with uid = 377.
deleting insn with uid = 378.
deleting insn with uid = 399.
deleting insn with uid = 400.
deleting insn with uid = 401.
deleting insn with uid = 487.
deleting insn with uid = 488.
deleting insn with uid = 489.
deleting insn with uid = 522.
deleting insn with uid = 523.
deleting insn with uid = 524.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 267.
verify found no changes in insn with uid = 295.
verify found no changes in insn with uid = 332.
verify found no changes in insn with uid = 357.
verify found no changes in insn with uid = 380.
verify found no changes in insn with uid = 403.
verify found no changes in insn with uid = 440.
verify found no changes in insn with uid = 491.
verify found no changes in insn with uid = 526.


int pre_process(int*, Preprocess*, Procpar_info*, float**, float**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 37[r8]
;;  ref usage 	r0={222d,211u} r1={66d,65u,31e} r2={25d,14u,4e} r4={22d,11u,1e} r5={23d,12u} r6={1d,172u} r7={1d,57u} r8={11d} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r17={131d,23u} r18={11d} r19={11d} r20={1d,1u,35e} r21={45d,37u} r22={24d,12u} r23={14d,2u} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={14d,3u} r38={12d} r39={11d} r40={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} 
;;    total ref usage 1968{1277d,620u,71e} in 432{421 regular + 11 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) preproc.cpp:24 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) preproc.cpp:24 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) preproc.cpp:24 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
        (reg:DI 2 cx [ out_data ])) preproc.cpp:24 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
        (reg:DI 37 r8 [ scratch_data ])) preproc.cpp:24 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 336 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:33 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              22 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 258
(code_label 336 10 11 3 17 "" [1 uses])
(note 11 336 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) preproc.cpp:33 89 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:SI 0 ax [orig:87 D.6870 ] [87])
        (mem:SI (reg/f:DI 0 ax [258]) [0 *fid_26(D)+0 S4 A32])) preproc.cpp:33 90 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.6870 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) preproc.cpp:33 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 339)
            (pc))) preproc.cpp:33 612 {*jcc_1}
     (nil)
 -> 339)
;;  succ:       23
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 259 260 261 262 263 264 265 266 267 268
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:SI 0 ax [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:37 90 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:DI 0 ax [orig:88 D.6871 ] [88])
        (sign_extend:DI (reg:SI 0 ax [259]))) preproc.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg:DI 1 dx [orig:89 D.6871 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.6871 ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:37 512 {*ashldi3_1}
     (nil))
(insn 20 19 21 4 (set (reg/f:DI 0 ax [260])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:37 89 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.6872 ] [90])
                (plus:DI (reg/f:DI 0 ax [260])
                    (reg:DI 1 dx [orig:89 D.6871 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:37 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.6871 ] [89]))
        (nil)))
(insn 22 21 23 4 (set (reg/f:DI 0 ax [orig:91 D.6873 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [orig:90 D.6872 ] [90]) [0 *_31+0 S8 A64])) preproc.cpp:37 89 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SF 21 xmm0 [orig:92 D.6874 ] [92])
        (mem:SF (reg/f:DI 0 ax [orig:91 D.6873 ] [91]) [0 *_32+0 S4 A32])) preproc.cpp:37 129 {*movsf_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DF 22 xmm1 [orig:93 D.6875 ] [93])
        (float_extend:DF (reg:SF 21 xmm0 [orig:92 D.6874 ] [92]))) preproc.cpp:37 152 {*extendsfdf2_sse}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:37 90 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 0 ax [orig:94 D.6871 ] [94])
        (sign_extend:DI (reg:SI 0 ax [261]))) preproc.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 1 dx [orig:95 D.6871 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.6871 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:37 512 {*ashldi3_1}
     (nil))
(insn 28 27 29 4 (set (reg/f:DI 0 ax [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:37 89 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.6872 ] [96])
                (plus:DI (reg/f:DI 0 ax [262])
                    (reg:DI 1 dx [orig:95 D.6871 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:37 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.6871 ] [95]))
        (nil)))
(insn 30 29 31 4 (set (reg/f:DI 0 ax [orig:97 D.6873 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [orig:96 D.6872 ] [96]) [0 *_37+0 S8 A64])) preproc.cpp:37 89 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SF 21 xmm0 [orig:98 D.6874 ] [98])
        (mem:SF (reg/f:DI 0 ax [orig:97 D.6873 ] [97]) [0 *_38+0 S4 A32])) preproc.cpp:37 129 {*movsf_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DF 21 xmm0 [orig:99 D.6875 ] [99])
        (float_extend:DF (reg:SF 21 xmm0 [orig:98 D.6874 ] [98]))) preproc.cpp:37 152 {*extendsfdf2_sse}
     (nil))
(insn 33 32 34 4 (set (reg:DF 22 xmm1 [orig:100 D.6875 ] [100])
        (mult:DF (reg:DF 22 xmm1 [orig:93 D.6875 ] [93])
            (reg:DF 21 xmm0 [orig:99 D.6875 ] [99]))) preproc.cpp:37 798 {*fop_df_comm_sse}
     (nil))
(insn 34 33 35 4 (set (reg:SI 0 ax [263])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:38 90 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 0 ax [orig:101 D.6871 ] [101])
        (sign_extend:DI (reg:SI 0 ax [263]))) preproc.cpp:38 142 {*extendsidi2_rex64}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 1 dx [orig:102 D.6871 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.6871 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 512 {*ashldi3_1}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [264])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.6872 ] [103])
                (plus:DI (reg/f:DI 0 ax [264])
                    (reg:DI 1 dx [orig:102 D.6871 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.6871 ] [102]))
        (nil)))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [orig:104 D.6873 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6872 ] [103]) [0 *_44+0 S8 A64])) preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.6873 ] [105])
                (plus:DI (reg/f:DI 0 ax [orig:104 D.6873 ] [104])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 218 {*adddi_1}
     (nil))
(insn 41 40 42 4 (set (reg:SF 21 xmm0 [orig:106 D.6874 ] [106])
        (mem:SF (reg/f:DI 0 ax [orig:105 D.6873 ] [105]) [0 *_46+0 S4 A32])) preproc.cpp:38 129 {*movsf_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DF 23 xmm2 [orig:107 D.6875 ] [107])
        (float_extend:DF (reg:SF 21 xmm0 [orig:106 D.6874 ] [106]))) preproc.cpp:38 152 {*extendsfdf2_sse}
     (nil))
(insn 43 42 44 4 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:38 90 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 0 ax [orig:108 D.6871 ] [108])
        (sign_extend:DI (reg:SI 0 ax [265]))) preproc.cpp:38 142 {*extendsidi2_rex64}
     (nil))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 1 dx [orig:109 D.6871 ] [109])
                (ashift:DI (reg:DI 0 ax [orig:108 D.6871 ] [108])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 512 {*ashldi3_1}
     (nil))
(insn 46 45 47 4 (set (reg/f:DI 0 ax [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.6872 ] [110])
                (plus:DI (reg/f:DI 0 ax [266])
                    (reg:DI 1 dx [orig:109 D.6871 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:109 D.6871 ] [109]))
        (nil)))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [orig:111 D.6873 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [orig:110 D.6872 ] [110]) [0 *_51+0 S8 A64])) preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.6873 ] [112])
                (plus:DI (reg/f:DI 0 ax [orig:111 D.6873 ] [111])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 218 {*adddi_1}
     (nil))
(insn 50 49 51 4 (set (reg:SF 21 xmm0 [orig:113 D.6874 ] [113])
        (mem:SF (reg/f:DI 0 ax [orig:112 D.6873 ] [112]) [0 *_53+0 S4 A32])) preproc.cpp:38 129 {*movsf_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DF 21 xmm0 [orig:114 D.6875 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.6874 ] [113]))) preproc.cpp:38 152 {*extendsfdf2_sse}
     (nil))
(insn 52 51 53 4 (set (reg:DF 21 xmm0 [orig:115 D.6875 ] [115])
        (mult:DF (reg:DF 21 xmm0 [orig:114 D.6875 ] [114])
            (reg:DF 23 xmm2 [orig:107 D.6875 ] [107]))) preproc.cpp:38 798 {*fop_df_comm_sse}
     (nil))
(insn 53 52 55 4 (set (reg:DF 21 xmm0 [orig:116 D.6875 ] [116])
        (plus:DF (reg:DF 21 xmm0 [orig:115 D.6875 ] [115])
            (reg:DF 22 xmm1 [orig:100 D.6875 ] [100]))) preproc.cpp:37 798 {*fop_df_comm_sse}
     (nil))
(call_insn 55 53 56 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:38 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 56 55 57 4 (set (reg:DF 0 ax [267])
        (reg:DF 21 xmm0)) preproc.cpp:38 128 {*movdf_internal}
     (nil))
(insn 57 56 58 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])
        (reg:DF 0 ax [267])) preproc.cpp:38 128 {*movdf_internal}
     (nil))
(insn 58 57 59 4 (set (reg:DF 21 xmm0 [268])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) preproc.cpp:39 128 {*movdf_internal}
     (nil))
(insn 59 58 60 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [268])) preproc.cpp:39 128 {*movdf_internal}
     (nil))
(insn 60 59 134 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
        (const_int 2 [0x2])) preproc.cpp:40 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              8 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 134 60 61 5 6 "" [1 uses])
(note 61 134 62 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
            (const_int 48 [0x30]))) preproc.cpp:40 7 {*cmpsi_1}
     (nil))
(jump_insn 63 62 64 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) preproc.cpp:40 612 {*jcc_1}
     (nil)
 -> 137)
;;  succ:       9
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 269 270 271 272 273 274 275 276 277 278 279 280 281 282
(note 64 63 65 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 6 (set (reg:SI 0 ax [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:45 90 {*movsi_internal}
     (nil))
(insn 66 65 67 6 (set (reg:DI 0 ax [orig:117 D.6871 ] [117])
        (sign_extend:DI (reg:SI 0 ax [269]))) preproc.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 67 66 68 6 (parallel [
            (set (reg:DI 1 dx [orig:118 D.6871 ] [118])
                (ashift:DI (reg:DI 0 ax [orig:117 D.6871 ] [117])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 512 {*ashldi3_1}
     (nil))
(insn 68 67 69 6 (set (reg/f:DI 0 ax [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:45 89 {*movdi_internal}
     (nil))
(insn 69 68 70 6 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.6872 ] [119])
                (plus:DI (reg/f:DI 0 ax [270])
                    (reg:DI 1 dx [orig:118 D.6871 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:118 D.6871 ] [118]))
        (nil)))
(insn 70 69 71 6 (set (reg/f:DI 0 ax [orig:120 D.6873 ] [120])
        (mem/f:DI (reg/f:DI 0 ax [orig:119 D.6872 ] [119]) [0 *_64+0 S8 A64])) preproc.cpp:45 89 {*movdi_internal}
     (nil))
(insn 71 70 72 6 (set (reg:SI 1 dx [271])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) preproc.cpp:45 90 {*movsi_internal}
     (nil))
(insn 72 71 73 6 (set (reg:DI 1 dx [orig:121 D.6871 ] [121])
        (sign_extend:DI (reg:SI 1 dx [271]))) preproc.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 73 72 74 6 (parallel [
            (set (reg:DI 1 dx [orig:122 D.6871 ] [122])
                (ashift:DI (reg:DI 1 dx [orig:121 D.6871 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 512 {*ashldi3_1}
     (nil))
(insn 74 73 75 6 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.6873 ] [123])
                (plus:DI (reg/f:DI 0 ax [orig:120 D.6873 ] [120])
                    (reg:DI 1 dx [orig:122 D.6871 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 218 {*adddi_1}
     (nil))
(insn 75 74 76 6 (set (reg:SF 21 xmm0 [orig:124 D.6874 ] [124])
        (mem:SF (reg/f:DI 0 ax [orig:123 D.6873 ] [123]) [0 *_68+0 S4 A32])) preproc.cpp:45 129 {*movsf_internal}
     (nil))
(insn 76 75 77 6 (set (reg:DF 22 xmm1 [orig:125 D.6875 ] [125])
        (float_extend:DF (reg:SF 21 xmm0 [orig:124 D.6874 ] [124]))) preproc.cpp:45 152 {*extendsfdf2_sse}
     (nil))
(insn 77 76 78 6 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:45 90 {*movsi_internal}
     (nil))
(insn 78 77 79 6 (set (reg:DI 0 ax [orig:126 D.6871 ] [126])
        (sign_extend:DI (reg:SI 0 ax [272]))) preproc.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 79 78 80 6 (parallel [
            (set (reg:DI 1 dx [orig:127 D.6871 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 D.6871 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 512 {*ashldi3_1}
     (nil))
(insn 80 79 81 6 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:45 89 {*movdi_internal}
     (nil))
(insn 81 80 82 6 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.6872 ] [128])
                (plus:DI (reg/f:DI 0 ax [273])
                    (reg:DI 1 dx [orig:127 D.6871 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.6871 ] [127]))
        (nil)))
(insn 82 81 83 6 (set (reg/f:DI 0 ax [orig:129 D.6873 ] [129])
        (mem/f:DI (reg/f:DI 0 ax [orig:128 D.6872 ] [128]) [0 *_73+0 S8 A64])) preproc.cpp:45 89 {*movdi_internal}
     (nil))
(insn 83 82 84 6 (set (reg:SI 1 dx [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) preproc.cpp:45 90 {*movsi_internal}
     (nil))
(insn 84 83 85 6 (set (reg:DI 1 dx [orig:130 D.6871 ] [130])
        (sign_extend:DI (reg:SI 1 dx [274]))) preproc.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 6 (parallel [
            (set (reg:DI 1 dx [orig:131 D.6871 ] [131])
                (ashift:DI (reg:DI 1 dx [orig:130 D.6871 ] [130])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 512 {*ashldi3_1}
     (nil))
(insn 86 85 87 6 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.6873 ] [132])
                (plus:DI (reg/f:DI 0 ax [orig:129 D.6873 ] [129])
                    (reg:DI 1 dx [orig:131 D.6871 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 218 {*adddi_1}
     (nil))
(insn 87 86 88 6 (set (reg:SF 21 xmm0 [orig:133 D.6874 ] [133])
        (mem:SF (reg/f:DI 0 ax [orig:132 D.6873 ] [132]) [0 *_77+0 S4 A32])) preproc.cpp:45 129 {*movsf_internal}
     (nil))
(insn 88 87 89 6 (set (reg:DF 21 xmm0 [orig:134 D.6875 ] [134])
        (float_extend:DF (reg:SF 21 xmm0 [orig:133 D.6874 ] [133]))) preproc.cpp:45 152 {*extendsfdf2_sse}
     (nil))
(insn 89 88 90 6 (set (reg:DF 22 xmm1 [orig:135 D.6875 ] [135])
        (mult:DF (reg:DF 22 xmm1 [orig:125 D.6875 ] [125])
            (reg:DF 21 xmm0 [orig:134 D.6875 ] [134]))) preproc.cpp:45 798 {*fop_df_comm_sse}
     (nil))
(insn 90 89 91 6 (set (reg:SI 0 ax [275])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:46 90 {*movsi_internal}
     (nil))
(insn 91 90 92 6 (set (reg:DI 0 ax [orig:136 D.6871 ] [136])
        (sign_extend:DI (reg:SI 0 ax [275]))) preproc.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 6 (parallel [
            (set (reg:DI 1 dx [orig:137 D.6871 ] [137])
                (ashift:DI (reg:DI 0 ax [orig:136 D.6871 ] [136])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 512 {*ashldi3_1}
     (nil))
(insn 93 92 94 6 (set (reg/f:DI 0 ax [276])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:46 89 {*movdi_internal}
     (nil))
(insn 94 93 95 6 (parallel [
            (set (reg/f:DI 0 ax [orig:138 D.6872 ] [138])
                (plus:DI (reg/f:DI 0 ax [276])
                    (reg:DI 1 dx [orig:137 D.6871 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:137 D.6871 ] [137]))
        (nil)))
(insn 95 94 96 6 (set (reg/f:DI 0 ax [orig:139 D.6873 ] [139])
        (mem/f:DI (reg/f:DI 0 ax [orig:138 D.6872 ] [138]) [0 *_83+0 S8 A64])) preproc.cpp:46 89 {*movdi_internal}
     (nil))
(insn 96 95 97 6 (set (reg:SI 1 dx [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) preproc.cpp:46 90 {*movsi_internal}
     (nil))
(insn 97 96 98 6 (set (reg:DI 1 dx [orig:140 D.6876 ] [140])
        (sign_extend:DI (reg:SI 1 dx [277]))) preproc.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 6 (parallel [
            (set (reg:DI 1 dx [orig:141 D.6876 ] [141])
                (plus:DI (reg:DI 1 dx [orig:140 D.6876 ] [140])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 218 {*adddi_1}
     (nil))
(insn 99 98 100 6 (parallel [
            (set (reg:DI 1 dx [orig:142 D.6876 ] [142])
                (ashift:DI (reg:DI 1 dx [orig:141 D.6876 ] [141])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 512 {*ashldi3_1}
     (nil))
(insn 100 99 101 6 (parallel [
            (set (reg/f:DI 0 ax [orig:143 D.6873 ] [143])
                (plus:DI (reg/f:DI 0 ax [orig:139 D.6873 ] [139])
                    (reg:DI 1 dx [orig:142 D.6876 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 218 {*adddi_1}
     (nil))
(insn 101 100 102 6 (set (reg:SF 21 xmm0 [orig:144 D.6874 ] [144])
        (mem:SF (reg/f:DI 0 ax [orig:143 D.6873 ] [143]) [0 *_88+0 S4 A32])) preproc.cpp:46 129 {*movsf_internal}
     (nil))
(insn 102 101 103 6 (set (reg:DF 23 xmm2 [orig:145 D.6875 ] [145])
        (float_extend:DF (reg:SF 21 xmm0 [orig:144 D.6874 ] [144]))) preproc.cpp:46 152 {*extendsfdf2_sse}
     (nil))
(insn 103 102 104 6 (set (reg:SI 0 ax [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:46 90 {*movsi_internal}
     (nil))
(insn 104 103 105 6 (set (reg:DI 0 ax [orig:146 D.6871 ] [146])
        (sign_extend:DI (reg:SI 0 ax [278]))) preproc.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 105 104 106 6 (parallel [
            (set (reg:DI 1 dx [orig:147 D.6871 ] [147])
                (ashift:DI (reg:DI 0 ax [orig:146 D.6871 ] [146])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 512 {*ashldi3_1}
     (nil))
(insn 106 105 107 6 (set (reg/f:DI 0 ax [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:46 89 {*movdi_internal}
     (nil))
(insn 107 106 108 6 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.6872 ] [148])
                (plus:DI (reg/f:DI 0 ax [279])
                    (reg:DI 1 dx [orig:147 D.6871 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:147 D.6871 ] [147]))
        (nil)))
(insn 108 107 109 6 (set (reg/f:DI 0 ax [orig:149 D.6873 ] [149])
        (mem/f:DI (reg/f:DI 0 ax [orig:148 D.6872 ] [148]) [0 *_93+0 S8 A64])) preproc.cpp:46 89 {*movdi_internal}
     (nil))
(insn 109 108 110 6 (set (reg:SI 1 dx [280])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) preproc.cpp:46 90 {*movsi_internal}
     (nil))
(insn 110 109 111 6 (set (reg:DI 1 dx [orig:150 D.6876 ] [150])
        (sign_extend:DI (reg:SI 1 dx [280]))) preproc.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 6 (parallel [
            (set (reg:DI 1 dx [orig:151 D.6876 ] [151])
                (plus:DI (reg:DI 1 dx [orig:150 D.6876 ] [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 218 {*adddi_1}
     (nil))
(insn 112 111 113 6 (parallel [
            (set (reg:DI 1 dx [orig:152 D.6876 ] [152])
                (ashift:DI (reg:DI 1 dx [orig:151 D.6876 ] [151])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 512 {*ashldi3_1}
     (nil))
(insn 113 112 114 6 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.6873 ] [153])
                (plus:DI (reg/f:DI 0 ax [orig:149 D.6873 ] [149])
                    (reg:DI 1 dx [orig:152 D.6876 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 218 {*adddi_1}
     (nil))
(insn 114 113 115 6 (set (reg:SF 21 xmm0 [orig:154 D.6874 ] [154])
        (mem:SF (reg/f:DI 0 ax [orig:153 D.6873 ] [153]) [0 *_98+0 S4 A32])) preproc.cpp:46 129 {*movsf_internal}
     (nil))
(insn 115 114 116 6 (set (reg:DF 21 xmm0 [orig:155 D.6875 ] [155])
        (float_extend:DF (reg:SF 21 xmm0 [orig:154 D.6874 ] [154]))) preproc.cpp:46 152 {*extendsfdf2_sse}
     (nil))
(insn 116 115 117 6 (set (reg:DF 21 xmm0 [orig:156 D.6875 ] [156])
        (mult:DF (reg:DF 21 xmm0 [orig:155 D.6875 ] [155])
            (reg:DF 23 xmm2 [orig:145 D.6875 ] [145]))) preproc.cpp:46 798 {*fop_df_comm_sse}
     (nil))
(insn 117 116 119 6 (set (reg:DF 21 xmm0 [orig:157 D.6875 ] [157])
        (plus:DF (reg:DF 21 xmm0 [orig:156 D.6875 ] [156])
            (reg:DF 22 xmm1 [orig:135 D.6875 ] [135]))) preproc.cpp:45 798 {*fop_df_comm_sse}
     (nil))
(call_insn 119 117 120 6 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:46 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 120 119 121 6 (set (reg:DF 0 ax [281])
        (reg:DF 21 xmm0)) preproc.cpp:46 128 {*movdf_internal}
     (nil))
(insn 121 120 122 6 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])
        (reg:DF 0 ax [281])) preproc.cpp:46 128 {*movdf_internal}
     (nil))
(insn 122 121 123 6 (set (reg:DF 21 xmm0 [282])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) preproc.cpp:47 128 {*movdf_internal}
     (nil))
(insn 123 122 124 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [282])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) preproc.cpp:47 56 {*cmpiudf_sse}
     (nil))
(jump_insn 124 123 128 6 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 131)
            (pc))) preproc.cpp:47 612 {*jcc_1}
     (nil)
 -> 131)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 283
(note 128 124 129 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 7 (set (reg:DF 21 xmm0 [283])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) preproc.cpp:48 128 {*movdf_internal}
     (nil))
(insn 130 129 131 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [283])) preproc.cpp:48 128 {*movdf_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 131 130 132 8 4 "" [1 uses])
(note 132 131 133 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 560 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:40 217 {*addsi_1}
     (nil))
(jump_insn 560 133 561 8 (set (pc)
        (label_ref 134)) preproc.cpp:40 654 {jump}
     (nil)
 -> 134)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 561 560 137)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 159 160 161 284 285 286 287
(code_label 137 561 138 9 3 "" [1 uses])
(note 138 137 139 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 9 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 140 139 141 9 (set (reg:DI 1 dx [orig:158 D.6871 ] [158])
        (sign_extend:DI (reg:SI 0 ax [284]))) preproc.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 141 140 142 9 (set (reg:DI 0 ax [285])
        (reg:DI 1 dx [orig:158 D.6871 ] [158])) preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 142 141 143 9 (parallel [
            (set (reg:DI 0 ax [285])
                (ashift:DI (reg:DI 0 ax [285])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:52 512 {*ashldi3_1}
     (nil))
(insn 143 142 144 9 (parallel [
            (set (reg:DI 0 ax [285])
                (plus:DI (reg:DI 0 ax [285])
                    (reg:DI 1 dx [orig:158 D.6871 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:52 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:158 D.6871 ] [158])
            (const_int 9 [0x9]))
        (nil)))
(insn 144 143 145 9 (parallel [
            (set (reg:DI 0 ax [286])
                (ashift:DI (reg:DI 0 ax [285])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:52 512 {*ashldi3_1}
     (nil))
(insn 145 144 146 9 (set (reg:DI 0 ax [285])
        (reg:DI 0 ax [286])) preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 146 145 147 9 (set (reg:DI 1 dx [orig:159 D.6871 ] [159])
        (reg:DI 0 ax [285])) preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 147 146 148 9 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 148 147 149 9 (parallel [
            (set (reg/f:DI 0 ax [orig:160 D.6877 ] [160])
                (plus:DI (reg/f:DI 0 ax [287])
                    (reg:DI 1 dx [orig:159 D.6871 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:52 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:159 D.6871 ] [159]))
        (nil)))
(insn 149 148 150 9 (set (reg:SI 0 ax [orig:161 D.6870 ] [161])
        (mem/j:SI (reg/f:DI 0 ax [orig:160 D.6877 ] [160]) [0 _110->fid_scale+0 S4 A32])) preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 150 149 151 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:161 D.6870 ] [161])
            (const_int 0 [0]))) preproc.cpp:52 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 151 150 152 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 245)
            (pc))) preproc.cpp:52 612 {*jcc_1}
     (nil)
 -> 245)
;;  succ:       10 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 288
(note 152 151 153 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 153 152 154 10 (set (reg:DF 21 xmm0 [288])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) preproc.cpp:57 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 154 153 155 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [288])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) preproc.cpp:57 56 {*cmpiudf_sse}
     (nil))
(jump_insn 155 154 548 10 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 562)
            (pc))) preproc.cpp:57 612 {*jcc_1}
     (nil)
 -> 562)
;;  succ:       11 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 548 155 195 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU)
;;              13 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 289
(code_label 195 548 159 12 11 "" [1 uses])
(note 159 195 160 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 12 (set (reg:DF 21 xmm0 [289])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) preproc.cpp:58 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 161 160 162 12 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [289])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) preproc.cpp:58 56 {*cmpiudf_sse}
     (nil))
(jump_insn 162 161 166 12 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 245)
            (pc))) preproc.cpp:58 612 {*jcc_1}
     (nil)
 -> 245)
;;  succ:       13 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 170 171 172 173 174 175 176 177 290 291 292 293 294 295 296 297 298 299 300 301
(note 166 162 167 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 13 (set (reg:DF 22 xmm1 [291])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) preproc.cpp:59 128 {*movdf_internal}
     (nil))
(insn 168 167 169 13 (set (reg:DF 21 xmm0 [292])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) preproc.cpp:59 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 169 168 170 13 (set (reg:DF 21 xmm0 [290])
        (mult:DF (reg:DF 21 xmm0 [292])
            (reg:DF 22 xmm1 [291]))) preproc.cpp:59 798 {*fop_df_comm_sse}
     (nil))
(insn 170 169 171 13 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [290])) preproc.cpp:59 128 {*movdf_internal}
     (nil))
(insn 171 170 172 13 (set (reg:SI 0 ax [293])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:60 90 {*movsi_internal}
     (nil))
(insn 172 171 173 13 (set (reg:DI 1 dx [orig:170 D.6871 ] [170])
        (sign_extend:DI (reg:SI 0 ax [293]))) preproc.cpp:60 142 {*extendsidi2_rex64}
     (nil))
(insn 173 172 174 13 (set (reg:DI 0 ax [294])
        (reg:DI 1 dx [orig:170 D.6871 ] [170])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 174 173 175 13 (parallel [
            (set (reg:DI 0 ax [294])
                (ashift:DI (reg:DI 0 ax [294])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 512 {*ashldi3_1}
     (nil))
(insn 175 174 176 13 (parallel [
            (set (reg:DI 0 ax [294])
                (plus:DI (reg:DI 0 ax [294])
                    (reg:DI 1 dx [orig:170 D.6871 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:170 D.6871 ] [170])
            (const_int 9 [0x9]))
        (nil)))
(insn 176 175 177 13 (parallel [
            (set (reg:DI 0 ax [295])
                (ashift:DI (reg:DI 0 ax [294])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 512 {*ashldi3_1}
     (nil))
(insn 177 176 178 13 (set (reg:DI 0 ax [294])
        (reg:DI 0 ax [295])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 178 177 179 13 (set (reg:DI 1 dx [orig:171 D.6871 ] [171])
        (reg:DI 0 ax [294])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 179 178 180 13 (set (reg/f:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 180 179 181 13 (parallel [
            (set (reg/f:DI 2 cx [orig:172 D.6877 ] [172])
                (plus:DI (reg:DI 1 dx [orig:171 D.6871 ] [171])
                    (reg/f:DI 0 ax [296])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:171 D.6871 ] [171]))
        (nil)))
(insn 181 180 182 13 (set (reg:SI 0 ax [297])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:60 90 {*movsi_internal}
     (nil))
(insn 182 181 183 13 (set (reg:DI 1 dx [orig:173 D.6871 ] [173])
        (sign_extend:DI (reg:SI 0 ax [297]))) preproc.cpp:60 142 {*extendsidi2_rex64}
     (nil))
(insn 183 182 184 13 (set (reg:DI 0 ax [298])
        (reg:DI 1 dx [orig:173 D.6871 ] [173])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 184 183 185 13 (parallel [
            (set (reg:DI 0 ax [298])
                (ashift:DI (reg:DI 0 ax [298])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 512 {*ashldi3_1}
     (nil))
(insn 185 184 186 13 (parallel [
            (set (reg:DI 0 ax [298])
                (plus:DI (reg:DI 0 ax [298])
                    (reg:DI 1 dx [orig:173 D.6871 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:173 D.6871 ] [173])
            (const_int 9 [0x9]))
        (nil)))
(insn 186 185 187 13 (parallel [
            (set (reg:DI 0 ax [299])
                (ashift:DI (reg:DI 0 ax [298])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 512 {*ashldi3_1}
     (nil))
(insn 187 186 188 13 (set (reg:DI 0 ax [298])
        (reg:DI 0 ax [299])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 188 187 189 13 (set (reg:DI 1 dx [orig:174 D.6871 ] [174])
        (reg:DI 0 ax [298])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 189 188 190 13 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 190 189 191 13 (parallel [
            (set (reg/f:DI 0 ax [orig:175 D.6877 ] [175])
                (plus:DI (reg/f:DI 0 ax [300])
                    (reg:DI 1 dx [orig:174 D.6871 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:174 D.6871 ] [174]))
        (nil)))
(insn 191 190 192 13 (set (reg:SF 22 xmm1 [orig:176 D.6874 ] [176])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:175 D.6877 ] [175])
                (const_int 4 [0x4])) [0 _128->scale_factor+0 S4 A32])) preproc.cpp:60 129 {*movsf_internal}
     (nil))
(insn 192 191 193 13 (set (reg:SF 21 xmm0 [301])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) preproc.cpp:60 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 193 192 194 13 (set (reg:SF 21 xmm0 [orig:177 D.6874 ] [177])
        (mult:SF (reg:SF 21 xmm0 [301])
            (reg:SF 22 xmm1 [orig:176 D.6874 ] [176]))) preproc.cpp:60 797 {*fop_sf_comm_sse}
     (nil))
(insn 194 193 563 13 (set (mem/j:SF (plus:DI (reg/f:DI 2 cx [orig:172 D.6877 ] [172])
                (const_int 4 [0x4])) [0 _125->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [orig:177 D.6874 ] [177])) preproc.cpp:60 129 {*movsf_internal}
     (nil))
(jump_insn 563 194 564 13 (set (pc)
        (label_ref 195)) preproc.cpp:58 654 {jump}
     (nil)
 -> 195)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 564 563 562)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 302
(code_label 562 564 199 14 33 "" [1 uses])
(note 199 562 200 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 200 199 201 14 (set (reg:DF 21 xmm0 [302])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) preproc.cpp:62 128 {*movdf_internal}
     (nil))
(insn 201 200 202 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [302])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64]))) preproc.cpp:62 56 {*cmpiudf_sse}
     (nil))
(jump_insn 202 201 552 14 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 245)
            (pc))) preproc.cpp:62 612 {*jcc_1}
     (nil)
 -> 245)
;;  succ:       15 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 552 202 242 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
;;  succ:       16 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;;              17 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 303
(code_label 242 552 206 16 14 "" [1 uses])
(note 206 242 207 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 208 16 (set (reg:DF 21 xmm0 [303])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) preproc.cpp:63 128 {*movdf_internal}
     (nil))
(insn 208 207 209 16 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [303])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64]))) preproc.cpp:63 56 {*cmpiudf_sse}
     (nil))
(jump_insn 209 208 213 16 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 245)
            (pc))) preproc.cpp:63 612 {*jcc_1}
     (nil)
 -> 245)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 162 163 164 165 166 167 168 169 304 305 306 307 308 309 310 311 312 313 314 315
(note 213 209 214 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 215 17 (set (reg:DF 21 xmm0 [305])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) preproc.cpp:64 128 {*movdf_internal}
     (nil))
(insn 215 214 216 17 (set (reg:DF 22 xmm1 [306])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) preproc.cpp:64 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 216 215 217 17 (set (reg:DF 21 xmm0 [304])
        (div:DF (reg:DF 21 xmm0 [305])
            (reg:DF 22 xmm1 [306]))) preproc.cpp:64 805 {*fop_df_1_sse}
     (nil))
(insn 217 216 218 17 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 21 xmm0 [304])) preproc.cpp:64 128 {*movdf_internal}
     (nil))
(insn 218 217 219 17 (set (reg:SI 0 ax [307])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:65 90 {*movsi_internal}
     (nil))
(insn 219 218 220 17 (set (reg:DI 1 dx [orig:162 D.6871 ] [162])
        (sign_extend:DI (reg:SI 0 ax [307]))) preproc.cpp:65 142 {*extendsidi2_rex64}
     (nil))
(insn 220 219 221 17 (set (reg:DI 0 ax [308])
        (reg:DI 1 dx [orig:162 D.6871 ] [162])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 221 220 222 17 (parallel [
            (set (reg:DI 0 ax [308])
                (ashift:DI (reg:DI 0 ax [308])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 512 {*ashldi3_1}
     (nil))
(insn 222 221 223 17 (parallel [
            (set (reg:DI 0 ax [308])
                (plus:DI (reg:DI 0 ax [308])
                    (reg:DI 1 dx [orig:162 D.6871 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:162 D.6871 ] [162])
            (const_int 9 [0x9]))
        (nil)))
(insn 223 222 224 17 (parallel [
            (set (reg:DI 0 ax [309])
                (ashift:DI (reg:DI 0 ax [308])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 512 {*ashldi3_1}
     (nil))
(insn 224 223 225 17 (set (reg:DI 0 ax [308])
        (reg:DI 0 ax [309])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 225 224 226 17 (set (reg:DI 1 dx [orig:163 D.6871 ] [163])
        (reg:DI 0 ax [308])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 226 225 227 17 (set (reg/f:DI 0 ax [310])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 227 226 228 17 (parallel [
            (set (reg/f:DI 2 cx [orig:164 D.6877 ] [164])
                (plus:DI (reg:DI 1 dx [orig:163 D.6871 ] [163])
                    (reg/f:DI 0 ax [310])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:163 D.6871 ] [163]))
        (nil)))
(insn 228 227 229 17 (set (reg:SI 0 ax [311])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:65 90 {*movsi_internal}
     (nil))
(insn 229 228 230 17 (set (reg:DI 1 dx [orig:165 D.6871 ] [165])
        (sign_extend:DI (reg:SI 0 ax [311]))) preproc.cpp:65 142 {*extendsidi2_rex64}
     (nil))
(insn 230 229 231 17 (set (reg:DI 0 ax [312])
        (reg:DI 1 dx [orig:165 D.6871 ] [165])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 231 230 232 17 (parallel [
            (set (reg:DI 0 ax [312])
                (ashift:DI (reg:DI 0 ax [312])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 512 {*ashldi3_1}
     (nil))
(insn 232 231 233 17 (parallel [
            (set (reg:DI 0 ax [312])
                (plus:DI (reg:DI 0 ax [312])
                    (reg:DI 1 dx [orig:165 D.6871 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:165 D.6871 ] [165])
            (const_int 9 [0x9]))
        (nil)))
(insn 233 232 234 17 (parallel [
            (set (reg:DI 0 ax [313])
                (ashift:DI (reg:DI 0 ax [312])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 512 {*ashldi3_1}
     (nil))
(insn 234 233 235 17 (set (reg:DI 0 ax [312])
        (reg:DI 0 ax [313])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 235 234 236 17 (set (reg:DI 1 dx [orig:166 D.6871 ] [166])
        (reg:DI 0 ax [312])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 236 235 237 17 (set (reg/f:DI 0 ax [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 237 236 238 17 (parallel [
            (set (reg/f:DI 0 ax [orig:167 D.6877 ] [167])
                (plus:DI (reg/f:DI 0 ax [314])
                    (reg:DI 1 dx [orig:166 D.6871 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:166 D.6871 ] [166]))
        (nil)))
(insn 238 237 239 17 (set (reg:SF 21 xmm0 [orig:168 D.6874 ] [168])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:167 D.6877 ] [167])
                (const_int 4 [0x4])) [0 _118->scale_factor+0 S4 A32])) preproc.cpp:65 129 {*movsf_internal}
     (nil))
(insn 239 238 240 17 (set (reg:SF 22 xmm1 [315])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) preproc.cpp:65 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 240 239 241 17 (set (reg:SF 21 xmm0 [orig:169 D.6874 ] [169])
        (div:SF (reg:SF 21 xmm0 [orig:168 D.6874 ] [168])
            (reg:SF 22 xmm1 [315]))) preproc.cpp:65 804 {*fop_sf_1_sse}
     (nil))
(insn 241 240 565 17 (set (mem/j:SF (plus:DI (reg/f:DI 2 cx [orig:164 D.6877 ] [164])
                (const_int 4 [0x4])) [0 _115->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [orig:169 D.6874 ] [169])) preproc.cpp:65 129 {*movsf_internal}
     (nil))
(jump_insn 565 241 566 17 (set (pc)
        (label_ref 242)) preproc.cpp:63 654 {jump}
     (nil)
 -> 242)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 566 565 245)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;;              12
;;              14
;;              16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 178 179 180 181 182 183 184 185 186 187 188 316 317 318 319 320 321 322 323 324 325 326
(code_label 245 566 246 18 7 "" [4 uses])
(note 246 245 247 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 18 (set (reg:SI 0 ax [316])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:72 90 {*movsi_internal}
     (nil))
(insn 248 247 249 18 (set (reg:DI 1 dx [orig:178 D.6871 ] [178])
        (sign_extend:DI (reg:SI 0 ax [316]))) preproc.cpp:72 142 {*extendsidi2_rex64}
     (nil))
(insn 249 248 250 18 (set (reg:DI 0 ax [317])
        (reg:DI 1 dx [orig:178 D.6871 ] [178])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 250 249 251 18 (parallel [
            (set (reg:DI 0 ax [317])
                (ashift:DI (reg:DI 0 ax [317])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 512 {*ashldi3_1}
     (nil))
(insn 251 250 252 18 (parallel [
            (set (reg:DI 0 ax [317])
                (plus:DI (reg:DI 0 ax [317])
                    (reg:DI 1 dx [orig:178 D.6871 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:178 D.6871 ] [178])
            (const_int 9 [0x9]))
        (nil)))
(insn 252 251 253 18 (parallel [
            (set (reg:DI 0 ax [318])
                (ashift:DI (reg:DI 0 ax [317])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 512 {*ashldi3_1}
     (nil))
(insn 253 252 254 18 (set (reg:DI 0 ax [317])
        (reg:DI 0 ax [318])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 254 253 255 18 (set (reg:DI 1 dx [orig:179 D.6871 ] [179])
        (reg:DI 0 ax [317])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 255 254 256 18 (set (reg/f:DI 0 ax [319])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 256 255 257 18 (parallel [
            (set (reg/f:DI 1 dx [orig:180 D.6877 ] [180])
                (plus:DI (reg:DI 1 dx [orig:179 D.6871 ] [179])
                    (reg/f:DI 0 ax [319])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:179 D.6871 ] [179]))
        (nil)))
(insn 257 256 258 18 (set (reg:SI 0 ax [320])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:72 90 {*movsi_internal}
     (nil))
(insn 258 257 259 18 (set (reg:DI 0 ax [orig:181 D.6871 ] [181])
        (sign_extend:DI (reg:SI 0 ax [320]))) preproc.cpp:72 142 {*extendsidi2_rex64}
     (nil))
(insn 259 258 260 18 (parallel [
            (set (reg:DI 2 cx [orig:182 D.6871 ] [182])
                (ashift:DI (reg:DI 0 ax [orig:181 D.6871 ] [181])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 512 {*ashldi3_1}
     (nil))
(insn 260 259 261 18 (set (reg/f:DI 0 ax [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 261 260 262 18 (parallel [
            (set (reg/f:DI 0 ax [orig:183 D.6872 ] [183])
                (plus:DI (reg/f:DI 0 ax [321])
                    (reg:DI 2 cx [orig:182 D.6871 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 2 cx [orig:182 D.6871 ] [182]))
        (nil)))
(insn 262 261 263 18 (set (reg/f:DI 0 ax [orig:184 D.6873 ] [184])
        (mem/f:DI (reg/f:DI 0 ax [orig:183 D.6872 ] [183]) [0 *_137+0 S8 A64])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 263 262 265 18 (set (reg:DI 2 cx [322])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 265 263 266 18 (set (reg:DI 4 si)
        (reg:DI 2 cx [322])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 266 265 267 18 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:184 D.6873 ] [184])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(call_insn 267 266 268 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z5scalePfP12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fae98dad6c0 scale>) [0 scale S1 A8])
            (const_int 0 [0]))) preproc.cpp:72 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 268 267 269 18 (set (reg:SI 0 ax [323])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:76 90 {*movsi_internal}
     (nil))
(insn 269 268 270 18 (set (reg:DI 1 dx [orig:185 D.6871 ] [185])
        (sign_extend:DI (reg:SI 0 ax [323]))) preproc.cpp:76 142 {*extendsidi2_rex64}
     (nil))
(insn 270 269 271 18 (set (reg:DI 0 ax [324])
        (reg:DI 1 dx [orig:185 D.6871 ] [185])) preproc.cpp:76 89 {*movdi_internal}
     (nil))
(insn 271 270 272 18 (parallel [
            (set (reg:DI 0 ax [324])
                (ashift:DI (reg:DI 0 ax [324])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:76 512 {*ashldi3_1}
     (nil))
(insn 272 271 273 18 (parallel [
            (set (reg:DI 0 ax [324])
                (plus:DI (reg:DI 0 ax [324])
                    (reg:DI 1 dx [orig:185 D.6871 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:76 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:185 D.6871 ] [185])
            (const_int 9 [0x9]))
        (nil)))
(insn 273 272 274 18 (parallel [
            (set (reg:DI 0 ax [325])
                (ashift:DI (reg:DI 0 ax [324])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:76 512 {*ashldi3_1}
     (nil))
(insn 274 273 275 18 (set (reg:DI 0 ax [324])
        (reg:DI 0 ax [325])) preproc.cpp:76 89 {*movdi_internal}
     (nil))
(insn 275 274 276 18 (set (reg:DI 1 dx [orig:186 D.6871 ] [186])
        (reg:DI 0 ax [324])) preproc.cpp:76 89 {*movdi_internal}
     (nil))
(insn 276 275 277 18 (set (reg/f:DI 0 ax [326])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:76 89 {*movdi_internal}
     (nil))
(insn 277 276 278 18 (parallel [
            (set (reg/f:DI 0 ax [orig:187 D.6877 ] [187])
                (plus:DI (reg/f:DI 0 ax [326])
                    (reg:DI 1 dx [orig:186 D.6871 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:76 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:186 D.6871 ] [186]))
        (nil)))
(insn 278 277 279 18 (set (reg:SI 0 ax [orig:188 D.6870 ] [188])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:187 D.6877 ] [187])
                (const_int 16 [0x10])) [0 _143->bc+0 S4 A32])) preproc.cpp:76 90 {*movsi_internal}
     (nil))
(insn 279 278 280 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:188 D.6870 ] [188])
            (const_int 0 [0]))) preproc.cpp:76 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 280 279 281 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) preproc.cpp:76 612 {*jcc_1}
     (nil)
 -> 296)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 189 190 191 192 193 194 195 327 328 329 330
(note 281 280 282 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 282 281 283 19 (set (reg:SI 0 ax [327])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:77 90 {*movsi_internal}
     (nil))
(insn 283 282 284 19 (set (reg:DI 0 ax [orig:189 D.6871 ] [189])
        (sign_extend:DI (reg:SI 0 ax [327]))) preproc.cpp:77 142 {*extendsidi2_rex64}
     (nil))
(insn 284 283 285 19 (parallel [
            (set (reg:DI 1 dx [orig:190 D.6871 ] [190])
                (mult:DI (reg:DI 0 ax [orig:189 D.6871 ] [189])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:77 306 {*muldi3_1}
     (nil))
(insn 285 284 286 19 (set (reg/f:DI 0 ax [328])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:77 89 {*movdi_internal}
     (nil))
(insn 286 285 287 19 (parallel [
            (set (reg/f:DI 1 dx [orig:191 D.6878 ] [191])
                (plus:DI (reg:DI 1 dx [orig:190 D.6871 ] [190])
                    (reg/f:DI 0 ax [328])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:77 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:190 D.6871 ] [190]))
        (nil)))
(insn 287 286 288 19 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:77 90 {*movsi_internal}
     (nil))
(insn 288 287 289 19 (set (reg:DI 0 ax [orig:192 D.6871 ] [192])
        (sign_extend:DI (reg:SI 0 ax [329]))) preproc.cpp:77 142 {*extendsidi2_rex64}
     (nil))
(insn 289 288 290 19 (parallel [
            (set (reg:DI 2 cx [orig:193 D.6871 ] [193])
                (ashift:DI (reg:DI 0 ax [orig:192 D.6871 ] [192])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:77 512 {*ashldi3_1}
     (nil))
(insn 290 289 291 19 (set (reg/f:DI 0 ax [330])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:77 89 {*movdi_internal}
     (nil))
(insn 291 290 292 19 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.6872 ] [194])
                (plus:DI (reg/f:DI 0 ax [330])
                    (reg:DI 2 cx [orig:193 D.6871 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:77 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 2 cx [orig:193 D.6871 ] [193]))
        (nil)))
(insn 292 291 293 19 (set (reg/f:DI 0 ax [orig:195 D.6873 ] [195])
        (mem/f:DI (reg/f:DI 0 ax [orig:194 D.6872 ] [194]) [0 *_150+0 S8 A64])) preproc.cpp:77 89 {*movdi_internal}
     (nil))
(insn 293 292 294 19 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:191 D.6878 ] [191])) preproc.cpp:77 89 {*movdi_internal}
     (nil))
(insn 294 293 295 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:195 D.6873 ] [195])) preproc.cpp:77 89 {*movdi_internal}
     (nil))
(call_insn 295 294 296 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16baseline_correctPfP12Procpar_info") [flags 0x3]  <function_decl 0x7fae98dadca8 baseline_correct>) [0 baseline_correct S1 A8])
            (const_int 0 [0]))) preproc.cpp:77 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;;              19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 196 197 198 199 331 332 333 334
(code_label 296 295 297 20 15 "" [1 uses])
(note 297 296 298 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 20 (set (reg:SI 0 ax [331])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:82 90 {*movsi_internal}
     (nil))
(insn 299 298 300 20 (set (reg:DI 1 dx [orig:196 D.6871 ] [196])
        (sign_extend:DI (reg:SI 0 ax [331]))) preproc.cpp:82 142 {*extendsidi2_rex64}
     (nil))
(insn 300 299 301 20 (set (reg:DI 0 ax [332])
        (reg:DI 1 dx [orig:196 D.6871 ] [196])) preproc.cpp:82 89 {*movdi_internal}
     (nil))
(insn 301 300 302 20 (parallel [
            (set (reg:DI 0 ax [332])
                (ashift:DI (reg:DI 0 ax [332])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:82 512 {*ashldi3_1}
     (nil))
(insn 302 301 303 20 (parallel [
            (set (reg:DI 0 ax [332])
                (plus:DI (reg:DI 0 ax [332])
                    (reg:DI 1 dx [orig:196 D.6871 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:82 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:196 D.6871 ] [196])
            (const_int 9 [0x9]))
        (nil)))
(insn 303 302 304 20 (parallel [
            (set (reg:DI 0 ax [333])
                (ashift:DI (reg:DI 0 ax [332])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:82 512 {*ashldi3_1}
     (nil))
(insn 304 303 305 20 (set (reg:DI 0 ax [332])
        (reg:DI 0 ax [333])) preproc.cpp:82 89 {*movdi_internal}
     (nil))
(insn 305 304 306 20 (set (reg:DI 1 dx [orig:197 D.6871 ] [197])
        (reg:DI 0 ax [332])) preproc.cpp:82 89 {*movdi_internal}
     (nil))
(insn 306 305 307 20 (set (reg/f:DI 0 ax [334])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:82 89 {*movdi_internal}
     (nil))
(insn 307 306 308 20 (parallel [
            (set (reg/f:DI 0 ax [orig:198 D.6877 ] [198])
                (plus:DI (reg/f:DI 0 ax [334])
                    (reg:DI 1 dx [orig:197 D.6871 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:82 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:197 D.6871 ] [197]))
        (nil)))
(insn 308 307 309 20 (set (reg:SI 0 ax [orig:199 D.6870 ] [199])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:198 D.6877 ] [198])
                (const_int 32 [0x20])) [0 _155->max_normalize+0 S4 A32])) preproc.cpp:82 90 {*movsi_internal}
     (nil))
(insn 309 308 310 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:199 D.6870 ] [199])
            (const_int 0 [0]))) preproc.cpp:82 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 310 309 311 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 333)
            (pc))) preproc.cpp:82 612 {*jcc_1}
     (nil)
 -> 333)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 200 201 202 203 204 205 206 207 208 209 210 335 336 337 338 339 340
(note 311 310 312 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 312 311 313 21 (set (reg:SI 0 ax [335])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:83 90 {*movsi_internal}
     (nil))
(insn 313 312 314 21 (set (reg:DI 0 ax [orig:200 D.6871 ] [200])
        (sign_extend:DI (reg:SI 0 ax [335]))) preproc.cpp:83 142 {*extendsidi2_rex64}
     (nil))
(insn 314 313 315 21 (parallel [
            (set (reg:DI 1 dx [orig:201 D.6871 ] [201])
                (mult:DI (reg:DI 0 ax [orig:200 D.6871 ] [200])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 306 {*muldi3_1}
     (nil))
(insn 315 314 316 21 (set (reg/f:DI 0 ax [336])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 316 315 317 21 (parallel [
            (set (reg/f:DI 1 dx [orig:202 D.6878 ] [202])
                (plus:DI (reg:DI 1 dx [orig:201 D.6871 ] [201])
                    (reg/f:DI 0 ax [336])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:201 D.6871 ] [201]))
        (nil)))
(insn 317 316 318 21 (set (reg:SI 0 ax [337])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:83 90 {*movsi_internal}
     (nil))
(insn 318 317 319 21 (set (reg:DI 0 ax [orig:203 D.6871 ] [203])
        (sign_extend:DI (reg:SI 0 ax [337]))) preproc.cpp:83 142 {*extendsidi2_rex64}
     (nil))
(insn 319 318 320 21 (parallel [
            (set (reg:DI 2 cx [orig:204 D.6871 ] [204])
                (ashift:DI (reg:DI 0 ax [orig:203 D.6871 ] [203])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 512 {*ashldi3_1}
     (nil))
(insn 320 319 321 21 (set (reg/f:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 321 320 322 21 (parallel [
            (set (reg/f:DI 0 ax [orig:205 D.6872 ] [205])
                (plus:DI (reg/f:DI 0 ax [338])
                    (reg:DI 2 cx [orig:204 D.6871 ] [204])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (reg:DI 2 cx [orig:204 D.6871 ] [204]))
        (nil)))
(insn 322 321 323 21 (set (reg/f:DI 2 cx [orig:206 D.6873 ] [206])
        (mem/f:DI (reg/f:DI 0 ax [orig:205 D.6872 ] [205]) [0 *_163+0 S8 A64])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 323 322 324 21 (set (reg:SI 0 ax [339])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:83 90 {*movsi_internal}
     (nil))
(insn 324 323 325 21 (set (reg:DI 0 ax [orig:207 D.6871 ] [207])
        (sign_extend:DI (reg:SI 0 ax [339]))) preproc.cpp:83 142 {*extendsidi2_rex64}
     (nil))
(insn 325 324 326 21 (parallel [
            (set (reg:DI 4 si [orig:208 D.6871 ] [208])
                (ashift:DI (reg:DI 0 ax [orig:207 D.6871 ] [207])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 512 {*ashldi3_1}
     (nil))
(insn 326 325 327 21 (set (reg/f:DI 0 ax [340])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 327 326 328 21 (parallel [
            (set (reg/f:DI 0 ax [orig:209 D.6872 ] [209])
                (plus:DI (reg/f:DI 0 ax [340])
                    (reg:DI 4 si [orig:208 D.6871 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 4 si [orig:208 D.6871 ] [208]))
        (nil)))
(insn 328 327 330 21 (set (reg/f:DI 0 ax [orig:210 D.6873 ] [210])
        (mem/f:DI (reg/f:DI 0 ax [orig:209 D.6872 ] [209]) [0 *_167+0 S8 A64])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 330 328 331 21 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:206 D.6873 ] [206])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 331 330 332 21 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:210 D.6873 ] [210])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(call_insn 332 331 333 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z9normalizePfS_P12Procpar_info") [flags 0x3]  <function_decl 0x7fae98dad798 normalize>) [0 normalize S1 A8])
            (const_int 0 [0]))) preproc.cpp:83 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;;              21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 333 332 334 22 16 "" [1 uses])
(note 334 333 335 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 335 334 567 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:33 217 {*addsi_1}
     (nil))
(jump_insn 567 335 568 22 (set (pc)
        (label_ref 336)) preproc.cpp:33 654 {jump}
     (nil)
 -> 336)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 568 567 339)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 211 341
(code_label 339 568 340 23 2 "" [1 uses])
(note 340 339 341 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 341 340 342 23 (set (reg/f:DI 0 ax [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:90 89 {*movdi_internal}
     (nil))
(insn 342 341 343 23 (set (reg:SI 0 ax [orig:211 D.6870 ] [211])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [341])
                (const_int 12 [0xc])) [0 preprocess_109(D)->pre_ecc+0 S4 A32])) preproc.cpp:90 90 {*movsi_internal}
     (nil))
(insn 343 342 344 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:211 D.6870 ] [211])
            (const_int 0 [0]))) preproc.cpp:90 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 344 343 345 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 358)
            (pc))) preproc.cpp:90 612 {*jcc_1}
     (nil)
 -> 358)
;;  succ:       24 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 212 213 214 342 343 344 345
(note 345 344 346 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 346 345 347 24 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 347 346 348 24 (parallel [
            (set (reg/f:DI 0 ax [orig:212 D.6872 ] [212])
                (plus:DI (reg/f:DI 0 ax [342])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:92 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 348 347 349 24 (set (reg/f:DI 4 si [orig:213 D.6873 ] [213])
        (mem/f:DI (reg/f:DI 0 ax [orig:212 D.6872 ] [212]) [0 *_172+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 349 348 350 24 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 350 349 351 24 (set (reg/f:DI 0 ax [orig:214 D.6873 ] [214])
        (mem/f:DI (reg/f:DI 0 ax [343]) [0 *out_data_30(D)+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 351 350 352 24 (set (reg:DI 2 cx [344])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 352 351 356 24 (set (reg:DI 1 dx [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 356 352 357 24 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:214 D.6873 ] [214])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(call_insn 357 356 358 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z14ecc_correctionPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fae98dad870 ecc_correction>) [0 ecc_correction S1 A8])
            (const_int 0 [0]))) preproc.cpp:92 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;;              24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 215 346
(code_label 358 357 359 25 18 "" [1 uses])
(note 359 358 360 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 360 359 361 25 (set (reg/f:DI 0 ax [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:96 89 {*movdi_internal}
     (nil))
(insn 361 360 362 25 (set (reg:SI 0 ax [orig:215 D.6870 ] [215])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [346])
                (const_int 36 [0x24])) [0 preprocess_109(D)->pre_quality+0 S4 A32])) preproc.cpp:96 90 {*movsi_internal}
     (nil))
(insn 362 361 363 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:215 D.6870 ] [215])
            (const_int 0 [0]))) preproc.cpp:96 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 363 362 364 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 381)
            (pc))) preproc.cpp:96 612 {*jcc_1}
     (nil)
 -> 381)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 216 217 218 219 220 347 348 349 350 351
(note 364 363 365 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 365 364 366 26 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 366 365 367 26 (parallel [
            (set (reg/f:DI 0 ax [orig:216 D.6872 ] [216])
                (plus:DI (reg/f:DI 0 ax [347])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:98 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 367 366 368 26 (set (reg/f:DI 1 dx [orig:217 D.6873 ] [217])
        (mem/f:DI (reg/f:DI 0 ax [orig:216 D.6872 ] [216]) [0 *_177+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 368 367 369 26 (set (reg/f:DI 0 ax [348])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 369 368 370 26 (parallel [
            (set (reg/f:DI 0 ax [orig:218 D.6872 ] [218])
                (plus:DI (reg/f:DI 0 ax [348])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:98 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 370 369 371 26 (set (reg/f:DI 4 si [orig:219 D.6873 ] [219])
        (mem/f:DI (reg/f:DI 0 ax [orig:218 D.6872 ] [218]) [0 *_179+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 371 370 372 26 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 372 371 373 26 (set (reg/f:DI 0 ax [orig:220 D.6873 ] [220])
        (mem/f:DI (reg/f:DI 0 ax [349]) [0 *out_data_30(D)+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 373 372 374 26 (set (reg:DI 5 di [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 374 373 375 26 (set (reg:DI 2 cx [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 375 374 379 26 (set (reg:DI 37 r8)
        (reg:DI 5 di [350])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 379 375 380 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:220 D.6873 ] [220])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(call_insn 380 379 381 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z7qualityPfS_S_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fae98dad948 quality>) [0 quality S1 A8])
            (const_int 0 [0]))) preproc.cpp:98 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;;              26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 221 352
(code_label 381 380 382 27 19 "" [1 uses])
(note 382 381 383 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 383 382 384 27 (set (reg/f:DI 0 ax [352])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:102 89 {*movdi_internal}
     (nil))
(insn 384 383 385 27 (set (reg:SI 0 ax [orig:221 D.6870 ] [221])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [352])
                (const_int 40 [0x28])) [0 preprocess_109(D)->pre_quecc+0 S4 A32])) preproc.cpp:102 90 {*movsi_internal}
     (nil))
(insn 385 384 386 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:221 D.6870 ] [221])
            (const_int 0 [0]))) preproc.cpp:102 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 386 385 387 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 404)
            (pc))) preproc.cpp:102 612 {*jcc_1}
     (nil)
 -> 404)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 222 223 224 225 226 353 354 355 356 357
(note 387 386 388 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 388 387 389 28 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 389 388 390 28 (parallel [
            (set (reg/f:DI 0 ax [orig:222 D.6872 ] [222])
                (plus:DI (reg/f:DI 0 ax [353])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:104 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 390 389 391 28 (set (reg/f:DI 1 dx [orig:223 D.6873 ] [223])
        (mem/f:DI (reg/f:DI 0 ax [orig:222 D.6872 ] [222]) [0 *_184+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 391 390 392 28 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 392 391 393 28 (parallel [
            (set (reg/f:DI 0 ax [orig:224 D.6872 ] [224])
                (plus:DI (reg/f:DI 0 ax [354])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:104 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 393 392 394 28 (set (reg/f:DI 4 si [orig:225 D.6873 ] [225])
        (mem/f:DI (reg/f:DI 0 ax [orig:224 D.6872 ] [224]) [0 *_186+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 394 393 395 28 (set (reg/f:DI 0 ax [355])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 395 394 396 28 (set (reg/f:DI 0 ax [orig:226 D.6873 ] [226])
        (mem/f:DI (reg/f:DI 0 ax [355]) [0 *out_data_30(D)+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 396 395 397 28 (set (reg:DI 5 di [356])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 397 396 398 28 (set (reg:DI 2 cx [357])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 398 397 402 28 (set (reg:DI 37 r8)
        (reg:DI 5 di [356])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 402 398 403 28 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:226 D.6873 ] [226])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(call_insn 403 402 404 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z5queccPfS_S_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fae98dada20 quecc>) [0 quecc S1 A8])
            (const_int 0 [0]))) preproc.cpp:104 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;;              28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 404 403 405 29 20 "" [1 uses])
(note 405 404 406 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 444 29 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:110 90 {*movsi_internal}
     (nil))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;;              33 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 227 358
(code_label 444 406 407 30 23 "" [1 uses])
(note 407 444 408 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 408 407 409 30 (set (reg/f:DI 0 ax [358])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) preproc.cpp:110 89 {*movdi_internal}
     (nil))
(insn 409 408 410 30 (set (reg:SI 0 ax [orig:227 D.6870 ] [227])
        (mem:SI (reg/f:DI 0 ax [358]) [0 *fid_26(D)+0 S4 A32])) preproc.cpp:110 90 {*movsi_internal}
     (nil))
(insn 410 409 411 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:227 D.6870 ] [227])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) preproc.cpp:110 7 {*cmpsi_1}
     (nil))
(jump_insn 411 410 412 30 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 447)
            (pc))) preproc.cpp:110 612 {*jcc_1}
     (nil)
 -> 447)
;;  succ:       34
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 228 229 230 231 359 360 361 362
(note 412 411 413 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 413 412 414 31 (set (reg:SI 0 ax [359])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:112 90 {*movsi_internal}
     (nil))
(insn 414 413 415 31 (set (reg:DI 1 dx [orig:228 D.6871 ] [228])
        (sign_extend:DI (reg:SI 0 ax [359]))) preproc.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 415 414 416 31 (set (reg:DI 0 ax [360])
        (reg:DI 1 dx [orig:228 D.6871 ] [228])) preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 416 415 417 31 (parallel [
            (set (reg:DI 0 ax [360])
                (ashift:DI (reg:DI 0 ax [360])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:112 512 {*ashldi3_1}
     (nil))
(insn 417 416 418 31 (parallel [
            (set (reg:DI 0 ax [360])
                (plus:DI (reg:DI 0 ax [360])
                    (reg:DI 1 dx [orig:228 D.6871 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:112 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:228 D.6871 ] [228])
            (const_int 9 [0x9]))
        (nil)))
(insn 418 417 419 31 (parallel [
            (set (reg:DI 0 ax [361])
                (ashift:DI (reg:DI 0 ax [360])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:112 512 {*ashldi3_1}
     (nil))
(insn 419 418 420 31 (set (reg:DI 0 ax [360])
        (reg:DI 0 ax [361])) preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 420 419 421 31 (set (reg:DI 1 dx [orig:229 D.6871 ] [229])
        (reg:DI 0 ax [360])) preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 421 420 422 31 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 422 421 423 31 (parallel [
            (set (reg/f:DI 0 ax [orig:230 D.6877 ] [230])
                (plus:DI (reg/f:DI 0 ax [362])
                    (reg:DI 1 dx [orig:229 D.6871 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:112 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:229 D.6871 ] [229]))
        (nil)))
(insn 423 422 424 31 (set (reg:SI 0 ax [orig:231 D.6870 ] [231])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:230 D.6877 ] [230])
                (const_int 68 [0x44])) [0 _194->tilt+0 S4 A32])) preproc.cpp:112 90 {*movsi_internal}
     (nil))
(insn 424 423 425 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:231 D.6870 ] [231])
            (const_int 0 [0]))) preproc.cpp:112 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 425 424 426 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 441)
            (pc))) preproc.cpp:112 612 {*jcc_1}
     (nil)
 -> 441)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 232 233 234 235 236 237 238 363 364 365 366
(note 426 425 427 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 427 426 428 32 (set (reg:SI 0 ax [363])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:114 90 {*movsi_internal}
     (nil))
(insn 428 427 429 32 (set (reg:DI 0 ax [orig:232 D.6871 ] [232])
        (sign_extend:DI (reg:SI 0 ax [363]))) preproc.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 429 428 430 32 (parallel [
            (set (reg:DI 1 dx [orig:233 D.6871 ] [233])
                (mult:DI (reg:DI 0 ax [orig:232 D.6871 ] [232])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:114 306 {*muldi3_1}
     (nil))
(insn 430 429 431 32 (set (reg/f:DI 0 ax [364])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:114 89 {*movdi_internal}
     (nil))
(insn 431 430 432 32 (parallel [
            (set (reg/f:DI 1 dx [orig:234 D.6878 ] [234])
                (plus:DI (reg:DI 1 dx [orig:233 D.6871 ] [233])
                    (reg/f:DI 0 ax [364])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:114 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:233 D.6871 ] [233]))
        (nil)))
(insn 432 431 433 32 (set (reg:SI 0 ax [365])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:114 90 {*movsi_internal}
     (nil))
(insn 433 432 434 32 (set (reg:DI 0 ax [orig:235 D.6871 ] [235])
        (sign_extend:DI (reg:SI 0 ax [365]))) preproc.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 434 433 435 32 (parallel [
            (set (reg:DI 2 cx [orig:236 D.6871 ] [236])
                (ashift:DI (reg:DI 0 ax [orig:235 D.6871 ] [235])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:114 512 {*ashldi3_1}
     (nil))
(insn 435 434 436 32 (set (reg/f:DI 0 ax [366])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:114 89 {*movdi_internal}
     (nil))
(insn 436 435 437 32 (parallel [
            (set (reg/f:DI 0 ax [orig:237 D.6872 ] [237])
                (plus:DI (reg/f:DI 0 ax [366])
                    (reg:DI 2 cx [orig:236 D.6871 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:114 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 2 cx [orig:236 D.6871 ] [236]))
        (nil)))
(insn 437 436 438 32 (set (reg/f:DI 0 ax [orig:238 D.6873 ] [238])
        (mem/f:DI (reg/f:DI 0 ax [orig:237 D.6872 ] [237]) [0 *_201+0 S8 A64])) preproc.cpp:114 89 {*movdi_internal}
     (nil))
(insn 438 437 439 32 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:234 D.6878 ] [234])) preproc.cpp:114 89 {*movdi_internal}
     (nil))
(insn 439 438 440 32 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:238 D.6873 ] [238])) preproc.cpp:114 89 {*movdi_internal}
     (nil))
(call_insn 440 439 441 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16baseline_correctPfP12Procpar_info") [flags 0x3]  <function_decl 0x7fae98dadca8 baseline_correct>) [0 baseline_correct S1 A8])
            (const_int 0 [0]))) preproc.cpp:114 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 441 440 442 33 22 "" [1 uses])
(note 442 441 443 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 443 442 569 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:110 217 {*addsi_1}
     (nil))
(jump_insn 569 443 570 33 (set (pc)
        (label_ref 444)) preproc.cpp:110 654 {jump}
     (nil)
 -> 444)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 570 569 447)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 367 368
(code_label 447 570 448 34 21 "" [1 uses])
(note 448 447 449 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 449 448 450 34 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 450 449 451 34 (set (reg:SF 21 xmm0 [orig:239 D.6874 ] [239])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [367])
                (const_int 28 [0x1c])) [0 preprocess_109(D)->comp_filter+0 S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (nil))
(insn 451 450 452 34 (set (reg:SF 22 xmm1 [368])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 452 451 453 34 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:239 D.6874 ] [239])
            (reg:SF 22 xmm1 [368]))) preproc.cpp:121 55 {*cmpiusf_sse}
     (nil))
(jump_insn 453 452 555 34 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 478)
            (pc))) preproc.cpp:121 612 {*jcc_1}
     (nil)
 -> 478)
;;  succ:       40
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 239

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 239
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 239
;; lr  def 	 17 [flags] 369
(note 555 453 454 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 454 555 455 35 (set (reg:SF 22 xmm1 [369])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 455 454 456 35 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:239 D.6874 ] [239])
            (reg:SF 22 xmm1 [369]))) preproc.cpp:121 55 {*cmpiusf_sse}
     (nil))
(jump_insn 456 455 457 35 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 478)
            (pc))) preproc.cpp:121 612 {*jcc_1}
     (nil)
 -> 478)
;;  succ:       40
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 240 241 370 371
(note 457 456 458 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 458 457 459 36 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 459 458 460 36 (parallel [
            (set (reg/f:DI 0 ax [orig:240 D.6877 ] [240])
                (plus:DI (reg/f:DI 0 ax [370])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:121 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 460 459 461 36 (set (reg:SF 21 xmm0 [orig:241 D.6874 ] [241])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:240 D.6877 ] [240])
                (const_int 28 [0x1c])) [0 _206->comp_filter+0 S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (nil))
(insn 461 460 462 36 (set (reg:SF 22 xmm1 [371])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 462 461 463 36 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:241 D.6874 ] [241])
            (reg:SF 22 xmm1 [371]))) preproc.cpp:121 55 {*cmpiusf_sse}
     (nil))
(jump_insn 463 462 556 36 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 478)
            (pc))) preproc.cpp:121 612 {*jcc_1}
     (nil)
 -> 478)
;;  succ:       40
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 241
;; lr  def 	 17 [flags] 372
(note 556 463 464 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 464 556 465 37 (set (reg:SF 22 xmm1 [372])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 465 464 466 37 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:241 D.6874 ] [241])
            (reg:SF 22 xmm1 [372]))) preproc.cpp:121 55 {*cmpiusf_sse}
     (nil))
(jump_insn 466 465 467 37 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 478)
            (pc))) preproc.cpp:121 612 {*jcc_1}
     (nil)
 -> 478)
;;  succ:       40
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 242 373
(note 467 466 468 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 468 467 469 38 (set (reg/f:DI 0 ax [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:122 89 {*movdi_internal}
     (nil))
(insn 469 468 470 38 (set (reg:SI 0 ax [orig:242 D.6870 ] [242])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [373])
                (const_int 52 [0x34])) [0 preprocess_109(D)->pre_quecc_if+0 S4 A32])) preproc.cpp:122 90 {*movsi_internal}
     (nil))
(insn 470 469 471 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:242 D.6870 ] [242])
            (const_int 1 [0x1]))) preproc.cpp:121 7 {*cmpsi_1}
     (nil))
(jump_insn 471 470 472 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 478)
            (pc))) preproc.cpp:121 612 {*jcc_1}
     (nil)
 -> 478)
;;  succ:       40
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243 244 374
(note 472 471 473 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 473 472 474 39 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:122 89 {*movdi_internal}
     (nil))
(insn 474 473 475 39 (parallel [
            (set (reg/f:DI 0 ax [orig:243 D.6877 ] [243])
                (plus:DI (reg/f:DI 0 ax [374])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:122 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 475 474 476 39 (set (reg:SI 0 ax [orig:244 D.6870 ] [244])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:243 D.6877 ] [243])
                (const_int 52 [0x34])) [0 _209->pre_quecc_if+0 S4 A32])) preproc.cpp:122 90 {*movsi_internal}
     (nil))
(insn 476 475 477 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:244 D.6870 ] [244])
            (const_int 1 [0x1]))) preproc.cpp:122 7 {*cmpsi_1}
     (nil))
(jump_insn 477 476 478 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 492)
            (pc))) preproc.cpp:122 612 {*jcc_1}
     (nil)
 -> 492)
;;  succ:       40 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;;              37
;;              38
;;              39 (FALLTHRU)
;;              34
;;              36
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 245 246 247 375 376 377 378
(code_label 478 477 479 40 24 "" [5 uses])
(note 479 478 480 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 480 479 481 40 (set (reg/f:DI 0 ax [375])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 481 480 482 40 (parallel [
            (set (reg/f:DI 0 ax [orig:245 D.6872 ] [245])
                (plus:DI (reg/f:DI 0 ax [375])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:124 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 482 481 483 40 (set (reg/f:DI 4 si [orig:246 D.6873 ] [246])
        (mem/f:DI (reg/f:DI 0 ax [orig:245 D.6872 ] [245]) [0 *_211+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 483 482 484 40 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 484 483 485 40 (set (reg/f:DI 0 ax [orig:247 D.6873 ] [247])
        (mem/f:DI (reg/f:DI 0 ax [376]) [0 *out_data_30(D)+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 485 484 486 40 (set (reg:DI 2 cx [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 486 485 490 40 (set (reg:DI 1 dx [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 490 486 491 40 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:247 D.6873 ] [247])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(call_insn 491 490 492 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z6filterPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fae98dadbd0 filter>) [0 filter S1 A8])
            (const_int 0 [0]))) preproc.cpp:124 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;;              40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 492 491 493 41 25 "" [1 uses])
(note 493 492 494 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 494 493 530 41 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:129 90 {*movsi_internal}
     (nil))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;;              45 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 248 379
(code_label 530 494 495 42 28 "" [1 uses])
(note 495 530 496 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 496 495 497 42 (set (reg/f:DI 0 ax [379])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) preproc.cpp:129 89 {*movdi_internal}
     (nil))
(insn 497 496 498 42 (set (reg:SI 0 ax [orig:248 D.6870 ] [248])
        (mem:SI (reg/f:DI 0 ax [379]) [0 *fid_26(D)+0 S4 A32])) preproc.cpp:129 90 {*movsi_internal}
     (nil))
(insn 498 497 499 42 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:248 D.6870 ] [248])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) preproc.cpp:129 7 {*cmpsi_1}
     (nil))
(jump_insn 499 498 500 42 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 533)
            (pc))) preproc.cpp:129 612 {*jcc_1}
     (nil)
 -> 533)
;;  succ:       46
;;              43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 249 250 251 252 380 381 382 383
(note 500 499 501 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 501 500 502 43 (set (reg:SI 0 ax [380])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:130 90 {*movsi_internal}
     (nil))
(insn 502 501 503 43 (set (reg:DI 1 dx [orig:249 D.6871 ] [249])
        (sign_extend:DI (reg:SI 0 ax [380]))) preproc.cpp:130 142 {*extendsidi2_rex64}
     (nil))
(insn 503 502 504 43 (set (reg:DI 0 ax [381])
        (reg:DI 1 dx [orig:249 D.6871 ] [249])) preproc.cpp:130 89 {*movdi_internal}
     (nil))
(insn 504 503 505 43 (parallel [
            (set (reg:DI 0 ax [381])
                (ashift:DI (reg:DI 0 ax [381])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:130 512 {*ashldi3_1}
     (nil))
(insn 505 504 506 43 (parallel [
            (set (reg:DI 0 ax [381])
                (plus:DI (reg:DI 0 ax [381])
                    (reg:DI 1 dx [orig:249 D.6871 ] [249])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:130 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:249 D.6871 ] [249])
            (const_int 9 [0x9]))
        (nil)))
(insn 506 505 507 43 (parallel [
            (set (reg:DI 0 ax [382])
                (ashift:DI (reg:DI 0 ax [381])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:130 512 {*ashldi3_1}
     (nil))
(insn 507 506 508 43 (set (reg:DI 0 ax [381])
        (reg:DI 0 ax [382])) preproc.cpp:130 89 {*movdi_internal}
     (nil))
(insn 508 507 509 43 (set (reg:DI 1 dx [orig:250 D.6871 ] [250])
        (reg:DI 0 ax [381])) preproc.cpp:130 89 {*movdi_internal}
     (nil))
(insn 509 508 510 43 (set (reg/f:DI 0 ax [383])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:130 89 {*movdi_internal}
     (nil))
(insn 510 509 511 43 (parallel [
            (set (reg/f:DI 0 ax [orig:251 D.6877 ] [251])
                (plus:DI (reg/f:DI 0 ax [383])
                    (reg:DI 1 dx [orig:250 D.6871 ] [250])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:130 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:250 D.6871 ] [250]))
        (nil)))
(insn 511 510 512 43 (set (reg:SI 0 ax [orig:252 D.6870 ] [252])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:251 D.6877 ] [251])
                (const_int 24 [0x18])) [0 _219->data_zero_fill+0 S4 A32])) preproc.cpp:130 90 {*movsi_internal}
     (nil))
(insn 512 511 513 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:252 D.6870 ] [252])
            (const_int 0 [0]))) preproc.cpp:130 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 513 512 514 43 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 527)
            (pc))) preproc.cpp:130 612 {*jcc_1}
     (nil)
 -> 527)
;;  succ:       44 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 253 254 255 384 385 386 387
(note 514 513 515 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 515 514 516 44 (set (reg/f:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 516 515 517 44 (parallel [
            (set (reg/f:DI 0 ax [orig:253 D.6872 ] [253])
                (plus:DI (reg/f:DI 0 ax [384])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:131 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 517 516 518 44 (set (reg/f:DI 4 si [orig:254 D.6873 ] [254])
        (mem/f:DI (reg/f:DI 0 ax [orig:253 D.6872 ] [253]) [0 *_221+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 518 517 519 44 (set (reg/f:DI 0 ax [385])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 519 518 520 44 (set (reg/f:DI 0 ax [orig:255 D.6873 ] [255])
        (mem/f:DI (reg/f:DI 0 ax [385]) [0 *out_data_30(D)+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 520 519 521 44 (set (reg:DI 2 cx [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 521 520 525 44 (set (reg:DI 1 dx [387])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 525 521 526 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:255 D.6873 ] [255])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(call_insn 526 525 527 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z9zero_fillPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x7fae98dadaf8 zero_fill>) [0 zero_fill S1 A8])
            (const_int 0 [0]))) preproc.cpp:131 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;;              44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 527 526 528 45 27 "" [1 uses])
(note 528 527 529 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 529 528 571 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:129 217 {*addsi_1}
     (nil))
(jump_insn 571 529 572 45 (set (pc)
        (label_ref 530)) preproc.cpp:129 654 {jump}
     (nil)
 -> 530)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 572 571 533)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 256 257
(code_label 533 572 534 46 26 "" [1 uses])
(note 534 533 535 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 535 534 538 46 (set (reg:SI 0 ax [orig:256 D.6870 ] [256])
        (const_int 1 [0x1])) preproc.cpp:135 90 {*movsi_internal}
     (nil))
(insn 538 535 542 46 (set (reg:SI 0 ax [orig:257 <retval> ] [257])
        (reg:SI 0 ax [orig:256 D.6870 ] [256])) preproc.cpp:135 90 {*movsi_internal}
     (nil))
(insn 542 538 543 46 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:257 <retval> ] [257])) preproc.cpp:136 90 {*movsi_internal}
     (nil))
(insn 543 542 573 46 (use (reg/i:SI 0 ax)) preproc.cpp:136 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 573 543 0 NOTE_INSN_DELETED)

;; Function int scale(float*, Procpar_info*, Preprocess*) (_Z5scalePfP12Procpar_infoP10Preprocess, funcdef_no=3, decl_uid=5457, cgraph_uid=3, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 9:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 10:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 28:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 30:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 0 in insn 31:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 32:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 45:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 49:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 55:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 59:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 72:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 76:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 78:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 85:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 87
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 88:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 92:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 95:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 100:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 103:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 122:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 125:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 132:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 134:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 136
	 Choosing alt 0 in insn 136:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 138:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 139:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 144:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 157:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 159
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 160:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 161:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 162
	 Choosing alt 0 in insn 162:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 163:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 173
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 174:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 178:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 193:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 195:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 196:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 197:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 205:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 207
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 208:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 209:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 212:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 215:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 220:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 223:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 228:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 236:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 237:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 238:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 242:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 244:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 245:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 246
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 247:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 252:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 254
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 255:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 256:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 257:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 258:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 259
	 Choosing alt 0 in insn 259:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 261:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 262:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 267:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 274:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 275:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 277
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 280:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 282:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 284
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 285:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 286:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 287
	 Choosing alt 0 in insn 287:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 288:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 293:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19

********** Pseudo live ranges #1: **********

  BB 19
   Insn 307: point = 0
   Insn 306: point = 0
   Insn 302: point = 1
   Insn 299: point = 3
  BB 3
   Insn 16: point = 4
   Insn 15: point = 4
   Insn 14: point = 5
   Insn 13: point = 7
  BB 18
   Insn 319: point = 8
   Insn 293: point = 8
  BB 16
   Insn 317: point = 8
   Insn 267: point = 8
   Insn 266: point = 9
   Insn 265: point = 11
   Insn 264: point = 12
   Insn 263: point = 12
   Insn 262: point = 13
   Insn 261: point = 15
   Insn 260: point = 16
   Insn 259: point = 18
   Insn 258: point = 20
   Insn 257: point = 22
   Insn 256: point = 23
   Insn 255: point = 25
   Insn 254: point = 27
   Insn 253: point = 29
   Insn 252: point = 30
   Insn 251: point = 32
   Insn 250: point = 34
   Insn 249: point = 36
   Insn 248: point = 38
   Insn 247: point = 39
   Insn 246: point = 41
   Insn 245: point = 43
   Insn 244: point = 44
   Insn 243: point = 46
   Insn 242: point = 48
   Insn 241: point = 50
   Insn 240: point = 52
   Insn 239: point = 53
   Insn 238: point = 55
   Insn 237: point = 56
   Insn 236: point = 58
   Insn 235: point = 60
   Insn 234: point = 62
  BB 17
   Insn 288: point = 63
   Insn 287: point = 64
   Insn 286: point = 66
   Insn 285: point = 67
   Insn 284: point = 69
   Insn 283: point = 71
   Insn 282: point = 72
   Insn 281: point = 74
   Insn 280: point = 76
   Insn 279: point = 78
   Insn 278: point = 80
   Insn 277: point = 81
   Insn 276: point = 83
   Insn 275: point = 84
   Insn 274: point = 86
   Insn 273: point = 88
   Insn 272: point = 90
  BB 15
   Insn 232: point = 91
   Insn 231: point = 91
   Insn 230: point = 92
   Insn 229: point = 94
   Insn 228: point = 95
   Insn 227: point = 97
  BB 14
   Insn 225: point = 98
   Insn 224: point = 98
   Insn 223: point = 99
   Insn 222: point = 101
   Insn 221: point = 102
   Insn 220: point = 103
   Insn 219: point = 104
  BB 13
   Insn 217: point = 105
   Insn 216: point = 105
   Insn 215: point = 106
   Insn 214: point = 108
   Insn 213: point = 109
   Insn 212: point = 110
   Insn 211: point = 111
   Insn 210: point = 113
   Insn 209: point = 115
   Insn 208: point = 116
   Insn 207: point = 118
   Insn 206: point = 120
   Insn 205: point = 121
   Insn 204: point = 123
   Insn 203: point = 125
   Insn 202: point = 127
   Insn 201: point = 129
  BB 12
   Insn 199: point = 130
   Insn 198: point = 130
   Insn 197: point = 130
   Insn 196: point = 131
   Insn 195: point = 133
   Insn 194: point = 135
   Insn 193: point = 136
   Insn 192: point = 138
   Insn 191: point = 139
   Insn 190: point = 141
   Insn 189: point = 143
   Insn 188: point = 144
   Insn 187: point = 146
   Insn 186: point = 148
   Insn 185: point = 150
  BB 11
   Insn 180: point = 151
   Insn 179: point = 151
   Insn 178: point = 152
   Insn 177: point = 153
   Insn 176: point = 155
   Insn 175: point = 157
   Insn 174: point = 158
   Insn 173: point = 160
   Insn 172: point = 162
   Insn 171: point = 163
   Insn 170: point = 165
   Insn 169: point = 167
   Insn 168: point = 169
  BB 9
   Insn 315: point = 170
   Insn 144: point = 170
   Insn 143: point = 171
   Insn 142: point = 173
   Insn 141: point = 174
   Insn 140: point = 174
   Insn 139: point = 175
   Insn 138: point = 177
   Insn 137: point = 178
   Insn 136: point = 180
   Insn 135: point = 182
   Insn 134: point = 184
   Insn 133: point = 185
   Insn 132: point = 187
   Insn 131: point = 189
   Insn 130: point = 191
   Insn 129: point = 192
   Insn 128: point = 194
   Insn 127: point = 196
   Insn 126: point = 198
   Insn 125: point = 199
   Insn 124: point = 201
   Insn 123: point = 203
   Insn 122: point = 204
   Insn 121: point = 206
   Insn 120: point = 208
   Insn 119: point = 210
   Insn 118: point = 211
   Insn 117: point = 213
   Insn 116: point = 214
   Insn 115: point = 216
   Insn 114: point = 218
  BB 10
   Insn 163: point = 219
   Insn 162: point = 220
   Insn 161: point = 222
   Insn 160: point = 223
   Insn 159: point = 225
   Insn 158: point = 227
   Insn 157: point = 228
   Insn 156: point = 230
   Insn 155: point = 232
   Insn 154: point = 234
   Insn 153: point = 235
   Insn 152: point = 237
   Insn 151: point = 238
   Insn 150: point = 240
   Insn 149: point = 242
  BB 8
   Insn 112: point = 243
   Insn 111: point = 243
   Insn 110: point = 244
   Insn 109: point = 246
   Insn 108: point = 247
   Insn 107: point = 249
  BB 7
   Insn 105: point = 250
   Insn 104: point = 250
   Insn 103: point = 251
   Insn 102: point = 253
   Insn 101: point = 254
   Insn 100: point = 255
   Insn 99: point = 256
  BB 6
   Insn 97: point = 257
   Insn 96: point = 257
   Insn 95: point = 258
   Insn 94: point = 260
   Insn 93: point = 261
   Insn 92: point = 262
   Insn 91: point = 263
   Insn 90: point = 265
   Insn 89: point = 267
   Insn 88: point = 268
   Insn 87: point = 270
   Insn 86: point = 272
   Insn 85: point = 273
   Insn 84: point = 275
   Insn 83: point = 277
   Insn 82: point = 279
  BB 5
   Insn 80: point = 280
   Insn 79: point = 280
   Insn 78: point = 280
   Insn 77: point = 281
   Insn 76: point = 283
   Insn 75: point = 285
   Insn 74: point = 286
   Insn 73: point = 288
   Insn 72: point = 289
   Insn 71: point = 291
   Insn 70: point = 293
   Insn 69: point = 294
   Insn 68: point = 296
   Insn 67: point = 298
   Insn 66: point = 300
  BB 4
   Insn 61: point = 301
   Insn 60: point = 301
   Insn 59: point = 302
   Insn 58: point = 303
   Insn 57: point = 305
   Insn 56: point = 307
   Insn 55: point = 308
   Insn 54: point = 310
   Insn 53: point = 312
   Insn 52: point = 313
   Insn 51: point = 315
   Insn 50: point = 317
   Insn 49: point = 318
   Insn 48: point = 319
   Insn 47: point = 321
   Insn 46: point = 323
   Insn 45: point = 324
   Insn 44: point = 326
   Insn 43: point = 328
   Insn 42: point = 329
   Insn 41: point = 331
   Insn 40: point = 333
   Insn 39: point = 335
   Insn 38: point = 336
   Insn 37: point = 338
   Insn 36: point = 339
   Insn 35: point = 341
   Insn 34: point = 343
   Insn 33: point = 345
   Insn 32: point = 346
   Insn 31: point = 347
   Insn 30: point = 349
   Insn 29: point = 351
   Insn 28: point = 352
   Insn 27: point = 354
   Insn 26: point = 356
   Insn 25: point = 357
   Insn 24: point = 359
   Insn 23: point = 361
   Insn 22: point = 362
   Insn 21: point = 364
   Insn 20: point = 365
   Insn 19: point = 367
   Insn 18: point = 369
  BB 2
   Insn 11: point = 370
   Insn 10: point = 370
   Insn 9: point = 371
   Insn 8: point = 372
   Insn 4: point = 372
   Insn 3: point = 372
   Insn 2: point = 372
 r87: [4..5]
 r88: [366..367]
 r89: [363..365]
 r90: [346..362]
 r91: [358..359]
 r92: [355..357]
 r93: [353..354]
 r94: [348..352]
 r95: [348..349]
 r96: [346..347]
 r97: [342..343]
 r98: [340..341]
 r99: [337..339]
 r100: [318..336]
 r101: [332..333]
 r102: [330..331]
 r103: [327..329]
 r104: [325..326]
 r105: [320..324]
 r106: [320..321]
 r107: [318..319]
 r108: [314..315]
 r109: [311..313]
 r110: [309..310]
 r111: [306..308]
 r112: [304..305]
 r113: [301..303]
 r114: [297..298]
 r115: [295..296]
 r116: [292..294]
 r117: [290..291]
 r118: [287..289]
 r119: [282..286]
 r120: [282..283]
 r121: [276..277]
 r122: [274..275]
 r123: [271..273]
 r124: [269..270]
 r125: [266..268]
 r126: [264..265]
 r127: [261..263]
 r128: [259..260]
 r129: [257..258]
 r130: [254..256]
 r131: [252..253]
 r132: [250..251]
 r133: [243..247]
 r134: [243..244]
 r135: [215..216]
 r136: [212..214]
 r137: [170..211]
 r138: [207..208]
 r139: [205..206]
 r140: [202..204]
 r141: [200..201]
 r142: [186..199]
 r143: [195..196]
 r144: [193..194]
 r145: [190..192]
 r146: [188..189]
 r147: [186..187]
 r148: [181..185]
 r149: [181..182]
 r150: [179..180]
 r151: [176..178]
 r152: [174..175]
 r153: [172..173]
 r154: [170..171]
 r155: [239..240]
 r156: [236..238]
 r157: [219..235]
 r158: [231..232]
 r159: [229..230]
 r160: [226..228]
 r161: [224..225]
 r162: [221..223]
 r163: [219..220]
 r164: [166..167]
 r165: [164..165]
 r166: [161..163]
 r167: [159..160]
 r168: [156..158]
 r169: [154..155]
 r170: [151..153]
 r171: [147..148]
 r172: [145..146]
 r173: [142..144]
 r174: [140..141]
 r175: [137..139]
 r176: [132..136]
 r177: [132..133]
 r178: [126..127]
 r179: [124..125]
 r180: [122..123]
 r181: [119..121]
 r182: [117..118]
 r183: [114..116]
 r184: [112..113]
 r185: [109..111]
 r186: [107..108]
 r187: [105..106]
 r188: [102..104]
 r189: [100..101]
 r190: [98..99]
 r191: [91..95]
 r192: [91..92]
 r193: [59..60]
 r194: [57..58]
 r195: [54..56]
 r196: [8..53]
 r197: [49..50]
 r198: [47..48]
 r199: [45..46]
 r200: [42..44]
 r201: [40..41]
 r202: [24..39]
 r203: [35..36]
 r204: [33..34]
 r205: [31..32]
 r206: [28..30]
 r207: [26..27]
 r208: [24..25]
 r209: [19..23]
 r210: [19..20]
 r211: [17..18]
 r212: [14..16]
 r213: [12..13]
 r214: [10..11]
 r215: [8..9]
 r216: [87..88]
 r217: [85..86]
 r218: [82..84]
 r219: [63..81]
 r220: [77..78]
 r221: [75..76]
 r222: [73..74]
 r223: [70..72]
 r224: [68..69]
 r225: [65..67]
 r226: [63..64]
 r227: [2..3]
 r228: [0..1]
 r229: [370..371]
 r230: [6..7]
 r231: [368..369]
 r232: [363..364]
 r233: [360..361]
 r234: [355..356]
 r235: [350..351]
 r236: [344..345]
 r237: [337..338]
 r238: [334..335]
 r239: [327..328]
 r240: [322..323]
 r241: [316..317]
 r242: [311..312]
 r243: [306..307]
 r244: [301..302]
 r245: [299..300]
 r246: [292..293]
 r247: [287..288]
 r248: [284..285]
 r249: [280..281]
 r250: [278..279]
 r251: [271..272]
 r252: [266..267]
 r253: [261..262]
 r254: [254..255]
 r255: [248..249]
 r256: [245..246]
 r257: [217..218]
 r258: [212..213]
 r259: [209..210]
 r260: [202..203]
 r261: [197..198]
 r262: [190..191]
 r263: [183..184]
 r264: [176..177]
 r265: [241..242]
 r266: [236..237]
 r267: [233..234]
 r268: [226..227]
 r269: [221..222]
 r270: [168..169]
 r271: [161..162]
 r272: [156..157]
 r273: [151..152]
 r274: [149..150]
 r275: [142..143]
 r276: [137..138]
 r277: [134..135]
 r278: [130..131]
 r279: [128..129]
 r280: [119..120]
 r281: [114..115]
 r282: [109..110]
 r283: [102..103]
 r284: [96..97]
 r285: [93..94]
 r286: [61..62]
 r287: [54..55]
 r288: [51..52]
 r289: [42..43]
 r290: [37..38]
 r291: [28..29]
 r292: [21..22]
 r293: [14..15]
 r294: [89..90]
 r295: [82..83]
 r296: [79..80]
 r297: [70..71]
 r298: [65..66]
Compressing live ranges: from 372 to 320 - 86%
Ranges after the compression:
 r87: [4..5]
 r88: [314..315]
 r89: [312..313]
 r90: [298..311]
 r91: [308..309]
 r92: [306..307]
 r93: [304..305]
 r94: [300..303]
 r95: [300..301]
 r96: [298..299]
 r97: [294..295]
 r98: [292..293]
 r99: [290..291]
 r100: [274..289]
 r101: [286..287]
 r102: [284..285]
 r103: [282..283]
 r104: [280..281]
 r105: [276..279]
 r106: [276..277]
 r107: [274..275]
 r108: [270..271]
 r109: [268..269]
 r110: [266..267]
 r111: [264..265]
 r112: [262..263]
 r113: [260..261]
 r114: [256..257]
 r115: [254..255]
 r116: [252..253]
 r117: [250..251]
 r118: [248..249]
 r119: [244..247]
 r120: [244..245]
 r121: [238..239]
 r122: [236..237]
 r123: [234..235]
 r124: [232..233]
 r125: [230..231]
 r126: [228..229]
 r127: [226..227]
 r128: [224..225]
 r129: [222..223]
 r130: [220..221]
 r131: [218..219]
 r132: [216..217]
 r133: [210..213]
 r134: [210..211]
 r135: [186..187]
 r136: [184..185]
 r137: [148..183]
 r138: [180..181]
 r139: [178..179]
 r140: [176..177]
 r141: [174..175]
 r142: [162..173]
 r143: [170..171]
 r144: [168..169]
 r145: [166..167]
 r146: [164..165]
 r147: [162..163]
 r148: [158..161]
 r149: [158..159]
 r150: [156..157]
 r151: [154..155]
 r152: [152..153]
 r153: [150..151]
 r154: [148..149]
 r155: [206..207]
 r156: [204..205]
 r157: [190..203]
 r158: [200..201]
 r159: [198..199]
 r160: [196..197]
 r161: [194..195]
 r162: [192..193]
 r163: [190..191]
 r164: [144..145]
 r165: [142..143]
 r166: [140..141]
 r167: [138..139]
 r168: [136..137]
 r169: [134..135]
 r170: [132..133]
 r171: [128..129]
 r172: [126..127]
 r173: [124..125]
 r174: [122..123]
 r175: [120..121]
 r176: [116..119]
 r177: [116..117]
 r178: [110..111]
 r179: [108..109]
 r180: [106..107]
 r181: [104..105]
 r182: [102..103]
 r183: [100..101]
 r184: [98..99]
 r185: [96..97]
 r186: [94..95]
 r187: [92..93]
 r188: [90..91]
 r189: [88..89]
 r190: [86..87]
 r191: [80..83]
 r192: [80..81]
 r193: [52..53]
 r194: [50..51]
 r195: [48..49]
 r196: [8..47]
 r197: [44..45]
 r198: [42..43]
 r199: [40..41]
 r200: [38..39]
 r201: [36..37]
 r202: [22..35]
 r203: [32..33]
 r204: [30..31]
 r205: [28..29]
 r206: [26..27]
 r207: [24..25]
 r208: [22..23]
 r209: [18..21]
 r210: [18..19]
 r211: [16..17]
 r212: [14..15]
 r213: [12..13]
 r214: [10..11]
 r215: [8..9]
 r216: [76..77]
 r217: [74..75]
 r218: [72..73]
 r219: [56..71]
 r220: [68..69]
 r221: [66..67]
 r222: [64..65]
 r223: [62..63]
 r224: [60..61]
 r225: [58..59]
 r226: [56..57]
 r227: [2..3]
 r228: [0..1]
 r229: [318..319]
 r230: [6..7]
 r231: [316..317]
 r232: [312..313]
 r233: [310..311]
 r234: [306..307]
 r235: [302..303]
 r236: [296..297]
 r237: [290..291]
 r238: [288..289]
 r239: [282..283]
 r240: [278..279]
 r241: [272..273]
 r242: [268..269]
 r243: [264..265]
 r244: [260..261]
 r245: [258..259]
 r246: [252..253]
 r247: [248..249]
 r248: [246..247]
 r249: [242..243]
 r250: [240..241]
 r251: [234..235]
 r252: [230..231]
 r253: [226..227]
 r254: [220..221]
 r255: [214..215]
 r256: [212..213]
 r257: [188..189]
 r258: [184..185]
 r259: [182..183]
 r260: [176..177]
 r261: [172..173]
 r262: [166..167]
 r263: [160..161]
 r264: [154..155]
 r265: [208..209]
 r266: [204..205]
 r267: [202..203]
 r268: [196..197]
 r269: [192..193]
 r270: [146..147]
 r271: [140..141]
 r272: [136..137]
 r273: [132..133]
 r274: [130..131]
 r275: [124..125]
 r276: [120..121]
 r277: [118..119]
 r278: [114..115]
 r279: [112..113]
 r280: [104..105]
 r281: [100..101]
 r282: [96..97]
 r283: [90..91]
 r284: [84..85]
 r285: [82..83]
 r286: [54..55]
 r287: [48..49]
 r288: [46..47]
 r289: [38..39]
 r290: [34..35]
 r291: [26..27]
 r292: [20..21]
 r293: [14..15]
 r294: [78..79]
 r295: [72..73]
 r296: [70..71]
 r297: [62..63]
 r298: [58..59]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 22
changing reg in insn 22
changing reg in insn 32
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 38
changing reg in insn 38
changing reg in insn 49
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 60
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 74
changing reg in insn 74
changing reg in insn 74
changing reg in insn 77
changing reg in insn 76
changing reg in insn 77
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 108
changing reg in insn 111
changing reg in insn 110
changing reg in insn 111
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 118
changing reg in insn 118
changing reg in insn 118
changing reg in insn 144
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 133
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 153
changing reg in insn 163
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 176
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 179
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 193
changing reg in insn 193
changing reg in insn 193
changing reg in insn 196
changing reg in insn 195
changing reg in insn 196
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 210
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 219
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 228
changing reg in insn 231
changing reg in insn 230
changing reg in insn 231
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 239
changing reg in insn 239
changing reg in insn 239
changing reg in insn 267
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 256
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 254
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 258
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 277
changing reg in insn 277
changing reg in insn 288
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 284
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 287
changing reg in insn 288
changing reg in insn 299
changing reg in insn 302
changing reg in insn 302
changing reg in insn 306
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 126
changing reg in insn 127
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 138
changing reg in insn 139
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 154
changing reg in insn 155
changing reg in insn 158
changing reg in insn 161
changing reg in insn 168
changing reg in insn 169
changing reg in insn 172
changing reg in insn 175
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 185
changing reg in insn 186
changing reg in insn 189
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 201
changing reg in insn 202
changing reg in insn 206
changing reg in insn 209
changing reg in insn 210
changing reg in insn 212
changing reg in insn 213
changing reg in insn 220
changing reg in insn 221
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 234
changing reg in insn 235
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 245
changing reg in insn 248
changing reg in insn 249
changing reg in insn 253
changing reg in insn 257
changing reg in insn 258
changing reg in insn 261
changing reg in insn 262
changing reg in insn 272
changing reg in insn 273
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 283
changing reg in insn 286
deleting insn with uid = 140.
deleting insn with uid = 142.
deleting insn with uid = 263.
deleting insn with uid = 265.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 264.


int scale(float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={110d,108u} r1={34d,32u,16e} r2={7d,4u,4e} r3={2d,2u} r4={3d,1u} r5={3d,1u} r6={1d,87u} r7={1d,21u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={89d,15u} r18={2d} r19={2d} r20={1d,1u,22e} r21={46d,45u} r22={27d,24u,6e} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 849{460d,341u,48e} in 258{256 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 229
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])
        (reg:DI 4 si [ procpar_info ])) preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])
        (reg:DI 1 dx [ preprocess ])) preproc.cpp:141 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:143 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SF 21 xmm0 [229])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S4 A32])) preproc.cpp:144 129 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 half+0 S4 A32])
        (reg:SF 21 xmm0 [229])) preproc.cpp:144 129 {*movsf_internal}
     (nil))
(insn 11 10 294 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:146 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              18 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 230
(code_label 294 11 12 3 44 "" [1 uses])
(note 12 294 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) preproc.cpp:146 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:SI 0 ax [orig:87 D.6879 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [230])
                (const_int 300 [0x12c])) [0 procpar_info_11(D)->num_points+0 S4 A32])) preproc.cpp:146 90 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.6879 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32]))) preproc.cpp:146 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 297)
            (pc))) preproc.cpp:146 612 {*jcc_1}
     (nil)
 -> 297)
;;  succ:       19
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 231 232 233 234 235 236 237 238 239 240 241 242 243 244
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 ax [231])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:155 90 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:DI 0 ax [orig:88 D.6880 ] [88])
        (sign_extend:DI (reg:SI 0 ax [231]))) preproc.cpp:155 142 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:DI 1 dx [orig:89 D.6880 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.6880 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:155 512 {*ashldi3_1}
     (nil))
(insn 21 20 22 4 (set (reg/f:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:155 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 1 dx [orig:90 D.6881 ] [90])
                (plus:DI (reg:DI 1 dx [orig:89 D.6880 ] [89])
                    (reg/f:DI 0 ax [232])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:155 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.6880 ] [89]))
        (nil)))
(insn 23 22 24 4 (set (reg:SI 0 ax [233])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:155 90 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 0 ax [orig:91 D.6880 ] [91])
        (sign_extend:DI (reg:SI 0 ax [233]))) preproc.cpp:155 142 {*extendsidi2_rex64}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg:DI 2 cx [orig:92 D.6880 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 D.6880 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:155 512 {*ashldi3_1}
     (nil))
(insn 26 25 27 4 (set (reg/f:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:155 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.6881 ] [93])
                (plus:DI (reg/f:DI 0 ax [234])
                    (reg:DI 2 cx [orig:92 D.6880 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:155 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:92 D.6880 ] [92]))
        (nil)))
(insn 28 27 29 4 (set (reg:SF 22 xmm1 [orig:94 D.6882 ] [94])
        (mem:SF (reg/f:DI 0 ax [orig:93 D.6881 ] [93]) [0 *_19+0 S4 A32])) preproc.cpp:155 129 {*movsf_internal}
     (nil))
(insn 29 28 30 4 (set (reg/f:DI 0 ax [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) preproc.cpp:155 89 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:SF 21 xmm0 [orig:95 D.6882 ] [95])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [235])
                (const_int 4 [0x4])) [0 preprocess_21(D)->scale_factor+0 S4 A32])) preproc.cpp:155 129 {*movsf_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SF 21 xmm0 [orig:96 D.6882 ] [96])
        (mult:SF (reg:SF 21 xmm0 [orig:95 D.6882 ] [95])
            (reg:SF 22 xmm1 [orig:94 D.6882 ] [94]))) preproc.cpp:155 797 {*fop_sf_comm_sse}
     (nil))
(insn 32 31 33 4 (set (mem:SF (reg/f:DI 1 dx [orig:90 D.6881 ] [90]) [0 *_16+0 S4 A32])
        (reg:SF 21 xmm0 [orig:96 D.6882 ] [96])) preproc.cpp:155 129 {*movsf_internal}
     (nil))
(insn 33 32 34 4 (set (reg:SI 0 ax [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:156 90 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 0 ax [orig:97 D.6883 ] [97])
        (sign_extend:DI (reg:SI 0 ax [236]))) preproc.cpp:156 142 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 0 ax [orig:98 D.6883 ] [98])
                (plus:DI (reg:DI 0 ax [orig:97 D.6883 ] [97])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 218 {*adddi_1}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 1 dx [orig:99 D.6883 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 D.6883 ] [98])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 512 {*ashldi3_1}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:156 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:DI 1 dx [orig:100 D.6881 ] [100])
                (plus:DI (reg:DI 1 dx [orig:99 D.6883 ] [99])
                    (reg/f:DI 0 ax [237])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.6883 ] [99]))
        (nil)))
(insn 39 38 40 4 (set (reg:SI 0 ax [238])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:156 90 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DI 0 ax [orig:101 D.6883 ] [101])
        (sign_extend:DI (reg:SI 0 ax [238]))) preproc.cpp:156 142 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg:DI 0 ax [orig:102 D.6883 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 D.6883 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 218 {*adddi_1}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg:DI 2 cx [orig:103 D.6883 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.6883 ] [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 512 {*ashldi3_1}
     (nil))
(insn 43 42 44 4 (set (reg/f:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:156 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.6881 ] [104])
                (plus:DI (reg/f:DI 0 ax [239])
                    (reg:DI 2 cx [orig:103 D.6883 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:103 D.6883 ] [103]))
        (nil)))
(insn 45 44 46 4 (set (reg:SF 22 xmm1 [orig:105 D.6882 ] [105])
        (mem:SF (reg/f:DI 0 ax [orig:104 D.6881 ] [104]) [0 *_32+0 S4 A32])) preproc.cpp:156 129 {*movsf_internal}
     (nil))
(insn 46 45 47 4 (set (reg/f:DI 0 ax [240])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) preproc.cpp:156 89 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:SF 21 xmm0 [orig:106 D.6882 ] [106])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [240])
                (const_int 4 [0x4])) [0 preprocess_21(D)->scale_factor+0 S4 A32])) preproc.cpp:156 129 {*movsf_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SF 21 xmm0 [orig:107 D.6882 ] [107])
        (mult:SF (reg:SF 21 xmm0 [orig:106 D.6882 ] [106])
            (reg:SF 22 xmm1 [orig:105 D.6882 ] [105]))) preproc.cpp:156 797 {*fop_sf_comm_sse}
     (nil))
(insn 49 48 50 4 (set (mem:SF (reg/f:DI 1 dx [orig:100 D.6881 ] [100]) [0 *_28+0 S4 A32])
        (reg:SF 21 xmm0 [orig:107 D.6882 ] [107])) preproc.cpp:156 129 {*movsf_internal}
     (nil))
(insn 50 49 51 4 (set (reg:SI 0 ax [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:158 90 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 0 ax [orig:108 D.6880 ] [108])
        (sign_extend:DI (reg:SI 0 ax [241]))) preproc.cpp:158 142 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 4 (parallel [
            (set (reg:DI 1 dx [orig:109 D.6880 ] [109])
                (ashift:DI (reg:DI 0 ax [orig:108 D.6880 ] [108])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:158 512 {*ashldi3_1}
     (nil))
(insn 53 52 54 4 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:158 89 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.6881 ] [110])
                (plus:DI (reg/f:DI 0 ax [242])
                    (reg:DI 1 dx [orig:109 D.6880 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:158 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:109 D.6880 ] [109]))
        (nil)))
(insn 55 54 56 4 (set (reg:SF 22 xmm1 [orig:111 D.6882 ] [111])
        (mem:SF (reg/f:DI 0 ax [orig:110 D.6881 ] [110]) [0 *_39+0 S4 A32])) preproc.cpp:158 129 {*movsf_internal}
     (nil))
(insn 56 55 57 4 (set (reg:V4SF 21 xmm0 [243])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:158 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 57 56 58 4 (parallel [
            (set (reg:SF 21 xmm0 [orig:112 D.6882 ] [112])
                (abs:SF (reg:SF 22 xmm1 [orig:111 D.6882 ] [111])))
            (use (reg:V4SF 21 xmm0 [243]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:158 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:111 D.6882 ] [111]))
        (nil)))
(insn 58 57 59 4 (set (reg:DF 21 xmm0 [orig:113 D.6884 ] [113])
        (float_extend:DF (reg:SF 21 xmm0 [orig:112 D.6882 ] [112]))) preproc.cpp:158 152 {*extendsfdf2_sse}
     (nil))
(insn 59 58 60 4 (set (reg:DF 22 xmm1 [244])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:158 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 60 59 61 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [244])
            (reg:DF 21 xmm0 [orig:113 D.6884 ] [113]))) preproc.cpp:158 56 {*cmpiudf_sse}
     (nil))
(jump_insn 61 60 65 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 166)
            (pc))) preproc.cpp:158 612 {*jcc_1}
     (nil)
 -> 166)
;;  succ:       5 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 116 117 118 119 120 245 246 247 248 249
(note 65 61 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 5 (set (reg:SI 0 ax [245])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:164 90 {*movsi_internal}
     (nil))
(insn 67 66 68 5 (set (reg:DI 0 ax [orig:114 D.6883 ] [114])
        (sign_extend:DI (reg:SI 0 ax [245]))) preproc.cpp:164 142 {*extendsidi2_rex64}
     (nil))
(insn 68 67 69 5 (parallel [
            (set (reg:DI 0 ax [orig:115 D.6883 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 D.6883 ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:164 218 {*adddi_1}
     (nil))
(insn 69 68 70 5 (parallel [
            (set (reg:DI 1 dx [orig:116 D.6883 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.6883 ] [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:164 512 {*ashldi3_1}
     (nil))
(insn 70 69 71 5 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:164 89 {*movdi_internal}
     (nil))
(insn 71 70 72 5 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.6881 ] [117])
                (plus:DI (reg/f:DI 0 ax [246])
                    (reg:DI 1 dx [orig:116 D.6883 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:164 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.6883 ] [116]))
        (nil)))
(insn 72 71 73 5 (set (reg:SF 22 xmm1 [orig:118 D.6882 ] [118])
        (mem:SF (reg/f:DI 0 ax [orig:117 D.6881 ] [117]) [0 *_46+0 S4 A32])) preproc.cpp:164 129 {*movsf_internal}
     (nil))
(insn 73 72 74 5 (set (reg:V4SF 21 xmm0 [247])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:164 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 74 73 75 5 (parallel [
            (set (reg:SF 21 xmm0 [orig:119 D.6882 ] [119])
                (abs:SF (reg:SF 22 xmm1 [orig:118 D.6882 ] [118])))
            (use (reg:V4SF 21 xmm0 [247]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:164 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:118 D.6882 ] [118]))
        (nil)))
(insn 75 74 76 5 (set (reg/f:DI 0 ax [248])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) preproc.cpp:164 89 {*movdi_internal}
     (nil))
(insn 76 75 77 5 (set (reg:SF 22 xmm1 [orig:120 D.6882 ] [120])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [248])
                (const_int 4 [0x4])) [0 preprocess_21(D)->scale_factor+0 S4 A32])) preproc.cpp:164 129 {*movsf_internal}
     (nil))
(insn 77 76 78 5 (set (reg:SF 21 xmm0 [249])
        (mult:SF (reg:SF 21 xmm0 [orig:119 D.6882 ] [119])
            (reg:SF 22 xmm1 [orig:120 D.6882 ] [120]))) preproc.cpp:164 797 {*fop_sf_comm_sse}
     (nil))
(insn 78 77 79 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])
        (reg:SF 21 xmm0 [249])) preproc.cpp:164 129 {*movsf_internal}
     (nil))
(insn 79 78 80 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
            (const_int 1 [0x1]))) preproc.cpp:175 7 {*cmpsi_1}
     (nil))
(jump_insn 80 79 81 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 166)
            (pc))) preproc.cpp:175 612 {*jcc_1}
     (nil)
 -> 166)
;;  succ:       6 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 123 124 125 126 127 128 129 250 251 252 253
(note 81 80 82 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 6 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:177 90 {*movsi_internal}
     (nil))
(insn 83 82 84 6 (set (reg:DI 0 ax [orig:121 D.6880 ] [121])
        (sign_extend:DI (reg:SI 0 ax [250]))) preproc.cpp:177 142 {*extendsidi2_rex64}
     (nil))
(insn 84 83 85 6 (parallel [
            (set (reg:DI 0 ax [orig:122 D.6880 ] [122])
                (ashift:DI (reg:DI 0 ax [orig:121 D.6880 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 512 {*ashldi3_1}
     (nil))
(insn 85 84 86 6 (parallel [
            (set (reg:DI 1 dx [orig:123 D.6883 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 D.6880 ] [122])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 218 {*adddi_1}
     (nil))
(insn 86 85 87 6 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:177 89 {*movdi_internal}
     (nil))
(insn 87 86 88 6 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.6881 ] [124])
                (plus:DI (reg/f:DI 0 ax [251])
                    (reg:DI 1 dx [orig:123 D.6883 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.6883 ] [123]))
        (nil)))
(insn 88 87 89 6 (set (reg:SF 22 xmm1 [orig:125 D.6882 ] [125])
        (mem:SF (reg/f:DI 0 ax [orig:124 D.6881 ] [124]) [0 *_54+0 S4 A32])) preproc.cpp:177 129 {*movsf_internal}
     (nil))
(insn 89 88 90 6 (set (reg:V4SF 21 xmm0 [252])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:177 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 90 89 91 6 (parallel [
            (set (reg:SF 21 xmm0 [orig:126 D.6882 ] [126])
                (abs:SF (reg:SF 22 xmm1 [orig:125 D.6882 ] [125])))
            (use (reg:V4SF 21 xmm0 [252]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:125 D.6882 ] [125]))
        (nil)))
(insn 91 90 92 6 (set (reg:DF 21 xmm0 [orig:127 D.6884 ] [127])
        (float_extend:DF (reg:SF 21 xmm0 [orig:126 D.6882 ] [126]))) preproc.cpp:177 152 {*extendsfdf2_sse}
     (nil))
(insn 92 91 93 6 (set (reg:DF 22 xmm1 [253])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:177 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 93 92 94 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [253])
            (reg:DF 21 xmm0 [orig:127 D.6884 ] [127]))) preproc.cpp:177 56 {*cmpiudf_sse}
     (nil))
(insn 94 93 95 6 (set (reg:QI 0 ax [orig:128 D.6885 ] [128])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) preproc.cpp:177 607 {*setcc_qi}
     (nil))
(insn 95 94 96 6 (parallel [
            (set (reg:QI 0 ax [orig:129 D.6885 ] [129])
                (xor:QI (reg:QI 0 ax [orig:128 D.6885 ] [128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 406 {*xorqi_1}
     (nil))
(insn 96 95 97 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:129 D.6885 ] [129])
            (const_int 0 [0]))) preproc.cpp:177 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 97 96 98 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 147)
            (pc))) preproc.cpp:177 612 {*jcc_1}
     (nil)
 -> 147)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130 131 132 254
(note 98 97 99 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 7 (set (reg:DF 21 xmm0 [orig:130 D.6884 ] [130])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) preproc.cpp:177 152 {*extendsfdf2_sse}
     (nil))
(insn 100 99 101 7 (set (reg:DF 22 xmm1 [254])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:177 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 101 100 102 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [254])
            (reg:DF 21 xmm0 [orig:130 D.6884 ] [130]))) preproc.cpp:177 56 {*cmpiudf_sse}
     (nil))
(insn 102 101 103 7 (set (reg:QI 0 ax [orig:131 D.6885 ] [131])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) preproc.cpp:177 607 {*setcc_qi}
     (nil))
(insn 103 102 104 7 (parallel [
            (set (reg:QI 0 ax [orig:132 D.6885 ] [132])
                (xor:QI (reg:QI 0 ax [orig:131 D.6885 ] [131])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 406 {*xorqi_1}
     (nil))
(insn 104 103 105 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:132 D.6885 ] [132])
            (const_int 0 [0]))) preproc.cpp:177 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 105 104 106 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 147)
            (pc))) preproc.cpp:177 612 {*jcc_1}
     (nil)
 -> 147)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133 134 255 256
(note 106 105 107 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 8 (set (reg:SI 0 ax [255])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:177 90 {*movsi_internal}
     (nil))
(insn 108 107 109 8 (parallel [
            (set (reg:SI 1 dx [orig:133 D.6879 ] [133])
                (plus:SI (reg:SI 0 ax [255])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 109 108 110 8 (set (reg/f:DI 0 ax [256])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) preproc.cpp:177 89 {*movdi_internal}
     (nil))
(insn 110 109 111 8 (set (reg:SI 0 ax [orig:134 D.6879 ] [134])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [256])
                (const_int 300 [0x12c])) [0 procpar_info_11(D)->num_points+0 S4 A32])) preproc.cpp:177 90 {*movsi_internal}
     (nil))
(insn 111 110 112 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:133 D.6879 ] [133])
            (reg:SI 0 ax [orig:134 D.6879 ] [134]))) preproc.cpp:177 7 {*cmpsi_1}
     (nil))
(jump_insn 112 111 113 8 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 147)
            (pc))) preproc.cpp:177 612 {*jcc_1}
     (nil)
 -> 147)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 257 258 259 260 261 262 263 264
(note 113 112 114 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 9 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:187 90 {*movsi_internal}
     (nil))
(insn 115 114 116 9 (set (reg:DI 0 ax [orig:135 D.6880 ] [135])
        (sign_extend:DI (reg:SI 0 ax [257]))) preproc.cpp:187 142 {*extendsidi2_rex64}
     (nil))
(insn 116 115 117 9 (parallel [
            (set (reg:DI 1 dx [orig:136 D.6880 ] [136])
                (ashift:DI (reg:DI 0 ax [orig:135 D.6880 ] [135])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 512 {*ashldi3_1}
     (nil))
(insn 117 116 118 9 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:187 89 {*movdi_internal}
     (nil))
(insn 118 117 119 9 (parallel [
            (set (reg/f:DI 3 bx [orig:137 D.6881 ] [137])
                (plus:DI (reg:DI 1 dx [orig:136 D.6880 ] [136])
                    (reg/f:DI 0 ax [258])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:136 D.6880 ] [136]))
        (nil)))
(insn 119 118 120 9 (set (reg:SI 0 ax [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:187 90 {*movsi_internal}
     (nil))
(insn 120 119 121 9 (set (reg:DI 0 ax [orig:138 D.6880 ] [138])
        (sign_extend:DI (reg:SI 0 ax [259]))) preproc.cpp:187 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 9 (parallel [
            (set (reg:DI 0 ax [orig:139 D.6880 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:138 D.6880 ] [138])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 512 {*ashldi3_1}
     (nil))
(insn 122 121 123 9 (parallel [
            (set (reg:DI 1 dx [orig:140 D.6883 ] [140])
                (plus:DI (reg:DI 0 ax [orig:139 D.6880 ] [139])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 218 {*adddi_1}
     (nil))
(insn 123 122 124 9 (set (reg/f:DI 0 ax [260])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:187 89 {*movdi_internal}
     (nil))
(insn 124 123 125 9 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.6881 ] [141])
                (plus:DI (reg/f:DI 0 ax [260])
                    (reg:DI 1 dx [orig:140 D.6883 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:140 D.6883 ] [140]))
        (nil)))
(insn 125 124 126 9 (set (reg:SF 22 xmm1 [orig:142 D.6882 ] [142])
        (mem:SF (reg/f:DI 0 ax [orig:141 D.6881 ] [141]) [0 *_71+0 S4 A32])) preproc.cpp:187 129 {*movsf_internal}
     (nil))
(insn 126 125 127 9 (set (reg:SI 0 ax [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:187 90 {*movsi_internal}
     (nil))
(insn 127 126 128 9 (set (reg:DI 0 ax [orig:143 D.6880 ] [143])
        (sign_extend:DI (reg:SI 0 ax [261]))) preproc.cpp:187 142 {*extendsidi2_rex64}
     (nil))
(insn 128 127 129 9 (parallel [
            (set (reg:DI 0 ax [orig:144 D.6880 ] [144])
                (ashift:DI (reg:DI 0 ax [orig:143 D.6880 ] [143])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 512 {*ashldi3_1}
     (nil))
(insn 129 128 130 9 (parallel [
            (set (reg:DI 1 dx [orig:145 D.6883 ] [145])
                (plus:DI (reg:DI 0 ax [orig:144 D.6880 ] [144])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 218 {*adddi_1}
     (nil))
(insn 130 129 131 9 (set (reg/f:DI 0 ax [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:187 89 {*movdi_internal}
     (nil))
(insn 131 130 132 9 (parallel [
            (set (reg/f:DI 0 ax [orig:146 D.6881 ] [146])
                (plus:DI (reg/f:DI 0 ax [262])
                    (reg:DI 1 dx [orig:145 D.6883 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:145 D.6883 ] [145]))
        (nil)))
(insn 132 131 133 9 (set (reg:SF 21 xmm0 [orig:147 D.6882 ] [147])
        (mem:SF (reg/f:DI 0 ax [orig:146 D.6881 ] [146]) [0 *_76+0 S4 A32])) preproc.cpp:187 129 {*movsf_internal}
     (nil))
(insn 133 132 134 9 (set (reg:SF 22 xmm1 [orig:148 D.6882 ] [148])
        (mult:SF (reg:SF 22 xmm1 [orig:142 D.6882 ] [142])
            (reg:SF 21 xmm0 [orig:147 D.6882 ] [147]))) preproc.cpp:187 797 {*fop_sf_comm_sse}
     (nil))
(insn 134 133 135 9 (set (reg:SF 21 xmm0 [263])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])) preproc.cpp:188 129 {*movsf_internal}
     (nil))
(insn 135 134 136 9 (set (reg:SF 21 xmm0 [orig:149 D.6882 ] [149])
        (mult:SF (reg:SF 21 xmm0 [263])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) preproc.cpp:188 797 {*fop_sf_comm_sse}
     (nil))
(insn 136 135 137 9 (set (reg:SF 21 xmm0 [orig:150 D.6882 ] [150])
        (plus:SF (reg:SF 21 xmm0 [orig:149 D.6882 ] [149])
            (reg:SF 22 xmm1 [orig:148 D.6882 ] [148]))) preproc.cpp:187 797 {*fop_sf_comm_sse}
     (nil))
(insn 137 136 138 9 (set (reg:DF 21 xmm0 [orig:151 D.6884 ] [151])
        (float_extend:DF (reg:SF 21 xmm0 [orig:150 D.6882 ] [150]))) preproc.cpp:187 152 {*extendsfdf2_sse}
     (nil))
(insn 138 137 139 9 (set (reg:DF 22 xmm1 [264])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S8 A64])) preproc.cpp:187 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 139 138 141 9 (set (reg:DF 21 xmm0 [orig:152 D.6884 ] [152])
        (mult:DF (reg:DF 21 xmm0 [orig:151 D.6884 ] [151])
            (reg:DF 22 xmm1 [264]))) preproc.cpp:187 798 {*fop_df_comm_sse}
     (nil))
(call_insn 141 139 143 9 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:187 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 143 141 144 9 (set (reg:SF 21 xmm0 [orig:154 D.6882 ] [154])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:153 D.6884 ] [153]))) preproc.cpp:188 157 {*truncdfsf_fast_sse}
     (nil))
(insn 144 143 315 9 (set (mem:SF (reg/f:DI 3 bx [orig:137 D.6881 ] [137]) [0 *_67+0 S4 A32])
        (reg:SF 21 xmm0 [orig:154 D.6882 ] [154])) preproc.cpp:188 129 {*movsf_internal}
     (nil))
(jump_insn 315 144 316 9 (set (pc)
        (label_ref 166)) preproc.cpp:188 654 {jump}
     (nil)
 -> 166)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 316 315 147)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 155 156 157 158 159 160 161 162 163 265 266 267 268 269
(code_label 147 316 148 10 38 "" [3 uses])
(note 148 147 149 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 149 148 150 10 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:199 90 {*movsi_internal}
     (nil))
(insn 150 149 151 10 (set (reg:DI 0 ax [orig:155 D.6880 ] [155])
        (sign_extend:DI (reg:SI 0 ax [265]))) preproc.cpp:199 142 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 10 (parallel [
            (set (reg:DI 1 dx [orig:156 D.6880 ] [156])
                (ashift:DI (reg:DI 0 ax [orig:155 D.6880 ] [155])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:199 512 {*ashldi3_1}
     (nil))
(insn 152 151 153 10 (set (reg/f:DI 0 ax [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:199 89 {*movdi_internal}
     (nil))
(insn 153 152 154 10 (parallel [
            (set (reg/f:DI 0 ax [orig:157 D.6881 ] [157])
                (plus:DI (reg/f:DI 0 ax [266])
                    (reg:DI 1 dx [orig:156 D.6880 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:199 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:156 D.6880 ] [156]))
        (nil)))
(insn 154 153 155 10 (set (reg:SI 1 dx [267])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:199 90 {*movsi_internal}
     (nil))
(insn 155 154 156 10 (set (reg:DI 1 dx [orig:158 D.6880 ] [158])
        (sign_extend:DI (reg:SI 1 dx [267]))) preproc.cpp:199 142 {*extendsidi2_rex64}
     (nil))
(insn 156 155 157 10 (parallel [
            (set (reg:DI 1 dx [orig:159 D.6880 ] [159])
                (ashift:DI (reg:DI 1 dx [orig:158 D.6880 ] [158])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:199 512 {*ashldi3_1}
     (nil))
(insn 157 156 158 10 (parallel [
            (set (reg:DI 2 cx [orig:160 D.6883 ] [160])
                (plus:DI (reg:DI 1 dx [orig:159 D.6880 ] [159])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:199 218 {*adddi_1}
     (nil))
(insn 158 157 159 10 (set (reg/f:DI 1 dx [268])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:199 89 {*movdi_internal}
     (nil))
(insn 159 158 160 10 (parallel [
            (set (reg/f:DI 1 dx [orig:161 D.6881 ] [161])
                (plus:DI (reg/f:DI 1 dx [268])
                    (reg:DI 2 cx [orig:160 D.6883 ] [160])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:199 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:160 D.6883 ] [160]))
        (nil)))
(insn 160 159 161 10 (set (reg:SF 22 xmm1 [orig:162 D.6882 ] [162])
        (mem:SF (reg/f:DI 1 dx [orig:161 D.6881 ] [161]) [0 *_93+0 S4 A32])) preproc.cpp:199 129 {*movsf_internal}
     (nil))
(insn 161 160 162 10 (set (reg:SF 21 xmm0 [269])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S4 A32])) preproc.cpp:199 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 162 161 163 10 (set (reg:SF 21 xmm0 [orig:163 D.6882 ] [163])
        (mult:SF (reg:SF 21 xmm0 [269])
            (reg:SF 22 xmm1 [orig:162 D.6882 ] [162]))) preproc.cpp:199 797 {*fop_sf_comm_sse}
     (nil))
(insn 163 162 166 10 (set (mem:SF (reg/f:DI 0 ax [orig:157 D.6881 ] [157]) [0 *_89+0 S4 A32])
        (reg:SF 21 xmm0 [orig:163 D.6882 ] [163])) preproc.cpp:199 129 {*movsf_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              10 (FALLTHRU)
;;              4
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 164 165 166 167 168 169 170 270 271 272 273
(code_label 166 163 167 11 36 "" [3 uses])
(note 167 166 168 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 11 (set (reg:SI 0 ax [270])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:205 90 {*movsi_internal}
     (nil))
(insn 169 168 170 11 (set (reg:DI 0 ax [orig:164 D.6883 ] [164])
        (sign_extend:DI (reg:SI 0 ax [270]))) preproc.cpp:205 142 {*extendsidi2_rex64}
     (nil))
(insn 170 169 171 11 (parallel [
            (set (reg:DI 0 ax [orig:165 D.6883 ] [165])
                (plus:DI (reg:DI 0 ax [orig:164 D.6883 ] [164])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:205 218 {*adddi_1}
     (nil))
(insn 171 170 172 11 (parallel [
            (set (reg:DI 1 dx [orig:166 D.6883 ] [166])
                (ashift:DI (reg:DI 0 ax [orig:165 D.6883 ] [165])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:205 512 {*ashldi3_1}
     (nil))
(insn 172 171 173 11 (set (reg/f:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:205 89 {*movdi_internal}
     (nil))
(insn 173 172 174 11 (parallel [
            (set (reg/f:DI 0 ax [orig:167 D.6881 ] [167])
                (plus:DI (reg/f:DI 0 ax [271])
                    (reg:DI 1 dx [orig:166 D.6883 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:205 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:166 D.6883 ] [166]))
        (nil)))
(insn 174 173 175 11 (set (reg:SF 22 xmm1 [orig:168 D.6882 ] [168])
        (mem:SF (reg/f:DI 0 ax [orig:167 D.6881 ] [167]) [0 *_100+0 S4 A32])) preproc.cpp:205 129 {*movsf_internal}
     (nil))
(insn 175 174 176 11 (set (reg:V4SF 21 xmm0 [272])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:205 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 176 175 177 11 (parallel [
            (set (reg:SF 21 xmm0 [orig:169 D.6882 ] [169])
                (abs:SF (reg:SF 22 xmm1 [orig:168 D.6882 ] [168])))
            (use (reg:V4SF 21 xmm0 [272]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:205 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:168 D.6882 ] [168]))
        (nil)))
(insn 177 176 178 11 (set (reg:DF 21 xmm0 [orig:170 D.6884 ] [170])
        (float_extend:DF (reg:SF 21 xmm0 [orig:169 D.6882 ] [169]))) preproc.cpp:205 152 {*extendsfdf2_sse}
     (nil))
(insn 178 177 179 11 (set (reg:DF 22 xmm1 [273])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:205 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 179 178 180 11 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [273])
            (reg:DF 21 xmm0 [orig:170 D.6884 ] [170]))) preproc.cpp:205 56 {*cmpiudf_sse}
     (nil))
(jump_insn 180 179 184 11 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 291)
            (pc))) preproc.cpp:205 612 {*jcc_1}
     (nil)
 -> 291)
;;  succ:       12 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 171 172 173 174 175 176 177 274 275 276 277 278
(note 184 180 185 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 185 184 186 12 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:215 90 {*movsi_internal}
     (nil))
(insn 186 185 187 12 (set (reg:DI 0 ax [orig:171 D.6883 ] [171])
        (sign_extend:DI (reg:SI 0 ax [274]))) preproc.cpp:215 142 {*extendsidi2_rex64}
     (nil))
(insn 187 186 188 12 (parallel [
            (set (reg:DI 0 ax [orig:172 D.6883 ] [172])
                (plus:DI (reg:DI 0 ax [orig:171 D.6883 ] [171])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:215 218 {*adddi_1}
     (nil))
(insn 188 187 189 12 (parallel [
            (set (reg:DI 1 dx [orig:173 D.6883 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:172 D.6883 ] [172])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:215 512 {*ashldi3_1}
     (nil))
(insn 189 188 190 12 (set (reg/f:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:215 89 {*movdi_internal}
     (nil))
(insn 190 189 191 12 (parallel [
            (set (reg/f:DI 0 ax [orig:174 D.6881 ] [174])
                (plus:DI (reg/f:DI 0 ax [275])
                    (reg:DI 1 dx [orig:173 D.6883 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:215 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:173 D.6883 ] [173]))
        (nil)))
(insn 191 190 192 12 (set (reg:SF 22 xmm1 [orig:175 D.6882 ] [175])
        (mem:SF (reg/f:DI 0 ax [orig:174 D.6881 ] [174]) [0 *_107+0 S4 A32])) preproc.cpp:215 129 {*movsf_internal}
     (nil))
(insn 192 191 193 12 (set (reg:V4SF 21 xmm0 [276])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:215 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 193 192 194 12 (parallel [
            (set (reg:SF 21 xmm0 [orig:176 D.6882 ] [176])
                (abs:SF (reg:SF 22 xmm1 [orig:175 D.6882 ] [175])))
            (use (reg:V4SF 21 xmm0 [276]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:215 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:175 D.6882 ] [175]))
        (nil)))
(insn 194 193 195 12 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) preproc.cpp:215 89 {*movdi_internal}
     (nil))
(insn 195 194 196 12 (set (reg:SF 22 xmm1 [orig:177 D.6882 ] [177])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [277])
                (const_int 4 [0x4])) [0 preprocess_21(D)->scale_factor+0 S4 A32])) preproc.cpp:215 129 {*movsf_internal}
     (nil))
(insn 196 195 197 12 (set (reg:SF 21 xmm0 [278])
        (mult:SF (reg:SF 21 xmm0 [orig:176 D.6882 ] [176])
            (reg:SF 22 xmm1 [orig:177 D.6882 ] [177]))) preproc.cpp:215 797 {*fop_sf_comm_sse}
     (nil))
(insn 197 196 198 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])
        (reg:SF 21 xmm0 [278])) preproc.cpp:215 129 {*movsf_internal}
     (nil))
(insn 198 197 199 12 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
            (const_int 0 [0]))) preproc.cpp:227 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 199 198 200 12 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 291)
            (pc))) preproc.cpp:227 612 {*jcc_1}
     (nil)
 -> 291)
;;  succ:       13 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 178 179 180 181 182 183 184 185 186 187 279 280 281 282
(note 200 199 201 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 202 13 (set (reg:SI 0 ax [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:228 90 {*movsi_internal}
     (nil))
(insn 202 201 203 13 (set (reg:DI 0 ax [orig:178 D.6883 ] [178])
        (sign_extend:DI (reg:SI 0 ax [279]))) preproc.cpp:228 142 {*extendsidi2_rex64}
     (nil))
(insn 203 202 204 13 (parallel [
            (set (reg:DI 0 ax [orig:179 D.6883 ] [179])
                (plus:DI (reg:DI 0 ax [orig:178 D.6883 ] [178])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 218 {*adddi_1}
     (nil))
(insn 204 203 205 13 (parallel [
            (set (reg:DI 0 ax [orig:180 D.6883 ] [180])
                (ashift:DI (reg:DI 0 ax [orig:179 D.6883 ] [179])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 512 {*ashldi3_1}
     (nil))
(insn 205 204 206 13 (parallel [
            (set (reg:DI 1 dx [orig:181 D.6883 ] [181])
                (plus:DI (reg:DI 0 ax [orig:180 D.6883 ] [180])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 218 {*adddi_1}
     (nil))
(insn 206 205 207 13 (set (reg/f:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:228 89 {*movdi_internal}
     (nil))
(insn 207 206 208 13 (parallel [
            (set (reg/f:DI 0 ax [orig:182 D.6881 ] [182])
                (plus:DI (reg/f:DI 0 ax [280])
                    (reg:DI 1 dx [orig:181 D.6883 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:181 D.6883 ] [181]))
        (nil)))
(insn 208 207 209 13 (set (reg:SF 22 xmm1 [orig:183 D.6882 ] [183])
        (mem:SF (reg/f:DI 0 ax [orig:182 D.6881 ] [182]) [0 *_116+0 S4 A32])) preproc.cpp:228 129 {*movsf_internal}
     (nil))
(insn 209 208 210 13 (set (reg:V4SF 21 xmm0 [281])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:228 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 210 209 211 13 (parallel [
            (set (reg:SF 21 xmm0 [orig:184 D.6882 ] [184])
                (abs:SF (reg:SF 22 xmm1 [orig:183 D.6882 ] [183])))
            (use (reg:V4SF 21 xmm0 [281]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:183 D.6882 ] [183]))
        (nil)))
(insn 211 210 212 13 (set (reg:DF 21 xmm0 [orig:185 D.6884 ] [185])
        (float_extend:DF (reg:SF 21 xmm0 [orig:184 D.6882 ] [184]))) preproc.cpp:228 152 {*extendsfdf2_sse}
     (nil))
(insn 212 211 213 13 (set (reg:DF 22 xmm1 [282])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:228 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 213 212 214 13 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [282])
            (reg:DF 21 xmm0 [orig:185 D.6884 ] [185]))) preproc.cpp:228 56 {*cmpiudf_sse}
     (nil))
(insn 214 213 215 13 (set (reg:QI 0 ax [orig:186 D.6885 ] [186])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) preproc.cpp:228 607 {*setcc_qi}
     (nil))
(insn 215 214 216 13 (parallel [
            (set (reg:QI 0 ax [orig:187 D.6885 ] [187])
                (xor:QI (reg:QI 0 ax [orig:186 D.6885 ] [186])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 406 {*xorqi_1}
     (nil))
(insn 216 215 217 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:187 D.6885 ] [187])
            (const_int 0 [0]))) preproc.cpp:228 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 217 216 218 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 270)
            (pc))) preproc.cpp:228 612 {*jcc_1}
     (nil)
 -> 270)
;;  succ:       14 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 188 189 190 283
(note 218 217 219 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 14 (set (reg:DF 21 xmm0 [orig:188 D.6884 ] [188])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) preproc.cpp:228 152 {*extendsfdf2_sse}
     (nil))
(insn 220 219 221 14 (set (reg:DF 22 xmm1 [283])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:228 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 221 220 222 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [283])
            (reg:DF 21 xmm0 [orig:188 D.6884 ] [188]))) preproc.cpp:228 56 {*cmpiudf_sse}
     (nil))
(insn 222 221 223 14 (set (reg:QI 0 ax [orig:189 D.6885 ] [189])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) preproc.cpp:228 607 {*setcc_qi}
     (nil))
(insn 223 222 224 14 (parallel [
            (set (reg:QI 0 ax [orig:190 D.6885 ] [190])
                (xor:QI (reg:QI 0 ax [orig:189 D.6885 ] [189])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 406 {*xorqi_1}
     (nil))
(insn 224 223 225 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:190 D.6885 ] [190])
            (const_int 0 [0]))) preproc.cpp:228 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 225 224 226 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 270)
            (pc))) preproc.cpp:228 612 {*jcc_1}
     (nil)
 -> 270)
;;  succ:       15 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 191 192 284 285
(note 226 225 227 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 227 226 228 15 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:228 90 {*movsi_internal}
     (nil))
(insn 228 227 229 15 (parallel [
            (set (reg:SI 1 dx [orig:191 D.6879 ] [191])
                (plus:SI (reg:SI 0 ax [284])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 229 228 230 15 (set (reg/f:DI 0 ax [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) preproc.cpp:228 89 {*movdi_internal}
     (nil))
(insn 230 229 231 15 (set (reg:SI 0 ax [orig:192 D.6879 ] [192])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [285])
                (const_int 300 [0x12c])) [0 procpar_info_11(D)->num_points+0 S4 A32])) preproc.cpp:228 90 {*movsi_internal}
     (nil))
(insn 231 230 232 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:191 D.6879 ] [191])
            (reg:SI 0 ax [orig:192 D.6879 ] [192]))) preproc.cpp:228 7 {*cmpsi_1}
     (nil))
(jump_insn 232 231 233 15 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 270)
            (pc))) preproc.cpp:228 612 {*jcc_1}
     (nil)
 -> 270)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 286 287 288 289 290 291 292 293
(note 233 232 234 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 235 16 (set (reg:SI 0 ax [286])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:239 90 {*movsi_internal}
     (nil))
(insn 235 234 236 16 (set (reg:DI 0 ax [orig:193 D.6883 ] [193])
        (sign_extend:DI (reg:SI 0 ax [286]))) preproc.cpp:239 142 {*extendsidi2_rex64}
     (nil))
(insn 236 235 237 16 (parallel [
            (set (reg:DI 0 ax [orig:194 D.6883 ] [194])
                (plus:DI (reg:DI 0 ax [orig:193 D.6883 ] [193])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 218 {*adddi_1}
     (nil))
(insn 237 236 238 16 (parallel [
            (set (reg:DI 1 dx [orig:195 D.6883 ] [195])
                (ashift:DI (reg:DI 0 ax [orig:194 D.6883 ] [194])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 512 {*ashldi3_1}
     (nil))
(insn 238 237 239 16 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 239 238 240 16 (parallel [
            (set (reg/f:DI 3 bx [orig:196 D.6881 ] [196])
                (plus:DI (reg:DI 1 dx [orig:195 D.6883 ] [195])
                    (reg/f:DI 0 ax [287])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:195 D.6883 ] [195]))
        (nil)))
(insn 240 239 241 16 (set (reg:SI 0 ax [288])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:239 90 {*movsi_internal}
     (nil))
(insn 241 240 242 16 (set (reg:DI 0 ax [orig:197 D.6883 ] [197])
        (sign_extend:DI (reg:SI 0 ax [288]))) preproc.cpp:239 142 {*extendsidi2_rex64}
     (nil))
(insn 242 241 243 16 (parallel [
            (set (reg:DI 0 ax [orig:198 D.6883 ] [198])
                (plus:DI (reg:DI 0 ax [orig:197 D.6883 ] [197])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 218 {*adddi_1}
     (nil))
(insn 243 242 244 16 (parallel [
            (set (reg:DI 0 ax [orig:199 D.6883 ] [199])
                (ashift:DI (reg:DI 0 ax [orig:198 D.6883 ] [198])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 512 {*ashldi3_1}
     (nil))
(insn 244 243 245 16 (parallel [
            (set (reg:DI 1 dx [orig:200 D.6883 ] [200])
                (plus:DI (reg:DI 0 ax [orig:199 D.6883 ] [199])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 218 {*adddi_1}
     (nil))
(insn 245 244 246 16 (set (reg/f:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 246 245 247 16 (parallel [
            (set (reg/f:DI 0 ax [orig:201 D.6881 ] [201])
                (plus:DI (reg/f:DI 0 ax [289])
                    (reg:DI 1 dx [orig:200 D.6883 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:200 D.6883 ] [200]))
        (nil)))
(insn 247 246 248 16 (set (reg:SF 22 xmm1 [orig:202 D.6882 ] [202])
        (mem:SF (reg/f:DI 0 ax [orig:201 D.6881 ] [201]) [0 *_135+0 S4 A32])) preproc.cpp:239 129 {*movsf_internal}
     (nil))
(insn 248 247 249 16 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:239 90 {*movsi_internal}
     (nil))
(insn 249 248 250 16 (set (reg:DI 0 ax [orig:203 D.6883 ] [203])
        (sign_extend:DI (reg:SI 0 ax [290]))) preproc.cpp:239 142 {*extendsidi2_rex64}
     (nil))
(insn 250 249 251 16 (parallel [
            (set (reg:DI 0 ax [orig:204 D.6883 ] [204])
                (plus:DI (reg:DI 0 ax [orig:203 D.6883 ] [203])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 218 {*adddi_1}
     (nil))
(insn 251 250 252 16 (parallel [
            (set (reg:DI 0 ax [orig:205 D.6883 ] [205])
                (ashift:DI (reg:DI 0 ax [orig:204 D.6883 ] [204])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 512 {*ashldi3_1}
     (nil))
(insn 252 251 253 16 (parallel [
            (set (reg:DI 1 dx [orig:206 D.6883 ] [206])
                (plus:DI (reg:DI 0 ax [orig:205 D.6883 ] [205])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 218 {*adddi_1}
     (nil))
(insn 253 252 254 16 (set (reg/f:DI 0 ax [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 254 253 255 16 (parallel [
            (set (reg/f:DI 0 ax [orig:207 D.6881 ] [207])
                (plus:DI (reg/f:DI 0 ax [291])
                    (reg:DI 1 dx [orig:206 D.6883 ] [206])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:206 D.6883 ] [206]))
        (nil)))
(insn 255 254 256 16 (set (reg:SF 21 xmm0 [orig:208 D.6882 ] [208])
        (mem:SF (reg/f:DI 0 ax [orig:207 D.6881 ] [207]) [0 *_141+0 S4 A32])) preproc.cpp:239 129 {*movsf_internal}
     (nil))
(insn 256 255 257 16 (set (reg:SF 22 xmm1 [orig:209 D.6882 ] [209])
        (mult:SF (reg:SF 22 xmm1 [orig:202 D.6882 ] [202])
            (reg:SF 21 xmm0 [orig:208 D.6882 ] [208]))) preproc.cpp:239 797 {*fop_sf_comm_sse}
     (nil))
(insn 257 256 258 16 (set (reg:SF 21 xmm0 [292])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])) preproc.cpp:240 129 {*movsf_internal}
     (nil))
(insn 258 257 259 16 (set (reg:SF 21 xmm0 [orig:210 D.6882 ] [210])
        (mult:SF (reg:SF 21 xmm0 [292])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) preproc.cpp:240 797 {*fop_sf_comm_sse}
     (nil))
(insn 259 258 260 16 (set (reg:SF 21 xmm0 [orig:211 D.6882 ] [211])
        (plus:SF (reg:SF 21 xmm0 [orig:210 D.6882 ] [210])
            (reg:SF 22 xmm1 [orig:209 D.6882 ] [209]))) preproc.cpp:239 797 {*fop_sf_comm_sse}
     (nil))
(insn 260 259 261 16 (set (reg:DF 21 xmm0 [orig:212 D.6884 ] [212])
        (float_extend:DF (reg:SF 21 xmm0 [orig:211 D.6882 ] [211]))) preproc.cpp:239 152 {*extendsfdf2_sse}
     (nil))
(insn 261 260 262 16 (set (reg:DF 22 xmm1 [293])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S8 A64])) preproc.cpp:239 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 262 261 264 16 (set (reg:DF 21 xmm0 [orig:213 D.6884 ] [213])
        (mult:DF (reg:DF 21 xmm0 [orig:212 D.6884 ] [212])
            (reg:DF 22 xmm1 [293]))) preproc.cpp:239 798 {*fop_df_comm_sse}
     (nil))
(call_insn 264 262 266 16 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:239 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 266 264 267 16 (set (reg:SF 21 xmm0 [orig:215 D.6882 ] [215])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:214 D.6884 ] [214]))) preproc.cpp:240 157 {*truncdfsf_fast_sse}
     (nil))
(insn 267 266 317 16 (set (mem:SF (reg/f:DI 3 bx [orig:196 D.6881 ] [196]) [0 *_130+0 S4 A32])
        (reg:SF 21 xmm0 [orig:215 D.6882 ] [215])) preproc.cpp:240 129 {*movsf_internal}
     (nil))
(jump_insn 317 267 318 16 (set (pc)
        (label_ref 291)) preproc.cpp:240 654 {jump}
     (nil)
 -> 291)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 318 317 270)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14
;;              15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 216 217 218 219 220 221 222 223 224 225 226 294 295 296 297 298
(code_label 270 318 271 17 42 "" [3 uses])
(note 271 270 272 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 17 (set (reg:SI 0 ax [294])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:252 90 {*movsi_internal}
     (nil))
(insn 273 272 274 17 (set (reg:DI 0 ax [orig:216 D.6883 ] [216])
        (sign_extend:DI (reg:SI 0 ax [294]))) preproc.cpp:252 142 {*extendsidi2_rex64}
     (nil))
(insn 274 273 275 17 (parallel [
            (set (reg:DI 0 ax [orig:217 D.6883 ] [217])
                (plus:DI (reg:DI 0 ax [orig:216 D.6883 ] [216])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 218 {*adddi_1}
     (nil))
(insn 275 274 276 17 (parallel [
            (set (reg:DI 1 dx [orig:218 D.6883 ] [218])
                (ashift:DI (reg:DI 0 ax [orig:217 D.6883 ] [217])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 512 {*ashldi3_1}
     (nil))
(insn 276 275 277 17 (set (reg/f:DI 0 ax [295])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:252 89 {*movdi_internal}
     (nil))
(insn 277 276 278 17 (parallel [
            (set (reg/f:DI 0 ax [orig:219 D.6881 ] [219])
                (plus:DI (reg/f:DI 0 ax [295])
                    (reg:DI 1 dx [orig:218 D.6883 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:218 D.6883 ] [218]))
        (nil)))
(insn 278 277 279 17 (set (reg:SI 1 dx [296])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:252 90 {*movsi_internal}
     (nil))
(insn 279 278 280 17 (set (reg:DI 1 dx [orig:220 D.6883 ] [220])
        (sign_extend:DI (reg:SI 1 dx [296]))) preproc.cpp:252 142 {*extendsidi2_rex64}
     (nil))
(insn 280 279 281 17 (parallel [
            (set (reg:DI 1 dx [orig:221 D.6883 ] [221])
                (plus:DI (reg:DI 1 dx [orig:220 D.6883 ] [220])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 218 {*adddi_1}
     (nil))
(insn 281 280 282 17 (parallel [
            (set (reg:DI 1 dx [orig:222 D.6883 ] [222])
                (ashift:DI (reg:DI 1 dx [orig:221 D.6883 ] [221])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 512 {*ashldi3_1}
     (nil))
(insn 282 281 283 17 (parallel [
            (set (reg:DI 2 cx [orig:223 D.6883 ] [223])
                (plus:DI (reg:DI 1 dx [orig:222 D.6883 ] [222])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 218 {*adddi_1}
     (nil))
(insn 283 282 284 17 (set (reg/f:DI 1 dx [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:252 89 {*movdi_internal}
     (nil))
(insn 284 283 285 17 (parallel [
            (set (reg/f:DI 1 dx [orig:224 D.6881 ] [224])
                (plus:DI (reg/f:DI 1 dx [297])
                    (reg:DI 2 cx [orig:223 D.6883 ] [223])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:223 D.6883 ] [223]))
        (nil)))
(insn 285 284 286 17 (set (reg:SF 22 xmm1 [orig:225 D.6882 ] [225])
        (mem:SF (reg/f:DI 1 dx [orig:224 D.6881 ] [224]) [0 *_160+0 S4 A32])) preproc.cpp:252 129 {*movsf_internal}
     (nil))
(insn 286 285 287 17 (set (reg:SF 21 xmm0 [298])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S4 A32])) preproc.cpp:252 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 287 286 288 17 (set (reg:SF 21 xmm0 [orig:226 D.6882 ] [226])
        (mult:SF (reg:SF 21 xmm0 [298])
            (reg:SF 22 xmm1 [orig:225 D.6882 ] [225]))) preproc.cpp:252 797 {*fop_sf_comm_sse}
     (nil))
(insn 288 287 291 17 (set (mem:SF (reg/f:DI 0 ax [orig:219 D.6881 ] [219]) [0 *_155+0 S4 A32])
        (reg:SF 21 xmm0 [orig:226 D.6882 ] [226])) preproc.cpp:252 129 {*movsf_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              17 (FALLTHRU)
;;              11
;;              16 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 291 288 292 18 40 "" [3 uses])
(note 292 291 293 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 293 292 319 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:146 217 {*addsi_1}
     (nil))
(jump_insn 319 293 320 18 (set (pc)
        (label_ref 294)) preproc.cpp:146 654 {jump}
     (nil)
 -> 294)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 320 319 297)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 227 228
(code_label 297 320 298 19 35 "" [1 uses])
(note 298 297 299 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 299 298 302 19 (set (reg:SI 0 ax [orig:227 D.6879 ] [227])
        (const_int 1 [0x1])) preproc.cpp:257 90 {*movsi_internal}
     (nil))
(insn 302 299 306 19 (set (reg:SI 0 ax [orig:228 <retval> ] [228])
        (reg:SI 0 ax [orig:227 D.6879 ] [227])) preproc.cpp:257 90 {*movsi_internal}
     (nil))
(insn 306 302 307 19 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:228 <retval> ] [228])) preproc.cpp:258 90 {*movsi_internal}
     (nil))
(insn 307 306 321 19 (use (reg/i:SI 0 ax)) preproc.cpp:258 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 321 307 0 NOTE_INSN_DELETED)

;; Function int baseline_correct(float*, Procpar_info*) (_Z16baseline_correctPfP12Procpar_info, funcdef_no=4, decl_uid=5491, cgraph_uid=4, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 9:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 10:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 11:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 12:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 38:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 39:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 41:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 47
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 48:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 49:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 51:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 52:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 58:  (0) x  (1) m {*floatsidf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 59:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 62:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 63:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=160 from oldreg=145, assigning class SSE_REGS to r160
   63: r160:SF=r160:SF/r101:SF
      REG_DEAD r146:SF
      REG_DEAD r101:SF
    Inserting insn reload before:
  128: r160:SF=r146:SF
    Inserting insn reload after:
  129: r145:SF=r160:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 64:  (0) m  (1) v {*movsf_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) x  (1) m {*floatsidf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 66:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 69:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 70:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=161 from oldreg=148, assigning class SSE_REGS to r161
   70: r161:SF=r161:SF/r104:SF
      REG_DEAD r149:SF
      REG_DEAD r104:SF
    Inserting insn reload before:
  130: r161:SF=r149:SF
    Inserting insn reload after:
  131: r148:SF=r161:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 71:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 91:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 106:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 107:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 121: point = 0
   Insn 120: point = 0
   Insn 116: point = 1
   Insn 113: point = 3
  BB 6
   Insn 77: point = 4
   Insn 76: point = 4
   Insn 75: point = 5
   Insn 74: point = 7
  BB 7
   Insn 125: point = 8
   Insn 107: point = 8
   Insn 106: point = 8
   Insn 105: point = 9
   Insn 104: point = 11
   Insn 103: point = 13
   Insn 102: point = 15
   Insn 101: point = 16
   Insn 100: point = 18
   Insn 99: point = 20
   Insn 98: point = 22
   Insn 97: point = 23
   Insn 96: point = 25
   Insn 95: point = 26
   Insn 94: point = 28
   Insn 93: point = 30
   Insn 92: point = 32
   Insn 91: point = 33
   Insn 90: point = 34
   Insn 89: point = 36
   Insn 88: point = 38
   Insn 87: point = 40
   Insn 86: point = 41
   Insn 85: point = 43
   Insn 84: point = 45
   Insn 83: point = 46
   Insn 82: point = 48
   Insn 81: point = 49
   Insn 80: point = 51
   Insn 79: point = 53
  BB 5
   Insn 72: point = 54
   Insn 71: point = 54
   Insn 131: point = 55
	Hard reg 21 is preferable by r161 with profit 1
   Insn 70: point = 57
   Insn 130: point = 58
	Hard reg 21 is preferable by r161 with profit 1
	Hard reg 22 is preferable by r161 with profit 1
   Insn 69: point = 60
   Insn 68: point = 61
   Insn 67: point = 63
   Insn 66: point = 65
   Insn 65: point = 66
   Insn 64: point = 67
   Insn 129: point = 68
	Hard reg 21 is preferable by r160 with profit 1
   Insn 63: point = 70
   Insn 128: point = 71
	Hard reg 21 is preferable by r160 with profit 1
	Hard reg 22 is preferable by r160 with profit 1
   Insn 62: point = 73
   Insn 61: point = 74
   Insn 60: point = 76
   Insn 59: point = 78
   Insn 58: point = 79
  BB 3
   Insn 31: point = 80
   Insn 30: point = 80
   Insn 29: point = 81
   Insn 28: point = 83
  BB 4
   Insn 123: point = 84
   Insn 52: point = 84
   Insn 51: point = 84
   Insn 50: point = 85
   Insn 49: point = 87
   Insn 48: point = 88
   Insn 47: point = 90
   Insn 46: point = 92
   Insn 45: point = 93
   Insn 44: point = 95
   Insn 43: point = 97
   Insn 42: point = 99
   Insn 41: point = 100
   Insn 40: point = 101
   Insn 39: point = 103
   Insn 38: point = 104
   Insn 37: point = 106
   Insn 36: point = 108
   Insn 35: point = 109
   Insn 34: point = 111
   Insn 33: point = 113
  BB 2
   Insn 26: point = 114
   Insn 25: point = 115
   Insn 22: point = 117
   Insn 21: point = 119
   Insn 20: point = 120
   Insn 19: point = 121
   Insn 18: point = 123
   Insn 17: point = 124
   Insn 16: point = 124
   Insn 15: point = 125
   Insn 14: point = 127
   Insn 13: point = 129
   Insn 12: point = 130
   Insn 11: point = 131
   Insn 10: point = 132
   Insn 9: point = 133
   Insn 8: point = 134
   Insn 7: point = 134
   Insn 3: point = 134
   Insn 2: point = 134
 r87: [126..127]
 r88: [116..117]
 r89: [80..81]
 r90: [110..111]
 r91: [107..109]
 r92: [105..106]
 r93: [102..104]
 r94: [96..97]
 r95: [94..95]
 r96: [91..93]
 r97: [89..90]
 r98: [86..88]
 r99: [77..79]
 r100: [75..76]
 r101: [70..74]
 r102: [64..66]
 r103: [62..63]
 r104: [57..61]
 r105: [4..5]
 r106: [50..51]
 r107: [47..49]
 r108: [33..46]
 r109: [42..43]
 r110: [39..41]
 r111: [37..38]
 r112: [35..36]
 r113: [33..34]
 r114: [29..30]
 r115: [27..28]
 r116: [24..26]
 r117: [8..23]
 r118: [19..20]
 r119: [17..18]
 r120: [14..16]
 r121: [12..13]
 r122: [10..11]
 r123: [8..9]
 r124: [2..3]
 r125: [0..1]
 r126: [132..133]
 r127: [130..131]
 r128: [128..129]
 r129: [122..125]
 r130: [123..124]
 r131: [120..121]
 r132: [118..119]
 r134: [114..115]
 r135: [82..83]
 r136: [112..113]
 r137: [107..108]
 r138: [100..101]
 r139: [102..103]
 r140: [98..99]
 r141: [91..92]
 r142: [84..85]
 r143: [86..87]
 r144: [77..78]
 r145: [67..68]
 r146: [72..73]
 r147: [64..65]
 r148: [54..55]
 r149: [59..60]
 r150: [6..7]
 r151: [52..53]
 r152: [47..48]
 r153: [44..45]
 r154: [39..40]
 r155: [31..32]
 r156: [24..25]
 r157: [21..22]
 r158: [14..15]
 r160: [69..71]
 r161: [56..58]
Compressing live ranges: from 134 to 116 - 86%
Ranges after the compression:
 r87: [108..109]
 r88: [100..101]
 r89: [68..69]
 r90: [94..95]
 r91: [92..93]
 r92: [90..91]
 r93: [88..89]
 r94: [82..83]
 r95: [80..81]
 r96: [78..79]
 r97: [76..77]
 r98: [74..75]
 r99: [66..67]
 r100: [64..65]
 r101: [60..63]
 r102: [56..57]
 r103: [54..55]
 r104: [50..53]
 r105: [4..5]
 r106: [44..45]
 r107: [42..43]
 r108: [30..41]
 r109: [38..39]
 r110: [36..37]
 r111: [34..35]
 r112: [32..33]
 r113: [30..31]
 r114: [26..27]
 r115: [24..25]
 r116: [22..23]
 r117: [8..21]
 r118: [18..19]
 r119: [16..17]
 r120: [14..15]
 r121: [12..13]
 r122: [10..11]
 r123: [8..9]
 r124: [2..3]
 r125: [0..1]
 r126: [114..115]
 r127: [112..113]
 r128: [110..111]
 r129: [106..107]
 r130: [106..107]
 r131: [104..105]
 r132: [102..103]
 r134: [98..99]
 r135: [70..71]
 r136: [96..97]
 r137: [92..93]
 r138: [86..87]
 r139: [88..89]
 r140: [84..85]
 r141: [78..79]
 r142: [72..73]
 r143: [74..75]
 r144: [66..67]
 r145: [58..59]
 r146: [62..63]
 r147: [56..57]
 r148: [48..49]
 r149: [52..53]
 r150: [6..7]
 r151: [46..47]
 r152: [42..43]
 r153: [40..41]
 r154: [36..37]
 r155: [28..29]
 r156: [22..23]
 r157: [20..21]
 r158: [14..15]
 r160: [60..61]
 r161: [50..51]

********** Assignment #1: **********

	 Assigning to 160 (cl=SSE_REGS, orig=145, freq=3, tfirst=160, tfreq=3)...
	   Assign 22 to reload r160 (freq=3)
	 Assigning to 161 (cl=SSE_REGS, orig=148, freq=3, tfirst=161, tfreq=3)...
	   Assign 22 to reload r161 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 22
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 58
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 75
changing reg in insn 76
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 91
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 97
changing reg in insn 106
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 113
changing reg in insn 116
changing reg in insn 116
changing reg in insn 120
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 15
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 50
changing reg in insn 51
changing reg in insn 49
changing reg in insn 59
changing reg in insn 60
changing reg in insn 64
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 69
changing reg in insn 74
changing reg in insn 75
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 92
changing reg in insn 93
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
deleting insn with uid = 128.
deleting insn with uid = 130.
starting the processing of deferred insns
ending the processing of deferred insns


int baseline_correct(float*, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={34d,36u} r1={15d,14u,4e} r2={3d,2u,2e} r4={1d,1u} r5={1d,1u} r6={1d,52u} r7={1d,8u} r17={23d,3u} r20={1d,1u,6e} r21={19d,18u} r22={9d,8u} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 272{116d,144u,12e} in 100{100 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 126 127 128 129 130 131 132 134
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) preproc.cpp:262 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])
        (reg:DI 4 si [ procpar_info ])) preproc.cpp:262 89 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:264 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:264 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SF 21 xmm0 [126])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:265 129 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 21 xmm0 [126])) preproc.cpp:265 129 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SF 21 xmm0 [127])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:266 129 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 21 xmm0 [127])) preproc.cpp:266 129 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) preproc.cpp:268 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [orig:87 D.6886 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [128])
                (const_int 300 [0x12c])) [0 procpar_info_11(D)->num_points+0 S4 A32])) preproc.cpp:268 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 ax [129])
        (reg:SI 0 ax [orig:87 D.6886 ] [87])) preproc.cpp:268 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:SI 1 dx [130])
                (plus:SI (reg:SI 0 ax [129])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:268 217 {*addsi_1}
     (nil))
(insn 17 16 18 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [129])
            (const_int 0 [0]))) preproc.cpp:268 3 {*cmpsi_ccno_1}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 ax [129])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [130])
            (reg:SI 0 ax [129]))) preproc.cpp:268 953 {*movsicc_noc}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 0 ax [131])
                (ashiftrt:SI (reg:SI 0 ax [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:268 545 {*ashrsi3_1}
     (nil))
(insn 20 19 21 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])
        (reg:SI 0 ax [131])) preproc.cpp:268 90 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) preproc.cpp:270 89 {*movdi_internal}
     (nil))
(insn 22 21 25 2 (set (reg:SI 0 ax [orig:88 D.6886 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [132])
                (const_int 300 [0x12c])) [0 procpar_info_11(D)->num_points+0 S4 A32])) preproc.cpp:270 90 {*movsi_internal}
     (nil))
(insn 25 22 26 2 (parallel [
            (set (reg:SI 0 ax [134])
                (minus:SI (reg:SI 0 ax [orig:88 D.6886 ] [88])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:270 260 {*subsi_1}
     (nil))
(insn 26 25 53 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (reg:SI 0 ax [134])) preproc.cpp:270 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 135
(code_label 53 26 27 3 50 "" [1 uses])
(note 27 53 28 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 3 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) preproc.cpp:270 89 {*movdi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:SI 0 ax [orig:89 D.6886 ] [89])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [135])
                (const_int 300 [0x12c])) [0 procpar_info_11(D)->num_points+0 S4 A32])) preproc.cpp:270 90 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.6886 ] [89])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32]))) preproc.cpp:270 7 {*cmpsi_1}
     (nil))
(jump_insn 31 30 32 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) preproc.cpp:270 612 {*jcc_1}
     (nil)
 -> 56)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 96 97 98 136 137 138 139 140 141 142 143
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg:SI 0 ax [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:272 90 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 0 ax [orig:90 D.6887 ] [90])
        (sign_extend:DI (reg:SI 0 ax [136]))) preproc.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 1 dx [orig:91 D.6887 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 D.6887 ] [90])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:272 512 {*ashldi3_1}
     (nil))
(insn 36 35 37 4 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:272 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.6888 ] [92])
                (plus:DI (reg/f:DI 0 ax [137])
                    (reg:DI 1 dx [orig:91 D.6887 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:272 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.6887 ] [91]))
        (nil)))
(insn 38 37 39 4 (set (reg:SF 21 xmm0 [orig:93 D.6889 ] [93])
        (mem:SF (reg/f:DI 0 ax [orig:92 D.6888 ] [92]) [0 *_20+0 S4 A32])) preproc.cpp:272 129 {*movsf_internal}
     (nil))
(insn 39 38 40 4 (set (reg:SF 22 xmm1 [139])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])) preproc.cpp:272 129 {*movsf_internal}
     (nil))
(insn 40 39 41 4 (set (reg:SF 21 xmm0 [138])
        (plus:SF (reg:SF 21 xmm0 [orig:93 D.6889 ] [93])
            (reg:SF 22 xmm1 [139]))) preproc.cpp:272 797 {*fop_sf_comm_sse}
     (nil))
(insn 41 40 42 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 21 xmm0 [138])) preproc.cpp:272 129 {*movsf_internal}
     (nil))
(insn 42 41 43 4 (set (reg:SI 0 ax [140])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:273 90 {*movsi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 0 ax [orig:94 D.6890 ] [94])
        (sign_extend:DI (reg:SI 0 ax [140]))) preproc.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg:DI 0 ax [orig:95 D.6890 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 D.6890 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:273 218 {*adddi_1}
     (nil))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 1 dx [orig:96 D.6890 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:95 D.6890 ] [95])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:273 512 {*ashldi3_1}
     (nil))
(insn 46 45 47 4 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:273 89 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.6888 ] [97])
                (plus:DI (reg/f:DI 0 ax [141])
                    (reg:DI 1 dx [orig:96 D.6890 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:273 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.6890 ] [96]))
        (nil)))
(insn 48 47 49 4 (set (reg:SF 21 xmm0 [orig:98 D.6889 ] [98])
        (mem:SF (reg/f:DI 0 ax [orig:97 D.6888 ] [97]) [0 *_26+0 S4 A32])) preproc.cpp:273 129 {*movsf_internal}
     (nil))
(insn 49 48 50 4 (set (reg:SF 22 xmm1 [143])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])) preproc.cpp:273 129 {*movsf_internal}
     (nil))
(insn 50 49 51 4 (set (reg:SF 21 xmm0 [142])
        (plus:SF (reg:SF 21 xmm0 [orig:98 D.6889 ] [98])
            (reg:SF 22 xmm1 [143]))) preproc.cpp:273 797 {*fop_sf_comm_sse}
     (nil))
(insn 51 50 52 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 21 xmm0 [142])) preproc.cpp:273 129 {*movsf_internal}
     (nil))
(insn 52 51 123 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:270 217 {*addsi_1}
     (nil))
(jump_insn 123 52 124 4 (set (pc)
        (label_ref 53)) preproc.cpp:270 654 {jump}
     (nil)
 -> 53)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 124 123 56)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 99 100 101 102 103 104 144 145 146 147 148 149
(code_label 56 124 57 5 49 "" [1 uses])
(note 57 56 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 5 (set (reg:DF 21 xmm0 [orig:99 D.6891 ] [99])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32]))) preproc.cpp:276 201 {*floatsidf2_sse}
     (nil))
(insn 59 58 60 5 (set (reg:DF 22 xmm1 [144])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) preproc.cpp:276 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 60 59 61 5 (set (reg:DF 21 xmm0 [orig:100 D.6891 ] [100])
        (div:DF (reg:DF 21 xmm0 [orig:99 D.6891 ] [99])
            (reg:DF 22 xmm1 [144]))) preproc.cpp:276 805 {*fop_df_1_sse}
     (nil))
(insn 61 60 62 5 (set (reg:SF 21 xmm0 [orig:101 D.6889 ] [101])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:100 D.6891 ] [100]))) preproc.cpp:276 157 {*truncdfsf_fast_sse}
     (nil))
(insn 62 61 63 5 (set (reg:SF 22 xmm1 [146])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])) preproc.cpp:276 129 {*movsf_internal}
     (nil))
(insn 63 62 129 5 (set (reg:SF 22 xmm1 [145])
        (div:SF (reg:SF 22 xmm1 [145])
            (reg:SF 21 xmm0 [orig:101 D.6889 ] [101]))) preproc.cpp:276 804 {*fop_sf_1_sse}
     (nil))
(insn 129 63 64 5 (set (reg:SF 21 xmm0 [145])
        (reg:SF 22 xmm1 [145])) preproc.cpp:276 129 {*movsf_internal}
     (nil))
(insn 64 129 65 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 21 xmm0 [145])) preproc.cpp:276 129 {*movsf_internal}
     (nil))
(insn 65 64 66 5 (set (reg:DF 21 xmm0 [orig:102 D.6891 ] [102])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32]))) preproc.cpp:277 201 {*floatsidf2_sse}
     (nil))
(insn 66 65 67 5 (set (reg:DF 22 xmm1 [147])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) preproc.cpp:277 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 67 66 68 5 (set (reg:DF 21 xmm0 [orig:103 D.6891 ] [103])
        (div:DF (reg:DF 21 xmm0 [orig:102 D.6891 ] [102])
            (reg:DF 22 xmm1 [147]))) preproc.cpp:277 805 {*fop_df_1_sse}
     (nil))
(insn 68 67 69 5 (set (reg:SF 21 xmm0 [orig:104 D.6889 ] [104])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:103 D.6891 ] [103]))) preproc.cpp:277 157 {*truncdfsf_fast_sse}
     (nil))
(insn 69 68 70 5 (set (reg:SF 22 xmm1 [149])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])) preproc.cpp:277 129 {*movsf_internal}
     (nil))
(insn 70 69 131 5 (set (reg:SF 22 xmm1 [148])
        (div:SF (reg:SF 22 xmm1 [148])
            (reg:SF 21 xmm0 [orig:104 D.6889 ] [104]))) preproc.cpp:277 804 {*fop_sf_1_sse}
     (nil))
(insn 131 70 71 5 (set (reg:SF 21 xmm0 [148])
        (reg:SF 22 xmm1 [148])) preproc.cpp:277 129 {*movsf_internal}
     (nil))
(insn 71 131 72 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 21 xmm0 [148])) preproc.cpp:277 129 {*movsf_internal}
     (nil))
(insn 72 71 108 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:279 90 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 150
(code_label 108 72 73 6 52 "" [1 uses])
(note 73 108 74 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 6 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) preproc.cpp:279 89 {*movdi_internal}
     (nil))
(insn 75 74 76 6 (set (reg:SI 0 ax [orig:105 D.6886 ] [105])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [150])
                (const_int 300 [0x12c])) [0 procpar_info_11(D)->num_points+0 S4 A32])) preproc.cpp:279 90 {*movsi_internal}
     (nil))
(insn 76 75 77 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:105 D.6886 ] [105])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32]))) preproc.cpp:279 7 {*cmpsi_1}
     (nil))
(jump_insn 77 76 78 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) preproc.cpp:279 612 {*jcc_1}
     (nil)
 -> 111)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 151 152 153 154 155 156 157 158
(note 78 77 79 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 7 (set (reg:SI 0 ax [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:281 90 {*movsi_internal}
     (nil))
(insn 80 79 81 7 (set (reg:DI 0 ax [orig:106 D.6887 ] [106])
        (sign_extend:DI (reg:SI 0 ax [151]))) preproc.cpp:281 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 7 (parallel [
            (set (reg:DI 1 dx [orig:107 D.6887 ] [107])
                (ashift:DI (reg:DI 0 ax [orig:106 D.6887 ] [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:281 512 {*ashldi3_1}
     (nil))
(insn 82 81 83 7 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:281 89 {*movdi_internal}
     (nil))
(insn 83 82 84 7 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.6888 ] [108])
                (plus:DI (reg/f:DI 0 ax [152])
                    (reg:DI 1 dx [orig:107 D.6887 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:281 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.6887 ] [107]))
        (nil)))
(insn 84 83 85 7 (set (reg:SI 1 dx [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:281 90 {*movsi_internal}
     (nil))
(insn 85 84 86 7 (set (reg:DI 1 dx [orig:109 D.6887 ] [109])
        (sign_extend:DI (reg:SI 1 dx [153]))) preproc.cpp:281 142 {*extendsidi2_rex64}
     (nil))
(insn 86 85 87 7 (parallel [
            (set (reg:DI 2 cx [orig:110 D.6887 ] [110])
                (ashift:DI (reg:DI 1 dx [orig:109 D.6887 ] [109])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:281 512 {*ashldi3_1}
     (nil))
(insn 87 86 88 7 (set (reg/f:DI 1 dx [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:281 89 {*movdi_internal}
     (nil))
(insn 88 87 89 7 (parallel [
            (set (reg/f:DI 1 dx [orig:111 D.6888 ] [111])
                (plus:DI (reg/f:DI 1 dx [154])
                    (reg:DI 2 cx [orig:110 D.6887 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:281 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:110 D.6887 ] [110]))
        (nil)))
(insn 89 88 90 7 (set (reg:SF 21 xmm0 [orig:112 D.6889 ] [112])
        (mem:SF (reg/f:DI 1 dx [orig:111 D.6888 ] [111]) [0 *_45+0 S4 A32])) preproc.cpp:281 129 {*movsf_internal}
     (nil))
(insn 90 89 91 7 (set (reg:SF 21 xmm0 [orig:113 D.6889 ] [113])
        (minus:SF (reg:SF 21 xmm0 [orig:112 D.6889 ] [112])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32]))) preproc.cpp:281 804 {*fop_sf_1_sse}
     (nil))
(insn 91 90 92 7 (set (mem:SF (reg/f:DI 0 ax [orig:108 D.6888 ] [108]) [0 *_42+0 S4 A32])
        (reg:SF 21 xmm0 [orig:113 D.6889 ] [113])) preproc.cpp:281 129 {*movsf_internal}
     (nil))
(insn 92 91 93 7 (set (reg:SI 0 ax [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:282 90 {*movsi_internal}
     (nil))
(insn 93 92 94 7 (set (reg:DI 0 ax [orig:114 D.6890 ] [114])
        (sign_extend:DI (reg:SI 0 ax [155]))) preproc.cpp:282 142 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 7 (parallel [
            (set (reg:DI 0 ax [orig:115 D.6890 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 D.6890 ] [114])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 218 {*adddi_1}
     (nil))
(insn 95 94 96 7 (parallel [
            (set (reg:DI 1 dx [orig:116 D.6890 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.6890 ] [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 512 {*ashldi3_1}
     (nil))
(insn 96 95 97 7 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:282 89 {*movdi_internal}
     (nil))
(insn 97 96 98 7 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.6888 ] [117])
                (plus:DI (reg/f:DI 0 ax [156])
                    (reg:DI 1 dx [orig:116 D.6890 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.6890 ] [116]))
        (nil)))
(insn 98 97 99 7 (set (reg:SI 1 dx [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:282 90 {*movsi_internal}
     (nil))
(insn 99 98 100 7 (set (reg:DI 1 dx [orig:118 D.6890 ] [118])
        (sign_extend:DI (reg:SI 1 dx [157]))) preproc.cpp:282 142 {*extendsidi2_rex64}
     (nil))
(insn 100 99 101 7 (parallel [
            (set (reg:DI 1 dx [orig:119 D.6890 ] [119])
                (plus:DI (reg:DI 1 dx [orig:118 D.6890 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 218 {*adddi_1}
     (nil))
(insn 101 100 102 7 (parallel [
            (set (reg:DI 2 cx [orig:120 D.6890 ] [120])
                (ashift:DI (reg:DI 1 dx [orig:119 D.6890 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 512 {*ashldi3_1}
     (nil))
(insn 102 101 103 7 (set (reg/f:DI 1 dx [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:282 89 {*movdi_internal}
     (nil))
(insn 103 102 104 7 (parallel [
            (set (reg/f:DI 1 dx [orig:121 D.6888 ] [121])
                (plus:DI (reg/f:DI 1 dx [158])
                    (reg:DI 2 cx [orig:120 D.6890 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:120 D.6890 ] [120]))
        (nil)))
(insn 104 103 105 7 (set (reg:SF 21 xmm0 [orig:122 D.6889 ] [122])
        (mem:SF (reg/f:DI 1 dx [orig:121 D.6888 ] [121]) [0 *_56+0 S4 A32])) preproc.cpp:282 129 {*movsf_internal}
     (nil))
(insn 105 104 106 7 (set (reg:SF 21 xmm0 [orig:123 D.6889 ] [123])
        (minus:SF (reg:SF 21 xmm0 [orig:122 D.6889 ] [122])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32]))) preproc.cpp:282 804 {*fop_sf_1_sse}
     (nil))
(insn 106 105 107 7 (set (mem:SF (reg/f:DI 0 ax [orig:117 D.6888 ] [117]) [0 *_52+0 S4 A32])
        (reg:SF 21 xmm0 [orig:123 D.6889 ] [123])) preproc.cpp:282 129 {*movsf_internal}
     (nil))
(insn 107 106 125 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:279 217 {*addsi_1}
     (nil))
(jump_insn 125 107 126 7 (set (pc)
        (label_ref 108)) preproc.cpp:279 654 {jump}
     (nil)
 -> 108)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 126 125 111)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 124 125
(code_label 111 126 112 8 51 "" [1 uses])
(note 112 111 113 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 116 8 (set (reg:SI 0 ax [orig:124 D.6886 ] [124])
        (const_int 1 [0x1])) preproc.cpp:285 90 {*movsi_internal}
     (nil))
(insn 116 113 120 8 (set (reg:SI 0 ax [orig:125 <retval> ] [125])
        (reg:SI 0 ax [orig:124 D.6886 ] [124])) preproc.cpp:285 90 {*movsi_internal}
     (nil))
(insn 120 116 121 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:125 <retval> ] [125])) preproc.cpp:286 90 {*movsi_internal}
     (nil))
(insn 121 120 127 8 (use (reg/i:SI 0 ax)) preproc.cpp:286 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 127 121 0 NOTE_INSN_DELETED)

;; Function int ecc_correction(float*, float*, Procpar_info*, Preprocess*) (_Z14ecc_correctionPfS_P12Procpar_infoP10Preprocess, funcdef_no=5, decl_uid=5466, cgraph_uid=5, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 10:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 11:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 12:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 13:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 14:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 15:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 16:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 17:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 18:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 19:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 20:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 21:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 34:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 41:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 50:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 58:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 61
	 Choosing alt 0 in insn 61:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 64:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 65:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 71:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 79:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 84:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 85:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 91:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 98:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 106
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 107:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 114
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 115:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 0 in insn 117:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 118
	 Choosing alt 0 in insn 118:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 121:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 122:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 128:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 135
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 136:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 141:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 142:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 143:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 145:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 146:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 148:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 154:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=244 from oldreg=163, assigning class SSE_REGS to r244
  154: r244:SF=float_trunc([frame:DI-0x40])
    Inserting insn reload after:
  222: r163:SF=r244:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 222:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 155:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=245, assigning class NO_REGS to secondary r245
  156: r245:DF=r233:DF
      REG_DEAD r233:DF
    Inserting the sec. move after:
  223: xmm0:DF=r245:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 223:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 160
	 Choosing alt 0 in insn 160:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=246 from oldreg=163, assigning class SSE_REGS to r246
      Making reload reg 246 for reg 163 optional
  160: r166:SF=r165:SF*r246:SF
      REG_DEAD r165:SF
      REG_DEAD r163:SF
    Inserting insn reload before:
  224: r246:SF=r163:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 224:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 161:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 165:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 168:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=247 from oldreg=171, assigning class SSE_REGS to r247
  168: r247:SF=float_trunc([frame:DI-0x40])
    Inserting insn reload after:
  225: r171:SF=r247:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 225:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 169:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=248, assigning class NO_REGS to secondary r248
  170: r248:DF=r236:DF
      REG_DEAD r236:DF
    Inserting the sec. move after:
  226: xmm0:DF=r248:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 226:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 174
	 Choosing alt 0 in insn 174:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=249 from oldreg=171, assigning class SSE_REGS to r249
      Making reload reg 249 for reg 171 optional
  174: r174:SF=r173:SF*r249:SF
      REG_DEAD r173:SF
      REG_DEAD r171:SF
    Inserting insn reload before:
  227: r249:SF=r171:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 227:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 175:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 181:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=250 from oldreg=178, assigning class SSE_REGS to r250
  181: r250:SF=float_trunc([frame:DI-0x38])
    Inserting insn reload after:
  228: r178:SF=r250:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 228:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 182:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=251, assigning class NO_REGS to secondary r251
  183: r251:DF=r239:DF
      REG_DEAD r239:DF
    Inserting the sec. move after:
  229: xmm0:DF=r251:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 229:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 187
	 Choosing alt 0 in insn 187:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=252 from oldreg=178, assigning class SSE_REGS to r252
      Making reload reg 252 for reg 178 optional
  187: r181:SF=r180:SF*r252:SF
      REG_DEAD r180:SF
      REG_DEAD r178:SF
    Inserting insn reload before:
  230: r252:SF=r178:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 230:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 188:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 191:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 195:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=253 from oldreg=186, assigning class SSE_REGS to r253
  195: r253:SF=float_trunc([frame:DI-0x38])
    Inserting insn reload after:
  231: r186:SF=r253:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 231:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 196:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=254, assigning class NO_REGS to secondary r254
  197: r254:DF=r242:DF
      REG_DEAD r242:DF
    Inserting the sec. move after:
  232: xmm0:DF=r254:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 232:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 201
	 Choosing alt 0 in insn 201:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=255 from oldreg=186, assigning class SSE_REGS to r255
      Making reload reg 255 for reg 186 optional
  201: r189:SF=r188:SF*r255:SF
      REG_DEAD r188:SF
      REG_DEAD r186:SF
    Inserting insn reload before:
  233: r255:SF=r186:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 233:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 202:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 203:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=256 from oldreg=186, assigning class SSE_REGS to inheritance r256
    Original reg change 186->256 (bb4):
  231: r256:SF=r253:SF
    Add original<-inheritance after:
  234: r186:SF=r256:SF

    Inheritance reuse change 186->256 (bb4):
  233: r255:SF=r256:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=257 from oldreg=178, assigning class SSE_REGS to inheritance r257
    Original reg change 178->257 (bb4):
  228: r257:SF=r250:SF
    Add original<-inheritance after:
  235: r178:SF=r257:SF

    Inheritance reuse change 178->257 (bb4):
  230: r252:SF=r257:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=258 from oldreg=171, assigning class SSE_REGS to inheritance r258
    Original reg change 171->258 (bb4):
  225: r258:SF=r247:SF
    Add original<-inheritance after:
  236: r171:SF=r258:SF

    Inheritance reuse change 171->258 (bb4):
  227: r249:SF=r258:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=259 from oldreg=163, assigning class SSE_REGS to inheritance r259
    Original reg change 163->259 (bb4):
  222: r259:SF=r244:SF
    Add original<-inheritance after:
  237: r163:SF=r259:SF

    Inheritance reuse change 163->259 (bb4):
  224: r246:SF=r259:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   234: r186:SF=r256:SF
deleting insn with uid = 234.
	    Removing dead insn:
   235: r178:SF=r257:SF
deleting insn with uid = 235.
	    Removing dead insn:
   236: r171:SF=r258:SF
deleting insn with uid = 236.
	    Removing dead insn:
   237: r163:SF=r259:SF
deleting insn with uid = 237.
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 217: point = 0
   Insn 216: point = 0
   Insn 212: point = 1
   Insn 209: point = 3
  BB 3
   Insn 27: point = 4
   Insn 26: point = 4
   Insn 25: point = 5
   Insn 24: point = 7
  BB 4
   Insn 219: point = 8
   Insn 203: point = 8
   Insn 202: point = 8
   Insn 201: point = 9
   Insn 233: point = 11
	   Creating copy r255<-r256@1
   Insn 200: point = 13
   Insn 199: point = 15
   Insn 198: point = 16
   Insn 232: point = 16
	Hard reg 21 is preferable by r254 with profit 1
   Insn 197: point = 17
	Hard reg 21 is preferable by r254 with profit 1
	Hard reg 0 is preferable by r254 with profit 1
   Insn 196: point = 19
   Insn 231: point = 20
	   Creating copy r253->r256@1
   Insn 195: point = 22
   Insn 194: point = 23
   Insn 193: point = 25
   Insn 192: point = 26
   Insn 191: point = 28
   Insn 190: point = 30
   Insn 189: point = 32
   Insn 188: point = 33
   Insn 187: point = 34
   Insn 230: point = 36
	   Creating copy r252<-r257@1
   Insn 186: point = 38
   Insn 185: point = 40
   Insn 184: point = 41
   Insn 229: point = 41
	Hard reg 21 is preferable by r251 with profit 1
   Insn 183: point = 42
	Hard reg 21 is preferable by r251 with profit 1
	Hard reg 0 is preferable by r251 with profit 1
   Insn 182: point = 44
   Insn 228: point = 45
	   Creating copy r250->r257@1
   Insn 181: point = 47
   Insn 180: point = 48
   Insn 179: point = 50
   Insn 178: point = 51
   Insn 177: point = 53
   Insn 176: point = 55
   Insn 175: point = 56
   Insn 174: point = 57
   Insn 227: point = 59
	   Creating copy r249<-r258@1
   Insn 173: point = 61
   Insn 172: point = 63
   Insn 171: point = 64
   Insn 226: point = 64
	Hard reg 21 is preferable by r248 with profit 1
   Insn 170: point = 65
	Hard reg 21 is preferable by r248 with profit 1
	Hard reg 0 is preferable by r248 with profit 1
   Insn 169: point = 67
   Insn 225: point = 68
	   Creating copy r247->r258@1
   Insn 168: point = 70
   Insn 167: point = 71
   Insn 166: point = 73
   Insn 165: point = 74
   Insn 164: point = 76
   Insn 163: point = 78
   Insn 162: point = 80
   Insn 161: point = 81
   Insn 160: point = 82
   Insn 224: point = 84
	   Creating copy r246<-r259@1
   Insn 159: point = 86
   Insn 158: point = 88
   Insn 157: point = 89
   Insn 223: point = 89
	Hard reg 21 is preferable by r245 with profit 1
   Insn 156: point = 90
	Hard reg 21 is preferable by r245 with profit 1
	Hard reg 0 is preferable by r245 with profit 1
   Insn 155: point = 92
   Insn 222: point = 93
	   Creating copy r244->r259@1
   Insn 154: point = 95
   Insn 153: point = 96
   Insn 152: point = 98
   Insn 151: point = 99
   Insn 150: point = 101
   Insn 149: point = 103
   Insn 148: point = 104
   Insn 147: point = 105
   Insn 146: point = 107
   Insn 145: point = 108
   Insn 144: point = 109
   Insn 143: point = 111
   Insn 142: point = 112
   Insn 141: point = 113
   Insn 140: point = 114
   Insn 139: point = 114
   Insn 138: point = 115
   Insn 137: point = 116
   Insn 136: point = 118
   Insn 135: point = 120
   Insn 134: point = 122
   Insn 133: point = 123
   Insn 132: point = 125
   Insn 131: point = 127
   Insn 130: point = 129
   Insn 129: point = 130
   Insn 128: point = 132
   Insn 127: point = 134
   Insn 126: point = 136
   Insn 125: point = 137
   Insn 124: point = 139
   Insn 123: point = 141
   Insn 122: point = 142
   Insn 121: point = 143
   Insn 120: point = 144
   Insn 119: point = 144
   Insn 118: point = 145
   Insn 117: point = 147
   Insn 116: point = 149
   Insn 115: point = 151
   Insn 114: point = 153
   Insn 113: point = 155
   Insn 112: point = 156
   Insn 111: point = 158
   Insn 110: point = 160
   Insn 109: point = 162
   Insn 108: point = 163
   Insn 107: point = 165
   Insn 106: point = 167
   Insn 105: point = 169
   Insn 104: point = 170
   Insn 103: point = 172
   Insn 102: point = 174
   Insn 101: point = 176
   Insn 100: point = 177
   Insn 99: point = 179
   Insn 98: point = 181
   Insn 97: point = 183
   Insn 96: point = 185
   Insn 95: point = 186
   Insn 94: point = 188
   Insn 93: point = 190
   Insn 92: point = 191
   Insn 91: point = 193
   Insn 90: point = 195
   Insn 89: point = 197
   Insn 88: point = 198
   Insn 87: point = 200
   Insn 86: point = 202
   Insn 85: point = 203
   Insn 84: point = 204
   Insn 83: point = 205
   Insn 82: point = 205
   Insn 81: point = 206
   Insn 80: point = 207
   Insn 79: point = 209
   Insn 78: point = 211
   Insn 77: point = 213
   Insn 76: point = 214
   Insn 75: point = 216
   Insn 74: point = 218
   Insn 73: point = 220
   Insn 72: point = 221
   Insn 71: point = 223
   Insn 70: point = 225
   Insn 69: point = 227
   Insn 68: point = 228
   Insn 67: point = 230
   Insn 66: point = 232
   Insn 65: point = 233
   Insn 64: point = 234
   Insn 63: point = 235
   Insn 62: point = 235
   Insn 61: point = 236
   Insn 60: point = 238
   Insn 59: point = 240
   Insn 58: point = 242
   Insn 57: point = 244
   Insn 56: point = 246
   Insn 55: point = 247
   Insn 54: point = 249
   Insn 53: point = 251
   Insn 52: point = 253
   Insn 51: point = 254
   Insn 50: point = 256
   Insn 49: point = 258
   Insn 48: point = 260
   Insn 47: point = 261
   Insn 46: point = 263
   Insn 45: point = 265
   Insn 44: point = 267
   Insn 43: point = 268
   Insn 42: point = 270
   Insn 41: point = 272
   Insn 40: point = 274
   Insn 39: point = 276
   Insn 38: point = 277
   Insn 37: point = 279
   Insn 36: point = 281
   Insn 35: point = 282
   Insn 34: point = 284
   Insn 33: point = 286
   Insn 32: point = 288
   Insn 31: point = 289
   Insn 30: point = 291
   Insn 29: point = 293
  BB 2
   Insn 22: point = 294
   Insn 21: point = 294
   Insn 20: point = 295
   Insn 19: point = 296
   Insn 18: point = 297
   Insn 17: point = 298
   Insn 16: point = 299
   Insn 15: point = 300
   Insn 14: point = 301
   Insn 13: point = 302
   Insn 12: point = 303
   Insn 11: point = 304
   Insn 10: point = 305
   Insn 9: point = 306
   Insn 5: point = 306
   Insn 4: point = 306
   Insn 3: point = 306
   Insn 2: point = 306
 r87: [4..5]
 r88: [290..291]
 r89: [287..289]
 r90: [285..286]
 r91: [283..284]
 r92: [269..282]
 r93: [278..279]
 r94: [275..277]
 r95: [273..274]
 r96: [271..272]
 r97: [269..270]
 r98: [237..268]
 r99: [264..265]
 r100: [262..263]
 r101: [259..261]
 r102: [257..258]
 r103: [255..256]
 r104: [239..254]
 r105: [250..251]
 r106: [248..249]
 r107: [245..247]
 r108: [243..244]
 r109: [241..242]
 r110: [239..240]
 r111: [237..238]
 r112: [235..236]
 r113: [229..230]
 r114: [226..228]
 r115: [224..225]
 r116: [222..223]
 r117: [206..221]
 r118: [217..218]
 r119: [215..216]
 r120: [212..214]
 r121: [210..211]
 r122: [208..209]
 r123: [205..207]
 r124: [199..200]
 r125: [196..198]
 r126: [194..195]
 r127: [192..193]
 r128: [178..191]
 r129: [187..188]
 r130: [184..186]
 r131: [182..183]
 r132: [180..181]
 r133: [178..179]
 r134: [146..177]
 r135: [173..174]
 r136: [171..172]
 r137: [168..170]
 r138: [166..167]
 r139: [164..165]
 r140: [148..163]
 r141: [159..160]
 r142: [157..158]
 r143: [154..156]
 r144: [152..153]
 r145: [150..151]
 r146: [148..149]
 r147: [146..147]
 r148: [144..145]
 r149: [138..139]
 r150: [135..137]
 r151: [133..134]
 r152: [131..132]
 r153: [115..130]
 r154: [126..127]
 r155: [124..125]
 r156: [121..123]
 r157: [119..120]
 r158: [117..118]
 r159: [114..116]
 r160: [100..101]
 r161: [97..99]
 r162: [81..96]
 r164: [87..88]
 r165: [83..86]
 r166: [81..82]
 r167: [77..78]
 r168: [75..76]
 r169: [72..74]
 r170: [56..71]
 r172: [62..63]
 r173: [58..61]
 r174: [56..57]
 r175: [52..53]
 r176: [49..51]
 r177: [33..48]
 r179: [39..40]
 r180: [35..38]
 r181: [33..34]
 r182: [29..30]
 r183: [27..28]
 r184: [24..26]
 r185: [8..23]
 r187: [14..15]
 r188: [10..13]
 r189: [8..9]
 r190: [2..3]
 r191: [0..1]
 r192: [304..305]
 r193: [302..303]
 r194: [300..301]
 r195: [298..299]
 r196: [296..297]
 r197: [294..295]
 r198: [6..7]
 r199: [292..293]
 r200: [287..288]
 r201: [280..281]
 r202: [275..276]
 r203: [266..267]
 r204: [259..260]
 r205: [252..253]
 r206: [245..246]
 r207: [233..234]
 r208: [231..232]
 r209: [226..227]
 r210: [219..220]
 r211: [212..213]
 r212: [203..204]
 r213: [201..202]
 r214: [196..197]
 r215: [189..190]
 r216: [184..185]
 r217: [175..176]
 r218: [168..169]
 r219: [161..162]
 r220: [154..155]
 r221: [142..143]
 r222: [140..141]
 r223: [135..136]
 r224: [128..129]
 r225: [121..122]
 r226: [112..113]
 r227: [108..109]
 r228: [110..111]
 r229: [104..105]
 r230: [106..107]
 r231: [102..103]
 r232: [97..98]
 r233: [91..92]
 r234: [79..80]
 r235: [72..73]
 r236: [66..67]
 r237: [54..55]
 r238: [49..50]
 r239: [43..44]
 r240: [31..32]
 r241: [24..25]
 r242: [18..19]
 r244: [94..95]
 r245: [89..90]
 r246: [83..84]
 r247: [69..70]
 r248: [64..65]
 r249: [58..59]
 r250: [46..47]
 r251: [41..42]
 r252: [35..36]
 r253: [21..22]
 r254: [16..17]
 r255: [10..11]
 r256: [12..20]
 r257: [37..45]
 r258: [60..68]
 r259: [85..93]
Compressing live ranges: from 306 to 272 - 88%
Ranges after the compression:
 r87: [4..5]
 r88: [256..257]
 r89: [254..255]
 r90: [252..253]
 r91: [250..251]
 r92: [238..249]
 r93: [246..247]
 r94: [244..245]
 r95: [242..243]
 r96: [240..241]
 r97: [238..239]
 r98: [210..237]
 r99: [234..235]
 r100: [232..233]
 r101: [230..231]
 r102: [228..229]
 r103: [226..227]
 r104: [212..225]
 r105: [222..223]
 r106: [220..221]
 r107: [218..219]
 r108: [216..217]
 r109: [214..215]
 r110: [212..213]
 r111: [210..211]
 r112: [208..209]
 r113: [202..203]
 r114: [200..201]
 r115: [198..199]
 r116: [196..197]
 r117: [182..195]
 r118: [192..193]
 r119: [190..191]
 r120: [188..189]
 r121: [186..187]
 r122: [184..185]
 r123: [182..183]
 r124: [176..177]
 r125: [174..175]
 r126: [172..173]
 r127: [170..171]
 r128: [158..169]
 r129: [166..167]
 r130: [164..165]
 r131: [162..163]
 r132: [160..161]
 r133: [158..159]
 r134: [130..157]
 r135: [154..155]
 r136: [152..153]
 r137: [150..151]
 r138: [148..149]
 r139: [146..147]
 r140: [132..145]
 r141: [142..143]
 r142: [140..141]
 r143: [138..139]
 r144: [136..137]
 r145: [134..135]
 r146: [132..133]
 r147: [130..131]
 r148: [128..129]
 r149: [122..123]
 r150: [120..121]
 r151: [118..119]
 r152: [116..117]
 r153: [102..115]
 r154: [112..113]
 r155: [110..111]
 r156: [108..109]
 r157: [106..107]
 r158: [104..105]
 r159: [102..103]
 r160: [88..89]
 r161: [86..87]
 r162: [72..85]
 r164: [78..79]
 r165: [74..77]
 r166: [72..73]
 r167: [68..69]
 r168: [66..67]
 r169: [64..65]
 r170: [50..63]
 r172: [56..57]
 r173: [52..55]
 r174: [50..51]
 r175: [46..47]
 r176: [44..45]
 r177: [30..43]
 r179: [36..37]
 r180: [32..35]
 r181: [30..31]
 r182: [26..27]
 r183: [24..25]
 r184: [22..23]
 r185: [8..21]
 r187: [14..15]
 r188: [10..13]
 r189: [8..9]
 r190: [2..3]
 r191: [0..1]
 r192: [270..271]
 r193: [268..269]
 r194: [266..267]
 r195: [264..265]
 r196: [262..263]
 r197: [260..261]
 r198: [6..7]
 r199: [258..259]
 r200: [254..255]
 r201: [248..249]
 r202: [244..245]
 r203: [236..237]
 r204: [230..231]
 r205: [224..225]
 r206: [218..219]
 r207: [206..207]
 r208: [204..205]
 r209: [200..201]
 r210: [194..195]
 r211: [188..189]
 r212: [180..181]
 r213: [178..179]
 r214: [174..175]
 r215: [168..169]
 r216: [164..165]
 r217: [156..157]
 r218: [150..151]
 r219: [144..145]
 r220: [138..139]
 r221: [126..127]
 r222: [124..125]
 r223: [120..121]
 r224: [114..115]
 r225: [108..109]
 r226: [100..101]
 r227: [96..97]
 r228: [98..99]
 r229: [92..93]
 r230: [94..95]
 r231: [90..91]
 r232: [86..87]
 r233: [82..83]
 r234: [70..71]
 r235: [64..65]
 r236: [60..61]
 r237: [48..49]
 r238: [44..45]
 r239: [40..41]
 r240: [28..29]
 r241: [22..23]
 r242: [18..19]
 r244: [84..85]
 r245: [80..81]
 r246: [74..75]
 r247: [62..63]
 r248: [58..59]
 r249: [52..53]
 r250: [42..43]
 r251: [38..39]
 r252: [32..33]
 r253: [20..21]
 r254: [16..17]
 r255: [10..11]
 r256: [12..19]
 r257: [34..41]
 r258: [54..61]
 r259: [76..83]

********** Assignment #1: **********

	 Assigning to 244 (cl=SSE_REGS, orig=163, freq=2, tfirst=244, tfreq=2)...
	   Assign 24 to reload r244 (freq=2)
	Hard reg 24 is preferable by r259 with profit 1
	Hard reg 24 is preferable by r246 with profit 1
	 Assigning to 246 (cl=SSE_REGS, orig=163, freq=2, tfirst=244, tfreq=2)...
	   Assign 24 to optional reload r246 (freq=2)
	Hard reg 24 is preferable by r259 with profit 2
	 Assigning to 259 (cl=SSE_REGS, orig=163, freq=2, tfirst=244, tfreq=2)...
	 Assigning to 247 (cl=SSE_REGS, orig=171, freq=2, tfirst=247, tfreq=2)...
	   Assign 25 to reload r247 (freq=2)
	Hard reg 25 is preferable by r258 with profit 1
	Hard reg 25 is preferable by r249 with profit 1
	 Assigning to 249 (cl=SSE_REGS, orig=171, freq=2, tfirst=247, tfreq=2)...
	   Assign 25 to optional reload r249 (freq=2)
	Hard reg 25 is preferable by r258 with profit 2
	 Assigning to 258 (cl=SSE_REGS, orig=171, freq=2, tfirst=247, tfreq=2)...
	 Assigning to 250 (cl=SSE_REGS, orig=178, freq=2, tfirst=250, tfreq=2)...
	   Assign 26 to reload r250 (freq=2)
	Hard reg 26 is preferable by r257 with profit 1
	Hard reg 26 is preferable by r252 with profit 1
	 Assigning to 252 (cl=SSE_REGS, orig=178, freq=2, tfirst=250, tfreq=2)...
	   Assign 26 to optional reload r252 (freq=2)
	Hard reg 26 is preferable by r257 with profit 2
	 Assigning to 257 (cl=SSE_REGS, orig=178, freq=2, tfirst=250, tfreq=2)...
	 Assigning to 253 (cl=SSE_REGS, orig=186, freq=2, tfirst=253, tfreq=2)...
	   Assign 27 to reload r253 (freq=2)
	Hard reg 27 is preferable by r256 with profit 1
	Hard reg 27 is preferable by r255 with profit 1
	 Assigning to 255 (cl=SSE_REGS, orig=186, freq=2, tfirst=253, tfreq=2)...
	   Assign 27 to optional reload r255 (freq=2)
	Hard reg 27 is preferable by r256 with profit 2
	 Assigning to 256 (cl=SSE_REGS, orig=186, freq=2, tfirst=253, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  233: r255:SF=r186:SF
      REG_DEAD r186:SF
   Insn after restoring regs:
  231: r186:SF=r253:SF
      REG_DEAD r253:SF
   Insn after restoring regs:
  230: r252:SF=r178:SF
      REG_DEAD r178:SF
   Insn after restoring regs:
  228: r178:SF=r250:SF
      REG_DEAD r250:SF
   Insn after restoring regs:
  227: r249:SF=r171:SF
      REG_DEAD r171:SF
   Insn after restoring regs:
  225: r171:SF=r247:SF
      REG_DEAD r247:SF
   Insn after restoring regs:
  224: r246:SF=r163:SF
      REG_DEAD r163:SF
   Insn after restoring regs:
  222: r163:SF=r244:SF
      REG_DEAD r244:SF
Remove optional reload reg 246
  Restoring original insn:
  160: r166:SF=r165:SF*r163:SF
      REG_DEAD r163:SF
      REG_DEAD r165:SF
  Deleting move 224
  224: r246:SF=r163:SF
      REG_DEAD r163:SF
deleting insn with uid = 224.
Remove optional reload reg 249
  Restoring original insn:
  174: r174:SF=r173:SF*r171:SF
      REG_DEAD r171:SF
      REG_DEAD r173:SF
  Deleting move 227
  227: r249:SF=r171:SF
      REG_DEAD r171:SF
deleting insn with uid = 227.
Remove optional reload reg 252
  Restoring original insn:
  187: r181:SF=r180:SF*r178:SF
      REG_DEAD r178:SF
      REG_DEAD r180:SF
  Deleting move 230
  230: r252:SF=r178:SF
      REG_DEAD r178:SF
deleting insn with uid = 230.
Remove optional reload reg 255
  Restoring original insn:
  201: r189:SF=r188:SF*r186:SF
      REG_DEAD r186:SF
      REG_DEAD r188:SF
  Deleting move 233
  233: r255:SF=r186:SF
      REG_DEAD r186:SF
deleting insn with uid = 233.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 201:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=260 from oldreg=186, assigning class SSE_REGS to r260
      Making reload reg 260 for reg 186 optional
  201: r189:SF=r188:SF*r260:SF
      REG_DEAD r186:SF
      REG_DEAD r188:SF
    Inserting insn reload before:
  238: r260:SF=r186:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 238:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=261 from oldreg=178, assigning class SSE_REGS to r261
      Making reload reg 261 for reg 178 optional
  187: r181:SF=r180:SF*r261:SF
      REG_DEAD r178:SF
      REG_DEAD r180:SF
    Inserting insn reload before:
  239: r261:SF=r178:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 239:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=262 from oldreg=171, assigning class SSE_REGS to r262
      Making reload reg 262 for reg 171 optional
  174: r174:SF=r173:SF*r262:SF
      REG_DEAD r171:SF
      REG_DEAD r173:SF
    Inserting insn reload before:
  240: r262:SF=r171:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 240:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 160:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=263 from oldreg=163, assigning class SSE_REGS to r263
      Making reload reg 263 for reg 163 optional
  160: r166:SF=r165:SF*r263:SF
      REG_DEAD r163:SF
      REG_DEAD r165:SF
    Inserting insn reload before:
  241: r263:SF=r163:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 241:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=264 from oldreg=186, assigning class SSE_REGS to inheritance r264
    Original reg change 186->264 (bb4):
  231: r264:SF=r253:SF
      REG_DEAD r253:SF
    Add original<-inheritance after:
  242: r186:SF=r264:SF

    Inheritance reuse change 186->264 (bb4):
  238: r260:SF=r264:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=265 from oldreg=178, assigning class SSE_REGS to inheritance r265
    Original reg change 178->265 (bb4):
  228: r265:SF=r250:SF
      REG_DEAD r250:SF
    Add original<-inheritance after:
  243: r178:SF=r265:SF

    Inheritance reuse change 178->265 (bb4):
  239: r261:SF=r265:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=266 from oldreg=171, assigning class SSE_REGS to inheritance r266
    Original reg change 171->266 (bb4):
  225: r266:SF=r247:SF
      REG_DEAD r247:SF
    Add original<-inheritance after:
  244: r171:SF=r266:SF

    Inheritance reuse change 171->266 (bb4):
  240: r262:SF=r266:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=267 from oldreg=163, assigning class SSE_REGS to inheritance r267
    Original reg change 163->267 (bb4):
  222: r267:SF=r244:SF
      REG_DEAD r244:SF
    Add original<-inheritance after:
  245: r163:SF=r267:SF

    Inheritance reuse change 163->267 (bb4):
  241: r263:SF=r267:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   242: r186:SF=r264:SF
deleting insn with uid = 242.
	    Removing dead insn:
   243: r178:SF=r265:SF
deleting insn with uid = 243.
	    Removing dead insn:
   244: r171:SF=r266:SF
deleting insn with uid = 244.
	    Removing dead insn:
   245: r163:SF=r267:SF
deleting insn with uid = 245.
EBB 5

********** Pseudo live ranges #2: **********

  BB 5
   Insn 217: point = 0
   Insn 216: point = 0
   Insn 212: point = 1
   Insn 209: point = 3
  BB 3
   Insn 27: point = 4
   Insn 26: point = 4
   Insn 25: point = 5
   Insn 24: point = 7
  BB 4
   Insn 219: point = 8
   Insn 203: point = 8
   Insn 202: point = 8
   Insn 201: point = 9
   Insn 238: point = 11
	   Creating copy r260<-r264@1
   Insn 200: point = 13
   Insn 199: point = 15
   Insn 198: point = 16
   Insn 232: point = 16
	Hard reg 21 is preferable by r254 with profit 1
   Insn 197: point = 17
	Hard reg 21 is preferable by r254 with profit 1
	Hard reg 0 is preferable by r254 with profit 1
   Insn 196: point = 19
   Insn 231: point = 20
	   Creating copy r253->r264@1
   Insn 195: point = 22
   Insn 194: point = 23
   Insn 193: point = 25
   Insn 192: point = 26
   Insn 191: point = 28
   Insn 190: point = 30
   Insn 189: point = 32
   Insn 188: point = 33
   Insn 187: point = 34
   Insn 239: point = 36
	   Creating copy r261<-r265@1
   Insn 186: point = 38
   Insn 185: point = 40
   Insn 184: point = 41
   Insn 229: point = 41
	Hard reg 21 is preferable by r251 with profit 1
   Insn 183: point = 42
	Hard reg 21 is preferable by r251 with profit 1
	Hard reg 0 is preferable by r251 with profit 1
   Insn 182: point = 44
   Insn 228: point = 45
	   Creating copy r250->r265@1
   Insn 181: point = 47
   Insn 180: point = 48
   Insn 179: point = 50
   Insn 178: point = 51
   Insn 177: point = 53
   Insn 176: point = 55
   Insn 175: point = 56
   Insn 174: point = 57
   Insn 240: point = 59
	   Creating copy r262<-r266@1
   Insn 173: point = 61
   Insn 172: point = 63
   Insn 171: point = 64
   Insn 226: point = 64
	Hard reg 21 is preferable by r248 with profit 1
   Insn 170: point = 65
	Hard reg 21 is preferable by r248 with profit 1
	Hard reg 0 is preferable by r248 with profit 1
   Insn 169: point = 67
   Insn 225: point = 68
	   Creating copy r247->r266@1
   Insn 168: point = 70
   Insn 167: point = 71
   Insn 166: point = 73
   Insn 165: point = 74
   Insn 164: point = 76
   Insn 163: point = 78
   Insn 162: point = 80
   Insn 161: point = 81
   Insn 160: point = 82
   Insn 241: point = 84
	   Creating copy r263<-r267@1
   Insn 159: point = 86
   Insn 158: point = 88
   Insn 157: point = 89
   Insn 223: point = 89
	Hard reg 21 is preferable by r245 with profit 1
   Insn 156: point = 90
	Hard reg 21 is preferable by r245 with profit 1
	Hard reg 0 is preferable by r245 with profit 1
   Insn 155: point = 92
   Insn 222: point = 93
	   Creating copy r244->r267@1
   Insn 154: point = 95
   Insn 153: point = 96
   Insn 152: point = 98
   Insn 151: point = 99
   Insn 150: point = 101
   Insn 149: point = 103
   Insn 148: point = 104
   Insn 147: point = 105
   Insn 146: point = 107
   Insn 145: point = 108
   Insn 144: point = 109
   Insn 143: point = 111
   Insn 142: point = 112
   Insn 141: point = 113
   Insn 140: point = 114
   Insn 139: point = 114
   Insn 138: point = 115
   Insn 137: point = 116
   Insn 136: point = 118
   Insn 135: point = 120
   Insn 134: point = 122
   Insn 133: point = 123
   Insn 132: point = 125
   Insn 131: point = 127
   Insn 130: point = 129
   Insn 129: point = 130
   Insn 128: point = 132
   Insn 127: point = 134
   Insn 126: point = 136
   Insn 125: point = 137
   Insn 124: point = 139
   Insn 123: point = 141
   Insn 122: point = 142
   Insn 121: point = 143
   Insn 120: point = 144
   Insn 119: point = 144
   Insn 118: point = 145
   Insn 117: point = 147
   Insn 116: point = 149
   Insn 115: point = 151
   Insn 114: point = 153
   Insn 113: point = 155
   Insn 112: point = 156
   Insn 111: point = 158
   Insn 110: point = 160
   Insn 109: point = 162
   Insn 108: point = 163
   Insn 107: point = 165
   Insn 106: point = 167
   Insn 105: point = 169
   Insn 104: point = 170
   Insn 103: point = 172
   Insn 102: point = 174
   Insn 101: point = 176
   Insn 100: point = 177
   Insn 99: point = 179
   Insn 98: point = 181
   Insn 97: point = 183
   Insn 96: point = 185
   Insn 95: point = 186
   Insn 94: point = 188
   Insn 93: point = 190
   Insn 92: point = 191
   Insn 91: point = 193
   Insn 90: point = 195
   Insn 89: point = 197
   Insn 88: point = 198
   Insn 87: point = 200
   Insn 86: point = 202
   Insn 85: point = 203
   Insn 84: point = 204
   Insn 83: point = 205
   Insn 82: point = 205
   Insn 81: point = 206
   Insn 80: point = 207
   Insn 79: point = 209
   Insn 78: point = 211
   Insn 77: point = 213
   Insn 76: point = 214
   Insn 75: point = 216
   Insn 74: point = 218
   Insn 73: point = 220
   Insn 72: point = 221
   Insn 71: point = 223
   Insn 70: point = 225
   Insn 69: point = 227
   Insn 68: point = 228
   Insn 67: point = 230
   Insn 66: point = 232
   Insn 65: point = 233
   Insn 64: point = 234
   Insn 63: point = 235
   Insn 62: point = 235
   Insn 61: point = 236
   Insn 60: point = 238
   Insn 59: point = 240
   Insn 58: point = 242
   Insn 57: point = 244
   Insn 56: point = 246
   Insn 55: point = 247
   Insn 54: point = 249
   Insn 53: point = 251
   Insn 52: point = 253
   Insn 51: point = 254
   Insn 50: point = 256
   Insn 49: point = 258
   Insn 48: point = 260
   Insn 47: point = 261
   Insn 46: point = 263
   Insn 45: point = 265
   Insn 44: point = 267
   Insn 43: point = 268
   Insn 42: point = 270
   Insn 41: point = 272
   Insn 40: point = 274
   Insn 39: point = 276
   Insn 38: point = 277
   Insn 37: point = 279
   Insn 36: point = 281
   Insn 35: point = 282
   Insn 34: point = 284
   Insn 33: point = 286
   Insn 32: point = 288
   Insn 31: point = 289
   Insn 30: point = 291
   Insn 29: point = 293
  BB 2
   Insn 22: point = 294
   Insn 21: point = 294
   Insn 20: point = 295
   Insn 19: point = 296
   Insn 18: point = 297
   Insn 17: point = 298
   Insn 16: point = 299
   Insn 15: point = 300
   Insn 14: point = 301
   Insn 13: point = 302
   Insn 12: point = 303
   Insn 11: point = 304
   Insn 10: point = 305
   Insn 9: point = 306
   Insn 5: point = 306
   Insn 4: point = 306
   Insn 3: point = 306
   Insn 2: point = 306
 r87: [4..5]
 r88: [290..291]
 r89: [287..289]
 r90: [285..286]
 r91: [283..284]
 r92: [269..282]
 r93: [278..279]
 r94: [275..277]
 r95: [273..274]
 r96: [271..272]
 r97: [269..270]
 r98: [237..268]
 r99: [264..265]
 r100: [262..263]
 r101: [259..261]
 r102: [257..258]
 r103: [255..256]
 r104: [239..254]
 r105: [250..251]
 r106: [248..249]
 r107: [245..247]
 r108: [243..244]
 r109: [241..242]
 r110: [239..240]
 r111: [237..238]
 r112: [235..236]
 r113: [229..230]
 r114: [226..228]
 r115: [224..225]
 r116: [222..223]
 r117: [206..221]
 r118: [217..218]
 r119: [215..216]
 r120: [212..214]
 r121: [210..211]
 r122: [208..209]
 r123: [205..207]
 r124: [199..200]
 r125: [196..198]
 r126: [194..195]
 r127: [192..193]
 r128: [178..191]
 r129: [187..188]
 r130: [184..186]
 r131: [182..183]
 r132: [180..181]
 r133: [178..179]
 r134: [146..177]
 r135: [173..174]
 r136: [171..172]
 r137: [168..170]
 r138: [166..167]
 r139: [164..165]
 r140: [148..163]
 r141: [159..160]
 r142: [157..158]
 r143: [154..156]
 r144: [152..153]
 r145: [150..151]
 r146: [148..149]
 r147: [146..147]
 r148: [144..145]
 r149: [138..139]
 r150: [135..137]
 r151: [133..134]
 r152: [131..132]
 r153: [115..130]
 r154: [126..127]
 r155: [124..125]
 r156: [121..123]
 r157: [119..120]
 r158: [117..118]
 r159: [114..116]
 r160: [100..101]
 r161: [97..99]
 r162: [81..96]
 r164: [87..88]
 r165: [83..86]
 r166: [81..82]
 r167: [77..78]
 r168: [75..76]
 r169: [72..74]
 r170: [56..71]
 r172: [62..63]
 r173: [58..61]
 r174: [56..57]
 r175: [52..53]
 r176: [49..51]
 r177: [33..48]
 r179: [39..40]
 r180: [35..38]
 r181: [33..34]
 r182: [29..30]
 r183: [27..28]
 r184: [24..26]
 r185: [8..23]
 r187: [14..15]
 r188: [10..13]
 r189: [8..9]
 r190: [2..3]
 r191: [0..1]
 r192: [304..305]
 r193: [302..303]
 r194: [300..301]
 r195: [298..299]
 r196: [296..297]
 r197: [294..295]
 r198: [6..7]
 r199: [292..293]
 r200: [287..288]
 r201: [280..281]
 r202: [275..276]
 r203: [266..267]
 r204: [259..260]
 r205: [252..253]
 r206: [245..246]
 r207: [233..234]
 r208: [231..232]
 r209: [226..227]
 r210: [219..220]
 r211: [212..213]
 r212: [203..204]
 r213: [201..202]
 r214: [196..197]
 r215: [189..190]
 r216: [184..185]
 r217: [175..176]
 r218: [168..169]
 r219: [161..162]
 r220: [154..155]
 r221: [142..143]
 r222: [140..141]
 r223: [135..136]
 r224: [128..129]
 r225: [121..122]
 r226: [112..113]
 r227: [108..109]
 r228: [110..111]
 r229: [104..105]
 r230: [106..107]
 r231: [102..103]
 r232: [97..98]
 r233: [91..92]
 r234: [79..80]
 r235: [72..73]
 r236: [66..67]
 r237: [54..55]
 r238: [49..50]
 r239: [43..44]
 r240: [31..32]
 r241: [24..25]
 r242: [18..19]
 r244: [94..95]
 r245: [89..90]
 r247: [69..70]
 r248: [64..65]
 r250: [46..47]
 r251: [41..42]
 r253: [21..22]
 r254: [16..17]
 r260: [10..11]
 r261: [35..36]
 r262: [58..59]
 r263: [83..84]
 r264: [12..20]
 r265: [37..45]
 r266: [60..68]
 r267: [85..93]
Compressing live ranges: from 306 to 272 - 88%
Ranges after the compression:
 r87: [4..5]
 r88: [256..257]
 r89: [254..255]
 r90: [252..253]
 r91: [250..251]
 r92: [238..249]
 r93: [246..247]
 r94: [244..245]
 r95: [242..243]
 r96: [240..241]
 r97: [238..239]
 r98: [210..237]
 r99: [234..235]
 r100: [232..233]
 r101: [230..231]
 r102: [228..229]
 r103: [226..227]
 r104: [212..225]
 r105: [222..223]
 r106: [220..221]
 r107: [218..219]
 r108: [216..217]
 r109: [214..215]
 r110: [212..213]
 r111: [210..211]
 r112: [208..209]
 r113: [202..203]
 r114: [200..201]
 r115: [198..199]
 r116: [196..197]
 r117: [182..195]
 r118: [192..193]
 r119: [190..191]
 r120: [188..189]
 r121: [186..187]
 r122: [184..185]
 r123: [182..183]
 r124: [176..177]
 r125: [174..175]
 r126: [172..173]
 r127: [170..171]
 r128: [158..169]
 r129: [166..167]
 r130: [164..165]
 r131: [162..163]
 r132: [160..161]
 r133: [158..159]
 r134: [130..157]
 r135: [154..155]
 r136: [152..153]
 r137: [150..151]
 r138: [148..149]
 r139: [146..147]
 r140: [132..145]
 r141: [142..143]
 r142: [140..141]
 r143: [138..139]
 r144: [136..137]
 r145: [134..135]
 r146: [132..133]
 r147: [130..131]
 r148: [128..129]
 r149: [122..123]
 r150: [120..121]
 r151: [118..119]
 r152: [116..117]
 r153: [102..115]
 r154: [112..113]
 r155: [110..111]
 r156: [108..109]
 r157: [106..107]
 r158: [104..105]
 r159: [102..103]
 r160: [88..89]
 r161: [86..87]
 r162: [72..85]
 r164: [78..79]
 r165: [74..77]
 r166: [72..73]
 r167: [68..69]
 r168: [66..67]
 r169: [64..65]
 r170: [50..63]
 r172: [56..57]
 r173: [52..55]
 r174: [50..51]
 r175: [46..47]
 r176: [44..45]
 r177: [30..43]
 r179: [36..37]
 r180: [32..35]
 r181: [30..31]
 r182: [26..27]
 r183: [24..25]
 r184: [22..23]
 r185: [8..21]
 r187: [14..15]
 r188: [10..13]
 r189: [8..9]
 r190: [2..3]
 r191: [0..1]
 r192: [270..271]
 r193: [268..269]
 r194: [266..267]
 r195: [264..265]
 r196: [262..263]
 r197: [260..261]
 r198: [6..7]
 r199: [258..259]
 r200: [254..255]
 r201: [248..249]
 r202: [244..245]
 r203: [236..237]
 r204: [230..231]
 r205: [224..225]
 r206: [218..219]
 r207: [206..207]
 r208: [204..205]
 r209: [200..201]
 r210: [194..195]
 r211: [188..189]
 r212: [180..181]
 r213: [178..179]
 r214: [174..175]
 r215: [168..169]
 r216: [164..165]
 r217: [156..157]
 r218: [150..151]
 r219: [144..145]
 r220: [138..139]
 r221: [126..127]
 r222: [124..125]
 r223: [120..121]
 r224: [114..115]
 r225: [108..109]
 r226: [100..101]
 r227: [96..97]
 r228: [98..99]
 r229: [92..93]
 r230: [94..95]
 r231: [90..91]
 r232: [86..87]
 r233: [82..83]
 r234: [70..71]
 r235: [64..65]
 r236: [60..61]
 r237: [48..49]
 r238: [44..45]
 r239: [40..41]
 r240: [28..29]
 r241: [22..23]
 r242: [18..19]
 r244: [84..85]
 r245: [80..81]
 r247: [62..63]
 r248: [58..59]
 r250: [42..43]
 r251: [38..39]
 r253: [20..21]
 r254: [16..17]
 r260: [10..11]
 r261: [32..33]
 r262: [52..53]
 r263: [74..75]
 r264: [12..19]
 r265: [34..41]
 r266: [54..61]
 r267: [76..83]

********** Assignment #2: **********

	 Assigning to 260 (cl=SSE_REGS, orig=186, freq=2, tfirst=260, tfreq=2)...
	   Assign 28 to optional reload r260 (freq=2)
	Hard reg 28 is preferable by r264 with profit 1
	 Assigning to 264 (cl=SSE_REGS, orig=186, freq=2, tfirst=260, tfreq=2)...
	 Assigning to 261 (cl=SSE_REGS, orig=178, freq=2, tfirst=261, tfreq=2)...
	   Assign 24 to optional reload r261 (freq=2)
	Hard reg 24 is preferable by r265 with profit 1
	 Assigning to 265 (cl=SSE_REGS, orig=178, freq=2, tfirst=261, tfreq=2)...
	 Assigning to 262 (cl=SSE_REGS, orig=171, freq=2, tfirst=262, tfreq=2)...
	   Assign 25 to optional reload r262 (freq=2)
	Hard reg 25 is preferable by r266 with profit 1
	 Assigning to 266 (cl=SSE_REGS, orig=171, freq=2, tfirst=262, tfreq=2)...
	 Assigning to 263 (cl=SSE_REGS, orig=163, freq=2, tfirst=263, tfreq=2)...
	   Assign 26 to optional reload r263 (freq=2)
	Hard reg 26 is preferable by r267 with profit 1
	 Assigning to 267 (cl=SSE_REGS, orig=163, freq=2, tfirst=263, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  238: r260:SF=r186:SF
      REG_DEAD r186:SF
   Insn after restoring regs:
  231: r186:SF=r253:SF
      REG_DEAD r253:SF
   Insn after restoring regs:
  239: r261:SF=r178:SF
      REG_DEAD r178:SF
   Insn after restoring regs:
  228: r178:SF=r250:SF
      REG_DEAD r250:SF
   Insn after restoring regs:
  240: r262:SF=r171:SF
      REG_DEAD r171:SF
   Insn after restoring regs:
  225: r171:SF=r247:SF
      REG_DEAD r247:SF
   Insn after restoring regs:
  241: r263:SF=r163:SF
      REG_DEAD r163:SF
   Insn after restoring regs:
  222: r163:SF=r244:SF
      REG_DEAD r244:SF
Keep optional reload reg 246
Keep optional reload reg 249
Keep optional reload reg 252
Keep optional reload reg 255
Remove optional reload reg 260
  Restoring original insn:
  201: r189:SF=r188:SF*r186:SF
      REG_DEAD r186:SF
      REG_DEAD r188:SF
  Deleting move 238
  238: r260:SF=r186:SF
      REG_DEAD r186:SF
deleting insn with uid = 238.
Remove optional reload reg 261
  Restoring original insn:
  187: r181:SF=r180:SF*r178:SF
      REG_DEAD r178:SF
      REG_DEAD r180:SF
  Deleting move 239
  239: r261:SF=r178:SF
      REG_DEAD r178:SF
deleting insn with uid = 239.
Remove optional reload reg 262
  Restoring original insn:
  174: r174:SF=r173:SF*r171:SF
      REG_DEAD r171:SF
      REG_DEAD r173:SF
  Deleting move 240
  240: r262:SF=r171:SF
      REG_DEAD r171:SF
deleting insn with uid = 240.
Remove optional reload reg 263
  Restoring original insn:
  160: r166:SF=r165:SF*r163:SF
      REG_DEAD r163:SF
      REG_DEAD r165:SF
  Deleting move 241
  241: r263:SF=r163:SF
      REG_DEAD r163:SF
deleting insn with uid = 241.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 201:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 160:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 5
   Insn 217: point = 0
   Insn 216: point = 0
   Insn 212: point = 1
   Insn 209: point = 3
  BB 3
   Insn 27: point = 4
   Insn 26: point = 4
   Insn 25: point = 5
   Insn 24: point = 7
  BB 4
   Insn 219: point = 8
   Insn 203: point = 8
   Insn 202: point = 8
   Insn 201: point = 9
   Insn 200: point = 11
   Insn 199: point = 13
   Insn 198: point = 14
   Insn 232: point = 14
   Insn 197: point = 15
   Insn 196: point = 17
   Insn 231: point = 18
   Insn 195: point = 20
   Insn 194: point = 21
   Insn 193: point = 23
   Insn 192: point = 24
   Insn 191: point = 26
   Insn 190: point = 28
   Insn 189: point = 30
   Insn 188: point = 31
   Insn 187: point = 32
   Insn 186: point = 34
   Insn 185: point = 36
   Insn 184: point = 37
   Insn 229: point = 37
   Insn 183: point = 38
   Insn 182: point = 40
   Insn 228: point = 41
   Insn 181: point = 43
   Insn 180: point = 44
   Insn 179: point = 46
   Insn 178: point = 47
   Insn 177: point = 49
   Insn 176: point = 51
   Insn 175: point = 52
   Insn 174: point = 53
   Insn 173: point = 55
   Insn 172: point = 57
   Insn 171: point = 58
   Insn 226: point = 58
   Insn 170: point = 59
   Insn 169: point = 61
   Insn 225: point = 62
   Insn 168: point = 64
   Insn 167: point = 65
   Insn 166: point = 67
   Insn 165: point = 68
   Insn 164: point = 70
   Insn 163: point = 72
   Insn 162: point = 74
   Insn 161: point = 75
   Insn 160: point = 76
   Insn 159: point = 78
   Insn 158: point = 80
   Insn 157: point = 81
   Insn 223: point = 81
   Insn 156: point = 82
   Insn 155: point = 84
   Insn 222: point = 85
   Insn 154: point = 87
   Insn 153: point = 88
   Insn 152: point = 90
   Insn 151: point = 91
   Insn 150: point = 93
   Insn 149: point = 95
   Insn 148: point = 96
   Insn 147: point = 97
   Insn 146: point = 99
   Insn 145: point = 100
   Insn 144: point = 101
   Insn 143: point = 103
   Insn 142: point = 104
   Insn 141: point = 105
   Insn 140: point = 106
   Insn 139: point = 106
   Insn 138: point = 107
   Insn 137: point = 108
   Insn 136: point = 110
   Insn 135: point = 112
   Insn 134: point = 114
   Insn 133: point = 115
   Insn 132: point = 117
   Insn 131: point = 119
   Insn 130: point = 121
   Insn 129: point = 122
   Insn 128: point = 124
   Insn 127: point = 126
   Insn 126: point = 128
   Insn 125: point = 129
   Insn 124: point = 131
   Insn 123: point = 133
   Insn 122: point = 134
   Insn 121: point = 135
   Insn 120: point = 136
   Insn 119: point = 136
   Insn 118: point = 137
   Insn 117: point = 139
   Insn 116: point = 141
   Insn 115: point = 143
   Insn 114: point = 145
   Insn 113: point = 147
   Insn 112: point = 148
   Insn 111: point = 150
   Insn 110: point = 152
   Insn 109: point = 154
   Insn 108: point = 155
   Insn 107: point = 157
   Insn 106: point = 159
   Insn 105: point = 161
   Insn 104: point = 162
   Insn 103: point = 164
   Insn 102: point = 166
   Insn 101: point = 168
   Insn 100: point = 169
   Insn 99: point = 171
   Insn 98: point = 173
   Insn 97: point = 175
   Insn 96: point = 177
   Insn 95: point = 178
   Insn 94: point = 180
   Insn 93: point = 182
   Insn 92: point = 183
   Insn 91: point = 185
   Insn 90: point = 187
   Insn 89: point = 189
   Insn 88: point = 190
   Insn 87: point = 192
   Insn 86: point = 194
   Insn 85: point = 195
   Insn 84: point = 196
   Insn 83: point = 197
   Insn 82: point = 197
   Insn 81: point = 198
   Insn 80: point = 199
   Insn 79: point = 201
   Insn 78: point = 203
   Insn 77: point = 205
   Insn 76: point = 206
   Insn 75: point = 208
   Insn 74: point = 210
   Insn 73: point = 212
   Insn 72: point = 213
   Insn 71: point = 215
   Insn 70: point = 217
   Insn 69: point = 219
   Insn 68: point = 220
   Insn 67: point = 222
   Insn 66: point = 224
   Insn 65: point = 225
   Insn 64: point = 226
   Insn 63: point = 227
   Insn 62: point = 227
   Insn 61: point = 228
   Insn 60: point = 230
   Insn 59: point = 232
   Insn 58: point = 234
   Insn 57: point = 236
   Insn 56: point = 238
   Insn 55: point = 239
   Insn 54: point = 241
   Insn 53: point = 243
   Insn 52: point = 245
   Insn 51: point = 246
   Insn 50: point = 248
   Insn 49: point = 250
   Insn 48: point = 252
   Insn 47: point = 253
   Insn 46: point = 255
   Insn 45: point = 257
   Insn 44: point = 259
   Insn 43: point = 260
   Insn 42: point = 262
   Insn 41: point = 264
   Insn 40: point = 266
   Insn 39: point = 268
   Insn 38: point = 269
   Insn 37: point = 271
   Insn 36: point = 273
   Insn 35: point = 274
   Insn 34: point = 276
   Insn 33: point = 278
   Insn 32: point = 280
   Insn 31: point = 281
   Insn 30: point = 283
   Insn 29: point = 285
  BB 2
   Insn 22: point = 286
   Insn 21: point = 286
   Insn 20: point = 287
   Insn 19: point = 288
   Insn 18: point = 289
   Insn 17: point = 290
   Insn 16: point = 291
   Insn 15: point = 292
   Insn 14: point = 293
   Insn 13: point = 294
   Insn 12: point = 295
   Insn 11: point = 296
   Insn 10: point = 297
   Insn 9: point = 298
   Insn 5: point = 298
   Insn 4: point = 298
   Insn 3: point = 298
   Insn 2: point = 298
 r163: [77..85]
 r171: [54..62]
 r178: [33..41]
 r186: [10..18]
 r245: [81..82]
 r248: [58..59]
 r251: [37..38]
 r254: [14..15]
Compressing live ranges: from 298 to 8 - 2%
Ranges after the compression:
 r163: [6..7]
 r171: [4..5]
 r178: [2..3]
 r186: [0..1]
 r245: [6..7]
 r248: [4..5]
 r251: [2..3]
 r254: [0..1]
  Slot 0 regnos (width = 4):	 163	 186	 178	 171
  Slot 1 regnos (width = 8):	 245	 254	 251	 248
Changing spilled pseudos to memory in insn #222
Changing spilled pseudos to memory in insn #156
Changing spilled pseudos to memory in insn #223
Changing spilled pseudos to memory in insn #160
Changing spilled pseudos to memory in insn #225
Changing spilled pseudos to memory in insn #170
Changing spilled pseudos to memory in insn #226
Changing spilled pseudos to memory in insn #174
Changing spilled pseudos to memory in insn #228
Changing spilled pseudos to memory in insn #183
Changing spilled pseudos to memory in insn #229
Changing spilled pseudos to memory in insn #187
Changing spilled pseudos to memory in insn #231
Changing spilled pseudos to memory in insn #197
Changing spilled pseudos to memory in insn #232
Changing spilled pseudos to memory in insn #201
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #201
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #232
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 232:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 197:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #231
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 231:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #187
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #229
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 229:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 183:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #228
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 228:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #174
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #226
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 226:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 170:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #225
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 225:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #160
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #223
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 223:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 156:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #222
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 222:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 43
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 81
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 82
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 100
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 138
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 153
changing reg in insn 153
changing reg in insn 161
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 167
changing reg in insn 167
changing reg in insn 167
changing reg in insn 175
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 180
changing reg in insn 180
changing reg in insn 180
changing reg in insn 188
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 194
changing reg in insn 194
changing reg in insn 194
changing reg in insn 202
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 209
changing reg in insn 212
changing reg in insn 212
changing reg in insn 216
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 44
changing reg in insn 45
changing reg in insn 48
changing reg in insn 52
changing reg in insn 53
changing reg in insn 56
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 93
changing reg in insn 94
changing reg in insn 96
changing reg in insn 101
changing reg in insn 102
changing reg in insn 105
changing reg in insn 109
changing reg in insn 110
changing reg in insn 113
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 134
changing reg in insn 141
changing reg in insn 142
changing reg in insn 144
changing reg in insn 145
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 156
changing reg in insn 162
changing reg in insn 163
changing reg in insn 166
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 176
changing reg in insn 177
changing reg in insn 179
changing reg in insn 180
changing reg in insn 182
changing reg in insn 183
changing reg in insn 189
changing reg in insn 190
changing reg in insn 193
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
deleting insn with uid = 62.
deleting insn with uid = 81.
deleting insn with uid = 82.
deleting insn with uid = 119.
deleting insn with uid = 138.
deleting insn with uid = 139.
deleting insn with uid = 158.
deleting insn with uid = 172.
deleting insn with uid = 185.
deleting insn with uid = 199.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 157.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 184.
verify found no changes in insn with uid = 198.


int ecc_correction(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7]
;;  ref usage 	r0={90d,82u} r1={25d,17u,16e} r2={9d,1u} r3={4d,4u} r4={9d,1u} r5={9d,1u} r6={1d,87u} r7={1d,13u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={50d,1u} r18={8d} r19={8d} r20={1d,1u,16e} r21={53d,52u} r22={15d,6u} r23={11d,2u} r24={10d,1u} r25={10d,1u} r26={10d,1u} r27={10d,1u} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 1097{793d,272u,32e} in 200{192 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 192 193 194 195 196 197
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) preproc.cpp:291 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) preproc.cpp:291 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) preproc.cpp:291 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) preproc.cpp:291 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:293 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DF 21 xmm0 [192])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:294 128 {*movdf_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64])
        (reg:DF 21 xmm0 [192])) preproc.cpp:294 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DF 21 xmm0 [193])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:294 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [193])) preproc.cpp:294 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DF 21 xmm0 [194])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])
        (reg:DF 21 xmm0 [194])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DF 21 xmm0 [195])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [195])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DF 21 xmm0 [196])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 21 xmm0 [196])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DF 21 xmm0 [197])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:296 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [197])) preproc.cpp:296 128 {*movdf_internal}
     (nil))
(insn 22 21 204 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:299 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 198
(code_label 204 22 23 3 56 "" [1 uses])
(note 23 204 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 procpar_info+0 S8 A64])) preproc.cpp:299 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:SI 0 ax [orig:87 D.6892 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [198])
                (const_int 300 [0x12c])) [0 procpar_info_12(D)->num_points+0 S4 A32])) preproc.cpp:299 90 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.6892 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32]))) preproc.cpp:299 7 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 207)
            (pc))) preproc.cpp:299 612 {*jcc_1}
     (nil)
 -> 207)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:SI 0 ax [199])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:301 90 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 0 ax [orig:88 D.6893 ] [88])
        (sign_extend:DI (reg:SI 0 ax [199]))) preproc.cpp:301 142 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 4 (parallel [
            (set (reg:DI 1 dx [orig:89 D.6893 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.6893 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:301 512 {*ashldi3_1}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:301 89 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.6894 ] [90])
                (plus:DI (reg/f:DI 0 ax [200])
                    (reg:DI 1 dx [orig:89 D.6893 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:301 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.6893 ] [89]))
        (nil)))
(insn 34 33 35 4 (set (reg:SF 21 xmm0 [orig:91 D.6895 ] [91])
        (mem:SF (reg/f:DI 0 ax [orig:90 D.6894 ] [90]) [0 *_17+0 S4 A32])) preproc.cpp:301 129 {*movsf_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DF 22 xmm1 [orig:92 D.6896 ] [92])
        (float_extend:DF (reg:SF 21 xmm0 [orig:91 D.6895 ] [91]))) preproc.cpp:301 152 {*extendsfdf2_sse}
     (nil))
(insn 36 35 37 4 (set (reg:SI 0 ax [201])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:301 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:DI 0 ax [orig:93 D.6893 ] [93])
        (sign_extend:DI (reg:SI 0 ax [201]))) preproc.cpp:301 142 {*extendsidi2_rex64}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 1 dx [orig:94 D.6893 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.6893 ] [93])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:301 512 {*ashldi3_1}
     (nil))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:301 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.6894 ] [95])
                (plus:DI (reg/f:DI 0 ax [202])
                    (reg:DI 1 dx [orig:94 D.6893 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:301 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.6893 ] [94]))
        (nil)))
(insn 41 40 42 4 (set (reg:SF 21 xmm0 [orig:96 D.6895 ] [96])
        (mem:SF (reg/f:DI 0 ax [orig:95 D.6894 ] [95]) [0 *_22+0 S4 A32])) preproc.cpp:301 129 {*movsf_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DF 21 xmm0 [orig:97 D.6896 ] [97])
        (float_extend:DF (reg:SF 21 xmm0 [orig:96 D.6895 ] [96]))) preproc.cpp:301 152 {*extendsfdf2_sse}
     (nil))
(insn 43 42 44 4 (set (reg:DF 22 xmm1 [orig:98 D.6896 ] [98])
        (mult:DF (reg:DF 22 xmm1 [orig:92 D.6896 ] [92])
            (reg:DF 21 xmm0 [orig:97 D.6896 ] [97]))) preproc.cpp:301 798 {*fop_df_comm_sse}
     (nil))
(insn 44 43 45 4 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:302 90 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 0 ax [orig:99 D.6897 ] [99])
        (sign_extend:DI (reg:SI 0 ax [203]))) preproc.cpp:302 142 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 0 ax [orig:100 D.6897 ] [100])
                (plus:DI (reg:DI 0 ax [orig:99 D.6897 ] [99])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 218 {*adddi_1}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg:DI 1 dx [orig:101 D.6897 ] [101])
                (ashift:DI (reg:DI 0 ax [orig:100 D.6897 ] [100])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 512 {*ashldi3_1}
     (nil))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:302 89 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.6894 ] [102])
                (plus:DI (reg/f:DI 0 ax [204])
                    (reg:DI 1 dx [orig:101 D.6897 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:101 D.6897 ] [101]))
        (nil)))
(insn 50 49 51 4 (set (reg:SF 21 xmm0 [orig:103 D.6895 ] [103])
        (mem:SF (reg/f:DI 0 ax [orig:102 D.6894 ] [102]) [0 *_29+0 S4 A32])) preproc.cpp:302 129 {*movsf_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DF 23 xmm2 [orig:104 D.6896 ] [104])
        (float_extend:DF (reg:SF 21 xmm0 [orig:103 D.6895 ] [103]))) preproc.cpp:302 152 {*extendsfdf2_sse}
     (nil))
(insn 52 51 53 4 (set (reg:SI 0 ax [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:302 90 {*movsi_internal}
     (nil))
(insn 53 52 54 4 (set (reg:DI 0 ax [orig:105 D.6897 ] [105])
        (sign_extend:DI (reg:SI 0 ax [205]))) preproc.cpp:302 142 {*extendsidi2_rex64}
     (nil))
(insn 54 53 55 4 (parallel [
            (set (reg:DI 0 ax [orig:106 D.6897 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 D.6897 ] [105])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 218 {*adddi_1}
     (nil))
(insn 55 54 56 4 (parallel [
            (set (reg:DI 1 dx [orig:107 D.6897 ] [107])
                (ashift:DI (reg:DI 0 ax [orig:106 D.6897 ] [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 512 {*ashldi3_1}
     (nil))
(insn 56 55 57 4 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:302 89 {*movdi_internal}
     (nil))
(insn 57 56 58 4 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.6894 ] [108])
                (plus:DI (reg/f:DI 0 ax [206])
                    (reg:DI 1 dx [orig:107 D.6897 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.6897 ] [107]))
        (nil)))
(insn 58 57 59 4 (set (reg:SF 21 xmm0 [orig:109 D.6895 ] [109])
        (mem:SF (reg/f:DI 0 ax [orig:108 D.6894 ] [108]) [0 *_35+0 S4 A32])) preproc.cpp:302 129 {*movsf_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DF 21 xmm0 [orig:110 D.6896 ] [110])
        (float_extend:DF (reg:SF 21 xmm0 [orig:109 D.6895 ] [109]))) preproc.cpp:302 152 {*extendsfdf2_sse}
     (nil))
(insn 60 59 61 4 (set (reg:DF 21 xmm0 [orig:111 D.6896 ] [111])
        (mult:DF (reg:DF 21 xmm0 [orig:110 D.6896 ] [110])
            (reg:DF 23 xmm2 [orig:104 D.6896 ] [104]))) preproc.cpp:302 798 {*fop_df_comm_sse}
     (nil))
(insn 61 60 63 4 (set (reg:DF 21 xmm0 [orig:112 D.6896 ] [112])
        (plus:DF (reg:DF 21 xmm0 [orig:111 D.6896 ] [111])
            (reg:DF 22 xmm1 [orig:98 D.6896 ] [98]))) preproc.cpp:301 798 {*fop_df_comm_sse}
     (nil))
(call_insn 63 61 64 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:302 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 64 63 65 4 (set (reg:DF 0 ax [207])
        (reg:DF 21 xmm0)) preproc.cpp:302 128 {*movdf_internal}
     (nil))
(insn 65 64 66 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [207])) preproc.cpp:302 128 {*movdf_internal}
     (nil))
(insn 66 65 67 4 (set (reg:SI 0 ax [208])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:304 90 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:DI 0 ax [orig:113 D.6893 ] [113])
        (sign_extend:DI (reg:SI 0 ax [208]))) preproc.cpp:304 142 {*extendsidi2_rex64}
     (nil))
(insn 68 67 69 4 (parallel [
            (set (reg:DI 1 dx [orig:114 D.6893 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.6893 ] [113])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:304 512 {*ashldi3_1}
     (nil))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:304 89 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.6894 ] [115])
                (plus:DI (reg/f:DI 0 ax [209])
                    (reg:DI 1 dx [orig:114 D.6893 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:304 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.6893 ] [114]))
        (nil)))
(insn 71 70 72 4 (set (reg:SF 21 xmm0 [orig:116 D.6895 ] [116])
        (mem:SF (reg/f:DI 0 ax [orig:115 D.6894 ] [115]) [0 *_44+0 S4 A32])) preproc.cpp:304 129 {*movsf_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DF 22 xmm1 [orig:117 D.6896 ] [117])
        (float_extend:DF (reg:SF 21 xmm0 [orig:116 D.6895 ] [116]))) preproc.cpp:304 152 {*extendsfdf2_sse}
     (nil))
(insn 73 72 74 4 (set (reg:SI 0 ax [210])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:304 90 {*movsi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DI 0 ax [orig:118 D.6897 ] [118])
        (sign_extend:DI (reg:SI 0 ax [210]))) preproc.cpp:304 142 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 4 (parallel [
            (set (reg:DI 0 ax [orig:119 D.6897 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 D.6897 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:304 218 {*adddi_1}
     (nil))
(insn 76 75 77 4 (parallel [
            (set (reg:DI 1 dx [orig:120 D.6897 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:119 D.6897 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:304 512 {*ashldi3_1}
     (nil))
(insn 77 76 78 4 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:304 89 {*movdi_internal}
     (nil))
(insn 78 77 79 4 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.6894 ] [121])
                (plus:DI (reg/f:DI 0 ax [211])
                    (reg:DI 1 dx [orig:120 D.6897 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:304 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.6897 ] [120]))
        (nil)))
(insn 79 78 80 4 (set (reg:SF 21 xmm0 [orig:122 D.6895 ] [122])
        (mem:SF (reg/f:DI 0 ax [orig:121 D.6894 ] [121]) [0 *_50+0 S4 A32])) preproc.cpp:304 129 {*movsf_internal}
     (nil))
(insn 80 79 83 4 (set (reg:DF 21 xmm0 [orig:123 D.6896 ] [123])
        (float_extend:DF (reg:SF 21 xmm0 [orig:122 D.6895 ] [122]))) preproc.cpp:304 152 {*extendsfdf2_sse}
     (nil))
(call_insn 83 80 84 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fae98e3f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:304 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 84 83 85 4 (set (reg:DF 0 ax [212])
        (reg:DF 21 xmm0)) preproc.cpp:304 128 {*movdf_internal}
     (nil))
(insn 85 84 86 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [212])) preproc.cpp:304 128 {*movdf_internal}
     (nil))
(insn 86 85 87 4 (set (reg:SI 0 ax [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:306 90 {*movsi_internal}
     (nil))
(insn 87 86 88 4 (set (reg:DI 0 ax [orig:124 D.6893 ] [124])
        (sign_extend:DI (reg:SI 0 ax [213]))) preproc.cpp:306 142 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg:DI 1 dx [orig:125 D.6893 ] [125])
                (ashift:DI (reg:DI 0 ax [orig:124 D.6893 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:306 512 {*ashldi3_1}
     (nil))
(insn 89 88 90 4 (set (reg/f:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:306 89 {*movdi_internal}
     (nil))
(insn 90 89 91 4 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.6894 ] [126])
                (plus:DI (reg/f:DI 0 ax [214])
                    (reg:DI 1 dx [orig:125 D.6893 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:306 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:125 D.6893 ] [125]))
        (nil)))
(insn 91 90 92 4 (set (reg:SF 21 xmm0 [orig:127 D.6895 ] [127])
        (mem:SF (reg/f:DI 0 ax [orig:126 D.6894 ] [126]) [0 *_58+0 S4 A32])) preproc.cpp:306 129 {*movsf_internal}
     (nil))
(insn 92 91 93 4 (set (reg:DF 22 xmm1 [orig:128 D.6896 ] [128])
        (float_extend:DF (reg:SF 21 xmm0 [orig:127 D.6895 ] [127]))) preproc.cpp:306 152 {*extendsfdf2_sse}
     (nil))
(insn 93 92 94 4 (set (reg:SI 0 ax [215])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:306 90 {*movsi_internal}
     (nil))
(insn 94 93 95 4 (set (reg:DI 0 ax [orig:129 D.6893 ] [129])
        (sign_extend:DI (reg:SI 0 ax [215]))) preproc.cpp:306 142 {*extendsidi2_rex64}
     (nil))
(insn 95 94 96 4 (parallel [
            (set (reg:DI 1 dx [orig:130 D.6893 ] [130])
                (ashift:DI (reg:DI 0 ax [orig:129 D.6893 ] [129])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:306 512 {*ashldi3_1}
     (nil))
(insn 96 95 97 4 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:306 89 {*movdi_internal}
     (nil))
(insn 97 96 98 4 (parallel [
            (set (reg/f:DI 0 ax [orig:131 D.6894 ] [131])
                (plus:DI (reg/f:DI 0 ax [216])
                    (reg:DI 1 dx [orig:130 D.6893 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:306 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:130 D.6893 ] [130]))
        (nil)))
(insn 98 97 99 4 (set (reg:SF 21 xmm0 [orig:132 D.6895 ] [132])
        (mem:SF (reg/f:DI 0 ax [orig:131 D.6894 ] [131]) [0 *_63+0 S4 A32])) preproc.cpp:306 129 {*movsf_internal}
     (nil))
(insn 99 98 100 4 (set (reg:DF 21 xmm0 [orig:133 D.6896 ] [133])
        (float_extend:DF (reg:SF 21 xmm0 [orig:132 D.6895 ] [132]))) preproc.cpp:306 152 {*extendsfdf2_sse}
     (nil))
(insn 100 99 101 4 (set (reg:DF 22 xmm1 [orig:134 D.6896 ] [134])
        (mult:DF (reg:DF 22 xmm1 [orig:128 D.6896 ] [128])
            (reg:DF 21 xmm0 [orig:133 D.6896 ] [133]))) preproc.cpp:306 798 {*fop_df_comm_sse}
     (nil))
(insn 101 100 102 4 (set (reg:SI 0 ax [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:307 90 {*movsi_internal}
     (nil))
(insn 102 101 103 4 (set (reg:DI 0 ax [orig:135 D.6897 ] [135])
        (sign_extend:DI (reg:SI 0 ax [217]))) preproc.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 103 102 104 4 (parallel [
            (set (reg:DI 0 ax [orig:136 D.6897 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 D.6897 ] [135])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 218 {*adddi_1}
     (nil))
(insn 104 103 105 4 (parallel [
            (set (reg:DI 1 dx [orig:137 D.6897 ] [137])
                (ashift:DI (reg:DI 0 ax [orig:136 D.6897 ] [136])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 512 {*ashldi3_1}
     (nil))
(insn 105 104 106 4 (set (reg/f:DI 0 ax [218])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:307 89 {*movdi_internal}
     (nil))
(insn 106 105 107 4 (parallel [
            (set (reg/f:DI 0 ax [orig:138 D.6894 ] [138])
                (plus:DI (reg/f:DI 0 ax [218])
                    (reg:DI 1 dx [orig:137 D.6897 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:137 D.6897 ] [137]))
        (nil)))
(insn 107 106 108 4 (set (reg:SF 21 xmm0 [orig:139 D.6895 ] [139])
        (mem:SF (reg/f:DI 0 ax [orig:138 D.6894 ] [138]) [0 *_70+0 S4 A32])) preproc.cpp:307 129 {*movsf_internal}
     (nil))
(insn 108 107 109 4 (set (reg:DF 23 xmm2 [orig:140 D.6896 ] [140])
        (float_extend:DF (reg:SF 21 xmm0 [orig:139 D.6895 ] [139]))) preproc.cpp:307 152 {*extendsfdf2_sse}
     (nil))
(insn 109 108 110 4 (set (reg:SI 0 ax [219])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:307 90 {*movsi_internal}
     (nil))
(insn 110 109 111 4 (set (reg:DI 0 ax [orig:141 D.6897 ] [141])
        (sign_extend:DI (reg:SI 0 ax [219]))) preproc.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 4 (parallel [
            (set (reg:DI 0 ax [orig:142 D.6897 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 D.6897 ] [141])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 218 {*adddi_1}
     (nil))
(insn 112 111 113 4 (parallel [
            (set (reg:DI 1 dx [orig:143 D.6897 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.6897 ] [142])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 512 {*ashldi3_1}
     (nil))
(insn 113 112 114 4 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:307 89 {*movdi_internal}
     (nil))
(insn 114 113 115 4 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.6894 ] [144])
                (plus:DI (reg/f:DI 0 ax [220])
                    (reg:DI 1 dx [orig:143 D.6897 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.6897 ] [143]))
        (nil)))
(insn 115 114 116 4 (set (reg:SF 21 xmm0 [orig:145 D.6895 ] [145])
        (mem:SF (reg/f:DI 0 ax [orig:144 D.6894 ] [144]) [0 *_76+0 S4 A32])) preproc.cpp:307 129 {*movsf_internal}
     (nil))
(insn 116 115 117 4 (set (reg:DF 21 xmm0 [orig:146 D.6896 ] [146])
        (float_extend:DF (reg:SF 21 xmm0 [orig:145 D.6895 ] [145]))) preproc.cpp:307 152 {*extendsfdf2_sse}
     (nil))
(insn 117 116 118 4 (set (reg:DF 21 xmm0 [orig:147 D.6896 ] [147])
        (mult:DF (reg:DF 21 xmm0 [orig:146 D.6896 ] [146])
            (reg:DF 23 xmm2 [orig:140 D.6896 ] [140]))) preproc.cpp:307 798 {*fop_df_comm_sse}
     (nil))
(insn 118 117 120 4 (set (reg:DF 21 xmm0 [orig:148 D.6896 ] [148])
        (plus:DF (reg:DF 21 xmm0 [orig:147 D.6896 ] [147])
            (reg:DF 22 xmm1 [orig:134 D.6896 ] [134]))) preproc.cpp:306 798 {*fop_df_comm_sse}
     (nil))
(call_insn 120 118 121 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:307 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 121 120 122 4 (set (reg:DF 0 ax [221])
        (reg:DF 21 xmm0)) preproc.cpp:307 128 {*movdf_internal}
     (nil))
(insn 122 121 123 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [221])) preproc.cpp:307 128 {*movdf_internal}
     (nil))
(insn 123 122 124 4 (set (reg:SI 0 ax [222])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:309 90 {*movsi_internal}
     (nil))
(insn 124 123 125 4 (set (reg:DI 0 ax [orig:149 D.6893 ] [149])
        (sign_extend:DI (reg:SI 0 ax [222]))) preproc.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 125 124 126 4 (parallel [
            (set (reg:DI 1 dx [orig:150 D.6893 ] [150])
                (ashift:DI (reg:DI 0 ax [orig:149 D.6893 ] [149])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:309 512 {*ashldi3_1}
     (nil))
(insn 126 125 127 4 (set (reg/f:DI 0 ax [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:309 89 {*movdi_internal}
     (nil))
(insn 127 126 128 4 (parallel [
            (set (reg/f:DI 0 ax [orig:151 D.6894 ] [151])
                (plus:DI (reg/f:DI 0 ax [223])
                    (reg:DI 1 dx [orig:150 D.6893 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:309 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:150 D.6893 ] [150]))
        (nil)))
(insn 128 127 129 4 (set (reg:SF 21 xmm0 [orig:152 D.6895 ] [152])
        (mem:SF (reg/f:DI 0 ax [orig:151 D.6894 ] [151]) [0 *_85+0 S4 A32])) preproc.cpp:309 129 {*movsf_internal}
     (nil))
(insn 129 128 130 4 (set (reg:DF 22 xmm1 [orig:153 D.6896 ] [153])
        (float_extend:DF (reg:SF 21 xmm0 [orig:152 D.6895 ] [152]))) preproc.cpp:309 152 {*extendsfdf2_sse}
     (nil))
(insn 130 129 131 4 (set (reg:SI 0 ax [224])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:309 90 {*movsi_internal}
     (nil))
(insn 131 130 132 4 (set (reg:DI 0 ax [orig:154 D.6897 ] [154])
        (sign_extend:DI (reg:SI 0 ax [224]))) preproc.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 132 131 133 4 (parallel [
            (set (reg:DI 0 ax [orig:155 D.6897 ] [155])
                (plus:DI (reg:DI 0 ax [orig:154 D.6897 ] [154])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:309 218 {*adddi_1}
     (nil))
(insn 133 132 134 4 (parallel [
            (set (reg:DI 1 dx [orig:156 D.6897 ] [156])
                (ashift:DI (reg:DI 0 ax [orig:155 D.6897 ] [155])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:309 512 {*ashldi3_1}
     (nil))
(insn 134 133 135 4 (set (reg/f:DI 0 ax [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:309 89 {*movdi_internal}
     (nil))
(insn 135 134 136 4 (parallel [
            (set (reg/f:DI 0 ax [orig:157 D.6894 ] [157])
                (plus:DI (reg/f:DI 0 ax [225])
                    (reg:DI 1 dx [orig:156 D.6897 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:309 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:156 D.6897 ] [156]))
        (nil)))
(insn 136 135 137 4 (set (reg:SF 21 xmm0 [orig:158 D.6895 ] [158])
        (mem:SF (reg/f:DI 0 ax [orig:157 D.6894 ] [157]) [0 *_91+0 S4 A32])) preproc.cpp:309 129 {*movsf_internal}
     (nil))
(insn 137 136 140 4 (set (reg:DF 21 xmm0 [orig:159 D.6896 ] [159])
        (float_extend:DF (reg:SF 21 xmm0 [orig:158 D.6895 ] [158]))) preproc.cpp:309 152 {*extendsfdf2_sse}
     (nil))
(call_insn 140 137 141 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fae98e3f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:309 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 141 140 142 4 (set (reg:DF 0 ax [226])
        (reg:DF 21 xmm0)) preproc.cpp:309 128 {*movdf_internal}
     (nil))
(insn 142 141 143 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [226])) preproc.cpp:309 128 {*movdf_internal}
     (nil))
(insn 143 142 144 4 (set (reg:DF 21 xmm0 [228])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])) preproc.cpp:311 128 {*movdf_internal}
     (nil))
(insn 144 143 145 4 (set (reg:DF 21 xmm0 [227])
        (minus:DF (reg:DF 21 xmm0 [228])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64]))) preproc.cpp:311 805 {*fop_df_1_sse}
     (nil))
(insn 145 144 146 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 21 xmm0 [227])) preproc.cpp:311 128 {*movdf_internal}
     (nil))
(insn 146 145 147 4 (set (reg:DF 21 xmm0 [230])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])) preproc.cpp:312 128 {*movdf_internal}
     (nil))
(insn 147 146 148 4 (set (reg:DF 21 xmm0 [229])
        (minus:DF (reg:DF 21 xmm0 [230])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64]))) preproc.cpp:312 805 {*fop_df_1_sse}
     (nil))
(insn 148 147 149 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [229])) preproc.cpp:312 128 {*movdf_internal}
     (nil))
(insn 149 148 150 4 (set (reg:SI 0 ax [231])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:314 90 {*movsi_internal}
     (nil))
(insn 150 149 151 4 (set (reg:DI 0 ax [orig:160 D.6893 ] [160])
        (sign_extend:DI (reg:SI 0 ax [231]))) preproc.cpp:314 142 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 4 (parallel [
            (set (reg:DI 1 dx [orig:161 D.6893 ] [161])
                (ashift:DI (reg:DI 0 ax [orig:160 D.6893 ] [160])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:314 512 {*ashldi3_1}
     (nil))
(insn 152 151 153 4 (set (reg/f:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:314 89 {*movdi_internal}
     (nil))
(insn 153 152 154 4 (parallel [
            (set (reg/f:DI 3 bx [orig:162 D.6894 ] [162])
                (plus:DI (reg:DI 1 dx [orig:161 D.6893 ] [161])
                    (reg/f:DI 0 ax [232])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:314 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:161 D.6893 ] [161]))
        (nil)))
(insn 154 153 222 4 (set (reg:SF 24 xmm3 [orig:163 D.6895 ] [163])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64]))) preproc.cpp:314 157 {*truncdfsf_fast_sse}
     (nil))
(insn 222 154 245 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 24 xmm3 [orig:163 D.6895 ] [163])) preproc.cpp:314 129 {*movsf_internal}
     (nil))
(note 245 222 237 4 NOTE_INSN_DELETED)
(note 237 245 155 4 NOTE_INSN_DELETED)
(insn 155 237 156 4 (set (reg:DF 0 ax [233])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) preproc.cpp:314 128 {*movdf_internal}
     (nil))
(insn 156 155 223 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [233])) preproc.cpp:314 128 {*movdf_internal}
     (nil))
(insn 223 156 157 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) preproc.cpp:314 128 {*movdf_internal}
     (nil))
(call_insn/u 157 223 159 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fae98e445e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:314 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 159 157 224 4 (set (reg:SF 21 xmm0 [orig:165 D.6895 ] [165])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:164 D.6896 ] [164]))) preproc.cpp:314 157 {*truncdfsf_fast_sse}
     (nil))
(note 224 159 241 4 NOTE_INSN_DELETED)
(note 241 224 160 4 NOTE_INSN_DELETED)
(insn 160 241 161 4 (set (reg:SF 21 xmm0 [orig:166 D.6895 ] [166])
        (mult:SF (reg:SF 21 xmm0 [orig:165 D.6895 ] [165])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) preproc.cpp:314 797 {*fop_sf_comm_sse}
     (nil))
(insn 161 160 162 4 (set (mem:SF (reg/f:DI 3 bx [orig:162 D.6894 ] [162]) [0 *_100+0 S4 A32])
        (reg:SF 21 xmm0 [orig:166 D.6895 ] [166])) preproc.cpp:314 129 {*movsf_internal}
     (nil))
(insn 162 161 163 4 (set (reg:SI 0 ax [234])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:315 90 {*movsi_internal}
     (nil))
(insn 163 162 164 4 (set (reg:DI 0 ax [orig:167 D.6897 ] [167])
        (sign_extend:DI (reg:SI 0 ax [234]))) preproc.cpp:315 142 {*extendsidi2_rex64}
     (nil))
(insn 164 163 165 4 (parallel [
            (set (reg:DI 0 ax [orig:168 D.6897 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 D.6897 ] [167])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:315 218 {*adddi_1}
     (nil))
(insn 165 164 166 4 (parallel [
            (set (reg:DI 1 dx [orig:169 D.6897 ] [169])
                (ashift:DI (reg:DI 0 ax [orig:168 D.6897 ] [168])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:315 512 {*ashldi3_1}
     (nil))
(insn 166 165 167 4 (set (reg/f:DI 0 ax [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:315 89 {*movdi_internal}
     (nil))
(insn 167 166 168 4 (parallel [
            (set (reg/f:DI 3 bx [orig:170 D.6894 ] [170])
                (plus:DI (reg:DI 1 dx [orig:169 D.6897 ] [169])
                    (reg/f:DI 0 ax [235])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:315 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:169 D.6897 ] [169]))
        (nil)))
(insn 168 167 225 4 (set (reg:SF 25 xmm4 [orig:171 D.6895 ] [171])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64]))) preproc.cpp:315 157 {*truncdfsf_fast_sse}
     (nil))
(insn 225 168 244 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 25 xmm4 [orig:171 D.6895 ] [171])) preproc.cpp:315 129 {*movsf_internal}
     (nil))
(note 244 225 236 4 NOTE_INSN_DELETED)
(note 236 244 169 4 NOTE_INSN_DELETED)
(insn 169 236 170 4 (set (reg:DF 0 ax [236])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) preproc.cpp:315 128 {*movdf_internal}
     (nil))
(insn 170 169 226 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [236])) preproc.cpp:315 128 {*movdf_internal}
     (nil))
(insn 226 170 171 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) preproc.cpp:315 128 {*movdf_internal}
     (nil))
(call_insn/u 171 226 173 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fae98e815e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:315 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 173 171 227 4 (set (reg:SF 21 xmm0 [orig:173 D.6895 ] [173])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:172 D.6896 ] [172]))) preproc.cpp:315 157 {*truncdfsf_fast_sse}
     (nil))
(note 227 173 240 4 NOTE_INSN_DELETED)
(note 240 227 174 4 NOTE_INSN_DELETED)
(insn 174 240 175 4 (set (reg:SF 21 xmm0 [orig:174 D.6895 ] [174])
        (mult:SF (reg:SF 21 xmm0 [orig:173 D.6895 ] [173])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) preproc.cpp:315 797 {*fop_sf_comm_sse}
     (nil))
(insn 175 174 176 4 (set (mem:SF (reg/f:DI 3 bx [orig:170 D.6894 ] [170]) [0 *_109+0 S4 A32])
        (reg:SF 21 xmm0 [orig:174 D.6895 ] [174])) preproc.cpp:315 129 {*movsf_internal}
     (nil))
(insn 176 175 177 4 (set (reg:SI 0 ax [237])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:317 90 {*movsi_internal}
     (nil))
(insn 177 176 178 4 (set (reg:DI 0 ax [orig:175 D.6893 ] [175])
        (sign_extend:DI (reg:SI 0 ax [237]))) preproc.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 4 (parallel [
            (set (reg:DI 1 dx [orig:176 D.6893 ] [176])
                (ashift:DI (reg:DI 0 ax [orig:175 D.6893 ] [175])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:317 512 {*ashldi3_1}
     (nil))
(insn 179 178 180 4 (set (reg/f:DI 0 ax [238])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:317 89 {*movdi_internal}
     (nil))
(insn 180 179 181 4 (parallel [
            (set (reg/f:DI 3 bx [orig:177 D.6894 ] [177])
                (plus:DI (reg:DI 1 dx [orig:176 D.6893 ] [176])
                    (reg/f:DI 0 ax [238])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:317 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:176 D.6893 ] [176]))
        (nil)))
(insn 181 180 228 4 (set (reg:SF 26 xmm5 [orig:178 D.6895 ] [178])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64]))) preproc.cpp:317 157 {*truncdfsf_fast_sse}
     (nil))
(insn 228 181 243 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 26 xmm5 [orig:178 D.6895 ] [178])) preproc.cpp:317 129 {*movsf_internal}
     (nil))
(note 243 228 235 4 NOTE_INSN_DELETED)
(note 235 243 182 4 NOTE_INSN_DELETED)
(insn 182 235 183 4 (set (reg:DF 0 ax [239])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) preproc.cpp:317 128 {*movdf_internal}
     (nil))
(insn 183 182 229 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [239])) preproc.cpp:317 128 {*movdf_internal}
     (nil))
(insn 229 183 184 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) preproc.cpp:317 128 {*movdf_internal}
     (nil))
(call_insn/u 184 229 186 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fae98e445e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:317 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 186 184 230 4 (set (reg:SF 21 xmm0 [orig:180 D.6895 ] [180])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:179 D.6896 ] [179]))) preproc.cpp:317 157 {*truncdfsf_fast_sse}
     (nil))
(note 230 186 239 4 NOTE_INSN_DELETED)
(note 239 230 187 4 NOTE_INSN_DELETED)
(insn 187 239 188 4 (set (reg:SF 21 xmm0 [orig:181 D.6895 ] [181])
        (mult:SF (reg:SF 21 xmm0 [orig:180 D.6895 ] [180])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) preproc.cpp:317 797 {*fop_sf_comm_sse}
     (nil))
(insn 188 187 189 4 (set (mem:SF (reg/f:DI 3 bx [orig:177 D.6894 ] [177]) [0 *_117+0 S4 A32])
        (reg:SF 21 xmm0 [orig:181 D.6895 ] [181])) preproc.cpp:317 129 {*movsf_internal}
     (nil))
(insn 189 188 190 4 (set (reg:SI 0 ax [240])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:318 90 {*movsi_internal}
     (nil))
(insn 190 189 191 4 (set (reg:DI 0 ax [orig:182 D.6897 ] [182])
        (sign_extend:DI (reg:SI 0 ax [240]))) preproc.cpp:318 142 {*extendsidi2_rex64}
     (nil))
(insn 191 190 192 4 (parallel [
            (set (reg:DI 0 ax [orig:183 D.6897 ] [183])
                (plus:DI (reg:DI 0 ax [orig:182 D.6897 ] [182])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:318 218 {*adddi_1}
     (nil))
(insn 192 191 193 4 (parallel [
            (set (reg:DI 1 dx [orig:184 D.6897 ] [184])
                (ashift:DI (reg:DI 0 ax [orig:183 D.6897 ] [183])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:318 512 {*ashldi3_1}
     (nil))
(insn 193 192 194 4 (set (reg/f:DI 0 ax [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:318 89 {*movdi_internal}
     (nil))
(insn 194 193 195 4 (parallel [
            (set (reg/f:DI 3 bx [orig:185 D.6894 ] [185])
                (plus:DI (reg:DI 1 dx [orig:184 D.6897 ] [184])
                    (reg/f:DI 0 ax [241])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:318 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:184 D.6897 ] [184]))
        (nil)))
(insn 195 194 231 4 (set (reg:SF 27 xmm6 [orig:186 D.6895 ] [186])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64]))) preproc.cpp:318 157 {*truncdfsf_fast_sse}
     (nil))
(insn 231 195 242 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 27 xmm6 [orig:186 D.6895 ] [186])) preproc.cpp:318 129 {*movsf_internal}
     (nil))
(note 242 231 234 4 NOTE_INSN_DELETED)
(note 234 242 196 4 NOTE_INSN_DELETED)
(insn 196 234 197 4 (set (reg:DF 0 ax [242])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) preproc.cpp:318 128 {*movdf_internal}
     (nil))
(insn 197 196 232 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [242])) preproc.cpp:318 128 {*movdf_internal}
     (nil))
(insn 232 197 198 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) preproc.cpp:318 128 {*movdf_internal}
     (nil))
(call_insn/u 198 232 200 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fae98e815e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:318 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 200 198 233 4 (set (reg:SF 21 xmm0 [orig:188 D.6895 ] [188])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:187 D.6896 ] [187]))) preproc.cpp:318 157 {*truncdfsf_fast_sse}
     (nil))
(note 233 200 238 4 NOTE_INSN_DELETED)
(note 238 233 201 4 NOTE_INSN_DELETED)
(insn 201 238 202 4 (set (reg:SF 21 xmm0 [orig:189 D.6895 ] [189])
        (mult:SF (reg:SF 21 xmm0 [orig:188 D.6895 ] [188])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) preproc.cpp:318 797 {*fop_sf_comm_sse}
     (nil))
(insn 202 201 203 4 (set (mem:SF (reg/f:DI 3 bx [orig:185 D.6894 ] [185]) [0 *_126+0 S4 A32])
        (reg:SF 21 xmm0 [orig:189 D.6895 ] [189])) preproc.cpp:318 129 {*movsf_internal}
     (nil))
(insn 203 202 219 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:299 217 {*addsi_1}
     (nil))
(jump_insn 219 203 220 4 (set (pc)
        (label_ref 204)) preproc.cpp:299 654 {jump}
     (nil)
 -> 204)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 220 219 207)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 190 191
(code_label 207 220 208 5 55 "" [1 uses])
(note 208 207 209 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 212 5 (set (reg:SI 0 ax [orig:190 D.6892 ] [190])
        (const_int 1 [0x1])) preproc.cpp:321 90 {*movsi_internal}
     (nil))
(insn 212 209 216 5 (set (reg:SI 0 ax [orig:191 <retval> ] [191])
        (reg:SI 0 ax [orig:190 D.6892 ] [190])) preproc.cpp:321 90 {*movsi_internal}
     (nil))
(insn 216 212 217 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:191 <retval> ] [191])) preproc.cpp:323 90 {*movsi_internal}
     (nil))
(insn 217 216 221 5 (use (reg/i:SI 0 ax)) preproc.cpp:323 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 221 217 0 NOTE_INSN_DELETED)

;; Function int zero_fill(float*, float*, Procpar_info*, Preprocess*) (_Z9zero_fillPfS_P12Procpar_infoP10Preprocess, funcdef_no=6, decl_uid=5483, cgraph_uid=6, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 38:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 39:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 47:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 48:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 62: point = 0
   Insn 61: point = 0
   Insn 57: point = 1
  BB 3
   Insn 64: point = 4
   Insn 19: point = 4
   Insn 18: point = 5
   Insn 17: point = 5
  BB 7
   Insn 54: point = 5
  BB 5
   Insn 31: point = 6
   Insn 30: point = 6
   Insn 29: point = 7
   Insn 28: point = 9
  BB 6
   Insn 66: point = 10
   Insn 48: point = 10
   Insn 47: point = 10
   Insn 46: point = 11
   Insn 45: point = 12
   Insn 44: point = 14
   Insn 43: point = 15
   Insn 42: point = 17
   Insn 41: point = 19
   Insn 40: point = 21
   Insn 39: point = 22
   Insn 38: point = 23
   Insn 37: point = 24
   Insn 36: point = 26
   Insn 35: point = 27
   Insn 34: point = 29
   Insn 33: point = 31
  BB 4
   Insn 26: point = 32
   Insn 25: point = 33
   Insn 24: point = 35
  BB 2
   Insn 15: point = 36
   Insn 14: point = 36
   Insn 13: point = 37
   Insn 12: point = 39
   Insn 11: point = 40
   Insn 10: point = 42
   Insn 9: point = 43
   Insn 5: point = 43
   Insn 4: point = 43
   Insn 3: point = 43
   Insn 2: point = 43
 r87: [2..5]
 r88: [36..40]
 r89: [36..37]
 r90: [6..7]
 r91: [28..29]
 r92: [25..27]
 r93: [22..24]
 r94: [18..19]
 r95: [16..17]
 r96: [13..15]
 r97: [10..12]
 r98: [0..1]
 r99: [41..42]
 r100: [38..39]
 r101: [34..35]
 r102: [32..33]
 r103: [8..9]
 r104: [30..31]
 r105: [25..26]
 r106: [22..23]
 r107: [20..21]
 r108: [13..14]
 r109: [10..11]
Compressing live ranges: from 43 to 36 - 83%
Ranges after the compression:
 r87: [2..3]
 r88: [30..33]
 r89: [30..31]
 r90: [4..5]
 r91: [22..23]
 r92: [20..21]
 r93: [18..19]
 r94: [14..15]
 r95: [12..13]
 r96: [10..11]
 r97: [8..9]
 r98: [0..1]
 r99: [34..35]
 r100: [32..33]
 r101: [28..29]
 r102: [26..27]
 r103: [6..7]
 r104: [24..25]
 r105: [20..21]
 r106: [18..19]
 r107: [16..17]
 r108: [10..11]
 r109: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 54
changing reg in insn 19
changing reg in insn 57
changing reg in insn 11
changing reg in insn 14
changing reg in insn 13
changing reg in insn 14
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 57
changing reg in insn 61
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.


int zero_fill(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0]
;;  ref usage 	r0={22d,20u} r1={5d,4u,2e} r2={2d,1u} r4={2d,1u} r5={3d,2u} r6={1d,25u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={9d,2u} r18={1d} r19={1d} r20={1d,1u,2e} r21={4d,2u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 195{124d,67u,4e} in 43{42 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 99 100
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) preproc.cpp:326 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:328 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:332 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 1 dx [orig:88 D.6899 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 24 [0x18])) [0 preprocess_7(D)->data_zero_fill+0 S4 A32])) preproc.cpp:332 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) preproc.cpp:332 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:89 D.6899 ] [89])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [100])
                (const_int 300 [0x12c])) [0 procpar_info_9(D)->num_points+0 S4 A32])) preproc.cpp:332 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:88 D.6899 ] [88])
            (reg:SI 0 ax [orig:89 D.6899 ] [89]))) preproc.cpp:332 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) preproc.cpp:332 612 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fae989cee10 *.LC10>)) preproc.cpp:333 89 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fae98eb8000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) preproc.cpp:333 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 18 64 3 (set (reg:SI 0 ax [orig:87 D.6899 ] [87])
        (const_int 0 [0])) preproc.cpp:334 90 {*movsi_internal}
     (nil))
(jump_insn 64 19 65 3 (set (pc)
        (label_ref 55)) preproc.cpp:334 654 {jump}
     (nil)
 -> 55)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 65 64 22)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 101 102
(code_label 22 65 23 4 59 "" [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) preproc.cpp:337 89 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [102])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 300 [0x12c])) [0 procpar_info_9(D)->num_points+0 S4 A32])) preproc.cpp:337 90 {*movsi_internal}
     (nil))
(insn 26 25 49 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (reg:SI 0 ax [102])) preproc.cpp:337 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 103
(code_label 49 26 27 5 62 "" [1 uses])
(note 27 49 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:337 89 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:SI 0 ax [orig:90 D.6899 ] [90])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 24 [0x18])) [0 preprocess_7(D)->data_zero_fill+0 S4 A32])) preproc.cpp:337 90 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:90 D.6899 ] [90])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32]))) preproc.cpp:337 7 {*cmpsi_1}
     (nil))
(jump_insn 31 30 32 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) preproc.cpp:337 612 {*jcc_1}
     (nil)
 -> 52)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 94 95 96 97 104 105 106 107 108 109
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) preproc.cpp:339 90 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (set (reg:DI 0 ax [orig:91 D.6900 ] [91])
        (sign_extend:DI (reg:SI 0 ax [104]))) preproc.cpp:339 142 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 6 (parallel [
            (set (reg:DI 1 dx [orig:92 D.6900 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 D.6900 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:339 512 {*ashldi3_1}
     (nil))
(insn 36 35 37 6 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])) preproc.cpp:339 89 {*movdi_internal}
     (nil))
(insn 37 36 38 6 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.6901 ] [93])
                (plus:DI (reg/f:DI 0 ax [105])
                    (reg:DI 1 dx [orig:92 D.6900 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:339 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:92 D.6900 ] [92]))
        (nil)))
(insn 38 37 39 6 (set (reg:SF 21 xmm0 [106])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:339 129 {*movsf_internal}
     (nil))
(insn 39 38 40 6 (set (mem:SF (reg/f:DI 0 ax [orig:93 D.6901 ] [93]) [0 *_18+0 S4 A32])
        (reg:SF 21 xmm0 [106])) preproc.cpp:339 129 {*movsf_internal}
     (nil))
(insn 40 39 41 6 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) preproc.cpp:340 90 {*movsi_internal}
     (nil))
(insn 41 40 42 6 (set (reg:DI 0 ax [orig:94 D.6902 ] [94])
        (sign_extend:DI (reg:SI 0 ax [107]))) preproc.cpp:340 142 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 6 (parallel [
            (set (reg:DI 0 ax [orig:95 D.6902 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 D.6902 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:340 218 {*adddi_1}
     (nil))
(insn 43 42 44 6 (parallel [
            (set (reg:DI 1 dx [orig:96 D.6902 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:95 D.6902 ] [95])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:340 512 {*ashldi3_1}
     (nil))
(insn 44 43 45 6 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])) preproc.cpp:340 89 {*movdi_internal}
     (nil))
(insn 45 44 46 6 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.6901 ] [97])
                (plus:DI (reg/f:DI 0 ax [108])
                    (reg:DI 1 dx [orig:96 D.6902 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:340 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.6902 ] [96]))
        (nil)))
(insn 46 45 47 6 (set (reg:SF 21 xmm0 [109])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:340 129 {*movsf_internal}
     (nil))
(insn 47 46 48 6 (set (mem:SF (reg/f:DI 0 ax [orig:97 D.6901 ] [97]) [0 *_23+0 S4 A32])
        (reg:SF 21 xmm0 [109])) preproc.cpp:340 129 {*movsf_internal}
     (nil))
(insn 48 47 66 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:337 217 {*addsi_1}
     (nil))
(jump_insn 66 48 67 6 (set (pc)
        (label_ref 49)) preproc.cpp:337 654 {jump}
     (nil)
 -> 49)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 67 66 52)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 52 67 53 7 61 "" [1 uses])
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 7 (set (reg:SI 0 ax [orig:87 D.6899 ] [87])
        (const_int 1 [0x1])) preproc.cpp:343 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 98
(code_label 55 54 56 8 60 "" [1 uses])
(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 61 8 (set (reg:SI 0 ax [orig:98 <retval> ] [98])
        (reg:SI 0 ax [orig:87 D.6899 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 61 57 62 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:98 <retval> ] [98])) preproc.cpp:345 90 {*movsi_internal}
     (nil))
(insn 62 61 68 8 (use (reg/i:SI 0 ax)) preproc.cpp:345 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 68 62 0 NOTE_INSN_DELETED)

;; Function int normalize(float*, float*, Procpar_info*) (_Z9normalizePfS_P12Procpar_info, funcdef_no=7, decl_uid=5461, cgraph_uid=7, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 9:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 10:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 11:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 12:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 22
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 23:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 30:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 39:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 53:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 54:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 55:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 62:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 63:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 66:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 91:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=158 from oldreg=121, assigning class SSE_REGS to r158
   91: r158:SF=r158:SF/r120:SF
      REG_DEAD r120:SF
      REG_DEAD r119:SF
    Inserting insn reload before:
  133: r158:SF=r119:SF
    Inserting insn reload after:
  134: r121:SF=r158:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 92:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 104
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 105:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 107:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=159 from oldreg=132, assigning class SSE_REGS to r159
  107: r159:SF=r159:SF/r131:SF
      REG_DEAD r131:SF
      REG_DEAD r130:SF
    Inserting insn reload before:
  135: r159:SF=r130:SF
    Inserting insn reload after:
  136: r132:SF=r159:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 108:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 109:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 123: point = 0
   Insn 122: point = 0
   Insn 118: point = 1
   Insn 115: point = 3
  BB 8
   Insn 77: point = 4
   Insn 76: point = 4
   Insn 75: point = 5
   Insn 74: point = 7
  BB 9
   Insn 130: point = 8
   Insn 109: point = 8
   Insn 108: point = 8
   Insn 136: point = 9
	Hard reg 21 is preferable by r159 with profit 1
   Insn 107: point = 11
   Insn 135: point = 12
	Hard reg 21 is preferable by r159 with profit 1
	Hard reg 22 is preferable by r159 with profit 1
   Insn 106: point = 14
   Insn 105: point = 15
   Insn 104: point = 17
   Insn 103: point = 19
   Insn 102: point = 20
   Insn 101: point = 22
   Insn 100: point = 24
   Insn 99: point = 26
   Insn 98: point = 27
   Insn 97: point = 29
   Insn 96: point = 30
   Insn 95: point = 32
   Insn 94: point = 34
   Insn 93: point = 36
   Insn 92: point = 37
   Insn 134: point = 38
	Hard reg 21 is preferable by r158 with profit 1
   Insn 91: point = 40
   Insn 133: point = 41
	Hard reg 21 is preferable by r158 with profit 1
	Hard reg 22 is preferable by r158 with profit 1
   Insn 90: point = 43
   Insn 89: point = 44
   Insn 88: point = 46
   Insn 87: point = 48
   Insn 86: point = 49
   Insn 85: point = 51
   Insn 84: point = 53
   Insn 83: point = 54
   Insn 82: point = 56
   Insn 81: point = 57
   Insn 80: point = 59
   Insn 79: point = 61
  BB 7
   Insn 72: point = 62
  BB 3
   Insn 16: point = 62
   Insn 15: point = 62
  BB 6
   Insn 128: point = 62
   Insn 66: point = 62
  BB 5
   Insn 63: point = 62
   Insn 62: point = 63
  BB 4
   Insn 57: point = 64
   Insn 56: point = 64
   Insn 55: point = 65
   Insn 54: point = 66
   Insn 53: point = 67
   Insn 52: point = 68
   Insn 51: point = 68
   Insn 50: point = 69
   Insn 49: point = 71
   Insn 48: point = 73
   Insn 47: point = 75
   Insn 46: point = 77
   Insn 45: point = 79
   Insn 44: point = 80
   Insn 43: point = 82
   Insn 42: point = 84
   Insn 41: point = 86
   Insn 40: point = 87
   Insn 39: point = 89
   Insn 38: point = 91
   Insn 37: point = 93
   Insn 36: point = 94
   Insn 35: point = 96
   Insn 34: point = 98
   Insn 33: point = 100
   Insn 32: point = 101
   Insn 31: point = 103
   Insn 30: point = 105
   Insn 29: point = 107
   Insn 28: point = 109
   Insn 27: point = 110
   Insn 26: point = 112
   Insn 25: point = 114
   Insn 24: point = 115
   Insn 23: point = 117
   Insn 22: point = 119
   Insn 21: point = 121
   Insn 20: point = 122
   Insn 19: point = 124
   Insn 18: point = 126
  BB 2
   Insn 13: point = 127
   Insn 12: point = 127
   Insn 11: point = 128
   Insn 10: point = 129
   Insn 9: point = 130
   Insn 8: point = 131
   Insn 4: point = 131
   Insn 3: point = 131
   Insn 2: point = 131
 r87: [123..124]
 r88: [120..122]
 r89: [118..119]
 r90: [116..117]
 r91: [102..115]
 r92: [111..112]
 r93: [108..110]
 r94: [106..107]
 r95: [104..105]
 r96: [102..103]
 r97: [70..101]
 r98: [97..98]
 r99: [95..96]
 r100: [92..94]
 r101: [90..91]
 r102: [88..89]
 r103: [72..87]
 r104: [83..84]
 r105: [81..82]
 r106: [78..80]
 r107: [76..77]
 r108: [74..75]
 r109: [72..73]
 r110: [70..71]
 r111: [68..69]
 r112: [4..5]
 r113: [58..59]
 r114: [55..57]
 r115: [37..54]
 r116: [50..51]
 r117: [47..49]
 r118: [45..46]
 r119: [42..44]
 r120: [40..43]
 r121: [37..38]
 r122: [33..34]
 r123: [31..32]
 r124: [28..30]
 r125: [8..27]
 r126: [23..24]
 r127: [21..22]
 r128: [18..20]
 r129: [16..17]
 r130: [13..15]
 r131: [11..14]
 r132: [8..9]
 r133: [2..3]
 r134: [0..1]
 r135: [129..130]
 r136: [127..128]
 r137: [125..126]
 r138: [120..121]
 r139: [113..114]
 r140: [108..109]
 r141: [99..100]
 r142: [92..93]
 r143: [85..86]
 r144: [78..79]
 r145: [66..67]
 r146: [64..65]
 r147: [62..63]
 r148: [6..7]
 r149: [60..61]
 r150: [55..56]
 r151: [52..53]
 r152: [47..48]
 r153: [35..36]
 r154: [28..29]
 r155: [25..26]
 r156: [18..19]
 r158: [39..41]
 r159: [10..12]
Compressing live ranges: from 131 to 114 - 87%
Ranges after the compression:
 r87: [106..107]
 r88: [104..105]
 r89: [102..103]
 r90: [100..101]
 r91: [88..99]
 r92: [96..97]
 r93: [94..95]
 r94: [92..93]
 r95: [90..91]
 r96: [88..89]
 r97: [60..87]
 r98: [84..85]
 r99: [82..83]
 r100: [80..81]
 r101: [78..79]
 r102: [76..77]
 r103: [62..75]
 r104: [72..73]
 r105: [70..71]
 r106: [68..69]
 r107: [66..67]
 r108: [64..65]
 r109: [62..63]
 r110: [60..61]
 r111: [58..59]
 r112: [4..5]
 r113: [48..49]
 r114: [46..47]
 r115: [32..45]
 r116: [42..43]
 r117: [40..41]
 r118: [38..39]
 r119: [36..37]
 r120: [34..37]
 r121: [32..33]
 r122: [28..29]
 r123: [26..27]
 r124: [24..25]
 r125: [8..23]
 r126: [20..21]
 r127: [18..19]
 r128: [16..17]
 r129: [14..15]
 r130: [12..13]
 r131: [10..13]
 r132: [8..9]
 r133: [2..3]
 r134: [0..1]
 r135: [112..113]
 r136: [110..111]
 r137: [108..109]
 r138: [104..105]
 r139: [98..99]
 r140: [94..95]
 r141: [86..87]
 r142: [80..81]
 r143: [74..75]
 r144: [68..69]
 r145: [56..57]
 r146: [54..55]
 r147: [52..53]
 r148: [6..7]
 r149: [50..51]
 r150: [46..47]
 r151: [44..45]
 r152: [40..41]
 r153: [30..31]
 r154: [24..25]
 r155: [22..23]
 r156: [16..17]
 r158: [34..35]
 r159: [10..11]

********** Assignment #1: **********

	 Assigning to 158 (cl=SSE_REGS, orig=121, freq=3, tfirst=158, tfreq=3)...
	   Assign 22 to reload r158 (freq=3)
	 Assigning to 159 (cl=SSE_REGS, orig=132, freq=3, tfirst=159, tfreq=3)...
	   Assign 22 to reload r159 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 32
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 75
changing reg in insn 76
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 92
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 98
changing reg in insn 108
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 115
changing reg in insn 118
changing reg in insn 118
changing reg in insn 122
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 62
changing reg in insn 63
changing reg in insn 74
changing reg in insn 75
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 103
deleting insn with uid = 51.
deleting insn with uid = 133.
deleting insn with uid = 135.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 52.


int normalize(float*, float*, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2]
;;  ref usage 	r0={35d,34u} r1={17d,16u,6e} r2={4d,2u,2e} r4={2d,1u} r5={2d,1u} r6={1d,48u} r7={1d,11u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={26d,3u} r18={1d} r19={1d} r20={1d,1u,8e} r21={18d,17u} r22={8d,6u} r23={3d,1u} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 345{188d,141u,16e} in 97{96 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 135 136
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) preproc.cpp:347 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
        (reg:DI 4 si [ scratch ])) preproc.cpp:347 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) preproc.cpp:347 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:349 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DF 21 xmm0 [135])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:350 128 {*movdf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])
        (reg:DF 21 xmm0 [135])) preproc.cpp:350 128 {*movdf_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 21 xmm0 [136])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:351 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64])
        (reg:DF 21 xmm0 [136])) preproc.cpp:351 128 {*movdf_internal}
     (nil))
(insn 13 12 67 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:357 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              6 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 67 13 14 3 67 "" [1 uses])
(note 14 67 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 99 [0x63]))) preproc.cpp:357 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) preproc.cpp:357 612 {*jcc_1}
     (nil)
 -> 70)
;;  succ:       7
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 137 138 139 140 141 142 143 144 145 146
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 ax [137])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:359 90 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:DI 0 ax [orig:87 D.6904 ] [87])
        (sign_extend:DI (reg:SI 0 ax [137]))) preproc.cpp:359 142 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:DI 1 dx [orig:88 D.6904 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.6904 ] [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:359 512 {*ashldi3_1}
     (nil))
(insn 21 20 22 4 (set (reg/f:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:359 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.6905 ] [89])
                (plus:DI (reg/f:DI 0 ax [138])
                    (reg:DI 1 dx [orig:88 D.6904 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:359 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.6904 ] [88]))
        (nil)))
(insn 23 22 24 4 (set (reg:SF 21 xmm0 [orig:90 D.6906 ] [90])
        (mem:SF (reg/f:DI 0 ax [orig:89 D.6905 ] [89]) [0 *_15+0 S4 A32])) preproc.cpp:359 129 {*movsf_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DF 22 xmm1 [orig:91 D.6907 ] [91])
        (float_extend:DF (reg:SF 21 xmm0 [orig:90 D.6906 ] [90]))) preproc.cpp:359 152 {*extendsfdf2_sse}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [139])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:359 90 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 0 ax [orig:92 D.6904 ] [92])
        (sign_extend:DI (reg:SI 0 ax [139]))) preproc.cpp:359 142 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 1 dx [orig:93 D.6904 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:92 D.6904 ] [92])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:359 512 {*ashldi3_1}
     (nil))
(insn 28 27 29 4 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:359 89 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.6905 ] [94])
                (plus:DI (reg/f:DI 0 ax [140])
                    (reg:DI 1 dx [orig:93 D.6904 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:359 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.6904 ] [93]))
        (nil)))
(insn 30 29 31 4 (set (reg:SF 21 xmm0 [orig:95 D.6906 ] [95])
        (mem:SF (reg/f:DI 0 ax [orig:94 D.6905 ] [94]) [0 *_20+0 S4 A32])) preproc.cpp:359 129 {*movsf_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DF 21 xmm0 [orig:96 D.6907 ] [96])
        (float_extend:DF (reg:SF 21 xmm0 [orig:95 D.6906 ] [95]))) preproc.cpp:359 152 {*extendsfdf2_sse}
     (nil))
(insn 32 31 33 4 (set (reg:DF 22 xmm1 [orig:97 D.6907 ] [97])
        (mult:DF (reg:DF 22 xmm1 [orig:91 D.6907 ] [91])
            (reg:DF 21 xmm0 [orig:96 D.6907 ] [96]))) preproc.cpp:359 798 {*fop_df_comm_sse}
     (nil))
(insn 33 32 34 4 (set (reg:SI 0 ax [141])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:360 90 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 0 ax [orig:98 D.6908 ] [98])
        (sign_extend:DI (reg:SI 0 ax [141]))) preproc.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 0 ax [orig:99 D.6908 ] [99])
                (plus:DI (reg:DI 0 ax [orig:98 D.6908 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 218 {*adddi_1}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 1 dx [orig:100 D.6908 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:99 D.6908 ] [99])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 512 {*ashldi3_1}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:360 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.6905 ] [101])
                (plus:DI (reg/f:DI 0 ax [142])
                    (reg:DI 1 dx [orig:100 D.6908 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.6908 ] [100]))
        (nil)))
(insn 39 38 40 4 (set (reg:SF 21 xmm0 [orig:102 D.6906 ] [102])
        (mem:SF (reg/f:DI 0 ax [orig:101 D.6905 ] [101]) [0 *_27+0 S4 A32])) preproc.cpp:360 129 {*movsf_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DF 23 xmm2 [orig:103 D.6907 ] [103])
        (float_extend:DF (reg:SF 21 xmm0 [orig:102 D.6906 ] [102]))) preproc.cpp:360 152 {*extendsfdf2_sse}
     (nil))
(insn 41 40 42 4 (set (reg:SI 0 ax [143])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:360 90 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 0 ax [orig:104 D.6908 ] [104])
        (sign_extend:DI (reg:SI 0 ax [143]))) preproc.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 0 ax [orig:105 D.6908 ] [105])
                (plus:DI (reg:DI 0 ax [orig:104 D.6908 ] [104])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 218 {*adddi_1}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg:DI 1 dx [orig:106 D.6908 ] [106])
                (ashift:DI (reg:DI 0 ax [orig:105 D.6908 ] [105])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 512 {*ashldi3_1}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:360 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:107 D.6905 ] [107])
                (plus:DI (reg/f:DI 0 ax [144])
                    (reg:DI 1 dx [orig:106 D.6908 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:106 D.6908 ] [106]))
        (nil)))
(insn 47 46 48 4 (set (reg:SF 21 xmm0 [orig:108 D.6906 ] [108])
        (mem:SF (reg/f:DI 0 ax [orig:107 D.6905 ] [107]) [0 *_33+0 S4 A32])) preproc.cpp:360 129 {*movsf_internal}
     (nil))
(insn 48 47 49 4 (set (reg:DF 21 xmm0 [orig:109 D.6907 ] [109])
        (float_extend:DF (reg:SF 21 xmm0 [orig:108 D.6906 ] [108]))) preproc.cpp:360 152 {*extendsfdf2_sse}
     (nil))
(insn 49 48 50 4 (set (reg:DF 21 xmm0 [orig:110 D.6907 ] [110])
        (mult:DF (reg:DF 21 xmm0 [orig:109 D.6907 ] [109])
            (reg:DF 23 xmm2 [orig:103 D.6907 ] [103]))) preproc.cpp:360 798 {*fop_df_comm_sse}
     (nil))
(insn 50 49 52 4 (set (reg:DF 21 xmm0 [orig:111 D.6907 ] [111])
        (plus:DF (reg:DF 21 xmm0 [orig:110 D.6907 ] [110])
            (reg:DF 22 xmm1 [orig:97 D.6907 ] [97]))) preproc.cpp:359 798 {*fop_df_comm_sse}
     (nil))
(call_insn 52 50 53 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:360 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 53 52 54 4 (set (reg:DF 0 ax [145])
        (reg:DF 21 xmm0)) preproc.cpp:360 128 {*movdf_internal}
     (nil))
(insn 54 53 55 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])
        (reg:DF 0 ax [145])) preproc.cpp:360 128 {*movdf_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DF 21 xmm0 [146])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])) preproc.cpp:362 128 {*movdf_internal}
     (nil))
(insn 56 55 57 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [146])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) preproc.cpp:362 56 {*cmpiudf_sse}
     (nil))
(jump_insn 57 56 61 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 64)
            (pc))) preproc.cpp:362 612 {*jcc_1}
     (nil)
 -> 64)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 147
(note 61 57 62 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 5 (set (reg:DF 21 xmm0 [147])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])) preproc.cpp:362 128 {*movdf_internal}
     (nil))
(insn 63 62 64 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64])
        (reg:DF 21 xmm0 [147])) preproc.cpp:362 128 {*movdf_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 64 63 65 6 65 "" [1 uses])
(note 65 64 66 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 128 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:357 217 {*addsi_1}
     (nil))
(jump_insn 128 66 129 6 (set (pc)
        (label_ref 67)) preproc.cpp:357 654 {jump}
     (nil)
 -> 67)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 129 128 70)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 70 129 71 7 64 "" [1 uses])
(note 71 70 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 110 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:366 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              9 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 148
(code_label 110 72 73 8 69 "" [1 uses])
(note 73 110 74 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 8 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:366 89 {*movdi_internal}
     (nil))
(insn 75 74 76 8 (set (reg:SI 0 ax [orig:112 D.6909 ] [112])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [148])
                (const_int 300 [0x12c])) [0 procpar_info_43(D)->num_points+0 S4 A32])) preproc.cpp:366 90 {*movsi_internal}
     (nil))
(insn 76 75 77 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:112 D.6909 ] [112])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) preproc.cpp:366 7 {*cmpsi_1}
     (nil))
(jump_insn 77 76 78 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) preproc.cpp:366 612 {*jcc_1}
     (nil)
 -> 113)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 149 150 151 152 153 154 155 156
(note 78 77 79 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 9 (set (reg:SI 0 ax [149])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:368 90 {*movsi_internal}
     (nil))
(insn 80 79 81 9 (set (reg:DI 0 ax [orig:113 D.6904 ] [113])
        (sign_extend:DI (reg:SI 0 ax [149]))) preproc.cpp:368 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 9 (parallel [
            (set (reg:DI 1 dx [orig:114 D.6904 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.6904 ] [113])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:368 512 {*ashldi3_1}
     (nil))
(insn 82 81 83 9 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])) preproc.cpp:368 89 {*movdi_internal}
     (nil))
(insn 83 82 84 9 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.6905 ] [115])
                (plus:DI (reg/f:DI 0 ax [150])
                    (reg:DI 1 dx [orig:114 D.6904 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:368 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.6904 ] [114]))
        (nil)))
(insn 84 83 85 9 (set (reg:SI 1 dx [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:368 90 {*movsi_internal}
     (nil))
(insn 85 84 86 9 (set (reg:DI 1 dx [orig:116 D.6904 ] [116])
        (sign_extend:DI (reg:SI 1 dx [151]))) preproc.cpp:368 142 {*extendsidi2_rex64}
     (nil))
(insn 86 85 87 9 (parallel [
            (set (reg:DI 2 cx [orig:117 D.6904 ] [117])
                (ashift:DI (reg:DI 1 dx [orig:116 D.6904 ] [116])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:368 512 {*ashldi3_1}
     (nil))
(insn 87 86 88 9 (set (reg/f:DI 1 dx [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:368 89 {*movdi_internal}
     (nil))
(insn 88 87 89 9 (parallel [
            (set (reg/f:DI 1 dx [orig:118 D.6905 ] [118])
                (plus:DI (reg/f:DI 1 dx [152])
                    (reg:DI 2 cx [orig:117 D.6904 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:368 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:117 D.6904 ] [117]))
        (nil)))
(insn 89 88 90 9 (set (reg:SF 22 xmm1 [orig:119 D.6906 ] [119])
        (mem:SF (reg/f:DI 1 dx [orig:118 D.6905 ] [118]) [0 *_51+0 S4 A32])) preproc.cpp:368 129 {*movsf_internal}
     (nil))
(insn 90 89 91 9 (set (reg:SF 21 xmm0 [orig:120 D.6906 ] [120])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) preproc.cpp:368 157 {*truncdfsf_fast_sse}
     (nil))
(insn 91 90 134 9 (set (reg:SF 22 xmm1 [orig:121 D.6906 ] [121])
        (div:SF (reg:SF 22 xmm1 [orig:121 D.6906 ] [121])
            (reg:SF 21 xmm0 [orig:120 D.6906 ] [120]))) preproc.cpp:368 804 {*fop_sf_1_sse}
     (nil))
(insn 134 91 92 9 (set (reg:SF 21 xmm0 [orig:121 D.6906 ] [121])
        (reg:SF 22 xmm1 [orig:121 D.6906 ] [121])) preproc.cpp:368 129 {*movsf_internal}
     (nil))
(insn 92 134 93 9 (set (mem:SF (reg/f:DI 0 ax [orig:115 D.6905 ] [115]) [0 *_48+0 S4 A32])
        (reg:SF 21 xmm0 [orig:121 D.6906 ] [121])) preproc.cpp:368 129 {*movsf_internal}
     (nil))
(insn 93 92 94 9 (set (reg:SI 0 ax [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:369 90 {*movsi_internal}
     (nil))
(insn 94 93 95 9 (set (reg:DI 0 ax [orig:122 D.6908 ] [122])
        (sign_extend:DI (reg:SI 0 ax [153]))) preproc.cpp:369 142 {*extendsidi2_rex64}
     (nil))
(insn 95 94 96 9 (parallel [
            (set (reg:DI 0 ax [orig:123 D.6908 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 D.6908 ] [122])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 218 {*adddi_1}
     (nil))
(insn 96 95 97 9 (parallel [
            (set (reg:DI 1 dx [orig:124 D.6908 ] [124])
                (ashift:DI (reg:DI 0 ax [orig:123 D.6908 ] [123])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 512 {*ashldi3_1}
     (nil))
(insn 97 96 98 9 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])) preproc.cpp:369 89 {*movdi_internal}
     (nil))
(insn 98 97 99 9 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.6905 ] [125])
                (plus:DI (reg/f:DI 0 ax [154])
                    (reg:DI 1 dx [orig:124 D.6908 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:124 D.6908 ] [124]))
        (nil)))
(insn 99 98 100 9 (set (reg:SI 1 dx [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:369 90 {*movsi_internal}
     (nil))
(insn 100 99 101 9 (set (reg:DI 1 dx [orig:126 D.6908 ] [126])
        (sign_extend:DI (reg:SI 1 dx [155]))) preproc.cpp:369 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 9 (parallel [
            (set (reg:DI 1 dx [orig:127 D.6908 ] [127])
                (plus:DI (reg:DI 1 dx [orig:126 D.6908 ] [126])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 218 {*adddi_1}
     (nil))
(insn 102 101 103 9 (parallel [
            (set (reg:DI 2 cx [orig:128 D.6908 ] [128])
                (ashift:DI (reg:DI 1 dx [orig:127 D.6908 ] [127])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 512 {*ashldi3_1}
     (nil))
(insn 103 102 104 9 (set (reg/f:DI 1 dx [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:369 89 {*movdi_internal}
     (nil))
(insn 104 103 105 9 (parallel [
            (set (reg/f:DI 1 dx [orig:129 D.6905 ] [129])
                (plus:DI (reg/f:DI 1 dx [156])
                    (reg:DI 2 cx [orig:128 D.6908 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:128 D.6908 ] [128]))
        (nil)))
(insn 105 104 106 9 (set (reg:SF 22 xmm1 [orig:130 D.6906 ] [130])
        (mem:SF (reg/f:DI 1 dx [orig:129 D.6905 ] [129]) [0 *_63+0 S4 A32])) preproc.cpp:369 129 {*movsf_internal}
     (nil))
(insn 106 105 107 9 (set (reg:SF 21 xmm0 [orig:131 D.6906 ] [131])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) preproc.cpp:369 157 {*truncdfsf_fast_sse}
     (nil))
(insn 107 106 136 9 (set (reg:SF 22 xmm1 [orig:132 D.6906 ] [132])
        (div:SF (reg:SF 22 xmm1 [orig:132 D.6906 ] [132])
            (reg:SF 21 xmm0 [orig:131 D.6906 ] [131]))) preproc.cpp:369 804 {*fop_sf_1_sse}
     (nil))
(insn 136 107 108 9 (set (reg:SF 21 xmm0 [orig:132 D.6906 ] [132])
        (reg:SF 22 xmm1 [orig:132 D.6906 ] [132])) preproc.cpp:369 129 {*movsf_internal}
     (nil))
(insn 108 136 109 9 (set (mem:SF (reg/f:DI 0 ax [orig:125 D.6905 ] [125]) [0 *_59+0 S4 A32])
        (reg:SF 21 xmm0 [orig:132 D.6906 ] [132])) preproc.cpp:369 129 {*movsf_internal}
     (nil))
(insn 109 108 130 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:366 217 {*addsi_1}
     (nil))
(jump_insn 130 109 131 9 (set (pc)
        (label_ref 110)) preproc.cpp:366 654 {jump}
     (nil)
 -> 110)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 131 130 113)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 133 134
(code_label 113 131 114 10 68 "" [1 uses])
(note 114 113 115 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 118 10 (set (reg:SI 0 ax [orig:133 D.6909 ] [133])
        (const_int 1 [0x1])) preproc.cpp:373 90 {*movsi_internal}
     (nil))
(insn 118 115 122 10 (set (reg:SI 0 ax [orig:134 <retval> ] [134])
        (reg:SI 0 ax [orig:133 D.6909 ] [133])) preproc.cpp:373 90 {*movsi_internal}
     (nil))
(insn 122 118 123 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:134 <retval> ] [134])) preproc.cpp:375 90 {*movsi_internal}
     (nil))
(insn 123 122 132 10 (use (reg/i:SI 0 ax)) preproc.cpp:375 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 132 123 0 NOTE_INSN_DELETED)

;; Function int quality(float*, float*, float*, Procpar_info*, Preprocess*) (_Z7qualityPfS_S_P12Procpar_infoP10Preprocess, funcdef_no=8, decl_uid=5472, cgraph_uid=8, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 11:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 12:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 13:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 14:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 15:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 16:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 17:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 18:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 19:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 20:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 21:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 22:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 23:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 24:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 25:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 26:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 27:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 28:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 29:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 30:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 43:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 50:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 59:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 66
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 67:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 69
	 Choosing alt 0 in insn 69:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 73:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 74:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 80:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 87
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 88:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 93:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 94:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 99
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 100:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 106
	 Choosing alt 0 in insn 106:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 107:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 115
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 116:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 123
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 124:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 0 in insn 126:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 130:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 131:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 136
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 137:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 144
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 145:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 150:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 151:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 156
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 157:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 163
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 164:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 166:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 172
	 Choosing alt 0 in insn 172:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 173:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 180
	 Choosing alt 0 in insn 180:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 181:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 183
	 Choosing alt 0 in insn 183:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 187:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 188:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 193
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 194:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 201
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 202:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 207:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 208:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 209:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 211:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 212:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 214:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 217:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 218:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 220:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=302 from oldreg=199, assigning class SSE_REGS to r302
  220: r302:SF=float_trunc([frame:DI-0x50])
    Inserting insn reload after:
  294: r199:SF=r302:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 294:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 221:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=303, assigning class NO_REGS to secondary r303
  222: r303:DF=r287:DF
      REG_DEAD r287:DF
    Inserting the sec. move after:
  295: xmm0:DF=r303:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 295:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 226
	 Choosing alt 0 in insn 226:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=304 from oldreg=199, assigning class SSE_REGS to r304
      Making reload reg 304 for reg 199 optional
  226: r202:SF=r201:SF*r304:SF
      REG_DEAD r201:SF
      REG_DEAD r199:SF
    Inserting insn reload before:
  296: r304:SF=r199:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 296:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 227:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 230:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 231:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 234:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=305 from oldreg=207, assigning class SSE_REGS to r305
  234: r305:SF=float_trunc([frame:DI-0x50])
    Inserting insn reload after:
  297: r207:SF=r305:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 297:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 235:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=306, assigning class NO_REGS to secondary r306
  236: r306:DF=r290:DF
      REG_DEAD r290:DF
    Inserting the sec. move after:
  298: xmm0:DF=r306:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 298:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 240
	 Choosing alt 0 in insn 240:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=307 from oldreg=207, assigning class SSE_REGS to r307
      Making reload reg 307 for reg 207 optional
  240: r210:SF=r209:SF*r307:SF
      REG_DEAD r209:SF
      REG_DEAD r207:SF
    Inserting insn reload before:
  299: r307:SF=r207:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 299:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 241:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 242:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 244:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 245:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 247:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 250:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 251:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 252:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 253:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=308 from oldreg=214, assigning class SSE_REGS to r308
  253: r308:SF=float_trunc([frame:DI-0x48])
    Inserting insn reload after:
  300: r214:SF=r308:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 300:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 254:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=309, assigning class NO_REGS to secondary r309
  255: r309:DF=r297:DF
      REG_DEAD r297:DF
    Inserting the sec. move after:
  301: xmm0:DF=r309:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 301:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 259
	 Choosing alt 0 in insn 259:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=310 from oldreg=214, assigning class SSE_REGS to r310
      Making reload reg 310 for reg 214 optional
  259: r217:SF=r216:SF*r310:SF
      REG_DEAD r216:SF
      REG_DEAD r214:SF
    Inserting insn reload before:
  302: r310:SF=r214:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 302:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 260:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 263:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 266:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 267:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=311 from oldreg=222, assigning class SSE_REGS to r311
  267: r311:SF=float_trunc([frame:DI-0x48])
    Inserting insn reload after:
  303: r222:SF=r311:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 303:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 268:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=312, assigning class NO_REGS to secondary r312
  269: r312:DF=r300:DF
      REG_DEAD r300:DF
    Inserting the sec. move after:
  304: xmm0:DF=r312:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 304:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 273
	 Choosing alt 0 in insn 273:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=313 from oldreg=222, assigning class SSE_REGS to r313
      Making reload reg 313 for reg 222 optional
  273: r225:SF=r224:SF*r313:SF
      REG_DEAD r224:SF
      REG_DEAD r222:SF
    Inserting insn reload before:
  305: r313:SF=r222:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 305:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 274:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 275:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=314 from oldreg=222, assigning class SSE_REGS to inheritance r314
    Original reg change 222->314 (bb4):
  303: r314:SF=r311:SF
    Add original<-inheritance after:
  306: r222:SF=r314:SF

    Inheritance reuse change 222->314 (bb4):
  305: r313:SF=r314:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=315 from oldreg=214, assigning class SSE_REGS to inheritance r315
    Original reg change 214->315 (bb4):
  300: r315:SF=r308:SF
    Add original<-inheritance after:
  307: r214:SF=r315:SF

    Inheritance reuse change 214->315 (bb4):
  302: r310:SF=r315:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=316 from oldreg=207, assigning class SSE_REGS to inheritance r316
    Original reg change 207->316 (bb4):
  297: r316:SF=r305:SF
    Add original<-inheritance after:
  308: r207:SF=r316:SF

    Inheritance reuse change 207->316 (bb4):
  299: r307:SF=r316:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=317 from oldreg=199, assigning class SSE_REGS to inheritance r317
    Original reg change 199->317 (bb4):
  294: r317:SF=r302:SF
    Add original<-inheritance after:
  309: r199:SF=r317:SF

    Inheritance reuse change 199->317 (bb4):
  296: r304:SF=r317:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   306: r222:SF=r314:SF
deleting insn with uid = 306.
	    Removing dead insn:
   307: r214:SF=r315:SF
deleting insn with uid = 307.
	    Removing dead insn:
   308: r207:SF=r316:SF
deleting insn with uid = 308.
	    Removing dead insn:
   309: r199:SF=r317:SF
deleting insn with uid = 309.
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 289: point = 0
   Insn 288: point = 0
   Insn 284: point = 1
   Insn 281: point = 3
  BB 3
   Insn 36: point = 4
   Insn 35: point = 4
   Insn 34: point = 5
   Insn 33: point = 7
  BB 4
   Insn 291: point = 8
   Insn 275: point = 8
   Insn 274: point = 8
   Insn 273: point = 9
   Insn 305: point = 11
	   Creating copy r313<-r314@1
   Insn 272: point = 13
   Insn 271: point = 15
   Insn 270: point = 16
   Insn 304: point = 16
	Hard reg 21 is preferable by r312 with profit 1
   Insn 269: point = 17
	Hard reg 21 is preferable by r312 with profit 1
	Hard reg 0 is preferable by r312 with profit 1
   Insn 268: point = 19
   Insn 303: point = 20
	   Creating copy r311->r314@1
   Insn 267: point = 22
   Insn 266: point = 23
   Insn 265: point = 25
   Insn 264: point = 26
   Insn 263: point = 28
   Insn 262: point = 30
   Insn 261: point = 32
   Insn 260: point = 33
   Insn 259: point = 34
   Insn 302: point = 36
	   Creating copy r310<-r315@1
   Insn 258: point = 38
   Insn 257: point = 40
   Insn 256: point = 41
   Insn 301: point = 41
	Hard reg 21 is preferable by r309 with profit 1
   Insn 255: point = 42
	Hard reg 21 is preferable by r309 with profit 1
	Hard reg 0 is preferable by r309 with profit 1
   Insn 254: point = 44
   Insn 300: point = 45
	   Creating copy r308->r315@1
   Insn 253: point = 47
   Insn 252: point = 48
   Insn 251: point = 50
   Insn 250: point = 51
   Insn 249: point = 53
   Insn 248: point = 55
   Insn 247: point = 56
   Insn 246: point = 57
   Insn 245: point = 59
   Insn 244: point = 60
   Insn 243: point = 61
   Insn 242: point = 63
   Insn 241: point = 64
   Insn 240: point = 65
   Insn 299: point = 67
	   Creating copy r307<-r316@1
   Insn 239: point = 69
   Insn 238: point = 71
   Insn 237: point = 72
   Insn 298: point = 72
	Hard reg 21 is preferable by r306 with profit 1
   Insn 236: point = 73
	Hard reg 21 is preferable by r306 with profit 1
	Hard reg 0 is preferable by r306 with profit 1
   Insn 235: point = 75
   Insn 297: point = 76
	   Creating copy r305->r316@1
   Insn 234: point = 78
   Insn 233: point = 79
   Insn 232: point = 81
   Insn 231: point = 82
   Insn 230: point = 84
   Insn 229: point = 86
   Insn 228: point = 88
   Insn 227: point = 89
   Insn 226: point = 90
   Insn 296: point = 92
	   Creating copy r304<-r317@1
   Insn 225: point = 94
   Insn 224: point = 96
   Insn 223: point = 97
   Insn 295: point = 97
	Hard reg 21 is preferable by r303 with profit 1
   Insn 222: point = 98
	Hard reg 21 is preferable by r303 with profit 1
	Hard reg 0 is preferable by r303 with profit 1
   Insn 221: point = 100
   Insn 294: point = 101
	   Creating copy r302->r317@1
   Insn 220: point = 103
   Insn 219: point = 104
   Insn 218: point = 106
   Insn 217: point = 107
   Insn 216: point = 109
   Insn 215: point = 111
   Insn 214: point = 112
   Insn 213: point = 113
   Insn 212: point = 115
   Insn 211: point = 116
   Insn 210: point = 117
   Insn 209: point = 119
   Insn 208: point = 120
   Insn 207: point = 121
   Insn 206: point = 122
   Insn 205: point = 122
   Insn 204: point = 123
   Insn 203: point = 124
   Insn 202: point = 126
   Insn 201: point = 128
   Insn 200: point = 130
   Insn 199: point = 131
   Insn 198: point = 133
   Insn 197: point = 135
   Insn 196: point = 137
   Insn 195: point = 138
   Insn 194: point = 140
   Insn 193: point = 142
   Insn 192: point = 144
   Insn 191: point = 145
   Insn 190: point = 147
   Insn 189: point = 149
   Insn 188: point = 150
   Insn 187: point = 151
   Insn 186: point = 152
   Insn 185: point = 152
   Insn 184: point = 153
   Insn 183: point = 155
   Insn 182: point = 157
   Insn 181: point = 159
   Insn 180: point = 161
   Insn 179: point = 163
   Insn 178: point = 164
   Insn 177: point = 166
   Insn 176: point = 168
   Insn 175: point = 170
   Insn 174: point = 171
   Insn 173: point = 173
   Insn 172: point = 175
   Insn 171: point = 177
   Insn 170: point = 178
   Insn 169: point = 180
   Insn 168: point = 182
   Insn 167: point = 184
   Insn 166: point = 185
   Insn 165: point = 187
   Insn 164: point = 189
   Insn 163: point = 191
   Insn 162: point = 193
   Insn 161: point = 194
   Insn 160: point = 196
   Insn 159: point = 198
   Insn 158: point = 199
   Insn 157: point = 201
   Insn 156: point = 203
   Insn 155: point = 205
   Insn 154: point = 206
   Insn 153: point = 208
   Insn 152: point = 210
   Insn 151: point = 211
   Insn 150: point = 212
   Insn 149: point = 213
   Insn 148: point = 213
   Insn 147: point = 214
   Insn 146: point = 215
   Insn 145: point = 217
   Insn 144: point = 219
   Insn 143: point = 221
   Insn 142: point = 222
   Insn 141: point = 224
   Insn 140: point = 226
   Insn 139: point = 228
   Insn 138: point = 229
   Insn 137: point = 231
   Insn 136: point = 233
   Insn 135: point = 235
   Insn 134: point = 236
   Insn 133: point = 238
   Insn 132: point = 240
   Insn 131: point = 241
   Insn 130: point = 242
   Insn 129: point = 243
   Insn 128: point = 243
   Insn 127: point = 244
   Insn 126: point = 246
   Insn 125: point = 248
   Insn 124: point = 250
   Insn 123: point = 252
   Insn 122: point = 254
   Insn 121: point = 255
   Insn 120: point = 257
   Insn 119: point = 259
   Insn 118: point = 261
   Insn 117: point = 262
   Insn 116: point = 264
   Insn 115: point = 266
   Insn 114: point = 268
   Insn 113: point = 269
   Insn 112: point = 271
   Insn 111: point = 273
   Insn 110: point = 275
   Insn 109: point = 276
   Insn 108: point = 278
   Insn 107: point = 280
   Insn 106: point = 282
   Insn 105: point = 284
   Insn 104: point = 285
   Insn 103: point = 287
   Insn 102: point = 289
   Insn 101: point = 290
   Insn 100: point = 292
   Insn 99: point = 294
   Insn 98: point = 296
   Insn 97: point = 297
   Insn 96: point = 299
   Insn 95: point = 301
   Insn 94: point = 302
   Insn 93: point = 303
   Insn 92: point = 304
   Insn 91: point = 304
   Insn 90: point = 305
   Insn 89: point = 306
   Insn 88: point = 308
   Insn 87: point = 310
   Insn 86: point = 312
   Insn 85: point = 313
   Insn 84: point = 315
   Insn 83: point = 317
   Insn 82: point = 319
   Insn 81: point = 320
   Insn 80: point = 322
   Insn 79: point = 324
   Insn 78: point = 326
   Insn 77: point = 327
   Insn 76: point = 329
   Insn 75: point = 331
   Insn 74: point = 332
   Insn 73: point = 333
   Insn 72: point = 334
   Insn 71: point = 334
   Insn 70: point = 335
   Insn 69: point = 337
   Insn 68: point = 339
   Insn 67: point = 341
   Insn 66: point = 343
   Insn 65: point = 345
   Insn 64: point = 346
   Insn 63: point = 348
   Insn 62: point = 350
   Insn 61: point = 352
   Insn 60: point = 353
   Insn 59: point = 355
   Insn 58: point = 357
   Insn 57: point = 359
   Insn 56: point = 360
   Insn 55: point = 362
   Insn 54: point = 364
   Insn 53: point = 366
   Insn 52: point = 367
   Insn 51: point = 369
   Insn 50: point = 371
   Insn 49: point = 373
   Insn 48: point = 375
   Insn 47: point = 376
   Insn 46: point = 378
   Insn 45: point = 380
   Insn 44: point = 381
   Insn 43: point = 383
   Insn 42: point = 385
   Insn 41: point = 387
   Insn 40: point = 388
   Insn 39: point = 390
   Insn 38: point = 392
  BB 2
   Insn 31: point = 393
   Insn 30: point = 393
   Insn 29: point = 394
   Insn 28: point = 395
   Insn 27: point = 396
   Insn 26: point = 397
   Insn 25: point = 398
   Insn 24: point = 399
   Insn 23: point = 400
   Insn 22: point = 401
   Insn 21: point = 402
   Insn 20: point = 403
   Insn 19: point = 404
   Insn 18: point = 405
   Insn 17: point = 406
   Insn 16: point = 407
   Insn 15: point = 408
   Insn 14: point = 409
   Insn 13: point = 410
   Insn 12: point = 411
   Insn 11: point = 412
   Insn 10: point = 413
   Insn 6: point = 413
   Insn 5: point = 413
   Insn 4: point = 413
   Insn 3: point = 413
   Insn 2: point = 413
 r87: [4..5]
 r88: [389..390]
 r89: [386..388]
 r90: [384..385]
 r91: [382..383]
 r92: [368..381]
 r93: [377..378]
 r94: [374..376]
 r95: [372..373]
 r96: [370..371]
 r97: [368..369]
 r98: [336..367]
 r99: [363..364]
 r100: [361..362]
 r101: [358..360]
 r102: [356..357]
 r103: [354..355]
 r104: [338..353]
 r105: [349..350]
 r106: [347..348]
 r107: [344..346]
 r108: [342..343]
 r109: [340..341]
 r110: [338..339]
 r111: [336..337]
 r112: [334..335]
 r113: [328..329]
 r114: [325..327]
 r115: [323..324]
 r116: [321..322]
 r117: [305..320]
 r118: [316..317]
 r119: [314..315]
 r120: [311..313]
 r121: [309..310]
 r122: [307..308]
 r123: [304..306]
 r124: [298..299]
 r125: [295..297]
 r126: [293..294]
 r127: [291..292]
 r128: [277..290]
 r129: [286..287]
 r130: [283..285]
 r131: [281..282]
 r132: [279..280]
 r133: [277..278]
 r134: [245..276]
 r135: [272..273]
 r136: [270..271]
 r137: [267..269]
 r138: [265..266]
 r139: [263..264]
 r140: [247..262]
 r141: [258..259]
 r142: [256..257]
 r143: [253..255]
 r144: [251..252]
 r145: [249..250]
 r146: [247..248]
 r147: [245..246]
 r148: [243..244]
 r149: [237..238]
 r150: [234..236]
 r151: [232..233]
 r152: [230..231]
 r153: [214..229]
 r154: [225..226]
 r155: [223..224]
 r156: [220..222]
 r157: [218..219]
 r158: [216..217]
 r159: [213..215]
 r160: [207..208]
 r161: [204..206]
 r162: [202..203]
 r163: [200..201]
 r164: [186..199]
 r165: [195..196]
 r166: [192..194]
 r167: [190..191]
 r168: [188..189]
 r169: [186..187]
 r170: [154..185]
 r171: [181..182]
 r172: [179..180]
 r173: [176..178]
 r174: [174..175]
 r175: [172..173]
 r176: [156..171]
 r177: [167..168]
 r178: [165..166]
 r179: [162..164]
 r180: [160..161]
 r181: [158..159]
 r182: [156..157]
 r183: [154..155]
 r184: [152..153]
 r185: [146..147]
 r186: [143..145]
 r187: [141..142]
 r188: [139..140]
 r189: [123..138]
 r190: [134..135]
 r191: [132..133]
 r192: [129..131]
 r193: [127..128]
 r194: [125..126]
 r195: [122..124]
 r196: [108..109]
 r197: [105..107]
 r198: [89..104]
 r200: [95..96]
 r201: [91..94]
 r202: [89..90]
 r203: [85..86]
 r204: [83..84]
 r205: [80..82]
 r206: [64..79]
 r208: [70..71]
 r209: [66..69]
 r210: [64..65]
 r211: [52..53]
 r212: [49..51]
 r213: [33..48]
 r215: [39..40]
 r216: [35..38]
 r217: [33..34]
 r218: [29..30]
 r219: [27..28]
 r220: [24..26]
 r221: [8..23]
 r223: [14..15]
 r224: [10..13]
 r225: [8..9]
 r226: [2..3]
 r227: [0..1]
 r228: [411..412]
 r229: [409..410]
 r230: [407..408]
 r231: [405..406]
 r232: [403..404]
 r233: [401..402]
 r234: [399..400]
 r235: [397..398]
 r236: [395..396]
 r237: [393..394]
 r238: [6..7]
 r239: [391..392]
 r240: [386..387]
 r241: [379..380]
 r242: [374..375]
 r243: [365..366]
 r244: [358..359]
 r245: [351..352]
 r246: [344..345]
 r247: [332..333]
 r248: [330..331]
 r249: [325..326]
 r250: [318..319]
 r251: [311..312]
 r252: [302..303]
 r253: [300..301]
 r254: [295..296]
 r255: [288..289]
 r256: [283..284]
 r257: [274..275]
 r258: [267..268]
 r259: [260..261]
 r260: [253..254]
 r261: [241..242]
 r262: [239..240]
 r263: [234..235]
 r264: [227..228]
 r265: [220..221]
 r266: [211..212]
 r267: [209..210]
 r268: [204..205]
 r269: [197..198]
 r270: [192..193]
 r271: [183..184]
 r272: [176..177]
 r273: [169..170]
 r274: [162..163]
 r275: [150..151]
 r276: [148..149]
 r277: [143..144]
 r278: [136..137]
 r279: [129..130]
 r280: [120..121]
 r281: [116..117]
 r282: [118..119]
 r283: [112..113]
 r284: [114..115]
 r285: [110..111]
 r286: [105..106]
 r287: [99..100]
 r288: [87..88]
 r289: [80..81]
 r290: [74..75]
 r291: [60..61]
 r292: [62..63]
 r293: [56..57]
 r294: [58..59]
 r295: [54..55]
 r296: [49..50]
 r297: [43..44]
 r298: [31..32]
 r299: [24..25]
 r300: [18..19]
 r302: [102..103]
 r303: [97..98]
 r304: [91..92]
 r305: [77..78]
 r306: [72..73]
 r307: [66..67]
 r308: [46..47]
 r309: [41..42]
 r310: [35..36]
 r311: [21..22]
 r312: [16..17]
 r313: [10..11]
 r314: [12..20]
 r315: [37..45]
 r316: [68..76]
 r317: [93..101]
Compressing live ranges: from 413 to 368 - 89%
Ranges after the compression:
 r87: [4..5]
 r88: [344..345]
 r89: [342..343]
 r90: [340..341]
 r91: [338..339]
 r92: [326..337]
 r93: [334..335]
 r94: [332..333]
 r95: [330..331]
 r96: [328..329]
 r97: [326..327]
 r98: [298..325]
 r99: [322..323]
 r100: [320..321]
 r101: [318..319]
 r102: [316..317]
 r103: [314..315]
 r104: [300..313]
 r105: [310..311]
 r106: [308..309]
 r107: [306..307]
 r108: [304..305]
 r109: [302..303]
 r110: [300..301]
 r111: [298..299]
 r112: [296..297]
 r113: [290..291]
 r114: [288..289]
 r115: [286..287]
 r116: [284..285]
 r117: [270..283]
 r118: [280..281]
 r119: [278..279]
 r120: [276..277]
 r121: [274..275]
 r122: [272..273]
 r123: [270..271]
 r124: [264..265]
 r125: [262..263]
 r126: [260..261]
 r127: [258..259]
 r128: [246..257]
 r129: [254..255]
 r130: [252..253]
 r131: [250..251]
 r132: [248..249]
 r133: [246..247]
 r134: [218..245]
 r135: [242..243]
 r136: [240..241]
 r137: [238..239]
 r138: [236..237]
 r139: [234..235]
 r140: [220..233]
 r141: [230..231]
 r142: [228..229]
 r143: [226..227]
 r144: [224..225]
 r145: [222..223]
 r146: [220..221]
 r147: [218..219]
 r148: [216..217]
 r149: [210..211]
 r150: [208..209]
 r151: [206..207]
 r152: [204..205]
 r153: [190..203]
 r154: [200..201]
 r155: [198..199]
 r156: [196..197]
 r157: [194..195]
 r158: [192..193]
 r159: [190..191]
 r160: [184..185]
 r161: [182..183]
 r162: [180..181]
 r163: [178..179]
 r164: [166..177]
 r165: [174..175]
 r166: [172..173]
 r167: [170..171]
 r168: [168..169]
 r169: [166..167]
 r170: [138..165]
 r171: [162..163]
 r172: [160..161]
 r173: [158..159]
 r174: [156..157]
 r175: [154..155]
 r176: [140..153]
 r177: [150..151]
 r178: [148..149]
 r179: [146..147]
 r180: [144..145]
 r181: [142..143]
 r182: [140..141]
 r183: [138..139]
 r184: [136..137]
 r185: [130..131]
 r186: [128..129]
 r187: [126..127]
 r188: [124..125]
 r189: [110..123]
 r190: [120..121]
 r191: [118..119]
 r192: [116..117]
 r193: [114..115]
 r194: [112..113]
 r195: [110..111]
 r196: [96..97]
 r197: [94..95]
 r198: [80..93]
 r200: [86..87]
 r201: [82..85]
 r202: [80..81]
 r203: [76..77]
 r204: [74..75]
 r205: [72..73]
 r206: [58..71]
 r208: [64..65]
 r209: [60..63]
 r210: [58..59]
 r211: [46..47]
 r212: [44..45]
 r213: [30..43]
 r215: [36..37]
 r216: [32..35]
 r217: [30..31]
 r218: [26..27]
 r219: [24..25]
 r220: [22..23]
 r221: [8..21]
 r223: [14..15]
 r224: [10..13]
 r225: [8..9]
 r226: [2..3]
 r227: [0..1]
 r228: [366..367]
 r229: [364..365]
 r230: [362..363]
 r231: [360..361]
 r232: [358..359]
 r233: [356..357]
 r234: [354..355]
 r235: [352..353]
 r236: [350..351]
 r237: [348..349]
 r238: [6..7]
 r239: [346..347]
 r240: [342..343]
 r241: [336..337]
 r242: [332..333]
 r243: [324..325]
 r244: [318..319]
 r245: [312..313]
 r246: [306..307]
 r247: [294..295]
 r248: [292..293]
 r249: [288..289]
 r250: [282..283]
 r251: [276..277]
 r252: [268..269]
 r253: [266..267]
 r254: [262..263]
 r255: [256..257]
 r256: [252..253]
 r257: [244..245]
 r258: [238..239]
 r259: [232..233]
 r260: [226..227]
 r261: [214..215]
 r262: [212..213]
 r263: [208..209]
 r264: [202..203]
 r265: [196..197]
 r266: [188..189]
 r267: [186..187]
 r268: [182..183]
 r269: [176..177]
 r270: [172..173]
 r271: [164..165]
 r272: [158..159]
 r273: [152..153]
 r274: [146..147]
 r275: [134..135]
 r276: [132..133]
 r277: [128..129]
 r278: [122..123]
 r279: [116..117]
 r280: [108..109]
 r281: [104..105]
 r282: [106..107]
 r283: [100..101]
 r284: [102..103]
 r285: [98..99]
 r286: [94..95]
 r287: [90..91]
 r288: [78..79]
 r289: [72..73]
 r290: [68..69]
 r291: [54..55]
 r292: [56..57]
 r293: [50..51]
 r294: [52..53]
 r295: [48..49]
 r296: [44..45]
 r297: [40..41]
 r298: [28..29]
 r299: [22..23]
 r300: [18..19]
 r302: [92..93]
 r303: [88..89]
 r304: [82..83]
 r305: [70..71]
 r306: [66..67]
 r307: [60..61]
 r308: [42..43]
 r309: [38..39]
 r310: [32..33]
 r311: [20..21]
 r312: [16..17]
 r313: [10..11]
 r314: [12..19]
 r315: [34..41]
 r316: [62..69]
 r317: [84..91]

********** Assignment #1: **********

	 Assigning to 302 (cl=SSE_REGS, orig=199, freq=2, tfirst=302, tfreq=2)...
	   Assign 24 to reload r302 (freq=2)
	Hard reg 24 is preferable by r317 with profit 1
	Hard reg 24 is preferable by r304 with profit 1
	 Assigning to 304 (cl=SSE_REGS, orig=199, freq=2, tfirst=302, tfreq=2)...
	   Assign 24 to optional reload r304 (freq=2)
	Hard reg 24 is preferable by r317 with profit 2
	 Assigning to 317 (cl=SSE_REGS, orig=199, freq=2, tfirst=302, tfreq=2)...
	 Assigning to 305 (cl=SSE_REGS, orig=207, freq=2, tfirst=305, tfreq=2)...
	   Assign 25 to reload r305 (freq=2)
	Hard reg 25 is preferable by r316 with profit 1
	Hard reg 25 is preferable by r307 with profit 1
	 Assigning to 307 (cl=SSE_REGS, orig=207, freq=2, tfirst=305, tfreq=2)...
	   Assign 25 to optional reload r307 (freq=2)
	Hard reg 25 is preferable by r316 with profit 2
	 Assigning to 316 (cl=SSE_REGS, orig=207, freq=2, tfirst=305, tfreq=2)...
	 Assigning to 308 (cl=SSE_REGS, orig=214, freq=2, tfirst=308, tfreq=2)...
	   Assign 26 to reload r308 (freq=2)
	Hard reg 26 is preferable by r315 with profit 1
	Hard reg 26 is preferable by r310 with profit 1
	 Assigning to 310 (cl=SSE_REGS, orig=214, freq=2, tfirst=308, tfreq=2)...
	   Assign 26 to optional reload r310 (freq=2)
	Hard reg 26 is preferable by r315 with profit 2
	 Assigning to 315 (cl=SSE_REGS, orig=214, freq=2, tfirst=308, tfreq=2)...
	 Assigning to 311 (cl=SSE_REGS, orig=222, freq=2, tfirst=311, tfreq=2)...
	   Assign 27 to reload r311 (freq=2)
	Hard reg 27 is preferable by r314 with profit 1
	Hard reg 27 is preferable by r313 with profit 1
	 Assigning to 313 (cl=SSE_REGS, orig=222, freq=2, tfirst=311, tfreq=2)...
	   Assign 27 to optional reload r313 (freq=2)
	Hard reg 27 is preferable by r314 with profit 2
	 Assigning to 314 (cl=SSE_REGS, orig=222, freq=2, tfirst=311, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  305: r313:SF=r222:SF
      REG_DEAD r222:SF
   Insn after restoring regs:
  303: r222:SF=r311:SF
      REG_DEAD r311:SF
   Insn after restoring regs:
  302: r310:SF=r214:SF
      REG_DEAD r214:SF
   Insn after restoring regs:
  300: r214:SF=r308:SF
      REG_DEAD r308:SF
   Insn after restoring regs:
  299: r307:SF=r207:SF
      REG_DEAD r207:SF
   Insn after restoring regs:
  297: r207:SF=r305:SF
      REG_DEAD r305:SF
   Insn after restoring regs:
  296: r304:SF=r199:SF
      REG_DEAD r199:SF
   Insn after restoring regs:
  294: r199:SF=r302:SF
      REG_DEAD r302:SF
Remove optional reload reg 304
  Restoring original insn:
  226: r202:SF=r201:SF*r199:SF
      REG_DEAD r199:SF
      REG_DEAD r201:SF
  Deleting move 296
  296: r304:SF=r199:SF
      REG_DEAD r199:SF
deleting insn with uid = 296.
Remove optional reload reg 307
  Restoring original insn:
  240: r210:SF=r209:SF*r207:SF
      REG_DEAD r207:SF
      REG_DEAD r209:SF
  Deleting move 299
  299: r307:SF=r207:SF
      REG_DEAD r207:SF
deleting insn with uid = 299.
Remove optional reload reg 310
  Restoring original insn:
  259: r217:SF=r216:SF*r214:SF
      REG_DEAD r214:SF
      REG_DEAD r216:SF
  Deleting move 302
  302: r310:SF=r214:SF
      REG_DEAD r214:SF
deleting insn with uid = 302.
Remove optional reload reg 313
  Restoring original insn:
  273: r225:SF=r224:SF*r222:SF
      REG_DEAD r222:SF
      REG_DEAD r224:SF
  Deleting move 305
  305: r313:SF=r222:SF
      REG_DEAD r222:SF
deleting insn with uid = 305.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 273:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=318 from oldreg=222, assigning class SSE_REGS to r318
      Making reload reg 318 for reg 222 optional
  273: r225:SF=r224:SF*r318:SF
      REG_DEAD r222:SF
      REG_DEAD r224:SF
    Inserting insn reload before:
  310: r318:SF=r222:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 310:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 259:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=319 from oldreg=214, assigning class SSE_REGS to r319
      Making reload reg 319 for reg 214 optional
  259: r217:SF=r216:SF*r319:SF
      REG_DEAD r214:SF
      REG_DEAD r216:SF
    Inserting insn reload before:
  311: r319:SF=r214:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 311:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 240:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=320 from oldreg=207, assigning class SSE_REGS to r320
      Making reload reg 320 for reg 207 optional
  240: r210:SF=r209:SF*r320:SF
      REG_DEAD r207:SF
      REG_DEAD r209:SF
    Inserting insn reload before:
  312: r320:SF=r207:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 312:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 226:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=321 from oldreg=199, assigning class SSE_REGS to r321
      Making reload reg 321 for reg 199 optional
  226: r202:SF=r201:SF*r321:SF
      REG_DEAD r199:SF
      REG_DEAD r201:SF
    Inserting insn reload before:
  313: r321:SF=r199:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 313:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=322 from oldreg=222, assigning class SSE_REGS to inheritance r322
    Original reg change 222->322 (bb4):
  303: r322:SF=r311:SF
      REG_DEAD r311:SF
    Add original<-inheritance after:
  314: r222:SF=r322:SF

    Inheritance reuse change 222->322 (bb4):
  310: r318:SF=r322:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=323 from oldreg=214, assigning class SSE_REGS to inheritance r323
    Original reg change 214->323 (bb4):
  300: r323:SF=r308:SF
      REG_DEAD r308:SF
    Add original<-inheritance after:
  315: r214:SF=r323:SF

    Inheritance reuse change 214->323 (bb4):
  311: r319:SF=r323:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=324 from oldreg=207, assigning class SSE_REGS to inheritance r324
    Original reg change 207->324 (bb4):
  297: r324:SF=r305:SF
      REG_DEAD r305:SF
    Add original<-inheritance after:
  316: r207:SF=r324:SF

    Inheritance reuse change 207->324 (bb4):
  312: r320:SF=r324:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=325 from oldreg=199, assigning class SSE_REGS to inheritance r325
    Original reg change 199->325 (bb4):
  294: r325:SF=r302:SF
      REG_DEAD r302:SF
    Add original<-inheritance after:
  317: r199:SF=r325:SF

    Inheritance reuse change 199->325 (bb4):
  313: r321:SF=r325:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   314: r222:SF=r322:SF
deleting insn with uid = 314.
	    Removing dead insn:
   315: r214:SF=r323:SF
deleting insn with uid = 315.
	    Removing dead insn:
   316: r207:SF=r324:SF
deleting insn with uid = 316.
	    Removing dead insn:
   317: r199:SF=r325:SF
deleting insn with uid = 317.
EBB 5

********** Pseudo live ranges #2: **********

  BB 5
   Insn 289: point = 0
   Insn 288: point = 0
   Insn 284: point = 1
   Insn 281: point = 3
  BB 3
   Insn 36: point = 4
   Insn 35: point = 4
   Insn 34: point = 5
   Insn 33: point = 7
  BB 4
   Insn 291: point = 8
   Insn 275: point = 8
   Insn 274: point = 8
   Insn 273: point = 9
   Insn 310: point = 11
	   Creating copy r318<-r322@1
   Insn 272: point = 13
   Insn 271: point = 15
   Insn 270: point = 16
   Insn 304: point = 16
	Hard reg 21 is preferable by r312 with profit 1
   Insn 269: point = 17
	Hard reg 21 is preferable by r312 with profit 1
	Hard reg 0 is preferable by r312 with profit 1
   Insn 268: point = 19
   Insn 303: point = 20
	   Creating copy r311->r322@1
   Insn 267: point = 22
   Insn 266: point = 23
   Insn 265: point = 25
   Insn 264: point = 26
   Insn 263: point = 28
   Insn 262: point = 30
   Insn 261: point = 32
   Insn 260: point = 33
   Insn 259: point = 34
   Insn 311: point = 36
	   Creating copy r319<-r323@1
   Insn 258: point = 38
   Insn 257: point = 40
   Insn 256: point = 41
   Insn 301: point = 41
	Hard reg 21 is preferable by r309 with profit 1
   Insn 255: point = 42
	Hard reg 21 is preferable by r309 with profit 1
	Hard reg 0 is preferable by r309 with profit 1
   Insn 254: point = 44
   Insn 300: point = 45
	   Creating copy r308->r323@1
   Insn 253: point = 47
   Insn 252: point = 48
   Insn 251: point = 50
   Insn 250: point = 51
   Insn 249: point = 53
   Insn 248: point = 55
   Insn 247: point = 56
   Insn 246: point = 57
   Insn 245: point = 59
   Insn 244: point = 60
   Insn 243: point = 61
   Insn 242: point = 63
   Insn 241: point = 64
   Insn 240: point = 65
   Insn 312: point = 67
	   Creating copy r320<-r324@1
   Insn 239: point = 69
   Insn 238: point = 71
   Insn 237: point = 72
   Insn 298: point = 72
	Hard reg 21 is preferable by r306 with profit 1
   Insn 236: point = 73
	Hard reg 21 is preferable by r306 with profit 1
	Hard reg 0 is preferable by r306 with profit 1
   Insn 235: point = 75
   Insn 297: point = 76
	   Creating copy r305->r324@1
   Insn 234: point = 78
   Insn 233: point = 79
   Insn 232: point = 81
   Insn 231: point = 82
   Insn 230: point = 84
   Insn 229: point = 86
   Insn 228: point = 88
   Insn 227: point = 89
   Insn 226: point = 90
   Insn 313: point = 92
	   Creating copy r321<-r325@1
   Insn 225: point = 94
   Insn 224: point = 96
   Insn 223: point = 97
   Insn 295: point = 97
	Hard reg 21 is preferable by r303 with profit 1
   Insn 222: point = 98
	Hard reg 21 is preferable by r303 with profit 1
	Hard reg 0 is preferable by r303 with profit 1
   Insn 221: point = 100
   Insn 294: point = 101
	   Creating copy r302->r325@1
   Insn 220: point = 103
   Insn 219: point = 104
   Insn 218: point = 106
   Insn 217: point = 107
   Insn 216: point = 109
   Insn 215: point = 111
   Insn 214: point = 112
   Insn 213: point = 113
   Insn 212: point = 115
   Insn 211: point = 116
   Insn 210: point = 117
   Insn 209: point = 119
   Insn 208: point = 120
   Insn 207: point = 121
   Insn 206: point = 122
   Insn 205: point = 122
   Insn 204: point = 123
   Insn 203: point = 124
   Insn 202: point = 126
   Insn 201: point = 128
   Insn 200: point = 130
   Insn 199: point = 131
   Insn 198: point = 133
   Insn 197: point = 135
   Insn 196: point = 137
   Insn 195: point = 138
   Insn 194: point = 140
   Insn 193: point = 142
   Insn 192: point = 144
   Insn 191: point = 145
   Insn 190: point = 147
   Insn 189: point = 149
   Insn 188: point = 150
   Insn 187: point = 151
   Insn 186: point = 152
   Insn 185: point = 152
   Insn 184: point = 153
   Insn 183: point = 155
   Insn 182: point = 157
   Insn 181: point = 159
   Insn 180: point = 161
   Insn 179: point = 163
   Insn 178: point = 164
   Insn 177: point = 166
   Insn 176: point = 168
   Insn 175: point = 170
   Insn 174: point = 171
   Insn 173: point = 173
   Insn 172: point = 175
   Insn 171: point = 177
   Insn 170: point = 178
   Insn 169: point = 180
   Insn 168: point = 182
   Insn 167: point = 184
   Insn 166: point = 185
   Insn 165: point = 187
   Insn 164: point = 189
   Insn 163: point = 191
   Insn 162: point = 193
   Insn 161: point = 194
   Insn 160: point = 196
   Insn 159: point = 198
   Insn 158: point = 199
   Insn 157: point = 201
   Insn 156: point = 203
   Insn 155: point = 205
   Insn 154: point = 206
   Insn 153: point = 208
   Insn 152: point = 210
   Insn 151: point = 211
   Insn 150: point = 212
   Insn 149: point = 213
   Insn 148: point = 213
   Insn 147: point = 214
   Insn 146: point = 215
   Insn 145: point = 217
   Insn 144: point = 219
   Insn 143: point = 221
   Insn 142: point = 222
   Insn 141: point = 224
   Insn 140: point = 226
   Insn 139: point = 228
   Insn 138: point = 229
   Insn 137: point = 231
   Insn 136: point = 233
   Insn 135: point = 235
   Insn 134: point = 236
   Insn 133: point = 238
   Insn 132: point = 240
   Insn 131: point = 241
   Insn 130: point = 242
   Insn 129: point = 243
   Insn 128: point = 243
   Insn 127: point = 244
   Insn 126: point = 246
   Insn 125: point = 248
   Insn 124: point = 250
   Insn 123: point = 252
   Insn 122: point = 254
   Insn 121: point = 255
   Insn 120: point = 257
   Insn 119: point = 259
   Insn 118: point = 261
   Insn 117: point = 262
   Insn 116: point = 264
   Insn 115: point = 266
   Insn 114: point = 268
   Insn 113: point = 269
   Insn 112: point = 271
   Insn 111: point = 273
   Insn 110: point = 275
   Insn 109: point = 276
   Insn 108: point = 278
   Insn 107: point = 280
   Insn 106: point = 282
   Insn 105: point = 284
   Insn 104: point = 285
   Insn 103: point = 287
   Insn 102: point = 289
   Insn 101: point = 290
   Insn 100: point = 292
   Insn 99: point = 294
   Insn 98: point = 296
   Insn 97: point = 297
   Insn 96: point = 299
   Insn 95: point = 301
   Insn 94: point = 302
   Insn 93: point = 303
   Insn 92: point = 304
   Insn 91: point = 304
   Insn 90: point = 305
   Insn 89: point = 306
   Insn 88: point = 308
   Insn 87: point = 310
   Insn 86: point = 312
   Insn 85: point = 313
   Insn 84: point = 315
   Insn 83: point = 317
   Insn 82: point = 319
   Insn 81: point = 320
   Insn 80: point = 322
   Insn 79: point = 324
   Insn 78: point = 326
   Insn 77: point = 327
   Insn 76: point = 329
   Insn 75: point = 331
   Insn 74: point = 332
   Insn 73: point = 333
   Insn 72: point = 334
   Insn 71: point = 334
   Insn 70: point = 335
   Insn 69: point = 337
   Insn 68: point = 339
   Insn 67: point = 341
   Insn 66: point = 343
   Insn 65: point = 345
   Insn 64: point = 346
   Insn 63: point = 348
   Insn 62: point = 350
   Insn 61: point = 352
   Insn 60: point = 353
   Insn 59: point = 355
   Insn 58: point = 357
   Insn 57: point = 359
   Insn 56: point = 360
   Insn 55: point = 362
   Insn 54: point = 364
   Insn 53: point = 366
   Insn 52: point = 367
   Insn 51: point = 369
   Insn 50: point = 371
   Insn 49: point = 373
   Insn 48: point = 375
   Insn 47: point = 376
   Insn 46: point = 378
   Insn 45: point = 380
   Insn 44: point = 381
   Insn 43: point = 383
   Insn 42: point = 385
   Insn 41: point = 387
   Insn 40: point = 388
   Insn 39: point = 390
   Insn 38: point = 392
  BB 2
   Insn 31: point = 393
   Insn 30: point = 393
   Insn 29: point = 394
   Insn 28: point = 395
   Insn 27: point = 396
   Insn 26: point = 397
   Insn 25: point = 398
   Insn 24: point = 399
   Insn 23: point = 400
   Insn 22: point = 401
   Insn 21: point = 402
   Insn 20: point = 403
   Insn 19: point = 404
   Insn 18: point = 405
   Insn 17: point = 406
   Insn 16: point = 407
   Insn 15: point = 408
   Insn 14: point = 409
   Insn 13: point = 410
   Insn 12: point = 411
   Insn 11: point = 412
   Insn 10: point = 413
   Insn 6: point = 413
   Insn 5: point = 413
   Insn 4: point = 413
   Insn 3: point = 413
   Insn 2: point = 413
 r87: [4..5]
 r88: [389..390]
 r89: [386..388]
 r90: [384..385]
 r91: [382..383]
 r92: [368..381]
 r93: [377..378]
 r94: [374..376]
 r95: [372..373]
 r96: [370..371]
 r97: [368..369]
 r98: [336..367]
 r99: [363..364]
 r100: [361..362]
 r101: [358..360]
 r102: [356..357]
 r103: [354..355]
 r104: [338..353]
 r105: [349..350]
 r106: [347..348]
 r107: [344..346]
 r108: [342..343]
 r109: [340..341]
 r110: [338..339]
 r111: [336..337]
 r112: [334..335]
 r113: [328..329]
 r114: [325..327]
 r115: [323..324]
 r116: [321..322]
 r117: [305..320]
 r118: [316..317]
 r119: [314..315]
 r120: [311..313]
 r121: [309..310]
 r122: [307..308]
 r123: [304..306]
 r124: [298..299]
 r125: [295..297]
 r126: [293..294]
 r127: [291..292]
 r128: [277..290]
 r129: [286..287]
 r130: [283..285]
 r131: [281..282]
 r132: [279..280]
 r133: [277..278]
 r134: [245..276]
 r135: [272..273]
 r136: [270..271]
 r137: [267..269]
 r138: [265..266]
 r139: [263..264]
 r140: [247..262]
 r141: [258..259]
 r142: [256..257]
 r143: [253..255]
 r144: [251..252]
 r145: [249..250]
 r146: [247..248]
 r147: [245..246]
 r148: [243..244]
 r149: [237..238]
 r150: [234..236]
 r151: [232..233]
 r152: [230..231]
 r153: [214..229]
 r154: [225..226]
 r155: [223..224]
 r156: [220..222]
 r157: [218..219]
 r158: [216..217]
 r159: [213..215]
 r160: [207..208]
 r161: [204..206]
 r162: [202..203]
 r163: [200..201]
 r164: [186..199]
 r165: [195..196]
 r166: [192..194]
 r167: [190..191]
 r168: [188..189]
 r169: [186..187]
 r170: [154..185]
 r171: [181..182]
 r172: [179..180]
 r173: [176..178]
 r174: [174..175]
 r175: [172..173]
 r176: [156..171]
 r177: [167..168]
 r178: [165..166]
 r179: [162..164]
 r180: [160..161]
 r181: [158..159]
 r182: [156..157]
 r183: [154..155]
 r184: [152..153]
 r185: [146..147]
 r186: [143..145]
 r187: [141..142]
 r188: [139..140]
 r189: [123..138]
 r190: [134..135]
 r191: [132..133]
 r192: [129..131]
 r193: [127..128]
 r194: [125..126]
 r195: [122..124]
 r196: [108..109]
 r197: [105..107]
 r198: [89..104]
 r200: [95..96]
 r201: [91..94]
 r202: [89..90]
 r203: [85..86]
 r204: [83..84]
 r205: [80..82]
 r206: [64..79]
 r208: [70..71]
 r209: [66..69]
 r210: [64..65]
 r211: [52..53]
 r212: [49..51]
 r213: [33..48]
 r215: [39..40]
 r216: [35..38]
 r217: [33..34]
 r218: [29..30]
 r219: [27..28]
 r220: [24..26]
 r221: [8..23]
 r223: [14..15]
 r224: [10..13]
 r225: [8..9]
 r226: [2..3]
 r227: [0..1]
 r228: [411..412]
 r229: [409..410]
 r230: [407..408]
 r231: [405..406]
 r232: [403..404]
 r233: [401..402]
 r234: [399..400]
 r235: [397..398]
 r236: [395..396]
 r237: [393..394]
 r238: [6..7]
 r239: [391..392]
 r240: [386..387]
 r241: [379..380]
 r242: [374..375]
 r243: [365..366]
 r244: [358..359]
 r245: [351..352]
 r246: [344..345]
 r247: [332..333]
 r248: [330..331]
 r249: [325..326]
 r250: [318..319]
 r251: [311..312]
 r252: [302..303]
 r253: [300..301]
 r254: [295..296]
 r255: [288..289]
 r256: [283..284]
 r257: [274..275]
 r258: [267..268]
 r259: [260..261]
 r260: [253..254]
 r261: [241..242]
 r262: [239..240]
 r263: [234..235]
 r264: [227..228]
 r265: [220..221]
 r266: [211..212]
 r267: [209..210]
 r268: [204..205]
 r269: [197..198]
 r270: [192..193]
 r271: [183..184]
 r272: [176..177]
 r273: [169..170]
 r274: [162..163]
 r275: [150..151]
 r276: [148..149]
 r277: [143..144]
 r278: [136..137]
 r279: [129..130]
 r280: [120..121]
 r281: [116..117]
 r282: [118..119]
 r283: [112..113]
 r284: [114..115]
 r285: [110..111]
 r286: [105..106]
 r287: [99..100]
 r288: [87..88]
 r289: [80..81]
 r290: [74..75]
 r291: [60..61]
 r292: [62..63]
 r293: [56..57]
 r294: [58..59]
 r295: [54..55]
 r296: [49..50]
 r297: [43..44]
 r298: [31..32]
 r299: [24..25]
 r300: [18..19]
 r302: [102..103]
 r303: [97..98]
 r305: [77..78]
 r306: [72..73]
 r308: [46..47]
 r309: [41..42]
 r311: [21..22]
 r312: [16..17]
 r318: [10..11]
 r319: [35..36]
 r320: [66..67]
 r321: [91..92]
 r322: [12..20]
 r323: [37..45]
 r324: [68..76]
 r325: [93..101]
Compressing live ranges: from 413 to 368 - 89%
Ranges after the compression:
 r87: [4..5]
 r88: [344..345]
 r89: [342..343]
 r90: [340..341]
 r91: [338..339]
 r92: [326..337]
 r93: [334..335]
 r94: [332..333]
 r95: [330..331]
 r96: [328..329]
 r97: [326..327]
 r98: [298..325]
 r99: [322..323]
 r100: [320..321]
 r101: [318..319]
 r102: [316..317]
 r103: [314..315]
 r104: [300..313]
 r105: [310..311]
 r106: [308..309]
 r107: [306..307]
 r108: [304..305]
 r109: [302..303]
 r110: [300..301]
 r111: [298..299]
 r112: [296..297]
 r113: [290..291]
 r114: [288..289]
 r115: [286..287]
 r116: [284..285]
 r117: [270..283]
 r118: [280..281]
 r119: [278..279]
 r120: [276..277]
 r121: [274..275]
 r122: [272..273]
 r123: [270..271]
 r124: [264..265]
 r125: [262..263]
 r126: [260..261]
 r127: [258..259]
 r128: [246..257]
 r129: [254..255]
 r130: [252..253]
 r131: [250..251]
 r132: [248..249]
 r133: [246..247]
 r134: [218..245]
 r135: [242..243]
 r136: [240..241]
 r137: [238..239]
 r138: [236..237]
 r139: [234..235]
 r140: [220..233]
 r141: [230..231]
 r142: [228..229]
 r143: [226..227]
 r144: [224..225]
 r145: [222..223]
 r146: [220..221]
 r147: [218..219]
 r148: [216..217]
 r149: [210..211]
 r150: [208..209]
 r151: [206..207]
 r152: [204..205]
 r153: [190..203]
 r154: [200..201]
 r155: [198..199]
 r156: [196..197]
 r157: [194..195]
 r158: [192..193]
 r159: [190..191]
 r160: [184..185]
 r161: [182..183]
 r162: [180..181]
 r163: [178..179]
 r164: [166..177]
 r165: [174..175]
 r166: [172..173]
 r167: [170..171]
 r168: [168..169]
 r169: [166..167]
 r170: [138..165]
 r171: [162..163]
 r172: [160..161]
 r173: [158..159]
 r174: [156..157]
 r175: [154..155]
 r176: [140..153]
 r177: [150..151]
 r178: [148..149]
 r179: [146..147]
 r180: [144..145]
 r181: [142..143]
 r182: [140..141]
 r183: [138..139]
 r184: [136..137]
 r185: [130..131]
 r186: [128..129]
 r187: [126..127]
 r188: [124..125]
 r189: [110..123]
 r190: [120..121]
 r191: [118..119]
 r192: [116..117]
 r193: [114..115]
 r194: [112..113]
 r195: [110..111]
 r196: [96..97]
 r197: [94..95]
 r198: [80..93]
 r200: [86..87]
 r201: [82..85]
 r202: [80..81]
 r203: [76..77]
 r204: [74..75]
 r205: [72..73]
 r206: [58..71]
 r208: [64..65]
 r209: [60..63]
 r210: [58..59]
 r211: [46..47]
 r212: [44..45]
 r213: [30..43]
 r215: [36..37]
 r216: [32..35]
 r217: [30..31]
 r218: [26..27]
 r219: [24..25]
 r220: [22..23]
 r221: [8..21]
 r223: [14..15]
 r224: [10..13]
 r225: [8..9]
 r226: [2..3]
 r227: [0..1]
 r228: [366..367]
 r229: [364..365]
 r230: [362..363]
 r231: [360..361]
 r232: [358..359]
 r233: [356..357]
 r234: [354..355]
 r235: [352..353]
 r236: [350..351]
 r237: [348..349]
 r238: [6..7]
 r239: [346..347]
 r240: [342..343]
 r241: [336..337]
 r242: [332..333]
 r243: [324..325]
 r244: [318..319]
 r245: [312..313]
 r246: [306..307]
 r247: [294..295]
 r248: [292..293]
 r249: [288..289]
 r250: [282..283]
 r251: [276..277]
 r252: [268..269]
 r253: [266..267]
 r254: [262..263]
 r255: [256..257]
 r256: [252..253]
 r257: [244..245]
 r258: [238..239]
 r259: [232..233]
 r260: [226..227]
 r261: [214..215]
 r262: [212..213]
 r263: [208..209]
 r264: [202..203]
 r265: [196..197]
 r266: [188..189]
 r267: [186..187]
 r268: [182..183]
 r269: [176..177]
 r270: [172..173]
 r271: [164..165]
 r272: [158..159]
 r273: [152..153]
 r274: [146..147]
 r275: [134..135]
 r276: [132..133]
 r277: [128..129]
 r278: [122..123]
 r279: [116..117]
 r280: [108..109]
 r281: [104..105]
 r282: [106..107]
 r283: [100..101]
 r284: [102..103]
 r285: [98..99]
 r286: [94..95]
 r287: [90..91]
 r288: [78..79]
 r289: [72..73]
 r290: [68..69]
 r291: [54..55]
 r292: [56..57]
 r293: [50..51]
 r294: [52..53]
 r295: [48..49]
 r296: [44..45]
 r297: [40..41]
 r298: [28..29]
 r299: [22..23]
 r300: [18..19]
 r302: [92..93]
 r303: [88..89]
 r305: [70..71]
 r306: [66..67]
 r308: [42..43]
 r309: [38..39]
 r311: [20..21]
 r312: [16..17]
 r318: [10..11]
 r319: [32..33]
 r320: [60..61]
 r321: [82..83]
 r322: [12..19]
 r323: [34..41]
 r324: [62..69]
 r325: [84..91]

********** Assignment #2: **********

	 Assigning to 318 (cl=SSE_REGS, orig=222, freq=2, tfirst=318, tfreq=2)...
	   Assign 28 to optional reload r318 (freq=2)
	Hard reg 28 is preferable by r322 with profit 1
	 Assigning to 322 (cl=SSE_REGS, orig=222, freq=2, tfirst=318, tfreq=2)...
	 Assigning to 319 (cl=SSE_REGS, orig=214, freq=2, tfirst=319, tfreq=2)...
	   Assign 24 to optional reload r319 (freq=2)
	Hard reg 24 is preferable by r323 with profit 1
	 Assigning to 323 (cl=SSE_REGS, orig=214, freq=2, tfirst=319, tfreq=2)...
	 Assigning to 320 (cl=SSE_REGS, orig=207, freq=2, tfirst=320, tfreq=2)...
	   Assign 25 to optional reload r320 (freq=2)
	Hard reg 25 is preferable by r324 with profit 1
	 Assigning to 324 (cl=SSE_REGS, orig=207, freq=2, tfirst=320, tfreq=2)...
	 Assigning to 321 (cl=SSE_REGS, orig=199, freq=2, tfirst=321, tfreq=2)...
	   Assign 26 to optional reload r321 (freq=2)
	Hard reg 26 is preferable by r325 with profit 1
	 Assigning to 325 (cl=SSE_REGS, orig=199, freq=2, tfirst=321, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  310: r318:SF=r222:SF
      REG_DEAD r222:SF
   Insn after restoring regs:
  303: r222:SF=r311:SF
      REG_DEAD r311:SF
   Insn after restoring regs:
  311: r319:SF=r214:SF
      REG_DEAD r214:SF
   Insn after restoring regs:
  300: r214:SF=r308:SF
      REG_DEAD r308:SF
   Insn after restoring regs:
  312: r320:SF=r207:SF
      REG_DEAD r207:SF
   Insn after restoring regs:
  297: r207:SF=r305:SF
      REG_DEAD r305:SF
   Insn after restoring regs:
  313: r321:SF=r199:SF
      REG_DEAD r199:SF
   Insn after restoring regs:
  294: r199:SF=r302:SF
      REG_DEAD r302:SF
Keep optional reload reg 304
Keep optional reload reg 307
Keep optional reload reg 310
Keep optional reload reg 313
Remove optional reload reg 318
  Restoring original insn:
  273: r225:SF=r224:SF*r222:SF
      REG_DEAD r222:SF
      REG_DEAD r224:SF
  Deleting move 310
  310: r318:SF=r222:SF
      REG_DEAD r222:SF
deleting insn with uid = 310.
Remove optional reload reg 319
  Restoring original insn:
  259: r217:SF=r216:SF*r214:SF
      REG_DEAD r214:SF
      REG_DEAD r216:SF
  Deleting move 311
  311: r319:SF=r214:SF
      REG_DEAD r214:SF
deleting insn with uid = 311.
Remove optional reload reg 320
  Restoring original insn:
  240: r210:SF=r209:SF*r207:SF
      REG_DEAD r207:SF
      REG_DEAD r209:SF
  Deleting move 312
  312: r320:SF=r207:SF
      REG_DEAD r207:SF
deleting insn with uid = 312.
Remove optional reload reg 321
  Restoring original insn:
  226: r202:SF=r201:SF*r199:SF
      REG_DEAD r199:SF
      REG_DEAD r201:SF
  Deleting move 313
  313: r321:SF=r199:SF
      REG_DEAD r199:SF
deleting insn with uid = 313.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 273:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 259:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 240:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 226:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 5
   Insn 289: point = 0
   Insn 288: point = 0
   Insn 284: point = 1
   Insn 281: point = 3
  BB 3
   Insn 36: point = 4
   Insn 35: point = 4
   Insn 34: point = 5
   Insn 33: point = 7
  BB 4
   Insn 291: point = 8
   Insn 275: point = 8
   Insn 274: point = 8
   Insn 273: point = 9
   Insn 272: point = 11
   Insn 271: point = 13
   Insn 270: point = 14
   Insn 304: point = 14
   Insn 269: point = 15
   Insn 268: point = 17
   Insn 303: point = 18
   Insn 267: point = 20
   Insn 266: point = 21
   Insn 265: point = 23
   Insn 264: point = 24
   Insn 263: point = 26
   Insn 262: point = 28
   Insn 261: point = 30
   Insn 260: point = 31
   Insn 259: point = 32
   Insn 258: point = 34
   Insn 257: point = 36
   Insn 256: point = 37
   Insn 301: point = 37
   Insn 255: point = 38
   Insn 254: point = 40
   Insn 300: point = 41
   Insn 253: point = 43
   Insn 252: point = 44
   Insn 251: point = 46
   Insn 250: point = 47
   Insn 249: point = 49
   Insn 248: point = 51
   Insn 247: point = 52
   Insn 246: point = 53
   Insn 245: point = 55
   Insn 244: point = 56
   Insn 243: point = 57
   Insn 242: point = 59
   Insn 241: point = 60
   Insn 240: point = 61
   Insn 239: point = 63
   Insn 238: point = 65
   Insn 237: point = 66
   Insn 298: point = 66
   Insn 236: point = 67
   Insn 235: point = 69
   Insn 297: point = 70
   Insn 234: point = 72
   Insn 233: point = 73
   Insn 232: point = 75
   Insn 231: point = 76
   Insn 230: point = 78
   Insn 229: point = 80
   Insn 228: point = 82
   Insn 227: point = 83
   Insn 226: point = 84
   Insn 225: point = 86
   Insn 224: point = 88
   Insn 223: point = 89
   Insn 295: point = 89
   Insn 222: point = 90
   Insn 221: point = 92
   Insn 294: point = 93
   Insn 220: point = 95
   Insn 219: point = 96
   Insn 218: point = 98
   Insn 217: point = 99
   Insn 216: point = 101
   Insn 215: point = 103
   Insn 214: point = 104
   Insn 213: point = 105
   Insn 212: point = 107
   Insn 211: point = 108
   Insn 210: point = 109
   Insn 209: point = 111
   Insn 208: point = 112
   Insn 207: point = 113
   Insn 206: point = 114
   Insn 205: point = 114
   Insn 204: point = 115
   Insn 203: point = 116
   Insn 202: point = 118
   Insn 201: point = 120
   Insn 200: point = 122
   Insn 199: point = 123
   Insn 198: point = 125
   Insn 197: point = 127
   Insn 196: point = 129
   Insn 195: point = 130
   Insn 194: point = 132
   Insn 193: point = 134
   Insn 192: point = 136
   Insn 191: point = 137
   Insn 190: point = 139
   Insn 189: point = 141
   Insn 188: point = 142
   Insn 187: point = 143
   Insn 186: point = 144
   Insn 185: point = 144
   Insn 184: point = 145
   Insn 183: point = 147
   Insn 182: point = 149
   Insn 181: point = 151
   Insn 180: point = 153
   Insn 179: point = 155
   Insn 178: point = 156
   Insn 177: point = 158
   Insn 176: point = 160
   Insn 175: point = 162
   Insn 174: point = 163
   Insn 173: point = 165
   Insn 172: point = 167
   Insn 171: point = 169
   Insn 170: point = 170
   Insn 169: point = 172
   Insn 168: point = 174
   Insn 167: point = 176
   Insn 166: point = 177
   Insn 165: point = 179
   Insn 164: point = 181
   Insn 163: point = 183
   Insn 162: point = 185
   Insn 161: point = 186
   Insn 160: point = 188
   Insn 159: point = 190
   Insn 158: point = 191
   Insn 157: point = 193
   Insn 156: point = 195
   Insn 155: point = 197
   Insn 154: point = 198
   Insn 153: point = 200
   Insn 152: point = 202
   Insn 151: point = 203
   Insn 150: point = 204
   Insn 149: point = 205
   Insn 148: point = 205
   Insn 147: point = 206
   Insn 146: point = 207
   Insn 145: point = 209
   Insn 144: point = 211
   Insn 143: point = 213
   Insn 142: point = 214
   Insn 141: point = 216
   Insn 140: point = 218
   Insn 139: point = 220
   Insn 138: point = 221
   Insn 137: point = 223
   Insn 136: point = 225
   Insn 135: point = 227
   Insn 134: point = 228
   Insn 133: point = 230
   Insn 132: point = 232
   Insn 131: point = 233
   Insn 130: point = 234
   Insn 129: point = 235
   Insn 128: point = 235
   Insn 127: point = 236
   Insn 126: point = 238
   Insn 125: point = 240
   Insn 124: point = 242
   Insn 123: point = 244
   Insn 122: point = 246
   Insn 121: point = 247
   Insn 120: point = 249
   Insn 119: point = 251
   Insn 118: point = 253
   Insn 117: point = 254
   Insn 116: point = 256
   Insn 115: point = 258
   Insn 114: point = 260
   Insn 113: point = 261
   Insn 112: point = 263
   Insn 111: point = 265
   Insn 110: point = 267
   Insn 109: point = 268
   Insn 108: point = 270
   Insn 107: point = 272
   Insn 106: point = 274
   Insn 105: point = 276
   Insn 104: point = 277
   Insn 103: point = 279
   Insn 102: point = 281
   Insn 101: point = 282
   Insn 100: point = 284
   Insn 99: point = 286
   Insn 98: point = 288
   Insn 97: point = 289
   Insn 96: point = 291
   Insn 95: point = 293
   Insn 94: point = 294
   Insn 93: point = 295
   Insn 92: point = 296
   Insn 91: point = 296
   Insn 90: point = 297
   Insn 89: point = 298
   Insn 88: point = 300
   Insn 87: point = 302
   Insn 86: point = 304
   Insn 85: point = 305
   Insn 84: point = 307
   Insn 83: point = 309
   Insn 82: point = 311
   Insn 81: point = 312
   Insn 80: point = 314
   Insn 79: point = 316
   Insn 78: point = 318
   Insn 77: point = 319
   Insn 76: point = 321
   Insn 75: point = 323
   Insn 74: point = 324
   Insn 73: point = 325
   Insn 72: point = 326
   Insn 71: point = 326
   Insn 70: point = 327
   Insn 69: point = 329
   Insn 68: point = 331
   Insn 67: point = 333
   Insn 66: point = 335
   Insn 65: point = 337
   Insn 64: point = 338
   Insn 63: point = 340
   Insn 62: point = 342
   Insn 61: point = 344
   Insn 60: point = 345
   Insn 59: point = 347
   Insn 58: point = 349
   Insn 57: point = 351
   Insn 56: point = 352
   Insn 55: point = 354
   Insn 54: point = 356
   Insn 53: point = 358
   Insn 52: point = 359
   Insn 51: point = 361
   Insn 50: point = 363
   Insn 49: point = 365
   Insn 48: point = 367
   Insn 47: point = 368
   Insn 46: point = 370
   Insn 45: point = 372
   Insn 44: point = 373
   Insn 43: point = 375
   Insn 42: point = 377
   Insn 41: point = 379
   Insn 40: point = 380
   Insn 39: point = 382
   Insn 38: point = 384
  BB 2
   Insn 31: point = 385
   Insn 30: point = 385
   Insn 29: point = 386
   Insn 28: point = 387
   Insn 27: point = 388
   Insn 26: point = 389
   Insn 25: point = 390
   Insn 24: point = 391
   Insn 23: point = 392
   Insn 22: point = 393
   Insn 21: point = 394
   Insn 20: point = 395
   Insn 19: point = 396
   Insn 18: point = 397
   Insn 17: point = 398
   Insn 16: point = 399
   Insn 15: point = 400
   Insn 14: point = 401
   Insn 13: point = 402
   Insn 12: point = 403
   Insn 11: point = 404
   Insn 10: point = 405
   Insn 6: point = 405
   Insn 5: point = 405
   Insn 4: point = 405
   Insn 3: point = 405
   Insn 2: point = 405
 r199: [85..93]
 r207: [62..70]
 r214: [33..41]
 r222: [10..18]
 r303: [89..90]
 r306: [66..67]
 r309: [37..38]
 r312: [14..15]
Compressing live ranges: from 405 to 8 - 1%
Ranges after the compression:
 r199: [6..7]
 r207: [4..5]
 r214: [2..3]
 r222: [0..1]
 r303: [6..7]
 r306: [4..5]
 r309: [2..3]
 r312: [0..1]
  Slot 0 regnos (width = 4):	 199	 222	 214	 207
  Slot 1 regnos (width = 8):	 303	 312	 309	 306
Changing spilled pseudos to memory in insn #294
Changing spilled pseudos to memory in insn #222
Changing spilled pseudos to memory in insn #295
Changing spilled pseudos to memory in insn #226
Changing spilled pseudos to memory in insn #297
Changing spilled pseudos to memory in insn #236
Changing spilled pseudos to memory in insn #298
Changing spilled pseudos to memory in insn #240
Changing spilled pseudos to memory in insn #300
Changing spilled pseudos to memory in insn #255
Changing spilled pseudos to memory in insn #301
Changing spilled pseudos to memory in insn #259
Changing spilled pseudos to memory in insn #303
Changing spilled pseudos to memory in insn #269
Changing spilled pseudos to memory in insn #304
Changing spilled pseudos to memory in insn #273
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #273
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #304
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 304:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 269:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #303
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 303:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #259
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #301
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 301:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 255:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #300
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 300:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #240
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #298
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 298:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 236:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #297
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 297:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #226
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #295
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 295:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 222:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #294
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 294:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 52
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 90
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 109
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 147
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 148
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 166
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 193
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 204
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 205
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 219
changing reg in insn 219
changing reg in insn 219
changing reg in insn 227
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 231
changing reg in insn 231
changing reg in insn 233
changing reg in insn 233
changing reg in insn 233
changing reg in insn 241
changing reg in insn 238
changing reg in insn 239
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 252
changing reg in insn 252
changing reg in insn 252
changing reg in insn 260
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 259
changing reg in insn 260
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 266
changing reg in insn 266
changing reg in insn 266
changing reg in insn 274
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 274
changing reg in insn 281
changing reg in insn 284
changing reg in insn 284
changing reg in insn 288
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 53
changing reg in insn 54
changing reg in insn 57
changing reg in insn 61
changing reg in insn 62
changing reg in insn 65
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 102
changing reg in insn 103
changing reg in insn 105
changing reg in insn 110
changing reg in insn 111
changing reg in insn 114
changing reg in insn 118
changing reg in insn 119
changing reg in insn 122
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 139
changing reg in insn 140
changing reg in insn 143
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 159
changing reg in insn 160
changing reg in insn 162
changing reg in insn 167
changing reg in insn 168
changing reg in insn 171
changing reg in insn 175
changing reg in insn 176
changing reg in insn 179
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 192
changing reg in insn 196
changing reg in insn 197
changing reg in insn 200
changing reg in insn 207
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 209
changing reg in insn 210
changing reg in insn 213
changing reg in insn 214
changing reg in insn 212
changing reg in insn 213
changing reg in insn 215
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 221
changing reg in insn 222
changing reg in insn 228
changing reg in insn 229
changing reg in insn 232
changing reg in insn 233
changing reg in insn 235
changing reg in insn 236
changing reg in insn 243
changing reg in insn 244
changing reg in insn 242
changing reg in insn 243
changing reg in insn 246
changing reg in insn 247
changing reg in insn 245
changing reg in insn 246
changing reg in insn 248
changing reg in insn 249
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 255
changing reg in insn 261
changing reg in insn 262
changing reg in insn 265
changing reg in insn 266
changing reg in insn 268
changing reg in insn 269
deleting insn with uid = 71.
deleting insn with uid = 90.
deleting insn with uid = 91.
deleting insn with uid = 128.
deleting insn with uid = 147.
deleting insn with uid = 148.
deleting insn with uid = 185.
deleting insn with uid = 204.
deleting insn with uid = 205.
deleting insn with uid = 224.
deleting insn with uid = 238.
deleting insn with uid = 257.
deleting insn with uid = 271.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 129.
verify found no changes in insn with uid = 149.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 206.
verify found no changes in insn with uid = 223.
verify found no changes in insn with uid = 237.
verify found no changes in insn with uid = 256.
verify found no changes in insn with uid = 270.


int quality(float*, float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8]
;;  ref usage 	r0={121d,111u} r1={33d,23u,22e} r2={11d,1u} r3={4d,4u} r4={11d,1u} r5={11d,1u} r6={1d,112u} r7={1d,15u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={67d,1u} r18={10d} r19={10d} r20={1d,1u,22e} r21={74d,73u} r22={20d,9u} r23={14d,3u} r24={12d,1u} r25={12d,1u} r26={12d,1u} r27={12d,1u} r28={11d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d,1u} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} 
;;    total ref usage 1414{1010d,360u,44e} in 269{259 regular + 10 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 228 229 230 231 232 233 234 235 236 237
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
        (reg:DI 1 dx [ scratch ])) preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 procpar_info+0 S8 A64])
        (reg:DI 2 cx [ procpar_info ])) preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 preprocess+0 S8 A64])
        (reg:DI 37 r8 [ preprocess ])) preproc.cpp:378 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:380 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 21 xmm0 [228])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 21 xmm0 [228])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DF 21 xmm0 [229])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [229])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DF 21 xmm0 [230])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [230])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DF 21 xmm0 [231])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [231])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DF 21 xmm0 [232])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])
        (reg:DF 21 xmm0 [232])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DF 21 xmm0 [233])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [233])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DF 21 xmm0 [234])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [234])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DF 21 xmm0 [235])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [235])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DF 21 xmm0 [236])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:383 128 {*movdf_internal}
     (nil))
(insn 28 27 29 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 21 xmm0 [236])) preproc.cpp:383 128 {*movdf_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DF 21 xmm0 [237])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:383 128 {*movdf_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 21 xmm0 [237])) preproc.cpp:383 128 {*movdf_internal}
     (nil))
(insn 31 30 276 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:385 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 238
(code_label 276 31 32 3 74 "" [1 uses])
(note 32 276 33 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 3 (set (reg/f:DI 0 ax [238])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 procpar_info+0 S8 A64])) preproc.cpp:385 89 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:SI 0 ax [orig:87 D.6910 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [238])
                (const_int 300 [0x12c])) [0 procpar_info_16(D)->num_points+0 S4 A32])) preproc.cpp:385 90 {*movsi_internal}
     (nil))
(insn 35 34 36 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.6910 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32]))) preproc.cpp:385 7 {*cmpsi_1}
     (nil))
(jump_insn 36 35 37 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 279)
            (pc))) preproc.cpp:385 612 {*jcc_1}
     (nil)
 -> 279)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300
(note 37 36 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 4 (set (reg:SI 0 ax [239])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:387 90 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:DI 0 ax [orig:88 D.6911 ] [88])
        (sign_extend:DI (reg:SI 0 ax [239]))) preproc.cpp:387 142 {*extendsidi2_rex64}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg:DI 1 dx [orig:89 D.6911 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.6911 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:387 512 {*ashldi3_1}
     (nil))
(insn 41 40 42 4 (set (reg/f:DI 0 ax [240])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:387 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.6912 ] [90])
                (plus:DI (reg/f:DI 0 ax [240])
                    (reg:DI 1 dx [orig:89 D.6911 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:387 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.6911 ] [89]))
        (nil)))
(insn 43 42 44 4 (set (reg:SF 21 xmm0 [orig:91 D.6913 ] [91])
        (mem:SF (reg/f:DI 0 ax [orig:90 D.6912 ] [90]) [0 *_21+0 S4 A32])) preproc.cpp:387 129 {*movsf_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DF 22 xmm1 [orig:92 D.6914 ] [92])
        (float_extend:DF (reg:SF 21 xmm0 [orig:91 D.6913 ] [91]))) preproc.cpp:387 152 {*extendsfdf2_sse}
     (nil))
(insn 45 44 46 4 (set (reg:SI 0 ax [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:387 90 {*movsi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:DI 0 ax [orig:93 D.6911 ] [93])
        (sign_extend:DI (reg:SI 0 ax [241]))) preproc.cpp:387 142 {*extendsidi2_rex64}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg:DI 1 dx [orig:94 D.6911 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.6911 ] [93])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:387 512 {*ashldi3_1}
     (nil))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [242])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:387 89 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.6912 ] [95])
                (plus:DI (reg/f:DI 0 ax [242])
                    (reg:DI 1 dx [orig:94 D.6911 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:387 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.6911 ] [94]))
        (nil)))
(insn 50 49 51 4 (set (reg:SF 21 xmm0 [orig:96 D.6913 ] [96])
        (mem:SF (reg/f:DI 0 ax [orig:95 D.6912 ] [95]) [0 *_26+0 S4 A32])) preproc.cpp:387 129 {*movsf_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DF 21 xmm0 [orig:97 D.6914 ] [97])
        (float_extend:DF (reg:SF 21 xmm0 [orig:96 D.6913 ] [96]))) preproc.cpp:387 152 {*extendsfdf2_sse}
     (nil))
(insn 52 51 53 4 (set (reg:DF 22 xmm1 [orig:98 D.6914 ] [98])
        (mult:DF (reg:DF 22 xmm1 [orig:92 D.6914 ] [92])
            (reg:DF 21 xmm0 [orig:97 D.6914 ] [97]))) preproc.cpp:387 798 {*fop_df_comm_sse}
     (nil))
(insn 53 52 54 4 (set (reg:SI 0 ax [243])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:388 90 {*movsi_internal}
     (nil))
(insn 54 53 55 4 (set (reg:DI 0 ax [orig:99 D.6915 ] [99])
        (sign_extend:DI (reg:SI 0 ax [243]))) preproc.cpp:388 142 {*extendsidi2_rex64}
     (nil))
(insn 55 54 56 4 (parallel [
            (set (reg:DI 0 ax [orig:100 D.6915 ] [100])
                (plus:DI (reg:DI 0 ax [orig:99 D.6915 ] [99])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 218 {*adddi_1}
     (nil))
(insn 56 55 57 4 (parallel [
            (set (reg:DI 1 dx [orig:101 D.6915 ] [101])
                (ashift:DI (reg:DI 0 ax [orig:100 D.6915 ] [100])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 512 {*ashldi3_1}
     (nil))
(insn 57 56 58 4 (set (reg/f:DI 0 ax [244])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:388 89 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.6912 ] [102])
                (plus:DI (reg/f:DI 0 ax [244])
                    (reg:DI 1 dx [orig:101 D.6915 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:101 D.6915 ] [101]))
        (nil)))
(insn 59 58 60 4 (set (reg:SF 21 xmm0 [orig:103 D.6913 ] [103])
        (mem:SF (reg/f:DI 0 ax [orig:102 D.6912 ] [102]) [0 *_33+0 S4 A32])) preproc.cpp:388 129 {*movsf_internal}
     (nil))
(insn 60 59 61 4 (set (reg:DF 23 xmm2 [orig:104 D.6914 ] [104])
        (float_extend:DF (reg:SF 21 xmm0 [orig:103 D.6913 ] [103]))) preproc.cpp:388 152 {*extendsfdf2_sse}
     (nil))
(insn 61 60 62 4 (set (reg:SI 0 ax [245])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:388 90 {*movsi_internal}
     (nil))
(insn 62 61 63 4 (set (reg:DI 0 ax [orig:105 D.6915 ] [105])
        (sign_extend:DI (reg:SI 0 ax [245]))) preproc.cpp:388 142 {*extendsidi2_rex64}
     (nil))
(insn 63 62 64 4 (parallel [
            (set (reg:DI 0 ax [orig:106 D.6915 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 D.6915 ] [105])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 218 {*adddi_1}
     (nil))
(insn 64 63 65 4 (parallel [
            (set (reg:DI 1 dx [orig:107 D.6915 ] [107])
                (ashift:DI (reg:DI 0 ax [orig:106 D.6915 ] [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 512 {*ashldi3_1}
     (nil))
(insn 65 64 66 4 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:388 89 {*movdi_internal}
     (nil))
(insn 66 65 67 4 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.6912 ] [108])
                (plus:DI (reg/f:DI 0 ax [246])
                    (reg:DI 1 dx [orig:107 D.6915 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.6915 ] [107]))
        (nil)))
(insn 67 66 68 4 (set (reg:SF 21 xmm0 [orig:109 D.6913 ] [109])
        (mem:SF (reg/f:DI 0 ax [orig:108 D.6912 ] [108]) [0 *_39+0 S4 A32])) preproc.cpp:388 129 {*movsf_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DF 21 xmm0 [orig:110 D.6914 ] [110])
        (float_extend:DF (reg:SF 21 xmm0 [orig:109 D.6913 ] [109]))) preproc.cpp:388 152 {*extendsfdf2_sse}
     (nil))
(insn 69 68 70 4 (set (reg:DF 21 xmm0 [orig:111 D.6914 ] [111])
        (mult:DF (reg:DF 21 xmm0 [orig:110 D.6914 ] [110])
            (reg:DF 23 xmm2 [orig:104 D.6914 ] [104]))) preproc.cpp:388 798 {*fop_df_comm_sse}
     (nil))
(insn 70 69 72 4 (set (reg:DF 21 xmm0 [orig:112 D.6914 ] [112])
        (plus:DF (reg:DF 21 xmm0 [orig:111 D.6914 ] [111])
            (reg:DF 22 xmm1 [orig:98 D.6914 ] [98]))) preproc.cpp:387 798 {*fop_df_comm_sse}
     (nil))
(call_insn 72 70 73 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:388 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 73 72 74 4 (set (reg:DF 0 ax [247])
        (reg:DF 21 xmm0)) preproc.cpp:388 128 {*movdf_internal}
     (nil))
(insn 74 73 75 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [247])) preproc.cpp:388 128 {*movdf_internal}
     (nil))
(insn 75 74 76 4 (set (reg:SI 0 ax [248])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:390 90 {*movsi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:DI 0 ax [orig:113 D.6911 ] [113])
        (sign_extend:DI (reg:SI 0 ax [248]))) preproc.cpp:390 142 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 4 (parallel [
            (set (reg:DI 1 dx [orig:114 D.6911 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.6911 ] [113])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:390 512 {*ashldi3_1}
     (nil))
(insn 78 77 79 4 (set (reg/f:DI 0 ax [249])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:390 89 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.6912 ] [115])
                (plus:DI (reg/f:DI 0 ax [249])
                    (reg:DI 1 dx [orig:114 D.6911 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:390 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.6911 ] [114]))
        (nil)))
(insn 80 79 81 4 (set (reg:SF 21 xmm0 [orig:116 D.6913 ] [116])
        (mem:SF (reg/f:DI 0 ax [orig:115 D.6912 ] [115]) [0 *_48+0 S4 A32])) preproc.cpp:390 129 {*movsf_internal}
     (nil))
(insn 81 80 82 4 (set (reg:DF 22 xmm1 [orig:117 D.6914 ] [117])
        (float_extend:DF (reg:SF 21 xmm0 [orig:116 D.6913 ] [116]))) preproc.cpp:390 152 {*extendsfdf2_sse}
     (nil))
(insn 82 81 83 4 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:390 90 {*movsi_internal}
     (nil))
(insn 83 82 84 4 (set (reg:DI 0 ax [orig:118 D.6915 ] [118])
        (sign_extend:DI (reg:SI 0 ax [250]))) preproc.cpp:390 142 {*extendsidi2_rex64}
     (nil))
(insn 84 83 85 4 (parallel [
            (set (reg:DI 0 ax [orig:119 D.6915 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 D.6915 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:390 218 {*adddi_1}
     (nil))
(insn 85 84 86 4 (parallel [
            (set (reg:DI 1 dx [orig:120 D.6915 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:119 D.6915 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:390 512 {*ashldi3_1}
     (nil))
(insn 86 85 87 4 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:390 89 {*movdi_internal}
     (nil))
(insn 87 86 88 4 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.6912 ] [121])
                (plus:DI (reg/f:DI 0 ax [251])
                    (reg:DI 1 dx [orig:120 D.6915 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:390 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.6915 ] [120]))
        (nil)))
(insn 88 87 89 4 (set (reg:SF 21 xmm0 [orig:122 D.6913 ] [122])
        (mem:SF (reg/f:DI 0 ax [orig:121 D.6912 ] [121]) [0 *_54+0 S4 A32])) preproc.cpp:390 129 {*movsf_internal}
     (nil))
(insn 89 88 92 4 (set (reg:DF 21 xmm0 [orig:123 D.6914 ] [123])
        (float_extend:DF (reg:SF 21 xmm0 [orig:122 D.6913 ] [122]))) preproc.cpp:390 152 {*extendsfdf2_sse}
     (nil))
(call_insn 92 89 93 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fae98e3f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:390 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 93 92 94 4 (set (reg:DF 0 ax [252])
        (reg:DF 21 xmm0)) preproc.cpp:390 128 {*movdf_internal}
     (nil))
(insn 94 93 95 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [252])) preproc.cpp:390 128 {*movdf_internal}
     (nil))
(insn 95 94 96 4 (set (reg:SI 0 ax [253])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:392 90 {*movsi_internal}
     (nil))
(insn 96 95 97 4 (set (reg:DI 0 ax [orig:124 D.6911 ] [124])
        (sign_extend:DI (reg:SI 0 ax [253]))) preproc.cpp:392 142 {*extendsidi2_rex64}
     (nil))
(insn 97 96 98 4 (parallel [
            (set (reg:DI 1 dx [orig:125 D.6911 ] [125])
                (ashift:DI (reg:DI 0 ax [orig:124 D.6911 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:392 512 {*ashldi3_1}
     (nil))
(insn 98 97 99 4 (set (reg/f:DI 0 ax [254])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:392 89 {*movdi_internal}
     (nil))
(insn 99 98 100 4 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.6912 ] [126])
                (plus:DI (reg/f:DI 0 ax [254])
                    (reg:DI 1 dx [orig:125 D.6911 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:392 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:125 D.6911 ] [125]))
        (nil)))
(insn 100 99 101 4 (set (reg:SF 21 xmm0 [orig:127 D.6913 ] [127])
        (mem:SF (reg/f:DI 0 ax [orig:126 D.6912 ] [126]) [0 *_62+0 S4 A32])) preproc.cpp:392 129 {*movsf_internal}
     (nil))
(insn 101 100 102 4 (set (reg:DF 22 xmm1 [orig:128 D.6914 ] [128])
        (float_extend:DF (reg:SF 21 xmm0 [orig:127 D.6913 ] [127]))) preproc.cpp:392 152 {*extendsfdf2_sse}
     (nil))
(insn 102 101 103 4 (set (reg:SI 0 ax [255])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:392 90 {*movsi_internal}
     (nil))
(insn 103 102 104 4 (set (reg:DI 0 ax [orig:129 D.6911 ] [129])
        (sign_extend:DI (reg:SI 0 ax [255]))) preproc.cpp:392 142 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 4 (parallel [
            (set (reg:DI 1 dx [orig:130 D.6911 ] [130])
                (ashift:DI (reg:DI 0 ax [orig:129 D.6911 ] [129])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:392 512 {*ashldi3_1}
     (nil))
(insn 105 104 106 4 (set (reg/f:DI 0 ax [256])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:392 89 {*movdi_internal}
     (nil))
(insn 106 105 107 4 (parallel [
            (set (reg/f:DI 0 ax [orig:131 D.6912 ] [131])
                (plus:DI (reg/f:DI 0 ax [256])
                    (reg:DI 1 dx [orig:130 D.6911 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:392 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:130 D.6911 ] [130]))
        (nil)))
(insn 107 106 108 4 (set (reg:SF 21 xmm0 [orig:132 D.6913 ] [132])
        (mem:SF (reg/f:DI 0 ax [orig:131 D.6912 ] [131]) [0 *_67+0 S4 A32])) preproc.cpp:392 129 {*movsf_internal}
     (nil))
(insn 108 107 109 4 (set (reg:DF 21 xmm0 [orig:133 D.6914 ] [133])
        (float_extend:DF (reg:SF 21 xmm0 [orig:132 D.6913 ] [132]))) preproc.cpp:392 152 {*extendsfdf2_sse}
     (nil))
(insn 109 108 110 4 (set (reg:DF 22 xmm1 [orig:134 D.6914 ] [134])
        (mult:DF (reg:DF 22 xmm1 [orig:128 D.6914 ] [128])
            (reg:DF 21 xmm0 [orig:133 D.6914 ] [133]))) preproc.cpp:392 798 {*fop_df_comm_sse}
     (nil))
(insn 110 109 111 4 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:393 90 {*movsi_internal}
     (nil))
(insn 111 110 112 4 (set (reg:DI 0 ax [orig:135 D.6915 ] [135])
        (sign_extend:DI (reg:SI 0 ax [257]))) preproc.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 112 111 113 4 (parallel [
            (set (reg:DI 0 ax [orig:136 D.6915 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 D.6915 ] [135])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 218 {*adddi_1}
     (nil))
(insn 113 112 114 4 (parallel [
            (set (reg:DI 1 dx [orig:137 D.6915 ] [137])
                (ashift:DI (reg:DI 0 ax [orig:136 D.6915 ] [136])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 512 {*ashldi3_1}
     (nil))
(insn 114 113 115 4 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:393 89 {*movdi_internal}
     (nil))
(insn 115 114 116 4 (parallel [
            (set (reg/f:DI 0 ax [orig:138 D.6912 ] [138])
                (plus:DI (reg/f:DI 0 ax [258])
                    (reg:DI 1 dx [orig:137 D.6915 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:137 D.6915 ] [137]))
        (nil)))
(insn 116 115 117 4 (set (reg:SF 21 xmm0 [orig:139 D.6913 ] [139])
        (mem:SF (reg/f:DI 0 ax [orig:138 D.6912 ] [138]) [0 *_74+0 S4 A32])) preproc.cpp:393 129 {*movsf_internal}
     (nil))
(insn 117 116 118 4 (set (reg:DF 23 xmm2 [orig:140 D.6914 ] [140])
        (float_extend:DF (reg:SF 21 xmm0 [orig:139 D.6913 ] [139]))) preproc.cpp:393 152 {*extendsfdf2_sse}
     (nil))
(insn 118 117 119 4 (set (reg:SI 0 ax [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:393 90 {*movsi_internal}
     (nil))
(insn 119 118 120 4 (set (reg:DI 0 ax [orig:141 D.6915 ] [141])
        (sign_extend:DI (reg:SI 0 ax [259]))) preproc.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 120 119 121 4 (parallel [
            (set (reg:DI 0 ax [orig:142 D.6915 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 D.6915 ] [141])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 218 {*adddi_1}
     (nil))
(insn 121 120 122 4 (parallel [
            (set (reg:DI 1 dx [orig:143 D.6915 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.6915 ] [142])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 512 {*ashldi3_1}
     (nil))
(insn 122 121 123 4 (set (reg/f:DI 0 ax [260])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:393 89 {*movdi_internal}
     (nil))
(insn 123 122 124 4 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.6912 ] [144])
                (plus:DI (reg/f:DI 0 ax [260])
                    (reg:DI 1 dx [orig:143 D.6915 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.6915 ] [143]))
        (nil)))
(insn 124 123 125 4 (set (reg:SF 21 xmm0 [orig:145 D.6913 ] [145])
        (mem:SF (reg/f:DI 0 ax [orig:144 D.6912 ] [144]) [0 *_80+0 S4 A32])) preproc.cpp:393 129 {*movsf_internal}
     (nil))
(insn 125 124 126 4 (set (reg:DF 21 xmm0 [orig:146 D.6914 ] [146])
        (float_extend:DF (reg:SF 21 xmm0 [orig:145 D.6913 ] [145]))) preproc.cpp:393 152 {*extendsfdf2_sse}
     (nil))
(insn 126 125 127 4 (set (reg:DF 21 xmm0 [orig:147 D.6914 ] [147])
        (mult:DF (reg:DF 21 xmm0 [orig:146 D.6914 ] [146])
            (reg:DF 23 xmm2 [orig:140 D.6914 ] [140]))) preproc.cpp:393 798 {*fop_df_comm_sse}
     (nil))
(insn 127 126 129 4 (set (reg:DF 21 xmm0 [orig:148 D.6914 ] [148])
        (plus:DF (reg:DF 21 xmm0 [orig:147 D.6914 ] [147])
            (reg:DF 22 xmm1 [orig:134 D.6914 ] [134]))) preproc.cpp:392 798 {*fop_df_comm_sse}
     (nil))
(call_insn 129 127 130 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:393 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 130 129 131 4 (set (reg:DF 0 ax [261])
        (reg:DF 21 xmm0)) preproc.cpp:393 128 {*movdf_internal}
     (nil))
(insn 131 130 132 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [261])) preproc.cpp:393 128 {*movdf_internal}
     (nil))
(insn 132 131 133 4 (set (reg:SI 0 ax [262])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:395 90 {*movsi_internal}
     (nil))
(insn 133 132 134 4 (set (reg:DI 0 ax [orig:149 D.6911 ] [149])
        (sign_extend:DI (reg:SI 0 ax [262]))) preproc.cpp:395 142 {*extendsidi2_rex64}
     (nil))
(insn 134 133 135 4 (parallel [
            (set (reg:DI 1 dx [orig:150 D.6911 ] [150])
                (ashift:DI (reg:DI 0 ax [orig:149 D.6911 ] [149])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:395 512 {*ashldi3_1}
     (nil))
(insn 135 134 136 4 (set (reg/f:DI 0 ax [263])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:395 89 {*movdi_internal}
     (nil))
(insn 136 135 137 4 (parallel [
            (set (reg/f:DI 0 ax [orig:151 D.6912 ] [151])
                (plus:DI (reg/f:DI 0 ax [263])
                    (reg:DI 1 dx [orig:150 D.6911 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:395 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:150 D.6911 ] [150]))
        (nil)))
(insn 137 136 138 4 (set (reg:SF 21 xmm0 [orig:152 D.6913 ] [152])
        (mem:SF (reg/f:DI 0 ax [orig:151 D.6912 ] [151]) [0 *_89+0 S4 A32])) preproc.cpp:395 129 {*movsf_internal}
     (nil))
(insn 138 137 139 4 (set (reg:DF 22 xmm1 [orig:153 D.6914 ] [153])
        (float_extend:DF (reg:SF 21 xmm0 [orig:152 D.6913 ] [152]))) preproc.cpp:395 152 {*extendsfdf2_sse}
     (nil))
(insn 139 138 140 4 (set (reg:SI 0 ax [264])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:395 90 {*movsi_internal}
     (nil))
(insn 140 139 141 4 (set (reg:DI 0 ax [orig:154 D.6915 ] [154])
        (sign_extend:DI (reg:SI 0 ax [264]))) preproc.cpp:395 142 {*extendsidi2_rex64}
     (nil))
(insn 141 140 142 4 (parallel [
            (set (reg:DI 0 ax [orig:155 D.6915 ] [155])
                (plus:DI (reg:DI 0 ax [orig:154 D.6915 ] [154])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:395 218 {*adddi_1}
     (nil))
(insn 142 141 143 4 (parallel [
            (set (reg:DI 1 dx [orig:156 D.6915 ] [156])
                (ashift:DI (reg:DI 0 ax [orig:155 D.6915 ] [155])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:395 512 {*ashldi3_1}
     (nil))
(insn 143 142 144 4 (set (reg/f:DI 0 ax [265])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:395 89 {*movdi_internal}
     (nil))
(insn 144 143 145 4 (parallel [
            (set (reg/f:DI 0 ax [orig:157 D.6912 ] [157])
                (plus:DI (reg/f:DI 0 ax [265])
                    (reg:DI 1 dx [orig:156 D.6915 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:395 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:156 D.6915 ] [156]))
        (nil)))
(insn 145 144 146 4 (set (reg:SF 21 xmm0 [orig:158 D.6913 ] [158])
        (mem:SF (reg/f:DI 0 ax [orig:157 D.6912 ] [157]) [0 *_95+0 S4 A32])) preproc.cpp:395 129 {*movsf_internal}
     (nil))
(insn 146 145 149 4 (set (reg:DF 21 xmm0 [orig:159 D.6914 ] [159])
        (float_extend:DF (reg:SF 21 xmm0 [orig:158 D.6913 ] [158]))) preproc.cpp:395 152 {*extendsfdf2_sse}
     (nil))
(call_insn 149 146 150 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fae98e3f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:395 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 150 149 151 4 (set (reg:DF 0 ax [266])
        (reg:DF 21 xmm0)) preproc.cpp:395 128 {*movdf_internal}
     (nil))
(insn 151 150 152 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [266])) preproc.cpp:395 128 {*movdf_internal}
     (nil))
(insn 152 151 153 4 (set (reg:SI 0 ax [267])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:397 90 {*movsi_internal}
     (nil))
(insn 153 152 154 4 (set (reg:DI 0 ax [orig:160 D.6911 ] [160])
        (sign_extend:DI (reg:SI 0 ax [267]))) preproc.cpp:397 142 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 4 (parallel [
            (set (reg:DI 1 dx [orig:161 D.6911 ] [161])
                (ashift:DI (reg:DI 0 ax [orig:160 D.6911 ] [160])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:397 512 {*ashldi3_1}
     (nil))
(insn 155 154 156 4 (set (reg/f:DI 0 ax [268])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:397 89 {*movdi_internal}
     (nil))
(insn 156 155 157 4 (parallel [
            (set (reg/f:DI 0 ax [orig:162 D.6912 ] [162])
                (plus:DI (reg/f:DI 0 ax [268])
                    (reg:DI 1 dx [orig:161 D.6911 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:397 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:161 D.6911 ] [161]))
        (nil)))
(insn 157 156 158 4 (set (reg:SF 21 xmm0 [orig:163 D.6913 ] [163])
        (mem:SF (reg/f:DI 0 ax [orig:162 D.6912 ] [162]) [0 *_103+0 S4 A32])) preproc.cpp:397 129 {*movsf_internal}
     (nil))
(insn 158 157 159 4 (set (reg:DF 22 xmm1 [orig:164 D.6914 ] [164])
        (float_extend:DF (reg:SF 21 xmm0 [orig:163 D.6913 ] [163]))) preproc.cpp:397 152 {*extendsfdf2_sse}
     (nil))
(insn 159 158 160 4 (set (reg:SI 0 ax [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:397 90 {*movsi_internal}
     (nil))
(insn 160 159 161 4 (set (reg:DI 0 ax [orig:165 D.6911 ] [165])
        (sign_extend:DI (reg:SI 0 ax [269]))) preproc.cpp:397 142 {*extendsidi2_rex64}
     (nil))
(insn 161 160 162 4 (parallel [
            (set (reg:DI 1 dx [orig:166 D.6911 ] [166])
                (ashift:DI (reg:DI 0 ax [orig:165 D.6911 ] [165])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:397 512 {*ashldi3_1}
     (nil))
(insn 162 161 163 4 (set (reg/f:DI 0 ax [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:397 89 {*movdi_internal}
     (nil))
(insn 163 162 164 4 (parallel [
            (set (reg/f:DI 0 ax [orig:167 D.6912 ] [167])
                (plus:DI (reg/f:DI 0 ax [270])
                    (reg:DI 1 dx [orig:166 D.6911 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:397 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:166 D.6911 ] [166]))
        (nil)))
(insn 164 163 165 4 (set (reg:SF 21 xmm0 [orig:168 D.6913 ] [168])
        (mem:SF (reg/f:DI 0 ax [orig:167 D.6912 ] [167]) [0 *_108+0 S4 A32])) preproc.cpp:397 129 {*movsf_internal}
     (nil))
(insn 165 164 166 4 (set (reg:DF 21 xmm0 [orig:169 D.6914 ] [169])
        (float_extend:DF (reg:SF 21 xmm0 [orig:168 D.6913 ] [168]))) preproc.cpp:397 152 {*extendsfdf2_sse}
     (nil))
(insn 166 165 167 4 (set (reg:DF 22 xmm1 [orig:170 D.6914 ] [170])
        (mult:DF (reg:DF 22 xmm1 [orig:164 D.6914 ] [164])
            (reg:DF 21 xmm0 [orig:169 D.6914 ] [169]))) preproc.cpp:397 798 {*fop_df_comm_sse}
     (nil))
(insn 167 166 168 4 (set (reg:SI 0 ax [271])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:398 90 {*movsi_internal}
     (nil))
(insn 168 167 169 4 (set (reg:DI 0 ax [orig:171 D.6915 ] [171])
        (sign_extend:DI (reg:SI 0 ax [271]))) preproc.cpp:398 142 {*extendsidi2_rex64}
     (nil))
(insn 169 168 170 4 (parallel [
            (set (reg:DI 0 ax [orig:172 D.6915 ] [172])
                (plus:DI (reg:DI 0 ax [orig:171 D.6915 ] [171])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 218 {*adddi_1}
     (nil))
(insn 170 169 171 4 (parallel [
            (set (reg:DI 1 dx [orig:173 D.6915 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:172 D.6915 ] [172])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 512 {*ashldi3_1}
     (nil))
(insn 171 170 172 4 (set (reg/f:DI 0 ax [272])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:398 89 {*movdi_internal}
     (nil))
(insn 172 171 173 4 (parallel [
            (set (reg/f:DI 0 ax [orig:174 D.6912 ] [174])
                (plus:DI (reg/f:DI 0 ax [272])
                    (reg:DI 1 dx [orig:173 D.6915 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:173 D.6915 ] [173]))
        (nil)))
(insn 173 172 174 4 (set (reg:SF 21 xmm0 [orig:175 D.6913 ] [175])
        (mem:SF (reg/f:DI 0 ax [orig:174 D.6912 ] [174]) [0 *_115+0 S4 A32])) preproc.cpp:398 129 {*movsf_internal}
     (nil))
(insn 174 173 175 4 (set (reg:DF 23 xmm2 [orig:176 D.6914 ] [176])
        (float_extend:DF (reg:SF 21 xmm0 [orig:175 D.6913 ] [175]))) preproc.cpp:398 152 {*extendsfdf2_sse}
     (nil))
(insn 175 174 176 4 (set (reg:SI 0 ax [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:398 90 {*movsi_internal}
     (nil))
(insn 176 175 177 4 (set (reg:DI 0 ax [orig:177 D.6915 ] [177])
        (sign_extend:DI (reg:SI 0 ax [273]))) preproc.cpp:398 142 {*extendsidi2_rex64}
     (nil))
(insn 177 176 178 4 (parallel [
            (set (reg:DI 0 ax [orig:178 D.6915 ] [178])
                (plus:DI (reg:DI 0 ax [orig:177 D.6915 ] [177])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 218 {*adddi_1}
     (nil))
(insn 178 177 179 4 (parallel [
            (set (reg:DI 1 dx [orig:179 D.6915 ] [179])
                (ashift:DI (reg:DI 0 ax [orig:178 D.6915 ] [178])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 512 {*ashldi3_1}
     (nil))
(insn 179 178 180 4 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:398 89 {*movdi_internal}
     (nil))
(insn 180 179 181 4 (parallel [
            (set (reg/f:DI 0 ax [orig:180 D.6912 ] [180])
                (plus:DI (reg/f:DI 0 ax [274])
                    (reg:DI 1 dx [orig:179 D.6915 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:179 D.6915 ] [179]))
        (nil)))
(insn 181 180 182 4 (set (reg:SF 21 xmm0 [orig:181 D.6913 ] [181])
        (mem:SF (reg/f:DI 0 ax [orig:180 D.6912 ] [180]) [0 *_121+0 S4 A32])) preproc.cpp:398 129 {*movsf_internal}
     (nil))
(insn 182 181 183 4 (set (reg:DF 21 xmm0 [orig:182 D.6914 ] [182])
        (float_extend:DF (reg:SF 21 xmm0 [orig:181 D.6913 ] [181]))) preproc.cpp:398 152 {*extendsfdf2_sse}
     (nil))
(insn 183 182 184 4 (set (reg:DF 21 xmm0 [orig:183 D.6914 ] [183])
        (mult:DF (reg:DF 21 xmm0 [orig:182 D.6914 ] [182])
            (reg:DF 23 xmm2 [orig:176 D.6914 ] [176]))) preproc.cpp:398 798 {*fop_df_comm_sse}
     (nil))
(insn 184 183 186 4 (set (reg:DF 21 xmm0 [orig:184 D.6914 ] [184])
        (plus:DF (reg:DF 21 xmm0 [orig:183 D.6914 ] [183])
            (reg:DF 22 xmm1 [orig:170 D.6914 ] [170]))) preproc.cpp:397 798 {*fop_df_comm_sse}
     (nil))
(call_insn 186 184 187 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:398 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 187 186 188 4 (set (reg:DF 0 ax [275])
        (reg:DF 21 xmm0)) preproc.cpp:398 128 {*movdf_internal}
     (nil))
(insn 188 187 189 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [275])) preproc.cpp:398 128 {*movdf_internal}
     (nil))
(insn 189 188 190 4 (set (reg:SI 0 ax [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:400 90 {*movsi_internal}
     (nil))
(insn 190 189 191 4 (set (reg:DI 0 ax [orig:185 D.6911 ] [185])
        (sign_extend:DI (reg:SI 0 ax [276]))) preproc.cpp:400 142 {*extendsidi2_rex64}
     (nil))
(insn 191 190 192 4 (parallel [
            (set (reg:DI 1 dx [orig:186 D.6911 ] [186])
                (ashift:DI (reg:DI 0 ax [orig:185 D.6911 ] [185])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:400 512 {*ashldi3_1}
     (nil))
(insn 192 191 193 4 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:400 89 {*movdi_internal}
     (nil))
(insn 193 192 194 4 (parallel [
            (set (reg/f:DI 0 ax [orig:187 D.6912 ] [187])
                (plus:DI (reg/f:DI 0 ax [277])
                    (reg:DI 1 dx [orig:186 D.6911 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:400 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:186 D.6911 ] [186]))
        (nil)))
(insn 194 193 195 4 (set (reg:SF 21 xmm0 [orig:188 D.6913 ] [188])
        (mem:SF (reg/f:DI 0 ax [orig:187 D.6912 ] [187]) [0 *_130+0 S4 A32])) preproc.cpp:400 129 {*movsf_internal}
     (nil))
(insn 195 194 196 4 (set (reg:DF 22 xmm1 [orig:189 D.6914 ] [189])
        (float_extend:DF (reg:SF 21 xmm0 [orig:188 D.6913 ] [188]))) preproc.cpp:400 152 {*extendsfdf2_sse}
     (nil))
(insn 196 195 197 4 (set (reg:SI 0 ax [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:400 90 {*movsi_internal}
     (nil))
(insn 197 196 198 4 (set (reg:DI 0 ax [orig:190 D.6915 ] [190])
        (sign_extend:DI (reg:SI 0 ax [278]))) preproc.cpp:400 142 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 4 (parallel [
            (set (reg:DI 0 ax [orig:191 D.6915 ] [191])
                (plus:DI (reg:DI 0 ax [orig:190 D.6915 ] [190])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:400 218 {*adddi_1}
     (nil))
(insn 199 198 200 4 (parallel [
            (set (reg:DI 1 dx [orig:192 D.6915 ] [192])
                (ashift:DI (reg:DI 0 ax [orig:191 D.6915 ] [191])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:400 512 {*ashldi3_1}
     (nil))
(insn 200 199 201 4 (set (reg/f:DI 0 ax [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:400 89 {*movdi_internal}
     (nil))
(insn 201 200 202 4 (parallel [
            (set (reg/f:DI 0 ax [orig:193 D.6912 ] [193])
                (plus:DI (reg/f:DI 0 ax [279])
                    (reg:DI 1 dx [orig:192 D.6915 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:400 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:192 D.6915 ] [192]))
        (nil)))
(insn 202 201 203 4 (set (reg:SF 21 xmm0 [orig:194 D.6913 ] [194])
        (mem:SF (reg/f:DI 0 ax [orig:193 D.6912 ] [193]) [0 *_136+0 S4 A32])) preproc.cpp:400 129 {*movsf_internal}
     (nil))
(insn 203 202 206 4 (set (reg:DF 21 xmm0 [orig:195 D.6914 ] [195])
        (float_extend:DF (reg:SF 21 xmm0 [orig:194 D.6913 ] [194]))) preproc.cpp:400 152 {*extendsfdf2_sse}
     (nil))
(call_insn 206 203 207 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fae98e3f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:400 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 207 206 208 4 (set (reg:DF 0 ax [280])
        (reg:DF 21 xmm0)) preproc.cpp:400 128 {*movdf_internal}
     (nil))
(insn 208 207 209 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [280])) preproc.cpp:400 128 {*movdf_internal}
     (nil))
(insn 209 208 210 4 (set (reg:DF 21 xmm0 [282])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])) preproc.cpp:404 128 {*movdf_internal}
     (nil))
(insn 210 209 211 4 (set (reg:DF 21 xmm0 [281])
        (div:DF (reg:DF 21 xmm0 [282])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:404 805 {*fop_df_1_sse}
     (nil))
(insn 211 210 212 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [281])) preproc.cpp:404 128 {*movdf_internal}
     (nil))
(insn 212 211 213 4 (set (reg:DF 21 xmm0 [284])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])) preproc.cpp:405 128 {*movdf_internal}
     (nil))
(insn 213 212 214 4 (set (reg:DF 21 xmm0 [283])
        (minus:DF (reg:DF 21 xmm0 [284])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64]))) preproc.cpp:405 805 {*fop_df_1_sse}
     (nil))
(insn 214 213 215 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [283])) preproc.cpp:405 128 {*movdf_internal}
     (nil))
(insn 215 214 216 4 (set (reg:SI 0 ax [285])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 216 215 217 4 (set (reg:DI 0 ax [orig:196 D.6911 ] [196])
        (sign_extend:DI (reg:SI 0 ax [285]))) preproc.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 217 216 218 4 (parallel [
            (set (reg:DI 1 dx [orig:197 D.6911 ] [197])
                (ashift:DI (reg:DI 0 ax [orig:196 D.6911 ] [196])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:407 512 {*ashldi3_1}
     (nil))
(insn 218 217 219 4 (set (reg/f:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:407 89 {*movdi_internal}
     (nil))
(insn 219 218 220 4 (parallel [
            (set (reg/f:DI 3 bx [orig:198 D.6912 ] [198])
                (plus:DI (reg:DI 1 dx [orig:197 D.6911 ] [197])
                    (reg/f:DI 0 ax [286])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:407 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:197 D.6911 ] [197]))
        (nil)))
(insn 220 219 294 4 (set (reg:SF 24 xmm3 [orig:199 D.6913 ] [199])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64]))) preproc.cpp:407 157 {*truncdfsf_fast_sse}
     (nil))
(insn 294 220 317 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 24 xmm3 [orig:199 D.6913 ] [199])) preproc.cpp:407 129 {*movsf_internal}
     (nil))
(note 317 294 309 4 NOTE_INSN_DELETED)
(note 309 317 221 4 NOTE_INSN_DELETED)
(insn 221 309 222 4 (set (reg:DF 0 ax [287])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])) preproc.cpp:407 128 {*movdf_internal}
     (nil))
(insn 222 221 295 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [287])) preproc.cpp:407 128 {*movdf_internal}
     (nil))
(insn 295 222 223 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) preproc.cpp:407 128 {*movdf_internal}
     (nil))
(call_insn/u 223 295 225 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fae98e445e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:407 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 225 223 296 4 (set (reg:SF 21 xmm0 [orig:201 D.6913 ] [201])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:200 D.6914 ] [200]))) preproc.cpp:407 157 {*truncdfsf_fast_sse}
     (nil))
(note 296 225 313 4 NOTE_INSN_DELETED)
(note 313 296 226 4 NOTE_INSN_DELETED)
(insn 226 313 227 4 (set (reg:SF 21 xmm0 [orig:202 D.6913 ] [202])
        (mult:SF (reg:SF 21 xmm0 [orig:201 D.6913 ] [201])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) preproc.cpp:407 797 {*fop_sf_comm_sse}
     (nil))
(insn 227 226 228 4 (set (mem:SF (reg/f:DI 3 bx [orig:198 D.6912 ] [198]) [0 *_145+0 S4 A32])
        (reg:SF 21 xmm0 [orig:202 D.6913 ] [202])) preproc.cpp:407 129 {*movsf_internal}
     (nil))
(insn 228 227 229 4 (set (reg:SI 0 ax [288])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 229 228 230 4 (set (reg:DI 0 ax [orig:203 D.6915 ] [203])
        (sign_extend:DI (reg:SI 0 ax [288]))) preproc.cpp:408 142 {*extendsidi2_rex64}
     (nil))
(insn 230 229 231 4 (parallel [
            (set (reg:DI 0 ax [orig:204 D.6915 ] [204])
                (plus:DI (reg:DI 0 ax [orig:203 D.6915 ] [203])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:408 218 {*adddi_1}
     (nil))
(insn 231 230 232 4 (parallel [
            (set (reg:DI 1 dx [orig:205 D.6915 ] [205])
                (ashift:DI (reg:DI 0 ax [orig:204 D.6915 ] [204])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:408 512 {*ashldi3_1}
     (nil))
(insn 232 231 233 4 (set (reg/f:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:408 89 {*movdi_internal}
     (nil))
(insn 233 232 234 4 (parallel [
            (set (reg/f:DI 3 bx [orig:206 D.6912 ] [206])
                (plus:DI (reg:DI 1 dx [orig:205 D.6915 ] [205])
                    (reg/f:DI 0 ax [289])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:408 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:205 D.6915 ] [205]))
        (nil)))
(insn 234 233 297 4 (set (reg:SF 25 xmm4 [orig:207 D.6913 ] [207])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64]))) preproc.cpp:408 157 {*truncdfsf_fast_sse}
     (nil))
(insn 297 234 316 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 25 xmm4 [orig:207 D.6913 ] [207])) preproc.cpp:408 129 {*movsf_internal}
     (nil))
(note 316 297 308 4 NOTE_INSN_DELETED)
(note 308 316 235 4 NOTE_INSN_DELETED)
(insn 235 308 236 4 (set (reg:DF 0 ax [290])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])) preproc.cpp:408 128 {*movdf_internal}
     (nil))
(insn 236 235 298 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [290])) preproc.cpp:408 128 {*movdf_internal}
     (nil))
(insn 298 236 237 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) preproc.cpp:408 128 {*movdf_internal}
     (nil))
(call_insn/u 237 298 239 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fae98e815e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:408 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 239 237 299 4 (set (reg:SF 21 xmm0 [orig:209 D.6913 ] [209])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:208 D.6914 ] [208]))) preproc.cpp:408 157 {*truncdfsf_fast_sse}
     (nil))
(note 299 239 312 4 NOTE_INSN_DELETED)
(note 312 299 240 4 NOTE_INSN_DELETED)
(insn 240 312 241 4 (set (reg:SF 21 xmm0 [orig:210 D.6913 ] [210])
        (mult:SF (reg:SF 21 xmm0 [orig:209 D.6913 ] [209])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) preproc.cpp:408 797 {*fop_sf_comm_sse}
     (nil))
(insn 241 240 242 4 (set (mem:SF (reg/f:DI 3 bx [orig:206 D.6912 ] [206]) [0 *_154+0 S4 A32])
        (reg:SF 21 xmm0 [orig:210 D.6913 ] [210])) preproc.cpp:408 129 {*movsf_internal}
     (nil))
(insn 242 241 243 4 (set (reg:DF 21 xmm0 [292])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])) preproc.cpp:412 128 {*movdf_internal}
     (nil))
(insn 243 242 244 4 (set (reg:DF 21 xmm0 [291])
        (div:DF (reg:DF 21 xmm0 [292])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:412 805 {*fop_df_1_sse}
     (nil))
(insn 244 243 245 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [291])) preproc.cpp:412 128 {*movdf_internal}
     (nil))
(insn 245 244 246 4 (set (reg:DF 21 xmm0 [294])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])) preproc.cpp:413 128 {*movdf_internal}
     (nil))
(insn 246 245 247 4 (set (reg:DF 21 xmm0 [293])
        (minus:DF (reg:DF 21 xmm0 [294])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64]))) preproc.cpp:413 805 {*fop_df_1_sse}
     (nil))
(insn 247 246 248 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [293])) preproc.cpp:413 128 {*movdf_internal}
     (nil))
(insn 248 247 249 4 (set (reg:SI 0 ax [295])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:415 90 {*movsi_internal}
     (nil))
(insn 249 248 250 4 (set (reg:DI 0 ax [orig:211 D.6911 ] [211])
        (sign_extend:DI (reg:SI 0 ax [295]))) preproc.cpp:415 142 {*extendsidi2_rex64}
     (nil))
(insn 250 249 251 4 (parallel [
            (set (reg:DI 1 dx [orig:212 D.6911 ] [212])
                (ashift:DI (reg:DI 0 ax [orig:211 D.6911 ] [211])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:415 512 {*ashldi3_1}
     (nil))
(insn 251 250 252 4 (set (reg/f:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:415 89 {*movdi_internal}
     (nil))
(insn 252 251 253 4 (parallel [
            (set (reg/f:DI 3 bx [orig:213 D.6912 ] [213])
                (plus:DI (reg:DI 1 dx [orig:212 D.6911 ] [212])
                    (reg/f:DI 0 ax [296])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:415 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:212 D.6911 ] [212]))
        (nil)))
(insn 253 252 300 4 (set (reg:SF 26 xmm5 [orig:214 D.6913 ] [214])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64]))) preproc.cpp:415 157 {*truncdfsf_fast_sse}
     (nil))
(insn 300 253 315 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 26 xmm5 [orig:214 D.6913 ] [214])) preproc.cpp:415 129 {*movsf_internal}
     (nil))
(note 315 300 307 4 NOTE_INSN_DELETED)
(note 307 315 254 4 NOTE_INSN_DELETED)
(insn 254 307 255 4 (set (reg:DF 0 ax [297])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])) preproc.cpp:415 128 {*movdf_internal}
     (nil))
(insn 255 254 301 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [297])) preproc.cpp:415 128 {*movdf_internal}
     (nil))
(insn 301 255 256 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) preproc.cpp:415 128 {*movdf_internal}
     (nil))
(call_insn/u 256 301 258 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fae98e445e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:415 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 258 256 302 4 (set (reg:SF 21 xmm0 [orig:216 D.6913 ] [216])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:215 D.6914 ] [215]))) preproc.cpp:415 157 {*truncdfsf_fast_sse}
     (nil))
(note 302 258 311 4 NOTE_INSN_DELETED)
(note 311 302 259 4 NOTE_INSN_DELETED)
(insn 259 311 260 4 (set (reg:SF 21 xmm0 [orig:217 D.6913 ] [217])
        (mult:SF (reg:SF 21 xmm0 [orig:216 D.6913 ] [216])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) preproc.cpp:415 797 {*fop_sf_comm_sse}
     (nil))
(insn 260 259 261 4 (set (mem:SF (reg/f:DI 3 bx [orig:213 D.6912 ] [213]) [0 *_164+0 S4 A32])
        (reg:SF 21 xmm0 [orig:217 D.6913 ] [217])) preproc.cpp:415 129 {*movsf_internal}
     (nil))
(insn 261 260 262 4 (set (reg:SI 0 ax [298])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:416 90 {*movsi_internal}
     (nil))
(insn 262 261 263 4 (set (reg:DI 0 ax [orig:218 D.6915 ] [218])
        (sign_extend:DI (reg:SI 0 ax [298]))) preproc.cpp:416 142 {*extendsidi2_rex64}
     (nil))
(insn 263 262 264 4 (parallel [
            (set (reg:DI 0 ax [orig:219 D.6915 ] [219])
                (plus:DI (reg:DI 0 ax [orig:218 D.6915 ] [218])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:416 218 {*adddi_1}
     (nil))
(insn 264 263 265 4 (parallel [
            (set (reg:DI 1 dx [orig:220 D.6915 ] [220])
                (ashift:DI (reg:DI 0 ax [orig:219 D.6915 ] [219])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:416 512 {*ashldi3_1}
     (nil))
(insn 265 264 266 4 (set (reg/f:DI 0 ax [299])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:416 89 {*movdi_internal}
     (nil))
(insn 266 265 267 4 (parallel [
            (set (reg/f:DI 3 bx [orig:221 D.6912 ] [221])
                (plus:DI (reg:DI 1 dx [orig:220 D.6915 ] [220])
                    (reg/f:DI 0 ax [299])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:416 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:220 D.6915 ] [220]))
        (nil)))
(insn 267 266 303 4 (set (reg:SF 27 xmm6 [orig:222 D.6913 ] [222])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64]))) preproc.cpp:416 157 {*truncdfsf_fast_sse}
     (nil))
(insn 303 267 314 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 27 xmm6 [orig:222 D.6913 ] [222])) preproc.cpp:416 129 {*movsf_internal}
     (nil))
(note 314 303 306 4 NOTE_INSN_DELETED)
(note 306 314 268 4 NOTE_INSN_DELETED)
(insn 268 306 269 4 (set (reg:DF 0 ax [300])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])) preproc.cpp:416 128 {*movdf_internal}
     (nil))
(insn 269 268 304 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [300])) preproc.cpp:416 128 {*movdf_internal}
     (nil))
(insn 304 269 270 4 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) preproc.cpp:416 128 {*movdf_internal}
     (nil))
(call_insn/u 270 304 272 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fae98e815e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:416 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 272 270 305 4 (set (reg:SF 21 xmm0 [orig:224 D.6913 ] [224])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:223 D.6914 ] [223]))) preproc.cpp:416 157 {*truncdfsf_fast_sse}
     (nil))
(note 305 272 310 4 NOTE_INSN_DELETED)
(note 310 305 273 4 NOTE_INSN_DELETED)
(insn 273 310 274 4 (set (reg:SF 21 xmm0 [orig:225 D.6913 ] [225])
        (mult:SF (reg:SF 21 xmm0 [orig:224 D.6913 ] [224])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) preproc.cpp:416 797 {*fop_sf_comm_sse}
     (nil))
(insn 274 273 275 4 (set (mem:SF (reg/f:DI 3 bx [orig:221 D.6912 ] [221]) [0 *_173+0 S4 A32])
        (reg:SF 21 xmm0 [orig:225 D.6913 ] [225])) preproc.cpp:416 129 {*movsf_internal}
     (nil))
(insn 275 274 291 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:385 217 {*addsi_1}
     (nil))
(jump_insn 291 275 292 4 (set (pc)
        (label_ref 276)) preproc.cpp:385 654 {jump}
     (nil)
 -> 276)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 292 291 279)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 226 227
(code_label 279 292 280 5 73 "" [1 uses])
(note 280 279 281 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 281 280 284 5 (set (reg:SI 0 ax [orig:226 D.6910 ] [226])
        (const_int 1 [0x1])) preproc.cpp:419 90 {*movsi_internal}
     (nil))
(insn 284 281 288 5 (set (reg:SI 0 ax [orig:227 <retval> ] [227])
        (reg:SI 0 ax [orig:226 D.6910 ] [226])) preproc.cpp:419 90 {*movsi_internal}
     (nil))
(insn 288 284 289 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:227 <retval> ] [227])) preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 289 288 293 5 (use (reg/i:SI 0 ax)) preproc.cpp:421 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 293 289 0 NOTE_INSN_DELETED)

;; Function int filter(float*, float*, Procpar_info*, Preprocess*) (_Z6filterPfS_P12Procpar_infoP10Preprocess, funcdef_no=9, decl_uid=5488, cgraph_uid=9, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 10:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 11:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 12:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 13:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 15:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=491 from oldreg=347, assigning class GENERAL_REGS to r491
   18: {r491:SI=r491:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  560: r491:SI=r88:SI
    Inserting insn reload after:
  561: r347:SI=r491:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 23:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=492 from oldreg=350, assigning class SSE_REGS to r492
   23: r492:SF=r492:SF/r90:SF
      REG_DEAD r90:SF
      REG_DEAD r87:SF
    Inserting insn reload before:
  562: r492:SF=r87:SF
    Inserting insn reload after:
  563: r350:SF=r492:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 24:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 26:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 27:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 29:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 44:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 48:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 55:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 56:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 57:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=493 from oldreg=365, assigning class GENERAL_REGS to r493
   70: {r493:SI=r493:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  564: r493:SI=r110:SI
    Inserting insn reload after:
  565: r365:SI=r493:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 75:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 76:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =x  (1) 0  (2) xm {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 80:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 81:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 85:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 106:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 107:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 113
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 114:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 115:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 117:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 118:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 131:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=494 from oldreg=383, assigning class GENERAL_REGS to r494
  131: {r494:SI=r494:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  566: r494:SI=r140:SI
    Inserting insn reload after:
  567: r383:SI=r494:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 137:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =x  (1) 0  (2) xm {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 141:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 145:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 149:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 150:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 153:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) x  (1) xm {*cmpiusf_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 185:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 186
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 187:  (0) v  (1) m {*movsf_internal}
      Creating newreg=495 from oldreg=160, assigning class ALL_SSE_REGS to r495
  187: r495:SF=[r159:DI]
      REG_DEAD r159:DI
    Inserting insn reload after:
  568: r160:SF=r495:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 568:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 189:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=496 from oldreg=399, assigning class GENERAL_REGS to r496
  189: {r496:SI=r496:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  569: r496:SI=r398:SI
    Inserting insn reload after:
  570: r399:SI=r496:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 193:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 195:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 197
	 Choosing alt 0 in insn 197:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 200:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 201
	 Choosing alt 0 in insn 201:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 203:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 205
	 Choosing alt 0 in insn 205:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 210
	 Choosing alt 0 in insn 210:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=497 from oldreg=160, assigning class SSE_REGS to r497
      Making reload reg 497 for reg 160 optional
  210: r174:SF=r173:SF*r497:SF
      REG_DEAD r173:SF
      REG_DEAD r160:SF
    Inserting insn reload before:
  571: r497:SF=r160:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 571:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 211:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 215:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 223
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 224:  (0) v  (1) m {*movsf_internal}
      Creating newreg=498 from oldreg=183, assigning class ALL_SSE_REGS to r498
  224: r498:SF=[r182:DI]
      REG_DEAD r182:DI
    Inserting insn reload after:
  572: r183:SF=r498:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 572:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 226:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=499 from oldreg=410, assigning class GENERAL_REGS to r499
  226: {r499:SI=r499:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  573: r499:SI=r409:SI
    Inserting insn reload after:
  574: r410:SI=r499:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 227
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 230:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 232:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 234
	 Choosing alt 0 in insn 234:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 235:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 237:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 238
	 Choosing alt 0 in insn 238:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 240:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 242
	 Choosing alt 0 in insn 242:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 247
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=500 from oldreg=183, assigning class SSE_REGS to r500
      Making reload reg 500 for reg 183 optional
  247: r197:SF=r196:SF*r500:SF
      REG_DEAD r196:SF
      REG_DEAD r183:SF
    Inserting insn reload before:
  575: r500:SF=r183:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 575:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 248:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 260:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 265:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 266:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 267
	 Choosing alt 0 in insn 267:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 268:  (0) v  (1) m {*movsf_internal}
      Creating newreg=501 from oldreg=205, assigning class ALL_SSE_REGS to r501
  268: r501:SF=[r204:DI]
      REG_DEAD r204:DI
    Inserting insn reload after:
  576: r205:SF=r501:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 576:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 270:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=502 from oldreg=422, assigning class GENERAL_REGS to r502
  270: {r502:SI=r502:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  577: r502:SI=r421:SI
    Inserting insn reload after:
  578: r422:SI=r502:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 271
	 Choosing alt 0 in insn 271:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 274:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 276:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 278
	 Choosing alt 0 in insn 278:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 281:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 282
	 Choosing alt 0 in insn 282:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 284:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 286
	 Choosing alt 0 in insn 286:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 291
	 Choosing alt 0 in insn 291:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=503 from oldreg=205, assigning class SSE_REGS to r503
      Making reload reg 503 for reg 205 optional
  291: r219:SF=r218:SF*r503:SF
      REG_DEAD r218:SF
      REG_DEAD r205:SF
    Inserting insn reload before:
  579: r503:SF=r205:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 579:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 292:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 295:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 296:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 298:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 301:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 302:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 303:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 304
	 Choosing alt 0 in insn 304:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 305:  (0) v  (1) m {*movsf_internal}
      Creating newreg=504 from oldreg=228, assigning class ALL_SSE_REGS to r504
  305: r504:SF=[r227:DI]
      REG_DEAD r227:DI
    Inserting insn reload after:
  580: r228:SF=r504:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 580:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 307:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=505 from oldreg=433, assigning class GENERAL_REGS to r505
  307: {r505:SI=r505:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  581: r505:SI=r432:SI
    Inserting insn reload after:
  582: r433:SI=r505:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 308
	 Choosing alt 0 in insn 308:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 311:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 313:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 315
	 Choosing alt 0 in insn 315:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 316:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 318:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 319
	 Choosing alt 0 in insn 319:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 320:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 321:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 323
	 Choosing alt 0 in insn 323:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 328
	 Choosing alt 0 in insn 328:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=506 from oldreg=228, assigning class SSE_REGS to r506
      Making reload reg 506 for reg 228 optional
  328: r242:SF=r241:SF*r506:SF
      REG_DEAD r241:SF
      REG_DEAD r228:SF
    Inserting insn reload before:
  583: r506:SF=r228:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 583:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 329:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 332:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 339:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 340:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 341:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 344:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) x  (1) xm {*cmpiusf_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 351:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 353:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 355:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 358:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 363:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 365:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 370:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 371:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 372:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 375:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 376:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 377
	 Choosing alt 0 in insn 377:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 378:  (0) v  (1) m {*movsf_internal}
      Creating newreg=507 from oldreg=254, assigning class ALL_SSE_REGS to r507
  378: r507:SF=[r253:DI]
      REG_DEAD r253:DI
    Inserting insn reload after:
  584: r254:SF=r507:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 584:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 379:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 380:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=508 from oldreg=450, assigning class GENERAL_REGS to r508
  380: {r508:SI=r508:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  585: r508:SI=r449:SI
    Inserting insn reload after:
  586: r450:SI=r508:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 381
	 Choosing alt 0 in insn 381:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 384:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 386:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 388
	 Choosing alt 0 in insn 388:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 389:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 391:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 392
	 Choosing alt 0 in insn 392:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 394:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 395:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 397
	 Choosing alt 0 in insn 397:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 402
	 Choosing alt 0 in insn 402:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=509 from oldreg=254, assigning class SSE_REGS to r509
      Making reload reg 509 for reg 254 optional
  402: r269:SF=r268:SF*r509:SF
      REG_DEAD r268:SF
      REG_DEAD r254:SF
    Inserting insn reload before:
  587: r509:SF=r254:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 587:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 403:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 406:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 407:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 409:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 412:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 413:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 414:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 415
	 Choosing alt 0 in insn 415:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 416:  (0) v  (1) m {*movsf_internal}
      Creating newreg=510 from oldreg=278, assigning class ALL_SSE_REGS to r510
  416: r510:SF=[r277:DI]
      REG_DEAD r277:DI
    Inserting insn reload after:
  588: r278:SF=r510:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 588:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 418:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=511 from oldreg=461, assigning class GENERAL_REGS to r511
  418: {r511:SI=r511:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  589: r511:SI=r460:SI
    Inserting insn reload after:
  590: r461:SI=r511:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 419
	 Choosing alt 0 in insn 419:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 422:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 424:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 426
	 Choosing alt 0 in insn 426:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 427:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 429:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 430
	 Choosing alt 0 in insn 430:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 432:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 433:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 435
	 Choosing alt 0 in insn 435:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 440
	 Choosing alt 0 in insn 440:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=512 from oldreg=278, assigning class SSE_REGS to r512
      Making reload reg 512 for reg 278 optional
  440: r293:SF=r292:SF*r512:SF
      REG_DEAD r292:SF
      REG_DEAD r278:SF
    Inserting insn reload before:
  591: r512:SF=r278:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 591:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 441:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 446:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 453:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 455:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 458:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 459:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 460
	 Choosing alt 0 in insn 460:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 461:  (0) v  (1) m {*movsf_internal}
      Creating newreg=513 from oldreg=301, assigning class ALL_SSE_REGS to r513
  461: r513:SF=[r300:DI]
      REG_DEAD r300:DI
    Inserting insn reload after:
  592: r301:SF=r513:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 592:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 463:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=514 from oldreg=473, assigning class GENERAL_REGS to r514
  463: {r514:SI=r514:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  593: r514:SI=r472:SI
    Inserting insn reload after:
  594: r473:SI=r514:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 464
	 Choosing alt 0 in insn 464:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 469:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 471
	 Choosing alt 0 in insn 471:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 472:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 474:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 475
	 Choosing alt 0 in insn 475:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 476:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 477:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 478:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 480
	 Choosing alt 0 in insn 480:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 485
	 Choosing alt 0 in insn 485:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=515 from oldreg=301, assigning class SSE_REGS to r515
      Making reload reg 515 for reg 301 optional
  485: r316:SF=r315:SF*r515:SF
      REG_DEAD r315:SF
      REG_DEAD r301:SF
    Inserting insn reload before:
  595: r515:SF=r301:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 595:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 486:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 489:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 490:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 491:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 492:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 495:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 496:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 497:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 498
	 Choosing alt 0 in insn 498:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 499:  (0) v  (1) m {*movsf_internal}
      Creating newreg=516 from oldreg=325, assigning class ALL_SSE_REGS to r516
  499: r516:SF=[r324:DI]
      REG_DEAD r324:DI
    Inserting insn reload after:
  596: r325:SF=r516:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 596:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 501:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=517 from oldreg=484, assigning class GENERAL_REGS to r517
  501: {r517:SI=r517:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  597: r517:SI=r483:SI
    Inserting insn reload after:
  598: r484:SI=r517:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 502
	 Choosing alt 0 in insn 502:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 505:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 507:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 509
	 Choosing alt 0 in insn 509:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 510:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 512:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 513
	 Choosing alt 0 in insn 513:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 514:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 515:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 516:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 518
	 Choosing alt 0 in insn 518:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 523
	 Choosing alt 0 in insn 523:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=518 from oldreg=325, assigning class SSE_REGS to r518
      Making reload reg 518 for reg 325 optional
  523: r340:SF=r339:SF*r518:SF
      REG_DEAD r339:SF
      REG_DEAD r325:SF
    Inserting insn reload before:
  599: r518:SF=r325:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 599:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 524:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 527:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=519 from oldreg=183, assigning class ALL_SSE_REGS to inheritance r519
    Original reg change 183->519 (bb14):
  572: r519:SF=r498:SF
    Add original<-inheritance after:
  600: r183:SF=r519:SF

    Inheritance reuse change 183->519 (bb14):
  575: r500:SF=r519:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=520 from oldreg=160, assigning class ALL_SSE_REGS to inheritance r520
    Original reg change 160->520 (bb14):
  568: r520:SF=r495:SF
    Add original<-inheritance after:
  601: r160:SF=r520:SF

    Inheritance reuse change 160->520 (bb14):
  571: r497:SF=r520:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   600: r183:SF=r519:SF
deleting insn with uid = 600.
	    Removing dead insn:
   601: r160:SF=r520:SF
deleting insn with uid = 601.
EBB 15
EBB 16
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=521 from oldreg=228, assigning class ALL_SSE_REGS to inheritance r521
    Original reg change 228->521 (bb16):
  580: r521:SF=r504:SF
    Add original<-inheritance after:
  602: r228:SF=r521:SF

    Inheritance reuse change 228->521 (bb16):
  583: r506:SF=r521:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=522 from oldreg=205, assigning class ALL_SSE_REGS to inheritance r522
    Original reg change 205->522 (bb16):
  576: r522:SF=r501:SF
    Add original<-inheritance after:
  603: r205:SF=r522:SF

    Inheritance reuse change 205->522 (bb16):
  579: r503:SF=r522:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   602: r228:SF=r521:SF
deleting insn with uid = 602.
	    Removing dead insn:
   603: r205:SF=r522:SF
deleting insn with uid = 603.
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=523 from oldreg=278, assigning class ALL_SSE_REGS to inheritance r523
    Original reg change 278->523 (bb24):
  588: r523:SF=r510:SF
    Add original<-inheritance after:
  604: r278:SF=r523:SF

    Inheritance reuse change 278->523 (bb24):
  591: r512:SF=r523:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=524 from oldreg=254, assigning class ALL_SSE_REGS to inheritance r524
    Original reg change 254->524 (bb24):
  584: r524:SF=r507:SF
    Add original<-inheritance after:
  605: r254:SF=r524:SF

    Inheritance reuse change 254->524 (bb24):
  587: r509:SF=r524:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   604: r278:SF=r523:SF
deleting insn with uid = 604.
	    Removing dead insn:
   605: r254:SF=r524:SF
deleting insn with uid = 605.
EBB 25
EBB 26
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=525 from oldreg=325, assigning class ALL_SSE_REGS to inheritance r525
    Original reg change 325->525 (bb26):
  596: r525:SF=r516:SF
    Add original<-inheritance after:
  606: r325:SF=r525:SF

    Inheritance reuse change 325->525 (bb26):
  599: r518:SF=r525:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=526 from oldreg=301, assigning class ALL_SSE_REGS to inheritance r526
    Original reg change 301->526 (bb26):
  592: r526:SF=r513:SF
    Add original<-inheritance after:
  607: r301:SF=r526:SF

    Inheritance reuse change 301->526 (bb26):
  595: r515:SF=r526:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   606: r325:SF=r525:SF
deleting insn with uid = 606.
	    Removing dead insn:
   607: r301:SF=r526:SF
deleting insn with uid = 607.
EBB 27
EBB 28

********** Pseudo live ranges #1: **********

  BB 28
   Insn 541: point = 0
   Insn 540: point = 0
   Insn 536: point = 1
   Insn 533: point = 3
  BB 21
   Insn 356: point = 4
   Insn 355: point = 4
   Insn 354: point = 5
   Insn 353: point = 7
  BB 27
   Insn 557: point = 8
   Insn 527: point = 8
  BB 24
   Insn 555: point = 8
   Insn 441: point = 8
   Insn 440: point = 9
   Insn 591: point = 11
	   Creating copy r512<-r523@1
   Insn 439: point = 13
   Insn 438: point = 15
   Insn 437: point = 16
   Insn 436: point = 16
   Insn 435: point = 17
   Insn 434: point = 19
   Insn 433: point = 21
   Insn 432: point = 23
   Insn 431: point = 25
   Insn 430: point = 26
   Insn 429: point = 28
   Insn 428: point = 29
   Insn 427: point = 31
   Insn 426: point = 32
   Insn 425: point = 34
   Insn 424: point = 35
   Insn 423: point = 37
   Insn 422: point = 38
   Insn 421: point = 40
   Insn 420: point = 42
   Insn 419: point = 44
   Insn 590: point = 46
	Hard reg 1 is preferable by r511 with profit 1
   Insn 418: point = 48
   Insn 589: point = 48
   Insn 417: point = 49
   Insn 588: point = 50
	   Creating copy r510->r523@1
   Insn 416: point = 52
   Insn 415: point = 54
   Insn 414: point = 56
   Insn 413: point = 57
   Insn 412: point = 59
   Insn 411: point = 61
   Insn 410: point = 63
   Insn 409: point = 64
   Insn 408: point = 66
   Insn 407: point = 67
   Insn 406: point = 69
   Insn 405: point = 71
   Insn 404: point = 73
   Insn 403: point = 74
   Insn 402: point = 75
   Insn 587: point = 77
	   Creating copy r509<-r524@1
   Insn 401: point = 79
   Insn 400: point = 81
   Insn 399: point = 82
   Insn 398: point = 82
   Insn 397: point = 83
   Insn 396: point = 85
   Insn 395: point = 87
   Insn 394: point = 89
   Insn 393: point = 91
   Insn 392: point = 92
   Insn 391: point = 94
   Insn 390: point = 95
   Insn 389: point = 97
   Insn 388: point = 98
   Insn 387: point = 100
   Insn 386: point = 101
   Insn 385: point = 103
   Insn 384: point = 104
   Insn 383: point = 106
   Insn 382: point = 108
   Insn 381: point = 110
   Insn 586: point = 112
	Hard reg 1 is preferable by r508 with profit 1
   Insn 380: point = 114
   Insn 585: point = 114
   Insn 379: point = 115
   Insn 584: point = 116
	   Creating copy r507->r524@1
   Insn 378: point = 118
   Insn 377: point = 120
   Insn 376: point = 122
   Insn 375: point = 123
   Insn 374: point = 125
   Insn 373: point = 127
   Insn 372: point = 128
   Insn 371: point = 130
   Insn 370: point = 131
   Insn 369: point = 133
   Insn 368: point = 135
  BB 26
   Insn 524: point = 136
   Insn 523: point = 137
   Insn 599: point = 139
	   Creating copy r518<-r525@1
   Insn 522: point = 141
   Insn 521: point = 143
   Insn 520: point = 144
   Insn 519: point = 144
   Insn 518: point = 145
   Insn 517: point = 147
   Insn 516: point = 149
   Insn 515: point = 151
   Insn 514: point = 153
   Insn 513: point = 154
   Insn 512: point = 156
   Insn 511: point = 157
   Insn 510: point = 159
   Insn 509: point = 160
   Insn 508: point = 162
   Insn 507: point = 163
   Insn 506: point = 165
   Insn 505: point = 166
   Insn 504: point = 168
   Insn 503: point = 170
   Insn 502: point = 172
   Insn 598: point = 174
	Hard reg 1 is preferable by r517 with profit 1
   Insn 501: point = 176
   Insn 597: point = 176
   Insn 500: point = 177
   Insn 596: point = 178
	   Creating copy r516->r525@1
   Insn 499: point = 180
   Insn 498: point = 182
   Insn 497: point = 184
   Insn 496: point = 185
   Insn 495: point = 187
   Insn 494: point = 189
   Insn 493: point = 191
   Insn 492: point = 192
   Insn 491: point = 194
   Insn 490: point = 195
   Insn 489: point = 197
   Insn 488: point = 199
   Insn 487: point = 201
   Insn 486: point = 202
   Insn 485: point = 203
   Insn 595: point = 205
	   Creating copy r515<-r526@1
   Insn 484: point = 207
   Insn 483: point = 209
   Insn 482: point = 210
   Insn 481: point = 210
   Insn 480: point = 211
   Insn 479: point = 213
   Insn 478: point = 215
   Insn 477: point = 217
   Insn 476: point = 219
   Insn 475: point = 220
   Insn 474: point = 222
   Insn 473: point = 223
   Insn 472: point = 225
   Insn 471: point = 226
   Insn 470: point = 228
   Insn 469: point = 229
   Insn 468: point = 231
   Insn 467: point = 232
   Insn 466: point = 234
   Insn 465: point = 236
   Insn 464: point = 238
   Insn 594: point = 240
	Hard reg 1 is preferable by r514 with profit 1
   Insn 463: point = 242
   Insn 593: point = 242
   Insn 462: point = 243
   Insn 592: point = 244
	   Creating copy r513->r526@1
   Insn 461: point = 246
   Insn 460: point = 248
   Insn 459: point = 250
   Insn 458: point = 251
   Insn 457: point = 253
   Insn 456: point = 255
   Insn 455: point = 256
   Insn 454: point = 258
   Insn 453: point = 259
   Insn 452: point = 261
   Insn 451: point = 263
  BB 25
   Insn 449: point = 264
   Insn 448: point = 264
   Insn 447: point = 265
   Insn 446: point = 267
  BB 23
   Insn 366: point = 268
   Insn 365: point = 268
   Insn 364: point = 269
   Insn 363: point = 271
  BB 22
   Insn 361: point = 272
   Insn 360: point = 272
   Insn 359: point = 273
   Insn 358: point = 275
  BB 20
   Insn 351: point = 276
  BB 19
   Insn 346: point = 276
   Insn 345: point = 276
   Insn 344: point = 277
  BB 18
   Insn 343: point = 279
   Insn 342: point = 279
   Insn 341: point = 280
   Insn 340: point = 281
   Insn 339: point = 283
   Insn 338: point = 285
  BB 11
   Insn 165: point = 286
   Insn 164: point = 286
   Insn 163: point = 287
   Insn 162: point = 289
  BB 17
   Insn 553: point = 290
   Insn 332: point = 290
  BB 14
   Insn 551: point = 290
   Insn 248: point = 290
   Insn 247: point = 291
   Insn 575: point = 293
	   Creating copy r500<-r519@1
   Insn 246: point = 295
   Insn 245: point = 297
   Insn 244: point = 298
   Insn 243: point = 298
   Insn 242: point = 299
   Insn 241: point = 301
   Insn 240: point = 303
   Insn 239: point = 305
   Insn 238: point = 306
   Insn 237: point = 308
   Insn 236: point = 309
   Insn 235: point = 311
   Insn 234: point = 312
   Insn 233: point = 314
   Insn 232: point = 315
   Insn 231: point = 317
   Insn 230: point = 318
   Insn 229: point = 320
   Insn 228: point = 322
   Insn 227: point = 324
   Insn 574: point = 326
	Hard reg 1 is preferable by r499 with profit 1
   Insn 226: point = 328
   Insn 573: point = 328
   Insn 225: point = 329
   Insn 572: point = 330
	   Creating copy r498->r519@1
   Insn 224: point = 332
   Insn 223: point = 334
   Insn 222: point = 336
   Insn 221: point = 337
   Insn 220: point = 339
   Insn 219: point = 341
   Insn 218: point = 343
   Insn 217: point = 344
   Insn 216: point = 346
   Insn 215: point = 347
   Insn 214: point = 349
   Insn 213: point = 351
   Insn 212: point = 353
   Insn 211: point = 354
   Insn 210: point = 355
   Insn 571: point = 357
	   Creating copy r497<-r520@1
   Insn 209: point = 359
   Insn 208: point = 361
   Insn 207: point = 362
   Insn 206: point = 362
   Insn 205: point = 363
   Insn 204: point = 365
   Insn 203: point = 367
   Insn 202: point = 369
   Insn 201: point = 370
   Insn 200: point = 372
   Insn 199: point = 373
   Insn 198: point = 375
   Insn 197: point = 376
   Insn 196: point = 378
   Insn 195: point = 379
   Insn 194: point = 381
   Insn 193: point = 382
   Insn 192: point = 384
   Insn 191: point = 386
   Insn 190: point = 388
   Insn 570: point = 390
	Hard reg 1 is preferable by r496 with profit 1
   Insn 189: point = 392
   Insn 569: point = 392
   Insn 188: point = 393
   Insn 568: point = 394
	   Creating copy r495->r520@1
   Insn 187: point = 396
   Insn 186: point = 398
   Insn 185: point = 400
   Insn 184: point = 401
   Insn 183: point = 403
   Insn 182: point = 405
   Insn 181: point = 406
   Insn 180: point = 408
   Insn 179: point = 409
   Insn 178: point = 411
   Insn 177: point = 413
  BB 16
   Insn 329: point = 414
   Insn 328: point = 415
   Insn 583: point = 417
	   Creating copy r506<-r521@1
   Insn 327: point = 419
   Insn 326: point = 421
   Insn 325: point = 422
   Insn 324: point = 422
   Insn 323: point = 423
   Insn 322: point = 425
   Insn 321: point = 427
   Insn 320: point = 429
   Insn 319: point = 430
   Insn 318: point = 432
   Insn 317: point = 433
   Insn 316: point = 435
   Insn 315: point = 436
   Insn 314: point = 438
   Insn 313: point = 439
   Insn 312: point = 441
   Insn 311: point = 442
   Insn 310: point = 444
   Insn 309: point = 446
   Insn 308: point = 448
   Insn 582: point = 450
	Hard reg 1 is preferable by r505 with profit 1
   Insn 307: point = 452
   Insn 581: point = 452
   Insn 306: point = 453
   Insn 580: point = 454
	   Creating copy r504->r521@1
   Insn 305: point = 456
   Insn 304: point = 458
   Insn 303: point = 460
   Insn 302: point = 461
   Insn 301: point = 463
   Insn 300: point = 465
   Insn 299: point = 467
   Insn 298: point = 468
   Insn 297: point = 470
   Insn 296: point = 471
   Insn 295: point = 473
   Insn 294: point = 475
   Insn 293: point = 477
   Insn 292: point = 478
   Insn 291: point = 479
   Insn 579: point = 481
	   Creating copy r503<-r522@1
   Insn 290: point = 483
   Insn 289: point = 485
   Insn 288: point = 486
   Insn 287: point = 486
   Insn 286: point = 487
   Insn 285: point = 489
   Insn 284: point = 491
   Insn 283: point = 493
   Insn 282: point = 494
   Insn 281: point = 496
   Insn 280: point = 497
   Insn 279: point = 499
   Insn 278: point = 500
   Insn 277: point = 502
   Insn 276: point = 503
   Insn 275: point = 505
   Insn 274: point = 506
   Insn 273: point = 508
   Insn 272: point = 510
   Insn 271: point = 512
   Insn 578: point = 514
	Hard reg 1 is preferable by r502 with profit 1
   Insn 270: point = 516
   Insn 577: point = 516
   Insn 269: point = 517
   Insn 576: point = 518
	   Creating copy r501->r522@1
   Insn 268: point = 520
   Insn 267: point = 522
   Insn 266: point = 524
   Insn 265: point = 525
   Insn 264: point = 527
   Insn 263: point = 529
   Insn 262: point = 530
   Insn 261: point = 532
   Insn 260: point = 533
   Insn 259: point = 535
   Insn 258: point = 537
  BB 15
   Insn 256: point = 538
   Insn 255: point = 538
   Insn 254: point = 539
   Insn 253: point = 541
  BB 13
   Insn 175: point = 542
   Insn 174: point = 542
   Insn 173: point = 543
   Insn 172: point = 545
  BB 12
   Insn 170: point = 546
   Insn 169: point = 546
   Insn 168: point = 547
   Insn 167: point = 549
  BB 10
   Insn 160: point = 550
  BB 9
   Insn 155: point = 550
   Insn 154: point = 550
   Insn 153: point = 551
  BB 8
   Insn 152: point = 553
   Insn 151: point = 553
   Insn 150: point = 554
   Insn 149: point = 555
   Insn 148: point = 557
  BB 7
   Insn 145: point = 558
   Insn 144: point = 559
   Insn 143: point = 561
   Insn 142: point = 563
   Insn 141: point = 565
   Insn 140: point = 566
   Insn 139: point = 568
   Insn 138: point = 570
   Insn 137: point = 571
   Insn 136: point = 573
   Insn 135: point = 575
   Insn 134: point = 577
   Insn 133: point = 579
   Insn 132: point = 581
   Insn 567: point = 583
	Hard reg 1 is preferable by r494 with profit 1
   Insn 131: point = 585
   Insn 566: point = 585
   Insn 130: point = 586
   Insn 129: point = 588
   Insn 128: point = 590
   Insn 127: point = 591
   Insn 126: point = 593
   Insn 125: point = 594
   Insn 124: point = 596
   Insn 123: point = 598
   Insn 122: point = 599
   Insn 121: point = 599
   Insn 120: point = 600
   Insn 119: point = 602
   Insn 118: point = 604
   Insn 117: point = 605
   Insn 116: point = 607
   Insn 115: point = 608
   Insn 114: point = 609
   Insn 113: point = 611
   Insn 112: point = 613
   Insn 111: point = 614
   Insn 110: point = 616
   Insn 109: point = 618
   Insn 108: point = 620
   Insn 107: point = 621
   Insn 106: point = 622
   Insn 105: point = 624
   Insn 104: point = 626
   Insn 103: point = 627
   Insn 102: point = 629
   Insn 101: point = 631
   Insn 100: point = 633
   Insn 99: point = 635
  BB 6
   Insn 97: point = 636
   Insn 96: point = 636
   Insn 95: point = 637
   Insn 94: point = 639
   Insn 93: point = 641
  BB 5
   Insn 91: point = 642
   Insn 90: point = 642
   Insn 89: point = 643
   Insn 88: point = 645
  BB 4
   Insn 85: point = 646
   Insn 84: point = 647
   Insn 83: point = 648
   Insn 82: point = 650
   Insn 81: point = 652
   Insn 80: point = 654
   Insn 79: point = 655
   Insn 78: point = 657
   Insn 77: point = 659
   Insn 76: point = 660
   Insn 75: point = 662
   Insn 74: point = 664
   Insn 73: point = 666
   Insn 72: point = 668
   Insn 71: point = 670
   Insn 565: point = 672
	Hard reg 1 is preferable by r493 with profit 1
   Insn 70: point = 674
   Insn 564: point = 674
   Insn 69: point = 675
   Insn 68: point = 677
   Insn 67: point = 679
   Insn 66: point = 680
   Insn 65: point = 682
   Insn 64: point = 683
   Insn 63: point = 685
   Insn 62: point = 687
   Insn 61: point = 688
   Insn 60: point = 688
   Insn 59: point = 689
   Insn 58: point = 691
   Insn 57: point = 693
   Insn 56: point = 694
   Insn 55: point = 695
   Insn 54: point = 697
   Insn 53: point = 699
   Insn 52: point = 700
   Insn 51: point = 702
   Insn 50: point = 704
   Insn 49: point = 706
   Insn 48: point = 707
   Insn 47: point = 708
   Insn 46: point = 710
   Insn 45: point = 712
   Insn 44: point = 713
   Insn 43: point = 715
   Insn 42: point = 717
   Insn 41: point = 719
   Insn 40: point = 721
  BB 3
   Insn 38: point = 722
   Insn 37: point = 722
   Insn 36: point = 723
   Insn 35: point = 725
  BB 2
   Insn 33: point = 726
   Insn 32: point = 726
   Insn 31: point = 727
   Insn 30: point = 729
   Insn 29: point = 730
   Insn 28: point = 731
   Insn 27: point = 733
   Insn 26: point = 734
   Insn 25: point = 736
   Insn 24: point = 737
   Insn 563: point = 738
	Hard reg 21 is preferable by r492 with profit 1
   Insn 23: point = 740
   Insn 562: point = 741
	Hard reg 21 is preferable by r492 with profit 1
	Hard reg 22 is preferable by r492 with profit 1
   Insn 22: point = 743
   Insn 21: point = 745
   Insn 20: point = 747
   Insn 19: point = 749
   Insn 561: point = 751
	Hard reg 1 is preferable by r491 with profit 1
   Insn 18: point = 753
   Insn 560: point = 753
   Insn 17: point = 754
   Insn 16: point = 756
   Insn 15: point = 757
   Insn 14: point = 759
   Insn 13: point = 760
   Insn 12: point = 761
   Insn 11: point = 762
   Insn 10: point = 763
   Insn 9: point = 764
   Insn 5: point = 764
   Insn 4: point = 764
   Insn 3: point = 764
   Insn 2: point = 764
 r87: [742..757]
 r88: [750..754]
 r89: [744..745]
 r90: [740..743]
 r91: [732..734]
 r92: [726..727]
 r93: [722..723]
 r94: [718..719]
 r95: [716..717]
 r96: [714..715]
 r97: [711..713]
 r98: [709..710]
 r99: [703..704]
 r100: [701..702]
 r101: [698..700]
 r102: [696..697]
 r103: [690..691]
 r104: [688..689]
 r105: [686..687]
 r106: [684..685]
 r107: [681..683]
 r108: [651..680]
 r109: [676..677]
 r110: [671..675]
 r111: [665..666]
 r112: [663..664]
 r113: [661..662]
 r114: [658..660]
 r115: [656..657]
 r116: [653..655]
 r117: [651..652]
 r118: [649..650]
 r119: [646..648]
 r120: [642..643]
 r121: [638..639]
 r122: [636..637]
 r123: [632..633]
 r124: [630..631]
 r125: [628..629]
 r126: [625..627]
 r127: [623..624]
 r128: [617..618]
 r129: [615..616]
 r130: [612..614]
 r131: [610..611]
 r132: [558..605]
 r133: [601..602]
 r134: [599..600]
 r135: [597..598]
 r136: [595..596]
 r137: [592..594]
 r138: [562..591]
 r139: [587..588]
 r140: [582..586]
 r141: [576..577]
 r142: [574..575]
 r143: [572..573]
 r144: [569..571]
 r145: [567..568]
 r146: [564..566]
 r147: [562..563]
 r148: [560..561]
 r149: [558..559]
 r150: [550..555]
 r151: [286..287]
 r152: [546..547]
 r153: [542..543]
 r154: [410..411]
 r155: [407..409]
 r156: [354..406]
 r157: [402..403]
 r158: [399..401]
 r159: [397..398]
 r161: [383..384]
 r162: [380..382]
 r163: [380..381]
 r164: [377..379]
 r165: [377..378]
 r166: [374..376]
 r167: [371..373]
 r168: [364..370]
 r169: [366..367]
 r170: [364..365]
 r171: [362..363]
 r172: [360..361]
 r173: [356..359]
 r174: [354..355]
 r175: [350..351]
 r176: [348..349]
 r177: [345..347]
 r178: [290..344]
 r179: [340..341]
 r180: [338..339]
 r181: [335..337]
 r182: [333..334]
 r184: [319..320]
 r185: [316..318]
 r186: [316..317]
 r187: [313..315]
 r188: [313..314]
 r189: [310..312]
 r190: [307..309]
 r191: [300..306]
 r192: [302..303]
 r193: [300..301]
 r194: [298..299]
 r195: [296..297]
 r196: [292..295]
 r197: [290..291]
 r198: [538..539]
 r199: [534..535]
 r200: [531..533]
 r201: [478..530]
 r202: [526..527]
 r203: [523..525]
 r204: [521..522]
 r206: [507..508]
 r207: [504..506]
 r208: [504..505]
 r209: [501..503]
 r210: [501..502]
 r211: [498..500]
 r212: [495..497]
 r213: [488..494]
 r214: [490..491]
 r215: [488..489]
 r216: [486..487]
 r217: [484..485]
 r218: [480..483]
 r219: [478..479]
 r220: [474..475]
 r221: [472..473]
 r222: [469..471]
 r223: [414..468]
 r224: [464..465]
 r225: [462..463]
 r226: [459..461]
 r227: [457..458]
 r229: [443..444]
 r230: [440..442]
 r231: [440..441]
 r232: [437..439]
 r233: [437..438]
 r234: [434..436]
 r235: [431..433]
 r236: [424..430]
 r237: [426..427]
 r238: [424..425]
 r239: [422..423]
 r240: [420..421]
 r241: [416..419]
 r242: [414..415]
 r243: [282..283]
 r244: [276..281]
 r245: [4..5]
 r246: [272..273]
 r247: [268..269]
 r248: [132..133]
 r249: [129..131]
 r250: [74..128]
 r251: [124..125]
 r252: [121..123]
 r253: [119..120]
 r255: [105..106]
 r256: [102..104]
 r257: [102..103]
 r258: [99..101]
 r259: [99..100]
 r260: [96..98]
 r261: [93..95]
 r262: [84..92]
 r263: [88..89]
 r264: [86..87]
 r265: [84..85]
 r266: [82..83]
 r267: [80..81]
 r268: [76..79]
 r269: [74..75]
 r270: [70..71]
 r271: [68..69]
 r272: [65..67]
 r273: [8..64]
 r274: [60..61]
 r275: [58..59]
 r276: [55..57]
 r277: [53..54]
 r279: [39..40]
 r280: [36..38]
 r281: [36..37]
 r282: [33..35]
 r283: [33..34]
 r284: [30..32]
 r285: [27..29]
 r286: [18..26]
 r287: [22..23]
 r288: [20..21]
 r289: [18..19]
 r290: [16..17]
 r291: [14..15]
 r292: [10..13]
 r293: [8..9]
 r294: [264..265]
 r295: [260..261]
 r296: [257..259]
 r297: [202..256]
 r298: [252..253]
 r299: [249..251]
 r300: [247..248]
 r302: [233..234]
 r303: [230..232]
 r304: [230..231]
 r305: [227..229]
 r306: [227..228]
 r307: [224..226]
 r308: [221..223]
 r309: [212..220]
 r310: [216..217]
 r311: [214..215]
 r312: [212..213]
 r313: [210..211]
 r314: [208..209]
 r315: [204..207]
 r316: [202..203]
 r317: [198..199]
 r318: [196..197]
 r319: [193..195]
 r320: [136..192]
 r321: [188..189]
 r322: [186..187]
 r323: [183..185]
 r324: [181..182]
 r326: [167..168]
 r327: [164..166]
 r328: [164..165]
 r329: [161..163]
 r330: [161..162]
 r331: [158..160]
 r332: [155..157]
 r333: [146..154]
 r334: [150..151]
 r335: [148..149]
 r336: [146..147]
 r337: [144..145]
 r338: [142..143]
 r339: [138..141]
 r340: [136..137]
 r341: [2..3]
 r342: [0..1]
 r343: [762..763]
 r344: [760..761]
 r345: [758..759]
 r346: [755..756]
 r347: [750..751]
 r348: [748..749]
 r349: [746..747]
 r350: [737..738]
 r351: [735..736]
 r352: [730..731]
 r353: [732..733]
 r354: [728..729]
 r355: [724..725]
 r356: [720..721]
 r357: [711..712]
 r358: [707..708]
 r359: [705..706]
 r360: [698..699]
 r361: [694..695]
 r362: [692..693]
 r363: [681..682]
 r364: [678..679]
 r365: [671..672]
 r366: [669..670]
 r367: [667..668]
 r368: [658..659]
 r369: [653..654]
 r370: [646..647]
 r371: [644..645]
 r372: [640..641]
 r373: [634..635]
 r374: [625..626]
 r375: [621..622]
 r376: [619..620]
 r377: [612..613]
 r378: [608..609]
 r379: [606..607]
 r380: [603..604]
 r381: [592..593]
 r382: [589..590]
 r383: [582..583]
 r384: [580..581]
 r385: [578..579]
 r386: [569..570]
 r387: [564..565]
 r388: [556..557]
 r389: [553..554]
 r390: [550..551]
 r391: [288..289]
 r392: [548..549]
 r393: [544..545]
 r394: [412..413]
 r395: [407..408]
 r396: [404..405]
 r397: [399..400]
 r398: [389..393]
 r399: [389..390]
 r400: [387..388]
 r401: [385..386]
 r402: [374..375]
 r403: [371..372]
 r404: [368..369]
 r405: [352..353]
 r406: [345..346]
 r407: [342..343]
 r408: [335..336]
 r409: [325..329]
 r410: [325..326]
 r411: [323..324]
 r412: [321..322]
 r413: [310..311]
 r414: [307..308]
 r415: [304..305]
 r416: [540..541]
 r417: [536..537]
 r418: [531..532]
 r419: [528..529]
 r420: [523..524]
 r421: [513..517]
 r422: [513..514]
 r423: [511..512]
 r424: [509..510]
 r425: [498..499]
 r426: [495..496]
 r427: [492..493]
 r428: [476..477]
 r429: [469..470]
 r430: [466..467]
 r431: [459..460]
 r432: [449..453]
 r433: [449..450]
 r434: [447..448]
 r435: [445..446]
 r436: [434..435]
 r437: [431..432]
 r438: [428..429]
 r439: [284..285]
 r440: [279..280]
 r441: [276..277]
 r442: [6..7]
 r443: [274..275]
 r444: [270..271]
 r445: [134..135]
 r446: [129..130]
 r447: [126..127]
 r448: [121..122]
 r449: [111..115]
 r450: [111..112]
 r451: [109..110]
 r452: [107..108]
 r453: [96..97]
 r454: [93..94]
 r455: [90..91]
 r456: [72..73]
 r457: [65..66]
 r458: [62..63]
 r459: [55..56]
 r460: [45..49]
 r461: [45..46]
 r462: [43..44]
 r463: [41..42]
 r464: [30..31]
 r465: [27..28]
 r466: [24..25]
 r467: [266..267]
 r468: [262..263]
 r469: [257..258]
 r470: [254..255]
 r471: [249..250]
 r472: [239..243]
 r473: [239..240]
 r474: [237..238]
 r475: [235..236]
 r476: [224..225]
 r477: [221..222]
 r478: [218..219]
 r479: [200..201]
 r480: [193..194]
 r481: [190..191]
 r482: [183..184]
 r483: [173..177]
 r484: [173..174]
 r485: [171..172]
 r486: [169..170]
 r487: [158..159]
 r488: [155..156]
 r489: [152..153]
 r491: [752..753]
 r492: [739..741]
 r493: [673..674]
 r494: [584..585]
 r495: [395..396]
 r496: [391..392]
 r497: [356..357]
 r498: [331..332]
 r499: [327..328]
 r500: [292..293]
 r501: [519..520]
 r502: [515..516]
 r503: [480..481]
 r504: [455..456]
 r505: [451..452]
 r506: [416..417]
 r507: [117..118]
 r508: [113..114]
 r509: [76..77]
 r510: [51..52]
 r511: [47..48]
 r512: [10..11]
 r513: [245..246]
 r514: [241..242]
 r515: [204..205]
 r516: [179..180]
 r517: [175..176]
 r518: [138..139]
 r519: [294..330]
 r520: [358..394]
 r521: [418..454]
 r522: [482..518]
 r523: [12..50]
 r524: [78..116]
 r525: [140..178]
 r526: [206..244]
Compressing live ranges: from 764 to 660 - 86%
Ranges after the compression:
 r87: [640..653]
 r88: [648..651]
 r89: [642..643]
 r90: [638..641]
 r91: [632..633]
 r92: [626..627]
 r93: [622..623]
 r94: [618..619]
 r95: [616..617]
 r96: [614..615]
 r97: [612..613]
 r98: [610..611]
 r99: [604..605]
 r100: [602..603]
 r101: [600..601]
 r102: [598..599]
 r103: [592..593]
 r104: [590..591]
 r105: [588..589]
 r106: [586..587]
 r107: [584..585]
 r108: [558..583]
 r109: [580..581]
 r110: [576..579]
 r111: [570..571]
 r112: [568..569]
 r113: [566..567]
 r114: [564..565]
 r115: [562..563]
 r116: [560..561]
 r117: [558..559]
 r118: [556..557]
 r119: [554..555]
 r120: [550..551]
 r121: [546..547]
 r122: [544..545]
 r123: [540..541]
 r124: [538..539]
 r125: [536..537]
 r126: [534..535]
 r127: [532..533]
 r128: [526..527]
 r129: [524..525]
 r130: [522..523]
 r131: [520..521]
 r132: [474..515]
 r133: [512..513]
 r134: [510..511]
 r135: [508..509]
 r136: [506..507]
 r137: [504..505]
 r138: [478..503]
 r139: [500..501]
 r140: [496..499]
 r141: [490..491]
 r142: [488..489]
 r143: [486..487]
 r144: [484..485]
 r145: [482..483]
 r146: [480..481]
 r147: [478..479]
 r148: [476..477]
 r149: [474..475]
 r150: [468..471]
 r151: [244..245]
 r152: [464..465]
 r153: [460..461]
 r154: [348..349]
 r155: [346..347]
 r156: [302..345]
 r157: [342..343]
 r158: [340..341]
 r159: [338..339]
 r161: [326..327]
 r162: [324..325]
 r163: [324..325]
 r164: [322..323]
 r165: [322..323]
 r166: [320..321]
 r167: [318..319]
 r168: [312..317]
 r169: [314..315]
 r170: [312..313]
 r171: [310..311]
 r172: [308..309]
 r173: [304..307]
 r174: [302..303]
 r175: [298..299]
 r176: [296..297]
 r177: [294..295]
 r178: [248..293]
 r179: [290..291]
 r180: [288..289]
 r181: [286..287]
 r182: [284..285]
 r184: [272..273]
 r185: [270..271]
 r186: [270..271]
 r187: [268..269]
 r188: [268..269]
 r189: [266..267]
 r190: [264..265]
 r191: [258..263]
 r192: [260..261]
 r193: [258..259]
 r194: [256..257]
 r195: [254..255]
 r196: [250..253]
 r197: [248..249]
 r198: [456..457]
 r199: [452..453]
 r200: [450..451]
 r201: [406..449]
 r202: [446..447]
 r203: [444..445]
 r204: [442..443]
 r206: [430..431]
 r207: [428..429]
 r208: [428..429]
 r209: [426..427]
 r210: [426..427]
 r211: [424..425]
 r212: [422..423]
 r213: [416..421]
 r214: [418..419]
 r215: [416..417]
 r216: [414..415]
 r217: [412..413]
 r218: [408..411]
 r219: [406..407]
 r220: [402..403]
 r221: [400..401]
 r222: [398..399]
 r223: [352..397]
 r224: [394..395]
 r225: [392..393]
 r226: [390..391]
 r227: [388..389]
 r229: [376..377]
 r230: [374..375]
 r231: [374..375]
 r232: [372..373]
 r233: [372..373]
 r234: [370..371]
 r235: [368..369]
 r236: [362..367]
 r237: [364..365]
 r238: [362..363]
 r239: [360..361]
 r240: [358..359]
 r241: [354..357]
 r242: [352..353]
 r243: [240..241]
 r244: [236..239]
 r245: [4..5]
 r246: [232..233]
 r247: [228..229]
 r248: [112..113]
 r249: [110..111]
 r250: [64..109]
 r251: [106..107]
 r252: [104..105]
 r253: [102..103]
 r255: [90..91]
 r256: [88..89]
 r257: [88..89]
 r258: [86..87]
 r259: [86..87]
 r260: [84..85]
 r261: [82..83]
 r262: [74..81]
 r263: [78..79]
 r264: [76..77]
 r265: [74..75]
 r266: [72..73]
 r267: [70..71]
 r268: [66..69]
 r269: [64..65]
 r270: [60..61]
 r271: [58..59]
 r272: [56..57]
 r273: [8..55]
 r274: [52..53]
 r275: [50..51]
 r276: [48..49]
 r277: [46..47]
 r279: [34..35]
 r280: [32..33]
 r281: [32..33]
 r282: [30..31]
 r283: [30..31]
 r284: [28..29]
 r285: [26..27]
 r286: [18..25]
 r287: [22..23]
 r288: [20..21]
 r289: [18..19]
 r290: [16..17]
 r291: [14..15]
 r292: [10..13]
 r293: [8..9]
 r294: [224..225]
 r295: [220..221]
 r296: [218..219]
 r297: [172..217]
 r298: [214..215]
 r299: [212..213]
 r300: [210..211]
 r302: [198..199]
 r303: [196..197]
 r304: [196..197]
 r305: [194..195]
 r306: [194..195]
 r307: [192..193]
 r308: [190..191]
 r309: [182..189]
 r310: [186..187]
 r311: [184..185]
 r312: [182..183]
 r313: [180..181]
 r314: [178..179]
 r315: [174..177]
 r316: [172..173]
 r317: [168..169]
 r318: [166..167]
 r319: [164..165]
 r320: [116..163]
 r321: [160..161]
 r322: [158..159]
 r323: [156..157]
 r324: [154..155]
 r326: [142..143]
 r327: [140..141]
 r328: [140..141]
 r329: [138..139]
 r330: [138..139]
 r331: [136..137]
 r332: [134..135]
 r333: [126..133]
 r334: [130..131]
 r335: [128..129]
 r336: [126..127]
 r337: [124..125]
 r338: [122..123]
 r339: [118..121]
 r340: [116..117]
 r341: [2..3]
 r342: [0..1]
 r343: [658..659]
 r344: [656..657]
 r345: [654..655]
 r346: [652..653]
 r347: [648..649]
 r348: [646..647]
 r349: [644..645]
 r350: [636..637]
 r351: [634..635]
 r352: [630..631]
 r353: [632..633]
 r354: [628..629]
 r355: [624..625]
 r356: [620..621]
 r357: [612..613]
 r358: [608..609]
 r359: [606..607]
 r360: [600..601]
 r361: [596..597]
 r362: [594..595]
 r363: [584..585]
 r364: [582..583]
 r365: [576..577]
 r366: [574..575]
 r367: [572..573]
 r368: [564..565]
 r369: [560..561]
 r370: [554..555]
 r371: [552..553]
 r372: [548..549]
 r373: [542..543]
 r374: [534..535]
 r375: [530..531]
 r376: [528..529]
 r377: [522..523]
 r378: [518..519]
 r379: [516..517]
 r380: [514..515]
 r381: [504..505]
 r382: [502..503]
 r383: [496..497]
 r384: [494..495]
 r385: [492..493]
 r386: [484..485]
 r387: [480..481]
 r388: [472..473]
 r389: [470..471]
 r390: [468..469]
 r391: [246..247]
 r392: [466..467]
 r393: [462..463]
 r394: [350..351]
 r395: [346..347]
 r396: [344..345]
 r397: [340..341]
 r398: [332..335]
 r399: [332..333]
 r400: [330..331]
 r401: [328..329]
 r402: [320..321]
 r403: [318..319]
 r404: [316..317]
 r405: [300..301]
 r406: [294..295]
 r407: [292..293]
 r408: [286..287]
 r409: [278..281]
 r410: [278..279]
 r411: [276..277]
 r412: [274..275]
 r413: [266..267]
 r414: [264..265]
 r415: [262..263]
 r416: [458..459]
 r417: [454..455]
 r418: [450..451]
 r419: [448..449]
 r420: [444..445]
 r421: [436..439]
 r422: [436..437]
 r423: [434..435]
 r424: [432..433]
 r425: [424..425]
 r426: [422..423]
 r427: [420..421]
 r428: [404..405]
 r429: [398..399]
 r430: [396..397]
 r431: [390..391]
 r432: [382..385]
 r433: [382..383]
 r434: [380..381]
 r435: [378..379]
 r436: [370..371]
 r437: [368..369]
 r438: [366..367]
 r439: [242..243]
 r440: [238..239]
 r441: [236..237]
 r442: [6..7]
 r443: [234..235]
 r444: [230..231]
 r445: [114..115]
 r446: [110..111]
 r447: [108..109]
 r448: [104..105]
 r449: [96..99]
 r450: [96..97]
 r451: [94..95]
 r452: [92..93]
 r453: [84..85]
 r454: [82..83]
 r455: [80..81]
 r456: [62..63]
 r457: [56..57]
 r458: [54..55]
 r459: [48..49]
 r460: [40..43]
 r461: [40..41]
 r462: [38..39]
 r463: [36..37]
 r464: [28..29]
 r465: [26..27]
 r466: [24..25]
 r467: [226..227]
 r468: [222..223]
 r469: [218..219]
 r470: [216..217]
 r471: [212..213]
 r472: [204..207]
 r473: [204..205]
 r474: [202..203]
 r475: [200..201]
 r476: [192..193]
 r477: [190..191]
 r478: [188..189]
 r479: [170..171]
 r480: [164..165]
 r481: [162..163]
 r482: [156..157]
 r483: [148..151]
 r484: [148..149]
 r485: [146..147]
 r486: [144..145]
 r487: [136..137]
 r488: [134..135]
 r489: [132..133]
 r491: [650..651]
 r492: [638..639]
 r493: [578..579]
 r494: [498..499]
 r495: [336..337]
 r496: [334..335]
 r497: [304..305]
 r498: [282..283]
 r499: [280..281]
 r500: [250..251]
 r501: [440..441]
 r502: [438..439]
 r503: [408..409]
 r504: [386..387]
 r505: [384..385]
 r506: [354..355]
 r507: [100..101]
 r508: [98..99]
 r509: [66..67]
 r510: [44..45]
 r511: [42..43]
 r512: [10..11]
 r513: [208..209]
 r514: [206..207]
 r515: [174..175]
 r516: [152..153]
 r517: [150..151]
 r518: [118..119]
 r519: [252..281]
 r520: [306..335]
 r521: [356..385]
 r522: [410..439]
 r523: [12..43]
 r524: [68..99]
 r525: [120..151]
 r526: [176..207]

********** Assignment #1: **********

	 Assigning to 491 (cl=GENERAL_REGS, orig=347, freq=3, tfirst=491, tfreq=3)...
	   Assign 1 to reload r491 (freq=3)
	 Assigning to 493 (cl=GENERAL_REGS, orig=365, freq=3, tfirst=493, tfreq=3)...
	   Assign 1 to reload r493 (freq=3)
	 Assigning to 494 (cl=GENERAL_REGS, orig=383, freq=3, tfirst=494, tfreq=3)...
	   Assign 1 to reload r494 (freq=3)
	 Assigning to 496 (cl=GENERAL_REGS, orig=399, freq=3, tfirst=496, tfreq=3)...
	   Assign 1 to reload r496 (freq=3)
	 Assigning to 499 (cl=GENERAL_REGS, orig=410, freq=3, tfirst=499, tfreq=3)...
	   Assign 1 to reload r499 (freq=3)
	 Assigning to 502 (cl=GENERAL_REGS, orig=422, freq=3, tfirst=502, tfreq=3)...
	   Assign 1 to reload r502 (freq=3)
	 Assigning to 505 (cl=GENERAL_REGS, orig=433, freq=3, tfirst=505, tfreq=3)...
	   Assign 1 to reload r505 (freq=3)
	 Assigning to 508 (cl=GENERAL_REGS, orig=450, freq=3, tfirst=508, tfreq=3)...
	   Assign 1 to reload r508 (freq=3)
	 Assigning to 511 (cl=GENERAL_REGS, orig=461, freq=3, tfirst=511, tfreq=3)...
	   Assign 1 to reload r511 (freq=3)
	 Assigning to 514 (cl=GENERAL_REGS, orig=473, freq=3, tfirst=514, tfreq=3)...
	   Assign 1 to reload r514 (freq=3)
	 Assigning to 517 (cl=GENERAL_REGS, orig=484, freq=3, tfirst=517, tfreq=3)...
	   Assign 1 to reload r517 (freq=3)
	 Assigning to 492 (cl=SSE_REGS, orig=350, freq=3, tfirst=492, tfreq=3)...
	   Assign 22 to reload r492 (freq=3)
	 Assigning to 495 (cl=ALL_SSE_REGS, orig=160, freq=2, tfirst=495, tfreq=2)...
	   Assign 24 to reload r495 (freq=2)
	Hard reg 24 is preferable by r520 with profit 1
	Hard reg 24 is preferable by r497 with profit 1
	 Assigning to 497 (cl=SSE_REGS, orig=160, freq=2, tfirst=495, tfreq=2)...
	   Assign 24 to optional reload r497 (freq=2)
	Hard reg 24 is preferable by r520 with profit 2
	 Assigning to 520 (cl=ALL_SSE_REGS, orig=160, freq=2, tfirst=495, tfreq=2)...
	 Assigning to 498 (cl=ALL_SSE_REGS, orig=183, freq=2, tfirst=498, tfreq=2)...
	   Assign 25 to reload r498 (freq=2)
	Hard reg 25 is preferable by r519 with profit 1
	Hard reg 25 is preferable by r500 with profit 1
	 Assigning to 500 (cl=SSE_REGS, orig=183, freq=2, tfirst=498, tfreq=2)...
	   Assign 25 to optional reload r500 (freq=2)
	Hard reg 25 is preferable by r519 with profit 2
	 Assigning to 519 (cl=ALL_SSE_REGS, orig=183, freq=2, tfirst=498, tfreq=2)...
	 Assigning to 501 (cl=ALL_SSE_REGS, orig=205, freq=2, tfirst=501, tfreq=2)...
	   Assign 26 to reload r501 (freq=2)
	Hard reg 26 is preferable by r522 with profit 1
	Hard reg 26 is preferable by r503 with profit 1
	 Assigning to 503 (cl=SSE_REGS, orig=205, freq=2, tfirst=501, tfreq=2)...
	   Assign 26 to optional reload r503 (freq=2)
	Hard reg 26 is preferable by r522 with profit 2
	 Assigning to 522 (cl=ALL_SSE_REGS, orig=205, freq=2, tfirst=501, tfreq=2)...
	 Assigning to 504 (cl=ALL_SSE_REGS, orig=228, freq=2, tfirst=504, tfreq=2)...
	   Assign 27 to reload r504 (freq=2)
	Hard reg 27 is preferable by r521 with profit 1
	Hard reg 27 is preferable by r506 with profit 1
	 Assigning to 506 (cl=SSE_REGS, orig=228, freq=2, tfirst=504, tfreq=2)...
	   Assign 27 to optional reload r506 (freq=2)
	Hard reg 27 is preferable by r521 with profit 2
	 Assigning to 521 (cl=ALL_SSE_REGS, orig=228, freq=2, tfirst=504, tfreq=2)...
	 Assigning to 507 (cl=ALL_SSE_REGS, orig=254, freq=2, tfirst=507, tfreq=2)...
	   Assign 28 to reload r507 (freq=2)
	Hard reg 28 is preferable by r524 with profit 1
	Hard reg 28 is preferable by r509 with profit 1
	 Assigning to 509 (cl=SSE_REGS, orig=254, freq=2, tfirst=507, tfreq=2)...
	   Assign 28 to optional reload r509 (freq=2)
	Hard reg 28 is preferable by r524 with profit 2
	 Assigning to 524 (cl=ALL_SSE_REGS, orig=254, freq=2, tfirst=507, tfreq=2)...
	 Assigning to 510 (cl=ALL_SSE_REGS, orig=278, freq=2, tfirst=510, tfreq=2)...
	   Assign 24 to reload r510 (freq=2)
	Hard reg 24 is preferable by r523 with profit 1
	Hard reg 24 is preferable by r512 with profit 1
	 Assigning to 512 (cl=SSE_REGS, orig=278, freq=2, tfirst=510, tfreq=2)...
	   Assign 24 to optional reload r512 (freq=2)
	Hard reg 24 is preferable by r523 with profit 2
	 Assigning to 523 (cl=ALL_SSE_REGS, orig=278, freq=2, tfirst=510, tfreq=2)...
	 Assigning to 513 (cl=ALL_SSE_REGS, orig=301, freq=2, tfirst=513, tfreq=2)...
	   Assign 25 to reload r513 (freq=2)
	Hard reg 25 is preferable by r526 with profit 1
	Hard reg 25 is preferable by r515 with profit 1
	 Assigning to 515 (cl=SSE_REGS, orig=301, freq=2, tfirst=513, tfreq=2)...
	   Assign 25 to optional reload r515 (freq=2)
	Hard reg 25 is preferable by r526 with profit 2
	 Assigning to 526 (cl=ALL_SSE_REGS, orig=301, freq=2, tfirst=513, tfreq=2)...
	 Assigning to 516 (cl=ALL_SSE_REGS, orig=325, freq=2, tfirst=516, tfreq=2)...
	   Assign 26 to reload r516 (freq=2)
	Hard reg 26 is preferable by r525 with profit 1
	Hard reg 26 is preferable by r518 with profit 1
	 Assigning to 518 (cl=SSE_REGS, orig=325, freq=2, tfirst=516, tfreq=2)...
	   Assign 26 to optional reload r518 (freq=2)
	Hard reg 26 is preferable by r525 with profit 2
	 Assigning to 525 (cl=ALL_SSE_REGS, orig=325, freq=2, tfirst=516, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  575: r500:SF=r183:SF
      REG_DEAD r183:SF
   Insn after restoring regs:
  572: r183:SF=r498:SF
      REG_DEAD r498:SF
   Insn after restoring regs:
  571: r497:SF=r160:SF
      REG_DEAD r160:SF
   Insn after restoring regs:
  568: r160:SF=r495:SF
      REG_DEAD r495:SF
   Insn after restoring regs:
  583: r506:SF=r228:SF
      REG_DEAD r228:SF
   Insn after restoring regs:
  580: r228:SF=r504:SF
      REG_DEAD r504:SF
   Insn after restoring regs:
  579: r503:SF=r205:SF
      REG_DEAD r205:SF
   Insn after restoring regs:
  576: r205:SF=r501:SF
      REG_DEAD r501:SF
   Insn after restoring regs:
  591: r512:SF=r278:SF
      REG_DEAD r278:SF
   Insn after restoring regs:
  588: r278:SF=r510:SF
      REG_DEAD r510:SF
   Insn after restoring regs:
  587: r509:SF=r254:SF
      REG_DEAD r254:SF
   Insn after restoring regs:
  584: r254:SF=r507:SF
      REG_DEAD r507:SF
   Insn after restoring regs:
  599: r518:SF=r325:SF
      REG_DEAD r325:SF
   Insn after restoring regs:
  596: r325:SF=r516:SF
      REG_DEAD r516:SF
   Insn after restoring regs:
  595: r515:SF=r301:SF
      REG_DEAD r301:SF
   Insn after restoring regs:
  592: r301:SF=r513:SF
      REG_DEAD r513:SF
Remove optional reload reg 497
  Restoring original insn:
  210: r174:SF=r173:SF*r160:SF
      REG_DEAD r160:SF
      REG_DEAD r173:SF
  Deleting move 571
  571: r497:SF=r160:SF
      REG_DEAD r160:SF
deleting insn with uid = 571.
Remove optional reload reg 500
  Restoring original insn:
  247: r197:SF=r196:SF*r183:SF
      REG_DEAD r183:SF
      REG_DEAD r196:SF
  Deleting move 575
  575: r500:SF=r183:SF
      REG_DEAD r183:SF
deleting insn with uid = 575.
Remove optional reload reg 503
  Restoring original insn:
  291: r219:SF=r218:SF*r205:SF
      REG_DEAD r205:SF
      REG_DEAD r218:SF
  Deleting move 579
  579: r503:SF=r205:SF
      REG_DEAD r205:SF
deleting insn with uid = 579.
Remove optional reload reg 506
  Restoring original insn:
  328: r242:SF=r241:SF*r228:SF
      REG_DEAD r228:SF
      REG_DEAD r241:SF
  Deleting move 583
  583: r506:SF=r228:SF
      REG_DEAD r228:SF
deleting insn with uid = 583.
Remove optional reload reg 509
  Restoring original insn:
  402: r269:SF=r268:SF*r254:SF
      REG_DEAD r254:SF
      REG_DEAD r268:SF
  Deleting move 587
  587: r509:SF=r254:SF
      REG_DEAD r254:SF
deleting insn with uid = 587.
Remove optional reload reg 512
  Restoring original insn:
  440: r293:SF=r292:SF*r278:SF
      REG_DEAD r278:SF
      REG_DEAD r292:SF
  Deleting move 591
  591: r512:SF=r278:SF
      REG_DEAD r278:SF
deleting insn with uid = 591.
Remove optional reload reg 515
  Restoring original insn:
  485: r316:SF=r315:SF*r301:SF
      REG_DEAD r301:SF
      REG_DEAD r315:SF
  Deleting move 595
  595: r515:SF=r301:SF
      REG_DEAD r301:SF
deleting insn with uid = 595.
Remove optional reload reg 518
  Restoring original insn:
  523: r340:SF=r339:SF*r325:SF
      REG_DEAD r325:SF
      REG_DEAD r339:SF
  Deleting move 599
  599: r518:SF=r325:SF
      REG_DEAD r325:SF
deleting insn with uid = 599.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 523:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=527 from oldreg=325, assigning class SSE_REGS to r527
      Making reload reg 527 for reg 325 optional
  523: r340:SF=r339:SF*r527:SF
      REG_DEAD r325:SF
      REG_DEAD r339:SF
    Inserting insn reload before:
  608: r527:SF=r325:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 608:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 485:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=528 from oldreg=301, assigning class SSE_REGS to r528
      Making reload reg 528 for reg 301 optional
  485: r316:SF=r315:SF*r528:SF
      REG_DEAD r301:SF
      REG_DEAD r315:SF
    Inserting insn reload before:
  609: r528:SF=r301:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 609:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 440:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=529 from oldreg=278, assigning class SSE_REGS to r529
      Making reload reg 529 for reg 278 optional
  440: r293:SF=r292:SF*r529:SF
      REG_DEAD r278:SF
      REG_DEAD r292:SF
    Inserting insn reload before:
  610: r529:SF=r278:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 610:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 402:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=530 from oldreg=254, assigning class SSE_REGS to r530
      Making reload reg 530 for reg 254 optional
  402: r269:SF=r268:SF*r530:SF
      REG_DEAD r254:SF
      REG_DEAD r268:SF
    Inserting insn reload before:
  611: r530:SF=r254:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 611:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 328:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=531 from oldreg=228, assigning class SSE_REGS to r531
      Making reload reg 531 for reg 228 optional
  328: r242:SF=r241:SF*r531:SF
      REG_DEAD r228:SF
      REG_DEAD r241:SF
    Inserting insn reload before:
  612: r531:SF=r228:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 612:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 291:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=532 from oldreg=205, assigning class SSE_REGS to r532
      Making reload reg 532 for reg 205 optional
  291: r219:SF=r218:SF*r532:SF
      REG_DEAD r205:SF
      REG_DEAD r218:SF
    Inserting insn reload before:
  613: r532:SF=r205:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 613:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=533 from oldreg=183, assigning class SSE_REGS to r533
      Making reload reg 533 for reg 183 optional
  247: r197:SF=r196:SF*r533:SF
      REG_DEAD r183:SF
      REG_DEAD r196:SF
    Inserting insn reload before:
  614: r533:SF=r183:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 614:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 210:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=534 from oldreg=160, assigning class SSE_REGS to r534
      Making reload reg 534 for reg 160 optional
  210: r174:SF=r173:SF*r534:SF
      REG_DEAD r160:SF
      REG_DEAD r173:SF
    Inserting insn reload before:
  615: r534:SF=r160:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 615:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=535 from oldreg=183, assigning class ALL_SSE_REGS to inheritance r535
    Original reg change 183->535 (bb14):
  572: r535:SF=r498:SF
      REG_DEAD r498:SF
    Add original<-inheritance after:
  616: r183:SF=r535:SF

    Inheritance reuse change 183->535 (bb14):
  614: r533:SF=r535:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=536 from oldreg=160, assigning class ALL_SSE_REGS to inheritance r536
    Original reg change 160->536 (bb14):
  568: r536:SF=r495:SF
      REG_DEAD r495:SF
    Add original<-inheritance after:
  617: r160:SF=r536:SF

    Inheritance reuse change 160->536 (bb14):
  615: r534:SF=r536:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   616: r183:SF=r535:SF
deleting insn with uid = 616.
	    Removing dead insn:
   617: r160:SF=r536:SF
deleting insn with uid = 617.
EBB 15
EBB 16
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=537 from oldreg=228, assigning class ALL_SSE_REGS to inheritance r537
    Original reg change 228->537 (bb16):
  580: r537:SF=r504:SF
      REG_DEAD r504:SF
    Add original<-inheritance after:
  618: r228:SF=r537:SF

    Inheritance reuse change 228->537 (bb16):
  612: r531:SF=r537:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=538 from oldreg=205, assigning class ALL_SSE_REGS to inheritance r538
    Original reg change 205->538 (bb16):
  576: r538:SF=r501:SF
      REG_DEAD r501:SF
    Add original<-inheritance after:
  619: r205:SF=r538:SF

    Inheritance reuse change 205->538 (bb16):
  613: r532:SF=r538:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   618: r228:SF=r537:SF
deleting insn with uid = 618.
	    Removing dead insn:
   619: r205:SF=r538:SF
deleting insn with uid = 619.
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=539 from oldreg=278, assigning class ALL_SSE_REGS to inheritance r539
    Original reg change 278->539 (bb24):
  588: r539:SF=r510:SF
      REG_DEAD r510:SF
    Add original<-inheritance after:
  620: r278:SF=r539:SF

    Inheritance reuse change 278->539 (bb24):
  610: r529:SF=r539:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=540 from oldreg=254, assigning class ALL_SSE_REGS to inheritance r540
    Original reg change 254->540 (bb24):
  584: r540:SF=r507:SF
      REG_DEAD r507:SF
    Add original<-inheritance after:
  621: r254:SF=r540:SF

    Inheritance reuse change 254->540 (bb24):
  611: r530:SF=r540:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   620: r278:SF=r539:SF
deleting insn with uid = 620.
	    Removing dead insn:
   621: r254:SF=r540:SF
deleting insn with uid = 621.
EBB 25
EBB 26
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=541 from oldreg=325, assigning class ALL_SSE_REGS to inheritance r541
    Original reg change 325->541 (bb26):
  596: r541:SF=r516:SF
      REG_DEAD r516:SF
    Add original<-inheritance after:
  622: r325:SF=r541:SF

    Inheritance reuse change 325->541 (bb26):
  608: r527:SF=r541:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=542 from oldreg=301, assigning class ALL_SSE_REGS to inheritance r542
    Original reg change 301->542 (bb26):
  592: r542:SF=r513:SF
      REG_DEAD r513:SF
    Add original<-inheritance after:
  623: r301:SF=r542:SF

    Inheritance reuse change 301->542 (bb26):
  609: r528:SF=r542:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   622: r325:SF=r541:SF
deleting insn with uid = 622.
	    Removing dead insn:
   623: r301:SF=r542:SF
deleting insn with uid = 623.
EBB 27
EBB 28

********** Pseudo live ranges #2: **********

  BB 28
   Insn 541: point = 0
   Insn 540: point = 0
   Insn 536: point = 1
   Insn 533: point = 3
  BB 21
   Insn 356: point = 4
   Insn 355: point = 4
   Insn 354: point = 5
   Insn 353: point = 7
  BB 27
   Insn 557: point = 8
   Insn 527: point = 8
  BB 24
   Insn 555: point = 8
   Insn 441: point = 8
   Insn 440: point = 9
   Insn 610: point = 11
	   Creating copy r529<-r539@1
   Insn 439: point = 13
   Insn 438: point = 15
   Insn 437: point = 16
   Insn 436: point = 16
   Insn 435: point = 17
   Insn 434: point = 19
   Insn 433: point = 21
   Insn 432: point = 23
   Insn 431: point = 25
   Insn 430: point = 26
   Insn 429: point = 28
   Insn 428: point = 29
   Insn 427: point = 31
   Insn 426: point = 32
   Insn 425: point = 34
   Insn 424: point = 35
   Insn 423: point = 37
   Insn 422: point = 38
   Insn 421: point = 40
   Insn 420: point = 42
   Insn 419: point = 44
   Insn 590: point = 46
	Hard reg 1 is preferable by r511 with profit 1
   Insn 418: point = 48
   Insn 589: point = 48
   Insn 417: point = 49
   Insn 588: point = 50
	   Creating copy r510->r539@1
   Insn 416: point = 52
   Insn 415: point = 54
   Insn 414: point = 56
   Insn 413: point = 57
   Insn 412: point = 59
   Insn 411: point = 61
   Insn 410: point = 63
   Insn 409: point = 64
   Insn 408: point = 66
   Insn 407: point = 67
   Insn 406: point = 69
   Insn 405: point = 71
   Insn 404: point = 73
   Insn 403: point = 74
   Insn 402: point = 75
   Insn 611: point = 77
	   Creating copy r530<-r540@1
   Insn 401: point = 79
   Insn 400: point = 81
   Insn 399: point = 82
   Insn 398: point = 82
   Insn 397: point = 83
   Insn 396: point = 85
   Insn 395: point = 87
   Insn 394: point = 89
   Insn 393: point = 91
   Insn 392: point = 92
   Insn 391: point = 94
   Insn 390: point = 95
   Insn 389: point = 97
   Insn 388: point = 98
   Insn 387: point = 100
   Insn 386: point = 101
   Insn 385: point = 103
   Insn 384: point = 104
   Insn 383: point = 106
   Insn 382: point = 108
   Insn 381: point = 110
   Insn 586: point = 112
	Hard reg 1 is preferable by r508 with profit 1
   Insn 380: point = 114
   Insn 585: point = 114
   Insn 379: point = 115
   Insn 584: point = 116
	   Creating copy r507->r540@1
   Insn 378: point = 118
   Insn 377: point = 120
   Insn 376: point = 122
   Insn 375: point = 123
   Insn 374: point = 125
   Insn 373: point = 127
   Insn 372: point = 128
   Insn 371: point = 130
   Insn 370: point = 131
   Insn 369: point = 133
   Insn 368: point = 135
  BB 26
   Insn 524: point = 136
   Insn 523: point = 137
   Insn 608: point = 139
	   Creating copy r527<-r541@1
   Insn 522: point = 141
   Insn 521: point = 143
   Insn 520: point = 144
   Insn 519: point = 144
   Insn 518: point = 145
   Insn 517: point = 147
   Insn 516: point = 149
   Insn 515: point = 151
   Insn 514: point = 153
   Insn 513: point = 154
   Insn 512: point = 156
   Insn 511: point = 157
   Insn 510: point = 159
   Insn 509: point = 160
   Insn 508: point = 162
   Insn 507: point = 163
   Insn 506: point = 165
   Insn 505: point = 166
   Insn 504: point = 168
   Insn 503: point = 170
   Insn 502: point = 172
   Insn 598: point = 174
	Hard reg 1 is preferable by r517 with profit 1
   Insn 501: point = 176
   Insn 597: point = 176
   Insn 500: point = 177
   Insn 596: point = 178
	   Creating copy r516->r541@1
   Insn 499: point = 180
   Insn 498: point = 182
   Insn 497: point = 184
   Insn 496: point = 185
   Insn 495: point = 187
   Insn 494: point = 189
   Insn 493: point = 191
   Insn 492: point = 192
   Insn 491: point = 194
   Insn 490: point = 195
   Insn 489: point = 197
   Insn 488: point = 199
   Insn 487: point = 201
   Insn 486: point = 202
   Insn 485: point = 203
   Insn 609: point = 205
	   Creating copy r528<-r542@1
   Insn 484: point = 207
   Insn 483: point = 209
   Insn 482: point = 210
   Insn 481: point = 210
   Insn 480: point = 211
   Insn 479: point = 213
   Insn 478: point = 215
   Insn 477: point = 217
   Insn 476: point = 219
   Insn 475: point = 220
   Insn 474: point = 222
   Insn 473: point = 223
   Insn 472: point = 225
   Insn 471: point = 226
   Insn 470: point = 228
   Insn 469: point = 229
   Insn 468: point = 231
   Insn 467: point = 232
   Insn 466: point = 234
   Insn 465: point = 236
   Insn 464: point = 238
   Insn 594: point = 240
	Hard reg 1 is preferable by r514 with profit 1
   Insn 463: point = 242
   Insn 593: point = 242
   Insn 462: point = 243
   Insn 592: point = 244
	   Creating copy r513->r542@1
   Insn 461: point = 246
   Insn 460: point = 248
   Insn 459: point = 250
   Insn 458: point = 251
   Insn 457: point = 253
   Insn 456: point = 255
   Insn 455: point = 256
   Insn 454: point = 258
   Insn 453: point = 259
   Insn 452: point = 261
   Insn 451: point = 263
  BB 25
   Insn 449: point = 264
   Insn 448: point = 264
   Insn 447: point = 265
   Insn 446: point = 267
  BB 23
   Insn 366: point = 268
   Insn 365: point = 268
   Insn 364: point = 269
   Insn 363: point = 271
  BB 22
   Insn 361: point = 272
   Insn 360: point = 272
   Insn 359: point = 273
   Insn 358: point = 275
  BB 20
   Insn 351: point = 276
  BB 19
   Insn 346: point = 276
   Insn 345: point = 276
   Insn 344: point = 277
  BB 18
   Insn 343: point = 279
   Insn 342: point = 279
   Insn 341: point = 280
   Insn 340: point = 281
   Insn 339: point = 283
   Insn 338: point = 285
  BB 11
   Insn 165: point = 286
   Insn 164: point = 286
   Insn 163: point = 287
   Insn 162: point = 289
  BB 17
   Insn 553: point = 290
   Insn 332: point = 290
  BB 14
   Insn 551: point = 290
   Insn 248: point = 290
   Insn 247: point = 291
   Insn 614: point = 293
	   Creating copy r533<-r535@1
   Insn 246: point = 295
   Insn 245: point = 297
   Insn 244: point = 298
   Insn 243: point = 298
   Insn 242: point = 299
   Insn 241: point = 301
   Insn 240: point = 303
   Insn 239: point = 305
   Insn 238: point = 306
   Insn 237: point = 308
   Insn 236: point = 309
   Insn 235: point = 311
   Insn 234: point = 312
   Insn 233: point = 314
   Insn 232: point = 315
   Insn 231: point = 317
   Insn 230: point = 318
   Insn 229: point = 320
   Insn 228: point = 322
   Insn 227: point = 324
   Insn 574: point = 326
	Hard reg 1 is preferable by r499 with profit 1
   Insn 226: point = 328
   Insn 573: point = 328
   Insn 225: point = 329
   Insn 572: point = 330
	   Creating copy r498->r535@1
   Insn 224: point = 332
   Insn 223: point = 334
   Insn 222: point = 336
   Insn 221: point = 337
   Insn 220: point = 339
   Insn 219: point = 341
   Insn 218: point = 343
   Insn 217: point = 344
   Insn 216: point = 346
   Insn 215: point = 347
   Insn 214: point = 349
   Insn 213: point = 351
   Insn 212: point = 353
   Insn 211: point = 354
   Insn 210: point = 355
   Insn 615: point = 357
	   Creating copy r534<-r536@1
   Insn 209: point = 359
   Insn 208: point = 361
   Insn 207: point = 362
   Insn 206: point = 362
   Insn 205: point = 363
   Insn 204: point = 365
   Insn 203: point = 367
   Insn 202: point = 369
   Insn 201: point = 370
   Insn 200: point = 372
   Insn 199: point = 373
   Insn 198: point = 375
   Insn 197: point = 376
   Insn 196: point = 378
   Insn 195: point = 379
   Insn 194: point = 381
   Insn 193: point = 382
   Insn 192: point = 384
   Insn 191: point = 386
   Insn 190: point = 388
   Insn 570: point = 390
	Hard reg 1 is preferable by r496 with profit 1
   Insn 189: point = 392
   Insn 569: point = 392
   Insn 188: point = 393
   Insn 568: point = 394
	   Creating copy r495->r536@1
   Insn 187: point = 396
   Insn 186: point = 398
   Insn 185: point = 400
   Insn 184: point = 401
   Insn 183: point = 403
   Insn 182: point = 405
   Insn 181: point = 406
   Insn 180: point = 408
   Insn 179: point = 409
   Insn 178: point = 411
   Insn 177: point = 413
  BB 16
   Insn 329: point = 414
   Insn 328: point = 415
   Insn 612: point = 417
	   Creating copy r531<-r537@1
   Insn 327: point = 419
   Insn 326: point = 421
   Insn 325: point = 422
   Insn 324: point = 422
   Insn 323: point = 423
   Insn 322: point = 425
   Insn 321: point = 427
   Insn 320: point = 429
   Insn 319: point = 430
   Insn 318: point = 432
   Insn 317: point = 433
   Insn 316: point = 435
   Insn 315: point = 436
   Insn 314: point = 438
   Insn 313: point = 439
   Insn 312: point = 441
   Insn 311: point = 442
   Insn 310: point = 444
   Insn 309: point = 446
   Insn 308: point = 448
   Insn 582: point = 450
	Hard reg 1 is preferable by r505 with profit 1
   Insn 307: point = 452
   Insn 581: point = 452
   Insn 306: point = 453
   Insn 580: point = 454
	   Creating copy r504->r537@1
   Insn 305: point = 456
   Insn 304: point = 458
   Insn 303: point = 460
   Insn 302: point = 461
   Insn 301: point = 463
   Insn 300: point = 465
   Insn 299: point = 467
   Insn 298: point = 468
   Insn 297: point = 470
   Insn 296: point = 471
   Insn 295: point = 473
   Insn 294: point = 475
   Insn 293: point = 477
   Insn 292: point = 478
   Insn 291: point = 479
   Insn 613: point = 481
	   Creating copy r532<-r538@1
   Insn 290: point = 483
   Insn 289: point = 485
   Insn 288: point = 486
   Insn 287: point = 486
   Insn 286: point = 487
   Insn 285: point = 489
   Insn 284: point = 491
   Insn 283: point = 493
   Insn 282: point = 494
   Insn 281: point = 496
   Insn 280: point = 497
   Insn 279: point = 499
   Insn 278: point = 500
   Insn 277: point = 502
   Insn 276: point = 503
   Insn 275: point = 505
   Insn 274: point = 506
   Insn 273: point = 508
   Insn 272: point = 510
   Insn 271: point = 512
   Insn 578: point = 514
	Hard reg 1 is preferable by r502 with profit 1
   Insn 270: point = 516
   Insn 577: point = 516
   Insn 269: point = 517
   Insn 576: point = 518
	   Creating copy r501->r538@1
   Insn 268: point = 520
   Insn 267: point = 522
   Insn 266: point = 524
   Insn 265: point = 525
   Insn 264: point = 527
   Insn 263: point = 529
   Insn 262: point = 530
   Insn 261: point = 532
   Insn 260: point = 533
   Insn 259: point = 535
   Insn 258: point = 537
  BB 15
   Insn 256: point = 538
   Insn 255: point = 538
   Insn 254: point = 539
   Insn 253: point = 541
  BB 13
   Insn 175: point = 542
   Insn 174: point = 542
   Insn 173: point = 543
   Insn 172: point = 545
  BB 12
   Insn 170: point = 546
   Insn 169: point = 546
   Insn 168: point = 547
   Insn 167: point = 549
  BB 10
   Insn 160: point = 550
  BB 9
   Insn 155: point = 550
   Insn 154: point = 550
   Insn 153: point = 551
  BB 8
   Insn 152: point = 553
   Insn 151: point = 553
   Insn 150: point = 554
   Insn 149: point = 555
   Insn 148: point = 557
  BB 7
   Insn 145: point = 558
   Insn 144: point = 559
   Insn 143: point = 561
   Insn 142: point = 563
   Insn 141: point = 565
   Insn 140: point = 566
   Insn 139: point = 568
   Insn 138: point = 570
   Insn 137: point = 571
   Insn 136: point = 573
   Insn 135: point = 575
   Insn 134: point = 577
   Insn 133: point = 579
   Insn 132: point = 581
   Insn 567: point = 583
	Hard reg 1 is preferable by r494 with profit 1
   Insn 131: point = 585
   Insn 566: point = 585
   Insn 130: point = 586
   Insn 129: point = 588
   Insn 128: point = 590
   Insn 127: point = 591
   Insn 126: point = 593
   Insn 125: point = 594
   Insn 124: point = 596
   Insn 123: point = 598
   Insn 122: point = 599
   Insn 121: point = 599
   Insn 120: point = 600
   Insn 119: point = 602
   Insn 118: point = 604
   Insn 117: point = 605
   Insn 116: point = 607
   Insn 115: point = 608
   Insn 114: point = 609
   Insn 113: point = 611
   Insn 112: point = 613
   Insn 111: point = 614
   Insn 110: point = 616
   Insn 109: point = 618
   Insn 108: point = 620
   Insn 107: point = 621
   Insn 106: point = 622
   Insn 105: point = 624
   Insn 104: point = 626
   Insn 103: point = 627
   Insn 102: point = 629
   Insn 101: point = 631
   Insn 100: point = 633
   Insn 99: point = 635
  BB 6
   Insn 97: point = 636
   Insn 96: point = 636
   Insn 95: point = 637
   Insn 94: point = 639
   Insn 93: point = 641
  BB 5
   Insn 91: point = 642
   Insn 90: point = 642
   Insn 89: point = 643
   Insn 88: point = 645
  BB 4
   Insn 85: point = 646
   Insn 84: point = 647
   Insn 83: point = 648
   Insn 82: point = 650
   Insn 81: point = 652
   Insn 80: point = 654
   Insn 79: point = 655
   Insn 78: point = 657
   Insn 77: point = 659
   Insn 76: point = 660
   Insn 75: point = 662
   Insn 74: point = 664
   Insn 73: point = 666
   Insn 72: point = 668
   Insn 71: point = 670
   Insn 565: point = 672
	Hard reg 1 is preferable by r493 with profit 1
   Insn 70: point = 674
   Insn 564: point = 674
   Insn 69: point = 675
   Insn 68: point = 677
   Insn 67: point = 679
   Insn 66: point = 680
   Insn 65: point = 682
   Insn 64: point = 683
   Insn 63: point = 685
   Insn 62: point = 687
   Insn 61: point = 688
   Insn 60: point = 688
   Insn 59: point = 689
   Insn 58: point = 691
   Insn 57: point = 693
   Insn 56: point = 694
   Insn 55: point = 695
   Insn 54: point = 697
   Insn 53: point = 699
   Insn 52: point = 700
   Insn 51: point = 702
   Insn 50: point = 704
   Insn 49: point = 706
   Insn 48: point = 707
   Insn 47: point = 708
   Insn 46: point = 710
   Insn 45: point = 712
   Insn 44: point = 713
   Insn 43: point = 715
   Insn 42: point = 717
   Insn 41: point = 719
   Insn 40: point = 721
  BB 3
   Insn 38: point = 722
   Insn 37: point = 722
   Insn 36: point = 723
   Insn 35: point = 725
  BB 2
   Insn 33: point = 726
   Insn 32: point = 726
   Insn 31: point = 727
   Insn 30: point = 729
   Insn 29: point = 730
   Insn 28: point = 731
   Insn 27: point = 733
   Insn 26: point = 734
   Insn 25: point = 736
   Insn 24: point = 737
   Insn 563: point = 738
	Hard reg 21 is preferable by r492 with profit 1
   Insn 23: point = 740
   Insn 562: point = 741
	Hard reg 21 is preferable by r492 with profit 1
	Hard reg 22 is preferable by r492 with profit 1
   Insn 22: point = 743
   Insn 21: point = 745
   Insn 20: point = 747
   Insn 19: point = 749
   Insn 561: point = 751
	Hard reg 1 is preferable by r491 with profit 1
   Insn 18: point = 753
   Insn 560: point = 753
   Insn 17: point = 754
   Insn 16: point = 756
   Insn 15: point = 757
   Insn 14: point = 759
   Insn 13: point = 760
   Insn 12: point = 761
   Insn 11: point = 762
   Insn 10: point = 763
   Insn 9: point = 764
   Insn 5: point = 764
   Insn 4: point = 764
   Insn 3: point = 764
   Insn 2: point = 764
 r87: [742..757]
 r88: [750..754]
 r89: [744..745]
 r90: [740..743]
 r91: [732..734]
 r92: [726..727]
 r93: [722..723]
 r94: [718..719]
 r95: [716..717]
 r96: [714..715]
 r97: [711..713]
 r98: [709..710]
 r99: [703..704]
 r100: [701..702]
 r101: [698..700]
 r102: [696..697]
 r103: [690..691]
 r104: [688..689]
 r105: [686..687]
 r106: [684..685]
 r107: [681..683]
 r108: [651..680]
 r109: [676..677]
 r110: [671..675]
 r111: [665..666]
 r112: [663..664]
 r113: [661..662]
 r114: [658..660]
 r115: [656..657]
 r116: [653..655]
 r117: [651..652]
 r118: [649..650]
 r119: [646..648]
 r120: [642..643]
 r121: [638..639]
 r122: [636..637]
 r123: [632..633]
 r124: [630..631]
 r125: [628..629]
 r126: [625..627]
 r127: [623..624]
 r128: [617..618]
 r129: [615..616]
 r130: [612..614]
 r131: [610..611]
 r132: [558..605]
 r133: [601..602]
 r134: [599..600]
 r135: [597..598]
 r136: [595..596]
 r137: [592..594]
 r138: [562..591]
 r139: [587..588]
 r140: [582..586]
 r141: [576..577]
 r142: [574..575]
 r143: [572..573]
 r144: [569..571]
 r145: [567..568]
 r146: [564..566]
 r147: [562..563]
 r148: [560..561]
 r149: [558..559]
 r150: [550..555]
 r151: [286..287]
 r152: [546..547]
 r153: [542..543]
 r154: [410..411]
 r155: [407..409]
 r156: [354..406]
 r157: [402..403]
 r158: [399..401]
 r159: [397..398]
 r161: [383..384]
 r162: [380..382]
 r163: [380..381]
 r164: [377..379]
 r165: [377..378]
 r166: [374..376]
 r167: [371..373]
 r168: [364..370]
 r169: [366..367]
 r170: [364..365]
 r171: [362..363]
 r172: [360..361]
 r173: [356..359]
 r174: [354..355]
 r175: [350..351]
 r176: [348..349]
 r177: [345..347]
 r178: [290..344]
 r179: [340..341]
 r180: [338..339]
 r181: [335..337]
 r182: [333..334]
 r184: [319..320]
 r185: [316..318]
 r186: [316..317]
 r187: [313..315]
 r188: [313..314]
 r189: [310..312]
 r190: [307..309]
 r191: [300..306]
 r192: [302..303]
 r193: [300..301]
 r194: [298..299]
 r195: [296..297]
 r196: [292..295]
 r197: [290..291]
 r198: [538..539]
 r199: [534..535]
 r200: [531..533]
 r201: [478..530]
 r202: [526..527]
 r203: [523..525]
 r204: [521..522]
 r206: [507..508]
 r207: [504..506]
 r208: [504..505]
 r209: [501..503]
 r210: [501..502]
 r211: [498..500]
 r212: [495..497]
 r213: [488..494]
 r214: [490..491]
 r215: [488..489]
 r216: [486..487]
 r217: [484..485]
 r218: [480..483]
 r219: [478..479]
 r220: [474..475]
 r221: [472..473]
 r222: [469..471]
 r223: [414..468]
 r224: [464..465]
 r225: [462..463]
 r226: [459..461]
 r227: [457..458]
 r229: [443..444]
 r230: [440..442]
 r231: [440..441]
 r232: [437..439]
 r233: [437..438]
 r234: [434..436]
 r235: [431..433]
 r236: [424..430]
 r237: [426..427]
 r238: [424..425]
 r239: [422..423]
 r240: [420..421]
 r241: [416..419]
 r242: [414..415]
 r243: [282..283]
 r244: [276..281]
 r245: [4..5]
 r246: [272..273]
 r247: [268..269]
 r248: [132..133]
 r249: [129..131]
 r250: [74..128]
 r251: [124..125]
 r252: [121..123]
 r253: [119..120]
 r255: [105..106]
 r256: [102..104]
 r257: [102..103]
 r258: [99..101]
 r259: [99..100]
 r260: [96..98]
 r261: [93..95]
 r262: [84..92]
 r263: [88..89]
 r264: [86..87]
 r265: [84..85]
 r266: [82..83]
 r267: [80..81]
 r268: [76..79]
 r269: [74..75]
 r270: [70..71]
 r271: [68..69]
 r272: [65..67]
 r273: [8..64]
 r274: [60..61]
 r275: [58..59]
 r276: [55..57]
 r277: [53..54]
 r279: [39..40]
 r280: [36..38]
 r281: [36..37]
 r282: [33..35]
 r283: [33..34]
 r284: [30..32]
 r285: [27..29]
 r286: [18..26]
 r287: [22..23]
 r288: [20..21]
 r289: [18..19]
 r290: [16..17]
 r291: [14..15]
 r292: [10..13]
 r293: [8..9]
 r294: [264..265]
 r295: [260..261]
 r296: [257..259]
 r297: [202..256]
 r298: [252..253]
 r299: [249..251]
 r300: [247..248]
 r302: [233..234]
 r303: [230..232]
 r304: [230..231]
 r305: [227..229]
 r306: [227..228]
 r307: [224..226]
 r308: [221..223]
 r309: [212..220]
 r310: [216..217]
 r311: [214..215]
 r312: [212..213]
 r313: [210..211]
 r314: [208..209]
 r315: [204..207]
 r316: [202..203]
 r317: [198..199]
 r318: [196..197]
 r319: [193..195]
 r320: [136..192]
 r321: [188..189]
 r322: [186..187]
 r323: [183..185]
 r324: [181..182]
 r326: [167..168]
 r327: [164..166]
 r328: [164..165]
 r329: [161..163]
 r330: [161..162]
 r331: [158..160]
 r332: [155..157]
 r333: [146..154]
 r334: [150..151]
 r335: [148..149]
 r336: [146..147]
 r337: [144..145]
 r338: [142..143]
 r339: [138..141]
 r340: [136..137]
 r341: [2..3]
 r342: [0..1]
 r343: [762..763]
 r344: [760..761]
 r345: [758..759]
 r346: [755..756]
 r347: [750..751]
 r348: [748..749]
 r349: [746..747]
 r350: [737..738]
 r351: [735..736]
 r352: [730..731]
 r353: [732..733]
 r354: [728..729]
 r355: [724..725]
 r356: [720..721]
 r357: [711..712]
 r358: [707..708]
 r359: [705..706]
 r360: [698..699]
 r361: [694..695]
 r362: [692..693]
 r363: [681..682]
 r364: [678..679]
 r365: [671..672]
 r366: [669..670]
 r367: [667..668]
 r368: [658..659]
 r369: [653..654]
 r370: [646..647]
 r371: [644..645]
 r372: [640..641]
 r373: [634..635]
 r374: [625..626]
 r375: [621..622]
 r376: [619..620]
 r377: [612..613]
 r378: [608..609]
 r379: [606..607]
 r380: [603..604]
 r381: [592..593]
 r382: [589..590]
 r383: [582..583]
 r384: [580..581]
 r385: [578..579]
 r386: [569..570]
 r387: [564..565]
 r388: [556..557]
 r389: [553..554]
 r390: [550..551]
 r391: [288..289]
 r392: [548..549]
 r393: [544..545]
 r394: [412..413]
 r395: [407..408]
 r396: [404..405]
 r397: [399..400]
 r398: [389..393]
 r399: [389..390]
 r400: [387..388]
 r401: [385..386]
 r402: [374..375]
 r403: [371..372]
 r404: [368..369]
 r405: [352..353]
 r406: [345..346]
 r407: [342..343]
 r408: [335..336]
 r409: [325..329]
 r410: [325..326]
 r411: [323..324]
 r412: [321..322]
 r413: [310..311]
 r414: [307..308]
 r415: [304..305]
 r416: [540..541]
 r417: [536..537]
 r418: [531..532]
 r419: [528..529]
 r420: [523..524]
 r421: [513..517]
 r422: [513..514]
 r423: [511..512]
 r424: [509..510]
 r425: [498..499]
 r426: [495..496]
 r427: [492..493]
 r428: [476..477]
 r429: [469..470]
 r430: [466..467]
 r431: [459..460]
 r432: [449..453]
 r433: [449..450]
 r434: [447..448]
 r435: [445..446]
 r436: [434..435]
 r437: [431..432]
 r438: [428..429]
 r439: [284..285]
 r440: [279..280]
 r441: [276..277]
 r442: [6..7]
 r443: [274..275]
 r444: [270..271]
 r445: [134..135]
 r446: [129..130]
 r447: [126..127]
 r448: [121..122]
 r449: [111..115]
 r450: [111..112]
 r451: [109..110]
 r452: [107..108]
 r453: [96..97]
 r454: [93..94]
 r455: [90..91]
 r456: [72..73]
 r457: [65..66]
 r458: [62..63]
 r459: [55..56]
 r460: [45..49]
 r461: [45..46]
 r462: [43..44]
 r463: [41..42]
 r464: [30..31]
 r465: [27..28]
 r466: [24..25]
 r467: [266..267]
 r468: [262..263]
 r469: [257..258]
 r470: [254..255]
 r471: [249..250]
 r472: [239..243]
 r473: [239..240]
 r474: [237..238]
 r475: [235..236]
 r476: [224..225]
 r477: [221..222]
 r478: [218..219]
 r479: [200..201]
 r480: [193..194]
 r481: [190..191]
 r482: [183..184]
 r483: [173..177]
 r484: [173..174]
 r485: [171..172]
 r486: [169..170]
 r487: [158..159]
 r488: [155..156]
 r489: [152..153]
 r491: [752..753]
 r492: [739..741]
 r493: [673..674]
 r494: [584..585]
 r495: [395..396]
 r496: [391..392]
 r498: [331..332]
 r499: [327..328]
 r501: [519..520]
 r502: [515..516]
 r504: [455..456]
 r505: [451..452]
 r507: [117..118]
 r508: [113..114]
 r510: [51..52]
 r511: [47..48]
 r513: [245..246]
 r514: [241..242]
 r516: [179..180]
 r517: [175..176]
 r527: [138..139]
 r528: [204..205]
 r529: [10..11]
 r530: [76..77]
 r531: [416..417]
 r532: [480..481]
 r533: [292..293]
 r534: [356..357]
 r535: [294..330]
 r536: [358..394]
 r537: [418..454]
 r538: [482..518]
 r539: [12..50]
 r540: [78..116]
 r541: [140..178]
 r542: [206..244]
Compressing live ranges: from 764 to 660 - 86%
Ranges after the compression:
 r87: [640..653]
 r88: [648..651]
 r89: [642..643]
 r90: [638..641]
 r91: [632..633]
 r92: [626..627]
 r93: [622..623]
 r94: [618..619]
 r95: [616..617]
 r96: [614..615]
 r97: [612..613]
 r98: [610..611]
 r99: [604..605]
 r100: [602..603]
 r101: [600..601]
 r102: [598..599]
 r103: [592..593]
 r104: [590..591]
 r105: [588..589]
 r106: [586..587]
 r107: [584..585]
 r108: [558..583]
 r109: [580..581]
 r110: [576..579]
 r111: [570..571]
 r112: [568..569]
 r113: [566..567]
 r114: [564..565]
 r115: [562..563]
 r116: [560..561]
 r117: [558..559]
 r118: [556..557]
 r119: [554..555]
 r120: [550..551]
 r121: [546..547]
 r122: [544..545]
 r123: [540..541]
 r124: [538..539]
 r125: [536..537]
 r126: [534..535]
 r127: [532..533]
 r128: [526..527]
 r129: [524..525]
 r130: [522..523]
 r131: [520..521]
 r132: [474..515]
 r133: [512..513]
 r134: [510..511]
 r135: [508..509]
 r136: [506..507]
 r137: [504..505]
 r138: [478..503]
 r139: [500..501]
 r140: [496..499]
 r141: [490..491]
 r142: [488..489]
 r143: [486..487]
 r144: [484..485]
 r145: [482..483]
 r146: [480..481]
 r147: [478..479]
 r148: [476..477]
 r149: [474..475]
 r150: [468..471]
 r151: [244..245]
 r152: [464..465]
 r153: [460..461]
 r154: [348..349]
 r155: [346..347]
 r156: [302..345]
 r157: [342..343]
 r158: [340..341]
 r159: [338..339]
 r161: [326..327]
 r162: [324..325]
 r163: [324..325]
 r164: [322..323]
 r165: [322..323]
 r166: [320..321]
 r167: [318..319]
 r168: [312..317]
 r169: [314..315]
 r170: [312..313]
 r171: [310..311]
 r172: [308..309]
 r173: [304..307]
 r174: [302..303]
 r175: [298..299]
 r176: [296..297]
 r177: [294..295]
 r178: [248..293]
 r179: [290..291]
 r180: [288..289]
 r181: [286..287]
 r182: [284..285]
 r184: [272..273]
 r185: [270..271]
 r186: [270..271]
 r187: [268..269]
 r188: [268..269]
 r189: [266..267]
 r190: [264..265]
 r191: [258..263]
 r192: [260..261]
 r193: [258..259]
 r194: [256..257]
 r195: [254..255]
 r196: [250..253]
 r197: [248..249]
 r198: [456..457]
 r199: [452..453]
 r200: [450..451]
 r201: [406..449]
 r202: [446..447]
 r203: [444..445]
 r204: [442..443]
 r206: [430..431]
 r207: [428..429]
 r208: [428..429]
 r209: [426..427]
 r210: [426..427]
 r211: [424..425]
 r212: [422..423]
 r213: [416..421]
 r214: [418..419]
 r215: [416..417]
 r216: [414..415]
 r217: [412..413]
 r218: [408..411]
 r219: [406..407]
 r220: [402..403]
 r221: [400..401]
 r222: [398..399]
 r223: [352..397]
 r224: [394..395]
 r225: [392..393]
 r226: [390..391]
 r227: [388..389]
 r229: [376..377]
 r230: [374..375]
 r231: [374..375]
 r232: [372..373]
 r233: [372..373]
 r234: [370..371]
 r235: [368..369]
 r236: [362..367]
 r237: [364..365]
 r238: [362..363]
 r239: [360..361]
 r240: [358..359]
 r241: [354..357]
 r242: [352..353]
 r243: [240..241]
 r244: [236..239]
 r245: [4..5]
 r246: [232..233]
 r247: [228..229]
 r248: [112..113]
 r249: [110..111]
 r250: [64..109]
 r251: [106..107]
 r252: [104..105]
 r253: [102..103]
 r255: [90..91]
 r256: [88..89]
 r257: [88..89]
 r258: [86..87]
 r259: [86..87]
 r260: [84..85]
 r261: [82..83]
 r262: [74..81]
 r263: [78..79]
 r264: [76..77]
 r265: [74..75]
 r266: [72..73]
 r267: [70..71]
 r268: [66..69]
 r269: [64..65]
 r270: [60..61]
 r271: [58..59]
 r272: [56..57]
 r273: [8..55]
 r274: [52..53]
 r275: [50..51]
 r276: [48..49]
 r277: [46..47]
 r279: [34..35]
 r280: [32..33]
 r281: [32..33]
 r282: [30..31]
 r283: [30..31]
 r284: [28..29]
 r285: [26..27]
 r286: [18..25]
 r287: [22..23]
 r288: [20..21]
 r289: [18..19]
 r290: [16..17]
 r291: [14..15]
 r292: [10..13]
 r293: [8..9]
 r294: [224..225]
 r295: [220..221]
 r296: [218..219]
 r297: [172..217]
 r298: [214..215]
 r299: [212..213]
 r300: [210..211]
 r302: [198..199]
 r303: [196..197]
 r304: [196..197]
 r305: [194..195]
 r306: [194..195]
 r307: [192..193]
 r308: [190..191]
 r309: [182..189]
 r310: [186..187]
 r311: [184..185]
 r312: [182..183]
 r313: [180..181]
 r314: [178..179]
 r315: [174..177]
 r316: [172..173]
 r317: [168..169]
 r318: [166..167]
 r319: [164..165]
 r320: [116..163]
 r321: [160..161]
 r322: [158..159]
 r323: [156..157]
 r324: [154..155]
 r326: [142..143]
 r327: [140..141]
 r328: [140..141]
 r329: [138..139]
 r330: [138..139]
 r331: [136..137]
 r332: [134..135]
 r333: [126..133]
 r334: [130..131]
 r335: [128..129]
 r336: [126..127]
 r337: [124..125]
 r338: [122..123]
 r339: [118..121]
 r340: [116..117]
 r341: [2..3]
 r342: [0..1]
 r343: [658..659]
 r344: [656..657]
 r345: [654..655]
 r346: [652..653]
 r347: [648..649]
 r348: [646..647]
 r349: [644..645]
 r350: [636..637]
 r351: [634..635]
 r352: [630..631]
 r353: [632..633]
 r354: [628..629]
 r355: [624..625]
 r356: [620..621]
 r357: [612..613]
 r358: [608..609]
 r359: [606..607]
 r360: [600..601]
 r361: [596..597]
 r362: [594..595]
 r363: [584..585]
 r364: [582..583]
 r365: [576..577]
 r366: [574..575]
 r367: [572..573]
 r368: [564..565]
 r369: [560..561]
 r370: [554..555]
 r371: [552..553]
 r372: [548..549]
 r373: [542..543]
 r374: [534..535]
 r375: [530..531]
 r376: [528..529]
 r377: [522..523]
 r378: [518..519]
 r379: [516..517]
 r380: [514..515]
 r381: [504..505]
 r382: [502..503]
 r383: [496..497]
 r384: [494..495]
 r385: [492..493]
 r386: [484..485]
 r387: [480..481]
 r388: [472..473]
 r389: [470..471]
 r390: [468..469]
 r391: [246..247]
 r392: [466..467]
 r393: [462..463]
 r394: [350..351]
 r395: [346..347]
 r396: [344..345]
 r397: [340..341]
 r398: [332..335]
 r399: [332..333]
 r400: [330..331]
 r401: [328..329]
 r402: [320..321]
 r403: [318..319]
 r404: [316..317]
 r405: [300..301]
 r406: [294..295]
 r407: [292..293]
 r408: [286..287]
 r409: [278..281]
 r410: [278..279]
 r411: [276..277]
 r412: [274..275]
 r413: [266..267]
 r414: [264..265]
 r415: [262..263]
 r416: [458..459]
 r417: [454..455]
 r418: [450..451]
 r419: [448..449]
 r420: [444..445]
 r421: [436..439]
 r422: [436..437]
 r423: [434..435]
 r424: [432..433]
 r425: [424..425]
 r426: [422..423]
 r427: [420..421]
 r428: [404..405]
 r429: [398..399]
 r430: [396..397]
 r431: [390..391]
 r432: [382..385]
 r433: [382..383]
 r434: [380..381]
 r435: [378..379]
 r436: [370..371]
 r437: [368..369]
 r438: [366..367]
 r439: [242..243]
 r440: [238..239]
 r441: [236..237]
 r442: [6..7]
 r443: [234..235]
 r444: [230..231]
 r445: [114..115]
 r446: [110..111]
 r447: [108..109]
 r448: [104..105]
 r449: [96..99]
 r450: [96..97]
 r451: [94..95]
 r452: [92..93]
 r453: [84..85]
 r454: [82..83]
 r455: [80..81]
 r456: [62..63]
 r457: [56..57]
 r458: [54..55]
 r459: [48..49]
 r460: [40..43]
 r461: [40..41]
 r462: [38..39]
 r463: [36..37]
 r464: [28..29]
 r465: [26..27]
 r466: [24..25]
 r467: [226..227]
 r468: [222..223]
 r469: [218..219]
 r470: [216..217]
 r471: [212..213]
 r472: [204..207]
 r473: [204..205]
 r474: [202..203]
 r475: [200..201]
 r476: [192..193]
 r477: [190..191]
 r478: [188..189]
 r479: [170..171]
 r480: [164..165]
 r481: [162..163]
 r482: [156..157]
 r483: [148..151]
 r484: [148..149]
 r485: [146..147]
 r486: [144..145]
 r487: [136..137]
 r488: [134..135]
 r489: [132..133]
 r491: [650..651]
 r492: [638..639]
 r493: [578..579]
 r494: [498..499]
 r495: [336..337]
 r496: [334..335]
 r498: [282..283]
 r499: [280..281]
 r501: [440..441]
 r502: [438..439]
 r504: [386..387]
 r505: [384..385]
 r507: [100..101]
 r508: [98..99]
 r510: [44..45]
 r511: [42..43]
 r513: [208..209]
 r514: [206..207]
 r516: [152..153]
 r517: [150..151]
 r527: [118..119]
 r528: [174..175]
 r529: [10..11]
 r530: [66..67]
 r531: [354..355]
 r532: [408..409]
 r533: [250..251]
 r534: [304..305]
 r535: [252..281]
 r536: [306..335]
 r537: [356..385]
 r538: [410..439]
 r539: [12..43]
 r540: [68..99]
 r541: [120..151]
 r542: [176..207]

********** Assignment #2: **********

	 Assigning to 527 (cl=SSE_REGS, orig=325, freq=2, tfirst=527, tfreq=2)...
	   Assign 27 to optional reload r527 (freq=2)
	Hard reg 27 is preferable by r541 with profit 1
	 Assigning to 541 (cl=ALL_SSE_REGS, orig=325, freq=2, tfirst=527, tfreq=2)...
	 Assigning to 528 (cl=SSE_REGS, orig=301, freq=2, tfirst=528, tfreq=2)...
	   Assign 28 to optional reload r528 (freq=2)
	Hard reg 28 is preferable by r542 with profit 1
	 Assigning to 542 (cl=ALL_SSE_REGS, orig=301, freq=2, tfirst=528, tfreq=2)...
	 Assigning to 529 (cl=SSE_REGS, orig=278, freq=2, tfirst=529, tfreq=2)...
	   Assign 24 to optional reload r529 (freq=2)
	Hard reg 24 is preferable by r539 with profit 1
	 Assigning to 539 (cl=ALL_SSE_REGS, orig=278, freq=2, tfirst=529, tfreq=2)...
	 Assigning to 530 (cl=SSE_REGS, orig=254, freq=2, tfirst=530, tfreq=2)...
	   Assign 25 to optional reload r530 (freq=2)
	Hard reg 25 is preferable by r540 with profit 1
	 Assigning to 540 (cl=ALL_SSE_REGS, orig=254, freq=2, tfirst=530, tfreq=2)...
	 Assigning to 531 (cl=SSE_REGS, orig=228, freq=2, tfirst=531, tfreq=2)...
	   Assign 26 to optional reload r531 (freq=2)
	Hard reg 26 is preferable by r537 with profit 1
	 Assigning to 537 (cl=ALL_SSE_REGS, orig=228, freq=2, tfirst=531, tfreq=2)...
	 Assigning to 532 (cl=SSE_REGS, orig=205, freq=2, tfirst=532, tfreq=2)...
	   Assign 27 to optional reload r532 (freq=2)
	Hard reg 27 is preferable by r538 with profit 1
	 Assigning to 538 (cl=ALL_SSE_REGS, orig=205, freq=2, tfirst=532, tfreq=2)...
	 Assigning to 533 (cl=SSE_REGS, orig=183, freq=2, tfirst=533, tfreq=2)...
	   Assign 28 to optional reload r533 (freq=2)
	Hard reg 28 is preferable by r535 with profit 1
	 Assigning to 535 (cl=ALL_SSE_REGS, orig=183, freq=2, tfirst=533, tfreq=2)...
	 Assigning to 534 (cl=SSE_REGS, orig=160, freq=2, tfirst=534, tfreq=2)...
	   Assign 24 to optional reload r534 (freq=2)
	Hard reg 24 is preferable by r536 with profit 1
	 Assigning to 536 (cl=ALL_SSE_REGS, orig=160, freq=2, tfirst=534, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  614: r533:SF=r183:SF
      REG_DEAD r183:SF
   Insn after restoring regs:
  572: r183:SF=r498:SF
      REG_DEAD r498:SF
   Insn after restoring regs:
  615: r534:SF=r160:SF
      REG_DEAD r160:SF
   Insn after restoring regs:
  568: r160:SF=r495:SF
      REG_DEAD r495:SF
   Insn after restoring regs:
  612: r531:SF=r228:SF
      REG_DEAD r228:SF
   Insn after restoring regs:
  580: r228:SF=r504:SF
      REG_DEAD r504:SF
   Insn after restoring regs:
  613: r532:SF=r205:SF
      REG_DEAD r205:SF
   Insn after restoring regs:
  576: r205:SF=r501:SF
      REG_DEAD r501:SF
   Insn after restoring regs:
  610: r529:SF=r278:SF
      REG_DEAD r278:SF
   Insn after restoring regs:
  588: r278:SF=r510:SF
      REG_DEAD r510:SF
   Insn after restoring regs:
  611: r530:SF=r254:SF
      REG_DEAD r254:SF
   Insn after restoring regs:
  584: r254:SF=r507:SF
      REG_DEAD r507:SF
   Insn after restoring regs:
  608: r527:SF=r325:SF
      REG_DEAD r325:SF
   Insn after restoring regs:
  596: r325:SF=r516:SF
      REG_DEAD r516:SF
   Insn after restoring regs:
  609: r528:SF=r301:SF
      REG_DEAD r301:SF
   Insn after restoring regs:
  592: r301:SF=r513:SF
      REG_DEAD r513:SF
Keep optional reload reg 497
Keep optional reload reg 500
Keep optional reload reg 503
Keep optional reload reg 506
Keep optional reload reg 509
Keep optional reload reg 512
Keep optional reload reg 515
Keep optional reload reg 518
Remove optional reload reg 527
  Restoring original insn:
  523: r340:SF=r339:SF*r325:SF
      REG_DEAD r325:SF
      REG_DEAD r339:SF
  Deleting move 608
  608: r527:SF=r325:SF
      REG_DEAD r325:SF
deleting insn with uid = 608.
Remove optional reload reg 528
  Restoring original insn:
  485: r316:SF=r315:SF*r301:SF
      REG_DEAD r301:SF
      REG_DEAD r315:SF
  Deleting move 609
  609: r528:SF=r301:SF
      REG_DEAD r301:SF
deleting insn with uid = 609.
Remove optional reload reg 529
  Restoring original insn:
  440: r293:SF=r292:SF*r278:SF
      REG_DEAD r278:SF
      REG_DEAD r292:SF
  Deleting move 610
  610: r529:SF=r278:SF
      REG_DEAD r278:SF
deleting insn with uid = 610.
Remove optional reload reg 530
  Restoring original insn:
  402: r269:SF=r268:SF*r254:SF
      REG_DEAD r254:SF
      REG_DEAD r268:SF
  Deleting move 611
  611: r530:SF=r254:SF
      REG_DEAD r254:SF
deleting insn with uid = 611.
Remove optional reload reg 531
  Restoring original insn:
  328: r242:SF=r241:SF*r228:SF
      REG_DEAD r228:SF
      REG_DEAD r241:SF
  Deleting move 612
  612: r531:SF=r228:SF
      REG_DEAD r228:SF
deleting insn with uid = 612.
Remove optional reload reg 532
  Restoring original insn:
  291: r219:SF=r218:SF*r205:SF
      REG_DEAD r205:SF
      REG_DEAD r218:SF
  Deleting move 613
  613: r532:SF=r205:SF
      REG_DEAD r205:SF
deleting insn with uid = 613.
Remove optional reload reg 533
  Restoring original insn:
  247: r197:SF=r196:SF*r183:SF
      REG_DEAD r183:SF
      REG_DEAD r196:SF
  Deleting move 614
  614: r533:SF=r183:SF
      REG_DEAD r183:SF
deleting insn with uid = 614.
Remove optional reload reg 534
  Restoring original insn:
  210: r174:SF=r173:SF*r160:SF
      REG_DEAD r160:SF
      REG_DEAD r173:SF
  Deleting move 615
  615: r534:SF=r160:SF
      REG_DEAD r160:SF
deleting insn with uid = 615.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 523:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 485:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 440:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 402:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 328:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 291:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 210:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 28
   Insn 541: point = 0
   Insn 540: point = 0
   Insn 536: point = 1
   Insn 533: point = 3
  BB 21
   Insn 356: point = 4
   Insn 355: point = 4
   Insn 354: point = 5
   Insn 353: point = 7
  BB 27
   Insn 557: point = 8
   Insn 527: point = 8
  BB 24
   Insn 555: point = 8
   Insn 441: point = 8
   Insn 440: point = 9
   Insn 439: point = 11
   Insn 438: point = 13
   Insn 437: point = 14
   Insn 436: point = 14
   Insn 435: point = 15
   Insn 434: point = 17
   Insn 433: point = 19
   Insn 432: point = 21
   Insn 431: point = 23
   Insn 430: point = 24
   Insn 429: point = 26
   Insn 428: point = 27
   Insn 427: point = 29
   Insn 426: point = 30
   Insn 425: point = 32
   Insn 424: point = 33
   Insn 423: point = 35
   Insn 422: point = 36
   Insn 421: point = 38
   Insn 420: point = 40
   Insn 419: point = 42
   Insn 590: point = 44
   Insn 418: point = 46
   Insn 589: point = 46
   Insn 417: point = 47
   Insn 588: point = 48
   Insn 416: point = 50
   Insn 415: point = 52
   Insn 414: point = 54
   Insn 413: point = 55
   Insn 412: point = 57
   Insn 411: point = 59
   Insn 410: point = 61
   Insn 409: point = 62
   Insn 408: point = 64
   Insn 407: point = 65
   Insn 406: point = 67
   Insn 405: point = 69
   Insn 404: point = 71
   Insn 403: point = 72
   Insn 402: point = 73
   Insn 401: point = 75
   Insn 400: point = 77
   Insn 399: point = 78
   Insn 398: point = 78
   Insn 397: point = 79
   Insn 396: point = 81
   Insn 395: point = 83
   Insn 394: point = 85
   Insn 393: point = 87
   Insn 392: point = 88
   Insn 391: point = 90
   Insn 390: point = 91
   Insn 389: point = 93
   Insn 388: point = 94
   Insn 387: point = 96
   Insn 386: point = 97
   Insn 385: point = 99
   Insn 384: point = 100
   Insn 383: point = 102
   Insn 382: point = 104
   Insn 381: point = 106
   Insn 586: point = 108
   Insn 380: point = 110
   Insn 585: point = 110
   Insn 379: point = 111
   Insn 584: point = 112
   Insn 378: point = 114
   Insn 377: point = 116
   Insn 376: point = 118
   Insn 375: point = 119
   Insn 374: point = 121
   Insn 373: point = 123
   Insn 372: point = 124
   Insn 371: point = 126
   Insn 370: point = 127
   Insn 369: point = 129
   Insn 368: point = 131
  BB 26
   Insn 524: point = 132
   Insn 523: point = 133
   Insn 522: point = 135
   Insn 521: point = 137
   Insn 520: point = 138
   Insn 519: point = 138
   Insn 518: point = 139
   Insn 517: point = 141
   Insn 516: point = 143
   Insn 515: point = 145
   Insn 514: point = 147
   Insn 513: point = 148
   Insn 512: point = 150
   Insn 511: point = 151
   Insn 510: point = 153
   Insn 509: point = 154
   Insn 508: point = 156
   Insn 507: point = 157
   Insn 506: point = 159
   Insn 505: point = 160
   Insn 504: point = 162
   Insn 503: point = 164
   Insn 502: point = 166
   Insn 598: point = 168
   Insn 501: point = 170
   Insn 597: point = 170
   Insn 500: point = 171
   Insn 596: point = 172
   Insn 499: point = 174
   Insn 498: point = 176
   Insn 497: point = 178
   Insn 496: point = 179
   Insn 495: point = 181
   Insn 494: point = 183
   Insn 493: point = 185
   Insn 492: point = 186
   Insn 491: point = 188
   Insn 490: point = 189
   Insn 489: point = 191
   Insn 488: point = 193
   Insn 487: point = 195
   Insn 486: point = 196
   Insn 485: point = 197
   Insn 484: point = 199
   Insn 483: point = 201
   Insn 482: point = 202
   Insn 481: point = 202
   Insn 480: point = 203
   Insn 479: point = 205
   Insn 478: point = 207
   Insn 477: point = 209
   Insn 476: point = 211
   Insn 475: point = 212
   Insn 474: point = 214
   Insn 473: point = 215
   Insn 472: point = 217
   Insn 471: point = 218
   Insn 470: point = 220
   Insn 469: point = 221
   Insn 468: point = 223
   Insn 467: point = 224
   Insn 466: point = 226
   Insn 465: point = 228
   Insn 464: point = 230
   Insn 594: point = 232
   Insn 463: point = 234
   Insn 593: point = 234
   Insn 462: point = 235
   Insn 592: point = 236
   Insn 461: point = 238
   Insn 460: point = 240
   Insn 459: point = 242
   Insn 458: point = 243
   Insn 457: point = 245
   Insn 456: point = 247
   Insn 455: point = 248
   Insn 454: point = 250
   Insn 453: point = 251
   Insn 452: point = 253
   Insn 451: point = 255
  BB 25
   Insn 449: point = 256
   Insn 448: point = 256
   Insn 447: point = 257
   Insn 446: point = 259
  BB 23
   Insn 366: point = 260
   Insn 365: point = 260
   Insn 364: point = 261
   Insn 363: point = 263
  BB 22
   Insn 361: point = 264
   Insn 360: point = 264
   Insn 359: point = 265
   Insn 358: point = 267
  BB 20
   Insn 351: point = 268
  BB 19
   Insn 346: point = 268
   Insn 345: point = 268
   Insn 344: point = 269
  BB 18
   Insn 343: point = 271
   Insn 342: point = 271
   Insn 341: point = 272
   Insn 340: point = 273
   Insn 339: point = 275
   Insn 338: point = 277
  BB 11
   Insn 165: point = 278
   Insn 164: point = 278
   Insn 163: point = 279
   Insn 162: point = 281
  BB 17
   Insn 553: point = 282
   Insn 332: point = 282
  BB 14
   Insn 551: point = 282
   Insn 248: point = 282
   Insn 247: point = 283
   Insn 246: point = 285
   Insn 245: point = 287
   Insn 244: point = 288
   Insn 243: point = 288
   Insn 242: point = 289
   Insn 241: point = 291
   Insn 240: point = 293
   Insn 239: point = 295
   Insn 238: point = 296
   Insn 237: point = 298
   Insn 236: point = 299
   Insn 235: point = 301
   Insn 234: point = 302
   Insn 233: point = 304
   Insn 232: point = 305
   Insn 231: point = 307
   Insn 230: point = 308
   Insn 229: point = 310
   Insn 228: point = 312
   Insn 227: point = 314
   Insn 574: point = 316
   Insn 226: point = 318
   Insn 573: point = 318
   Insn 225: point = 319
   Insn 572: point = 320
   Insn 224: point = 322
   Insn 223: point = 324
   Insn 222: point = 326
   Insn 221: point = 327
   Insn 220: point = 329
   Insn 219: point = 331
   Insn 218: point = 333
   Insn 217: point = 334
   Insn 216: point = 336
   Insn 215: point = 337
   Insn 214: point = 339
   Insn 213: point = 341
   Insn 212: point = 343
   Insn 211: point = 344
   Insn 210: point = 345
   Insn 209: point = 347
   Insn 208: point = 349
   Insn 207: point = 350
   Insn 206: point = 350
   Insn 205: point = 351
   Insn 204: point = 353
   Insn 203: point = 355
   Insn 202: point = 357
   Insn 201: point = 358
   Insn 200: point = 360
   Insn 199: point = 361
   Insn 198: point = 363
   Insn 197: point = 364
   Insn 196: point = 366
   Insn 195: point = 367
   Insn 194: point = 369
   Insn 193: point = 370
   Insn 192: point = 372
   Insn 191: point = 374
   Insn 190: point = 376
   Insn 570: point = 378
   Insn 189: point = 380
   Insn 569: point = 380
   Insn 188: point = 381
   Insn 568: point = 382
   Insn 187: point = 384
   Insn 186: point = 386
   Insn 185: point = 388
   Insn 184: point = 389
   Insn 183: point = 391
   Insn 182: point = 393
   Insn 181: point = 394
   Insn 180: point = 396
   Insn 179: point = 397
   Insn 178: point = 399
   Insn 177: point = 401
  BB 16
   Insn 329: point = 402
   Insn 328: point = 403
   Insn 327: point = 405
   Insn 326: point = 407
   Insn 325: point = 408
   Insn 324: point = 408
   Insn 323: point = 409
   Insn 322: point = 411
   Insn 321: point = 413
   Insn 320: point = 415
   Insn 319: point = 416
   Insn 318: point = 418
   Insn 317: point = 419
   Insn 316: point = 421
   Insn 315: point = 422
   Insn 314: point = 424
   Insn 313: point = 425
   Insn 312: point = 427
   Insn 311: point = 428
   Insn 310: point = 430
   Insn 309: point = 432
   Insn 308: point = 434
   Insn 582: point = 436
   Insn 307: point = 438
   Insn 581: point = 438
   Insn 306: point = 439
   Insn 580: point = 440
   Insn 305: point = 442
   Insn 304: point = 444
   Insn 303: point = 446
   Insn 302: point = 447
   Insn 301: point = 449
   Insn 300: point = 451
   Insn 299: point = 453
   Insn 298: point = 454
   Insn 297: point = 456
   Insn 296: point = 457
   Insn 295: point = 459
   Insn 294: point = 461
   Insn 293: point = 463
   Insn 292: point = 464
   Insn 291: point = 465
   Insn 290: point = 467
   Insn 289: point = 469
   Insn 288: point = 470
   Insn 287: point = 470
   Insn 286: point = 471
   Insn 285: point = 473
   Insn 284: point = 475
   Insn 283: point = 477
   Insn 282: point = 478
   Insn 281: point = 480
   Insn 280: point = 481
   Insn 279: point = 483
   Insn 278: point = 484
   Insn 277: point = 486
   Insn 276: point = 487
   Insn 275: point = 489
   Insn 274: point = 490
   Insn 273: point = 492
   Insn 272: point = 494
   Insn 271: point = 496
   Insn 578: point = 498
   Insn 270: point = 500
   Insn 577: point = 500
   Insn 269: point = 501
   Insn 576: point = 502
   Insn 268: point = 504
   Insn 267: point = 506
   Insn 266: point = 508
   Insn 265: point = 509
   Insn 264: point = 511
   Insn 263: point = 513
   Insn 262: point = 514
   Insn 261: point = 516
   Insn 260: point = 517
   Insn 259: point = 519
   Insn 258: point = 521
  BB 15
   Insn 256: point = 522
   Insn 255: point = 522
   Insn 254: point = 523
   Insn 253: point = 525
  BB 13
   Insn 175: point = 526
   Insn 174: point = 526
   Insn 173: point = 527
   Insn 172: point = 529
  BB 12
   Insn 170: point = 530
   Insn 169: point = 530
   Insn 168: point = 531
   Insn 167: point = 533
  BB 10
   Insn 160: point = 534
  BB 9
   Insn 155: point = 534
   Insn 154: point = 534
   Insn 153: point = 535
  BB 8
   Insn 152: point = 537
   Insn 151: point = 537
   Insn 150: point = 538
   Insn 149: point = 539
   Insn 148: point = 541
  BB 7
   Insn 145: point = 542
   Insn 144: point = 543
   Insn 143: point = 545
   Insn 142: point = 547
   Insn 141: point = 549
   Insn 140: point = 550
   Insn 139: point = 552
   Insn 138: point = 554
   Insn 137: point = 555
   Insn 136: point = 557
   Insn 135: point = 559
   Insn 134: point = 561
   Insn 133: point = 563
   Insn 132: point = 565
   Insn 567: point = 567
   Insn 131: point = 569
   Insn 566: point = 569
   Insn 130: point = 570
   Insn 129: point = 572
   Insn 128: point = 574
   Insn 127: point = 575
   Insn 126: point = 577
   Insn 125: point = 578
   Insn 124: point = 580
   Insn 123: point = 582
   Insn 122: point = 583
   Insn 121: point = 583
   Insn 120: point = 584
   Insn 119: point = 586
   Insn 118: point = 588
   Insn 117: point = 589
   Insn 116: point = 591
   Insn 115: point = 592
   Insn 114: point = 593
   Insn 113: point = 595
   Insn 112: point = 597
   Insn 111: point = 598
   Insn 110: point = 600
   Insn 109: point = 602
   Insn 108: point = 604
   Insn 107: point = 605
   Insn 106: point = 606
   Insn 105: point = 608
   Insn 104: point = 610
   Insn 103: point = 611
   Insn 102: point = 613
   Insn 101: point = 615
   Insn 100: point = 617
   Insn 99: point = 619
  BB 6
   Insn 97: point = 620
   Insn 96: point = 620
   Insn 95: point = 621
   Insn 94: point = 623
   Insn 93: point = 625
  BB 5
   Insn 91: point = 626
   Insn 90: point = 626
   Insn 89: point = 627
   Insn 88: point = 629
  BB 4
   Insn 85: point = 630
   Insn 84: point = 631
   Insn 83: point = 632
   Insn 82: point = 634
   Insn 81: point = 636
   Insn 80: point = 638
   Insn 79: point = 639
   Insn 78: point = 641
   Insn 77: point = 643
   Insn 76: point = 644
   Insn 75: point = 646
   Insn 74: point = 648
   Insn 73: point = 650
   Insn 72: point = 652
   Insn 71: point = 654
   Insn 565: point = 656
   Insn 70: point = 658
   Insn 564: point = 658
   Insn 69: point = 659
   Insn 68: point = 661
   Insn 67: point = 663
   Insn 66: point = 664
   Insn 65: point = 666
   Insn 64: point = 667
   Insn 63: point = 669
   Insn 62: point = 671
   Insn 61: point = 672
   Insn 60: point = 672
   Insn 59: point = 673
   Insn 58: point = 675
   Insn 57: point = 677
   Insn 56: point = 678
   Insn 55: point = 679
   Insn 54: point = 681
   Insn 53: point = 683
   Insn 52: point = 684
   Insn 51: point = 686
   Insn 50: point = 688
   Insn 49: point = 690
   Insn 48: point = 691
   Insn 47: point = 692
   Insn 46: point = 694
   Insn 45: point = 696
   Insn 44: point = 697
   Insn 43: point = 699
   Insn 42: point = 701
   Insn 41: point = 703
   Insn 40: point = 705
  BB 3
   Insn 38: point = 706
   Insn 37: point = 706
   Insn 36: point = 707
   Insn 35: point = 709
  BB 2
   Insn 33: point = 710
   Insn 32: point = 710
   Insn 31: point = 711
   Insn 30: point = 713
   Insn 29: point = 714
   Insn 28: point = 715
   Insn 27: point = 717
   Insn 26: point = 718
   Insn 25: point = 720
   Insn 24: point = 721
   Insn 563: point = 722
   Insn 23: point = 724
   Insn 562: point = 725
   Insn 22: point = 727
   Insn 21: point = 729
   Insn 20: point = 731
   Insn 19: point = 733
   Insn 561: point = 735
   Insn 18: point = 737
   Insn 560: point = 737
   Insn 17: point = 738
   Insn 16: point = 740
   Insn 15: point = 741
   Insn 14: point = 743
   Insn 13: point = 744
   Insn 12: point = 745
   Insn 11: point = 746
   Insn 10: point = 747
   Insn 9: point = 748
   Insn 5: point = 748
   Insn 4: point = 748
   Insn 3: point = 748
   Insn 2: point = 748
 r160: [346..382]
 r183: [284..320]
 r205: [466..502]
 r228: [404..440]
 r254: [74..112]
 r278: [10..48]
 r301: [198..236]
 r325: [134..172]
Compressing live ranges: from 748 to 16 - 2%
Ranges after the compression:
 r160: [10..11]
 r183: [8..9]
 r205: [14..15]
 r228: [12..13]
 r254: [2..3]
 r278: [0..1]
 r301: [6..7]
 r325: [4..5]
  Slot 0 regnos (width = 4):	 160	 325	 301	 278	 254	 228	 205	 183
Changing spilled pseudos to memory in insn #568
Changing spilled pseudos to memory in insn #210
Changing spilled pseudos to memory in insn #572
Changing spilled pseudos to memory in insn #247
Changing spilled pseudos to memory in insn #576
Changing spilled pseudos to memory in insn #291
Changing spilled pseudos to memory in insn #580
Changing spilled pseudos to memory in insn #328
Changing spilled pseudos to memory in insn #584
Changing spilled pseudos to memory in insn #402
Changing spilled pseudos to memory in insn #588
Changing spilled pseudos to memory in insn #440
Changing spilled pseudos to memory in insn #592
Changing spilled pseudos to memory in insn #485
Changing spilled pseudos to memory in insn #596
Changing spilled pseudos to memory in insn #523
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #523
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 523:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #596
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 596:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #485
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #592
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 592:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #440
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #588
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 588:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #402
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #584
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 584:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #328
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #580
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 580:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #291
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #576
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 576:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #247
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #572
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 572:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #210
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #568
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 568:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 15
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 66
changing reg in insn 66
changing reg in insn 82
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 89
changing reg in insn 90
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 117
changing reg in insn 145
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 127
changing reg in insn 127
changing reg in insn 127
changing reg in insn 143
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 149
changing reg in insn 154
changing reg in insn 151
changing reg in insn 163
changing reg in insn 164
changing reg in insn 168
changing reg in insn 169
changing reg in insn 173
changing reg in insn 174
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 181
changing reg in insn 181
changing reg in insn 181
changing reg in insn 211
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 195
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 199
changing reg in insn 199
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 206
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 217
changing reg in insn 217
changing reg in insn 217
changing reg in insn 248
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 221
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 232
changing reg in insn 231
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 236
changing reg in insn 236
changing reg in insn 236
changing reg in insn 238
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 248
changing reg in insn 254
changing reg in insn 255
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 262
changing reg in insn 262
changing reg in insn 262
changing reg in insn 292
changing reg in insn 264
changing reg in insn 265
changing reg in insn 265
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 276
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 280
changing reg in insn 280
changing reg in insn 282
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 286
changing reg in insn 287
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 291
changing reg in insn 292
changing reg in insn 294
changing reg in insn 295
changing reg in insn 295
changing reg in insn 296
changing reg in insn 296
changing reg in insn 298
changing reg in insn 298
changing reg in insn 298
changing reg in insn 329
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 302
changing reg in insn 302
changing reg in insn 304
changing reg in insn 304
changing reg in insn 305
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 313
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 314
changing reg in insn 315
changing reg in insn 317
changing reg in insn 317
changing reg in insn 317
changing reg in insn 319
changing reg in insn 321
changing reg in insn 322
changing reg in insn 322
changing reg in insn 323
changing reg in insn 324
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 345
changing reg in insn 342
changing reg in insn 354
changing reg in insn 355
changing reg in insn 359
changing reg in insn 360
changing reg in insn 364
changing reg in insn 365
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 372
changing reg in insn 372
changing reg in insn 372
changing reg in insn 403
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 377
changing reg in insn 377
changing reg in insn 378
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 386
changing reg in insn 385
changing reg in insn 386
changing reg in insn 386
changing reg in insn 387
changing reg in insn 388
changing reg in insn 390
changing reg in insn 390
changing reg in insn 390
changing reg in insn 392
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 396
changing reg in insn 396
changing reg in insn 397
changing reg in insn 398
changing reg in insn 400
changing reg in insn 401
changing reg in insn 401
changing reg in insn 402
changing reg in insn 403
changing reg in insn 405
changing reg in insn 406
changing reg in insn 406
changing reg in insn 407
changing reg in insn 407
changing reg in insn 409
changing reg in insn 409
changing reg in insn 409
changing reg in insn 441
changing reg in insn 411
changing reg in insn 412
changing reg in insn 412
changing reg in insn 413
changing reg in insn 413
changing reg in insn 415
changing reg in insn 415
changing reg in insn 416
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 424
changing reg in insn 423
changing reg in insn 424
changing reg in insn 424
changing reg in insn 425
changing reg in insn 426
changing reg in insn 428
changing reg in insn 428
changing reg in insn 428
changing reg in insn 430
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 434
changing reg in insn 434
changing reg in insn 435
changing reg in insn 436
changing reg in insn 438
changing reg in insn 439
changing reg in insn 439
changing reg in insn 440
changing reg in insn 441
changing reg in insn 447
changing reg in insn 448
changing reg in insn 452
changing reg in insn 453
changing reg in insn 453
changing reg in insn 455
changing reg in insn 455
changing reg in insn 455
changing reg in insn 486
changing reg in insn 457
changing reg in insn 458
changing reg in insn 458
changing reg in insn 460
changing reg in insn 460
changing reg in insn 461
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 469
changing reg in insn 468
changing reg in insn 469
changing reg in insn 469
changing reg in insn 470
changing reg in insn 471
changing reg in insn 473
changing reg in insn 473
changing reg in insn 473
changing reg in insn 475
changing reg in insn 477
changing reg in insn 478
changing reg in insn 478
changing reg in insn 479
changing reg in insn 479
changing reg in insn 480
changing reg in insn 481
changing reg in insn 483
changing reg in insn 484
changing reg in insn 484
changing reg in insn 485
changing reg in insn 486
changing reg in insn 488
changing reg in insn 489
changing reg in insn 489
changing reg in insn 490
changing reg in insn 490
changing reg in insn 492
changing reg in insn 492
changing reg in insn 492
changing reg in insn 524
changing reg in insn 494
changing reg in insn 495
changing reg in insn 495
changing reg in insn 496
changing reg in insn 496
changing reg in insn 498
changing reg in insn 498
changing reg in insn 499
changing reg in insn 504
changing reg in insn 505
changing reg in insn 505
changing reg in insn 507
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 508
changing reg in insn 509
changing reg in insn 511
changing reg in insn 511
changing reg in insn 511
changing reg in insn 513
changing reg in insn 515
changing reg in insn 516
changing reg in insn 516
changing reg in insn 517
changing reg in insn 517
changing reg in insn 518
changing reg in insn 519
changing reg in insn 521
changing reg in insn 522
changing reg in insn 522
changing reg in insn 523
changing reg in insn 524
changing reg in insn 533
changing reg in insn 536
changing reg in insn 536
changing reg in insn 540
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 88
changing reg in insn 89
changing reg in insn 93
changing reg in insn 94
changing reg in insn 99
changing reg in insn 100
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 138
changing reg in insn 139
changing reg in insn 141
changing reg in insn 142
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 162
changing reg in insn 163
changing reg in insn 167
changing reg in insn 168
changing reg in insn 172
changing reg in insn 173
changing reg in insn 177
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 185
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 202
changing reg in insn 203
changing reg in insn 212
changing reg in insn 213
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 222
changing reg in insn 225
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 239
changing reg in insn 240
changing reg in insn 253
changing reg in insn 254
changing reg in insn 258
changing reg in insn 259
changing reg in insn 261
changing reg in insn 262
changing reg in insn 263
changing reg in insn 264
changing reg in insn 266
changing reg in insn 269
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 279
changing reg in insn 280
changing reg in insn 281
changing reg in insn 283
changing reg in insn 284
changing reg in insn 293
changing reg in insn 294
changing reg in insn 297
changing reg in insn 298
changing reg in insn 299
changing reg in insn 300
changing reg in insn 303
changing reg in insn 306
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 310
changing reg in insn 316
changing reg in insn 317
changing reg in insn 318
changing reg in insn 320
changing reg in insn 321
changing reg in insn 338
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 344
changing reg in insn 345
changing reg in insn 353
changing reg in insn 354
changing reg in insn 358
changing reg in insn 359
changing reg in insn 363
changing reg in insn 364
changing reg in insn 368
changing reg in insn 369
changing reg in insn 371
changing reg in insn 372
changing reg in insn 373
changing reg in insn 374
changing reg in insn 376
changing reg in insn 379
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 383
changing reg in insn 389
changing reg in insn 390
changing reg in insn 391
changing reg in insn 393
changing reg in insn 394
changing reg in insn 404
changing reg in insn 405
changing reg in insn 408
changing reg in insn 409
changing reg in insn 410
changing reg in insn 411
changing reg in insn 414
changing reg in insn 417
changing reg in insn 419
changing reg in insn 420
changing reg in insn 420
changing reg in insn 421
changing reg in insn 427
changing reg in insn 428
changing reg in insn 429
changing reg in insn 431
changing reg in insn 432
changing reg in insn 446
changing reg in insn 447
changing reg in insn 451
changing reg in insn 452
changing reg in insn 454
changing reg in insn 455
changing reg in insn 456
changing reg in insn 457
changing reg in insn 459
changing reg in insn 462
changing reg in insn 464
changing reg in insn 465
changing reg in insn 465
changing reg in insn 466
changing reg in insn 472
changing reg in insn 473
changing reg in insn 474
changing reg in insn 476
changing reg in insn 477
changing reg in insn 487
changing reg in insn 488
changing reg in insn 491
changing reg in insn 492
changing reg in insn 493
changing reg in insn 494
changing reg in insn 497
changing reg in insn 500
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 504
changing reg in insn 510
changing reg in insn 511
changing reg in insn 512
changing reg in insn 514
changing reg in insn 515
deleting insn with uid = 561.
deleting insn with uid = 562.
deleting insn with uid = 60.
deleting insn with uid = 62.
deleting insn with uid = 565.
deleting insn with uid = 121.
deleting insn with uid = 123.
deleting insn with uid = 567.
deleting insn with uid = 570.
deleting insn with uid = 206.
deleting insn with uid = 208.
deleting insn with uid = 574.
deleting insn with uid = 243.
deleting insn with uid = 245.
deleting insn with uid = 578.
deleting insn with uid = 287.
deleting insn with uid = 289.
deleting insn with uid = 582.
deleting insn with uid = 324.
deleting insn with uid = 326.
deleting insn with uid = 586.
deleting insn with uid = 398.
deleting insn with uid = 400.
deleting insn with uid = 590.
deleting insn with uid = 436.
deleting insn with uid = 438.
deleting insn with uid = 594.
deleting insn with uid = 481.
deleting insn with uid = 483.
deleting insn with uid = 598.
deleting insn with uid = 519.
deleting insn with uid = 521.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 207.
verify found no changes in insn with uid = 244.
verify found no changes in insn with uid = 288.
verify found no changes in insn with uid = 325.
verify found no changes in insn with uid = 399.
verify found no changes in insn with uid = 437.
verify found no changes in insn with uid = 482.
verify found no changes in insn with uid = 520.


int filter(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7]
;;  ref usage 	r0={193d,194u} r1={53d,43u,20e} r2={11d,1u} r3={9d,9u} r4={11d,1u} r5={11d,1u} r6={1d,168u} r7={1d,38u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={132d,16u} r18={10d} r19={10d} r20={1d,1u,27e} r21={111d,112u,10e} r22={72d,61u,2e} r23={15d,4u} r24={13d,2u} r25={13d,2u} r26={13d,2u} r27={12d,1u} r28={12d,1u} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} 
;;    total ref usage 1982{1266d,657u,59e} in 488{478 regular + 10 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 343 344 345 346 347 348 349 350 351 352 353 354
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) preproc.cpp:424 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:426 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SF 21 xmm0 [343])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:428 129 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [343])) preproc.cpp:428 129 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SF 21 xmm0 [344])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:428 129 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [344])) preproc.cpp:428 129 {*movsf_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) preproc.cpp:430 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SF 22 xmm1 [orig:87 D.6916 ] [87])
        (mem/j:SF (reg/f:DI 0 ax [345]) [0 procpar_info_15(D)->acquision_time+0 S4 A64])) preproc.cpp:430 129 {*movsf_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) preproc.cpp:430 89 {*movdi_internal}
     (nil))
(insn 17 16 560 2 (set (reg:SI 0 ax [orig:88 D.6917 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [346])
                (const_int 300 [0x12c])) [0 procpar_info_15(D)->num_points+0 S4 A32])) preproc.cpp:430 90 {*movsi_internal}
     (nil))
(insn 560 17 18 2 (set (reg:SI 1 dx [347])
        (reg:SI 0 ax [orig:88 D.6917 ] [88])) preproc.cpp:430 90 {*movsi_internal}
     (nil))
(insn 18 560 19 2 (parallel [
            (set (reg:SI 1 dx [347])
                (lshiftrt:SI (reg:SI 1 dx [347])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:430 544 {*lshrsi3_1}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 0 ax [348])
                (plus:SI (reg:SI 0 ax [orig:88 D.6917 ] [88])
                    (reg:SI 1 dx [347])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:430 217 {*addsi_1}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 0 ax [349])
                (ashiftrt:SI (reg:SI 0 ax [348])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:430 545 {*ashrsi3_1}
     (nil))
(insn 21 20 22 2 (set (reg:SI 0 ax [orig:89 D.6917 ] [89])
        (reg:SI 0 ax [349])) preproc.cpp:430 90 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SF 21 xmm0 [orig:90 D.6916 ] [90])
        (float:SF (reg:SI 0 ax [orig:89 D.6917 ] [89]))) preproc.cpp:430 199 {*floatsisf2_sse}
     (nil))
(insn 23 22 563 2 (set (reg:SF 22 xmm1 [350])
        (div:SF (reg:SF 22 xmm1 [350])
            (reg:SF 21 xmm0 [orig:90 D.6916 ] [90]))) preproc.cpp:430 804 {*fop_sf_1_sse}
     (nil))
(insn 563 23 24 2 (set (reg:SF 21 xmm0 [350])
        (reg:SF 22 xmm1 [350])) preproc.cpp:430 129 {*movsf_internal}
     (nil))
(insn 24 563 25 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32])
        (reg:SF 21 xmm0 [350])) preproc.cpp:430 129 {*movsf_internal}
     (nil))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:431 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SF 21 xmm0 [orig:91 D.6916 ] [91])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [351])
                (const_int 48 [0x30])) [0 preprocess_21(D)->pre_delay_time+0 S4 A32])) preproc.cpp:431 129 {*movsf_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SF 22 xmm1 [353])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S4 A32])) preproc.cpp:431 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 28 27 29 2 (set (reg:SF 21 xmm0 [352])
        (div:SF (reg:SF 21 xmm0 [orig:91 D.6916 ] [91])
            (reg:SF 22 xmm1 [353]))) preproc.cpp:431 804 {*fop_sf_1_sse}
     (nil))
(insn 29 28 30 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32])
        (reg:SF 21 xmm0 [352])) preproc.cpp:431 129 {*movsf_internal}
     (nil))
(insn 30 29 31 2 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:437 89 {*movdi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:SI 0 ax [orig:92 D.6917 ] [92])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [354])
                (const_int 40 [0x28])) [0 preprocess_21(D)->pre_quecc+0 S4 A32])) preproc.cpp:437 90 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.6917 ] [92])
            (const_int 0 [0]))) preproc.cpp:437 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 33 32 34 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) preproc.cpp:437 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 355
(note 34 33 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 3 (set (reg/f:DI 0 ax [355])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:437 89 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:SI 0 ax [orig:93 D.6917 ] [93])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [355])
                (const_int 52 [0x34])) [0 preprocess_21(D)->pre_quecc_if+0 S4 A32])) preproc.cpp:437 90 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 D.6917 ] [93])
            (const_int 1 [0x1]))) preproc.cpp:437 7 {*cmpsi_1}
     (nil))
(jump_insn 38 37 39 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) preproc.cpp:437 612 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370
(note 39 38 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 4 (set (reg/f:DI 0 ax [356])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:438 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:SI 0 ax [orig:94 D.6917 ] [94])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [356])
                (const_int 44 [0x2c])) [0 preprocess_21(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:438 90 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 0 ax [orig:95 D.6918 ] [95])
        (sign_extend:DI (reg:SI 0 ax [orig:94 D.6917 ] [94]))) preproc.cpp:438 142 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 0 ax [orig:96 D.6918 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:95 D.6918 ] [95])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:438 512 {*ashldi3_1}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg:DI 1 dx [orig:97 D.6919 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 D.6918 ] [96])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:438 218 {*adddi_1}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [357])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:438 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.6920 ] [98])
                (plus:DI (reg/f:DI 0 ax [357])
                    (reg:DI 1 dx [orig:97 D.6919 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:438 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.6919 ] [97]))
        (nil)))
(insn 47 46 48 4 (set (reg:SF 21 xmm0 [358])
        (mem:SF (reg/f:DI 0 ax [orig:98 D.6920 ] [98]) [0 *_31+0 S4 A32])) preproc.cpp:438 129 {*movsf_internal}
     (nil))
(insn 48 47 49 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [358])) preproc.cpp:438 129 {*movsf_internal}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [359])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:439 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:SI 0 ax [orig:99 D.6917 ] [99])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [359])
                (const_int 44 [0x2c])) [0 preprocess_21(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:439 90 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 0 ax [orig:100 D.6918 ] [100])
        (sign_extend:DI (reg:SI 0 ax [orig:99 D.6917 ] [99]))) preproc.cpp:439 142 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 4 (parallel [
            (set (reg:DI 1 dx [orig:101 D.6918 ] [101])
                (ashift:DI (reg:DI 0 ax [orig:100 D.6918 ] [100])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:439 512 {*ashldi3_1}
     (nil))
(insn 53 52 54 4 (set (reg/f:DI 0 ax [360])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:439 89 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.6920 ] [102])
                (plus:DI (reg/f:DI 0 ax [360])
                    (reg:DI 1 dx [orig:101 D.6918 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:439 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:101 D.6918 ] [101]))
        (nil)))
(insn 55 54 56 4 (set (reg:SF 21 xmm0 [361])
        (mem:SF (reg/f:DI 0 ax [orig:102 D.6920 ] [102]) [0 *_36+0 S4 A32])) preproc.cpp:439 129 {*movsf_internal}
     (nil))
(insn 56 55 57 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [361])) preproc.cpp:439 129 {*movsf_internal}
     (nil))
(insn 57 56 58 4 (set (reg:SF 21 xmm0 [362])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])) preproc.cpp:441 129 {*movsf_internal}
     (nil))
(insn 58 57 59 4 (set (reg:SF 21 xmm0 [orig:103 D.6916 ] [103])
        (div:SF (reg:SF 21 xmm0 [362])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32]))) preproc.cpp:441 804 {*fop_sf_1_sse}
     (nil))
(insn 59 58 61 4 (set (reg:DF 21 xmm0 [orig:104 D.6921 ] [104])
        (float_extend:DF (reg:SF 21 xmm0 [orig:103 D.6916 ] [103]))) preproc.cpp:441 152 {*extendsfdf2_sse}
     (nil))
(call_insn 61 59 63 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x7fae98e66d80 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) preproc.cpp:441 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 63 61 64 4 (set (reg:SF 21 xmm0 [orig:106 D.6916 ] [106])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:105 D.6921 ] [105]))) preproc.cpp:441 157 {*truncdfsf_fast_sse}
     (nil))
(insn 64 63 65 4 (set (reg:DF 21 xmm0 [orig:107 D.6921 ] [107])
        (float_extend:DF (reg:SF 21 xmm0 [orig:106 D.6916 ] [106]))) preproc.cpp:441 152 {*extendsfdf2_sse}
     (nil))
(insn 65 64 66 4 (set (reg:V2DF 22 xmm1 [363])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) preproc.cpp:441 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 66 65 67 4 (parallel [
            (set (reg:DF 21 xmm0 [orig:108 D.6921 ] [108])
                (neg:DF (reg:DF 21 xmm0 [orig:107 D.6921 ] [107])))
            (use (reg:V2DF 22 xmm1 [363]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:441 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (neg:DF (reg:DF 21 xmm0 [orig:107 D.6921 ] [107]))
        (nil)))
(insn 67 66 68 4 (set (reg/f:DI 0 ax [364])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:442 89 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:SI 0 ax [orig:109 D.6917 ] [109])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [364])
                (const_int 44 [0x2c])) [0 preprocess_21(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:442 90 {*movsi_internal}
     (nil))
(insn 69 68 564 4 (parallel [
            (set (reg:SI 0 ax [orig:110 D.6917 ] [110])
                (plus:SI (reg:SI 0 ax [orig:109 D.6917 ] [109])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:442 217 {*addsi_1}
     (nil))
(insn 564 69 70 4 (set (reg:SI 1 dx [365])
        (reg:SI 0 ax [orig:110 D.6917 ] [110])) preproc.cpp:442 90 {*movsi_internal}
     (nil))
(insn 70 564 71 4 (parallel [
            (set (reg:SI 1 dx [365])
                (lshiftrt:SI (reg:SI 1 dx [365])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:442 544 {*lshrsi3_1}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (reg:SI 0 ax [366])
                (plus:SI (reg:SI 0 ax [orig:110 D.6917 ] [110])
                    (reg:SI 1 dx [365])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:442 217 {*addsi_1}
     (nil))
(insn 72 71 73 4 (parallel [
            (set (reg:SI 0 ax [367])
                (ashiftrt:SI (reg:SI 0 ax [366])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:442 545 {*ashrsi3_1}
     (nil))
(insn 73 72 74 4 (set (reg:SI 0 ax [orig:111 D.6917 ] [111])
        (reg:SI 0 ax [367])) preproc.cpp:442 90 {*movsi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SF 22 xmm1 [orig:112 D.6916 ] [112])
        (float:SF (reg:SI 0 ax [orig:111 D.6917 ] [111]))) preproc.cpp:442 199 {*floatsisf2_sse}
     (nil))
(insn 75 74 76 4 (set (reg:SF 22 xmm1 [orig:113 D.6916 ] [113])
        (mult:SF (reg:SF 22 xmm1 [orig:112 D.6916 ] [112])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:442 797 {*fop_sf_comm_sse}
     (nil))
(insn 76 75 77 4 (set (reg:SF 22 xmm1 [orig:114 D.6916 ] [114])
        (plus:SF (reg:SF 22 xmm1 [orig:113 D.6916 ] [113])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:442 797 {*fop_sf_comm_sse}
     (nil))
(insn 77 76 78 4 (set (reg:V4SF 23 xmm2 [368])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:442 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 78 77 79 4 (parallel [
            (set (reg:SF 22 xmm1 [orig:115 D.6916 ] [115])
                (abs:SF (reg:SF 22 xmm1 [orig:114 D.6916 ] [114])))
            (use (reg:V4SF 23 xmm2 [368]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:442 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:114 D.6916 ] [114]))
        (nil)))
(insn 79 78 80 4 (set (reg:DF 22 xmm1 [orig:116 D.6921 ] [116])
        (float_extend:DF (reg:SF 22 xmm1 [orig:115 D.6916 ] [115]))) preproc.cpp:442 152 {*extendsfdf2_sse}
     (nil))
(insn 80 79 81 4 (set (reg:DF 23 xmm2 [369])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S8 A64])) preproc.cpp:442 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 81 80 82 4 (set (reg:DF 22 xmm1 [orig:117 D.6921 ] [117])
        (mult:DF (reg:DF 22 xmm1 [orig:116 D.6921 ] [116])
            (reg:DF 23 xmm2 [369]))) preproc.cpp:442 798 {*fop_df_comm_sse}
     (nil))
(insn 82 81 83 4 (set (reg:DF 21 xmm0 [orig:118 D.6921 ] [118])
        (div:DF (reg:DF 21 xmm0 [orig:108 D.6921 ] [108])
            (reg:DF 22 xmm1 [orig:117 D.6921 ] [117]))) preproc.cpp:441 805 {*fop_df_1_sse}
     (nil))
(insn 83 82 84 4 (set (reg:SF 21 xmm0 [orig:119 D.6916 ] [119])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:118 D.6921 ] [118]))) preproc.cpp:442 157 {*truncdfsf_fast_sse}
     (nil))
(insn 84 83 85 4 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:442 89 {*movdi_internal}
     (nil))
(insn 85 84 86 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [370])
                (const_int 28 [0x1c])) [0 preprocess_21(D)->comp_filter+0 S4 A32])
        (reg:SF 21 xmm0 [orig:119 D.6916 ] [119])) preproc.cpp:442 129 {*movsf_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 371
(code_label 86 85 87 5 77 "" [2 uses])
(note 87 86 88 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 5 (set (reg/f:DI 0 ax [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:445 89 {*movdi_internal}
     (nil))
(insn 89 88 90 5 (set (reg:SI 0 ax [orig:120 D.6917 ] [120])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [371])
                (const_int 40 [0x28])) [0 preprocess_21(D)->pre_quecc+0 S4 A32])) preproc.cpp:445 90 {*movsi_internal}
     (nil))
(insn 90 89 91 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:120 D.6917 ] [120])
            (const_int 0 [0]))) preproc.cpp:445 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 91 90 92 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) preproc.cpp:445 612 {*jcc_1}
     (nil)
 -> 146)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 372
(note 92 91 93 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 6 (set (reg/f:DI 0 ax [372])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:445 89 {*movdi_internal}
     (nil))
(insn 94 93 95 6 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.6922 ] [121])
                (plus:DI (reg/f:DI 0 ax [372])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:445 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 95 94 96 6 (set (reg:SI 0 ax [orig:122 D.6917 ] [122])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:121 D.6922 ] [121])
                (const_int 52 [0x34])) [0 _58->pre_quecc_if+0 S4 A32])) preproc.cpp:445 90 {*movsi_internal}
     (nil))
(insn 96 95 97 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:122 D.6917 ] [122])
            (const_int 1 [0x1]))) preproc.cpp:445 7 {*cmpsi_1}
     (nil))
(jump_insn 97 96 98 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) preproc.cpp:445 612 {*jcc_1}
     (nil)
 -> 146)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387
(note 98 97 99 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 7 (set (reg/f:DI 0 ax [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:446 89 {*movdi_internal}
     (nil))
(insn 100 99 101 7 (set (reg:SI 0 ax [orig:123 D.6917 ] [123])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [373])
                (const_int 44 [0x2c])) [0 preprocess_21(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:446 90 {*movsi_internal}
     (nil))
(insn 101 100 102 7 (set (reg:DI 0 ax [orig:124 D.6918 ] [124])
        (sign_extend:DI (reg:SI 0 ax [orig:123 D.6917 ] [123]))) preproc.cpp:446 142 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 7 (parallel [
            (set (reg:DI 0 ax [orig:125 D.6918 ] [125])
                (ashift:DI (reg:DI 0 ax [orig:124 D.6918 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:446 512 {*ashldi3_1}
     (nil))
(insn 103 102 104 7 (parallel [
            (set (reg:DI 1 dx [orig:126 D.6919 ] [126])
                (plus:DI (reg:DI 0 ax [orig:125 D.6918 ] [125])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:446 218 {*adddi_1}
     (nil))
(insn 104 103 105 7 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:446 89 {*movdi_internal}
     (nil))
(insn 105 104 106 7 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.6920 ] [127])
                (plus:DI (reg/f:DI 0 ax [374])
                    (reg:DI 1 dx [orig:126 D.6919 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:446 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.6919 ] [126]))
        (nil)))
(insn 106 105 107 7 (set (reg:SF 21 xmm0 [375])
        (mem:SF (reg/f:DI 0 ax [orig:127 D.6920 ] [127]) [0 *_64+0 S4 A32])) preproc.cpp:446 129 {*movsf_internal}
     (nil))
(insn 107 106 108 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [375])) preproc.cpp:446 129 {*movsf_internal}
     (nil))
(insn 108 107 109 7 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:447 89 {*movdi_internal}
     (nil))
(insn 109 108 110 7 (set (reg:SI 0 ax [orig:128 D.6917 ] [128])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [376])
                (const_int 44 [0x2c])) [0 preprocess_21(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:447 90 {*movsi_internal}
     (nil))
(insn 110 109 111 7 (set (reg:DI 0 ax [orig:129 D.6918 ] [129])
        (sign_extend:DI (reg:SI 0 ax [orig:128 D.6917 ] [128]))) preproc.cpp:447 142 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 7 (parallel [
            (set (reg:DI 1 dx [orig:130 D.6918 ] [130])
                (ashift:DI (reg:DI 0 ax [orig:129 D.6918 ] [129])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:447 512 {*ashldi3_1}
     (nil))
(insn 112 111 113 7 (set (reg/f:DI 0 ax [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:447 89 {*movdi_internal}
     (nil))
(insn 113 112 114 7 (parallel [
            (set (reg/f:DI 0 ax [orig:131 D.6920 ] [131])
                (plus:DI (reg/f:DI 0 ax [377])
                    (reg:DI 1 dx [orig:130 D.6918 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:447 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:130 D.6918 ] [130]))
        (nil)))
(insn 114 113 115 7 (set (reg:SF 21 xmm0 [378])
        (mem:SF (reg/f:DI 0 ax [orig:131 D.6920 ] [131]) [0 *_69+0 S4 A32])) preproc.cpp:447 129 {*movsf_internal}
     (nil))
(insn 115 114 116 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 21 xmm0 [378])) preproc.cpp:447 129 {*movsf_internal}
     (nil))
(insn 116 115 117 7 (set (reg/f:DI 0 ax [379])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:449 89 {*movdi_internal}
     (nil))
(insn 117 116 118 7 (parallel [
            (set (reg/f:DI 3 bx [orig:132 D.6922 ] [132])
                (plus:DI (reg/f:DI 0 ax [379])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:449 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 118 117 119 7 (set (reg:SF 21 xmm0 [380])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])) preproc.cpp:449 129 {*movsf_internal}
     (nil))
(insn 119 118 120 7 (set (reg:SF 21 xmm0 [orig:133 D.6916 ] [133])
        (div:SF (reg:SF 21 xmm0 [380])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32]))) preproc.cpp:449 804 {*fop_sf_1_sse}
     (nil))
(insn 120 119 122 7 (set (reg:DF 21 xmm0 [orig:134 D.6921 ] [134])
        (float_extend:DF (reg:SF 21 xmm0 [orig:133 D.6916 ] [133]))) preproc.cpp:449 152 {*extendsfdf2_sse}
     (nil))
(call_insn 122 120 124 7 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x7fae98e66d80 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) preproc.cpp:449 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 124 122 125 7 (set (reg:SF 21 xmm0 [orig:136 D.6916 ] [136])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:135 D.6921 ] [135]))) preproc.cpp:449 157 {*truncdfsf_fast_sse}
     (nil))
(insn 125 124 126 7 (set (reg:DF 21 xmm0 [orig:137 D.6921 ] [137])
        (float_extend:DF (reg:SF 21 xmm0 [orig:136 D.6916 ] [136]))) preproc.cpp:449 152 {*extendsfdf2_sse}
     (nil))
(insn 126 125 127 7 (set (reg:V2DF 22 xmm1 [381])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) preproc.cpp:449 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 127 126 128 7 (parallel [
            (set (reg:DF 21 xmm0 [orig:138 D.6921 ] [138])
                (neg:DF (reg:DF 21 xmm0 [orig:137 D.6921 ] [137])))
            (use (reg:V2DF 22 xmm1 [381]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:449 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (neg:DF (reg:DF 21 xmm0 [orig:137 D.6921 ] [137]))
        (nil)))
(insn 128 127 129 7 (set (reg/f:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:450 89 {*movdi_internal}
     (nil))
(insn 129 128 130 7 (set (reg:SI 0 ax [orig:139 D.6917 ] [139])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [382])
                (const_int 44 [0x2c])) [0 preprocess_21(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:450 90 {*movsi_internal}
     (nil))
(insn 130 129 566 7 (parallel [
            (set (reg:SI 0 ax [orig:140 D.6917 ] [140])
                (plus:SI (reg:SI 0 ax [orig:139 D.6917 ] [139])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:450 217 {*addsi_1}
     (nil))
(insn 566 130 131 7 (set (reg:SI 1 dx [383])
        (reg:SI 0 ax [orig:140 D.6917 ] [140])) preproc.cpp:450 90 {*movsi_internal}
     (nil))
(insn 131 566 132 7 (parallel [
            (set (reg:SI 1 dx [383])
                (lshiftrt:SI (reg:SI 1 dx [383])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:450 544 {*lshrsi3_1}
     (nil))
(insn 132 131 133 7 (parallel [
            (set (reg:SI 0 ax [384])
                (plus:SI (reg:SI 0 ax [orig:140 D.6917 ] [140])
                    (reg:SI 1 dx [383])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:450 217 {*addsi_1}
     (nil))
(insn 133 132 134 7 (parallel [
            (set (reg:SI 0 ax [385])
                (ashiftrt:SI (reg:SI 0 ax [384])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:450 545 {*ashrsi3_1}
     (nil))
(insn 134 133 135 7 (set (reg:SI 0 ax [orig:141 D.6917 ] [141])
        (reg:SI 0 ax [385])) preproc.cpp:450 90 {*movsi_internal}
     (nil))
(insn 135 134 136 7 (set (reg:SF 22 xmm1 [orig:142 D.6916 ] [142])
        (float:SF (reg:SI 0 ax [orig:141 D.6917 ] [141]))) preproc.cpp:450 199 {*floatsisf2_sse}
     (nil))
(insn 136 135 137 7 (set (reg:SF 22 xmm1 [orig:143 D.6916 ] [143])
        (mult:SF (reg:SF 22 xmm1 [orig:142 D.6916 ] [142])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:450 797 {*fop_sf_comm_sse}
     (nil))
(insn 137 136 138 7 (set (reg:SF 22 xmm1 [orig:144 D.6916 ] [144])
        (plus:SF (reg:SF 22 xmm1 [orig:143 D.6916 ] [143])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:450 797 {*fop_sf_comm_sse}
     (nil))
(insn 138 137 139 7 (set (reg:V4SF 23 xmm2 [386])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:450 1205 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 139 138 140 7 (parallel [
            (set (reg:SF 22 xmm1 [orig:145 D.6916 ] [145])
                (abs:SF (reg:SF 22 xmm1 [orig:144 D.6916 ] [144])))
            (use (reg:V4SF 23 xmm2 [386]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:450 469 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:144 D.6916 ] [144]))
        (nil)))
(insn 140 139 141 7 (set (reg:DF 22 xmm1 [orig:146 D.6921 ] [146])
        (float_extend:DF (reg:SF 22 xmm1 [orig:145 D.6916 ] [145]))) preproc.cpp:450 152 {*extendsfdf2_sse}
     (nil))
(insn 141 140 142 7 (set (reg:DF 23 xmm2 [387])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S8 A64])) preproc.cpp:450 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 142 141 143 7 (set (reg:DF 22 xmm1 [orig:147 D.6921 ] [147])
        (mult:DF (reg:DF 22 xmm1 [orig:146 D.6921 ] [146])
            (reg:DF 23 xmm2 [387]))) preproc.cpp:450 798 {*fop_df_comm_sse}
     (nil))
(insn 143 142 144 7 (set (reg:DF 21 xmm0 [orig:148 D.6921 ] [148])
        (div:DF (reg:DF 21 xmm0 [orig:138 D.6921 ] [138])
            (reg:DF 22 xmm1 [orig:147 D.6921 ] [147]))) preproc.cpp:449 805 {*fop_df_1_sse}
     (nil))
(insn 144 143 145 7 (set (reg:SF 21 xmm0 [orig:149 D.6916 ] [149])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:148 D.6921 ] [148]))) preproc.cpp:450 157 {*truncdfsf_fast_sse}
     (nil))
(insn 145 144 146 7 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:132 D.6922 ] [132])
                (const_int 28 [0x1c])) [0 _71->comp_filter+0 S4 A32])
        (reg:SF 21 xmm0 [orig:149 D.6916 ] [149])) preproc.cpp:450 129 {*movsf_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 388 389
(code_label 146 145 147 8 78 "" [2 uses])
(note 147 146 148 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 8 (set (reg/f:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:455 89 {*movdi_internal}
     (nil))
(insn 149 148 150 8 (set (reg:SF 21 xmm0 [orig:150 D.6916 ] [150])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [388])
                (const_int 28 [0x1c])) [0 preprocess_21(D)->comp_filter+0 S4 A32])) preproc.cpp:455 129 {*movsf_internal}
     (nil))
(insn 150 149 151 8 (set (reg:SF 22 xmm1 [389])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:455 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 151 150 152 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:150 D.6916 ] [150])
            (reg:SF 22 xmm1 [389]))) preproc.cpp:455 55 {*cmpiusf_sse}
     (nil))
(jump_insn 152 151 543 8 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 549)
            (pc))) preproc.cpp:455 612 {*jcc_1}
     (nil)
 -> 549)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 150

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 150
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 150
;; lr  def 	 17 [flags] 390
(note 543 152 153 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 153 543 154 9 (set (reg:SF 22 xmm1 [390])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:455 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 154 153 155 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:150 D.6916 ] [150])
            (reg:SF 22 xmm1 [390]))) preproc.cpp:455 55 {*cmpiusf_sse}
     (nil))
(jump_insn 155 154 549 9 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 336)
            (pc))) preproc.cpp:455 612 {*jcc_1}
     (nil)
 -> 336)
;;  succ:       10 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 549 155 159 10 90 "" [1 uses])
(note 159 549 160 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 333 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:457 90 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              17 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151 391
(code_label 333 160 161 11 83 "" [1 uses])
(note 161 333 162 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 11 (set (reg/f:DI 0 ax [391])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) preproc.cpp:457 89 {*movdi_internal}
     (nil))
(insn 163 162 164 11 (set (reg:SI 0 ax [orig:151 D.6917 ] [151])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [391])
                (const_int 300 [0x12c])) [0 procpar_info_15(D)->num_points+0 S4 A32])) preproc.cpp:457 90 {*movsi_internal}
     (nil))
(insn 164 163 165 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:151 D.6917 ] [151])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) preproc.cpp:457 7 {*cmpsi_1}
     (nil))
(jump_insn 165 164 166 11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 336)
            (pc))) preproc.cpp:457 612 {*jcc_1}
     (nil)
 -> 336)
;;  succ:       18
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 392
(note 166 165 167 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 12 (set (reg/f:DI 0 ax [392])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:458 89 {*movdi_internal}
     (nil))
(insn 168 167 169 12 (set (reg:SI 0 ax [orig:152 D.6917 ] [152])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [392])
                (const_int 40 [0x28])) [0 preprocess_21(D)->pre_quecc+0 S4 A32])) preproc.cpp:458 90 {*movsi_internal}
     (nil))
(insn 169 168 170 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:152 D.6917 ] [152])
            (const_int 0 [0]))) preproc.cpp:458 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 170 169 171 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 251)
            (pc))) preproc.cpp:458 612 {*jcc_1}
     (nil)
 -> 251)
;;  succ:       13 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 393
(note 171 170 172 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 13 (set (reg/f:DI 0 ax [393])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:458 89 {*movdi_internal}
     (nil))
(insn 173 172 174 13 (set (reg:SI 0 ax [orig:153 D.6917 ] [153])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [393])
                (const_int 44 [0x2c])) [0 preprocess_21(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:458 90 {*movsi_internal}
     (nil))
(insn 174 173 175 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:153 D.6917 ] [153])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) preproc.cpp:458 7 {*cmpsi_1}
     (nil))
(jump_insn 175 174 176 13 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 251)
            (pc))) preproc.cpp:458 612 {*jcc_1}
     (nil)
 -> 251)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415
(note 176 175 177 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 14 (set (reg:SI 0 ax [394])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 178 177 179 14 (set (reg:DI 0 ax [orig:154 D.6918 ] [154])
        (sign_extend:DI (reg:SI 0 ax [394]))) preproc.cpp:459 142 {*extendsidi2_rex64}
     (nil))
(insn 179 178 180 14 (parallel [
            (set (reg:DI 1 dx [orig:155 D.6918 ] [155])
                (ashift:DI (reg:DI 0 ax [orig:154 D.6918 ] [154])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 512 {*ashldi3_1}
     (nil))
(insn 180 179 181 14 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:459 89 {*movdi_internal}
     (nil))
(insn 181 180 182 14 (parallel [
            (set (reg/f:DI 3 bx [orig:156 D.6920 ] [156])
                (plus:DI (reg:DI 1 dx [orig:155 D.6918 ] [155])
                    (reg/f:DI 0 ax [395])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:155 D.6918 ] [155]))
        (nil)))
(insn 182 181 183 14 (set (reg:SI 0 ax [396])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 183 182 184 14 (set (reg:DI 0 ax [orig:157 D.6918 ] [157])
        (sign_extend:DI (reg:SI 0 ax [396]))) preproc.cpp:459 142 {*extendsidi2_rex64}
     (nil))
(insn 184 183 185 14 (parallel [
            (set (reg:DI 1 dx [orig:158 D.6918 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:157 D.6918 ] [157])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 512 {*ashldi3_1}
     (nil))
(insn 185 184 186 14 (set (reg/f:DI 0 ax [397])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:459 89 {*movdi_internal}
     (nil))
(insn 186 185 187 14 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.6920 ] [159])
                (plus:DI (reg/f:DI 0 ax [397])
                    (reg:DI 1 dx [orig:158 D.6918 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:158 D.6918 ] [158]))
        (nil)))
(insn 187 186 568 14 (set (reg:SF 24 xmm3 [orig:160 D.6916 ] [160])
        (mem:SF (reg/f:DI 0 ax [orig:159 D.6920 ] [159]) [0 *_102+0 S4 A32])) preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 568 187 617 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 24 xmm3 [orig:160 D.6916 ] [160])) preproc.cpp:459 129 {*movsf_internal}
     (nil))
(note 617 568 601 14 NOTE_INSN_DELETED)
(note 601 617 188 14 NOTE_INSN_DELETED)
(insn 188 601 569 14 (set (reg:SI 0 ax [398])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 569 188 189 14 (set (reg:SI 1 dx [399])
        (reg:SI 0 ax [398])) preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 189 569 190 14 (parallel [
            (set (reg:SI 1 dx [399])
                (lshiftrt:SI (reg:SI 1 dx [399])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 544 {*lshrsi3_1}
     (nil))
(insn 190 189 191 14 (parallel [
            (set (reg:SI 0 ax [400])
                (plus:SI (reg:SI 0 ax [398])
                    (reg:SI 1 dx [399])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 217 {*addsi_1}
     (nil))
(insn 191 190 192 14 (parallel [
            (set (reg:SI 0 ax [401])
                (ashiftrt:SI (reg:SI 0 ax [400])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 545 {*ashrsi3_1}
     (nil))
(insn 192 191 193 14 (set (reg:SI 0 ax [orig:161 D.6917 ] [161])
        (reg:SI 0 ax [401])) preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 193 192 194 14 (set (reg:DF 22 xmm1 [orig:162 D.6921 ] [162])
        (float:DF (reg:SI 0 ax [orig:161 D.6917 ] [161]))) preproc.cpp:459 201 {*floatsidf2_sse}
     (nil))
(insn 194 193 195 14 (set (reg:DF 21 xmm0 [orig:163 D.6921 ] [163])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:459 152 {*extendsfdf2_sse}
     (nil))
(insn 195 194 196 14 (set (reg:DF 22 xmm1 [orig:164 D.6921 ] [164])
        (mult:DF (reg:DF 22 xmm1 [orig:162 D.6921 ] [162])
            (reg:DF 21 xmm0 [orig:163 D.6921 ] [163]))) preproc.cpp:459 798 {*fop_df_comm_sse}
     (nil))
(insn 196 195 197 14 (set (reg:DF 21 xmm0 [orig:165 D.6921 ] [165])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:459 152 {*extendsfdf2_sse}
     (nil))
(insn 197 196 198 14 (set (reg:DF 21 xmm0 [orig:166 D.6921 ] [166])
        (plus:DF (reg:DF 21 xmm0 [orig:165 D.6921 ] [165])
            (reg:DF 22 xmm1 [orig:164 D.6921 ] [164]))) preproc.cpp:459 798 {*fop_df_comm_sse}
     (nil))
(insn 198 197 199 14 (set (reg:V2DF 22 xmm1 [402])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:459 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 199 198 200 14 (parallel [
            (set (reg:DF 21 xmm0 [orig:167 D.6921 ] [167])
                (abs:DF (reg:DF 21 xmm0 [orig:166 D.6921 ] [166])))
            (use (reg:V2DF 22 xmm1 [402]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:166 D.6921 ] [166]))
        (nil)))
(insn 200 199 201 14 (set (reg:DF 22 xmm1 [403])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:459 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 201 200 202 14 (set (reg:DF 22 xmm1 [orig:168 D.6921 ] [168])
        (mult:DF (reg:DF 22 xmm1 [403])
            (reg:DF 21 xmm0 [orig:167 D.6921 ] [167]))) preproc.cpp:459 798 {*fop_df_comm_sse}
     (nil))
(insn 202 201 203 14 (set (reg/f:DI 0 ax [404])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:459 89 {*movdi_internal}
     (nil))
(insn 203 202 204 14 (set (reg:SF 21 xmm0 [orig:169 D.6916 ] [169])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [404])
                (const_int 28 [0x1c])) [0 preprocess_21(D)->comp_filter+0 S4 A32])) preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 204 203 205 14 (set (reg:DF 21 xmm0 [orig:170 D.6921 ] [170])
        (float_extend:DF (reg:SF 21 xmm0 [orig:169 D.6916 ] [169]))) preproc.cpp:459 152 {*extendsfdf2_sse}
     (nil))
(insn 205 204 207 14 (set (reg:DF 21 xmm0 [orig:171 D.6921 ] [171])
        (mult:DF (reg:DF 21 xmm0 [orig:170 D.6921 ] [170])
            (reg:DF 22 xmm1 [orig:168 D.6921 ] [168]))) preproc.cpp:459 798 {*fop_df_comm_sse}
     (nil))
(call_insn 207 205 209 14 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fae98e48d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:459 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 209 207 571 14 (set (reg:SF 21 xmm0 [orig:173 D.6916 ] [173])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:172 D.6921 ] [172]))) preproc.cpp:459 157 {*truncdfsf_fast_sse}
     (nil))
(note 571 209 615 14 NOTE_INSN_DELETED)
(note 615 571 210 14 NOTE_INSN_DELETED)
(insn 210 615 211 14 (set (reg:SF 21 xmm0 [orig:174 D.6916 ] [174])
        (mult:SF (reg:SF 21 xmm0 [orig:173 D.6916 ] [173])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:459 797 {*fop_sf_comm_sse}
     (nil))
(insn 211 210 212 14 (set (mem:SF (reg/f:DI 3 bx [orig:156 D.6920 ] [156]) [0 *_99+0 S4 A32])
        (reg:SF 21 xmm0 [orig:174 D.6916 ] [174])) preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 212 211 213 14 (set (reg:SI 0 ax [405])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 213 212 214 14 (set (reg:DI 0 ax [orig:175 D.6919 ] [175])
        (sign_extend:DI (reg:SI 0 ax [405]))) preproc.cpp:460 142 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 14 (parallel [
            (set (reg:DI 0 ax [orig:176 D.6919 ] [176])
                (plus:DI (reg:DI 0 ax [orig:175 D.6919 ] [175])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 218 {*adddi_1}
     (nil))
(insn 215 214 216 14 (parallel [
            (set (reg:DI 1 dx [orig:177 D.6919 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:176 D.6919 ] [176])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 512 {*ashldi3_1}
     (nil))
(insn 216 215 217 14 (set (reg/f:DI 0 ax [406])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:460 89 {*movdi_internal}
     (nil))
(insn 217 216 218 14 (parallel [
            (set (reg/f:DI 3 bx [orig:178 D.6920 ] [178])
                (plus:DI (reg:DI 1 dx [orig:177 D.6919 ] [177])
                    (reg/f:DI 0 ax [406])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.6919 ] [177]))
        (nil)))
(insn 218 217 219 14 (set (reg:SI 0 ax [407])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 219 218 220 14 (set (reg:DI 0 ax [orig:179 D.6919 ] [179])
        (sign_extend:DI (reg:SI 0 ax [407]))) preproc.cpp:460 142 {*extendsidi2_rex64}
     (nil))
(insn 220 219 221 14 (parallel [
            (set (reg:DI 0 ax [orig:180 D.6919 ] [180])
                (plus:DI (reg:DI 0 ax [orig:179 D.6919 ] [179])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 218 {*adddi_1}
     (nil))
(insn 221 220 222 14 (parallel [
            (set (reg:DI 1 dx [orig:181 D.6919 ] [181])
                (ashift:DI (reg:DI 0 ax [orig:180 D.6919 ] [180])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 512 {*ashldi3_1}
     (nil))
(insn 222 221 223 14 (set (reg/f:DI 0 ax [408])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:460 89 {*movdi_internal}
     (nil))
(insn 223 222 224 14 (parallel [
            (set (reg/f:DI 0 ax [orig:182 D.6920 ] [182])
                (plus:DI (reg/f:DI 0 ax [408])
                    (reg:DI 1 dx [orig:181 D.6919 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:181 D.6919 ] [181]))
        (nil)))
(insn 224 223 572 14 (set (reg:SF 25 xmm4 [orig:183 D.6916 ] [183])
        (mem:SF (reg/f:DI 0 ax [orig:182 D.6920 ] [182]) [0 *_127+0 S4 A32])) preproc.cpp:460 129 {*movsf_internal}
     (nil))
(insn 572 224 616 14 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 25 xmm4 [orig:183 D.6916 ] [183])) preproc.cpp:460 129 {*movsf_internal}
     (nil))
(note 616 572 600 14 NOTE_INSN_DELETED)
(note 600 616 225 14 NOTE_INSN_DELETED)
(insn 225 600 573 14 (set (reg:SI 0 ax [409])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 573 225 226 14 (set (reg:SI 1 dx [410])
        (reg:SI 0 ax [409])) preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 226 573 227 14 (parallel [
            (set (reg:SI 1 dx [410])
                (lshiftrt:SI (reg:SI 1 dx [410])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 544 {*lshrsi3_1}
     (nil))
(insn 227 226 228 14 (parallel [
            (set (reg:SI 0 ax [411])
                (plus:SI (reg:SI 0 ax [409])
                    (reg:SI 1 dx [410])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 217 {*addsi_1}
     (nil))
(insn 228 227 229 14 (parallel [
            (set (reg:SI 0 ax [412])
                (ashiftrt:SI (reg:SI 0 ax [411])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 545 {*ashrsi3_1}
     (nil))
(insn 229 228 230 14 (set (reg:SI 0 ax [orig:184 D.6917 ] [184])
        (reg:SI 0 ax [412])) preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 230 229 231 14 (set (reg:DF 22 xmm1 [orig:185 D.6921 ] [185])
        (float:DF (reg:SI 0 ax [orig:184 D.6917 ] [184]))) preproc.cpp:460 201 {*floatsidf2_sse}
     (nil))
(insn 231 230 232 14 (set (reg:DF 21 xmm0 [orig:186 D.6921 ] [186])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:460 152 {*extendsfdf2_sse}
     (nil))
(insn 232 231 233 14 (set (reg:DF 22 xmm1 [orig:187 D.6921 ] [187])
        (mult:DF (reg:DF 22 xmm1 [orig:185 D.6921 ] [185])
            (reg:DF 21 xmm0 [orig:186 D.6921 ] [186]))) preproc.cpp:460 798 {*fop_df_comm_sse}
     (nil))
(insn 233 232 234 14 (set (reg:DF 21 xmm0 [orig:188 D.6921 ] [188])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:460 152 {*extendsfdf2_sse}
     (nil))
(insn 234 233 235 14 (set (reg:DF 21 xmm0 [orig:189 D.6921 ] [189])
        (plus:DF (reg:DF 21 xmm0 [orig:188 D.6921 ] [188])
            (reg:DF 22 xmm1 [orig:187 D.6921 ] [187]))) preproc.cpp:460 798 {*fop_df_comm_sse}
     (nil))
(insn 235 234 236 14 (set (reg:V2DF 22 xmm1 [413])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:460 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 236 235 237 14 (parallel [
            (set (reg:DF 21 xmm0 [orig:190 D.6921 ] [190])
                (abs:DF (reg:DF 21 xmm0 [orig:189 D.6921 ] [189])))
            (use (reg:V2DF 22 xmm1 [413]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:189 D.6921 ] [189]))
        (nil)))
(insn 237 236 238 14 (set (reg:DF 22 xmm1 [414])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:460 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 238 237 239 14 (set (reg:DF 22 xmm1 [orig:191 D.6921 ] [191])
        (mult:DF (reg:DF 22 xmm1 [414])
            (reg:DF 21 xmm0 [orig:190 D.6921 ] [190]))) preproc.cpp:460 798 {*fop_df_comm_sse}
     (nil))
(insn 239 238 240 14 (set (reg/f:DI 0 ax [415])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:460 89 {*movdi_internal}
     (nil))
(insn 240 239 241 14 (set (reg:SF 21 xmm0 [orig:192 D.6916 ] [192])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [415])
                (const_int 28 [0x1c])) [0 preprocess_21(D)->comp_filter+0 S4 A32])) preproc.cpp:460 129 {*movsf_internal}
     (nil))
(insn 241 240 242 14 (set (reg:DF 21 xmm0 [orig:193 D.6921 ] [193])
        (float_extend:DF (reg:SF 21 xmm0 [orig:192 D.6916 ] [192]))) preproc.cpp:460 152 {*extendsfdf2_sse}
     (nil))
(insn 242 241 244 14 (set (reg:DF 21 xmm0 [orig:194 D.6921 ] [194])
        (mult:DF (reg:DF 21 xmm0 [orig:193 D.6921 ] [193])
            (reg:DF 22 xmm1 [orig:191 D.6921 ] [191]))) preproc.cpp:460 798 {*fop_df_comm_sse}
     (nil))
(call_insn 244 242 246 14 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fae98e48d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:460 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 246 244 575 14 (set (reg:SF 21 xmm0 [orig:196 D.6916 ] [196])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:195 D.6921 ] [195]))) preproc.cpp:460 157 {*truncdfsf_fast_sse}
     (nil))
(note 575 246 614 14 NOTE_INSN_DELETED)
(note 614 575 247 14 NOTE_INSN_DELETED)
(insn 247 614 248 14 (set (reg:SF 21 xmm0 [orig:197 D.6916 ] [197])
        (mult:SF (reg:SF 21 xmm0 [orig:196 D.6916 ] [196])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:460 797 {*fop_sf_comm_sse}
     (nil))
(insn 248 247 551 14 (set (mem:SF (reg/f:DI 3 bx [orig:178 D.6920 ] [178]) [0 *_123+0 S4 A32])
        (reg:SF 21 xmm0 [orig:197 D.6916 ] [197])) preproc.cpp:460 129 {*movsf_internal}
     (nil))
(jump_insn 551 248 552 14 (set (pc)
        (label_ref 330)) preproc.cpp:460 654 {jump}
     (nil)
 -> 330)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 552 551 251)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 198 416
(code_label 251 552 252 15 81 "" [2 uses])
(note 252 251 253 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 15 (set (reg/f:DI 0 ax [416])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:461 89 {*movdi_internal}
     (nil))
(insn 254 253 255 15 (set (reg:SI 0 ax [orig:198 D.6917 ] [198])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [416])
                (const_int 40 [0x28])) [0 preprocess_21(D)->pre_quecc+0 S4 A32])) preproc.cpp:461 90 {*movsi_internal}
     (nil))
(insn 255 254 256 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:198 D.6917 ] [198])
            (const_int 0 [0]))) preproc.cpp:461 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 256 255 257 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 330)
            (pc))) preproc.cpp:461 612 {*jcc_1}
     (nil)
 -> 330)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438
(note 257 256 258 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 258 257 259 16 (set (reg:SI 0 ax [417])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 259 258 260 16 (set (reg:DI 0 ax [orig:199 D.6918 ] [199])
        (sign_extend:DI (reg:SI 0 ax [417]))) preproc.cpp:462 142 {*extendsidi2_rex64}
     (nil))
(insn 260 259 261 16 (parallel [
            (set (reg:DI 1 dx [orig:200 D.6918 ] [200])
                (ashift:DI (reg:DI 0 ax [orig:199 D.6918 ] [199])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 512 {*ashldi3_1}
     (nil))
(insn 261 260 262 16 (set (reg/f:DI 0 ax [418])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:462 89 {*movdi_internal}
     (nil))
(insn 262 261 263 16 (parallel [
            (set (reg/f:DI 3 bx [orig:201 D.6920 ] [201])
                (plus:DI (reg:DI 1 dx [orig:200 D.6918 ] [200])
                    (reg/f:DI 0 ax [418])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:200 D.6918 ] [200]))
        (nil)))
(insn 263 262 264 16 (set (reg:SI 0 ax [419])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 264 263 265 16 (set (reg:DI 0 ax [orig:202 D.6918 ] [202])
        (sign_extend:DI (reg:SI 0 ax [419]))) preproc.cpp:462 142 {*extendsidi2_rex64}
     (nil))
(insn 265 264 266 16 (parallel [
            (set (reg:DI 1 dx [orig:203 D.6918 ] [203])
                (ashift:DI (reg:DI 0 ax [orig:202 D.6918 ] [202])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 512 {*ashldi3_1}
     (nil))
(insn 266 265 267 16 (set (reg/f:DI 0 ax [420])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:462 89 {*movdi_internal}
     (nil))
(insn 267 266 268 16 (parallel [
            (set (reg/f:DI 0 ax [orig:204 D.6920 ] [204])
                (plus:DI (reg/f:DI 0 ax [420])
                    (reg:DI 1 dx [orig:203 D.6918 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:203 D.6918 ] [203]))
        (nil)))
(insn 268 267 576 16 (set (reg:SF 26 xmm5 [orig:205 D.6916 ] [205])
        (mem:SF (reg/f:DI 0 ax [orig:204 D.6920 ] [204]) [0 *_151+0 S4 A32])) preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 576 268 619 16 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 26 xmm5 [orig:205 D.6916 ] [205])) preproc.cpp:462 129 {*movsf_internal}
     (nil))
(note 619 576 603 16 NOTE_INSN_DELETED)
(note 603 619 269 16 NOTE_INSN_DELETED)
(insn 269 603 577 16 (set (reg:SI 0 ax [421])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 577 269 270 16 (set (reg:SI 1 dx [422])
        (reg:SI 0 ax [421])) preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 270 577 271 16 (parallel [
            (set (reg:SI 1 dx [422])
                (lshiftrt:SI (reg:SI 1 dx [422])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 544 {*lshrsi3_1}
     (nil))
(insn 271 270 272 16 (parallel [
            (set (reg:SI 0 ax [423])
                (plus:SI (reg:SI 0 ax [421])
                    (reg:SI 1 dx [422])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 217 {*addsi_1}
     (nil))
(insn 272 271 273 16 (parallel [
            (set (reg:SI 0 ax [424])
                (ashiftrt:SI (reg:SI 0 ax [423])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 545 {*ashrsi3_1}
     (nil))
(insn 273 272 274 16 (set (reg:SI 0 ax [orig:206 D.6917 ] [206])
        (reg:SI 0 ax [424])) preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 274 273 275 16 (set (reg:DF 22 xmm1 [orig:207 D.6921 ] [207])
        (float:DF (reg:SI 0 ax [orig:206 D.6917 ] [206]))) preproc.cpp:462 201 {*floatsidf2_sse}
     (nil))
(insn 275 274 276 16 (set (reg:DF 21 xmm0 [orig:208 D.6921 ] [208])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:462 152 {*extendsfdf2_sse}
     (nil))
(insn 276 275 277 16 (set (reg:DF 22 xmm1 [orig:209 D.6921 ] [209])
        (mult:DF (reg:DF 22 xmm1 [orig:207 D.6921 ] [207])
            (reg:DF 21 xmm0 [orig:208 D.6921 ] [208]))) preproc.cpp:462 798 {*fop_df_comm_sse}
     (nil))
(insn 277 276 278 16 (set (reg:DF 21 xmm0 [orig:210 D.6921 ] [210])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:462 152 {*extendsfdf2_sse}
     (nil))
(insn 278 277 279 16 (set (reg:DF 21 xmm0 [orig:211 D.6921 ] [211])
        (plus:DF (reg:DF 21 xmm0 [orig:210 D.6921 ] [210])
            (reg:DF 22 xmm1 [orig:209 D.6921 ] [209]))) preproc.cpp:462 798 {*fop_df_comm_sse}
     (nil))
(insn 279 278 280 16 (set (reg:V2DF 22 xmm1 [425])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:462 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 280 279 281 16 (parallel [
            (set (reg:DF 21 xmm0 [orig:212 D.6921 ] [212])
                (abs:DF (reg:DF 21 xmm0 [orig:211 D.6921 ] [211])))
            (use (reg:V2DF 22 xmm1 [425]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:211 D.6921 ] [211]))
        (nil)))
(insn 281 280 282 16 (set (reg:DF 22 xmm1 [426])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:462 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 282 281 283 16 (set (reg:DF 22 xmm1 [orig:213 D.6921 ] [213])
        (mult:DF (reg:DF 22 xmm1 [426])
            (reg:DF 21 xmm0 [orig:212 D.6921 ] [212]))) preproc.cpp:462 798 {*fop_df_comm_sse}
     (nil))
(insn 283 282 284 16 (set (reg/f:DI 0 ax [427])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:462 89 {*movdi_internal}
     (nil))
(insn 284 283 285 16 (set (reg:SF 21 xmm0 [orig:214 D.6916 ] [214])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [427])
                (const_int 28 [0x1c])) [0 preprocess_21(D)->comp_filter+0 S4 A32])) preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 285 284 286 16 (set (reg:DF 21 xmm0 [orig:215 D.6921 ] [215])
        (float_extend:DF (reg:SF 21 xmm0 [orig:214 D.6916 ] [214]))) preproc.cpp:462 152 {*extendsfdf2_sse}
     (nil))
(insn 286 285 288 16 (set (reg:DF 21 xmm0 [orig:216 D.6921 ] [216])
        (mult:DF (reg:DF 21 xmm0 [orig:215 D.6921 ] [215])
            (reg:DF 22 xmm1 [orig:213 D.6921 ] [213]))) preproc.cpp:462 798 {*fop_df_comm_sse}
     (nil))
(call_insn 288 286 290 16 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fae98e48d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:462 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 290 288 579 16 (set (reg:SF 21 xmm0 [orig:218 D.6916 ] [218])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:217 D.6921 ] [217]))) preproc.cpp:462 157 {*truncdfsf_fast_sse}
     (nil))
(note 579 290 613 16 NOTE_INSN_DELETED)
(note 613 579 291 16 NOTE_INSN_DELETED)
(insn 291 613 292 16 (set (reg:SF 21 xmm0 [orig:219 D.6916 ] [219])
        (mult:SF (reg:SF 21 xmm0 [orig:218 D.6916 ] [218])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:462 797 {*fop_sf_comm_sse}
     (nil))
(insn 292 291 293 16 (set (mem:SF (reg/f:DI 3 bx [orig:201 D.6920 ] [201]) [0 *_148+0 S4 A32])
        (reg:SF 21 xmm0 [orig:219 D.6916 ] [219])) preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 293 292 294 16 (set (reg:SI 0 ax [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:463 90 {*movsi_internal}
     (nil))
(insn 294 293 295 16 (set (reg:DI 0 ax [orig:220 D.6919 ] [220])
        (sign_extend:DI (reg:SI 0 ax [428]))) preproc.cpp:463 142 {*extendsidi2_rex64}
     (nil))
(insn 295 294 296 16 (parallel [
            (set (reg:DI 0 ax [orig:221 D.6919 ] [221])
                (plus:DI (reg:DI 0 ax [orig:220 D.6919 ] [220])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 218 {*adddi_1}
     (nil))
(insn 296 295 297 16 (parallel [
            (set (reg:DI 1 dx [orig:222 D.6919 ] [222])
                (ashift:DI (reg:DI 0 ax [orig:221 D.6919 ] [221])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 512 {*ashldi3_1}
     (nil))
(insn 297 296 298 16 (set (reg/f:DI 0 ax [429])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:463 89 {*movdi_internal}
     (nil))
(insn 298 297 299 16 (parallel [
            (set (reg/f:DI 3 bx [orig:223 D.6920 ] [223])
                (plus:DI (reg:DI 1 dx [orig:222 D.6919 ] [222])
                    (reg/f:DI 0 ax [429])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:222 D.6919 ] [222]))
        (nil)))
(insn 299 298 300 16 (set (reg:SI 0 ax [430])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:463 90 {*movsi_internal}
     (nil))
(insn 300 299 301 16 (set (reg:DI 0 ax [orig:224 D.6919 ] [224])
        (sign_extend:DI (reg:SI 0 ax [430]))) preproc.cpp:463 142 {*extendsidi2_rex64}
     (nil))
(insn 301 300 302 16 (parallel [
            (set (reg:DI 0 ax [orig:225 D.6919 ] [225])
                (plus:DI (reg:DI 0 ax [orig:224 D.6919 ] [224])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 218 {*adddi_1}
     (nil))
(insn 302 301 303 16 (parallel [
            (set (reg:DI 1 dx [orig:226 D.6919 ] [226])
                (ashift:DI (reg:DI 0 ax [orig:225 D.6919 ] [225])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 512 {*ashldi3_1}
     (nil))
(insn 303 302 304 16 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:463 89 {*movdi_internal}
     (nil))
(insn 304 303 305 16 (parallel [
            (set (reg/f:DI 0 ax [orig:227 D.6920 ] [227])
                (plus:DI (reg/f:DI 0 ax [431])
                    (reg:DI 1 dx [orig:226 D.6919 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:226 D.6919 ] [226]))
        (nil)))
(insn 305 304 580 16 (set (reg:SF 27 xmm6 [orig:228 D.6916 ] [228])
        (mem:SF (reg/f:DI 0 ax [orig:227 D.6920 ] [227]) [0 *_176+0 S4 A32])) preproc.cpp:463 129 {*movsf_internal}
     (nil))
(insn 580 305 618 16 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 27 xmm6 [orig:228 D.6916 ] [228])) preproc.cpp:463 129 {*movsf_internal}
     (nil))
(note 618 580 602 16 NOTE_INSN_DELETED)
(note 602 618 306 16 NOTE_INSN_DELETED)
(insn 306 602 581 16 (set (reg:SI 0 ax [432])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:463 90 {*movsi_internal}
     (nil))
(insn 581 306 307 16 (set (reg:SI 1 dx [433])
        (reg:SI 0 ax [432])) preproc.cpp:463 90 {*movsi_internal}
     (nil))
(insn 307 581 308 16 (parallel [
            (set (reg:SI 1 dx [433])
                (lshiftrt:SI (reg:SI 1 dx [433])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 544 {*lshrsi3_1}
     (nil))
(insn 308 307 309 16 (parallel [
            (set (reg:SI 0 ax [434])
                (plus:SI (reg:SI 0 ax [432])
                    (reg:SI 1 dx [433])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 217 {*addsi_1}
     (nil))
(insn 309 308 310 16 (parallel [
            (set (reg:SI 0 ax [435])
                (ashiftrt:SI (reg:SI 0 ax [434])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 545 {*ashrsi3_1}
     (nil))
(insn 310 309 311 16 (set (reg:SI 0 ax [orig:229 D.6917 ] [229])
        (reg:SI 0 ax [435])) preproc.cpp:463 90 {*movsi_internal}
     (nil))
(insn 311 310 312 16 (set (reg:DF 22 xmm1 [orig:230 D.6921 ] [230])
        (float:DF (reg:SI 0 ax [orig:229 D.6917 ] [229]))) preproc.cpp:463 201 {*floatsidf2_sse}
     (nil))
(insn 312 311 313 16 (set (reg:DF 21 xmm0 [orig:231 D.6921 ] [231])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:463 152 {*extendsfdf2_sse}
     (nil))
(insn 313 312 314 16 (set (reg:DF 22 xmm1 [orig:232 D.6921 ] [232])
        (mult:DF (reg:DF 22 xmm1 [orig:230 D.6921 ] [230])
            (reg:DF 21 xmm0 [orig:231 D.6921 ] [231]))) preproc.cpp:463 798 {*fop_df_comm_sse}
     (nil))
(insn 314 313 315 16 (set (reg:DF 21 xmm0 [orig:233 D.6921 ] [233])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:463 152 {*extendsfdf2_sse}
     (nil))
(insn 315 314 316 16 (set (reg:DF 21 xmm0 [orig:234 D.6921 ] [234])
        (plus:DF (reg:DF 21 xmm0 [orig:233 D.6921 ] [233])
            (reg:DF 22 xmm1 [orig:232 D.6921 ] [232]))) preproc.cpp:463 798 {*fop_df_comm_sse}
     (nil))
(insn 316 315 317 16 (set (reg:V2DF 22 xmm1 [436])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:463 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 317 316 318 16 (parallel [
            (set (reg:DF 21 xmm0 [orig:235 D.6921 ] [235])
                (abs:DF (reg:DF 21 xmm0 [orig:234 D.6921 ] [234])))
            (use (reg:V2DF 22 xmm1 [436]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:234 D.6921 ] [234]))
        (nil)))
(insn 318 317 319 16 (set (reg:DF 22 xmm1 [437])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:463 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 319 318 320 16 (set (reg:DF 22 xmm1 [orig:236 D.6921 ] [236])
        (mult:DF (reg:DF 22 xmm1 [437])
            (reg:DF 21 xmm0 [orig:235 D.6921 ] [235]))) preproc.cpp:463 798 {*fop_df_comm_sse}
     (nil))
(insn 320 319 321 16 (set (reg/f:DI 0 ax [438])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:463 89 {*movdi_internal}
     (nil))
(insn 321 320 322 16 (set (reg:SF 21 xmm0 [orig:237 D.6916 ] [237])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [438])
                (const_int 28 [0x1c])) [0 preprocess_21(D)->comp_filter+0 S4 A32])) preproc.cpp:463 129 {*movsf_internal}
     (nil))
(insn 322 321 323 16 (set (reg:DF 21 xmm0 [orig:238 D.6921 ] [238])
        (float_extend:DF (reg:SF 21 xmm0 [orig:237 D.6916 ] [237]))) preproc.cpp:463 152 {*extendsfdf2_sse}
     (nil))
(insn 323 322 325 16 (set (reg:DF 21 xmm0 [orig:239 D.6921 ] [239])
        (mult:DF (reg:DF 21 xmm0 [orig:238 D.6921 ] [238])
            (reg:DF 22 xmm1 [orig:236 D.6921 ] [236]))) preproc.cpp:463 798 {*fop_df_comm_sse}
     (nil))
(call_insn 325 323 327 16 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fae98e48d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:463 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 327 325 583 16 (set (reg:SF 21 xmm0 [orig:241 D.6916 ] [241])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:240 D.6921 ] [240]))) preproc.cpp:463 157 {*truncdfsf_fast_sse}
     (nil))
(note 583 327 612 16 NOTE_INSN_DELETED)
(note 612 583 328 16 NOTE_INSN_DELETED)
(insn 328 612 329 16 (set (reg:SF 21 xmm0 [orig:242 D.6916 ] [242])
        (mult:SF (reg:SF 21 xmm0 [orig:241 D.6916 ] [241])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:463 797 {*fop_sf_comm_sse}
     (nil))
(insn 329 328 330 16 (set (mem:SF (reg/f:DI 3 bx [orig:223 D.6920 ] [223]) [0 *_172+0 S4 A32])
        (reg:SF 21 xmm0 [orig:242 D.6916 ] [242])) preproc.cpp:463 129 {*movsf_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              15
;;              14 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 330 329 331 17 82 "" [2 uses])
(note 331 330 332 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 332 331 553 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:457 217 {*addsi_1}
     (nil))
(jump_insn 553 332 554 17 (set (pc)
        (label_ref 333)) preproc.cpp:457 654 {jump}
     (nil)
 -> 333)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 554 553 336)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              9
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243 244 439 440
(code_label 336 554 337 18 79 "" [2 uses])
(note 337 336 338 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 338 337 339 18 (set (reg/f:DI 0 ax [439])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:469 89 {*movdi_internal}
     (nil))
(insn 339 338 340 18 (parallel [
            (set (reg/f:DI 0 ax [orig:243 D.6922 ] [243])
                (plus:DI (reg/f:DI 0 ax [439])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:469 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 340 339 341 18 (set (reg:SF 21 xmm0 [orig:244 D.6916 ] [244])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:243 D.6922 ] [243])
                (const_int 28 [0x1c])) [0 _195->comp_filter+0 S4 A32])) preproc.cpp:469 129 {*movsf_internal}
     (nil))
(insn 341 340 342 18 (set (reg:SF 22 xmm1 [440])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:469 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 342 341 343 18 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:244 D.6916 ] [244])
            (reg:SF 22 xmm1 [440]))) preproc.cpp:469 55 {*cmpiusf_sse}
     (nil))
(jump_insn 343 342 546 18 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 550)
            (pc))) preproc.cpp:469 612 {*jcc_1}
     (nil)
 -> 550)
;;  succ:       20
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 244

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 244
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 244
;; lr  def 	 17 [flags] 441
(note 546 343 344 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 344 546 345 19 (set (reg:SF 22 xmm1 [441])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:469 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 345 344 346 19 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:244 D.6916 ] [244])
            (reg:SF 22 xmm1 [441]))) preproc.cpp:469 55 {*cmpiusf_sse}
     (nil))
(jump_insn 346 345 550 19 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 531)
            (pc))) preproc.cpp:469 612 {*jcc_1}
     (nil)
 -> 531)
;;  succ:       20 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 550 346 350 20 91 "" [1 uses])
(note 350 550 351 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 351 350 528 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:471 90 {*movsi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              27 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 442
(code_label 528 351 352 21 88 "" [1 uses])
(note 352 528 353 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 353 352 354 21 (set (reg/f:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) preproc.cpp:471 89 {*movdi_internal}
     (nil))
(insn 354 353 355 21 (set (reg:SI 0 ax [orig:245 D.6917 ] [245])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [442])
                (const_int 300 [0x12c])) [0 procpar_info_15(D)->num_points+0 S4 A32])) preproc.cpp:471 90 {*movsi_internal}
     (nil))
(insn 355 354 356 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:245 D.6917 ] [245])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) preproc.cpp:471 7 {*cmpsi_1}
     (nil))
(jump_insn 356 355 357 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 531)
            (pc))) preproc.cpp:471 612 {*jcc_1}
     (nil)
 -> 531)
;;  succ:       28
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 246 443
(note 357 356 358 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 358 357 359 22 (set (reg/f:DI 0 ax [443])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:472 89 {*movdi_internal}
     (nil))
(insn 359 358 360 22 (set (reg:SI 0 ax [orig:246 D.6917 ] [246])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [443])
                (const_int 40 [0x28])) [0 preprocess_21(D)->pre_quecc+0 S4 A32])) preproc.cpp:472 90 {*movsi_internal}
     (nil))
(insn 360 359 361 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:246 D.6917 ] [246])
            (const_int 0 [0]))) preproc.cpp:472 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 361 360 362 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 444)
            (pc))) preproc.cpp:472 612 {*jcc_1}
     (nil)
 -> 444)
;;  succ:       23 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 247 444
(note 362 361 363 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 363 362 364 23 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:472 89 {*movdi_internal}
     (nil))
(insn 364 363 365 23 (set (reg:SI 0 ax [orig:247 D.6917 ] [247])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [444])
                (const_int 44 [0x2c])) [0 preprocess_21(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:472 90 {*movsi_internal}
     (nil))
(insn 365 364 366 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:247 D.6917 ] [247])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) preproc.cpp:472 7 {*cmpsi_1}
     (nil))
(jump_insn 366 365 367 23 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 444)
            (pc))) preproc.cpp:472 612 {*jcc_1}
     (nil)
 -> 444)
;;  succ:       24 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466
(note 367 366 368 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 368 367 369 24 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:473 90 {*movsi_internal}
     (nil))
(insn 369 368 370 24 (set (reg:DI 0 ax [orig:248 D.6918 ] [248])
        (sign_extend:DI (reg:SI 0 ax [445]))) preproc.cpp:473 142 {*extendsidi2_rex64}
     (nil))
(insn 370 369 371 24 (parallel [
            (set (reg:DI 1 dx [orig:249 D.6918 ] [249])
                (ashift:DI (reg:DI 0 ax [orig:248 D.6918 ] [248])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 512 {*ashldi3_1}
     (nil))
(insn 371 370 372 24 (set (reg/f:DI 0 ax [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:473 89 {*movdi_internal}
     (nil))
(insn 372 371 373 24 (parallel [
            (set (reg/f:DI 3 bx [orig:250 D.6920 ] [250])
                (plus:DI (reg:DI 1 dx [orig:249 D.6918 ] [249])
                    (reg/f:DI 0 ax [446])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:249 D.6918 ] [249]))
        (nil)))
(insn 373 372 374 24 (set (reg:SI 0 ax [447])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:473 90 {*movsi_internal}
     (nil))
(insn 374 373 375 24 (set (reg:DI 0 ax [orig:251 D.6918 ] [251])
        (sign_extend:DI (reg:SI 0 ax [447]))) preproc.cpp:473 142 {*extendsidi2_rex64}
     (nil))
(insn 375 374 376 24 (parallel [
            (set (reg:DI 1 dx [orig:252 D.6918 ] [252])
                (ashift:DI (reg:DI 0 ax [orig:251 D.6918 ] [251])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 512 {*ashldi3_1}
     (nil))
(insn 376 375 377 24 (set (reg/f:DI 0 ax [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:473 89 {*movdi_internal}
     (nil))
(insn 377 376 378 24 (parallel [
            (set (reg/f:DI 0 ax [orig:253 D.6920 ] [253])
                (plus:DI (reg/f:DI 0 ax [448])
                    (reg:DI 1 dx [orig:252 D.6918 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:252 D.6918 ] [252]))
        (nil)))
(insn 378 377 584 24 (set (reg:SF 28 xmm7 [orig:254 D.6916 ] [254])
        (mem:SF (reg/f:DI 0 ax [orig:253 D.6920 ] [253]) [0 *_206+0 S4 A32])) preproc.cpp:473 129 {*movsf_internal}
     (nil))
(insn 584 378 621 24 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 28 xmm7 [orig:254 D.6916 ] [254])) preproc.cpp:473 129 {*movsf_internal}
     (nil))
(note 621 584 605 24 NOTE_INSN_DELETED)
(note 605 621 379 24 NOTE_INSN_DELETED)
(insn 379 605 585 24 (set (reg:SI 0 ax [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:473 90 {*movsi_internal}
     (nil))
(insn 585 379 380 24 (set (reg:SI 1 dx [450])
        (reg:SI 0 ax [449])) preproc.cpp:473 90 {*movsi_internal}
     (nil))
(insn 380 585 381 24 (parallel [
            (set (reg:SI 1 dx [450])
                (lshiftrt:SI (reg:SI 1 dx [450])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 544 {*lshrsi3_1}
     (nil))
(insn 381 380 382 24 (parallel [
            (set (reg:SI 0 ax [451])
                (plus:SI (reg:SI 0 ax [449])
                    (reg:SI 1 dx [450])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 217 {*addsi_1}
     (nil))
(insn 382 381 383 24 (parallel [
            (set (reg:SI 0 ax [452])
                (ashiftrt:SI (reg:SI 0 ax [451])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 545 {*ashrsi3_1}
     (nil))
(insn 383 382 384 24 (set (reg:SI 0 ax [orig:255 D.6917 ] [255])
        (reg:SI 0 ax [452])) preproc.cpp:473 90 {*movsi_internal}
     (nil))
(insn 384 383 385 24 (set (reg:DF 22 xmm1 [orig:256 D.6921 ] [256])
        (float:DF (reg:SI 0 ax [orig:255 D.6917 ] [255]))) preproc.cpp:473 201 {*floatsidf2_sse}
     (nil))
(insn 385 384 386 24 (set (reg:DF 21 xmm0 [orig:257 D.6921 ] [257])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:473 152 {*extendsfdf2_sse}
     (nil))
(insn 386 385 387 24 (set (reg:DF 22 xmm1 [orig:258 D.6921 ] [258])
        (mult:DF (reg:DF 22 xmm1 [orig:256 D.6921 ] [256])
            (reg:DF 21 xmm0 [orig:257 D.6921 ] [257]))) preproc.cpp:473 798 {*fop_df_comm_sse}
     (nil))
(insn 387 386 388 24 (set (reg:DF 21 xmm0 [orig:259 D.6921 ] [259])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:473 152 {*extendsfdf2_sse}
     (nil))
(insn 388 387 389 24 (set (reg:DF 21 xmm0 [orig:260 D.6921 ] [260])
        (plus:DF (reg:DF 21 xmm0 [orig:259 D.6921 ] [259])
            (reg:DF 22 xmm1 [orig:258 D.6921 ] [258]))) preproc.cpp:473 798 {*fop_df_comm_sse}
     (nil))
(insn 389 388 390 24 (set (reg:V2DF 22 xmm1 [453])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:473 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 390 389 391 24 (parallel [
            (set (reg:DF 21 xmm0 [orig:261 D.6921 ] [261])
                (abs:DF (reg:DF 21 xmm0 [orig:260 D.6921 ] [260])))
            (use (reg:V2DF 22 xmm1 [453]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:260 D.6921 ] [260]))
        (nil)))
(insn 391 390 392 24 (set (reg:DF 22 xmm1 [454])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:473 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 392 391 393 24 (set (reg:DF 22 xmm1 [orig:262 D.6921 ] [262])
        (mult:DF (reg:DF 22 xmm1 [454])
            (reg:DF 21 xmm0 [orig:261 D.6921 ] [261]))) preproc.cpp:473 798 {*fop_df_comm_sse}
     (nil))
(insn 393 392 394 24 (set (reg/f:DI 0 ax [455])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:473 89 {*movdi_internal}
     (nil))
(insn 394 393 395 24 (parallel [
            (set (reg/f:DI 0 ax [orig:263 D.6922 ] [263])
                (plus:DI (reg/f:DI 0 ax [455])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 395 394 396 24 (set (reg:SF 21 xmm0 [orig:264 D.6916 ] [264])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:263 D.6922 ] [263])
                (const_int 28 [0x1c])) [0 _216->comp_filter+0 S4 A32])) preproc.cpp:473 129 {*movsf_internal}
     (nil))
(insn 396 395 397 24 (set (reg:DF 21 xmm0 [orig:265 D.6921 ] [265])
        (float_extend:DF (reg:SF 21 xmm0 [orig:264 D.6916 ] [264]))) preproc.cpp:473 152 {*extendsfdf2_sse}
     (nil))
(insn 397 396 399 24 (set (reg:DF 21 xmm0 [orig:266 D.6921 ] [266])
        (mult:DF (reg:DF 21 xmm0 [orig:265 D.6921 ] [265])
            (reg:DF 22 xmm1 [orig:262 D.6921 ] [262]))) preproc.cpp:473 798 {*fop_df_comm_sse}
     (nil))
(call_insn 399 397 401 24 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fae98e48d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:473 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 401 399 587 24 (set (reg:SF 21 xmm0 [orig:268 D.6916 ] [268])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:267 D.6921 ] [267]))) preproc.cpp:473 157 {*truncdfsf_fast_sse}
     (nil))
(note 587 401 611 24 NOTE_INSN_DELETED)
(note 611 587 402 24 NOTE_INSN_DELETED)
(insn 402 611 403 24 (set (reg:SF 21 xmm0 [orig:269 D.6916 ] [269])
        (mult:SF (reg:SF 21 xmm0 [orig:268 D.6916 ] [268])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:473 797 {*fop_sf_comm_sse}
     (nil))
(insn 403 402 404 24 (set (mem:SF (reg/f:DI 3 bx [orig:250 D.6920 ] [250]) [0 *_203+0 S4 A32])
        (reg:SF 21 xmm0 [orig:269 D.6916 ] [269])) preproc.cpp:473 129 {*movsf_internal}
     (nil))
(insn 404 403 405 24 (set (reg:SI 0 ax [456])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:474 90 {*movsi_internal}
     (nil))
(insn 405 404 406 24 (set (reg:DI 0 ax [orig:270 D.6919 ] [270])
        (sign_extend:DI (reg:SI 0 ax [456]))) preproc.cpp:474 142 {*extendsidi2_rex64}
     (nil))
(insn 406 405 407 24 (parallel [
            (set (reg:DI 0 ax [orig:271 D.6919 ] [271])
                (plus:DI (reg:DI 0 ax [orig:270 D.6919 ] [270])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 218 {*adddi_1}
     (nil))
(insn 407 406 408 24 (parallel [
            (set (reg:DI 1 dx [orig:272 D.6919 ] [272])
                (ashift:DI (reg:DI 0 ax [orig:271 D.6919 ] [271])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 512 {*ashldi3_1}
     (nil))
(insn 408 407 409 24 (set (reg/f:DI 0 ax [457])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:474 89 {*movdi_internal}
     (nil))
(insn 409 408 410 24 (parallel [
            (set (reg/f:DI 3 bx [orig:273 D.6920 ] [273])
                (plus:DI (reg:DI 1 dx [orig:272 D.6919 ] [272])
                    (reg/f:DI 0 ax [457])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:272 D.6919 ] [272]))
        (nil)))
(insn 410 409 411 24 (set (reg:SI 0 ax [458])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:474 90 {*movsi_internal}
     (nil))
(insn 411 410 412 24 (set (reg:DI 0 ax [orig:274 D.6919 ] [274])
        (sign_extend:DI (reg:SI 0 ax [458]))) preproc.cpp:474 142 {*extendsidi2_rex64}
     (nil))
(insn 412 411 413 24 (parallel [
            (set (reg:DI 0 ax [orig:275 D.6919 ] [275])
                (plus:DI (reg:DI 0 ax [orig:274 D.6919 ] [274])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 218 {*adddi_1}
     (nil))
(insn 413 412 414 24 (parallel [
            (set (reg:DI 1 dx [orig:276 D.6919 ] [276])
                (ashift:DI (reg:DI 0 ax [orig:275 D.6919 ] [275])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 512 {*ashldi3_1}
     (nil))
(insn 414 413 415 24 (set (reg/f:DI 0 ax [459])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:474 89 {*movdi_internal}
     (nil))
(insn 415 414 416 24 (parallel [
            (set (reg/f:DI 0 ax [orig:277 D.6920 ] [277])
                (plus:DI (reg/f:DI 0 ax [459])
                    (reg:DI 1 dx [orig:276 D.6919 ] [276])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:276 D.6919 ] [276]))
        (nil)))
(insn 416 415 588 24 (set (reg:SF 24 xmm3 [orig:278 D.6916 ] [278])
        (mem:SF (reg/f:DI 0 ax [orig:277 D.6920 ] [277]) [0 *_232+0 S4 A32])) preproc.cpp:474 129 {*movsf_internal}
     (nil))
(insn 588 416 620 24 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 24 xmm3 [orig:278 D.6916 ] [278])) preproc.cpp:474 129 {*movsf_internal}
     (nil))
(note 620 588 604 24 NOTE_INSN_DELETED)
(note 604 620 417 24 NOTE_INSN_DELETED)
(insn 417 604 589 24 (set (reg:SI 0 ax [460])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:474 90 {*movsi_internal}
     (nil))
(insn 589 417 418 24 (set (reg:SI 1 dx [461])
        (reg:SI 0 ax [460])) preproc.cpp:474 90 {*movsi_internal}
     (nil))
(insn 418 589 419 24 (parallel [
            (set (reg:SI 1 dx [461])
                (lshiftrt:SI (reg:SI 1 dx [461])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 544 {*lshrsi3_1}
     (nil))
(insn 419 418 420 24 (parallel [
            (set (reg:SI 0 ax [462])
                (plus:SI (reg:SI 0 ax [460])
                    (reg:SI 1 dx [461])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 217 {*addsi_1}
     (nil))
(insn 420 419 421 24 (parallel [
            (set (reg:SI 0 ax [463])
                (ashiftrt:SI (reg:SI 0 ax [462])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 545 {*ashrsi3_1}
     (nil))
(insn 421 420 422 24 (set (reg:SI 0 ax [orig:279 D.6917 ] [279])
        (reg:SI 0 ax [463])) preproc.cpp:474 90 {*movsi_internal}
     (nil))
(insn 422 421 423 24 (set (reg:DF 22 xmm1 [orig:280 D.6921 ] [280])
        (float:DF (reg:SI 0 ax [orig:279 D.6917 ] [279]))) preproc.cpp:474 201 {*floatsidf2_sse}
     (nil))
(insn 423 422 424 24 (set (reg:DF 21 xmm0 [orig:281 D.6921 ] [281])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:474 152 {*extendsfdf2_sse}
     (nil))
(insn 424 423 425 24 (set (reg:DF 22 xmm1 [orig:282 D.6921 ] [282])
        (mult:DF (reg:DF 22 xmm1 [orig:280 D.6921 ] [280])
            (reg:DF 21 xmm0 [orig:281 D.6921 ] [281]))) preproc.cpp:474 798 {*fop_df_comm_sse}
     (nil))
(insn 425 424 426 24 (set (reg:DF 21 xmm0 [orig:283 D.6921 ] [283])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:474 152 {*extendsfdf2_sse}
     (nil))
(insn 426 425 427 24 (set (reg:DF 21 xmm0 [orig:284 D.6921 ] [284])
        (plus:DF (reg:DF 21 xmm0 [orig:283 D.6921 ] [283])
            (reg:DF 22 xmm1 [orig:282 D.6921 ] [282]))) preproc.cpp:474 798 {*fop_df_comm_sse}
     (nil))
(insn 427 426 428 24 (set (reg:V2DF 22 xmm1 [464])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:474 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 428 427 429 24 (parallel [
            (set (reg:DF 21 xmm0 [orig:285 D.6921 ] [285])
                (abs:DF (reg:DF 21 xmm0 [orig:284 D.6921 ] [284])))
            (use (reg:V2DF 22 xmm1 [464]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:284 D.6921 ] [284]))
        (nil)))
(insn 429 428 430 24 (set (reg:DF 22 xmm1 [465])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:474 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 430 429 431 24 (set (reg:DF 22 xmm1 [orig:286 D.6921 ] [286])
        (mult:DF (reg:DF 22 xmm1 [465])
            (reg:DF 21 xmm0 [orig:285 D.6921 ] [285]))) preproc.cpp:474 798 {*fop_df_comm_sse}
     (nil))
(insn 431 430 432 24 (set (reg/f:DI 0 ax [466])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:474 89 {*movdi_internal}
     (nil))
(insn 432 431 433 24 (parallel [
            (set (reg/f:DI 0 ax [orig:287 D.6922 ] [287])
                (plus:DI (reg/f:DI 0 ax [466])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 433 432 434 24 (set (reg:SF 21 xmm0 [orig:288 D.6916 ] [288])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:287 D.6922 ] [287])
                (const_int 28 [0x1c])) [0 _242->comp_filter+0 S4 A32])) preproc.cpp:474 129 {*movsf_internal}
     (nil))
(insn 434 433 435 24 (set (reg:DF 21 xmm0 [orig:289 D.6921 ] [289])
        (float_extend:DF (reg:SF 21 xmm0 [orig:288 D.6916 ] [288]))) preproc.cpp:474 152 {*extendsfdf2_sse}
     (nil))
(insn 435 434 437 24 (set (reg:DF 21 xmm0 [orig:290 D.6921 ] [290])
        (mult:DF (reg:DF 21 xmm0 [orig:289 D.6921 ] [289])
            (reg:DF 22 xmm1 [orig:286 D.6921 ] [286]))) preproc.cpp:474 798 {*fop_df_comm_sse}
     (nil))
(call_insn 437 435 439 24 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fae98e48d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:474 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 439 437 591 24 (set (reg:SF 21 xmm0 [orig:292 D.6916 ] [292])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:291 D.6921 ] [291]))) preproc.cpp:474 157 {*truncdfsf_fast_sse}
     (nil))
(note 591 439 610 24 NOTE_INSN_DELETED)
(note 610 591 440 24 NOTE_INSN_DELETED)
(insn 440 610 441 24 (set (reg:SF 21 xmm0 [orig:293 D.6916 ] [293])
        (mult:SF (reg:SF 21 xmm0 [orig:292 D.6916 ] [292])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:474 797 {*fop_sf_comm_sse}
     (nil))
(insn 441 440 555 24 (set (mem:SF (reg/f:DI 3 bx [orig:273 D.6920 ] [273]) [0 *_228+0 S4 A32])
        (reg:SF 21 xmm0 [orig:293 D.6916 ] [293])) preproc.cpp:474 129 {*movsf_internal}
     (nil))
(jump_insn 555 441 556 24 (set (pc)
        (label_ref 525)) preproc.cpp:474 654 {jump}
     (nil)
 -> 525)
;;  succ:       27 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 556 555 444)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;;              23
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 294 467
(code_label 444 556 445 25 86 "" [2 uses])
(note 445 444 446 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 446 445 447 25 (set (reg/f:DI 0 ax [467])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:475 89 {*movdi_internal}
     (nil))
(insn 447 446 448 25 (set (reg:SI 0 ax [orig:294 D.6917 ] [294])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [467])
                (const_int 40 [0x28])) [0 preprocess_21(D)->pre_quecc+0 S4 A32])) preproc.cpp:475 90 {*movsi_internal}
     (nil))
(insn 448 447 449 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:294 D.6917 ] [294])
            (const_int 0 [0]))) preproc.cpp:475 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 449 448 450 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 525)
            (pc))) preproc.cpp:475 612 {*jcc_1}
     (nil)
 -> 525)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489
(note 450 449 451 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 451 450 452 26 (set (reg:SI 0 ax [468])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 452 451 453 26 (set (reg:DI 0 ax [orig:295 D.6918 ] [295])
        (sign_extend:DI (reg:SI 0 ax [468]))) preproc.cpp:476 142 {*extendsidi2_rex64}
     (nil))
(insn 453 452 454 26 (parallel [
            (set (reg:DI 1 dx [orig:296 D.6918 ] [296])
                (ashift:DI (reg:DI 0 ax [orig:295 D.6918 ] [295])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 512 {*ashldi3_1}
     (nil))
(insn 454 453 455 26 (set (reg/f:DI 0 ax [469])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:476 89 {*movdi_internal}
     (nil))
(insn 455 454 456 26 (parallel [
            (set (reg/f:DI 3 bx [orig:297 D.6920 ] [297])
                (plus:DI (reg:DI 1 dx [orig:296 D.6918 ] [296])
                    (reg/f:DI 0 ax [469])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:296 D.6918 ] [296]))
        (nil)))
(insn 456 455 457 26 (set (reg:SI 0 ax [470])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 457 456 458 26 (set (reg:DI 0 ax [orig:298 D.6918 ] [298])
        (sign_extend:DI (reg:SI 0 ax [470]))) preproc.cpp:476 142 {*extendsidi2_rex64}
     (nil))
(insn 458 457 459 26 (parallel [
            (set (reg:DI 1 dx [orig:299 D.6918 ] [299])
                (ashift:DI (reg:DI 0 ax [orig:298 D.6918 ] [298])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 512 {*ashldi3_1}
     (nil))
(insn 459 458 460 26 (set (reg/f:DI 0 ax [471])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:476 89 {*movdi_internal}
     (nil))
(insn 460 459 461 26 (parallel [
            (set (reg/f:DI 0 ax [orig:300 D.6920 ] [300])
                (plus:DI (reg/f:DI 0 ax [471])
                    (reg:DI 1 dx [orig:299 D.6918 ] [299])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:299 D.6918 ] [299]))
        (nil)))
(insn 461 460 592 26 (set (reg:SF 25 xmm4 [orig:301 D.6916 ] [301])
        (mem:SF (reg/f:DI 0 ax [orig:300 D.6920 ] [300]) [0 *_257+0 S4 A32])) preproc.cpp:476 129 {*movsf_internal}
     (nil))
(insn 592 461 623 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 25 xmm4 [orig:301 D.6916 ] [301])) preproc.cpp:476 129 {*movsf_internal}
     (nil))
(note 623 592 607 26 NOTE_INSN_DELETED)
(note 607 623 462 26 NOTE_INSN_DELETED)
(insn 462 607 593 26 (set (reg:SI 0 ax [472])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 593 462 463 26 (set (reg:SI 1 dx [473])
        (reg:SI 0 ax [472])) preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 463 593 464 26 (parallel [
            (set (reg:SI 1 dx [473])
                (lshiftrt:SI (reg:SI 1 dx [473])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 544 {*lshrsi3_1}
     (nil))
(insn 464 463 465 26 (parallel [
            (set (reg:SI 0 ax [474])
                (plus:SI (reg:SI 0 ax [472])
                    (reg:SI 1 dx [473])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 217 {*addsi_1}
     (nil))
(insn 465 464 466 26 (parallel [
            (set (reg:SI 0 ax [475])
                (ashiftrt:SI (reg:SI 0 ax [474])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 545 {*ashrsi3_1}
     (nil))
(insn 466 465 467 26 (set (reg:SI 0 ax [orig:302 D.6917 ] [302])
        (reg:SI 0 ax [475])) preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 467 466 468 26 (set (reg:DF 22 xmm1 [orig:303 D.6921 ] [303])
        (float:DF (reg:SI 0 ax [orig:302 D.6917 ] [302]))) preproc.cpp:476 201 {*floatsidf2_sse}
     (nil))
(insn 468 467 469 26 (set (reg:DF 21 xmm0 [orig:304 D.6921 ] [304])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:476 152 {*extendsfdf2_sse}
     (nil))
(insn 469 468 470 26 (set (reg:DF 22 xmm1 [orig:305 D.6921 ] [305])
        (mult:DF (reg:DF 22 xmm1 [orig:303 D.6921 ] [303])
            (reg:DF 21 xmm0 [orig:304 D.6921 ] [304]))) preproc.cpp:476 798 {*fop_df_comm_sse}
     (nil))
(insn 470 469 471 26 (set (reg:DF 21 xmm0 [orig:306 D.6921 ] [306])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:476 152 {*extendsfdf2_sse}
     (nil))
(insn 471 470 472 26 (set (reg:DF 21 xmm0 [orig:307 D.6921 ] [307])
        (plus:DF (reg:DF 21 xmm0 [orig:306 D.6921 ] [306])
            (reg:DF 22 xmm1 [orig:305 D.6921 ] [305]))) preproc.cpp:476 798 {*fop_df_comm_sse}
     (nil))
(insn 472 471 473 26 (set (reg:V2DF 22 xmm1 [476])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:476 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 473 472 474 26 (parallel [
            (set (reg:DF 21 xmm0 [orig:308 D.6921 ] [308])
                (abs:DF (reg:DF 21 xmm0 [orig:307 D.6921 ] [307])))
            (use (reg:V2DF 22 xmm1 [476]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:307 D.6921 ] [307]))
        (nil)))
(insn 474 473 475 26 (set (reg:DF 22 xmm1 [477])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:476 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 475 474 476 26 (set (reg:DF 22 xmm1 [orig:309 D.6921 ] [309])
        (mult:DF (reg:DF 22 xmm1 [477])
            (reg:DF 21 xmm0 [orig:308 D.6921 ] [308]))) preproc.cpp:476 798 {*fop_df_comm_sse}
     (nil))
(insn 476 475 477 26 (set (reg/f:DI 0 ax [478])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:476 89 {*movdi_internal}
     (nil))
(insn 477 476 478 26 (parallel [
            (set (reg/f:DI 0 ax [orig:310 D.6922 ] [310])
                (plus:DI (reg/f:DI 0 ax [478])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 478 477 479 26 (set (reg:SF 21 xmm0 [orig:311 D.6916 ] [311])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:310 D.6922 ] [310])
                (const_int 28 [0x1c])) [0 _267->comp_filter+0 S4 A32])) preproc.cpp:476 129 {*movsf_internal}
     (nil))
(insn 479 478 480 26 (set (reg:DF 21 xmm0 [orig:312 D.6921 ] [312])
        (float_extend:DF (reg:SF 21 xmm0 [orig:311 D.6916 ] [311]))) preproc.cpp:476 152 {*extendsfdf2_sse}
     (nil))
(insn 480 479 482 26 (set (reg:DF 21 xmm0 [orig:313 D.6921 ] [313])
        (mult:DF (reg:DF 21 xmm0 [orig:312 D.6921 ] [312])
            (reg:DF 22 xmm1 [orig:309 D.6921 ] [309]))) preproc.cpp:476 798 {*fop_df_comm_sse}
     (nil))
(call_insn 482 480 484 26 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fae98e48d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:476 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 484 482 595 26 (set (reg:SF 21 xmm0 [orig:315 D.6916 ] [315])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:314 D.6921 ] [314]))) preproc.cpp:476 157 {*truncdfsf_fast_sse}
     (nil))
(note 595 484 609 26 NOTE_INSN_DELETED)
(note 609 595 485 26 NOTE_INSN_DELETED)
(insn 485 609 486 26 (set (reg:SF 21 xmm0 [orig:316 D.6916 ] [316])
        (mult:SF (reg:SF 21 xmm0 [orig:315 D.6916 ] [315])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:476 797 {*fop_sf_comm_sse}
     (nil))
(insn 486 485 487 26 (set (mem:SF (reg/f:DI 3 bx [orig:297 D.6920 ] [297]) [0 *_254+0 S4 A32])
        (reg:SF 21 xmm0 [orig:316 D.6916 ] [316])) preproc.cpp:476 129 {*movsf_internal}
     (nil))
(insn 487 486 488 26 (set (reg:SI 0 ax [479])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 488 487 489 26 (set (reg:DI 0 ax [orig:317 D.6919 ] [317])
        (sign_extend:DI (reg:SI 0 ax [479]))) preproc.cpp:477 142 {*extendsidi2_rex64}
     (nil))
(insn 489 488 490 26 (parallel [
            (set (reg:DI 0 ax [orig:318 D.6919 ] [318])
                (plus:DI (reg:DI 0 ax [orig:317 D.6919 ] [317])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 218 {*adddi_1}
     (nil))
(insn 490 489 491 26 (parallel [
            (set (reg:DI 1 dx [orig:319 D.6919 ] [319])
                (ashift:DI (reg:DI 0 ax [orig:318 D.6919 ] [318])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 512 {*ashldi3_1}
     (nil))
(insn 491 490 492 26 (set (reg/f:DI 0 ax [480])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:477 89 {*movdi_internal}
     (nil))
(insn 492 491 493 26 (parallel [
            (set (reg/f:DI 3 bx [orig:320 D.6920 ] [320])
                (plus:DI (reg:DI 1 dx [orig:319 D.6919 ] [319])
                    (reg/f:DI 0 ax [480])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:319 D.6919 ] [319]))
        (nil)))
(insn 493 492 494 26 (set (reg:SI 0 ax [481])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 494 493 495 26 (set (reg:DI 0 ax [orig:321 D.6919 ] [321])
        (sign_extend:DI (reg:SI 0 ax [481]))) preproc.cpp:477 142 {*extendsidi2_rex64}
     (nil))
(insn 495 494 496 26 (parallel [
            (set (reg:DI 0 ax [orig:322 D.6919 ] [322])
                (plus:DI (reg:DI 0 ax [orig:321 D.6919 ] [321])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 218 {*adddi_1}
     (nil))
(insn 496 495 497 26 (parallel [
            (set (reg:DI 1 dx [orig:323 D.6919 ] [323])
                (ashift:DI (reg:DI 0 ax [orig:322 D.6919 ] [322])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 512 {*ashldi3_1}
     (nil))
(insn 497 496 498 26 (set (reg/f:DI 0 ax [482])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:477 89 {*movdi_internal}
     (nil))
(insn 498 497 499 26 (parallel [
            (set (reg/f:DI 0 ax [orig:324 D.6920 ] [324])
                (plus:DI (reg/f:DI 0 ax [482])
                    (reg:DI 1 dx [orig:323 D.6919 ] [323])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:323 D.6919 ] [323]))
        (nil)))
(insn 499 498 596 26 (set (reg:SF 26 xmm5 [orig:325 D.6916 ] [325])
        (mem:SF (reg/f:DI 0 ax [orig:324 D.6920 ] [324]) [0 *_283+0 S4 A32])) preproc.cpp:477 129 {*movsf_internal}
     (nil))
(insn 596 499 622 26 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 26 xmm5 [orig:325 D.6916 ] [325])) preproc.cpp:477 129 {*movsf_internal}
     (nil))
(note 622 596 606 26 NOTE_INSN_DELETED)
(note 606 622 500 26 NOTE_INSN_DELETED)
(insn 500 606 597 26 (set (reg:SI 0 ax [483])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 597 500 501 26 (set (reg:SI 1 dx [484])
        (reg:SI 0 ax [483])) preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 501 597 502 26 (parallel [
            (set (reg:SI 1 dx [484])
                (lshiftrt:SI (reg:SI 1 dx [484])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 544 {*lshrsi3_1}
     (nil))
(insn 502 501 503 26 (parallel [
            (set (reg:SI 0 ax [485])
                (plus:SI (reg:SI 0 ax [483])
                    (reg:SI 1 dx [484])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 217 {*addsi_1}
     (nil))
(insn 503 502 504 26 (parallel [
            (set (reg:SI 0 ax [486])
                (ashiftrt:SI (reg:SI 0 ax [485])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 545 {*ashrsi3_1}
     (nil))
(insn 504 503 505 26 (set (reg:SI 0 ax [orig:326 D.6917 ] [326])
        (reg:SI 0 ax [486])) preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 505 504 506 26 (set (reg:DF 22 xmm1 [orig:327 D.6921 ] [327])
        (float:DF (reg:SI 0 ax [orig:326 D.6917 ] [326]))) preproc.cpp:477 201 {*floatsidf2_sse}
     (nil))
(insn 506 505 507 26 (set (reg:DF 21 xmm0 [orig:328 D.6921 ] [328])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:477 152 {*extendsfdf2_sse}
     (nil))
(insn 507 506 508 26 (set (reg:DF 22 xmm1 [orig:329 D.6921 ] [329])
        (mult:DF (reg:DF 22 xmm1 [orig:327 D.6921 ] [327])
            (reg:DF 21 xmm0 [orig:328 D.6921 ] [328]))) preproc.cpp:477 798 {*fop_df_comm_sse}
     (nil))
(insn 508 507 509 26 (set (reg:DF 21 xmm0 [orig:330 D.6921 ] [330])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:477 152 {*extendsfdf2_sse}
     (nil))
(insn 509 508 510 26 (set (reg:DF 21 xmm0 [orig:331 D.6921 ] [331])
        (plus:DF (reg:DF 21 xmm0 [orig:330 D.6921 ] [330])
            (reg:DF 22 xmm1 [orig:329 D.6921 ] [329]))) preproc.cpp:477 798 {*fop_df_comm_sse}
     (nil))
(insn 510 509 511 26 (set (reg:V2DF 22 xmm1 [487])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:477 1208 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 511 510 512 26 (parallel [
            (set (reg:DF 21 xmm0 [orig:332 D.6921 ] [332])
                (abs:DF (reg:DF 21 xmm0 [orig:331 D.6921 ] [331])))
            (use (reg:V2DF 22 xmm1 [487]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 470 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:331 D.6921 ] [331]))
        (nil)))
(insn 512 511 513 26 (set (reg:DF 22 xmm1 [488])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:477 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 513 512 514 26 (set (reg:DF 22 xmm1 [orig:333 D.6921 ] [333])
        (mult:DF (reg:DF 22 xmm1 [488])
            (reg:DF 21 xmm0 [orig:332 D.6921 ] [332]))) preproc.cpp:477 798 {*fop_df_comm_sse}
     (nil))
(insn 514 513 515 26 (set (reg/f:DI 0 ax [489])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:477 89 {*movdi_internal}
     (nil))
(insn 515 514 516 26 (parallel [
            (set (reg/f:DI 0 ax [orig:334 D.6922 ] [334])
                (plus:DI (reg/f:DI 0 ax [489])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 516 515 517 26 (set (reg:SF 21 xmm0 [orig:335 D.6916 ] [335])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:334 D.6922 ] [334])
                (const_int 28 [0x1c])) [0 _293->comp_filter+0 S4 A32])) preproc.cpp:477 129 {*movsf_internal}
     (nil))
(insn 517 516 518 26 (set (reg:DF 21 xmm0 [orig:336 D.6921 ] [336])
        (float_extend:DF (reg:SF 21 xmm0 [orig:335 D.6916 ] [335]))) preproc.cpp:477 152 {*extendsfdf2_sse}
     (nil))
(insn 518 517 520 26 (set (reg:DF 21 xmm0 [orig:337 D.6921 ] [337])
        (mult:DF (reg:DF 21 xmm0 [orig:336 D.6921 ] [336])
            (reg:DF 22 xmm1 [orig:333 D.6921 ] [333]))) preproc.cpp:477 798 {*fop_df_comm_sse}
     (nil))
(call_insn 520 518 522 26 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x7fae98e48d80 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:477 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 522 520 599 26 (set (reg:SF 21 xmm0 [orig:339 D.6916 ] [339])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:338 D.6921 ] [338]))) preproc.cpp:477 157 {*truncdfsf_fast_sse}
     (nil))
(note 599 522 608 26 NOTE_INSN_DELETED)
(note 608 599 523 26 NOTE_INSN_DELETED)
(insn 523 608 524 26 (set (reg:SF 21 xmm0 [orig:340 D.6916 ] [340])
        (mult:SF (reg:SF 21 xmm0 [orig:339 D.6916 ] [339])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:477 797 {*fop_sf_comm_sse}
     (nil))
(insn 524 523 525 26 (set (mem:SF (reg/f:DI 3 bx [orig:320 D.6920 ] [320]) [0 *_279+0 S4 A32])
        (reg:SF 21 xmm0 [orig:340 D.6916 ] [340])) preproc.cpp:477 129 {*movsf_internal}
     (nil))
;;  succ:       27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;;              25
;;              24 [100.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 525 524 526 27 87 "" [2 uses])
(note 526 525 527 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 527 526 557 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:471 217 {*addsi_1}
     (nil))
(jump_insn 557 527 558 27 (set (pc)
        (label_ref 528)) preproc.cpp:471 654 {jump}
     (nil)
 -> 528)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 558 557 531)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              19
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 341 342
(code_label 531 558 532 28 84 "" [2 uses])
(note 532 531 533 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 533 532 536 28 (set (reg:SI 0 ax [orig:341 D.6917 ] [341])
        (const_int 1 [0x1])) preproc.cpp:483 90 {*movsi_internal}
     (nil))
(insn 536 533 540 28 (set (reg:SI 0 ax [orig:342 <retval> ] [342])
        (reg:SI 0 ax [orig:341 D.6917 ] [341])) preproc.cpp:483 90 {*movsi_internal}
     (nil))
(insn 540 536 541 28 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:342 <retval> ] [342])) preproc.cpp:485 90 {*movsi_internal}
     (nil))
(insn 541 540 559 28 (use (reg/i:SI 0 ax)) preproc.cpp:485 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 559 541 0 NOTE_INSN_DELETED)

;; Function int quecc(float*, float*, float*, Procpar_info*, Preprocess*) (_Z5queccPfS_S_P12Procpar_infoP10Preprocess, funcdef_no=10, decl_uid=5478, cgraph_uid=10, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 11:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 12:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 13:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 14:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 15:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 16:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 17:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 18:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 19:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 20:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 21:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 22:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 23:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 24:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 25:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 26:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 27:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 28:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 29:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 30:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 31:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 32:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 33:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 34:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 54:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 63:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 71:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 74
	 Choosing alt 0 in insn 74:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 77:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 78:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 84:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 91
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 92:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 97:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 98:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 110
	 Choosing alt 0 in insn 110:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 111:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 119
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 120:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 128:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 130
	 Choosing alt 0 in insn 130:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 134:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 135:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 140
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 141:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 148
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 149:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 154:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 155:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 165
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 166:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 172
	 Choosing alt 0 in insn 172:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 173:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 181
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 182:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 187:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 189
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 190:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 192
	 Choosing alt 0 in insn 192:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 193
	 Choosing alt 0 in insn 193:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 196:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 197:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 200:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 201:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 202
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 203:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 208:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 210
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 211:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 216:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 217:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 218:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 225:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 226:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 231:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 233:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 236:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 238:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 241:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 243:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 244:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=356 from oldreg=200, assigning class SSE_REGS to r356
  244: r356:SF=float_trunc([frame:DI-0x70])
    Inserting insn reload after:
  413: r200:SF=r356:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 413:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 245:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=357, assigning class NO_REGS to secondary r357
  246: r357:DF=r323:DF
      REG_DEAD r323:DF
    Inserting the sec. move after:
  414: xmm0:DF=r357:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 414:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 250
	 Choosing alt 0 in insn 250:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=358 from oldreg=200, assigning class SSE_REGS to r358
      Making reload reg 358 for reg 200 optional
  250: r203:SF=r202:SF*r358:SF
      REG_DEAD r202:SF
      REG_DEAD r200:SF
    Inserting insn reload before:
  415: r358:SF=r200:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 415:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 251:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 255:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 256:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 258:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=359 from oldreg=208, assigning class SSE_REGS to r359
  258: r359:SF=float_trunc([frame:DI-0x70])
    Inserting insn reload after:
  416: r208:SF=r359:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 416:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 259:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=360, assigning class NO_REGS to secondary r360
  260: r360:DF=r326:DF
      REG_DEAD r326:DF
    Inserting the sec. move after:
  417: xmm0:DF=r360:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 417:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 264
	 Choosing alt 0 in insn 264:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=361 from oldreg=208, assigning class SSE_REGS to r361
      Making reload reg 361 for reg 208 optional
  264: r211:SF=r210:SF*r361:SF
      REG_DEAD r210:SF
      REG_DEAD r208:SF
    Inserting insn reload before:
  418: r361:SF=r208:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 418:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 265:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 266:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 273:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 274:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 279:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 281:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 284:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 286:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 289:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 291:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 292:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=362 from oldreg=215, assigning class SSE_REGS to r362
  292: r362:SF=float_trunc([frame:DI-0x68])
    Inserting insn reload after:
  419: r215:SF=r362:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 419:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 293:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=363, assigning class NO_REGS to secondary r363
  294: r363:DF=r335:DF
      REG_DEAD r335:DF
    Inserting the sec. move after:
  420: xmm0:DF=r363:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 420:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 298
	 Choosing alt 0 in insn 298:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=364 from oldreg=215, assigning class SSE_REGS to r364
      Making reload reg 364 for reg 215 optional
  298: r218:SF=r217:SF*r364:SF
      REG_DEAD r217:SF
      REG_DEAD r215:SF
    Inserting insn reload before:
  421: r364:SF=r215:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 421:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 299:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 302:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 303:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 304:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 305:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 306:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=365 from oldreg=223, assigning class SSE_REGS to r365
  306: r365:SF=float_trunc([frame:DI-0x68])
    Inserting insn reload after:
  422: r223:SF=r365:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 422:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 307:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=366, assigning class NO_REGS to secondary r366
  308: r366:DF=r338:DF
      REG_DEAD r338:DF
    Inserting the sec. move after:
  423: xmm0:DF=r366:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 423:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 312
	 Choosing alt 0 in insn 312:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=367 from oldreg=223, assigning class SSE_REGS to r367
      Making reload reg 367 for reg 223 optional
  312: r226:SF=r225:SF*r367:SF
      REG_DEAD r225:SF
      REG_DEAD r223:SF
    Inserting insn reload before:
  424: r367:SF=r223:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 424:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 313:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 318:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 320:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 321:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 323:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 326:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 327:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 329:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=368 from oldreg=230, assigning class SSE_REGS to r368
  329: r368:SF=float_trunc([frame:DI-0x60])
    Inserting insn reload after:
  425: r230:SF=r368:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 425:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 330:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=369, assigning class NO_REGS to secondary r369
  331: r369:DF=r345:DF
      REG_DEAD r345:DF
    Inserting the sec. move after:
  426: xmm0:DF=r369:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 426:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 335
	 Choosing alt 0 in insn 335:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=370 from oldreg=230, assigning class SSE_REGS to r370
      Making reload reg 370 for reg 230 optional
  335: r233:SF=r232:SF*r370:SF
      REG_DEAD r232:SF
      REG_DEAD r230:SF
    Inserting insn reload before:
  427: r370:SF=r230:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 427:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 336:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 339:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 340:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 342:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 343:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=371 from oldreg=238, assigning class SSE_REGS to r371
  343: r371:SF=float_trunc([frame:DI-0x60])
    Inserting insn reload after:
  428: r238:SF=r371:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 428:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 344:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=372, assigning class NO_REGS to secondary r372
  345: r372:DF=r348:DF
      REG_DEAD r348:DF
    Inserting the sec. move after:
  429: xmm0:DF=r372:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 429:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 349
	 Choosing alt 0 in insn 349:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=373 from oldreg=238, assigning class SSE_REGS to r373
      Making reload reg 373 for reg 238 optional
  349: r241:SF=r240:SF*r373:SF
      REG_DEAD r240:SF
      REG_DEAD r238:SF
    Inserting insn reload before:
  430: r373:SF=r238:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 430:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 350:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 353:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 354:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 355:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 356:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=374 from oldreg=245, assigning class SSE_REGS to r374
  356: r374:SF=float_trunc([frame:DI-0x58])
    Inserting insn reload after:
  431: r245:SF=r374:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 431:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 357:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=375, assigning class NO_REGS to secondary r375
  358: r375:DF=r351:DF
      REG_DEAD r351:DF
    Inserting the sec. move after:
  432: xmm0:DF=r375:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 432:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 362
	 Choosing alt 0 in insn 362:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=376 from oldreg=245, assigning class SSE_REGS to r376
      Making reload reg 376 for reg 245 optional
  362: r248:SF=r247:SF*r376:SF
      REG_DEAD r247:SF
      REG_DEAD r245:SF
    Inserting insn reload before:
  433: r376:SF=r245:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 433:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 363:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 367:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 369:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 370:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=377 from oldreg=253, assigning class SSE_REGS to r377
  370: r377:SF=float_trunc([frame:DI-0x58])
    Inserting insn reload after:
  434: r253:SF=r377:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 434:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=6,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 371:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=8,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=615,losers=2 -- refuse
            alt=21: Bad operand -- refuse
      Creating newreg=378, assigning class NO_REGS to secondary r378
  372: r378:DF=r354:DF
      REG_DEAD r354:DF
    Inserting the sec. move after:
  435: xmm0:DF=r378:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=621,losers=2 -- refuse
            alt=12: Bad operand -- refuse
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 435:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 376
	 Choosing alt 0 in insn 376:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=379 from oldreg=253, assigning class SSE_REGS to r379
      Making reload reg 379 for reg 253 optional
  376: r256:SF=r255:SF*r379:SF
      REG_DEAD r255:SF
      REG_DEAD r253:SF
    Inserting insn reload before:
  436: r379:SF=r253:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 436:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 377:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 380:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=380 from oldreg=208, assigning class SSE_REGS to inheritance r380
    Original reg change 208->380 (bb8):
  416: r380:SF=r359:SF
    Add original<-inheritance after:
  437: r208:SF=r380:SF

    Inheritance reuse change 208->380 (bb8):
  418: r361:SF=r380:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=381 from oldreg=200, assigning class SSE_REGS to inheritance r381
    Original reg change 200->381 (bb8):
  413: r381:SF=r356:SF
    Add original<-inheritance after:
  438: r200:SF=r381:SF

    Inheritance reuse change 200->381 (bb8):
  415: r358:SF=r381:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   437: r208:SF=r380:SF
deleting insn with uid = 437.
	    Removing dead insn:
   438: r200:SF=r381:SF
deleting insn with uid = 438.
EBB 9
EBB 10
EBB 11
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=382 from oldreg=223, assigning class SSE_REGS to inheritance r382
    Original reg change 223->382 (bb11):
  422: r382:SF=r365:SF
    Add original<-inheritance after:
  439: r223:SF=r382:SF

    Inheritance reuse change 223->382 (bb11):
  424: r367:SF=r382:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=383 from oldreg=215, assigning class SSE_REGS to inheritance r383
    Original reg change 215->383 (bb11):
  419: r383:SF=r362:SF
    Add original<-inheritance after:
  440: r215:SF=r383:SF

    Inheritance reuse change 215->383 (bb11):
  421: r364:SF=r383:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   439: r223:SF=r382:SF
deleting insn with uid = 439.
	    Removing dead insn:
   440: r215:SF=r383:SF
deleting insn with uid = 440.
EBB 12
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=384 from oldreg=253, assigning class SSE_REGS to inheritance r384
    Original reg change 253->384 (bb12):
  434: r384:SF=r377:SF
    Add original<-inheritance after:
  441: r253:SF=r384:SF

    Inheritance reuse change 253->384 (bb12):
  436: r379:SF=r384:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=385 from oldreg=245, assigning class SSE_REGS to inheritance r385
    Original reg change 245->385 (bb12):
  431: r385:SF=r374:SF
    Add original<-inheritance after:
  442: r245:SF=r385:SF

    Inheritance reuse change 245->385 (bb12):
  433: r376:SF=r385:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=386 from oldreg=238, assigning class SSE_REGS to inheritance r386
    Original reg change 238->386 (bb12):
  428: r386:SF=r371:SF
    Add original<-inheritance after:
  443: r238:SF=r386:SF

    Inheritance reuse change 238->386 (bb12):
  430: r373:SF=r386:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=387 from oldreg=230, assigning class SSE_REGS to inheritance r387
    Original reg change 230->387 (bb12):
  425: r387:SF=r368:SF
    Add original<-inheritance after:
  444: r230:SF=r387:SF

    Inheritance reuse change 230->387 (bb12):
  427: r370:SF=r387:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   441: r253:SF=r384:SF
deleting insn with uid = 441.
	    Removing dead insn:
   442: r245:SF=r385:SF
deleting insn with uid = 442.
	    Removing dead insn:
   443: r238:SF=r386:SF
deleting insn with uid = 443.
	    Removing dead insn:
   444: r230:SF=r387:SF
deleting insn with uid = 444.
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 394: point = 0
   Insn 393: point = 0
   Insn 389: point = 1
   Insn 386: point = 3
  BB 3
   Insn 40: point = 4
   Insn 39: point = 4
   Insn 38: point = 5
   Insn 37: point = 7
  BB 13
   Insn 410: point = 8
   Insn 380: point = 8
  BB 11
   Insn 408: point = 8
   Insn 313: point = 8
   Insn 312: point = 9
   Insn 424: point = 11
	   Creating copy r367<-r382@1
   Insn 311: point = 13
   Insn 310: point = 15
   Insn 309: point = 16
   Insn 423: point = 16
	Hard reg 21 is preferable by r366 with profit 1
   Insn 308: point = 17
	Hard reg 21 is preferable by r366 with profit 1
	Hard reg 0 is preferable by r366 with profit 1
   Insn 307: point = 19
   Insn 422: point = 20
	   Creating copy r365->r382@1
   Insn 306: point = 22
   Insn 305: point = 23
   Insn 304: point = 25
   Insn 303: point = 26
   Insn 302: point = 28
   Insn 301: point = 30
   Insn 300: point = 32
   Insn 299: point = 33
   Insn 298: point = 34
   Insn 421: point = 36
	   Creating copy r364<-r383@1
   Insn 297: point = 38
   Insn 296: point = 40
   Insn 295: point = 41
   Insn 420: point = 41
	Hard reg 21 is preferable by r363 with profit 1
   Insn 294: point = 42
	Hard reg 21 is preferable by r363 with profit 1
	Hard reg 0 is preferable by r363 with profit 1
   Insn 293: point = 44
   Insn 419: point = 45
	   Creating copy r362->r383@1
   Insn 292: point = 47
   Insn 291: point = 48
   Insn 290: point = 50
   Insn 289: point = 51
   Insn 288: point = 53
   Insn 287: point = 55
   Insn 286: point = 56
   Insn 285: point = 57
   Insn 284: point = 59
  BB 9
   Insn 406: point = 60
   Insn 274: point = 60
   Insn 273: point = 61
  BB 10
   Insn 281: point = 62
   Insn 280: point = 63
   Insn 279: point = 65
  BB 8
   Insn 268: point = 66
   Insn 267: point = 66
   Insn 266: point = 67
   Insn 265: point = 68
   Insn 264: point = 69
   Insn 418: point = 71
	   Creating copy r361<-r380@1
   Insn 263: point = 73
   Insn 262: point = 75
   Insn 261: point = 76
   Insn 417: point = 76
	Hard reg 21 is preferable by r360 with profit 1
   Insn 260: point = 77
	Hard reg 21 is preferable by r360 with profit 1
	Hard reg 0 is preferable by r360 with profit 1
   Insn 259: point = 79
   Insn 416: point = 80
	   Creating copy r359->r380@1
   Insn 258: point = 82
   Insn 257: point = 83
   Insn 256: point = 85
   Insn 255: point = 86
   Insn 254: point = 88
   Insn 253: point = 90
   Insn 252: point = 92
   Insn 251: point = 93
   Insn 250: point = 94
   Insn 415: point = 96
	   Creating copy r358<-r381@1
   Insn 249: point = 98
   Insn 248: point = 100
   Insn 247: point = 101
   Insn 414: point = 101
	Hard reg 21 is preferable by r357 with profit 1
   Insn 246: point = 102
	Hard reg 21 is preferable by r357 with profit 1
	Hard reg 0 is preferable by r357 with profit 1
   Insn 245: point = 104
   Insn 413: point = 105
	   Creating copy r356->r381@1
   Insn 244: point = 107
   Insn 243: point = 108
   Insn 242: point = 110
   Insn 241: point = 111
   Insn 240: point = 113
   Insn 239: point = 115
   Insn 238: point = 116
   Insn 237: point = 117
   Insn 236: point = 119
  BB 6
   Insn 403: point = 120
   Insn 226: point = 120
   Insn 225: point = 121
  BB 7
   Insn 233: point = 122
   Insn 232: point = 123
   Insn 231: point = 125
  BB 5
   Insn 220: point = 126
   Insn 219: point = 126
   Insn 218: point = 127
   Insn 217: point = 128
   Insn 216: point = 129
   Insn 215: point = 130
   Insn 214: point = 130
   Insn 213: point = 131
   Insn 212: point = 132
   Insn 211: point = 134
   Insn 210: point = 136
   Insn 209: point = 138
   Insn 208: point = 139
   Insn 207: point = 141
   Insn 206: point = 143
   Insn 205: point = 145
   Insn 204: point = 146
   Insn 203: point = 148
   Insn 202: point = 150
   Insn 201: point = 152
   Insn 200: point = 153
   Insn 199: point = 155
   Insn 198: point = 157
   Insn 197: point = 158
   Insn 196: point = 159
   Insn 195: point = 160
   Insn 194: point = 160
   Insn 193: point = 161
   Insn 192: point = 163
   Insn 191: point = 165
   Insn 190: point = 167
   Insn 189: point = 169
   Insn 188: point = 171
   Insn 187: point = 172
   Insn 186: point = 174
   Insn 185: point = 176
   Insn 184: point = 178
   Insn 183: point = 179
   Insn 182: point = 181
   Insn 181: point = 183
   Insn 180: point = 185
   Insn 179: point = 186
   Insn 178: point = 188
   Insn 177: point = 190
   Insn 176: point = 192
   Insn 175: point = 193
   Insn 174: point = 195
   Insn 173: point = 197
   Insn 172: point = 199
   Insn 171: point = 201
   Insn 170: point = 202
   Insn 169: point = 204
   Insn 168: point = 206
   Insn 167: point = 207
   Insn 166: point = 209
   Insn 165: point = 211
   Insn 164: point = 213
   Insn 163: point = 214
   Insn 162: point = 216
   Insn 161: point = 218
  BB 12
   Insn 377: point = 219
   Insn 376: point = 220
   Insn 436: point = 222
	   Creating copy r379<-r384@1
   Insn 375: point = 224
   Insn 374: point = 226
   Insn 373: point = 227
   Insn 435: point = 227
	Hard reg 21 is preferable by r378 with profit 1
   Insn 372: point = 228
	Hard reg 21 is preferable by r378 with profit 1
	Hard reg 0 is preferable by r378 with profit 1
   Insn 371: point = 230
   Insn 434: point = 231
	   Creating copy r377->r384@1
   Insn 370: point = 233
   Insn 369: point = 234
   Insn 368: point = 236
   Insn 367: point = 237
   Insn 366: point = 239
   Insn 365: point = 241
   Insn 364: point = 243
   Insn 363: point = 244
   Insn 362: point = 245
   Insn 433: point = 247
	   Creating copy r376<-r385@1
   Insn 361: point = 249
   Insn 360: point = 251
   Insn 359: point = 252
   Insn 432: point = 252
	Hard reg 21 is preferable by r375 with profit 1
   Insn 358: point = 253
	Hard reg 21 is preferable by r375 with profit 1
	Hard reg 0 is preferable by r375 with profit 1
   Insn 357: point = 255
   Insn 431: point = 256
	   Creating copy r374->r385@1
   Insn 356: point = 258
   Insn 355: point = 259
   Insn 354: point = 261
   Insn 353: point = 262
   Insn 352: point = 264
   Insn 351: point = 266
   Insn 350: point = 267
   Insn 349: point = 268
   Insn 430: point = 270
	   Creating copy r373<-r386@1
   Insn 348: point = 272
   Insn 347: point = 274
   Insn 346: point = 275
   Insn 429: point = 275
	Hard reg 21 is preferable by r372 with profit 1
   Insn 345: point = 276
	Hard reg 21 is preferable by r372 with profit 1
	Hard reg 0 is preferable by r372 with profit 1
   Insn 344: point = 278
   Insn 428: point = 279
	   Creating copy r371->r386@1
   Insn 343: point = 281
   Insn 342: point = 282
   Insn 341: point = 284
   Insn 340: point = 285
   Insn 339: point = 287
   Insn 338: point = 289
   Insn 337: point = 291
   Insn 336: point = 292
   Insn 335: point = 293
   Insn 427: point = 295
	   Creating copy r370<-r387@1
   Insn 334: point = 297
   Insn 333: point = 299
   Insn 332: point = 300
   Insn 426: point = 300
	Hard reg 21 is preferable by r369 with profit 1
   Insn 331: point = 301
	Hard reg 21 is preferable by r369 with profit 1
	Hard reg 0 is preferable by r369 with profit 1
   Insn 330: point = 303
   Insn 425: point = 304
	   Creating copy r368->r387@1
   Insn 329: point = 306
   Insn 328: point = 307
   Insn 327: point = 309
   Insn 326: point = 310
   Insn 325: point = 312
   Insn 324: point = 314
   Insn 323: point = 315
   Insn 322: point = 316
   Insn 321: point = 318
   Insn 320: point = 319
   Insn 319: point = 320
   Insn 318: point = 322
  BB 4
   Insn 159: point = 323
   Insn 158: point = 323
   Insn 157: point = 324
   Insn 156: point = 326
   Insn 155: point = 327
   Insn 154: point = 328
   Insn 153: point = 329
   Insn 152: point = 329
   Insn 151: point = 330
   Insn 150: point = 331
   Insn 149: point = 333
   Insn 148: point = 335
   Insn 147: point = 337
   Insn 146: point = 338
   Insn 145: point = 340
   Insn 144: point = 342
   Insn 143: point = 344
   Insn 142: point = 345
   Insn 141: point = 347
   Insn 140: point = 349
   Insn 139: point = 351
   Insn 138: point = 352
   Insn 137: point = 354
   Insn 136: point = 356
   Insn 135: point = 357
   Insn 134: point = 358
   Insn 133: point = 359
   Insn 132: point = 359
   Insn 131: point = 360
   Insn 130: point = 362
   Insn 129: point = 364
   Insn 128: point = 366
   Insn 127: point = 368
   Insn 126: point = 370
   Insn 125: point = 371
   Insn 124: point = 373
   Insn 123: point = 375
   Insn 122: point = 377
   Insn 121: point = 378
   Insn 120: point = 380
   Insn 119: point = 382
   Insn 118: point = 384
   Insn 117: point = 385
   Insn 116: point = 387
   Insn 115: point = 389
   Insn 114: point = 391
   Insn 113: point = 392
   Insn 112: point = 394
   Insn 111: point = 396
   Insn 110: point = 398
   Insn 109: point = 400
   Insn 108: point = 401
   Insn 107: point = 403
   Insn 106: point = 405
   Insn 105: point = 406
   Insn 104: point = 408
   Insn 103: point = 410
   Insn 102: point = 412
   Insn 101: point = 413
   Insn 100: point = 415
   Insn 99: point = 417
   Insn 98: point = 418
   Insn 97: point = 419
   Insn 96: point = 420
   Insn 95: point = 420
   Insn 94: point = 421
   Insn 93: point = 422
   Insn 92: point = 424
   Insn 91: point = 426
   Insn 90: point = 428
   Insn 89: point = 429
   Insn 88: point = 431
   Insn 87: point = 433
   Insn 86: point = 435
   Insn 85: point = 436
   Insn 84: point = 438
   Insn 83: point = 440
   Insn 82: point = 442
   Insn 81: point = 443
   Insn 80: point = 445
   Insn 79: point = 447
   Insn 78: point = 448
   Insn 77: point = 449
   Insn 76: point = 450
   Insn 75: point = 450
   Insn 74: point = 451
   Insn 73: point = 453
   Insn 72: point = 455
   Insn 71: point = 457
   Insn 70: point = 459
   Insn 69: point = 461
   Insn 68: point = 462
   Insn 67: point = 464
   Insn 66: point = 466
   Insn 65: point = 468
   Insn 64: point = 469
   Insn 63: point = 471
   Insn 62: point = 473
   Insn 61: point = 475
   Insn 60: point = 476
   Insn 59: point = 478
   Insn 58: point = 480
   Insn 57: point = 482
   Insn 56: point = 483
   Insn 55: point = 485
   Insn 54: point = 487
   Insn 53: point = 489
   Insn 52: point = 491
   Insn 51: point = 492
   Insn 50: point = 494
   Insn 49: point = 496
   Insn 48: point = 497
   Insn 47: point = 499
   Insn 46: point = 501
   Insn 45: point = 503
   Insn 44: point = 504
   Insn 43: point = 506
   Insn 42: point = 508
  BB 2
   Insn 35: point = 509
   Insn 34: point = 509
   Insn 33: point = 510
   Insn 32: point = 511
   Insn 31: point = 512
   Insn 30: point = 513
   Insn 29: point = 514
   Insn 28: point = 515
   Insn 27: point = 516
   Insn 26: point = 517
   Insn 25: point = 518
   Insn 24: point = 519
   Insn 23: point = 520
   Insn 22: point = 521
   Insn 21: point = 522
   Insn 20: point = 523
   Insn 19: point = 524
   Insn 18: point = 525
   Insn 17: point = 526
   Insn 16: point = 527
   Insn 15: point = 528
   Insn 14: point = 529
   Insn 13: point = 530
   Insn 12: point = 531
   Insn 11: point = 532
   Insn 10: point = 533
   Insn 6: point = 533
   Insn 5: point = 533
   Insn 4: point = 533
   Insn 3: point = 533
   Insn 2: point = 533
 r87: [4..5]
 r88: [505..506]
 r89: [502..504]
 r90: [500..501]
 r91: [498..499]
 r92: [484..497]
 r93: [493..494]
 r94: [490..492]
 r95: [488..489]
 r96: [486..487]
 r97: [484..485]
 r98: [452..483]
 r99: [479..480]
 r100: [477..478]
 r101: [474..476]
 r102: [472..473]
 r103: [470..471]
 r104: [454..469]
 r105: [465..466]
 r106: [463..464]
 r107: [460..462]
 r108: [458..459]
 r109: [456..457]
 r110: [454..455]
 r111: [452..453]
 r112: [450..451]
 r113: [444..445]
 r114: [441..443]
 r115: [439..440]
 r116: [437..438]
 r117: [421..436]
 r118: [432..433]
 r119: [430..431]
 r120: [427..429]
 r121: [425..426]
 r122: [423..424]
 r123: [420..422]
 r124: [414..415]
 r125: [411..413]
 r126: [409..410]
 r127: [407..408]
 r128: [393..406]
 r129: [402..403]
 r130: [399..401]
 r131: [397..398]
 r132: [395..396]
 r133: [393..394]
 r134: [361..392]
 r135: [388..389]
 r136: [386..387]
 r137: [383..385]
 r138: [381..382]
 r139: [379..380]
 r140: [363..378]
 r141: [374..375]
 r142: [372..373]
 r143: [369..371]
 r144: [367..368]
 r145: [365..366]
 r146: [363..364]
 r147: [361..362]
 r148: [359..360]
 r149: [353..354]
 r150: [350..352]
 r151: [348..349]
 r152: [346..347]
 r153: [330..345]
 r154: [341..342]
 r155: [339..340]
 r156: [336..338]
 r157: [334..335]
 r158: [332..333]
 r159: [329..331]
 r160: [323..324]
 r161: [215..216]
 r162: [212..214]
 r163: [210..211]
 r164: [208..209]
 r165: [194..207]
 r166: [203..204]
 r167: [200..202]
 r168: [198..199]
 r169: [196..197]
 r170: [194..195]
 r171: [162..193]
 r172: [189..190]
 r173: [187..188]
 r174: [184..186]
 r175: [182..183]
 r176: [180..181]
 r177: [164..179]
 r178: [175..176]
 r179: [173..174]
 r180: [170..172]
 r181: [168..169]
 r182: [166..167]
 r183: [164..165]
 r184: [162..163]
 r185: [160..161]
 r186: [154..155]
 r187: [151..153]
 r188: [149..150]
 r189: [147..148]
 r190: [131..146]
 r191: [142..143]
 r192: [140..141]
 r193: [137..139]
 r194: [135..136]
 r195: [133..134]
 r196: [130..132]
 r197: [112..113]
 r198: [109..111]
 r199: [93..108]
 r201: [99..100]
 r202: [95..98]
 r203: [93..94]
 r204: [89..90]
 r205: [87..88]
 r206: [84..86]
 r207: [68..83]
 r209: [74..75]
 r210: [70..73]
 r211: [68..69]
 r212: [52..53]
 r213: [49..51]
 r214: [33..48]
 r216: [39..40]
 r217: [35..38]
 r218: [33..34]
 r219: [29..30]
 r220: [27..28]
 r221: [24..26]
 r222: [8..23]
 r224: [14..15]
 r225: [10..13]
 r226: [8..9]
 r227: [311..312]
 r228: [308..310]
 r229: [292..307]
 r231: [298..299]
 r232: [294..297]
 r233: [292..293]
 r234: [288..289]
 r235: [286..287]
 r236: [283..285]
 r237: [267..282]
 r239: [273..274]
 r240: [269..272]
 r241: [267..268]
 r242: [263..264]
 r243: [260..262]
 r244: [244..259]
 r246: [250..251]
 r247: [246..249]
 r248: [244..245]
 r249: [240..241]
 r250: [238..239]
 r251: [235..237]
 r252: [219..234]
 r254: [225..226]
 r255: [221..224]
 r256: [219..220]
 r257: [2..3]
 r258: [0..1]
 r259: [531..532]
 r260: [529..530]
 r261: [527..528]
 r262: [525..526]
 r263: [523..524]
 r264: [521..522]
 r265: [519..520]
 r266: [517..518]
 r267: [515..516]
 r268: [513..514]
 r269: [511..512]
 r270: [509..510]
 r271: [6..7]
 r272: [507..508]
 r273: [502..503]
 r274: [495..496]
 r275: [490..491]
 r276: [481..482]
 r277: [474..475]
 r278: [467..468]
 r279: [460..461]
 r280: [448..449]
 r281: [446..447]
 r282: [441..442]
 r283: [434..435]
 r284: [427..428]
 r285: [418..419]
 r286: [416..417]
 r287: [411..412]
 r288: [404..405]
 r289: [399..400]
 r290: [390..391]
 r291: [383..384]
 r292: [376..377]
 r293: [369..370]
 r294: [357..358]
 r295: [355..356]
 r296: [350..351]
 r297: [343..344]
 r298: [336..337]
 r299: [327..328]
 r300: [325..326]
 r301: [217..218]
 r302: [212..213]
 r303: [205..206]
 r304: [200..201]
 r305: [191..192]
 r306: [184..185]
 r307: [177..178]
 r308: [170..171]
 r309: [158..159]
 r310: [156..157]
 r311: [151..152]
 r312: [144..145]
 r313: [137..138]
 r314: [128..129]
 r315: [126..127]
 r316: [120..121]
 r317: [122..123]
 r318: [124..125]
 r319: [116..117]
 r320: [118..119]
 r321: [114..115]
 r322: [109..110]
 r323: [103..104]
 r324: [91..92]
 r325: [84..85]
 r326: [78..79]
 r327: [66..67]
 r328: [60..61]
 r329: [62..63]
 r330: [64..65]
 r331: [56..57]
 r332: [58..59]
 r333: [54..55]
 r334: [49..50]
 r335: [43..44]
 r336: [31..32]
 r337: [24..25]
 r338: [18..19]
 r339: [319..320]
 r340: [321..322]
 r341: [315..316]
 r342: [317..318]
 r343: [313..314]
 r344: [308..309]
 r345: [302..303]
 r346: [290..291]
 r347: [283..284]
 r348: [277..278]
 r349: [265..266]
 r350: [260..261]
 r351: [254..255]
 r352: [242..243]
 r353: [235..236]
 r354: [229..230]
 r356: [106..107]
 r357: [101..102]
 r358: [95..96]
 r359: [81..82]
 r360: [76..77]
 r361: [70..71]
 r362: [46..47]
 r363: [41..42]
 r364: [35..36]
 r365: [21..22]
 r366: [16..17]
 r367: [10..11]
 r368: [305..306]
 r369: [300..301]
 r370: [294..295]
 r371: [280..281]
 r372: [275..276]
 r373: [269..270]
 r374: [257..258]
 r375: [252..253]
 r376: [246..247]
 r377: [232..233]
 r378: [227..228]
 r379: [221..222]
 r380: [72..80]
 r381: [97..105]
 r382: [12..20]
 r383: [37..45]
 r384: [223..231]
 r385: [248..256]
 r386: [271..279]
 r387: [296..304]
Compressing live ranges: from 533 to 476 - 89%
Ranges after the compression:
 r87: [4..5]
 r88: [448..449]
 r89: [446..447]
 r90: [444..445]
 r91: [442..443]
 r92: [430..441]
 r93: [438..439]
 r94: [436..437]
 r95: [434..435]
 r96: [432..433]
 r97: [430..431]
 r98: [402..429]
 r99: [426..427]
 r100: [424..425]
 r101: [422..423]
 r102: [420..421]
 r103: [418..419]
 r104: [404..417]
 r105: [414..415]
 r106: [412..413]
 r107: [410..411]
 r108: [408..409]
 r109: [406..407]
 r110: [404..405]
 r111: [402..403]
 r112: [400..401]
 r113: [394..395]
 r114: [392..393]
 r115: [390..391]
 r116: [388..389]
 r117: [374..387]
 r118: [384..385]
 r119: [382..383]
 r120: [380..381]
 r121: [378..379]
 r122: [376..377]
 r123: [374..375]
 r124: [368..369]
 r125: [366..367]
 r126: [364..365]
 r127: [362..363]
 r128: [350..361]
 r129: [358..359]
 r130: [356..357]
 r131: [354..355]
 r132: [352..353]
 r133: [350..351]
 r134: [322..349]
 r135: [346..347]
 r136: [344..345]
 r137: [342..343]
 r138: [340..341]
 r139: [338..339]
 r140: [324..337]
 r141: [334..335]
 r142: [332..333]
 r143: [330..331]
 r144: [328..329]
 r145: [326..327]
 r146: [324..325]
 r147: [322..323]
 r148: [320..321]
 r149: [314..315]
 r150: [312..313]
 r151: [310..311]
 r152: [308..309]
 r153: [294..307]
 r154: [304..305]
 r155: [302..303]
 r156: [300..301]
 r157: [298..299]
 r158: [296..297]
 r159: [294..295]
 r160: [288..289]
 r161: [192..193]
 r162: [190..191]
 r163: [188..189]
 r164: [186..187]
 r165: [174..185]
 r166: [182..183]
 r167: [180..181]
 r168: [178..179]
 r169: [176..177]
 r170: [174..175]
 r171: [146..173]
 r172: [170..171]
 r173: [168..169]
 r174: [166..167]
 r175: [164..165]
 r176: [162..163]
 r177: [148..161]
 r178: [158..159]
 r179: [156..157]
 r180: [154..155]
 r181: [152..153]
 r182: [150..151]
 r183: [148..149]
 r184: [146..147]
 r185: [144..145]
 r186: [138..139]
 r187: [136..137]
 r188: [134..135]
 r189: [132..133]
 r190: [118..131]
 r191: [128..129]
 r192: [126..127]
 r193: [124..125]
 r194: [122..123]
 r195: [120..121]
 r196: [118..119]
 r197: [100..101]
 r198: [98..99]
 r199: [84..97]
 r201: [90..91]
 r202: [86..89]
 r203: [84..85]
 r204: [80..81]
 r205: [78..79]
 r206: [76..77]
 r207: [62..75]
 r209: [68..69]
 r210: [64..67]
 r211: [62..63]
 r212: [46..47]
 r213: [44..45]
 r214: [30..43]
 r216: [36..37]
 r217: [32..35]
 r218: [30..31]
 r219: [26..27]
 r220: [24..25]
 r221: [22..23]
 r222: [8..21]
 r224: [14..15]
 r225: [10..13]
 r226: [8..9]
 r227: [276..277]
 r228: [274..275]
 r229: [260..273]
 r231: [266..267]
 r232: [262..265]
 r233: [260..261]
 r234: [256..257]
 r235: [254..255]
 r236: [252..253]
 r237: [238..251]
 r239: [244..245]
 r240: [240..243]
 r241: [238..239]
 r242: [234..235]
 r243: [232..233]
 r244: [218..231]
 r246: [224..225]
 r247: [220..223]
 r248: [218..219]
 r249: [214..215]
 r250: [212..213]
 r251: [210..211]
 r252: [196..209]
 r254: [202..203]
 r255: [198..201]
 r256: [196..197]
 r257: [2..3]
 r258: [0..1]
 r259: [474..475]
 r260: [472..473]
 r261: [470..471]
 r262: [468..469]
 r263: [466..467]
 r264: [464..465]
 r265: [462..463]
 r266: [460..461]
 r267: [458..459]
 r268: [456..457]
 r269: [454..455]
 r270: [452..453]
 r271: [6..7]
 r272: [450..451]
 r273: [446..447]
 r274: [440..441]
 r275: [436..437]
 r276: [428..429]
 r277: [422..423]
 r278: [416..417]
 r279: [410..411]
 r280: [398..399]
 r281: [396..397]
 r282: [392..393]
 r283: [386..387]
 r284: [380..381]
 r285: [372..373]
 r286: [370..371]
 r287: [366..367]
 r288: [360..361]
 r289: [356..357]
 r290: [348..349]
 r291: [342..343]
 r292: [336..337]
 r293: [330..331]
 r294: [318..319]
 r295: [316..317]
 r296: [312..313]
 r297: [306..307]
 r298: [300..301]
 r299: [292..293]
 r300: [290..291]
 r301: [194..195]
 r302: [190..191]
 r303: [184..185]
 r304: [180..181]
 r305: [172..173]
 r306: [166..167]
 r307: [160..161]
 r308: [154..155]
 r309: [142..143]
 r310: [140..141]
 r311: [136..137]
 r312: [130..131]
 r313: [124..125]
 r314: [116..117]
 r315: [114..115]
 r316: [108..109]
 r317: [110..111]
 r318: [112..113]
 r319: [104..105]
 r320: [106..107]
 r321: [102..103]
 r322: [98..99]
 r323: [94..95]
 r324: [82..83]
 r325: [76..77]
 r326: [72..73]
 r327: [60..61]
 r328: [54..55]
 r329: [56..57]
 r330: [58..59]
 r331: [50..51]
 r332: [52..53]
 r333: [48..49]
 r334: [44..45]
 r335: [40..41]
 r336: [28..29]
 r337: [22..23]
 r338: [18..19]
 r339: [284..285]
 r340: [286..287]
 r341: [280..281]
 r342: [282..283]
 r343: [278..279]
 r344: [274..275]
 r345: [270..271]
 r346: [258..259]
 r347: [252..253]
 r348: [248..249]
 r349: [236..237]
 r350: [232..233]
 r351: [228..229]
 r352: [216..217]
 r353: [210..211]
 r354: [206..207]
 r356: [96..97]
 r357: [92..93]
 r358: [86..87]
 r359: [74..75]
 r360: [70..71]
 r361: [64..65]
 r362: [42..43]
 r363: [38..39]
 r364: [32..33]
 r365: [20..21]
 r366: [16..17]
 r367: [10..11]
 r368: [272..273]
 r369: [268..269]
 r370: [262..263]
 r371: [250..251]
 r372: [246..247]
 r373: [240..241]
 r374: [230..231]
 r375: [226..227]
 r376: [220..221]
 r377: [208..209]
 r378: [204..205]
 r379: [198..199]
 r380: [66..73]
 r381: [88..95]
 r382: [12..19]
 r383: [34..41]
 r384: [200..207]
 r385: [222..229]
 r386: [242..249]
 r387: [264..271]

********** Assignment #1: **********

	 Assigning to 356 (cl=SSE_REGS, orig=200, freq=2, tfirst=356, tfreq=2)...
	   Assign 24 to reload r356 (freq=2)
	Hard reg 24 is preferable by r381 with profit 1
	Hard reg 24 is preferable by r358 with profit 1
	 Assigning to 358 (cl=SSE_REGS, orig=200, freq=2, tfirst=356, tfreq=2)...
	   Assign 24 to optional reload r358 (freq=2)
	Hard reg 24 is preferable by r381 with profit 2
	 Assigning to 381 (cl=SSE_REGS, orig=200, freq=2, tfirst=356, tfreq=2)...
	 Assigning to 359 (cl=SSE_REGS, orig=208, freq=2, tfirst=359, tfreq=2)...
	   Assign 25 to reload r359 (freq=2)
	Hard reg 25 is preferable by r380 with profit 1
	Hard reg 25 is preferable by r361 with profit 1
	 Assigning to 361 (cl=SSE_REGS, orig=208, freq=2, tfirst=359, tfreq=2)...
	   Assign 25 to optional reload r361 (freq=2)
	Hard reg 25 is preferable by r380 with profit 2
	 Assigning to 380 (cl=SSE_REGS, orig=208, freq=2, tfirst=359, tfreq=2)...
	 Assigning to 362 (cl=SSE_REGS, orig=215, freq=2, tfirst=362, tfreq=2)...
	   Assign 26 to reload r362 (freq=2)
	Hard reg 26 is preferable by r383 with profit 1
	Hard reg 26 is preferable by r364 with profit 1
	 Assigning to 364 (cl=SSE_REGS, orig=215, freq=2, tfirst=362, tfreq=2)...
	   Assign 26 to optional reload r364 (freq=2)
	Hard reg 26 is preferable by r383 with profit 2
	 Assigning to 383 (cl=SSE_REGS, orig=215, freq=2, tfirst=362, tfreq=2)...
	 Assigning to 365 (cl=SSE_REGS, orig=223, freq=2, tfirst=365, tfreq=2)...
	   Assign 27 to reload r365 (freq=2)
	Hard reg 27 is preferable by r382 with profit 1
	Hard reg 27 is preferable by r367 with profit 1
	 Assigning to 367 (cl=SSE_REGS, orig=223, freq=2, tfirst=365, tfreq=2)...
	   Assign 27 to optional reload r367 (freq=2)
	Hard reg 27 is preferable by r382 with profit 2
	 Assigning to 382 (cl=SSE_REGS, orig=223, freq=2, tfirst=365, tfreq=2)...
	 Assigning to 368 (cl=SSE_REGS, orig=230, freq=2, tfirst=368, tfreq=2)...
	   Assign 28 to reload r368 (freq=2)
	Hard reg 28 is preferable by r387 with profit 1
	Hard reg 28 is preferable by r370 with profit 1
	 Assigning to 370 (cl=SSE_REGS, orig=230, freq=2, tfirst=368, tfreq=2)...
	   Assign 28 to optional reload r370 (freq=2)
	Hard reg 28 is preferable by r387 with profit 2
	 Assigning to 387 (cl=SSE_REGS, orig=230, freq=2, tfirst=368, tfreq=2)...
	 Assigning to 371 (cl=SSE_REGS, orig=238, freq=2, tfirst=371, tfreq=2)...
	   Assign 24 to reload r371 (freq=2)
	Hard reg 24 is preferable by r386 with profit 1
	Hard reg 24 is preferable by r373 with profit 1
	 Assigning to 373 (cl=SSE_REGS, orig=238, freq=2, tfirst=371, tfreq=2)...
	   Assign 24 to optional reload r373 (freq=2)
	Hard reg 24 is preferable by r386 with profit 2
	 Assigning to 386 (cl=SSE_REGS, orig=238, freq=2, tfirst=371, tfreq=2)...
	 Assigning to 374 (cl=SSE_REGS, orig=245, freq=2, tfirst=374, tfreq=2)...
	   Assign 25 to reload r374 (freq=2)
	Hard reg 25 is preferable by r385 with profit 1
	Hard reg 25 is preferable by r376 with profit 1
	 Assigning to 376 (cl=SSE_REGS, orig=245, freq=2, tfirst=374, tfreq=2)...
	   Assign 25 to optional reload r376 (freq=2)
	Hard reg 25 is preferable by r385 with profit 2
	 Assigning to 385 (cl=SSE_REGS, orig=245, freq=2, tfirst=374, tfreq=2)...
	 Assigning to 377 (cl=SSE_REGS, orig=253, freq=2, tfirst=377, tfreq=2)...
	   Assign 26 to reload r377 (freq=2)
	Hard reg 26 is preferable by r384 with profit 1
	Hard reg 26 is preferable by r379 with profit 1
	 Assigning to 379 (cl=SSE_REGS, orig=253, freq=2, tfirst=377, tfreq=2)...
	   Assign 26 to optional reload r379 (freq=2)
	Hard reg 26 is preferable by r384 with profit 2
	 Assigning to 384 (cl=SSE_REGS, orig=253, freq=2, tfirst=377, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  418: r361:SF=r208:SF
      REG_DEAD r208:SF
   Insn after restoring regs:
  416: r208:SF=r359:SF
      REG_DEAD r359:SF
   Insn after restoring regs:
  415: r358:SF=r200:SF
      REG_DEAD r200:SF
   Insn after restoring regs:
  413: r200:SF=r356:SF
      REG_DEAD r356:SF
   Insn after restoring regs:
  424: r367:SF=r223:SF
      REG_DEAD r223:SF
   Insn after restoring regs:
  422: r223:SF=r365:SF
      REG_DEAD r365:SF
   Insn after restoring regs:
  421: r364:SF=r215:SF
      REG_DEAD r215:SF
   Insn after restoring regs:
  419: r215:SF=r362:SF
      REG_DEAD r362:SF
   Insn after restoring regs:
  436: r379:SF=r253:SF
      REG_DEAD r253:SF
   Insn after restoring regs:
  434: r253:SF=r377:SF
      REG_DEAD r377:SF
   Insn after restoring regs:
  433: r376:SF=r245:SF
      REG_DEAD r245:SF
   Insn after restoring regs:
  431: r245:SF=r374:SF
      REG_DEAD r374:SF
   Insn after restoring regs:
  430: r373:SF=r238:SF
      REG_DEAD r238:SF
   Insn after restoring regs:
  428: r238:SF=r371:SF
      REG_DEAD r371:SF
   Insn after restoring regs:
  427: r370:SF=r230:SF
      REG_DEAD r230:SF
   Insn after restoring regs:
  425: r230:SF=r368:SF
      REG_DEAD r368:SF
Remove optional reload reg 358
  Restoring original insn:
  250: r203:SF=r202:SF*r200:SF
      REG_DEAD r200:SF
      REG_DEAD r202:SF
  Deleting move 415
  415: r358:SF=r200:SF
      REG_DEAD r200:SF
deleting insn with uid = 415.
Remove optional reload reg 361
  Restoring original insn:
  264: r211:SF=r210:SF*r208:SF
      REG_DEAD r208:SF
      REG_DEAD r210:SF
  Deleting move 418
  418: r361:SF=r208:SF
      REG_DEAD r208:SF
deleting insn with uid = 418.
Remove optional reload reg 364
  Restoring original insn:
  298: r218:SF=r217:SF*r215:SF
      REG_DEAD r215:SF
      REG_DEAD r217:SF
  Deleting move 421
  421: r364:SF=r215:SF
      REG_DEAD r215:SF
deleting insn with uid = 421.
Remove optional reload reg 367
  Restoring original insn:
  312: r226:SF=r225:SF*r223:SF
      REG_DEAD r223:SF
      REG_DEAD r225:SF
  Deleting move 424
  424: r367:SF=r223:SF
      REG_DEAD r223:SF
deleting insn with uid = 424.
Remove optional reload reg 370
  Restoring original insn:
  335: r233:SF=r232:SF*r230:SF
      REG_DEAD r230:SF
      REG_DEAD r232:SF
  Deleting move 427
  427: r370:SF=r230:SF
      REG_DEAD r230:SF
deleting insn with uid = 427.
Remove optional reload reg 373
  Restoring original insn:
  349: r241:SF=r240:SF*r238:SF
      REG_DEAD r238:SF
      REG_DEAD r240:SF
  Deleting move 430
  430: r373:SF=r238:SF
      REG_DEAD r238:SF
deleting insn with uid = 430.
Remove optional reload reg 376
  Restoring original insn:
  362: r248:SF=r247:SF*r245:SF
      REG_DEAD r245:SF
      REG_DEAD r247:SF
  Deleting move 433
  433: r376:SF=r245:SF
      REG_DEAD r245:SF
deleting insn with uid = 433.
Remove optional reload reg 379
  Restoring original insn:
  376: r256:SF=r255:SF*r253:SF
      REG_DEAD r253:SF
      REG_DEAD r255:SF
  Deleting move 436
  436: r379:SF=r253:SF
      REG_DEAD r253:SF
deleting insn with uid = 436.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 376:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=388 from oldreg=253, assigning class SSE_REGS to r388
      Making reload reg 388 for reg 253 optional
  376: r256:SF=r255:SF*r388:SF
      REG_DEAD r253:SF
      REG_DEAD r255:SF
    Inserting insn reload before:
  445: r388:SF=r253:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 445:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 362:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=389 from oldreg=245, assigning class SSE_REGS to r389
      Making reload reg 389 for reg 245 optional
  362: r248:SF=r247:SF*r389:SF
      REG_DEAD r245:SF
      REG_DEAD r247:SF
    Inserting insn reload before:
  446: r389:SF=r245:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 446:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 349:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=390 from oldreg=238, assigning class SSE_REGS to r390
      Making reload reg 390 for reg 238 optional
  349: r241:SF=r240:SF*r390:SF
      REG_DEAD r238:SF
      REG_DEAD r240:SF
    Inserting insn reload before:
  447: r390:SF=r238:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 447:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 335:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=391 from oldreg=230, assigning class SSE_REGS to r391
      Making reload reg 391 for reg 230 optional
  335: r233:SF=r232:SF*r391:SF
      REG_DEAD r230:SF
      REG_DEAD r232:SF
    Inserting insn reload before:
  448: r391:SF=r230:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 448:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 312:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=392 from oldreg=223, assigning class SSE_REGS to r392
      Making reload reg 392 for reg 223 optional
  312: r226:SF=r225:SF*r392:SF
      REG_DEAD r223:SF
      REG_DEAD r225:SF
    Inserting insn reload before:
  449: r392:SF=r223:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 449:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 298:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=393 from oldreg=215, assigning class SSE_REGS to r393
      Making reload reg 393 for reg 215 optional
  298: r218:SF=r217:SF*r393:SF
      REG_DEAD r215:SF
      REG_DEAD r217:SF
    Inserting insn reload before:
  450: r393:SF=r215:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 450:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 264:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=394 from oldreg=208, assigning class SSE_REGS to r394
      Making reload reg 394 for reg 208 optional
  264: r211:SF=r210:SF*r394:SF
      REG_DEAD r208:SF
      REG_DEAD r210:SF
    Inserting insn reload before:
  451: r394:SF=r208:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 451:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 250:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=395 from oldreg=200, assigning class SSE_REGS to r395
      Making reload reg 395 for reg 200 optional
  250: r203:SF=r202:SF*r395:SF
      REG_DEAD r200:SF
      REG_DEAD r202:SF
    Inserting insn reload before:
  452: r395:SF=r200:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 452:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=396 from oldreg=208, assigning class SSE_REGS to inheritance r396
    Original reg change 208->396 (bb8):
  416: r396:SF=r359:SF
      REG_DEAD r359:SF
    Add original<-inheritance after:
  453: r208:SF=r396:SF

    Inheritance reuse change 208->396 (bb8):
  451: r394:SF=r396:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=397 from oldreg=200, assigning class SSE_REGS to inheritance r397
    Original reg change 200->397 (bb8):
  413: r397:SF=r356:SF
      REG_DEAD r356:SF
    Add original<-inheritance after:
  454: r200:SF=r397:SF

    Inheritance reuse change 200->397 (bb8):
  452: r395:SF=r397:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   453: r208:SF=r396:SF
deleting insn with uid = 453.
	    Removing dead insn:
   454: r200:SF=r397:SF
deleting insn with uid = 454.
EBB 9
EBB 10
EBB 11
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=398 from oldreg=223, assigning class SSE_REGS to inheritance r398
    Original reg change 223->398 (bb11):
  422: r398:SF=r365:SF
      REG_DEAD r365:SF
    Add original<-inheritance after:
  455: r223:SF=r398:SF

    Inheritance reuse change 223->398 (bb11):
  449: r392:SF=r398:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=399 from oldreg=215, assigning class SSE_REGS to inheritance r399
    Original reg change 215->399 (bb11):
  419: r399:SF=r362:SF
      REG_DEAD r362:SF
    Add original<-inheritance after:
  456: r215:SF=r399:SF

    Inheritance reuse change 215->399 (bb11):
  450: r393:SF=r399:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   455: r223:SF=r398:SF
deleting insn with uid = 455.
	    Removing dead insn:
   456: r215:SF=r399:SF
deleting insn with uid = 456.
EBB 12
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=400 from oldreg=253, assigning class SSE_REGS to inheritance r400
    Original reg change 253->400 (bb12):
  434: r400:SF=r377:SF
      REG_DEAD r377:SF
    Add original<-inheritance after:
  457: r253:SF=r400:SF

    Inheritance reuse change 253->400 (bb12):
  445: r388:SF=r400:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=401 from oldreg=245, assigning class SSE_REGS to inheritance r401
    Original reg change 245->401 (bb12):
  431: r401:SF=r374:SF
      REG_DEAD r374:SF
    Add original<-inheritance after:
  458: r245:SF=r401:SF

    Inheritance reuse change 245->401 (bb12):
  446: r389:SF=r401:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=402 from oldreg=238, assigning class SSE_REGS to inheritance r402
    Original reg change 238->402 (bb12):
  428: r402:SF=r371:SF
      REG_DEAD r371:SF
    Add original<-inheritance after:
  459: r238:SF=r402:SF

    Inheritance reuse change 238->402 (bb12):
  447: r390:SF=r402:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=403 from oldreg=230, assigning class SSE_REGS to inheritance r403
    Original reg change 230->403 (bb12):
  425: r403:SF=r368:SF
      REG_DEAD r368:SF
    Add original<-inheritance after:
  460: r230:SF=r403:SF

    Inheritance reuse change 230->403 (bb12):
  448: r391:SF=r403:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   457: r253:SF=r400:SF
deleting insn with uid = 457.
	    Removing dead insn:
   458: r245:SF=r401:SF
deleting insn with uid = 458.
	    Removing dead insn:
   459: r238:SF=r402:SF
deleting insn with uid = 459.
	    Removing dead insn:
   460: r230:SF=r403:SF
deleting insn with uid = 460.
EBB 13
EBB 14

********** Pseudo live ranges #2: **********

  BB 14
   Insn 394: point = 0
   Insn 393: point = 0
   Insn 389: point = 1
   Insn 386: point = 3
  BB 3
   Insn 40: point = 4
   Insn 39: point = 4
   Insn 38: point = 5
   Insn 37: point = 7
  BB 13
   Insn 410: point = 8
   Insn 380: point = 8
  BB 11
   Insn 408: point = 8
   Insn 313: point = 8
   Insn 312: point = 9
   Insn 449: point = 11
	   Creating copy r392<-r398@1
   Insn 311: point = 13
   Insn 310: point = 15
   Insn 309: point = 16
   Insn 423: point = 16
	Hard reg 21 is preferable by r366 with profit 1
   Insn 308: point = 17
	Hard reg 21 is preferable by r366 with profit 1
	Hard reg 0 is preferable by r366 with profit 1
   Insn 307: point = 19
   Insn 422: point = 20
	   Creating copy r365->r398@1
   Insn 306: point = 22
   Insn 305: point = 23
   Insn 304: point = 25
   Insn 303: point = 26
   Insn 302: point = 28
   Insn 301: point = 30
   Insn 300: point = 32
   Insn 299: point = 33
   Insn 298: point = 34
   Insn 450: point = 36
	   Creating copy r393<-r399@1
   Insn 297: point = 38
   Insn 296: point = 40
   Insn 295: point = 41
   Insn 420: point = 41
	Hard reg 21 is preferable by r363 with profit 1
   Insn 294: point = 42
	Hard reg 21 is preferable by r363 with profit 1
	Hard reg 0 is preferable by r363 with profit 1
   Insn 293: point = 44
   Insn 419: point = 45
	   Creating copy r362->r399@1
   Insn 292: point = 47
   Insn 291: point = 48
   Insn 290: point = 50
   Insn 289: point = 51
   Insn 288: point = 53
   Insn 287: point = 55
   Insn 286: point = 56
   Insn 285: point = 57
   Insn 284: point = 59
  BB 9
   Insn 406: point = 60
   Insn 274: point = 60
   Insn 273: point = 61
  BB 10
   Insn 281: point = 62
   Insn 280: point = 63
   Insn 279: point = 65
  BB 8
   Insn 268: point = 66
   Insn 267: point = 66
   Insn 266: point = 67
   Insn 265: point = 68
   Insn 264: point = 69
   Insn 451: point = 71
	   Creating copy r394<-r396@1
   Insn 263: point = 73
   Insn 262: point = 75
   Insn 261: point = 76
   Insn 417: point = 76
	Hard reg 21 is preferable by r360 with profit 1
   Insn 260: point = 77
	Hard reg 21 is preferable by r360 with profit 1
	Hard reg 0 is preferable by r360 with profit 1
   Insn 259: point = 79
   Insn 416: point = 80
	   Creating copy r359->r396@1
   Insn 258: point = 82
   Insn 257: point = 83
   Insn 256: point = 85
   Insn 255: point = 86
   Insn 254: point = 88
   Insn 253: point = 90
   Insn 252: point = 92
   Insn 251: point = 93
   Insn 250: point = 94
   Insn 452: point = 96
	   Creating copy r395<-r397@1
   Insn 249: point = 98
   Insn 248: point = 100
   Insn 247: point = 101
   Insn 414: point = 101
	Hard reg 21 is preferable by r357 with profit 1
   Insn 246: point = 102
	Hard reg 21 is preferable by r357 with profit 1
	Hard reg 0 is preferable by r357 with profit 1
   Insn 245: point = 104
   Insn 413: point = 105
	   Creating copy r356->r397@1
   Insn 244: point = 107
   Insn 243: point = 108
   Insn 242: point = 110
   Insn 241: point = 111
   Insn 240: point = 113
   Insn 239: point = 115
   Insn 238: point = 116
   Insn 237: point = 117
   Insn 236: point = 119
  BB 6
   Insn 403: point = 120
   Insn 226: point = 120
   Insn 225: point = 121
  BB 7
   Insn 233: point = 122
   Insn 232: point = 123
   Insn 231: point = 125
  BB 5
   Insn 220: point = 126
   Insn 219: point = 126
   Insn 218: point = 127
   Insn 217: point = 128
   Insn 216: point = 129
   Insn 215: point = 130
   Insn 214: point = 130
   Insn 213: point = 131
   Insn 212: point = 132
   Insn 211: point = 134
   Insn 210: point = 136
   Insn 209: point = 138
   Insn 208: point = 139
   Insn 207: point = 141
   Insn 206: point = 143
   Insn 205: point = 145
   Insn 204: point = 146
   Insn 203: point = 148
   Insn 202: point = 150
   Insn 201: point = 152
   Insn 200: point = 153
   Insn 199: point = 155
   Insn 198: point = 157
   Insn 197: point = 158
   Insn 196: point = 159
   Insn 195: point = 160
   Insn 194: point = 160
   Insn 193: point = 161
   Insn 192: point = 163
   Insn 191: point = 165
   Insn 190: point = 167
   Insn 189: point = 169
   Insn 188: point = 171
   Insn 187: point = 172
   Insn 186: point = 174
   Insn 185: point = 176
   Insn 184: point = 178
   Insn 183: point = 179
   Insn 182: point = 181
   Insn 181: point = 183
   Insn 180: point = 185
   Insn 179: point = 186
   Insn 178: point = 188
   Insn 177: point = 190
   Insn 176: point = 192
   Insn 175: point = 193
   Insn 174: point = 195
   Insn 173: point = 197
   Insn 172: point = 199
   Insn 171: point = 201
   Insn 170: point = 202
   Insn 169: point = 204
   Insn 168: point = 206
   Insn 167: point = 207
   Insn 166: point = 209
   Insn 165: point = 211
   Insn 164: point = 213
   Insn 163: point = 214
   Insn 162: point = 216
   Insn 161: point = 218
  BB 12
   Insn 377: point = 219
   Insn 376: point = 220
   Insn 445: point = 222
	   Creating copy r388<-r400@1
   Insn 375: point = 224
   Insn 374: point = 226
   Insn 373: point = 227
   Insn 435: point = 227
	Hard reg 21 is preferable by r378 with profit 1
   Insn 372: point = 228
	Hard reg 21 is preferable by r378 with profit 1
	Hard reg 0 is preferable by r378 with profit 1
   Insn 371: point = 230
   Insn 434: point = 231
	   Creating copy r377->r400@1
   Insn 370: point = 233
   Insn 369: point = 234
   Insn 368: point = 236
   Insn 367: point = 237
   Insn 366: point = 239
   Insn 365: point = 241
   Insn 364: point = 243
   Insn 363: point = 244
   Insn 362: point = 245
   Insn 446: point = 247
	   Creating copy r389<-r401@1
   Insn 361: point = 249
   Insn 360: point = 251
   Insn 359: point = 252
   Insn 432: point = 252
	Hard reg 21 is preferable by r375 with profit 1
   Insn 358: point = 253
	Hard reg 21 is preferable by r375 with profit 1
	Hard reg 0 is preferable by r375 with profit 1
   Insn 357: point = 255
   Insn 431: point = 256
	   Creating copy r374->r401@1
   Insn 356: point = 258
   Insn 355: point = 259
   Insn 354: point = 261
   Insn 353: point = 262
   Insn 352: point = 264
   Insn 351: point = 266
   Insn 350: point = 267
   Insn 349: point = 268
   Insn 447: point = 270
	   Creating copy r390<-r402@1
   Insn 348: point = 272
   Insn 347: point = 274
   Insn 346: point = 275
   Insn 429: point = 275
	Hard reg 21 is preferable by r372 with profit 1
   Insn 345: point = 276
	Hard reg 21 is preferable by r372 with profit 1
	Hard reg 0 is preferable by r372 with profit 1
   Insn 344: point = 278
   Insn 428: point = 279
	   Creating copy r371->r402@1
   Insn 343: point = 281
   Insn 342: point = 282
   Insn 341: point = 284
   Insn 340: point = 285
   Insn 339: point = 287
   Insn 338: point = 289
   Insn 337: point = 291
   Insn 336: point = 292
   Insn 335: point = 293
   Insn 448: point = 295
	   Creating copy r391<-r403@1
   Insn 334: point = 297
   Insn 333: point = 299
   Insn 332: point = 300
   Insn 426: point = 300
	Hard reg 21 is preferable by r369 with profit 1
   Insn 331: point = 301
	Hard reg 21 is preferable by r369 with profit 1
	Hard reg 0 is preferable by r369 with profit 1
   Insn 330: point = 303
   Insn 425: point = 304
	   Creating copy r368->r403@1
   Insn 329: point = 306
   Insn 328: point = 307
   Insn 327: point = 309
   Insn 326: point = 310
   Insn 325: point = 312
   Insn 324: point = 314
   Insn 323: point = 315
   Insn 322: point = 316
   Insn 321: point = 318
   Insn 320: point = 319
   Insn 319: point = 320
   Insn 318: point = 322
  BB 4
   Insn 159: point = 323
   Insn 158: point = 323
   Insn 157: point = 324
   Insn 156: point = 326
   Insn 155: point = 327
   Insn 154: point = 328
   Insn 153: point = 329
   Insn 152: point = 329
   Insn 151: point = 330
   Insn 150: point = 331
   Insn 149: point = 333
   Insn 148: point = 335
   Insn 147: point = 337
   Insn 146: point = 338
   Insn 145: point = 340
   Insn 144: point = 342
   Insn 143: point = 344
   Insn 142: point = 345
   Insn 141: point = 347
   Insn 140: point = 349
   Insn 139: point = 351
   Insn 138: point = 352
   Insn 137: point = 354
   Insn 136: point = 356
   Insn 135: point = 357
   Insn 134: point = 358
   Insn 133: point = 359
   Insn 132: point = 359
   Insn 131: point = 360
   Insn 130: point = 362
   Insn 129: point = 364
   Insn 128: point = 366
   Insn 127: point = 368
   Insn 126: point = 370
   Insn 125: point = 371
   Insn 124: point = 373
   Insn 123: point = 375
   Insn 122: point = 377
   Insn 121: point = 378
   Insn 120: point = 380
   Insn 119: point = 382
   Insn 118: point = 384
   Insn 117: point = 385
   Insn 116: point = 387
   Insn 115: point = 389
   Insn 114: point = 391
   Insn 113: point = 392
   Insn 112: point = 394
   Insn 111: point = 396
   Insn 110: point = 398
   Insn 109: point = 400
   Insn 108: point = 401
   Insn 107: point = 403
   Insn 106: point = 405
   Insn 105: point = 406
   Insn 104: point = 408
   Insn 103: point = 410
   Insn 102: point = 412
   Insn 101: point = 413
   Insn 100: point = 415
   Insn 99: point = 417
   Insn 98: point = 418
   Insn 97: point = 419
   Insn 96: point = 420
   Insn 95: point = 420
   Insn 94: point = 421
   Insn 93: point = 422
   Insn 92: point = 424
   Insn 91: point = 426
   Insn 90: point = 428
   Insn 89: point = 429
   Insn 88: point = 431
   Insn 87: point = 433
   Insn 86: point = 435
   Insn 85: point = 436
   Insn 84: point = 438
   Insn 83: point = 440
   Insn 82: point = 442
   Insn 81: point = 443
   Insn 80: point = 445
   Insn 79: point = 447
   Insn 78: point = 448
   Insn 77: point = 449
   Insn 76: point = 450
   Insn 75: point = 450
   Insn 74: point = 451
   Insn 73: point = 453
   Insn 72: point = 455
   Insn 71: point = 457
   Insn 70: point = 459
   Insn 69: point = 461
   Insn 68: point = 462
   Insn 67: point = 464
   Insn 66: point = 466
   Insn 65: point = 468
   Insn 64: point = 469
   Insn 63: point = 471
   Insn 62: point = 473
   Insn 61: point = 475
   Insn 60: point = 476
   Insn 59: point = 478
   Insn 58: point = 480
   Insn 57: point = 482
   Insn 56: point = 483
   Insn 55: point = 485
   Insn 54: point = 487
   Insn 53: point = 489
   Insn 52: point = 491
   Insn 51: point = 492
   Insn 50: point = 494
   Insn 49: point = 496
   Insn 48: point = 497
   Insn 47: point = 499
   Insn 46: point = 501
   Insn 45: point = 503
   Insn 44: point = 504
   Insn 43: point = 506
   Insn 42: point = 508
  BB 2
   Insn 35: point = 509
   Insn 34: point = 509
   Insn 33: point = 510
   Insn 32: point = 511
   Insn 31: point = 512
   Insn 30: point = 513
   Insn 29: point = 514
   Insn 28: point = 515
   Insn 27: point = 516
   Insn 26: point = 517
   Insn 25: point = 518
   Insn 24: point = 519
   Insn 23: point = 520
   Insn 22: point = 521
   Insn 21: point = 522
   Insn 20: point = 523
   Insn 19: point = 524
   Insn 18: point = 525
   Insn 17: point = 526
   Insn 16: point = 527
   Insn 15: point = 528
   Insn 14: point = 529
   Insn 13: point = 530
   Insn 12: point = 531
   Insn 11: point = 532
   Insn 10: point = 533
   Insn 6: point = 533
   Insn 5: point = 533
   Insn 4: point = 533
   Insn 3: point = 533
   Insn 2: point = 533
 r87: [4..5]
 r88: [505..506]
 r89: [502..504]
 r90: [500..501]
 r91: [498..499]
 r92: [484..497]
 r93: [493..494]
 r94: [490..492]
 r95: [488..489]
 r96: [486..487]
 r97: [484..485]
 r98: [452..483]
 r99: [479..480]
 r100: [477..478]
 r101: [474..476]
 r102: [472..473]
 r103: [470..471]
 r104: [454..469]
 r105: [465..466]
 r106: [463..464]
 r107: [460..462]
 r108: [458..459]
 r109: [456..457]
 r110: [454..455]
 r111: [452..453]
 r112: [450..451]
 r113: [444..445]
 r114: [441..443]
 r115: [439..440]
 r116: [437..438]
 r117: [421..436]
 r118: [432..433]
 r119: [430..431]
 r120: [427..429]
 r121: [425..426]
 r122: [423..424]
 r123: [420..422]
 r124: [414..415]
 r125: [411..413]
 r126: [409..410]
 r127: [407..408]
 r128: [393..406]
 r129: [402..403]
 r130: [399..401]
 r131: [397..398]
 r132: [395..396]
 r133: [393..394]
 r134: [361..392]
 r135: [388..389]
 r136: [386..387]
 r137: [383..385]
 r138: [381..382]
 r139: [379..380]
 r140: [363..378]
 r141: [374..375]
 r142: [372..373]
 r143: [369..371]
 r144: [367..368]
 r145: [365..366]
 r146: [363..364]
 r147: [361..362]
 r148: [359..360]
 r149: [353..354]
 r150: [350..352]
 r151: [348..349]
 r152: [346..347]
 r153: [330..345]
 r154: [341..342]
 r155: [339..340]
 r156: [336..338]
 r157: [334..335]
 r158: [332..333]
 r159: [329..331]
 r160: [323..324]
 r161: [215..216]
 r162: [212..214]
 r163: [210..211]
 r164: [208..209]
 r165: [194..207]
 r166: [203..204]
 r167: [200..202]
 r168: [198..199]
 r169: [196..197]
 r170: [194..195]
 r171: [162..193]
 r172: [189..190]
 r173: [187..188]
 r174: [184..186]
 r175: [182..183]
 r176: [180..181]
 r177: [164..179]
 r178: [175..176]
 r179: [173..174]
 r180: [170..172]
 r181: [168..169]
 r182: [166..167]
 r183: [164..165]
 r184: [162..163]
 r185: [160..161]
 r186: [154..155]
 r187: [151..153]
 r188: [149..150]
 r189: [147..148]
 r190: [131..146]
 r191: [142..143]
 r192: [140..141]
 r193: [137..139]
 r194: [135..136]
 r195: [133..134]
 r196: [130..132]
 r197: [112..113]
 r198: [109..111]
 r199: [93..108]
 r201: [99..100]
 r202: [95..98]
 r203: [93..94]
 r204: [89..90]
 r205: [87..88]
 r206: [84..86]
 r207: [68..83]
 r209: [74..75]
 r210: [70..73]
 r211: [68..69]
 r212: [52..53]
 r213: [49..51]
 r214: [33..48]
 r216: [39..40]
 r217: [35..38]
 r218: [33..34]
 r219: [29..30]
 r220: [27..28]
 r221: [24..26]
 r222: [8..23]
 r224: [14..15]
 r225: [10..13]
 r226: [8..9]
 r227: [311..312]
 r228: [308..310]
 r229: [292..307]
 r231: [298..299]
 r232: [294..297]
 r233: [292..293]
 r234: [288..289]
 r235: [286..287]
 r236: [283..285]
 r237: [267..282]
 r239: [273..274]
 r240: [269..272]
 r241: [267..268]
 r242: [263..264]
 r243: [260..262]
 r244: [244..259]
 r246: [250..251]
 r247: [246..249]
 r248: [244..245]
 r249: [240..241]
 r250: [238..239]
 r251: [235..237]
 r252: [219..234]
 r254: [225..226]
 r255: [221..224]
 r256: [219..220]
 r257: [2..3]
 r258: [0..1]
 r259: [531..532]
 r260: [529..530]
 r261: [527..528]
 r262: [525..526]
 r263: [523..524]
 r264: [521..522]
 r265: [519..520]
 r266: [517..518]
 r267: [515..516]
 r268: [513..514]
 r269: [511..512]
 r270: [509..510]
 r271: [6..7]
 r272: [507..508]
 r273: [502..503]
 r274: [495..496]
 r275: [490..491]
 r276: [481..482]
 r277: [474..475]
 r278: [467..468]
 r279: [460..461]
 r280: [448..449]
 r281: [446..447]
 r282: [441..442]
 r283: [434..435]
 r284: [427..428]
 r285: [418..419]
 r286: [416..417]
 r287: [411..412]
 r288: [404..405]
 r289: [399..400]
 r290: [390..391]
 r291: [383..384]
 r292: [376..377]
 r293: [369..370]
 r294: [357..358]
 r295: [355..356]
 r296: [350..351]
 r297: [343..344]
 r298: [336..337]
 r299: [327..328]
 r300: [325..326]
 r301: [217..218]
 r302: [212..213]
 r303: [205..206]
 r304: [200..201]
 r305: [191..192]
 r306: [184..185]
 r307: [177..178]
 r308: [170..171]
 r309: [158..159]
 r310: [156..157]
 r311: [151..152]
 r312: [144..145]
 r313: [137..138]
 r314: [128..129]
 r315: [126..127]
 r316: [120..121]
 r317: [122..123]
 r318: [124..125]
 r319: [116..117]
 r320: [118..119]
 r321: [114..115]
 r322: [109..110]
 r323: [103..104]
 r324: [91..92]
 r325: [84..85]
 r326: [78..79]
 r327: [66..67]
 r328: [60..61]
 r329: [62..63]
 r330: [64..65]
 r331: [56..57]
 r332: [58..59]
 r333: [54..55]
 r334: [49..50]
 r335: [43..44]
 r336: [31..32]
 r337: [24..25]
 r338: [18..19]
 r339: [319..320]
 r340: [321..322]
 r341: [315..316]
 r342: [317..318]
 r343: [313..314]
 r344: [308..309]
 r345: [302..303]
 r346: [290..291]
 r347: [283..284]
 r348: [277..278]
 r349: [265..266]
 r350: [260..261]
 r351: [254..255]
 r352: [242..243]
 r353: [235..236]
 r354: [229..230]
 r356: [106..107]
 r357: [101..102]
 r359: [81..82]
 r360: [76..77]
 r362: [46..47]
 r363: [41..42]
 r365: [21..22]
 r366: [16..17]
 r368: [305..306]
 r369: [300..301]
 r371: [280..281]
 r372: [275..276]
 r374: [257..258]
 r375: [252..253]
 r377: [232..233]
 r378: [227..228]
 r388: [221..222]
 r389: [246..247]
 r390: [269..270]
 r391: [294..295]
 r392: [10..11]
 r393: [35..36]
 r394: [70..71]
 r395: [95..96]
 r396: [72..80]
 r397: [97..105]
 r398: [12..20]
 r399: [37..45]
 r400: [223..231]
 r401: [248..256]
 r402: [271..279]
 r403: [296..304]
Compressing live ranges: from 533 to 476 - 89%
Ranges after the compression:
 r87: [4..5]
 r88: [448..449]
 r89: [446..447]
 r90: [444..445]
 r91: [442..443]
 r92: [430..441]
 r93: [438..439]
 r94: [436..437]
 r95: [434..435]
 r96: [432..433]
 r97: [430..431]
 r98: [402..429]
 r99: [426..427]
 r100: [424..425]
 r101: [422..423]
 r102: [420..421]
 r103: [418..419]
 r104: [404..417]
 r105: [414..415]
 r106: [412..413]
 r107: [410..411]
 r108: [408..409]
 r109: [406..407]
 r110: [404..405]
 r111: [402..403]
 r112: [400..401]
 r113: [394..395]
 r114: [392..393]
 r115: [390..391]
 r116: [388..389]
 r117: [374..387]
 r118: [384..385]
 r119: [382..383]
 r120: [380..381]
 r121: [378..379]
 r122: [376..377]
 r123: [374..375]
 r124: [368..369]
 r125: [366..367]
 r126: [364..365]
 r127: [362..363]
 r128: [350..361]
 r129: [358..359]
 r130: [356..357]
 r131: [354..355]
 r132: [352..353]
 r133: [350..351]
 r134: [322..349]
 r135: [346..347]
 r136: [344..345]
 r137: [342..343]
 r138: [340..341]
 r139: [338..339]
 r140: [324..337]
 r141: [334..335]
 r142: [332..333]
 r143: [330..331]
 r144: [328..329]
 r145: [326..327]
 r146: [324..325]
 r147: [322..323]
 r148: [320..321]
 r149: [314..315]
 r150: [312..313]
 r151: [310..311]
 r152: [308..309]
 r153: [294..307]
 r154: [304..305]
 r155: [302..303]
 r156: [300..301]
 r157: [298..299]
 r158: [296..297]
 r159: [294..295]
 r160: [288..289]
 r161: [192..193]
 r162: [190..191]
 r163: [188..189]
 r164: [186..187]
 r165: [174..185]
 r166: [182..183]
 r167: [180..181]
 r168: [178..179]
 r169: [176..177]
 r170: [174..175]
 r171: [146..173]
 r172: [170..171]
 r173: [168..169]
 r174: [166..167]
 r175: [164..165]
 r176: [162..163]
 r177: [148..161]
 r178: [158..159]
 r179: [156..157]
 r180: [154..155]
 r181: [152..153]
 r182: [150..151]
 r183: [148..149]
 r184: [146..147]
 r185: [144..145]
 r186: [138..139]
 r187: [136..137]
 r188: [134..135]
 r189: [132..133]
 r190: [118..131]
 r191: [128..129]
 r192: [126..127]
 r193: [124..125]
 r194: [122..123]
 r195: [120..121]
 r196: [118..119]
 r197: [100..101]
 r198: [98..99]
 r199: [84..97]
 r201: [90..91]
 r202: [86..89]
 r203: [84..85]
 r204: [80..81]
 r205: [78..79]
 r206: [76..77]
 r207: [62..75]
 r209: [68..69]
 r210: [64..67]
 r211: [62..63]
 r212: [46..47]
 r213: [44..45]
 r214: [30..43]
 r216: [36..37]
 r217: [32..35]
 r218: [30..31]
 r219: [26..27]
 r220: [24..25]
 r221: [22..23]
 r222: [8..21]
 r224: [14..15]
 r225: [10..13]
 r226: [8..9]
 r227: [276..277]
 r228: [274..275]
 r229: [260..273]
 r231: [266..267]
 r232: [262..265]
 r233: [260..261]
 r234: [256..257]
 r235: [254..255]
 r236: [252..253]
 r237: [238..251]
 r239: [244..245]
 r240: [240..243]
 r241: [238..239]
 r242: [234..235]
 r243: [232..233]
 r244: [218..231]
 r246: [224..225]
 r247: [220..223]
 r248: [218..219]
 r249: [214..215]
 r250: [212..213]
 r251: [210..211]
 r252: [196..209]
 r254: [202..203]
 r255: [198..201]
 r256: [196..197]
 r257: [2..3]
 r258: [0..1]
 r259: [474..475]
 r260: [472..473]
 r261: [470..471]
 r262: [468..469]
 r263: [466..467]
 r264: [464..465]
 r265: [462..463]
 r266: [460..461]
 r267: [458..459]
 r268: [456..457]
 r269: [454..455]
 r270: [452..453]
 r271: [6..7]
 r272: [450..451]
 r273: [446..447]
 r274: [440..441]
 r275: [436..437]
 r276: [428..429]
 r277: [422..423]
 r278: [416..417]
 r279: [410..411]
 r280: [398..399]
 r281: [396..397]
 r282: [392..393]
 r283: [386..387]
 r284: [380..381]
 r285: [372..373]
 r286: [370..371]
 r287: [366..367]
 r288: [360..361]
 r289: [356..357]
 r290: [348..349]
 r291: [342..343]
 r292: [336..337]
 r293: [330..331]
 r294: [318..319]
 r295: [316..317]
 r296: [312..313]
 r297: [306..307]
 r298: [300..301]
 r299: [292..293]
 r300: [290..291]
 r301: [194..195]
 r302: [190..191]
 r303: [184..185]
 r304: [180..181]
 r305: [172..173]
 r306: [166..167]
 r307: [160..161]
 r308: [154..155]
 r309: [142..143]
 r310: [140..141]
 r311: [136..137]
 r312: [130..131]
 r313: [124..125]
 r314: [116..117]
 r315: [114..115]
 r316: [108..109]
 r317: [110..111]
 r318: [112..113]
 r319: [104..105]
 r320: [106..107]
 r321: [102..103]
 r322: [98..99]
 r323: [94..95]
 r324: [82..83]
 r325: [76..77]
 r326: [72..73]
 r327: [60..61]
 r328: [54..55]
 r329: [56..57]
 r330: [58..59]
 r331: [50..51]
 r332: [52..53]
 r333: [48..49]
 r334: [44..45]
 r335: [40..41]
 r336: [28..29]
 r337: [22..23]
 r338: [18..19]
 r339: [284..285]
 r340: [286..287]
 r341: [280..281]
 r342: [282..283]
 r343: [278..279]
 r344: [274..275]
 r345: [270..271]
 r346: [258..259]
 r347: [252..253]
 r348: [248..249]
 r349: [236..237]
 r350: [232..233]
 r351: [228..229]
 r352: [216..217]
 r353: [210..211]
 r354: [206..207]
 r356: [96..97]
 r357: [92..93]
 r359: [74..75]
 r360: [70..71]
 r362: [42..43]
 r363: [38..39]
 r365: [20..21]
 r366: [16..17]
 r368: [272..273]
 r369: [268..269]
 r371: [250..251]
 r372: [246..247]
 r374: [230..231]
 r375: [226..227]
 r377: [208..209]
 r378: [204..205]
 r388: [198..199]
 r389: [220..221]
 r390: [240..241]
 r391: [262..263]
 r392: [10..11]
 r393: [32..33]
 r394: [64..65]
 r395: [86..87]
 r396: [66..73]
 r397: [88..95]
 r398: [12..19]
 r399: [34..41]
 r400: [200..207]
 r401: [222..229]
 r402: [242..249]
 r403: [264..271]

********** Assignment #2: **********

	 Assigning to 388 (cl=SSE_REGS, orig=253, freq=2, tfirst=388, tfreq=2)...
	   Assign 27 to optional reload r388 (freq=2)
	Hard reg 27 is preferable by r400 with profit 1
	 Assigning to 400 (cl=SSE_REGS, orig=253, freq=2, tfirst=388, tfreq=2)...
	 Assigning to 389 (cl=SSE_REGS, orig=245, freq=2, tfirst=389, tfreq=2)...
	   Assign 28 to optional reload r389 (freq=2)
	Hard reg 28 is preferable by r401 with profit 1
	 Assigning to 401 (cl=SSE_REGS, orig=245, freq=2, tfirst=389, tfreq=2)...
	 Assigning to 390 (cl=SSE_REGS, orig=238, freq=2, tfirst=390, tfreq=2)...
	   Assign 24 to optional reload r390 (freq=2)
	Hard reg 24 is preferable by r402 with profit 1
	 Assigning to 402 (cl=SSE_REGS, orig=238, freq=2, tfirst=390, tfreq=2)...
	 Assigning to 391 (cl=SSE_REGS, orig=230, freq=2, tfirst=391, tfreq=2)...
	   Assign 25 to optional reload r391 (freq=2)
	Hard reg 25 is preferable by r403 with profit 1
	 Assigning to 403 (cl=SSE_REGS, orig=230, freq=2, tfirst=391, tfreq=2)...
	 Assigning to 392 (cl=SSE_REGS, orig=223, freq=2, tfirst=392, tfreq=2)...
	   Assign 26 to optional reload r392 (freq=2)
	Hard reg 26 is preferable by r398 with profit 1
	 Assigning to 398 (cl=SSE_REGS, orig=223, freq=2, tfirst=392, tfreq=2)...
	 Assigning to 393 (cl=SSE_REGS, orig=215, freq=2, tfirst=393, tfreq=2)...
	   Assign 27 to optional reload r393 (freq=2)
	Hard reg 27 is preferable by r399 with profit 1
	 Assigning to 399 (cl=SSE_REGS, orig=215, freq=2, tfirst=393, tfreq=2)...
	 Assigning to 394 (cl=SSE_REGS, orig=208, freq=2, tfirst=394, tfreq=2)...
	   Assign 28 to optional reload r394 (freq=2)
	Hard reg 28 is preferable by r396 with profit 1
	 Assigning to 396 (cl=SSE_REGS, orig=208, freq=2, tfirst=394, tfreq=2)...
	 Assigning to 395 (cl=SSE_REGS, orig=200, freq=2, tfirst=395, tfreq=2)...
	   Assign 23 to optional reload r395 (freq=2)
	Hard reg 23 is preferable by r397 with profit 1
	 Assigning to 397 (cl=SSE_REGS, orig=200, freq=2, tfirst=395, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  451: r394:SF=r208:SF
      REG_DEAD r208:SF
   Insn after restoring regs:
  416: r208:SF=r359:SF
      REG_DEAD r359:SF
   Insn after restoring regs:
  452: r395:SF=r200:SF
      REG_DEAD r200:SF
   Insn after restoring regs:
  413: r200:SF=r356:SF
      REG_DEAD r356:SF
   Insn after restoring regs:
  449: r392:SF=r223:SF
      REG_DEAD r223:SF
   Insn after restoring regs:
  422: r223:SF=r365:SF
      REG_DEAD r365:SF
   Insn after restoring regs:
  450: r393:SF=r215:SF
      REG_DEAD r215:SF
   Insn after restoring regs:
  419: r215:SF=r362:SF
      REG_DEAD r362:SF
   Insn after restoring regs:
  445: r388:SF=r253:SF
      REG_DEAD r253:SF
   Insn after restoring regs:
  434: r253:SF=r377:SF
      REG_DEAD r377:SF
   Insn after restoring regs:
  446: r389:SF=r245:SF
      REG_DEAD r245:SF
   Insn after restoring regs:
  431: r245:SF=r374:SF
      REG_DEAD r374:SF
   Insn after restoring regs:
  447: r390:SF=r238:SF
      REG_DEAD r238:SF
   Insn after restoring regs:
  428: r238:SF=r371:SF
      REG_DEAD r371:SF
   Insn after restoring regs:
  448: r391:SF=r230:SF
      REG_DEAD r230:SF
   Insn after restoring regs:
  425: r230:SF=r368:SF
      REG_DEAD r368:SF
Keep optional reload reg 358
Keep optional reload reg 361
Keep optional reload reg 364
Keep optional reload reg 367
Keep optional reload reg 370
Keep optional reload reg 373
Keep optional reload reg 376
Keep optional reload reg 379
Remove optional reload reg 388
  Restoring original insn:
  376: r256:SF=r255:SF*r253:SF
      REG_DEAD r253:SF
      REG_DEAD r255:SF
  Deleting move 445
  445: r388:SF=r253:SF
      REG_DEAD r253:SF
deleting insn with uid = 445.
Remove optional reload reg 389
  Restoring original insn:
  362: r248:SF=r247:SF*r245:SF
      REG_DEAD r245:SF
      REG_DEAD r247:SF
  Deleting move 446
  446: r389:SF=r245:SF
      REG_DEAD r245:SF
deleting insn with uid = 446.
Remove optional reload reg 390
  Restoring original insn:
  349: r241:SF=r240:SF*r238:SF
      REG_DEAD r238:SF
      REG_DEAD r240:SF
  Deleting move 447
  447: r390:SF=r238:SF
      REG_DEAD r238:SF
deleting insn with uid = 447.
Remove optional reload reg 391
  Restoring original insn:
  335: r233:SF=r232:SF*r230:SF
      REG_DEAD r230:SF
      REG_DEAD r232:SF
  Deleting move 448
  448: r391:SF=r230:SF
      REG_DEAD r230:SF
deleting insn with uid = 448.
Remove optional reload reg 392
  Restoring original insn:
  312: r226:SF=r225:SF*r223:SF
      REG_DEAD r223:SF
      REG_DEAD r225:SF
  Deleting move 449
  449: r392:SF=r223:SF
      REG_DEAD r223:SF
deleting insn with uid = 449.
Remove optional reload reg 393
  Restoring original insn:
  298: r218:SF=r217:SF*r215:SF
      REG_DEAD r215:SF
      REG_DEAD r217:SF
  Deleting move 450
  450: r393:SF=r215:SF
      REG_DEAD r215:SF
deleting insn with uid = 450.
Remove optional reload reg 394
  Restoring original insn:
  264: r211:SF=r210:SF*r208:SF
      REG_DEAD r208:SF
      REG_DEAD r210:SF
  Deleting move 451
  451: r394:SF=r208:SF
      REG_DEAD r208:SF
deleting insn with uid = 451.
Remove optional reload reg 395
  Restoring original insn:
  250: r203:SF=r202:SF*r200:SF
      REG_DEAD r200:SF
      REG_DEAD r202:SF
  Deleting move 452
  452: r395:SF=r200:SF
      REG_DEAD r200:SF
deleting insn with uid = 452.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 376:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 362:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 349:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 335:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 312:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 298:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 264:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 250:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 14
   Insn 394: point = 0
   Insn 393: point = 0
   Insn 389: point = 1
   Insn 386: point = 3
  BB 3
   Insn 40: point = 4
   Insn 39: point = 4
   Insn 38: point = 5
   Insn 37: point = 7
  BB 13
   Insn 410: point = 8
   Insn 380: point = 8
  BB 11
   Insn 408: point = 8
   Insn 313: point = 8
   Insn 312: point = 9
   Insn 311: point = 11
   Insn 310: point = 13
   Insn 309: point = 14
   Insn 423: point = 14
   Insn 308: point = 15
   Insn 307: point = 17
   Insn 422: point = 18
   Insn 306: point = 20
   Insn 305: point = 21
   Insn 304: point = 23
   Insn 303: point = 24
   Insn 302: point = 26
   Insn 301: point = 28
   Insn 300: point = 30
   Insn 299: point = 31
   Insn 298: point = 32
   Insn 297: point = 34
   Insn 296: point = 36
   Insn 295: point = 37
   Insn 420: point = 37
   Insn 294: point = 38
   Insn 293: point = 40
   Insn 419: point = 41
   Insn 292: point = 43
   Insn 291: point = 44
   Insn 290: point = 46
   Insn 289: point = 47
   Insn 288: point = 49
   Insn 287: point = 51
   Insn 286: point = 52
   Insn 285: point = 53
   Insn 284: point = 55
  BB 9
   Insn 406: point = 56
   Insn 274: point = 56
   Insn 273: point = 57
  BB 10
   Insn 281: point = 58
   Insn 280: point = 59
   Insn 279: point = 61
  BB 8
   Insn 268: point = 62
   Insn 267: point = 62
   Insn 266: point = 63
   Insn 265: point = 64
   Insn 264: point = 65
   Insn 263: point = 67
   Insn 262: point = 69
   Insn 261: point = 70
   Insn 417: point = 70
   Insn 260: point = 71
   Insn 259: point = 73
   Insn 416: point = 74
   Insn 258: point = 76
   Insn 257: point = 77
   Insn 256: point = 79
   Insn 255: point = 80
   Insn 254: point = 82
   Insn 253: point = 84
   Insn 252: point = 86
   Insn 251: point = 87
   Insn 250: point = 88
   Insn 249: point = 90
   Insn 248: point = 92
   Insn 247: point = 93
   Insn 414: point = 93
   Insn 246: point = 94
   Insn 245: point = 96
   Insn 413: point = 97
   Insn 244: point = 99
   Insn 243: point = 100
   Insn 242: point = 102
   Insn 241: point = 103
   Insn 240: point = 105
   Insn 239: point = 107
   Insn 238: point = 108
   Insn 237: point = 109
   Insn 236: point = 111
  BB 6
   Insn 403: point = 112
   Insn 226: point = 112
   Insn 225: point = 113
  BB 7
   Insn 233: point = 114
   Insn 232: point = 115
   Insn 231: point = 117
  BB 5
   Insn 220: point = 118
   Insn 219: point = 118
   Insn 218: point = 119
   Insn 217: point = 120
   Insn 216: point = 121
   Insn 215: point = 122
   Insn 214: point = 122
   Insn 213: point = 123
   Insn 212: point = 124
   Insn 211: point = 126
   Insn 210: point = 128
   Insn 209: point = 130
   Insn 208: point = 131
   Insn 207: point = 133
   Insn 206: point = 135
   Insn 205: point = 137
   Insn 204: point = 138
   Insn 203: point = 140
   Insn 202: point = 142
   Insn 201: point = 144
   Insn 200: point = 145
   Insn 199: point = 147
   Insn 198: point = 149
   Insn 197: point = 150
   Insn 196: point = 151
   Insn 195: point = 152
   Insn 194: point = 152
   Insn 193: point = 153
   Insn 192: point = 155
   Insn 191: point = 157
   Insn 190: point = 159
   Insn 189: point = 161
   Insn 188: point = 163
   Insn 187: point = 164
   Insn 186: point = 166
   Insn 185: point = 168
   Insn 184: point = 170
   Insn 183: point = 171
   Insn 182: point = 173
   Insn 181: point = 175
   Insn 180: point = 177
   Insn 179: point = 178
   Insn 178: point = 180
   Insn 177: point = 182
   Insn 176: point = 184
   Insn 175: point = 185
   Insn 174: point = 187
   Insn 173: point = 189
   Insn 172: point = 191
   Insn 171: point = 193
   Insn 170: point = 194
   Insn 169: point = 196
   Insn 168: point = 198
   Insn 167: point = 199
   Insn 166: point = 201
   Insn 165: point = 203
   Insn 164: point = 205
   Insn 163: point = 206
   Insn 162: point = 208
   Insn 161: point = 210
  BB 12
   Insn 377: point = 211
   Insn 376: point = 212
   Insn 375: point = 214
   Insn 374: point = 216
   Insn 373: point = 217
   Insn 435: point = 217
   Insn 372: point = 218
   Insn 371: point = 220
   Insn 434: point = 221
   Insn 370: point = 223
   Insn 369: point = 224
   Insn 368: point = 226
   Insn 367: point = 227
   Insn 366: point = 229
   Insn 365: point = 231
   Insn 364: point = 233
   Insn 363: point = 234
   Insn 362: point = 235
   Insn 361: point = 237
   Insn 360: point = 239
   Insn 359: point = 240
   Insn 432: point = 240
   Insn 358: point = 241
   Insn 357: point = 243
   Insn 431: point = 244
   Insn 356: point = 246
   Insn 355: point = 247
   Insn 354: point = 249
   Insn 353: point = 250
   Insn 352: point = 252
   Insn 351: point = 254
   Insn 350: point = 255
   Insn 349: point = 256
   Insn 348: point = 258
   Insn 347: point = 260
   Insn 346: point = 261
   Insn 429: point = 261
   Insn 345: point = 262
   Insn 344: point = 264
   Insn 428: point = 265
   Insn 343: point = 267
   Insn 342: point = 268
   Insn 341: point = 270
   Insn 340: point = 271
   Insn 339: point = 273
   Insn 338: point = 275
   Insn 337: point = 277
   Insn 336: point = 278
   Insn 335: point = 279
   Insn 334: point = 281
   Insn 333: point = 283
   Insn 332: point = 284
   Insn 426: point = 284
   Insn 331: point = 285
   Insn 330: point = 287
   Insn 425: point = 288
   Insn 329: point = 290
   Insn 328: point = 291
   Insn 327: point = 293
   Insn 326: point = 294
   Insn 325: point = 296
   Insn 324: point = 298
   Insn 323: point = 299
   Insn 322: point = 300
   Insn 321: point = 302
   Insn 320: point = 303
   Insn 319: point = 304
   Insn 318: point = 306
  BB 4
   Insn 159: point = 307
   Insn 158: point = 307
   Insn 157: point = 308
   Insn 156: point = 310
   Insn 155: point = 311
   Insn 154: point = 312
   Insn 153: point = 313
   Insn 152: point = 313
   Insn 151: point = 314
   Insn 150: point = 315
   Insn 149: point = 317
   Insn 148: point = 319
   Insn 147: point = 321
   Insn 146: point = 322
   Insn 145: point = 324
   Insn 144: point = 326
   Insn 143: point = 328
   Insn 142: point = 329
   Insn 141: point = 331
   Insn 140: point = 333
   Insn 139: point = 335
   Insn 138: point = 336
   Insn 137: point = 338
   Insn 136: point = 340
   Insn 135: point = 341
   Insn 134: point = 342
   Insn 133: point = 343
   Insn 132: point = 343
   Insn 131: point = 344
   Insn 130: point = 346
   Insn 129: point = 348
   Insn 128: point = 350
   Insn 127: point = 352
   Insn 126: point = 354
   Insn 125: point = 355
   Insn 124: point = 357
   Insn 123: point = 359
   Insn 122: point = 361
   Insn 121: point = 362
   Insn 120: point = 364
   Insn 119: point = 366
   Insn 118: point = 368
   Insn 117: point = 369
   Insn 116: point = 371
   Insn 115: point = 373
   Insn 114: point = 375
   Insn 113: point = 376
   Insn 112: point = 378
   Insn 111: point = 380
   Insn 110: point = 382
   Insn 109: point = 384
   Insn 108: point = 385
   Insn 107: point = 387
   Insn 106: point = 389
   Insn 105: point = 390
   Insn 104: point = 392
   Insn 103: point = 394
   Insn 102: point = 396
   Insn 101: point = 397
   Insn 100: point = 399
   Insn 99: point = 401
   Insn 98: point = 402
   Insn 97: point = 403
   Insn 96: point = 404
   Insn 95: point = 404
   Insn 94: point = 405
   Insn 93: point = 406
   Insn 92: point = 408
   Insn 91: point = 410
   Insn 90: point = 412
   Insn 89: point = 413
   Insn 88: point = 415
   Insn 87: point = 417
   Insn 86: point = 419
   Insn 85: point = 420
   Insn 84: point = 422
   Insn 83: point = 424
   Insn 82: point = 426
   Insn 81: point = 427
   Insn 80: point = 429
   Insn 79: point = 431
   Insn 78: point = 432
   Insn 77: point = 433
   Insn 76: point = 434
   Insn 75: point = 434
   Insn 74: point = 435
   Insn 73: point = 437
   Insn 72: point = 439
   Insn 71: point = 441
   Insn 70: point = 443
   Insn 69: point = 445
   Insn 68: point = 446
   Insn 67: point = 448
   Insn 66: point = 450
   Insn 65: point = 452
   Insn 64: point = 453
   Insn 63: point = 455
   Insn 62: point = 457
   Insn 61: point = 459
   Insn 60: point = 460
   Insn 59: point = 462
   Insn 58: point = 464
   Insn 57: point = 466
   Insn 56: point = 467
   Insn 55: point = 469
   Insn 54: point = 471
   Insn 53: point = 473
   Insn 52: point = 475
   Insn 51: point = 476
   Insn 50: point = 478
   Insn 49: point = 480
   Insn 48: point = 481
   Insn 47: point = 483
   Insn 46: point = 485
   Insn 45: point = 487
   Insn 44: point = 488
   Insn 43: point = 490
   Insn 42: point = 492
  BB 2
   Insn 35: point = 493
   Insn 34: point = 493
   Insn 33: point = 494
   Insn 32: point = 495
   Insn 31: point = 496
   Insn 30: point = 497
   Insn 29: point = 498
   Insn 28: point = 499
   Insn 27: point = 500
   Insn 26: point = 501
   Insn 25: point = 502
   Insn 24: point = 503
   Insn 23: point = 504
   Insn 22: point = 505
   Insn 21: point = 506
   Insn 20: point = 507
   Insn 19: point = 508
   Insn 18: point = 509
   Insn 17: point = 510
   Insn 16: point = 511
   Insn 15: point = 512
   Insn 14: point = 513
   Insn 13: point = 514
   Insn 12: point = 515
   Insn 11: point = 516
   Insn 10: point = 517
   Insn 6: point = 517
   Insn 5: point = 517
   Insn 4: point = 517
   Insn 3: point = 517
   Insn 2: point = 517
 r200: [89..97]
 r208: [66..74]
 r215: [33..41]
 r223: [10..18]
 r230: [280..288]
 r238: [257..265]
 r245: [236..244]
 r253: [213..221]
 r357: [93..94]
 r360: [70..71]
 r363: [37..38]
 r366: [14..15]
 r369: [284..285]
 r372: [261..262]
 r375: [240..241]
 r378: [217..218]
Compressing live ranges: from 517 to 16 - 3%
Ranges after the compression:
 r200: [6..7]
 r208: [4..5]
 r215: [2..3]
 r223: [0..1]
 r230: [14..15]
 r238: [12..13]
 r245: [10..11]
 r253: [8..9]
 r357: [6..7]
 r360: [4..5]
 r363: [2..3]
 r366: [0..1]
 r369: [14..15]
 r372: [12..13]
 r375: [10..11]
 r378: [8..9]
  Slot 0 regnos (width = 4):	 200	 253	 245	 238	 230	 223	 215	 208
  Slot 1 regnos (width = 8):	 357	 378	 375	 372	 369	 366	 363	 360
Changing spilled pseudos to memory in insn #413
Changing spilled pseudos to memory in insn #246
Changing spilled pseudos to memory in insn #414
Changing spilled pseudos to memory in insn #250
Changing spilled pseudos to memory in insn #416
Changing spilled pseudos to memory in insn #260
Changing spilled pseudos to memory in insn #417
Changing spilled pseudos to memory in insn #264
Changing spilled pseudos to memory in insn #419
Changing spilled pseudos to memory in insn #294
Changing spilled pseudos to memory in insn #420
Changing spilled pseudos to memory in insn #298
Changing spilled pseudos to memory in insn #422
Changing spilled pseudos to memory in insn #308
Changing spilled pseudos to memory in insn #423
Changing spilled pseudos to memory in insn #312
Changing spilled pseudos to memory in insn #425
Changing spilled pseudos to memory in insn #331
Changing spilled pseudos to memory in insn #426
Changing spilled pseudos to memory in insn #335
Changing spilled pseudos to memory in insn #428
Changing spilled pseudos to memory in insn #345
Changing spilled pseudos to memory in insn #429
Changing spilled pseudos to memory in insn #349
Changing spilled pseudos to memory in insn #431
Changing spilled pseudos to memory in insn #358
Changing spilled pseudos to memory in insn #432
Changing spilled pseudos to memory in insn #362
Changing spilled pseudos to memory in insn #434
Changing spilled pseudos to memory in insn #372
Changing spilled pseudos to memory in insn #435
Changing spilled pseudos to memory in insn #376
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #376
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #435
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 435:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 372:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #434
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 434:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #362
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #432
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 432:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 358:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #431
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 431:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #349
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #429
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 429:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 345:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #428
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 428:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #335
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #426
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 426:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 331:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #425
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 425:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #312
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #423
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 423:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 308:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #422
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 422:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #298
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #420
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 420:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 294:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #419
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 419:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #264
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #417
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 417:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 260:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #416
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 416:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #250
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 14 for insn #414
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 414:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 246:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #413
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 413:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=208, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=176, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 56
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 94
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 95
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 113
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 151
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 152
changing reg in insn 157
changing reg in insn 158
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 175
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 213
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 214
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 243
changing reg in insn 243
changing reg in insn 243
changing reg in insn 251
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 253
changing reg in insn 254
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 257
changing reg in insn 257
changing reg in insn 257
changing reg in insn 265
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 265
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 291
changing reg in insn 291
changing reg in insn 291
changing reg in insn 299
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 298
changing reg in insn 299
changing reg in insn 301
changing reg in insn 302
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 305
changing reg in insn 305
changing reg in insn 305
changing reg in insn 313
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 313
changing reg in insn 325
changing reg in insn 326
changing reg in insn 326
changing reg in insn 328
changing reg in insn 328
changing reg in insn 328
changing reg in insn 336
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 335
changing reg in insn 336
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 342
changing reg in insn 342
changing reg in insn 342
changing reg in insn 350
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 349
changing reg in insn 350
changing reg in insn 352
changing reg in insn 353
changing reg in insn 353
changing reg in insn 355
changing reg in insn 355
changing reg in insn 355
changing reg in insn 363
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 362
changing reg in insn 363
changing reg in insn 365
changing reg in insn 366
changing reg in insn 366
changing reg in insn 367
changing reg in insn 367
changing reg in insn 369
changing reg in insn 369
changing reg in insn 369
changing reg in insn 377
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 376
changing reg in insn 377
changing reg in insn 386
changing reg in insn 389
changing reg in insn 389
changing reg in insn 393
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 57
changing reg in insn 58
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 106
changing reg in insn 107
changing reg in insn 109
changing reg in insn 114
changing reg in insn 115
changing reg in insn 118
changing reg in insn 122
changing reg in insn 123
changing reg in insn 126
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 168
changing reg in insn 169
changing reg in insn 171
changing reg in insn 176
changing reg in insn 177
changing reg in insn 180
changing reg in insn 184
changing reg in insn 185
changing reg in insn 188
changing reg in insn 196
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 201
changing reg in insn 205
changing reg in insn 206
changing reg in insn 209
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 225
changing reg in insn 226
changing reg in insn 232
changing reg in insn 233
changing reg in insn 231
changing reg in insn 232
changing reg in insn 237
changing reg in insn 238
changing reg in insn 236
changing reg in insn 237
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 245
changing reg in insn 246
changing reg in insn 252
changing reg in insn 253
changing reg in insn 256
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 266
changing reg in insn 267
changing reg in insn 273
changing reg in insn 274
changing reg in insn 280
changing reg in insn 281
changing reg in insn 279
changing reg in insn 280
changing reg in insn 285
changing reg in insn 286
changing reg in insn 284
changing reg in insn 285
changing reg in insn 287
changing reg in insn 288
changing reg in insn 290
changing reg in insn 291
changing reg in insn 293
changing reg in insn 294
changing reg in insn 300
changing reg in insn 301
changing reg in insn 304
changing reg in insn 305
changing reg in insn 307
changing reg in insn 308
changing reg in insn 319
changing reg in insn 320
changing reg in insn 318
changing reg in insn 319
changing reg in insn 322
changing reg in insn 323
changing reg in insn 321
changing reg in insn 322
changing reg in insn 324
changing reg in insn 325
changing reg in insn 327
changing reg in insn 328
changing reg in insn 330
changing reg in insn 331
changing reg in insn 337
changing reg in insn 338
changing reg in insn 341
changing reg in insn 342
changing reg in insn 344
changing reg in insn 345
changing reg in insn 351
changing reg in insn 352
changing reg in insn 354
changing reg in insn 355
changing reg in insn 357
changing reg in insn 358
changing reg in insn 364
changing reg in insn 365
changing reg in insn 368
changing reg in insn 369
changing reg in insn 371
changing reg in insn 372
deleting insn with uid = 75.
deleting insn with uid = 94.
deleting insn with uid = 95.
deleting insn with uid = 132.
deleting insn with uid = 151.
deleting insn with uid = 152.
deleting insn with uid = 194.
deleting insn with uid = 213.
deleting insn with uid = 214.
deleting insn with uid = 248.
deleting insn with uid = 262.
deleting insn with uid = 296.
deleting insn with uid = 310.
deleting insn with uid = 333.
deleting insn with uid = 347.
deleting insn with uid = 360.
deleting insn with uid = 374.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 153.
verify found no changes in insn with uid = 195.
verify found no changes in insn with uid = 215.
verify found no changes in insn with uid = 247.
verify found no changes in insn with uid = 261.
verify found no changes in insn with uid = 295.
verify found no changes in insn with uid = 309.
verify found no changes in insn with uid = 332.
verify found no changes in insn with uid = 346.
verify found no changes in insn with uid = 359.
verify found no changes in insn with uid = 373.


int quecc(float*, float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8]
;;  ref usage 	r0={145d,131u} r1={41d,27u,26e} r2={15d,1u} r3={8d,8u} r4={15d,1u} r5={15d,1u} r6={1d,167u} r7={1d,28u} r8={14d} r9={14d} r10={14d} r11={14d} r12={14d} r13={14d} r14={14d} r15={14d} r17={84d,4u} r18={14d} r19={14d} r20={1d,1u,26e} r21={100d,99u} r22={24d,9u} r23={18d,3u} r24={17d,2u} r25={17d,2u} r26={17d,2u} r27={16d,1u} r28={16d,1u} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={15d,1u} r38={15d} r39={14d} r40={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} r77={14d} r78={14d} r79={14d} r80={14d} 
;;    total ref usage 1906{1365d,489u,52e} in 354{340 regular + 14 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 259 260 261 262 263 264 265 266 267 268 269 270
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) preproc.cpp:488 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) preproc.cpp:488 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])
        (reg:DI 1 dx [ scratch ])) preproc.cpp:488 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 procpar_info+0 S8 A64])
        (reg:DI 2 cx [ procpar_info ])) preproc.cpp:488 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 preprocess+0 S8 A64])
        (reg:DI 37 r8 [ preprocess ])) preproc.cpp:488 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:490 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 21 xmm0 [259])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 21 xmm0 [259])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DF 21 xmm0 [260])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [260])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DF 21 xmm0 [261])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [261])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DF 21 xmm0 [262])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [262])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DF 21 xmm0 [263])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])
        (reg:DF 21 xmm0 [263])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DF 21 xmm0 [264])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [264])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DF 21 xmm0 [265])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [265])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DF 21 xmm0 [266])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [266])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DF 21 xmm0 [267])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:493 128 {*movdf_internal}
     (nil))
(insn 28 27 29 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 21 xmm0 [267])) preproc.cpp:493 128 {*movdf_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DF 21 xmm0 [268])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:493 128 {*movdf_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 21 xmm0 [268])) preproc.cpp:493 128 {*movdf_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DF 21 xmm0 [269])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 32 31 33 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 21 xmm0 [269])) preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DF 21 xmm0 [270])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 34 33 35 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [270])) preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 35 34 381 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:496 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              13 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 271
(code_label 381 35 36 3 102 "" [1 uses])
(note 36 381 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 3 (set (reg/f:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 procpar_info+0 S8 A64])) preproc.cpp:496 89 {*movdi_internal}
     (nil))
(insn 38 37 39 3 (set (reg:SI 0 ax [orig:87 D.6923 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [271])
                (const_int 300 [0x12c])) [0 procpar_info_21(D)->num_points+0 S4 A32])) preproc.cpp:496 90 {*movsi_internal}
     (nil))
(insn 39 38 40 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.6923 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) preproc.cpp:496 7 {*cmpsi_1}
     (nil))
(jump_insn 40 39 41 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 384)
            (pc))) preproc.cpp:496 612 {*jcc_1}
     (nil)
 -> 384)
;;  succ:       14
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300
(note 41 40 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 4 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:498 90 {*movsi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 0 ax [orig:88 D.6924 ] [88])
        (sign_extend:DI (reg:SI 0 ax [272]))) preproc.cpp:498 142 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg:DI 1 dx [orig:89 D.6924 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.6924 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:498 512 {*ashldi3_1}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:498 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.6925 ] [90])
                (plus:DI (reg/f:DI 0 ax [273])
                    (reg:DI 1 dx [orig:89 D.6924 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:498 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.6924 ] [89]))
        (nil)))
(insn 47 46 48 4 (set (reg:SF 21 xmm0 [orig:91 D.6926 ] [91])
        (mem:SF (reg/f:DI 0 ax [orig:90 D.6925 ] [90]) [0 *_26+0 S4 A32])) preproc.cpp:498 129 {*movsf_internal}
     (nil))
(insn 48 47 49 4 (set (reg:DF 22 xmm1 [orig:92 D.6927 ] [92])
        (float_extend:DF (reg:SF 21 xmm0 [orig:91 D.6926 ] [91]))) preproc.cpp:498 152 {*extendsfdf2_sse}
     (nil))
(insn 49 48 50 4 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:498 90 {*movsi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 0 ax [orig:93 D.6924 ] [93])
        (sign_extend:DI (reg:SI 0 ax [274]))) preproc.cpp:498 142 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 4 (parallel [
            (set (reg:DI 1 dx [orig:94 D.6924 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.6924 ] [93])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:498 512 {*ashldi3_1}
     (nil))
(insn 52 51 53 4 (set (reg/f:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:498 89 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.6925 ] [95])
                (plus:DI (reg/f:DI 0 ax [275])
                    (reg:DI 1 dx [orig:94 D.6924 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:498 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.6924 ] [94]))
        (nil)))
(insn 54 53 55 4 (set (reg:SF 21 xmm0 [orig:96 D.6926 ] [96])
        (mem:SF (reg/f:DI 0 ax [orig:95 D.6925 ] [95]) [0 *_31+0 S4 A32])) preproc.cpp:498 129 {*movsf_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DF 21 xmm0 [orig:97 D.6927 ] [97])
        (float_extend:DF (reg:SF 21 xmm0 [orig:96 D.6926 ] [96]))) preproc.cpp:498 152 {*extendsfdf2_sse}
     (nil))
(insn 56 55 57 4 (set (reg:DF 22 xmm1 [orig:98 D.6927 ] [98])
        (mult:DF (reg:DF 22 xmm1 [orig:92 D.6927 ] [92])
            (reg:DF 21 xmm0 [orig:97 D.6927 ] [97]))) preproc.cpp:498 798 {*fop_df_comm_sse}
     (nil))
(insn 57 56 58 4 (set (reg:SI 0 ax [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:499 90 {*movsi_internal}
     (nil))
(insn 58 57 59 4 (set (reg:DI 0 ax [orig:99 D.6928 ] [99])
        (sign_extend:DI (reg:SI 0 ax [276]))) preproc.cpp:499 142 {*extendsidi2_rex64}
     (nil))
(insn 59 58 60 4 (parallel [
            (set (reg:DI 0 ax [orig:100 D.6928 ] [100])
                (plus:DI (reg:DI 0 ax [orig:99 D.6928 ] [99])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 218 {*adddi_1}
     (nil))
(insn 60 59 61 4 (parallel [
            (set (reg:DI 1 dx [orig:101 D.6928 ] [101])
                (ashift:DI (reg:DI 0 ax [orig:100 D.6928 ] [100])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 512 {*ashldi3_1}
     (nil))
(insn 61 60 62 4 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:499 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.6925 ] [102])
                (plus:DI (reg/f:DI 0 ax [277])
                    (reg:DI 1 dx [orig:101 D.6928 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:101 D.6928 ] [101]))
        (nil)))
(insn 63 62 64 4 (set (reg:SF 21 xmm0 [orig:103 D.6926 ] [103])
        (mem:SF (reg/f:DI 0 ax [orig:102 D.6925 ] [102]) [0 *_38+0 S4 A32])) preproc.cpp:499 129 {*movsf_internal}
     (nil))
(insn 64 63 65 4 (set (reg:DF 23 xmm2 [orig:104 D.6927 ] [104])
        (float_extend:DF (reg:SF 21 xmm0 [orig:103 D.6926 ] [103]))) preproc.cpp:499 152 {*extendsfdf2_sse}
     (nil))
(insn 65 64 66 4 (set (reg:SI 0 ax [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:499 90 {*movsi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:DI 0 ax [orig:105 D.6928 ] [105])
        (sign_extend:DI (reg:SI 0 ax [278]))) preproc.cpp:499 142 {*extendsidi2_rex64}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg:DI 0 ax [orig:106 D.6928 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 D.6928 ] [105])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 218 {*adddi_1}
     (nil))
(insn 68 67 69 4 (parallel [
            (set (reg:DI 1 dx [orig:107 D.6928 ] [107])
                (ashift:DI (reg:DI 0 ax [orig:106 D.6928 ] [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 512 {*ashldi3_1}
     (nil))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:499 89 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.6925 ] [108])
                (plus:DI (reg/f:DI 0 ax [279])
                    (reg:DI 1 dx [orig:107 D.6928 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.6928 ] [107]))
        (nil)))
(insn 71 70 72 4 (set (reg:SF 21 xmm0 [orig:109 D.6926 ] [109])
        (mem:SF (reg/f:DI 0 ax [orig:108 D.6925 ] [108]) [0 *_44+0 S4 A32])) preproc.cpp:499 129 {*movsf_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DF 21 xmm0 [orig:110 D.6927 ] [110])
        (float_extend:DF (reg:SF 21 xmm0 [orig:109 D.6926 ] [109]))) preproc.cpp:499 152 {*extendsfdf2_sse}
     (nil))
(insn 73 72 74 4 (set (reg:DF 21 xmm0 [orig:111 D.6927 ] [111])
        (mult:DF (reg:DF 21 xmm0 [orig:110 D.6927 ] [110])
            (reg:DF 23 xmm2 [orig:104 D.6927 ] [104]))) preproc.cpp:499 798 {*fop_df_comm_sse}
     (nil))
(insn 74 73 76 4 (set (reg:DF 21 xmm0 [orig:112 D.6927 ] [112])
        (plus:DF (reg:DF 21 xmm0 [orig:111 D.6927 ] [111])
            (reg:DF 22 xmm1 [orig:98 D.6927 ] [98]))) preproc.cpp:498 798 {*fop_df_comm_sse}
     (nil))
(call_insn 76 74 77 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:499 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 77 76 78 4 (set (reg:DF 0 ax [280])
        (reg:DF 21 xmm0)) preproc.cpp:499 128 {*movdf_internal}
     (nil))
(insn 78 77 79 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [280])) preproc.cpp:499 128 {*movdf_internal}
     (nil))
(insn 79 78 80 4 (set (reg:SI 0 ax [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:501 90 {*movsi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:DI 0 ax [orig:113 D.6924 ] [113])
        (sign_extend:DI (reg:SI 0 ax [281]))) preproc.cpp:501 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 4 (parallel [
            (set (reg:DI 1 dx [orig:114 D.6924 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.6924 ] [113])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:501 512 {*ashldi3_1}
     (nil))
(insn 82 81 83 4 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:501 89 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.6925 ] [115])
                (plus:DI (reg/f:DI 0 ax [282])
                    (reg:DI 1 dx [orig:114 D.6924 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:501 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.6924 ] [114]))
        (nil)))
(insn 84 83 85 4 (set (reg:SF 21 xmm0 [orig:116 D.6926 ] [116])
        (mem:SF (reg/f:DI 0 ax [orig:115 D.6925 ] [115]) [0 *_53+0 S4 A32])) preproc.cpp:501 129 {*movsf_internal}
     (nil))
(insn 85 84 86 4 (set (reg:DF 22 xmm1 [orig:117 D.6927 ] [117])
        (float_extend:DF (reg:SF 21 xmm0 [orig:116 D.6926 ] [116]))) preproc.cpp:501 152 {*extendsfdf2_sse}
     (nil))
(insn 86 85 87 4 (set (reg:SI 0 ax [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:501 90 {*movsi_internal}
     (nil))
(insn 87 86 88 4 (set (reg:DI 0 ax [orig:118 D.6928 ] [118])
        (sign_extend:DI (reg:SI 0 ax [283]))) preproc.cpp:501 142 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg:DI 0 ax [orig:119 D.6928 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 D.6928 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:501 218 {*adddi_1}
     (nil))
(insn 89 88 90 4 (parallel [
            (set (reg:DI 1 dx [orig:120 D.6928 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:119 D.6928 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:501 512 {*ashldi3_1}
     (nil))
(insn 90 89 91 4 (set (reg/f:DI 0 ax [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:501 89 {*movdi_internal}
     (nil))
(insn 91 90 92 4 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.6925 ] [121])
                (plus:DI (reg/f:DI 0 ax [284])
                    (reg:DI 1 dx [orig:120 D.6928 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:501 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.6928 ] [120]))
        (nil)))
(insn 92 91 93 4 (set (reg:SF 21 xmm0 [orig:122 D.6926 ] [122])
        (mem:SF (reg/f:DI 0 ax [orig:121 D.6925 ] [121]) [0 *_59+0 S4 A32])) preproc.cpp:501 129 {*movsf_internal}
     (nil))
(insn 93 92 96 4 (set (reg:DF 21 xmm0 [orig:123 D.6927 ] [123])
        (float_extend:DF (reg:SF 21 xmm0 [orig:122 D.6926 ] [122]))) preproc.cpp:501 152 {*extendsfdf2_sse}
     (nil))
(call_insn 96 93 97 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fae98e3f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:501 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 97 96 98 4 (set (reg:DF 0 ax [285])
        (reg:DF 21 xmm0)) preproc.cpp:501 128 {*movdf_internal}
     (nil))
(insn 98 97 99 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [285])) preproc.cpp:501 128 {*movdf_internal}
     (nil))
(insn 99 98 100 4 (set (reg:SI 0 ax [286])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:503 90 {*movsi_internal}
     (nil))
(insn 100 99 101 4 (set (reg:DI 0 ax [orig:124 D.6924 ] [124])
        (sign_extend:DI (reg:SI 0 ax [286]))) preproc.cpp:503 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 4 (parallel [
            (set (reg:DI 1 dx [orig:125 D.6924 ] [125])
                (ashift:DI (reg:DI 0 ax [orig:124 D.6924 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:503 512 {*ashldi3_1}
     (nil))
(insn 102 101 103 4 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:503 89 {*movdi_internal}
     (nil))
(insn 103 102 104 4 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.6925 ] [126])
                (plus:DI (reg/f:DI 0 ax [287])
                    (reg:DI 1 dx [orig:125 D.6924 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:503 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:125 D.6924 ] [125]))
        (nil)))
(insn 104 103 105 4 (set (reg:SF 21 xmm0 [orig:127 D.6926 ] [127])
        (mem:SF (reg/f:DI 0 ax [orig:126 D.6925 ] [126]) [0 *_67+0 S4 A32])) preproc.cpp:503 129 {*movsf_internal}
     (nil))
(insn 105 104 106 4 (set (reg:DF 22 xmm1 [orig:128 D.6927 ] [128])
        (float_extend:DF (reg:SF 21 xmm0 [orig:127 D.6926 ] [127]))) preproc.cpp:503 152 {*extendsfdf2_sse}
     (nil))
(insn 106 105 107 4 (set (reg:SI 0 ax [288])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:503 90 {*movsi_internal}
     (nil))
(insn 107 106 108 4 (set (reg:DI 0 ax [orig:129 D.6924 ] [129])
        (sign_extend:DI (reg:SI 0 ax [288]))) preproc.cpp:503 142 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 4 (parallel [
            (set (reg:DI 1 dx [orig:130 D.6924 ] [130])
                (ashift:DI (reg:DI 0 ax [orig:129 D.6924 ] [129])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:503 512 {*ashldi3_1}
     (nil))
(insn 109 108 110 4 (set (reg/f:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:503 89 {*movdi_internal}
     (nil))
(insn 110 109 111 4 (parallel [
            (set (reg/f:DI 0 ax [orig:131 D.6925 ] [131])
                (plus:DI (reg/f:DI 0 ax [289])
                    (reg:DI 1 dx [orig:130 D.6924 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:503 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:130 D.6924 ] [130]))
        (nil)))
(insn 111 110 112 4 (set (reg:SF 21 xmm0 [orig:132 D.6926 ] [132])
        (mem:SF (reg/f:DI 0 ax [orig:131 D.6925 ] [131]) [0 *_72+0 S4 A32])) preproc.cpp:503 129 {*movsf_internal}
     (nil))
(insn 112 111 113 4 (set (reg:DF 21 xmm0 [orig:133 D.6927 ] [133])
        (float_extend:DF (reg:SF 21 xmm0 [orig:132 D.6926 ] [132]))) preproc.cpp:503 152 {*extendsfdf2_sse}
     (nil))
(insn 113 112 114 4 (set (reg:DF 22 xmm1 [orig:134 D.6927 ] [134])
        (mult:DF (reg:DF 22 xmm1 [orig:128 D.6927 ] [128])
            (reg:DF 21 xmm0 [orig:133 D.6927 ] [133]))) preproc.cpp:503 798 {*fop_df_comm_sse}
     (nil))
(insn 114 113 115 4 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:504 90 {*movsi_internal}
     (nil))
(insn 115 114 116 4 (set (reg:DI 0 ax [orig:135 D.6928 ] [135])
        (sign_extend:DI (reg:SI 0 ax [290]))) preproc.cpp:504 142 {*extendsidi2_rex64}
     (nil))
(insn 116 115 117 4 (parallel [
            (set (reg:DI 0 ax [orig:136 D.6928 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 D.6928 ] [135])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 218 {*adddi_1}
     (nil))
(insn 117 116 118 4 (parallel [
            (set (reg:DI 1 dx [orig:137 D.6928 ] [137])
                (ashift:DI (reg:DI 0 ax [orig:136 D.6928 ] [136])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 512 {*ashldi3_1}
     (nil))
(insn 118 117 119 4 (set (reg/f:DI 0 ax [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:504 89 {*movdi_internal}
     (nil))
(insn 119 118 120 4 (parallel [
            (set (reg/f:DI 0 ax [orig:138 D.6925 ] [138])
                (plus:DI (reg/f:DI 0 ax [291])
                    (reg:DI 1 dx [orig:137 D.6928 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:137 D.6928 ] [137]))
        (nil)))
(insn 120 119 121 4 (set (reg:SF 21 xmm0 [orig:139 D.6926 ] [139])
        (mem:SF (reg/f:DI 0 ax [orig:138 D.6925 ] [138]) [0 *_79+0 S4 A32])) preproc.cpp:504 129 {*movsf_internal}
     (nil))
(insn 121 120 122 4 (set (reg:DF 23 xmm2 [orig:140 D.6927 ] [140])
        (float_extend:DF (reg:SF 21 xmm0 [orig:139 D.6926 ] [139]))) preproc.cpp:504 152 {*extendsfdf2_sse}
     (nil))
(insn 122 121 123 4 (set (reg:SI 0 ax [292])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:504 90 {*movsi_internal}
     (nil))
(insn 123 122 124 4 (set (reg:DI 0 ax [orig:141 D.6928 ] [141])
        (sign_extend:DI (reg:SI 0 ax [292]))) preproc.cpp:504 142 {*extendsidi2_rex64}
     (nil))
(insn 124 123 125 4 (parallel [
            (set (reg:DI 0 ax [orig:142 D.6928 ] [142])
                (plus:DI (reg:DI 0 ax [orig:141 D.6928 ] [141])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 218 {*adddi_1}
     (nil))
(insn 125 124 126 4 (parallel [
            (set (reg:DI 1 dx [orig:143 D.6928 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.6928 ] [142])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 512 {*ashldi3_1}
     (nil))
(insn 126 125 127 4 (set (reg/f:DI 0 ax [293])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:504 89 {*movdi_internal}
     (nil))
(insn 127 126 128 4 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.6925 ] [144])
                (plus:DI (reg/f:DI 0 ax [293])
                    (reg:DI 1 dx [orig:143 D.6928 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.6928 ] [143]))
        (nil)))
(insn 128 127 129 4 (set (reg:SF 21 xmm0 [orig:145 D.6926 ] [145])
        (mem:SF (reg/f:DI 0 ax [orig:144 D.6925 ] [144]) [0 *_85+0 S4 A32])) preproc.cpp:504 129 {*movsf_internal}
     (nil))
(insn 129 128 130 4 (set (reg:DF 21 xmm0 [orig:146 D.6927 ] [146])
        (float_extend:DF (reg:SF 21 xmm0 [orig:145 D.6926 ] [145]))) preproc.cpp:504 152 {*extendsfdf2_sse}
     (nil))
(insn 130 129 131 4 (set (reg:DF 21 xmm0 [orig:147 D.6927 ] [147])
        (mult:DF (reg:DF 21 xmm0 [orig:146 D.6927 ] [146])
            (reg:DF 23 xmm2 [orig:140 D.6927 ] [140]))) preproc.cpp:504 798 {*fop_df_comm_sse}
     (nil))
(insn 131 130 133 4 (set (reg:DF 21 xmm0 [orig:148 D.6927 ] [148])
        (plus:DF (reg:DF 21 xmm0 [orig:147 D.6927 ] [147])
            (reg:DF 22 xmm1 [orig:134 D.6927 ] [134]))) preproc.cpp:503 798 {*fop_df_comm_sse}
     (nil))
(call_insn 133 131 134 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:504 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 134 133 135 4 (set (reg:DF 0 ax [294])
        (reg:DF 21 xmm0)) preproc.cpp:504 128 {*movdf_internal}
     (nil))
(insn 135 134 136 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [294])) preproc.cpp:504 128 {*movdf_internal}
     (nil))
(insn 136 135 137 4 (set (reg:SI 0 ax [295])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:506 90 {*movsi_internal}
     (nil))
(insn 137 136 138 4 (set (reg:DI 0 ax [orig:149 D.6924 ] [149])
        (sign_extend:DI (reg:SI 0 ax [295]))) preproc.cpp:506 142 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 4 (parallel [
            (set (reg:DI 1 dx [orig:150 D.6924 ] [150])
                (ashift:DI (reg:DI 0 ax [orig:149 D.6924 ] [149])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:506 512 {*ashldi3_1}
     (nil))
(insn 139 138 140 4 (set (reg/f:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:506 89 {*movdi_internal}
     (nil))
(insn 140 139 141 4 (parallel [
            (set (reg/f:DI 0 ax [orig:151 D.6925 ] [151])
                (plus:DI (reg/f:DI 0 ax [296])
                    (reg:DI 1 dx [orig:150 D.6924 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:506 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:150 D.6924 ] [150]))
        (nil)))
(insn 141 140 142 4 (set (reg:SF 21 xmm0 [orig:152 D.6926 ] [152])
        (mem:SF (reg/f:DI 0 ax [orig:151 D.6925 ] [151]) [0 *_94+0 S4 A32])) preproc.cpp:506 129 {*movsf_internal}
     (nil))
(insn 142 141 143 4 (set (reg:DF 22 xmm1 [orig:153 D.6927 ] [153])
        (float_extend:DF (reg:SF 21 xmm0 [orig:152 D.6926 ] [152]))) preproc.cpp:506 152 {*extendsfdf2_sse}
     (nil))
(insn 143 142 144 4 (set (reg:SI 0 ax [297])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:506 90 {*movsi_internal}
     (nil))
(insn 144 143 145 4 (set (reg:DI 0 ax [orig:154 D.6928 ] [154])
        (sign_extend:DI (reg:SI 0 ax [297]))) preproc.cpp:506 142 {*extendsidi2_rex64}
     (nil))
(insn 145 144 146 4 (parallel [
            (set (reg:DI 0 ax [orig:155 D.6928 ] [155])
                (plus:DI (reg:DI 0 ax [orig:154 D.6928 ] [154])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:506 218 {*adddi_1}
     (nil))
(insn 146 145 147 4 (parallel [
            (set (reg:DI 1 dx [orig:156 D.6928 ] [156])
                (ashift:DI (reg:DI 0 ax [orig:155 D.6928 ] [155])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:506 512 {*ashldi3_1}
     (nil))
(insn 147 146 148 4 (set (reg/f:DI 0 ax [298])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:506 89 {*movdi_internal}
     (nil))
(insn 148 147 149 4 (parallel [
            (set (reg/f:DI 0 ax [orig:157 D.6925 ] [157])
                (plus:DI (reg/f:DI 0 ax [298])
                    (reg:DI 1 dx [orig:156 D.6928 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:506 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:156 D.6928 ] [156]))
        (nil)))
(insn 149 148 150 4 (set (reg:SF 21 xmm0 [orig:158 D.6926 ] [158])
        (mem:SF (reg/f:DI 0 ax [orig:157 D.6925 ] [157]) [0 *_100+0 S4 A32])) preproc.cpp:506 129 {*movsf_internal}
     (nil))
(insn 150 149 153 4 (set (reg:DF 21 xmm0 [orig:159 D.6927 ] [159])
        (float_extend:DF (reg:SF 21 xmm0 [orig:158 D.6926 ] [158]))) preproc.cpp:506 152 {*extendsfdf2_sse}
     (nil))
(call_insn 153 150 154 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fae98e3f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:506 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 154 153 155 4 (set (reg:DF 0 ax [299])
        (reg:DF 21 xmm0)) preproc.cpp:506 128 {*movdf_internal}
     (nil))
(insn 155 154 156 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [299])) preproc.cpp:506 128 {*movdf_internal}
     (nil))
(insn 156 155 157 4 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 preprocess+0 S8 A64])) preproc.cpp:508 89 {*movdi_internal}
     (nil))
(insn 157 156 158 4 (set (reg:SI 0 ax [orig:160 D.6923 ] [160])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [300])
                (const_int 44 [0x2c])) [0 preprocess_105(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:508 90 {*movsi_internal}
     (nil))
(insn 158 157 159 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:160 D.6923 ] [160])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) preproc.cpp:508 7 {*cmpsi_1}
     (nil))
(jump_insn 159 158 160 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 316)
            (pc))) preproc.cpp:508 612 {*jcc_1}
     (nil)
 -> 316)
;;  succ:       5 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315
(note 160 159 161 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 161 160 162 5 (set (reg:SI 0 ax [301])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:510 90 {*movsi_internal}
     (nil))
(insn 162 161 163 5 (set (reg:DI 0 ax [orig:161 D.6924 ] [161])
        (sign_extend:DI (reg:SI 0 ax [301]))) preproc.cpp:510 142 {*extendsidi2_rex64}
     (nil))
(insn 163 162 164 5 (parallel [
            (set (reg:DI 1 dx [orig:162 D.6924 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:161 D.6924 ] [161])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:510 512 {*ashldi3_1}
     (nil))
(insn 164 163 165 5 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:510 89 {*movdi_internal}
     (nil))
(insn 165 164 166 5 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.6925 ] [163])
                (plus:DI (reg/f:DI 0 ax [302])
                    (reg:DI 1 dx [orig:162 D.6924 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:510 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.6924 ] [162]))
        (nil)))
(insn 166 165 167 5 (set (reg:SF 21 xmm0 [orig:164 D.6926 ] [164])
        (mem:SF (reg/f:DI 0 ax [orig:163 D.6925 ] [163]) [0 *_110+0 S4 A32])) preproc.cpp:510 129 {*movsf_internal}
     (nil))
(insn 167 166 168 5 (set (reg:DF 22 xmm1 [orig:165 D.6927 ] [165])
        (float_extend:DF (reg:SF 21 xmm0 [orig:164 D.6926 ] [164]))) preproc.cpp:510 152 {*extendsfdf2_sse}
     (nil))
(insn 168 167 169 5 (set (reg:SI 0 ax [303])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:510 90 {*movsi_internal}
     (nil))
(insn 169 168 170 5 (set (reg:DI 0 ax [orig:166 D.6924 ] [166])
        (sign_extend:DI (reg:SI 0 ax [303]))) preproc.cpp:510 142 {*extendsidi2_rex64}
     (nil))
(insn 170 169 171 5 (parallel [
            (set (reg:DI 1 dx [orig:167 D.6924 ] [167])
                (ashift:DI (reg:DI 0 ax [orig:166 D.6924 ] [166])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:510 512 {*ashldi3_1}
     (nil))
(insn 171 170 172 5 (set (reg/f:DI 0 ax [304])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:510 89 {*movdi_internal}
     (nil))
(insn 172 171 173 5 (parallel [
            (set (reg/f:DI 0 ax [orig:168 D.6925 ] [168])
                (plus:DI (reg/f:DI 0 ax [304])
                    (reg:DI 1 dx [orig:167 D.6924 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:510 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:167 D.6924 ] [167]))
        (nil)))
(insn 173 172 174 5 (set (reg:SF 21 xmm0 [orig:169 D.6926 ] [169])
        (mem:SF (reg/f:DI 0 ax [orig:168 D.6925 ] [168]) [0 *_115+0 S4 A32])) preproc.cpp:510 129 {*movsf_internal}
     (nil))
(insn 174 173 175 5 (set (reg:DF 21 xmm0 [orig:170 D.6927 ] [170])
        (float_extend:DF (reg:SF 21 xmm0 [orig:169 D.6926 ] [169]))) preproc.cpp:510 152 {*extendsfdf2_sse}
     (nil))
(insn 175 174 176 5 (set (reg:DF 22 xmm1 [orig:171 D.6927 ] [171])
        (mult:DF (reg:DF 22 xmm1 [orig:165 D.6927 ] [165])
            (reg:DF 21 xmm0 [orig:170 D.6927 ] [170]))) preproc.cpp:510 798 {*fop_df_comm_sse}
     (nil))
(insn 176 175 177 5 (set (reg:SI 0 ax [305])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:511 90 {*movsi_internal}
     (nil))
(insn 177 176 178 5 (set (reg:DI 0 ax [orig:172 D.6928 ] [172])
        (sign_extend:DI (reg:SI 0 ax [305]))) preproc.cpp:511 142 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 5 (parallel [
            (set (reg:DI 0 ax [orig:173 D.6928 ] [173])
                (plus:DI (reg:DI 0 ax [orig:172 D.6928 ] [172])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 218 {*adddi_1}
     (nil))
(insn 179 178 180 5 (parallel [
            (set (reg:DI 1 dx [orig:174 D.6928 ] [174])
                (ashift:DI (reg:DI 0 ax [orig:173 D.6928 ] [173])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 512 {*ashldi3_1}
     (nil))
(insn 180 179 181 5 (set (reg/f:DI 0 ax [306])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:511 89 {*movdi_internal}
     (nil))
(insn 181 180 182 5 (parallel [
            (set (reg/f:DI 0 ax [orig:175 D.6925 ] [175])
                (plus:DI (reg/f:DI 0 ax [306])
                    (reg:DI 1 dx [orig:174 D.6928 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:174 D.6928 ] [174]))
        (nil)))
(insn 182 181 183 5 (set (reg:SF 21 xmm0 [orig:176 D.6926 ] [176])
        (mem:SF (reg/f:DI 0 ax [orig:175 D.6925 ] [175]) [0 *_122+0 S4 A32])) preproc.cpp:511 129 {*movsf_internal}
     (nil))
(insn 183 182 184 5 (set (reg:DF 23 xmm2 [orig:177 D.6927 ] [177])
        (float_extend:DF (reg:SF 21 xmm0 [orig:176 D.6926 ] [176]))) preproc.cpp:511 152 {*extendsfdf2_sse}
     (nil))
(insn 184 183 185 5 (set (reg:SI 0 ax [307])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:511 90 {*movsi_internal}
     (nil))
(insn 185 184 186 5 (set (reg:DI 0 ax [orig:178 D.6928 ] [178])
        (sign_extend:DI (reg:SI 0 ax [307]))) preproc.cpp:511 142 {*extendsidi2_rex64}
     (nil))
(insn 186 185 187 5 (parallel [
            (set (reg:DI 0 ax [orig:179 D.6928 ] [179])
                (plus:DI (reg:DI 0 ax [orig:178 D.6928 ] [178])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 218 {*adddi_1}
     (nil))
(insn 187 186 188 5 (parallel [
            (set (reg:DI 1 dx [orig:180 D.6928 ] [180])
                (ashift:DI (reg:DI 0 ax [orig:179 D.6928 ] [179])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 512 {*ashldi3_1}
     (nil))
(insn 188 187 189 5 (set (reg/f:DI 0 ax [308])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:511 89 {*movdi_internal}
     (nil))
(insn 189 188 190 5 (parallel [
            (set (reg/f:DI 0 ax [orig:181 D.6925 ] [181])
                (plus:DI (reg/f:DI 0 ax [308])
                    (reg:DI 1 dx [orig:180 D.6928 ] [180])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:180 D.6928 ] [180]))
        (nil)))
(insn 190 189 191 5 (set (reg:SF 21 xmm0 [orig:182 D.6926 ] [182])
        (mem:SF (reg/f:DI 0 ax [orig:181 D.6925 ] [181]) [0 *_128+0 S4 A32])) preproc.cpp:511 129 {*movsf_internal}
     (nil))
(insn 191 190 192 5 (set (reg:DF 21 xmm0 [orig:183 D.6927 ] [183])
        (float_extend:DF (reg:SF 21 xmm0 [orig:182 D.6926 ] [182]))) preproc.cpp:511 152 {*extendsfdf2_sse}
     (nil))
(insn 192 191 193 5 (set (reg:DF 21 xmm0 [orig:184 D.6927 ] [184])
        (mult:DF (reg:DF 21 xmm0 [orig:183 D.6927 ] [183])
            (reg:DF 23 xmm2 [orig:177 D.6927 ] [177]))) preproc.cpp:511 798 {*fop_df_comm_sse}
     (nil))
(insn 193 192 195 5 (set (reg:DF 21 xmm0 [orig:185 D.6927 ] [185])
        (plus:DF (reg:DF 21 xmm0 [orig:184 D.6927 ] [184])
            (reg:DF 22 xmm1 [orig:171 D.6927 ] [171]))) preproc.cpp:510 798 {*fop_df_comm_sse}
     (nil))
(call_insn 195 193 196 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7fae98e83d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:511 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 196 195 197 5 (set (reg:DF 0 ax [309])
        (reg:DF 21 xmm0)) preproc.cpp:511 128 {*movdf_internal}
     (nil))
(insn 197 196 198 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [309])) preproc.cpp:511 128 {*movdf_internal}
     (nil))
(insn 198 197 199 5 (set (reg:SI 0 ax [310])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:513 90 {*movsi_internal}
     (nil))
(insn 199 198 200 5 (set (reg:DI 0 ax [orig:186 D.6924 ] [186])
        (sign_extend:DI (reg:SI 0 ax [310]))) preproc.cpp:513 142 {*extendsidi2_rex64}
     (nil))
(insn 200 199 201 5 (parallel [
            (set (reg:DI 1 dx [orig:187 D.6924 ] [187])
                (ashift:DI (reg:DI 0 ax [orig:186 D.6924 ] [186])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:513 512 {*ashldi3_1}
     (nil))
(insn 201 200 202 5 (set (reg/f:DI 0 ax [311])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:513 89 {*movdi_internal}
     (nil))
(insn 202 201 203 5 (parallel [
            (set (reg/f:DI 0 ax [orig:188 D.6925 ] [188])
                (plus:DI (reg/f:DI 0 ax [311])
                    (reg:DI 1 dx [orig:187 D.6924 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:513 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:187 D.6924 ] [187]))
        (nil)))
(insn 203 202 204 5 (set (reg:SF 21 xmm0 [orig:189 D.6926 ] [189])
        (mem:SF (reg/f:DI 0 ax [orig:188 D.6925 ] [188]) [0 *_137+0 S4 A32])) preproc.cpp:513 129 {*movsf_internal}
     (nil))
(insn 204 203 205 5 (set (reg:DF 22 xmm1 [orig:190 D.6927 ] [190])
        (float_extend:DF (reg:SF 21 xmm0 [orig:189 D.6926 ] [189]))) preproc.cpp:513 152 {*extendsfdf2_sse}
     (nil))
(insn 205 204 206 5 (set (reg:SI 0 ax [312])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:513 90 {*movsi_internal}
     (nil))
(insn 206 205 207 5 (set (reg:DI 0 ax [orig:191 D.6928 ] [191])
        (sign_extend:DI (reg:SI 0 ax [312]))) preproc.cpp:513 142 {*extendsidi2_rex64}
     (nil))
(insn 207 206 208 5 (parallel [
            (set (reg:DI 0 ax [orig:192 D.6928 ] [192])
                (plus:DI (reg:DI 0 ax [orig:191 D.6928 ] [191])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:513 218 {*adddi_1}
     (nil))
(insn 208 207 209 5 (parallel [
            (set (reg:DI 1 dx [orig:193 D.6928 ] [193])
                (ashift:DI (reg:DI 0 ax [orig:192 D.6928 ] [192])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:513 512 {*ashldi3_1}
     (nil))
(insn 209 208 210 5 (set (reg/f:DI 0 ax [313])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:513 89 {*movdi_internal}
     (nil))
(insn 210 209 211 5 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.6925 ] [194])
                (plus:DI (reg/f:DI 0 ax [313])
                    (reg:DI 1 dx [orig:193 D.6928 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:513 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:193 D.6928 ] [193]))
        (nil)))
(insn 211 210 212 5 (set (reg:SF 21 xmm0 [orig:195 D.6926 ] [195])
        (mem:SF (reg/f:DI 0 ax [orig:194 D.6925 ] [194]) [0 *_143+0 S4 A32])) preproc.cpp:513 129 {*movsf_internal}
     (nil))
(insn 212 211 215 5 (set (reg:DF 21 xmm0 [orig:196 D.6927 ] [196])
        (float_extend:DF (reg:SF 21 xmm0 [orig:195 D.6926 ] [195]))) preproc.cpp:513 152 {*extendsfdf2_sse}
     (nil))
(call_insn 215 212 216 5 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7fae98e3f870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:513 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 216 215 217 5 (set (reg:DF 0 ax [314])
        (reg:DF 21 xmm0)) preproc.cpp:513 128 {*movdf_internal}
     (nil))
(insn 217 216 218 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [314])) preproc.cpp:513 128 {*movdf_internal}
     (nil))
(insn 218 217 219 5 (set (reg:DF 21 xmm0 [315])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S8 A64])) preproc.cpp:519 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 9.9999999999999995474811182588625868561393872369080782e-7 [0x0.8637bd05af6c68p-19])
        (nil)))
(insn 219 218 220 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [315])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:519 56 {*cmpiudf_sse}
     (nil))
(jump_insn 220 219 224 5 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 402)
            (pc))) preproc.cpp:519 612 {*jcc_1}
     (nil)
 -> 402)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 316
(note 224 220 225 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 226 6 (set (reg:DF 21 xmm0 [316])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:520 128 {*movdf_internal}
     (nil))
(insn 226 225 403 6 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [316])) preproc.cpp:520 128 {*movdf_internal}
     (nil))
(jump_insn 403 226 404 6 (set (pc)
        (label_ref 234)) 654 {jump}
     (nil)
 -> 234)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 404 403 402)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 317 318
(code_label 402 404 230 7 106 "" [1 uses])
(note 230 402 231 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 231 230 232 7 (set (reg:DF 21 xmm0 [318])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])) preproc.cpp:522 128 {*movdf_internal}
     (nil))
(insn 232 231 233 7 (set (reg:DF 21 xmm0 [317])
        (div:DF (reg:DF 21 xmm0 [318])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:522 805 {*fop_df_1_sse}
     (nil))
(insn 233 232 234 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [317])) preproc.cpp:522 128 {*movdf_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 319 320 321 322 323 324 325 326 327
(code_label 234 233 235 8 97 "" [1 uses])
(note 235 234 236 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 8 (set (reg:DF 21 xmm0 [320])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])) preproc.cpp:525 128 {*movdf_internal}
     (nil))
(insn 237 236 238 8 (set (reg:DF 21 xmm0 [319])
        (minus:DF (reg:DF 21 xmm0 [320])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64]))) preproc.cpp:525 805 {*fop_df_1_sse}
     (nil))
(insn 238 237 239 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [319])) preproc.cpp:525 128 {*movdf_internal}
     (nil))
(insn 239 238 240 8 (set (reg:SI 0 ax [321])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:527 90 {*movsi_internal}
     (nil))
(insn 240 239 241 8 (set (reg:DI 0 ax [orig:197 D.6924 ] [197])
        (sign_extend:DI (reg:SI 0 ax [321]))) preproc.cpp:527 142 {*extendsidi2_rex64}
     (nil))
(insn 241 240 242 8 (parallel [
            (set (reg:DI 1 dx [orig:198 D.6924 ] [198])
                (ashift:DI (reg:DI 0 ax [orig:197 D.6924 ] [197])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:527 512 {*ashldi3_1}
     (nil))
(insn 242 241 243 8 (set (reg/f:DI 0 ax [322])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:527 89 {*movdi_internal}
     (nil))
(insn 243 242 244 8 (parallel [
            (set (reg/f:DI 3 bx [orig:199 D.6925 ] [199])
                (plus:DI (reg:DI 1 dx [orig:198 D.6924 ] [198])
                    (reg/f:DI 0 ax [322])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:527 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:198 D.6924 ] [198]))
        (nil)))
(insn 244 243 413 8 (set (reg:SF 24 xmm3 [orig:200 D.6926 ] [200])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64]))) preproc.cpp:527 157 {*truncdfsf_fast_sse}
     (nil))
(insn 413 244 454 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 24 xmm3 [orig:200 D.6926 ] [200])) preproc.cpp:527 129 {*movsf_internal}
     (nil))
(note 454 413 438 8 NOTE_INSN_DELETED)
(note 438 454 245 8 NOTE_INSN_DELETED)
(insn 245 438 246 8 (set (reg:DF 0 ax [323])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])) preproc.cpp:527 128 {*movdf_internal}
     (nil))
(insn 246 245 414 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [323])) preproc.cpp:527 128 {*movdf_internal}
     (nil))
(insn 414 246 247 8 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:527 128 {*movdf_internal}
     (nil))
(call_insn/u 247 414 249 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fae98e445e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:527 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 249 247 415 8 (set (reg:SF 21 xmm0 [orig:202 D.6926 ] [202])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:201 D.6927 ] [201]))) preproc.cpp:527 157 {*truncdfsf_fast_sse}
     (nil))
(note 415 249 452 8 NOTE_INSN_DELETED)
(note 452 415 250 8 NOTE_INSN_DELETED)
(insn 250 452 251 8 (set (reg:SF 21 xmm0 [orig:203 D.6926 ] [203])
        (mult:SF (reg:SF 21 xmm0 [orig:202 D.6926 ] [202])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:527 797 {*fop_sf_comm_sse}
     (nil))
(insn 251 250 252 8 (set (mem:SF (reg/f:DI 3 bx [orig:199 D.6925 ] [199]) [0 *_153+0 S4 A32])
        (reg:SF 21 xmm0 [orig:203 D.6926 ] [203])) preproc.cpp:527 129 {*movsf_internal}
     (nil))
(insn 252 251 253 8 (set (reg:SI 0 ax [324])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:528 90 {*movsi_internal}
     (nil))
(insn 253 252 254 8 (set (reg:DI 0 ax [orig:204 D.6928 ] [204])
        (sign_extend:DI (reg:SI 0 ax [324]))) preproc.cpp:528 142 {*extendsidi2_rex64}
     (nil))
(insn 254 253 255 8 (parallel [
            (set (reg:DI 0 ax [orig:205 D.6928 ] [205])
                (plus:DI (reg:DI 0 ax [orig:204 D.6928 ] [204])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:528 218 {*adddi_1}
     (nil))
(insn 255 254 256 8 (parallel [
            (set (reg:DI 1 dx [orig:206 D.6928 ] [206])
                (ashift:DI (reg:DI 0 ax [orig:205 D.6928 ] [205])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:528 512 {*ashldi3_1}
     (nil))
(insn 256 255 257 8 (set (reg/f:DI 0 ax [325])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:528 89 {*movdi_internal}
     (nil))
(insn 257 256 258 8 (parallel [
            (set (reg/f:DI 3 bx [orig:207 D.6925 ] [207])
                (plus:DI (reg:DI 1 dx [orig:206 D.6928 ] [206])
                    (reg/f:DI 0 ax [325])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:528 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:206 D.6928 ] [206]))
        (nil)))
(insn 258 257 416 8 (set (reg:SF 25 xmm4 [orig:208 D.6926 ] [208])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64]))) preproc.cpp:528 157 {*truncdfsf_fast_sse}
     (nil))
(insn 416 258 453 8 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 25 xmm4 [orig:208 D.6926 ] [208])) preproc.cpp:528 129 {*movsf_internal}
     (nil))
(note 453 416 437 8 NOTE_INSN_DELETED)
(note 437 453 259 8 NOTE_INSN_DELETED)
(insn 259 437 260 8 (set (reg:DF 0 ax [326])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])) preproc.cpp:528 128 {*movdf_internal}
     (nil))
(insn 260 259 417 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [326])) preproc.cpp:528 128 {*movdf_internal}
     (nil))
(insn 417 260 261 8 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:528 128 {*movdf_internal}
     (nil))
(call_insn/u 261 417 263 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fae98e815e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:528 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 263 261 418 8 (set (reg:SF 21 xmm0 [orig:210 D.6926 ] [210])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:209 D.6927 ] [209]))) preproc.cpp:528 157 {*truncdfsf_fast_sse}
     (nil))
(note 418 263 451 8 NOTE_INSN_DELETED)
(note 451 418 264 8 NOTE_INSN_DELETED)
(insn 264 451 265 8 (set (reg:SF 21 xmm0 [orig:211 D.6926 ] [211])
        (mult:SF (reg:SF 21 xmm0 [orig:210 D.6926 ] [210])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:528 797 {*fop_sf_comm_sse}
     (nil))
(insn 265 264 266 8 (set (mem:SF (reg/f:DI 3 bx [orig:207 D.6925 ] [207]) [0 *_162+0 S4 A32])
        (reg:SF 21 xmm0 [orig:211 D.6926 ] [211])) preproc.cpp:528 129 {*movsf_internal}
     (nil))
(insn 266 265 267 8 (set (reg:DF 21 xmm0 [327])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S8 A64])) preproc.cpp:533 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 9.9999999999999995474811182588625868561393872369080782e-7 [0x0.8637bd05af6c68p-19])
        (nil)))
(insn 267 266 268 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [327])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:533 56 {*cmpiudf_sse}
     (nil))
(jump_insn 268 267 272 8 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 405)
            (pc))) preproc.cpp:533 612 {*jcc_1}
     (nil)
 -> 405)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 328
(note 272 268 273 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 273 272 274 9 (set (reg:DF 21 xmm0 [328])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:534 128 {*movdf_internal}
     (nil))
(insn 274 273 406 9 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [328])) preproc.cpp:534 128 {*movdf_internal}
     (nil))
(jump_insn 406 274 407 9 (set (pc)
        (label_ref 282)) 654 {jump}
     (nil)
 -> 282)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 407 406 405)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 329 330
(code_label 405 407 278 10 107 "" [1 uses])
(note 278 405 279 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 279 278 280 10 (set (reg:DF 21 xmm0 [330])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])) preproc.cpp:536 128 {*movdf_internal}
     (nil))
(insn 280 279 281 10 (set (reg:DF 21 xmm0 [329])
        (div:DF (reg:DF 21 xmm0 [330])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:536 805 {*fop_df_1_sse}
     (nil))
(insn 281 280 282 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 21 xmm0 [329])) preproc.cpp:536 128 {*movdf_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 331 332 333 334 335 336 337 338
(code_label 282 281 283 11 100 "" [1 uses])
(note 283 282 284 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 284 283 285 11 (set (reg:DF 21 xmm0 [332])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])) preproc.cpp:539 128 {*movdf_internal}
     (nil))
(insn 285 284 286 11 (set (reg:DF 21 xmm0 [331])
        (minus:DF (reg:DF 21 xmm0 [332])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64]))) preproc.cpp:539 805 {*fop_df_1_sse}
     (nil))
(insn 286 285 287 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 21 xmm0 [331])) preproc.cpp:539 128 {*movdf_internal}
     (nil))
(insn 287 286 288 11 (set (reg:SI 0 ax [333])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:541 90 {*movsi_internal}
     (nil))
(insn 288 287 289 11 (set (reg:DI 0 ax [orig:212 D.6924 ] [212])
        (sign_extend:DI (reg:SI 0 ax [333]))) preproc.cpp:541 142 {*extendsidi2_rex64}
     (nil))
(insn 289 288 290 11 (parallel [
            (set (reg:DI 1 dx [orig:213 D.6924 ] [213])
                (ashift:DI (reg:DI 0 ax [orig:212 D.6924 ] [212])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:541 512 {*ashldi3_1}
     (nil))
(insn 290 289 291 11 (set (reg/f:DI 0 ax [334])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:541 89 {*movdi_internal}
     (nil))
(insn 291 290 292 11 (parallel [
            (set (reg/f:DI 3 bx [orig:214 D.6925 ] [214])
                (plus:DI (reg:DI 1 dx [orig:213 D.6924 ] [213])
                    (reg/f:DI 0 ax [334])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:541 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:213 D.6924 ] [213]))
        (nil)))
(insn 292 291 419 11 (set (reg:SF 26 xmm5 [orig:215 D.6926 ] [215])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64]))) preproc.cpp:541 157 {*truncdfsf_fast_sse}
     (nil))
(insn 419 292 456 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 26 xmm5 [orig:215 D.6926 ] [215])) preproc.cpp:541 129 {*movsf_internal}
     (nil))
(note 456 419 440 11 NOTE_INSN_DELETED)
(note 440 456 293 11 NOTE_INSN_DELETED)
(insn 293 440 294 11 (set (reg:DF 0 ax [335])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])) preproc.cpp:541 128 {*movdf_internal}
     (nil))
(insn 294 293 420 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [335])) preproc.cpp:541 128 {*movdf_internal}
     (nil))
(insn 420 294 295 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:541 128 {*movdf_internal}
     (nil))
(call_insn/u 295 420 297 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fae98e445e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:541 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 297 295 421 11 (set (reg:SF 21 xmm0 [orig:217 D.6926 ] [217])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:216 D.6927 ] [216]))) preproc.cpp:541 157 {*truncdfsf_fast_sse}
     (nil))
(note 421 297 450 11 NOTE_INSN_DELETED)
(note 450 421 298 11 NOTE_INSN_DELETED)
(insn 298 450 299 11 (set (reg:SF 21 xmm0 [orig:218 D.6926 ] [218])
        (mult:SF (reg:SF 21 xmm0 [orig:217 D.6926 ] [217])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:541 797 {*fop_sf_comm_sse}
     (nil))
(insn 299 298 300 11 (set (mem:SF (reg/f:DI 3 bx [orig:214 D.6925 ] [214]) [0 *_173+0 S4 A32])
        (reg:SF 21 xmm0 [orig:218 D.6926 ] [218])) preproc.cpp:541 129 {*movsf_internal}
     (nil))
(insn 300 299 301 11 (set (reg:SI 0 ax [336])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:542 90 {*movsi_internal}
     (nil))
(insn 301 300 302 11 (set (reg:DI 0 ax [orig:219 D.6928 ] [219])
        (sign_extend:DI (reg:SI 0 ax [336]))) preproc.cpp:542 142 {*extendsidi2_rex64}
     (nil))
(insn 302 301 303 11 (parallel [
            (set (reg:DI 0 ax [orig:220 D.6928 ] [220])
                (plus:DI (reg:DI 0 ax [orig:219 D.6928 ] [219])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:542 218 {*adddi_1}
     (nil))
(insn 303 302 304 11 (parallel [
            (set (reg:DI 1 dx [orig:221 D.6928 ] [221])
                (ashift:DI (reg:DI 0 ax [orig:220 D.6928 ] [220])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:542 512 {*ashldi3_1}
     (nil))
(insn 304 303 305 11 (set (reg/f:DI 0 ax [337])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:542 89 {*movdi_internal}
     (nil))
(insn 305 304 306 11 (parallel [
            (set (reg/f:DI 3 bx [orig:222 D.6925 ] [222])
                (plus:DI (reg:DI 1 dx [orig:221 D.6928 ] [221])
                    (reg/f:DI 0 ax [337])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:542 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:221 D.6928 ] [221]))
        (nil)))
(insn 306 305 422 11 (set (reg:SF 27 xmm6 [orig:223 D.6926 ] [223])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64]))) preproc.cpp:542 157 {*truncdfsf_fast_sse}
     (nil))
(insn 422 306 455 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 27 xmm6 [orig:223 D.6926 ] [223])) preproc.cpp:542 129 {*movsf_internal}
     (nil))
(note 455 422 439 11 NOTE_INSN_DELETED)
(note 439 455 307 11 NOTE_INSN_DELETED)
(insn 307 439 308 11 (set (reg:DF 0 ax [338])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])) preproc.cpp:542 128 {*movdf_internal}
     (nil))
(insn 308 307 423 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [338])) preproc.cpp:542 128 {*movdf_internal}
     (nil))
(insn 423 308 309 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:542 128 {*movdf_internal}
     (nil))
(call_insn/u 309 423 311 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fae98e815e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:542 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 311 309 424 11 (set (reg:SF 21 xmm0 [orig:225 D.6926 ] [225])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:224 D.6927 ] [224]))) preproc.cpp:542 157 {*truncdfsf_fast_sse}
     (nil))
(note 424 311 449 11 NOTE_INSN_DELETED)
(note 449 424 312 11 NOTE_INSN_DELETED)
(insn 312 449 313 11 (set (reg:SF 21 xmm0 [orig:226 D.6926 ] [226])
        (mult:SF (reg:SF 21 xmm0 [orig:225 D.6926 ] [225])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:542 797 {*fop_sf_comm_sse}
     (nil))
(insn 313 312 408 11 (set (mem:SF (reg/f:DI 3 bx [orig:222 D.6925 ] [222]) [0 *_182+0 S4 A32])
        (reg:SF 21 xmm0 [orig:226 D.6926 ] [226])) preproc.cpp:542 129 {*movsf_internal}
     (nil))
(jump_insn 408 313 409 11 (set (pc)
        (label_ref 378)) 654 {jump}
     (nil)
 -> 378)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 409 408 316)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354
(code_label 316 409 317 12 94 "" [1 uses])
(note 317 316 318 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 318 317 319 12 (set (reg:DF 21 xmm0 [340])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])) preproc.cpp:545 128 {*movdf_internal}
     (nil))
(insn 319 318 320 12 (set (reg:DF 21 xmm0 [339])
        (minus:DF (reg:DF 21 xmm0 [340])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64]))) preproc.cpp:545 805 {*fop_df_1_sse}
     (nil))
(insn 320 319 321 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 21 xmm0 [339])) preproc.cpp:545 128 {*movdf_internal}
     (nil))
(insn 321 320 322 12 (set (reg:DF 21 xmm0 [342])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])) preproc.cpp:546 128 {*movdf_internal}
     (nil))
(insn 322 321 323 12 (set (reg:DF 21 xmm0 [341])
        (minus:DF (reg:DF 21 xmm0 [342])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64]))) preproc.cpp:546 805 {*fop_df_1_sse}
     (nil))
(insn 323 322 324 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 21 xmm0 [341])) preproc.cpp:546 128 {*movdf_internal}
     (nil))
(insn 324 323 325 12 (set (reg:SI 0 ax [343])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:548 90 {*movsi_internal}
     (nil))
(insn 325 324 326 12 (set (reg:DI 0 ax [orig:227 D.6924 ] [227])
        (sign_extend:DI (reg:SI 0 ax [343]))) preproc.cpp:548 142 {*extendsidi2_rex64}
     (nil))
(insn 326 325 327 12 (parallel [
            (set (reg:DI 1 dx [orig:228 D.6924 ] [228])
                (ashift:DI (reg:DI 0 ax [orig:227 D.6924 ] [227])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:548 512 {*ashldi3_1}
     (nil))
(insn 327 326 328 12 (set (reg/f:DI 0 ax [344])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:548 89 {*movdi_internal}
     (nil))
(insn 328 327 329 12 (parallel [
            (set (reg/f:DI 3 bx [orig:229 D.6925 ] [229])
                (plus:DI (reg:DI 1 dx [orig:228 D.6924 ] [228])
                    (reg/f:DI 0 ax [344])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:548 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:228 D.6924 ] [228]))
        (nil)))
(insn 329 328 425 12 (set (reg:SF 28 xmm7 [orig:230 D.6926 ] [230])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64]))) preproc.cpp:548 157 {*truncdfsf_fast_sse}
     (nil))
(insn 425 329 460 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 28 xmm7 [orig:230 D.6926 ] [230])) preproc.cpp:548 129 {*movsf_internal}
     (nil))
(note 460 425 444 12 NOTE_INSN_DELETED)
(note 444 460 330 12 NOTE_INSN_DELETED)
(insn 330 444 331 12 (set (reg:DF 0 ax [345])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) preproc.cpp:548 128 {*movdf_internal}
     (nil))
(insn 331 330 426 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [345])) preproc.cpp:548 128 {*movdf_internal}
     (nil))
(insn 426 331 332 12 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:548 128 {*movdf_internal}
     (nil))
(call_insn/u 332 426 334 12 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fae98e445e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:548 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 334 332 427 12 (set (reg:SF 21 xmm0 [orig:232 D.6926 ] [232])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:231 D.6927 ] [231]))) preproc.cpp:548 157 {*truncdfsf_fast_sse}
     (nil))
(note 427 334 448 12 NOTE_INSN_DELETED)
(note 448 427 335 12 NOTE_INSN_DELETED)
(insn 335 448 336 12 (set (reg:SF 21 xmm0 [orig:233 D.6926 ] [233])
        (mult:SF (reg:SF 21 xmm0 [orig:232 D.6926 ] [232])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:548 797 {*fop_sf_comm_sse}
     (nil))
(insn 336 335 337 12 (set (mem:SF (reg/f:DI 3 bx [orig:229 D.6925 ] [229]) [0 *_192+0 S4 A32])
        (reg:SF 21 xmm0 [orig:233 D.6926 ] [233])) preproc.cpp:548 129 {*movsf_internal}
     (nil))
(insn 337 336 338 12 (set (reg:SI 0 ax [346])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:549 90 {*movsi_internal}
     (nil))
(insn 338 337 339 12 (set (reg:DI 0 ax [orig:234 D.6928 ] [234])
        (sign_extend:DI (reg:SI 0 ax [346]))) preproc.cpp:549 142 {*extendsidi2_rex64}
     (nil))
(insn 339 338 340 12 (parallel [
            (set (reg:DI 0 ax [orig:235 D.6928 ] [235])
                (plus:DI (reg:DI 0 ax [orig:234 D.6928 ] [234])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:549 218 {*adddi_1}
     (nil))
(insn 340 339 341 12 (parallel [
            (set (reg:DI 1 dx [orig:236 D.6928 ] [236])
                (ashift:DI (reg:DI 0 ax [orig:235 D.6928 ] [235])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:549 512 {*ashldi3_1}
     (nil))
(insn 341 340 342 12 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:549 89 {*movdi_internal}
     (nil))
(insn 342 341 343 12 (parallel [
            (set (reg/f:DI 3 bx [orig:237 D.6925 ] [237])
                (plus:DI (reg:DI 1 dx [orig:236 D.6928 ] [236])
                    (reg/f:DI 0 ax [347])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:549 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:236 D.6928 ] [236]))
        (nil)))
(insn 343 342 428 12 (set (reg:SF 24 xmm3 [orig:238 D.6926 ] [238])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64]))) preproc.cpp:549 157 {*truncdfsf_fast_sse}
     (nil))
(insn 428 343 459 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 24 xmm3 [orig:238 D.6926 ] [238])) preproc.cpp:549 129 {*movsf_internal}
     (nil))
(note 459 428 443 12 NOTE_INSN_DELETED)
(note 443 459 344 12 NOTE_INSN_DELETED)
(insn 344 443 345 12 (set (reg:DF 0 ax [348])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) preproc.cpp:549 128 {*movdf_internal}
     (nil))
(insn 345 344 429 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [348])) preproc.cpp:549 128 {*movdf_internal}
     (nil))
(insn 429 345 346 12 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:549 128 {*movdf_internal}
     (nil))
(call_insn/u 346 429 348 12 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fae98e815e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:549 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 348 346 430 12 (set (reg:SF 21 xmm0 [orig:240 D.6926 ] [240])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:239 D.6927 ] [239]))) preproc.cpp:549 157 {*truncdfsf_fast_sse}
     (nil))
(note 430 348 447 12 NOTE_INSN_DELETED)
(note 447 430 349 12 NOTE_INSN_DELETED)
(insn 349 447 350 12 (set (reg:SF 21 xmm0 [orig:241 D.6926 ] [241])
        (mult:SF (reg:SF 21 xmm0 [orig:240 D.6926 ] [240])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:549 797 {*fop_sf_comm_sse}
     (nil))
(insn 350 349 351 12 (set (mem:SF (reg/f:DI 3 bx [orig:237 D.6925 ] [237]) [0 *_201+0 S4 A32])
        (reg:SF 21 xmm0 [orig:241 D.6926 ] [241])) preproc.cpp:549 129 {*movsf_internal}
     (nil))
(insn 351 350 352 12 (set (reg:SI 0 ax [349])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:551 90 {*movsi_internal}
     (nil))
(insn 352 351 353 12 (set (reg:DI 0 ax [orig:242 D.6924 ] [242])
        (sign_extend:DI (reg:SI 0 ax [349]))) preproc.cpp:551 142 {*extendsidi2_rex64}
     (nil))
(insn 353 352 354 12 (parallel [
            (set (reg:DI 1 dx [orig:243 D.6924 ] [243])
                (ashift:DI (reg:DI 0 ax [orig:242 D.6924 ] [242])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:551 512 {*ashldi3_1}
     (nil))
(insn 354 353 355 12 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:551 89 {*movdi_internal}
     (nil))
(insn 355 354 356 12 (parallel [
            (set (reg/f:DI 3 bx [orig:244 D.6925 ] [244])
                (plus:DI (reg:DI 1 dx [orig:243 D.6924 ] [243])
                    (reg/f:DI 0 ax [350])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:551 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:243 D.6924 ] [243]))
        (nil)))
(insn 356 355 431 12 (set (reg:SF 25 xmm4 [orig:245 D.6926 ] [245])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64]))) preproc.cpp:551 157 {*truncdfsf_fast_sse}
     (nil))
(insn 431 356 458 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 25 xmm4 [orig:245 D.6926 ] [245])) preproc.cpp:551 129 {*movsf_internal}
     (nil))
(note 458 431 442 12 NOTE_INSN_DELETED)
(note 442 458 357 12 NOTE_INSN_DELETED)
(insn 357 442 358 12 (set (reg:DF 0 ax [351])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) preproc.cpp:551 128 {*movdf_internal}
     (nil))
(insn 358 357 432 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [351])) preproc.cpp:551 128 {*movdf_internal}
     (nil))
(insn 432 358 359 12 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:551 128 {*movdf_internal}
     (nil))
(call_insn/u 359 432 361 12 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7fae98e445e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:551 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 361 359 433 12 (set (reg:SF 21 xmm0 [orig:247 D.6926 ] [247])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:246 D.6927 ] [246]))) preproc.cpp:551 157 {*truncdfsf_fast_sse}
     (nil))
(note 433 361 446 12 NOTE_INSN_DELETED)
(note 446 433 362 12 NOTE_INSN_DELETED)
(insn 362 446 363 12 (set (reg:SF 21 xmm0 [orig:248 D.6926 ] [248])
        (mult:SF (reg:SF 21 xmm0 [orig:247 D.6926 ] [247])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:551 797 {*fop_sf_comm_sse}
     (nil))
(insn 363 362 364 12 (set (mem:SF (reg/f:DI 3 bx [orig:244 D.6925 ] [244]) [0 *_209+0 S4 A32])
        (reg:SF 21 xmm0 [orig:248 D.6926 ] [248])) preproc.cpp:551 129 {*movsf_internal}
     (nil))
(insn 364 363 365 12 (set (reg:SI 0 ax [352])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:552 90 {*movsi_internal}
     (nil))
(insn 365 364 366 12 (set (reg:DI 0 ax [orig:249 D.6928 ] [249])
        (sign_extend:DI (reg:SI 0 ax [352]))) preproc.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 366 365 367 12 (parallel [
            (set (reg:DI 0 ax [orig:250 D.6928 ] [250])
                (plus:DI (reg:DI 0 ax [orig:249 D.6928 ] [249])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:552 218 {*adddi_1}
     (nil))
(insn 367 366 368 12 (parallel [
            (set (reg:DI 1 dx [orig:251 D.6928 ] [251])
                (ashift:DI (reg:DI 0 ax [orig:250 D.6928 ] [250])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:552 512 {*ashldi3_1}
     (nil))
(insn 368 367 369 12 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:552 89 {*movdi_internal}
     (nil))
(insn 369 368 370 12 (parallel [
            (set (reg/f:DI 3 bx [orig:252 D.6925 ] [252])
                (plus:DI (reg:DI 1 dx [orig:251 D.6928 ] [251])
                    (reg/f:DI 0 ax [353])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:552 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:251 D.6928 ] [251]))
        (nil)))
(insn 370 369 434 12 (set (reg:SF 26 xmm5 [orig:253 D.6926 ] [253])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64]))) preproc.cpp:552 157 {*truncdfsf_fast_sse}
     (nil))
(insn 434 370 457 12 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 26 xmm5 [orig:253 D.6926 ] [253])) preproc.cpp:552 129 {*movsf_internal}
     (nil))
(note 457 434 441 12 NOTE_INSN_DELETED)
(note 441 457 371 12 NOTE_INSN_DELETED)
(insn 371 441 372 12 (set (reg:DF 0 ax [354])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) preproc.cpp:552 128 {*movdf_internal}
     (nil))
(insn 372 371 435 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [354])) preproc.cpp:552 128 {*movdf_internal}
     (nil))
(insn 435 372 373 12 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:552 128 {*movdf_internal}
     (nil))
(call_insn/u 373 435 375 12 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7fae98e815e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:552 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 375 373 436 12 (set (reg:SF 21 xmm0 [orig:255 D.6926 ] [255])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:254 D.6927 ] [254]))) preproc.cpp:552 157 {*truncdfsf_fast_sse}
     (nil))
(note 436 375 445 12 NOTE_INSN_DELETED)
(note 445 436 376 12 NOTE_INSN_DELETED)
(insn 376 445 377 12 (set (reg:SF 21 xmm0 [orig:256 D.6926 ] [256])
        (mult:SF (reg:SF 21 xmm0 [orig:255 D.6926 ] [255])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:552 797 {*fop_sf_comm_sse}
     (nil))
(insn 377 376 378 12 (set (mem:SF (reg/f:DI 3 bx [orig:252 D.6925 ] [252]) [0 *_218+0 S4 A32])
        (reg:SF 21 xmm0 [orig:256 D.6926 ] [256])) preproc.cpp:552 129 {*movsf_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 378 377 379 13 101 "" [1 uses])
(note 379 378 380 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 380 379 410 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:496 217 {*addsi_1}
     (nil))
(jump_insn 410 380 411 13 (set (pc)
        (label_ref 381)) preproc.cpp:496 654 {jump}
     (nil)
 -> 381)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 411 410 384)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 257 258
(code_label 384 411 385 14 93 "" [1 uses])
(note 385 384 386 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 386 385 389 14 (set (reg:SI 0 ax [orig:257 D.6923 ] [257])
        (const_int 1 [0x1])) preproc.cpp:556 90 {*movsi_internal}
     (nil))
(insn 389 386 393 14 (set (reg:SI 0 ax [orig:258 <retval> ] [258])
        (reg:SI 0 ax [orig:257 D.6923 ] [257])) preproc.cpp:556 90 {*movsi_internal}
     (nil))
(insn 393 389 394 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:258 <retval> ] [258])) preproc.cpp:557 90 {*movsi_internal}
     (nil))
(insn 394 393 412 14 (use (reg/i:SI 0 ax)) preproc.cpp:557 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 412 394 0 NOTE_INSN_DELETED)
