
;; Function void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*) (_Z10fwrite_ascPcPfP16Data_file_headerP17Data_block_headeriP12Procpar_infoP10Preprocess, funcdef_no=2, decl_uid=5435, cgraph_uid=2, symbol_order=2)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 25 count 19 (    1)
Building IRA IR
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 88.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 131.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 150.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 218.
verify found no changes in insn with uid = 224.
verify found no changes in insn with uid = 230.
verify found no changes in insn with uid = 236.
verify found no changes in insn with uid = 270.
verify found no changes in insn with uid = 284.
verify found no changes in insn with uid = 296.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r212: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r212,l0) best DIREG, allocno GENERAL_REGS
    r211: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r211,l0) best DIREG, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r208,l0) best DIREG, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r198,l0) best CREG, allocno GENERAL_REGS
    r197: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r197,l0) best CREG, allocno GENERAL_REGS
    r196: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r196,l0) best CREG, allocno GENERAL_REGS
    r195: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r195,l0) best DIREG, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a49 (r188,l0) best DIREG, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a68 (r181,l0) best DIREG, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a71 (r179,l0) best DIREG, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a74 (r177,l0) best DIREG, allocno GENERAL_REGS
    r176: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a75 (r176,l0) best DREG, allocno GENERAL_REGS
    r175: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a77 (r175,l0) best DREG, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a87 (r170,l0) best DIREG, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a95 (r166,l0) best DIREG, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a98 (r164,l0) best DIREG, allocno GENERAL_REGS
    r163: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a102 (r163,l0) best SSE_REGS, allocno SSE_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a106 (r160,l0) best DIREG, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a118 (r154,l0) best CREG, allocno GENERAL_REGS
    r153: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a119 (r153,l0) best DIREG, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a122 (r151,l0) best SIREG, allocno GENERAL_REGS
    r150: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a125 (r150,l0) best DIREG, allocno GENERAL_REGS
    r149: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a2 (r149,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r148: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a3 (r148,l0) best SSE_REGS, allocno SSE_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a11 (r143,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r142: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a12 (r142,l0) best SSE_REGS, allocno SSE_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a31 (r136,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r135: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a37 (r135,l0) best SSE_REGS, allocno SSE_REGS
    r134: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a32 (r134,l0) best SSE_REGS, allocno SSE_REGS
    r133: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a39 (r133,l0) best SSE_REGS, allocno SSE_REGS
    r132: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a33 (r132,l0) best SSE_REGS, allocno SSE_REGS
    r131: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a41 (r131,l0) best SSE_REGS, allocno SSE_REGS
    r130: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a34 (r130,l0) best SSE_REGS, allocno SSE_REGS
    r129: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a43 (r129,l0) best SSE_REGS, allocno SSE_REGS
    r128: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a35 (r128,l0) best SSE_REGS, allocno SSE_REGS
    r127: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a45 (r127,l0) best SSE_REGS, allocno SSE_REGS
    r126: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a36 (r126,l0) best SSE_REGS, allocno SSE_REGS
    r125: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a47 (r125,l0) best SSE_REGS, allocno SSE_REGS
    r124: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a50 (r124,l0) best DREG, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a51 (r122,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r121: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a58 (r121,l0) best SSE_REGS, allocno SSE_REGS
    r120: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a52 (r120,l0) best SSE_REGS, allocno SSE_REGS
    r119: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a60 (r119,l0) best SSE_REGS, allocno SSE_REGS
    r118: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a53 (r118,l0) best SSE_REGS, allocno SSE_REGS
    r117: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a62 (r117,l0) best SSE_REGS, allocno SSE_REGS
    r116: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a54 (r116,l0) best SSE_REGS, allocno SSE_REGS
    r115: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a64 (r115,l0) best SSE_REGS, allocno SSE_REGS
    r114: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a55 (r114,l0) best SSE_REGS, allocno SSE_REGS
    r113: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a66 (r113,l0) best SSE_REGS, allocno SSE_REGS
    r112: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a69 (r112,l0) best DREG, allocno GENERAL_REGS
    r111: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a72 (r111,l0) best DREG, allocno GENERAL_REGS
    r110: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a76 (r110,l0) best SIREG, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a82 (r108,l0) best AREG, allocno GENERAL_REGS
    r107: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a83 (r107,l0) best DIREG, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a86 (r105,l0) best AREG, allocno GENERAL_REGS
    r104: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a89 (r104,l0) best AREG, allocno GENERAL_REGS
    r103: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a90 (r103,l0) best DIREG, allocno GENERAL_REGS
    r102: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a92 (r102,l0) best AREG, allocno GENERAL_REGS
    r101: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a93 (r101,l0) best DIREG, allocno GENERAL_REGS
    r100: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a96 (r100,l0) best DREG, allocno GENERAL_REGS
    r99: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a99 (r99,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r98: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a100 (r98,l0) best SSE_REGS, allocno SSE_REGS
    r97: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a103 (r97,l0) best SSE_REGS, allocno SSE_REGS
    r96: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a101 (r96,l0) best SSE_REGS, allocno SSE_REGS
    r95: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a107 (r95,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r94: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a108 (r94,l0) best SSE_REGS, allocno SSE_REGS
    r93: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a109 (r93,l0) best SSE_REGS, allocno SSE_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a110 (r90,l0) best SSE_REGS, allocno SSE_REGS
    r89: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a120 (r89,l0) best DREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a124 (r87,l0) best AREG, allocno GENERAL_REGS

  a0(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a1(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a2(r149,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a3(r148,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a4(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a5(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a6(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a7(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a8(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a9(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a10(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a11(r143,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a12(r142,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a13(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a14(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a15(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a16(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a17(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a18(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a19(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a20(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a21(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a22(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a23(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a24(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a25(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a26(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a27(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a28(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a29(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a30(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a31(r136,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a32(r134,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a33(r132,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a34(r130,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a35(r128,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a36(r126,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a37(r135,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a38(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a39(r133,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a40(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a41(r131,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a42(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a43(r129,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a44(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a45(r127,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a46(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a47(r125,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a48(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a49(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a50(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a51(r122,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a52(r120,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a53(r118,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a54(r116,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a55(r114,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a56(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a57(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a58(r121,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a59(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a60(r119,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a61(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a62(r117,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a63(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a64(r115,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a65(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a66(r113,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:13
  a67(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a68(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a69(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a70(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a71(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a72(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a73(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a74(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a75(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a76(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a77(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a78(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a79(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a80(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a81(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a82(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a83(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a84(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a85(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a86(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a87(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a88(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a89(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a90(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a91(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a92(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a93(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a94(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a95(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a96(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a97(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a98(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a99(r99,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a100(r98,l0) costs: AREG:21 DREG:21 CREG:21 BREG:21 SIREG:21 DIREG:21 AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 GENERAL_REGS:21 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 MEM:15
  a101(r96,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 MEM:13
  a102(r163,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 MEM:13
  a103(r97,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 MEM:14
  a104(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a105(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a106(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a107(r95,l0) costs: AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:12 GENERAL_REGS:12 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:33 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:33 MEM:9
  a108(r94,l0) costs: AREG:21 DREG:21 CREG:21 BREG:21 SIREG:21 DIREG:21 AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 GENERAL_REGS:21 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a109(r93,l0) costs: AREG:21 DREG:21 CREG:21 BREG:21 SIREG:21 DIREG:21 AD_REGS:21 Q_REGS:21 NON_Q_REGS:21 GENERAL_REGS:21 FP_TOP_REG:42 FP_SECOND_REG:42 FLOAT_REGS:42 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:34 FP_TOP_SSE_REGS:42 FP_SECOND_SSE_REGS:42 FLOAT_SSE_REGS:42 FLOAT_INT_REGS:42 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:42 ALL_REGS:42 MEM:15
  a110(r90,l0) costs: AREG:15 DREG:15 CREG:15 BREG:15 SIREG:15 DIREG:15 AD_REGS:15 Q_REGS:15 NON_Q_REGS:15 GENERAL_REGS:15 FP_TOP_REG:33 FP_SECOND_REG:33 FLOAT_REGS:33 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:31 FP_TOP_SSE_REGS:35 FP_SECOND_SSE_REGS:35 FLOAT_SSE_REGS:35 FLOAT_INT_REGS:33 INT_SSE_REGS:26 FLOAT_INT_SSE_REGS:35 ALL_REGS:35 MEM:14
  a111(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:16 INT_SSE_REGS:16 ALL_REGS:200 MEM:2
  a112(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a113(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a114(r91,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:30 NO_REX_SSE_REGS:30 SSE_REGS:30 MMX_REGS:40 INT_SSE_REGS:32 ALL_REGS:522 MEM:12
  a115(r157,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:23 NO_REX_SSE_REGS:23 SSE_REGS:23 MMX_REGS:28 INT_SSE_REGS:24 ALL_REGS:418 MEM:8
  a116(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a117(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a118(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a119(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a120(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a121(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a122(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a123(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a124(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a125(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7

   Insn 311(l0): point = 1
   Insn 296(l0): point = 4
   Insn 295(l0): point = 6
   Insn 294(l0): point = 8
   Insn 292(l0): point = 11
   Insn 291(l0): point = 13
   Insn 256(l0): point = 16
   Insn 255(l0): point = 18
   Insn 254(l0): point = 20
   Insn 305(l0): point = 23
   Insn 285(l0): point = 25
   Insn 284(l0): point = 27
   Insn 283(l0): point = 29
   Insn 282(l0): point = 31
   Insn 281(l0): point = 33
   Insn 280(l0): point = 35
   Insn 279(l0): point = 37
   Insn 278(l0): point = 39
   Insn 277(l0): point = 41
   Insn 276(l0): point = 43
   Insn 275(l0): point = 45
   Insn 274(l0): point = 47
   Insn 273(l0): point = 49
   Insn 272(l0): point = 51
   Insn 271(l0): point = 53
   Insn 270(l0): point = 55
   Insn 269(l0): point = 57
   Insn 268(l0): point = 59
   Insn 267(l0): point = 61
   Insn 266(l0): point = 63
   Insn 265(l0): point = 65
   Insn 264(l0): point = 67
   Insn 263(l0): point = 69
   Insn 262(l0): point = 71
   Insn 261(l0): point = 73
   Insn 260(l0): point = 75
   Insn 259(l0): point = 77
   Insn 258(l0): point = 79
   Insn 252(l0): point = 82
   Insn 249(l0): point = 85
   Insn 248(l0): point = 87
   Insn 247(l0): point = 89
   Insn 245(l0): point = 92
   Insn 244(l0): point = 94
   Insn 243(l0): point = 96
   Insn 242(l0): point = 98
   Insn 241(l0): point = 100
   Insn 240(l0): point = 102
   Insn 239(l0): point = 104
   Insn 238(l0): point = 106
   Insn 237(l0): point = 108
   Insn 236(l0): point = 110
   Insn 235(l0): point = 112
   Insn 234(l0): point = 114
   Insn 233(l0): point = 116
   Insn 232(l0): point = 118
   Insn 231(l0): point = 120
   Insn 230(l0): point = 122
   Insn 229(l0): point = 124
   Insn 228(l0): point = 126
   Insn 227(l0): point = 128
   Insn 226(l0): point = 130
   Insn 225(l0): point = 132
   Insn 224(l0): point = 134
   Insn 223(l0): point = 136
   Insn 222(l0): point = 138
   Insn 221(l0): point = 140
   Insn 220(l0): point = 142
   Insn 219(l0): point = 144
   Insn 218(l0): point = 146
   Insn 217(l0): point = 148
   Insn 216(l0): point = 150
   Insn 215(l0): point = 152
   Insn 214(l0): point = 154
   Insn 213(l0): point = 156
   Insn 212(l0): point = 158
   Insn 211(l0): point = 160
   Insn 210(l0): point = 162
   Insn 209(l0): point = 164
   Insn 208(l0): point = 166
   Insn 207(l0): point = 168
   Insn 206(l0): point = 170
   Insn 205(l0): point = 172
   Insn 204(l0): point = 174
   Insn 203(l0): point = 176
   Insn 202(l0): point = 178
   Insn 201(l0): point = 180
   Insn 200(l0): point = 182
   Insn 199(l0): point = 184
   Insn 198(l0): point = 186
   Insn 197(l0): point = 188
   Insn 196(l0): point = 190
   Insn 195(l0): point = 192
   Insn 194(l0): point = 194
   Insn 193(l0): point = 196
   Insn 192(l0): point = 198
   Insn 191(l0): point = 200
   Insn 190(l0): point = 202
   Insn 189(l0): point = 204
   Insn 188(l0): point = 206
   Insn 187(l0): point = 208
   Insn 186(l0): point = 210
   Insn 185(l0): point = 212
   Insn 184(l0): point = 214
   Insn 183(l0): point = 216
   Insn 182(l0): point = 218
   Insn 181(l0): point = 220
   Insn 180(l0): point = 222
   Insn 179(l0): point = 224
   Insn 178(l0): point = 226
   Insn 177(l0): point = 228
   Insn 176(l0): point = 230
   Insn 175(l0): point = 232
   Insn 174(l0): point = 234
   Insn 173(l0): point = 236
   Insn 172(l0): point = 238
   Insn 171(l0): point = 240
   Insn 170(l0): point = 242
   Insn 169(l0): point = 244
   Insn 168(l0): point = 246
   Insn 167(l0): point = 248
   Insn 166(l0): point = 250
   Insn 165(l0): point = 252
   Insn 164(l0): point = 254
   Insn 163(l0): point = 256
   Insn 162(l0): point = 258
   Insn 161(l0): point = 260
   Insn 160(l0): point = 262
   Insn 159(l0): point = 264
   Insn 158(l0): point = 266
   Insn 157(l0): point = 268
   Insn 156(l0): point = 270
   Insn 155(l0): point = 272
   Insn 154(l0): point = 274
   Insn 153(l0): point = 276
   Insn 150(l0): point = 279
   Insn 149(l0): point = 281
   Insn 148(l0): point = 283
   Insn 147(l0): point = 285
   Insn 146(l0): point = 287
   Insn 145(l0): point = 289
   Insn 144(l0): point = 291
   Insn 143(l0): point = 293
   Insn 303(l0): point = 296
   Insn 138(l0): point = 298
   Insn 137(l0): point = 300
   Insn 136(l0): point = 302
   Insn 135(l0): point = 304
   Insn 134(l0): point = 306
   Insn 133(l0): point = 308
   Insn 132(l0): point = 310
   Insn 131(l0): point = 312
   Insn 130(l0): point = 314
   Insn 129(l0): point = 316
   Insn 128(l0): point = 318
   Insn 127(l0): point = 320
   Insn 126(l0): point = 322
   Insn 125(l0): point = 324
   Insn 124(l0): point = 326
   Insn 121(l0): point = 329
   Insn 120(l0): point = 331
   Insn 119(l0): point = 333
   Insn 118(l0): point = 335
   Insn 117(l0): point = 337
   Insn 116(l0): point = 339
   Insn 115(l0): point = 341
   Insn 114(l0): point = 343
   Insn 113(l0): point = 345
   Insn 112(l0): point = 347
   Insn 109(l0): point = 350
   Insn 108(l0): point = 352
   Insn 107(l0): point = 354
   Insn 106(l0): point = 356
   Insn 105(l0): point = 358
   Insn 104(l0): point = 360
   Insn 102(l0): point = 363
   Insn 101(l0): point = 365
   Insn 100(l0): point = 367
   Insn 99(l0): point = 369
   Insn 98(l0): point = 371
   Insn 97(l0): point = 373
   Insn 96(l0): point = 375
   Insn 95(l0): point = 377
   Insn 94(l0): point = 379
   Insn 93(l0): point = 381
   Insn 91(l0): point = 384
   Insn 90(l0): point = 386
   Insn 89(l0): point = 388
   Insn 88(l0): point = 390
   Insn 87(l0): point = 392
   Insn 86(l0): point = 394
   Insn 85(l0): point = 396
   Insn 84(l0): point = 398
   Insn 83(l0): point = 400
   Insn 82(l0): point = 402
   Insn 81(l0): point = 404
   Insn 80(l0): point = 406
   Insn 79(l0): point = 408
   Insn 78(l0): point = 410
   Insn 77(l0): point = 412
   Insn 76(l0): point = 414
   Insn 75(l0): point = 416
   Insn 74(l0): point = 418
   Insn 73(l0): point = 420
   Insn 72(l0): point = 422
   Insn 71(l0): point = 424
   Insn 70(l0): point = 426
   Insn 69(l0): point = 428
   Insn 68(l0): point = 430
   Insn 67(l0): point = 432
   Insn 66(l0): point = 434
   Insn 65(l0): point = 436
   Insn 64(l0): point = 438
   Insn 63(l0): point = 440
   Insn 62(l0): point = 442
   Insn 61(l0): point = 444
   Insn 60(l0): point = 446
   Insn 59(l0): point = 448
   Insn 58(l0): point = 450
   Insn 57(l0): point = 452
   Insn 56(l0): point = 454
   Insn 55(l0): point = 456
   Insn 54(l0): point = 458
   Insn 53(l0): point = 460
   Insn 52(l0): point = 462
   Insn 51(l0): point = 464
   Insn 50(l0): point = 466
   Insn 49(l0): point = 468
   Insn 48(l0): point = 470
   Insn 47(l0): point = 472
   Insn 46(l0): point = 474
   Insn 45(l0): point = 476
   Insn 44(l0): point = 478
   Insn 43(l0): point = 480
   Insn 42(l0): point = 482
   Insn 41(l0): point = 484
   Insn 40(l0): point = 486
   Insn 39(l0): point = 488
   Insn 38(l0): point = 490
   Insn 37(l0): point = 492
   Insn 36(l0): point = 494
   Insn 35(l0): point = 496
   Insn 34(l0): point = 498
   Insn 33(l0): point = 500
   Insn 301(l0): point = 503
   Insn 28(l0): point = 505
   Insn 27(l0): point = 507
   Insn 26(l0): point = 509
   Insn 25(l0): point = 511
   Insn 24(l0): point = 513
   Insn 22(l0): point = 516
   Insn 21(l0): point = 518
   Insn 20(l0): point = 520
   Insn 19(l0): point = 522
   Insn 18(l0): point = 524
   Insn 17(l0): point = 526
   Insn 16(l0): point = 528
   Insn 15(l0): point = 530
   Insn 14(l0): point = 532
   Insn 13(l0): point = 534
   Insn 12(l0): point = 536
   Insn 11(l0): point = 538
   Insn 7(l0): point = 540
   Insn 6(l0): point = 542
   Insn 5(l0): point = 544
   Insn 4(l0): point = 546
   Insn 3(l0): point = 548
   Insn 2(l0): point = 550
 a0(r212): [7..8]
 a1(r211): [32..37]
 a2(r149): [36..39]
 a3(r148): [40..41]
 a4(r147): [42..43]
 a5(r210): [44..45]
 a6(r146): [44..47]
 a7(r145): [48..49]
 a8(r144): [50..51]
 a9(r209): [52..53]
 a10(r208): [60..65]
 a11(r143): [64..67]
 a12(r142): [68..69]
 a13(r141): [70..71]
 a14(r207): [72..73]
 a15(r140): [72..75]
 a16(r139): [76..77]
 a17(r206): [78..79]
 a18(r205): [19..20]
 a19(r204): [86..87]
 a20(r203): [88..89]
 a21(r138): [95..96]
 a22(r137): [95..100]
 a23(r202): [97..98]
 a24(r201): [101..102]
 a25(r200): [105..106]
 a26(r199): [107..108]
 a27(r198): [119..120]
 a28(r197): [131..132]
 a29(r196): [143..144]
 a30(r195): [151..166]
 a31(r136): [155..168]
 a32(r134): [157..174]
 a33(r132): [159..180]
 a34(r130): [161..186]
 a35(r128): [163..192]
 a36(r126): [165..198]
 a37(r135): [169..170]
 a38(r194): [171..172]
 a39(r133): [175..176]
 a40(r193): [177..178]
 a41(r131): [181..182]
 a42(r192): [183..184]
 a43(r129): [187..188]
 a44(r191): [189..190]
 a45(r127): [193..194]
 a46(r190): [195..196]
 a47(r125): [199..200]
 a48(r189): [201..202]
 a49(r188): [209..224]
 a50(r124): [213..226]
 a51(r122): [215..232]
 a52(r120): [217..238]
 a53(r118): [219..244]
 a54(r116): [221..250]
 a55(r114): [223..256]
 a56(r123): [227..228]
 a57(r187): [229..230]
 a58(r121): [233..234]
 a59(r186): [235..236]
 a60(r119): [239..240]
 a61(r185): [241..242]
 a62(r117): [245..246]
 a63(r184): [247..248]
 a64(r115): [251..252]
 a65(r183): [253..254]
 a66(r113): [257..258]
 a67(r182): [259..260]
 a68(r181): [267..272]
 a69(r112): [271..274]
 a70(r180): [275..276]
 a71(r179): [284..289]
 a72(r111): [288..291]
 a73(r178): [292..293]
 a74(r177): [303..308]
 a75(r176): [307..310]
 a76(r110): [319..324]
 a77(r175): [321..322]
 a78(r174): [325..326]
 a79(r173): [330..331]
 a80(r109): [332..333]
 a81(r106): [332..345]
 a82(r108): [334..335]
 a83(r107): [340..341]
 a84(r172): [342..343]
 a85(r171): [346..347]
 a86(r105): [353..354]
 a87(r170): [359..360]
 a88(r169): [368..369]
 a89(r104): [370..371]
 a90(r103): [376..379]
 a91(r168): [380..381]
 a92(r102): [387..388]
 a93(r101): [393..394]
 a94(r167): [395..396]
 a95(r166): [403..408]
 a96(r100): [407..410]
 a97(r165): [411..412]
 a98(r164): [419..424]
 a99(r99): [423..426]
 a100(r98): [427..428]
 a101(r96): [427..436]
 a102(r163): [429..430]
 a103(r97): [429..432]
 a104(r162): [433..434]
 a105(r161): [437..438]
 a106(r160): [445..450]
 a107(r95): [449..452]
 a108(r94): [453..454]
 a109(r93): [455..456]
 a110(r90): [455..470]
 a111(r92): [457..458]
 a112(r159): [459..460]
 a113(r158): [461..462]
 a114(r91): [463..466]
 a115(r157): [463..464]
 a116(r156): [467..468]
 a117(r155): [471..472]
 a118(r154): [483..484]
 a119(r153): [491..496]
 a120(r89): [495..498]
 a121(r152): [499..500]
 a122(r151): [512..513]
 a123(r88): [519..520]
 a124(r87): [525..526]
 a125(r150): [531..534]
Compressing live ranges: from 553 to 192 - 34%
Ranges after the compression:
 a0(r212): [0..1]
 a1(r211): [4..5]
 a2(r149): [4..5]
 a3(r148): [6..7]
 a4(r147): [8..9]
 a5(r210): [10..11]
 a6(r146): [10..11]
 a7(r145): [12..13]
 a8(r144): [14..15]
 a9(r209): [16..17]
 a10(r208): [18..19]
 a11(r143): [18..19]
 a12(r142): [20..21]
 a13(r141): [22..23]
 a14(r207): [24..25]
 a15(r140): [24..25]
 a16(r139): [26..27]
 a17(r206): [28..29]
 a18(r205): [2..3]
 a19(r204): [30..31]
 a20(r203): [32..33]
 a21(r138): [34..35]
 a22(r137): [34..37]
 a23(r202): [36..37]
 a24(r201): [38..39]
 a25(r200): [40..41]
 a26(r199): [42..43]
 a27(r198): [44..45]
 a28(r197): [46..47]
 a29(r196): [48..49]
 a30(r195): [50..51]
 a31(r136): [50..51]
 a32(r134): [50..55]
 a33(r132): [50..59]
 a34(r130): [50..63]
 a35(r128): [50..67]
 a36(r126): [50..71]
 a37(r135): [52..53]
 a38(r194): [54..55]
 a39(r133): [56..57]
 a40(r193): [58..59]
 a41(r131): [60..61]
 a42(r192): [62..63]
 a43(r129): [64..65]
 a44(r191): [66..67]
 a45(r127): [68..69]
 a46(r190): [70..71]
 a47(r125): [72..73]
 a48(r189): [74..75]
 a49(r188): [76..77]
 a50(r124): [76..77]
 a51(r122): [76..81]
 a52(r120): [76..85]
 a53(r118): [76..89]
 a54(r116): [76..93]
 a55(r114): [76..97]
 a56(r123): [78..79]
 a57(r187): [80..81]
 a58(r121): [82..83]
 a59(r186): [84..85]
 a60(r119): [86..87]
 a61(r185): [88..89]
 a62(r117): [90..91]
 a63(r184): [92..93]
 a64(r115): [94..95]
 a65(r183): [96..97]
 a66(r113): [98..99]
 a67(r182): [100..101]
 a68(r181): [102..103]
 a69(r112): [102..103]
 a70(r180): [104..105]
 a71(r179): [106..107]
 a72(r111): [106..107]
 a73(r178): [108..109]
 a74(r177): [110..111]
 a75(r176): [110..111]
 a76(r110): [112..113]
 a77(r175): [112..113]
 a78(r174): [114..115]
 a79(r173): [116..117]
 a80(r109): [118..119]
 a81(r106): [118..125]
 a82(r108): [120..121]
 a83(r107): [122..123]
 a84(r172): [124..125]
 a85(r171): [126..127]
 a86(r105): [128..129]
 a87(r170): [130..131]
 a88(r169): [132..133]
 a89(r104): [134..135]
 a90(r103): [136..137]
 a91(r168): [138..139]
 a92(r102): [140..141]
 a93(r101): [142..143]
 a94(r167): [144..145]
 a95(r166): [146..147]
 a96(r100): [146..147]
 a97(r165): [148..149]
 a98(r164): [150..151]
 a99(r99): [150..151]
 a100(r98): [152..153]
 a101(r96): [152..157]
 a102(r163): [154..155]
 a103(r97): [154..155]
 a104(r162): [156..157]
 a105(r161): [158..159]
 a106(r160): [160..161]
 a107(r95): [160..161]
 a108(r94): [162..163]
 a109(r93): [164..165]
 a110(r90): [164..175]
 a111(r92): [166..167]
 a112(r159): [168..169]
 a113(r158): [170..171]
 a114(r91): [172..173]
 a115(r157): [172..173]
 a116(r156): [174..175]
 a117(r155): [176..177]
 a118(r154): [178..179]
 a119(r153): [180..181]
 a120(r89): [180..181]
 a121(r152): [182..183]
 a122(r151): [184..185]
 a123(r88): [186..187]
 a124(r87): [188..189]
 a125(r150): [190..191]
  regions=1, blocks=19, points=192
    allocnos=126 (big 0), copies=0, conflicts=0, ranges=126
Disposition:
  124:r87  l0     0  123:r88  l0     0  120:r89  l0     1  110:r90  l0    22
  114:r91  l0     0  111:r92  l0     0  109:r93  l0    21  108:r94  l0    21
  107:r95  l0    21  101:r96  l0    22  103:r97  l0    21  100:r98  l0    21
   99:r99  l0    21   96:r100 l0     1   93:r101 l0     0   92:r102 l0     0
   90:r103 l0     0   89:r104 l0     0   86:r105 l0     0   81:r106 l0     3
   83:r107 l0     0   82:r108 l0     0   80:r109 l0     0   76:r110 l0     2
   72:r111 l0     1   69:r112 l0     1   66:r113 l0    21   55:r114 l0    25
   64:r115 l0    21   54:r116 l0    24   62:r117 l0    21   53:r118 l0    23
   60:r119 l0    21   52:r120 l0    22   58:r121 l0    21   51:r122 l0    21
   56:r123 l0     0   50:r124 l0     1   47:r125 l0    21   36:r126 l0    26
   45:r127 l0    21   35:r128 l0    25   43:r129 l0    21   34:r130 l0    24
   41:r131 l0    21   33:r132 l0    23   39:r133 l0    21   32:r134 l0    22
   37:r135 l0    21   31:r136 l0    21   22:r137 l0     1   21:r138 l0     0
   16:r139 l0     0   15:r140 l0     1   13:r141 l0     0   12:r142 l0    21
   11:r143 l0    21    8:r144 l0     0    7:r145 l0     0    6:r146 l0     1
    4:r147 l0     0    3:r148 l0    21    2:r149 l0    21  125:r150 l0     0
  122:r151 l0     0  121:r152 l0     0  119:r153 l0     0  118:r154 l0     0
  117:r155 l0     0  116:r156 l0     0  115:r157 l0     1  113:r158 l0     0
  112:r159 l0     0  106:r160 l0     0  105:r161 l0     0  104:r162 l0     0
  102:r163 l0    23   98:r164 l0     0   97:r165 l0     0   95:r166 l0     0
   94:r167 l0     0   91:r168 l0     0   88:r169 l0     0   87:r170 l0     0
   85:r171 l0     0   84:r172 l0     0   79:r173 l0     0   78:r174 l0     0
   77:r175 l0     0   75:r176 l0     1   74:r177 l0     0   73:r178 l0     0
   71:r179 l0     0   70:r180 l0     0   68:r181 l0     0   67:r182 l0     0
   65:r183 l0     0   63:r184 l0     0   61:r185 l0     0   59:r186 l0     0
   57:r187 l0     0   49:r188 l0     0   48:r189 l0     0   46:r190 l0     0
   44:r191 l0     0   42:r192 l0     0   40:r193 l0     0   38:r194 l0     0
   30:r195 l0     0   29:r196 l0     0   28:r197 l0     0   27:r198 l0     0
   26:r199 l0     0   25:r200 l0     0   24:r201 l0     0   23:r202 l0     0
   20:r203 l0     0   19:r204 l0     0   18:r205 l0     0   17:r206 l0     0
   14:r207 l0     0   10:r208 l0     0    9:r209 l0     0    5:r210 l0     0
    1:r211 l0     0    0:r212 l0     0
+++Costs: overall -37, reg -37, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 37[r8] 38[r9]
;;  ref usage 	r0={37d,18u} r1={35d,12u} r2={28d,5u} r4={43d,20u} r5={47d,24u} r6={1d,18u} r7={1d,41u} r8={23d} r9={23d} r10={23d} r11={23d} r12={23d} r13={23d} r14={23d} r15={23d} r16={1d,20u} r17={50d,8u} r18={23d} r19={23d} r20={1d,90u,9e} r21={30d,6u} r22={26d,2u} r23={26d,2u} r24={26d,2u} r25={26d,2u} r26={25d,1u} r27={24d} r28={24d} r29={23d} r30={23d} r31={23d} r32={23d} r33={23d} r34={23d} r35={23d} r36={23d} r37={24d,1u} r38={24d,1u} r39={23d} r40={23d} r45={23d} r46={23d} r47={23d} r48={23d} r49={23d} r50={23d} r51={23d} r52={23d} r53={23d} r54={23d} r55={23d} r56={23d} r57={23d} r58={23d} r59={23d} r60={23d} r61={23d} r62={23d} r63={23d} r64={23d} r65={23d} r66={23d} r67={23d} r68={23d} r69={23d} r70={23d} r71={23d} r72={23d} r73={23d} r74={23d} r75={23d} r76={23d} r77={23d} r78={23d} r79={23d} r80={23d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,2u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u,1e} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u,1e} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} 
;;    total ref usage 2324{1913d,400u,11e} in 268{245 regular + 23 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 150
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])
        (reg:DI 5 di [ outfile_name ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ outfile_name ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])
        (reg:DI 4 si [ data ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ data ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ main_header ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])
        (reg:DI 2 cx [ block_header ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ block_header ])
        (nil)))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -68 [0xffffffffffffffbc])) [0 index1+0 S4 A32])
        (reg:SI 37 r8 [ index1 ])) fmtext_o.cpp:37 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ index1 ])
        (nil)))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
        (reg:DI 38 r9 [ procpar_info ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ procpar_info ])
        (nil)))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:39 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:41 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:43 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fa2a17ea090 *.LC0>)) fmtext_o.cpp:43 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 150)) fmtext_o.cpp:43 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 150)
        (nil)))
(call_insn 16 15 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fa2a1ac8510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:43 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 17 16 18 2 (set (reg/f:DI 87 [ D.6651 ])
        (reg:DI 0 ax)) fmtext_o.cpp:43 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 18 17 19 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (reg/f:DI 87 [ D.6651 ])) fmtext_o.cpp:43 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ D.6651 ])
        (nil)))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:43 4 {*cmpdi_ccno_1}
     (nil))
(insn 20 19 21 2 (set (reg:QI 88 [ D.6652 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:43 607 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 21 20 22 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 88 [ D.6652 ])
            (const_int 0 [0]))) fmtext_o.cpp:43 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 88 [ D.6652 ])
        (nil)))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) fmtext_o.cpp:43 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 31)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 151
(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg:DI 151)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:45 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 4 si)
        (reg:DI 151)) fmtext_o.cpp:45 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 151)
        (nil)))
(insn 26 25 27 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fa2a17ea120 *.LC1>)) fmtext_o.cpp:45 89 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:45 93 {*movqi_internal}
     (nil))
(call_insn 28 27 301 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2a1d0a5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:45 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 301 28 302 3 (set (pc)
        (label_ref:DI 310)) fmtext_o.cpp:103 654 {jump}
     (nil)
 -> 310)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 302 301 31)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167
(code_label 31 302 32 4 2 "" [1 uses])
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg/f:DI 152)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:SI 89 [ D.6653 ])
        (mem/j:SI (plus:DI (reg/f:DI 152)
                (const_int 300 [0x12c])) [0 procpar_info_16(D)->num_points+0 S4 A32])) fmtext_o.cpp:48 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152)
        (nil)))
(insn 35 34 36 4 (set (reg:DI 153)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:SI 1 dx)
        (reg:SI 89 [ D.6653 ])) fmtext_o.cpp:48 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89 [ D.6653 ])
        (nil)))
(insn 37 36 38 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fa2a17ea1b0 *.LC2>)) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 5 di)
        (reg:DI 153)) fmtext_o.cpp:48 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 153)
        (nil)))
(insn 39 38 40 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:48 93 {*movqi_internal}
     (nil))
(call_insn 40 39 41 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:48 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 41 40 42 4 (set (reg:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 2 cx)
        (reg:DI 154)) fmtext_o.cpp:49 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 154)
        (nil)))
(insn 43 42 44 4 (set (reg:DI 1 dx)
        (const_int 2 [0x2])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fa2a17ea240 *.LC3>)) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(call_insn 46 45 47 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fa2a1d0a000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:49 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 47 46 48 4 (set (reg/f:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SF 90 [ D.6654 ])
        (mem/j:SF (reg/f:DI 155) [0 procpar_info_16(D)->acquision_time+0 S4 A64])) fmtext_o.cpp:50 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 155)
        (nil)))
(insn 49 48 50 4 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:SI 91 [ D.6653 ])
        (mem/j:SI (plus:DI (reg/f:DI 156)
                (const_int 300 [0x12c])) [0 procpar_info_16(D)->num_points+0 S4 A32])) fmtext_o.cpp:50 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 156)
        (nil)))
(insn 51 50 52 4 (parallel [
            (set (reg:SI 157)
                (lshiftrt:SI (reg:SI 91 [ D.6653 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:50 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 52 51 53 4 (parallel [
            (set (reg:SI 158)
                (plus:SI (reg:SI 157)
                    (reg:SI 91 [ D.6653 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:50 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 157)
        (expr_list:REG_DEAD (reg:SI 91 [ D.6653 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 53 52 54 4 (parallel [
            (set (reg:SI 159)
                (ashiftrt:SI (reg:SI 158)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:50 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 158)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 54 53 55 4 (set (reg:SI 92 [ D.6653 ])
        (reg:SI 159)) fmtext_o.cpp:50 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 159)
        (nil)))
(insn 55 54 56 4 (set (reg:SF 93 [ D.6654 ])
        (float:SF (reg:SI 92 [ D.6653 ]))) fmtext_o.cpp:50 199 {*floatsisf2_sse}
     (expr_list:REG_DEAD (reg:SI 92 [ D.6653 ])
        (nil)))
(insn 56 55 57 4 (set (reg:SF 94 [ D.6654 ])
        (div:SF (reg:SF 90 [ D.6654 ])
            (reg:SF 93 [ D.6654 ]))) fmtext_o.cpp:50 804 {*fop_sf_1_sse}
     (expr_list:REG_DEAD (reg:SF 93 [ D.6654 ])
        (expr_list:REG_DEAD (reg:SF 90 [ D.6654 ])
            (nil))))
(insn 57 56 58 4 (set (reg:DF 95 [ D.6655 ])
        (float_extend:DF (reg:SF 94 [ D.6654 ]))) fmtext_o.cpp:50 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 94 [ D.6654 ])
        (nil)))
(insn 58 57 59 4 (set (reg:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DF 21 xmm0)
        (reg:DF 95 [ D.6655 ])) fmtext_o.cpp:50 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 95 [ D.6655 ])
        (nil)))
(insn 60 59 61 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fa2a17ea2d0 *.LC4>)) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DI 5 di)
        (reg:DI 160)) fmtext_o.cpp:50 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 160)
        (nil)))
(insn 62 61 63 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:50 93 {*movqi_internal}
     (nil))
(call_insn 63 62 64 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:50 669 {*call_value}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 64 63 65 4 (set (reg/f:DI 161)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg:DF 96 [ D.6655 ])
        (mem/j:DF (plus:DI (reg/f:DI 161)
                (const_int 304 [0x130])) [0 procpar_info_16(D)->main_frequency+0 S8 A64])) fmtext_o.cpp:51 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 161)
        (nil)))
(insn 66 65 67 4 (set (reg/f:DI 162)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:DF 97 [ D.6655 ])
        (mem/j:DF (plus:DI (reg/f:DI 162)
                (const_int 312 [0x138])) [0 procpar_info_16(D)->offset_frequency+0 S8 A64])) fmtext_o.cpp:51 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 162)
        (nil)))
(insn 68 67 69 4 (set (reg:DF 163)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64])) fmtext_o.cpp:51 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 69 68 70 4 (set (reg:DF 98 [ D.6655 ])
        (div:DF (reg:DF 97 [ D.6655 ])
            (reg:DF 163))) fmtext_o.cpp:51 805 {*fop_df_1_sse}
     (expr_list:REG_DEAD (reg:DF 163)
        (expr_list:REG_DEAD (reg:DF 97 [ D.6655 ])
            (nil))))
(insn 70 69 71 4 (set (reg:DF 99 [ D.6655 ])
        (plus:DF (reg:DF 96 [ D.6655 ])
            (reg:DF 98 [ D.6655 ]))) fmtext_o.cpp:51 798 {*fop_df_comm_sse}
     (expr_list:REG_DEAD (reg:DF 98 [ D.6655 ])
        (expr_list:REG_DEAD (reg:DF 96 [ D.6655 ])
            (nil))))
(insn 71 70 72 4 (set (reg:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DF 21 xmm0)
        (reg:DF 99 [ D.6655 ])) fmtext_o.cpp:51 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 99 [ D.6655 ])
        (nil)))
(insn 73 72 74 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fa2a17ea360 *.LC6>)) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DI 5 di)
        (reg:DI 164)) fmtext_o.cpp:51 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 164)
        (nil)))
(insn 75 74 76 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:51 93 {*movqi_internal}
     (nil))
(call_insn 76 75 77 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:51 669 {*call_value}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 77 76 78 4 (set (reg/f:DI 165)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:SI 100 [ D.6653 ])
        (mem/j:SI (plus:DI (reg/f:DI 165)
                (const_int 296 [0x128])) [0 procpar_info_16(D)->num_transients+0 S4 A64])) fmtext_o.cpp:52 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165)
        (nil)))
(insn 79 78 80 4 (set (reg:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:SI 1 dx)
        (reg:SI 100 [ D.6653 ])) fmtext_o.cpp:52 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 100 [ D.6653 ])
        (nil)))
(insn 81 80 82 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fa2a17ea1b0 *.LC2>)) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 82 81 83 4 (set (reg:DI 5 di)
        (reg:DI 166)) fmtext_o.cpp:52 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 166)
        (nil)))
(insn 83 82 84 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:52 93 {*movqi_internal}
     (nil))
(call_insn 84 83 85 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:52 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 85 84 86 4 (set (reg/f:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 86 85 87 4 (parallel [
            (set (reg/f:DI 101 [ D.6656 ])
                (plus:DI (reg/f:DI 167)
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:58 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
                    (const_int 34 [0x22]))
                (nil)))))
(insn 87 86 88 4 (set (reg:DI 5 di)
        (reg/f:DI 101 [ D.6656 ])) fmtext_o.cpp:58 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ D.6656 ])
        (nil)))
(call_insn/i 88 87 89 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fa2a1d010d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:58 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 89 88 90 4 (set (reg:DI 102 [ D.6657 ])
        (reg:DI 0 ax)) fmtext_o.cpp:58 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 90 89 91 4 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 102 [ D.6657 ])
            (const_int 32 [0x20]))) fmtext_o.cpp:58 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 102 [ D.6657 ])
        (nil)))
(jump_insn 91 90 92 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 141)
            (pc))) fmtext_o.cpp:58 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 141)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 103 104 168 169
(note 92 91 93 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 5 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:62 89 {*movdi_internal}
     (nil))
(insn 94 93 95 5 (parallel [
            (set (reg/f:DI 103 [ D.6656 ])
                (plus:DI (reg/f:DI 168)
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:62 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 168)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
                    (const_int 34 [0x22]))
                (nil)))))
(insn 95 94 96 5 (set (reg:SI 4 si)
        (const_int 47 [0x2f])) fmtext_o.cpp:62 90 {*movsi_internal}
     (nil))
(insn 96 95 97 5 (set (reg:DI 5 di)
        (reg/f:DI 103 [ D.6656 ])) fmtext_o.cpp:62 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ D.6656 ])
        (nil)))
(call_insn/i 97 96 98 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strrchr") [flags 0x41]  <function_decl 0x7fa2a1d040d8 strrchr>) [0 strrchr S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:62 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 98 97 99 5 (set (reg/f:DI 104 [ D.6658 ])
        (reg:DI 0 ax)) fmtext_o.cpp:62 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 99 98 100 5 (parallel [
            (set (reg:DI 169)
                (plus:DI (reg/f:DI 104 [ D.6658 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:62 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 104 [ D.6658 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 100 99 101 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])
        (reg:DI 169)) fmtext_o.cpp:62 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 169)
        (nil)))
(insn 101 100 102 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:63 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 102 101 103 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) fmtext_o.cpp:63 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 110)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 105 170
(note 103 102 104 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 6 (set (reg:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])) fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(insn 105 104 106 6 (set (reg:DI 5 di)
        (reg:DI 170)) fmtext_o.cpp:63 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 170)
        (nil)))
(call_insn/i 106 105 107 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fa2a1d010d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:63 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 107 106 108 6 (set (reg:DI 105 [ D.6657 ])
        (reg:DI 0 ax)) fmtext_o.cpp:63 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 108 107 109 6 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 105 [ D.6657 ])
            (const_int 32 [0x20]))) fmtext_o.cpp:63 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 105 [ D.6657 ])
        (nil)))
(jump_insn 109 108 110 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 122)
            (pc))) fmtext_o.cpp:63 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 122)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 106 107 108 109 171 172 173
(code_label 110 109 111 7 5 "" [1 uses])
(note 111 110 112 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 113 7 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 113 112 114 7 (parallel [
            (set (reg/f:DI 106 [ D.6658 ])
                (plus:DI (reg/f:DI 171)
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
                    (const_int 34 [0x22]))
                (nil)))))
(insn 114 113 115 7 (set (reg/f:DI 172)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 115 114 116 7 (parallel [
            (set (reg/f:DI 107 [ D.6656 ])
                (plus:DI (reg/f:DI 172)
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 172)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
                    (const_int 34 [0x22]))
                (nil)))))
(insn 116 115 117 7 (set (reg:DI 5 di)
        (reg/f:DI 107 [ D.6656 ])) fmtext_o.cpp:65 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ D.6656 ])
        (nil)))
(call_insn/i 117 116 118 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fa2a1d010d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:65 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 118 117 119 7 (set (reg:DI 108 [ D.6657 ])
        (reg:DI 0 ax)) fmtext_o.cpp:65 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 119 118 120 7 (parallel [
            (set (reg:DI 109 [ D.6659 ])
                (plus:DI (reg:DI 108 [ D.6657 ])
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 108 [ D.6657 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 120 119 121 7 (parallel [
            (set (reg:DI 173)
                (plus:DI (reg/f:DI 106 [ D.6658 ])
                    (reg:DI 109 [ D.6659 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 109 [ D.6659 ])
        (expr_list:REG_DEAD (reg/f:DI 106 [ D.6658 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 121 120 122 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])
        (reg:DI 173)) fmtext_o.cpp:65 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 173)
        (nil)))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110 174 175 176 177
(code_label 122 121 123 8 6 "" [1 uses])
(note 123 122 124 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 8 (set (reg/f:DI 174)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 125 124 126 8 (parallel [
            (set (reg/f:DI 110 [ D.6656 ])
                (plus:DI (reg/f:DI 174)
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:67 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 174)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
                    (const_int 34 [0x22]))
                (nil)))))
(insn 126 125 127 8 (set (reg:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 127 126 128 8 (set (reg:DI 1 dx)
        (reg:DI 175)) fmtext_o.cpp:67 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 175)
        (nil)))
(insn 128 127 129 8 (set (reg:DI 4 si)
        (reg/f:DI 110 [ D.6656 ])) fmtext_o.cpp:67 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110 [ D.6656 ])
        (nil)))
(insn 129 128 130 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fa2a17ea3f0 *.LC7>)) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 130 129 131 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:67 93 {*movqi_internal}
     (nil))
(call_insn 131 130 132 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2a1d0a5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:67 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 132 131 133 8 (set (reg:DI 176)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 133 132 134 8 (set (reg:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 134 133 135 8 (set (reg:DI 1 dx)
        (reg:DI 176)) fmtext_o.cpp:68 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 176)
        (nil)))
(insn 135 134 136 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fa2a17ea480 *.LC8>)) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 136 135 137 8 (set (reg:DI 5 di)
        (reg:DI 177)) fmtext_o.cpp:68 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 177)
        (nil)))
(insn 137 136 138 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:68 93 {*movqi_internal}
     (nil))
(call_insn 138 137 303 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:68 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 303 138 304 8 (set (pc)
        (label_ref 151)) 654 {jump}
     (nil)
 -> 151)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 304 303 141)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 111 178 179
(code_label 141 304 142 9 4 "" [1 uses])
(note 142 141 143 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 9 (set (reg/f:DI 178)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 144 143 145 9 (parallel [
            (set (reg/f:DI 111 [ D.6656 ])
                (plus:DI (reg/f:DI 178)
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:71 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 178)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
                    (const_int 34 [0x22]))
                (nil)))))
(insn 145 144 146 9 (set (reg:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 146 145 147 9 (set (reg:DI 1 dx)
        (reg/f:DI 111 [ D.6656 ])) fmtext_o.cpp:71 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 111 [ D.6656 ])
        (nil)))
(insn 147 146 148 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fa2a17ea480 *.LC8>)) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 148 147 149 9 (set (reg:DI 5 di)
        (reg:DI 179)) fmtext_o.cpp:71 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 179)
        (nil)))
(insn 149 148 150 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:71 93 {*movqi_internal}
     (nil))
(call_insn 150 149 151 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:71 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202
(code_label 151 150 152 10 7 "" [1 uses])
(note 152 151 153 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 153 152 154 10 (set (reg/f:DI 180)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 154 153 155 10 (parallel [
            (set (reg/f:DI 112 [ D.6660 ])
                (plus:DI (reg/f:DI 180)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:75 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 180)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
                    (const_int 4 [0x4]))
                (nil)))))
(insn 155 154 156 10 (set (reg:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 156 155 157 10 (set (reg:DI 1 dx)
        (reg/f:DI 112 [ D.6660 ])) fmtext_o.cpp:75 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ D.6660 ])
        (nil)))
(insn 157 156 158 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fa2a17ea480 *.LC8>)) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 158 157 159 10 (set (reg:DI 5 di)
        (reg:DI 181)) fmtext_o.cpp:75 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 181)
        (nil)))
(insn 159 158 160 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:75 93 {*movqi_internal}
     (nil))
(call_insn 160 159 161 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:75 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 161 160 162 10 (set (reg/f:DI 182)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 162 161 163 10 (set (reg:SF 113 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 182)
                (const_int 368 [0x170])) [0 procpar_info_16(D)->vtheta+0 S4 A64])) fmtext_o.cpp:78 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 182)
        (nil)))
(insn 163 162 164 10 (set (reg:DF 114 [ D.6655 ])
        (float_extend:DF (reg:SF 113 [ D.6654 ]))) fmtext_o.cpp:76 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 113 [ D.6654 ])
        (nil)))
(insn 164 163 165 10 (set (reg/f:DI 183)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 165 164 166 10 (set (reg:SF 115 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 183)
                (const_int 352 [0x160])) [0 procpar_info_16(D)->vox3+0 S4 A64])) fmtext_o.cpp:78 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 183)
        (nil)))
(insn 166 165 167 10 (set (reg:DF 116 [ D.6655 ])
        (float_extend:DF (reg:SF 115 [ D.6654 ]))) fmtext_o.cpp:76 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 115 [ D.6654 ])
        (nil)))
(insn 167 166 168 10 (set (reg/f:DI 184)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 168 167 169 10 (set (reg:SF 117 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 184)
                (const_int 348 [0x15c])) [0 procpar_info_16(D)->vox2+0 S4 A32])) fmtext_o.cpp:78 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 184)
        (nil)))
(insn 169 168 170 10 (set (reg:DF 118 [ D.6655 ])
        (float_extend:DF (reg:SF 117 [ D.6654 ]))) fmtext_o.cpp:76 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 117 [ D.6654 ])
        (nil)))
(insn 170 169 171 10 (set (reg/f:DI 185)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:77 89 {*movdi_internal}
     (nil))
(insn 171 170 172 10 (set (reg:SF 119 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 185)
                (const_int 344 [0x158])) [0 procpar_info_16(D)->vox1+0 S4 A64])) fmtext_o.cpp:77 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 185)
        (nil)))
(insn 172 171 173 10 (set (reg:DF 120 [ D.6655 ])
        (float_extend:DF (reg:SF 119 [ D.6654 ]))) fmtext_o.cpp:76 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 119 [ D.6654 ])
        (nil)))
(insn 173 172 174 10 (set (reg/f:DI 186)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 preprocess+0 S8 A64])) fmtext_o.cpp:77 89 {*movdi_internal}
     (nil))
(insn 174 173 175 10 (set (reg:SF 121 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 186)
                (const_int 4 [0x4])) [0 preprocess_60(D)->scale_factor+0 S4 A32])) fmtext_o.cpp:77 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 186)
        (nil)))
(insn 175 174 176 10 (set (reg:DF 122 [ D.6655 ])
        (float_extend:DF (reg:SF 121 [ D.6654 ]))) fmtext_o.cpp:76 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 121 [ D.6654 ])
        (nil)))
(insn 176 175 177 10 (set (reg/f:DI 187)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:77 89 {*movdi_internal}
     (nil))
(insn 177 176 178 10 (set (reg:HI 123 [ D.6661 ])
        (mem/j:HI (reg/f:DI 187) [0 block_header_63(D)->scale.number+0 S2 A32])) fmtext_o.cpp:77 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 187)
        (nil)))
(insn 178 177 179 10 (set (reg:SI 124 [ D.6653 ])
        (sign_extend:SI (reg:HI 123 [ D.6661 ]))) fmtext_o.cpp:76 146 {extendhisi2}
     (expr_list:REG_DEAD (reg:HI 123 [ D.6661 ])
        (nil)))
(insn 179 178 180 10 (set (reg:DI 188)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 180 179 181 10 (set (reg:DF 25 xmm4)
        (reg:DF 114 [ D.6655 ])) fmtext_o.cpp:78 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 114 [ D.6655 ])
        (nil)))
(insn 181 180 182 10 (set (reg:DF 24 xmm3)
        (reg:DF 116 [ D.6655 ])) fmtext_o.cpp:78 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 116 [ D.6655 ])
        (nil)))
(insn 182 181 183 10 (set (reg:DF 23 xmm2)
        (reg:DF 118 [ D.6655 ])) fmtext_o.cpp:78 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 118 [ D.6655 ])
        (nil)))
(insn 183 182 184 10 (set (reg:DF 22 xmm1)
        (reg:DF 120 [ D.6655 ])) fmtext_o.cpp:78 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 120 [ D.6655 ])
        (nil)))
(insn 184 183 185 10 (set (reg:DF 21 xmm0)
        (reg:DF 122 [ D.6655 ])) fmtext_o.cpp:78 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 122 [ D.6655 ])
        (nil)))
(insn 185 184 186 10 (set (reg:SI 1 dx)
        (reg:SI 124 [ D.6653 ])) fmtext_o.cpp:78 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 124 [ D.6653 ])
        (nil)))
(insn 186 185 187 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fa2a17ea510 *.LC9>)) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 187 186 188 10 (set (reg:DI 5 di)
        (reg:DI 188)) fmtext_o.cpp:78 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 188)
        (nil)))
(insn 188 187 189 10 (set (reg:QI 0 ax)
        (const_int 5 [0x5])) fmtext_o.cpp:78 93 {*movqi_internal}
     (nil))
(call_insn 189 188 190 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:78 669 {*call_value}
     (expr_list:REG_DEAD (reg:DF 25 xmm4)
        (expr_list:REG_DEAD (reg:DF 24 xmm3)
            (expr_list:REG_DEAD (reg:DF 23 xmm2)
                (expr_list:REG_DEAD (reg:DF 22 xmm1)
                    (expr_list:REG_DEAD (reg:DF 21 xmm0)
                        (expr_list:REG_DEAD (reg:DI 5 di)
                            (expr_list:REG_DEAD (reg:DI 4 si)
                                (expr_list:REG_DEAD (reg:SI 1 dx)
                                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                                        (nil))))))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:DF (use (reg:DF 21 xmm0))
                        (expr_list:DF (use (reg:DF 22 xmm1))
                            (expr_list:DF (use (reg:DF 23 xmm2))
                                (expr_list:DF (use (reg:DF 24 xmm3))
                                    (expr_list:DF (use (reg:DF 25 xmm4))
                                        (nil)))))))))))
(insn 190 189 191 10 (set (reg/f:DI 189)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 191 190 192 10 (set (reg:SF 125 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 189)
                (const_int 328 [0x148])) [0 procpar_info_16(D)->gain+0 S4 A64])) fmtext_o.cpp:81 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 189)
        (nil)))
(insn 192 191 193 10 (set (reg:DF 126 [ D.6655 ])
        (float_extend:DF (reg:SF 125 [ D.6654 ]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 125 [ D.6654 ])
        (nil)))
(insn 193 192 194 10 (set (reg/f:DI 190)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 194 193 195 10 (set (reg:SF 127 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 190)
                (const_int 340 [0x154])) [0 procpar_info_16(D)->pos3+0 S4 A32])) fmtext_o.cpp:81 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 190)
        (nil)))
(insn 195 194 196 10 (set (reg:DF 128 [ D.6655 ])
        (float_extend:DF (reg:SF 127 [ D.6654 ]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 127 [ D.6654 ])
        (nil)))
(insn 196 195 197 10 (set (reg/f:DI 191)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(insn 197 196 198 10 (set (reg:SF 129 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 191)
                (const_int 336 [0x150])) [0 procpar_info_16(D)->pos2+0 S4 A64])) fmtext_o.cpp:80 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (nil)))
(insn 198 197 199 10 (set (reg:DF 130 [ D.6655 ])
        (float_extend:DF (reg:SF 129 [ D.6654 ]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 129 [ D.6654 ])
        (nil)))
(insn 199 198 200 10 (set (reg/f:DI 192)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(insn 200 199 201 10 (set (reg:SF 131 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 192)
                (const_int 332 [0x14c])) [0 procpar_info_16(D)->pos1+0 S4 A32])) fmtext_o.cpp:80 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 192)
        (nil)))
(insn 201 200 202 10 (set (reg:DF 132 [ D.6655 ])
        (float_extend:DF (reg:SF 131 [ D.6654 ]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 131 [ D.6654 ])
        (nil)))
(insn 202 201 203 10 (set (reg/f:DI 193)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(insn 203 202 204 10 (set (reg:SF 133 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 193)
                (const_int 324 [0x144])) [0 procpar_info_16(D)->tm+0 S4 A32])) fmtext_o.cpp:80 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 193)
        (nil)))
(insn 204 203 205 10 (set (reg:DF 134 [ D.6655 ])
        (float_extend:DF (reg:SF 133 [ D.6654 ]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 133 [ D.6654 ])
        (nil)))
(insn 205 204 206 10 (set (reg/f:DI 194)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(insn 206 205 207 10 (set (reg:SF 135 [ D.6654 ])
        (mem/j:SF (plus:DI (reg/f:DI 194)
                (const_int 320 [0x140])) [0 procpar_info_16(D)->te+0 S4 A64])) fmtext_o.cpp:80 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 194)
        (nil)))
(insn 207 206 208 10 (set (reg:DF 136 [ D.6655 ])
        (float_extend:DF (reg:SF 135 [ D.6654 ]))) fmtext_o.cpp:79 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 135 [ D.6654 ])
        (nil)))
(insn 208 207 209 10 (set (reg:DI 195)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 209 208 210 10 (set (reg:DF 26 xmm5)
        (reg:DF 126 [ D.6655 ])) fmtext_o.cpp:81 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 126 [ D.6655 ])
        (nil)))
(insn 210 209 211 10 (set (reg:DF 25 xmm4)
        (reg:DF 128 [ D.6655 ])) fmtext_o.cpp:81 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 128 [ D.6655 ])
        (nil)))
(insn 211 210 212 10 (set (reg:DF 24 xmm3)
        (reg:DF 130 [ D.6655 ])) fmtext_o.cpp:81 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 130 [ D.6655 ])
        (nil)))
(insn 212 211 213 10 (set (reg:DF 23 xmm2)
        (reg:DF 132 [ D.6655 ])) fmtext_o.cpp:81 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 132 [ D.6655 ])
        (nil)))
(insn 213 212 214 10 (set (reg:DF 22 xmm1)
        (reg:DF 134 [ D.6655 ])) fmtext_o.cpp:81 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 134 [ D.6655 ])
        (nil)))
(insn 214 213 215 10 (set (reg:DF 21 xmm0)
        (reg:DF 136 [ D.6655 ])) fmtext_o.cpp:81 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 136 [ D.6655 ])
        (nil)))
(insn 215 214 216 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fa2a17ea5a0 *.LC10>)) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 216 215 217 10 (set (reg:DI 5 di)
        (reg:DI 195)) fmtext_o.cpp:81 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 195)
        (nil)))
(insn 217 216 218 10 (set (reg:QI 0 ax)
        (const_int 6 [0x6])) fmtext_o.cpp:81 93 {*movqi_internal}
     (nil))
(call_insn 218 217 219 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:81 669 {*call_value}
     (expr_list:REG_DEAD (reg:DF 26 xmm5)
        (expr_list:REG_DEAD (reg:DF 25 xmm4)
            (expr_list:REG_DEAD (reg:DF 24 xmm3)
                (expr_list:REG_DEAD (reg:DF 23 xmm2)
                    (expr_list:REG_DEAD (reg:DF 22 xmm1)
                        (expr_list:REG_DEAD (reg:DF 21 xmm0)
                            (expr_list:REG_DEAD (reg:DI 5 di)
                                (expr_list:REG_DEAD (reg:DI 4 si)
                                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                                        (nil))))))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (expr_list:DF (use (reg:DF 22 xmm1))
                        (expr_list:DF (use (reg:DF 23 xmm2))
                            (expr_list:DF (use (reg:DF 24 xmm3))
                                (expr_list:DF (use (reg:DF 25 xmm4))
                                    (expr_list:DF (use (reg:DF 26 xmm5))
                                        (nil)))))))))))
(insn 219 218 220 10 (set (reg:DI 196)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 220 219 221 10 (set (reg:DI 2 cx)
        (reg:DI 196)) fmtext_o.cpp:82 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 196)
        (nil)))
(insn 221 220 222 10 (set (reg:DI 1 dx)
        (const_int 13 [0xd])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 222 221 223 10 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 223 222 224 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fa2a17ea630 *.LC11>)) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(call_insn 224 223 225 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fa2a1d0a000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:82 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 225 224 226 10 (set (reg:DI 197)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 226 225 227 10 (set (reg:DI 2 cx)
        (reg:DI 197)) fmtext_o.cpp:83 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 197)
        (nil)))
(insn 227 226 228 10 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 228 227 229 10 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 229 228 230 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fa2a17ea6c0 *.LC12>)) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(call_insn 230 229 231 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fa2a1d0a000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:83 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 231 230 232 10 (set (reg:DI 198)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 232 231 233 10 (set (reg:DI 2 cx)
        (reg:DI 198)) fmtext_o.cpp:84 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 198)
        (nil)))
(insn 233 232 234 10 (set (reg:DI 1 dx)
        (const_int 6 [0x6])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 234 233 235 10 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 235 234 236 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fa2a17ea750 *.LC13>)) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(call_insn 236 235 237 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fa2a1d0a000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:84 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 237 236 238 10 (set (reg/f:DI 199)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:88 89 {*movdi_internal}
     (nil))
(insn 238 237 239 10 (set (reg:SI 200)
        (mem/j:SI (plus:DI (reg/f:DI 199)
                (const_int 8 [0x8])) [0 main_header_83(D)->np.number+0 S4 A32])) fmtext_o.cpp:88 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 199)
        (nil)))
(insn 239 238 240 10 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 number_output_points+0 S4 A32])
        (reg:SI 200)) fmtext_o.cpp:88 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 200)
        (nil)))
(insn 240 239 241 10 (set (reg/f:DI 201)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 preprocess+0 S8 A64])) fmtext_o.cpp:89 89 {*movdi_internal}
     (nil))
(insn 241 240 242 10 (set (reg:SI 137 [ D.6653 ])
        (mem/j:SI (plus:DI (reg/f:DI 201)
                (const_int 24 [0x18])) [0 preprocess_60(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:89 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 201)
        (nil)))
(insn 242 241 243 10 (set (reg/f:DI 202)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:89 89 {*movdi_internal}
     (nil))
(insn 243 242 244 10 (set (reg:SI 138 [ D.6653 ])
        (mem/j:SI (plus:DI (reg/f:DI 202)
                (const_int 8 [0x8])) [0 main_header_83(D)->np.number+0 S4 A32])) fmtext_o.cpp:89 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 202)
        (nil)))
(insn 244 243 245 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 137 [ D.6653 ])
            (reg:SI 138 [ D.6653 ]))) fmtext_o.cpp:89 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 138 [ D.6653 ])
        (expr_list:REG_DEAD (reg:SI 137 [ D.6653 ])
            (nil))))
(jump_insn 245 244 246 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 250)
            (pc))) fmtext_o.cpp:89 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 250)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 203 204
(note 246 245 247 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 11 (set (reg/f:DI 203)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 preprocess+0 S8 A64])) fmtext_o.cpp:90 89 {*movdi_internal}
     (nil))
(insn 248 247 249 11 (set (reg:SI 204)
        (mem/j:SI (plus:DI (reg/f:DI 203)
                (const_int 24 [0x18])) [0 preprocess_60(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:90 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 203)
        (nil)))
(insn 249 248 250 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [0 number_output_points+0 S4 A32])
        (reg:SI 204)) fmtext_o.cpp:90 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 204)
        (nil)))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 250 249 251 12 8 "" [1 uses])
(note 251 250 252 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 252 251 286 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:92 90 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              14 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 205
(code_label 286 252 253 13 10 "" [1 uses])
(note 253 286 254 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 13 (set (reg:SI 205)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:92 90 {*movsi_internal}
     (nil))
(insn 255 254 256 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 205)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 number_output_points+0 S4 A32]))) fmtext_o.cpp:92 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 205)
        (nil)))
(jump_insn 256 255 257 13 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 289)
            (pc))) fmtext_o.cpp:92 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 289)
;;  succ:       15
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 139 140 141 142 143 144 145 146 147 148 149 206 207 208 209 210 211
(note 257 256 258 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 258 257 259 14 (set (reg:SI 206)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:93 90 {*movsi_internal}
     (nil))
(insn 259 258 260 14 (set (reg:DI 139 [ D.6657 ])
        (sign_extend:DI (reg:SI 206))) fmtext_o.cpp:93 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 206)
        (nil)))
(insn 260 259 261 14 (parallel [
            (set (reg:DI 140 [ D.6657 ])
                (ashift:DI (reg:DI 139 [ D.6657 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:93 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 139 [ D.6657 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 261 260 262 14 (set (reg/f:DI 207)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 262 261 263 14 (parallel [
            (set (reg/f:DI 141 [ D.6662 ])
                (plus:DI (reg:DI 140 [ D.6657 ])
                    (reg/f:DI 207)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:93 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 207)
        (expr_list:REG_DEAD (reg:DI 140 [ D.6657 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])
                        (reg:DI 140 [ D.6657 ]))
                    (nil))))))
(insn 263 262 264 14 (set (reg:SF 142 [ D.6654 ])
        (mem:SF (reg/f:DI 141 [ D.6662 ]) [0 *_92+0 S4 A32])) fmtext_o.cpp:93 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 141 [ D.6662 ])
        (nil)))
(insn 264 263 265 14 (set (reg:DF 143 [ D.6655 ])
        (float_extend:DF (reg:SF 142 [ D.6654 ]))) fmtext_o.cpp:93 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 142 [ D.6654 ])
        (nil)))
(insn 265 264 266 14 (set (reg:DI 208)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 266 265 267 14 (set (reg:DF 21 xmm0)
        (reg:DF 143 [ D.6655 ])) fmtext_o.cpp:93 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 143 [ D.6655 ])
        (nil)))
(insn 267 266 268 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7fa2a17ea7e0 *.LC14>)) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 268 267 269 14 (set (reg:DI 5 di)
        (reg:DI 208)) fmtext_o.cpp:93 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 208)
        (nil)))
(insn 269 268 270 14 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:93 93 {*movqi_internal}
     (nil))
(call_insn 270 269 271 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:93 669 {*call_value}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 271 270 272 14 (set (reg:SI 209)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:94 90 {*movsi_internal}
     (nil))
(insn 272 271 273 14 (set (reg:DI 144 [ D.6659 ])
        (sign_extend:DI (reg:SI 209))) fmtext_o.cpp:94 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 209)
        (nil)))
(insn 273 272 274 14 (parallel [
            (set (reg:DI 145 [ D.6659 ])
                (plus:DI (reg:DI 144 [ D.6659 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:94 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 144 [ D.6659 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 274 273 275 14 (parallel [
            (set (reg:DI 146 [ D.6659 ])
                (ashift:DI (reg:DI 145 [ D.6659 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:94 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 145 [ D.6659 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 275 274 276 14 (set (reg/f:DI 210)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 276 275 277 14 (parallel [
            (set (reg/f:DI 147 [ D.6662 ])
                (plus:DI (reg:DI 146 [ D.6659 ])
                    (reg/f:DI 210)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:94 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 210)
        (expr_list:REG_DEAD (reg:DI 146 [ D.6659 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])
                        (reg:DI 146 [ D.6659 ]))
                    (nil))))))
(insn 277 276 278 14 (set (reg:SF 148 [ D.6654 ])
        (mem:SF (reg/f:DI 147 [ D.6662 ]) [0 *_99+0 S4 A32])) fmtext_o.cpp:94 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 147 [ D.6662 ])
        (nil)))
(insn 278 277 279 14 (set (reg:DF 149 [ D.6655 ])
        (float_extend:DF (reg:SF 148 [ D.6654 ]))) fmtext_o.cpp:94 152 {*extendsfdf2_sse}
     (expr_list:REG_DEAD (reg:SF 148 [ D.6654 ])
        (nil)))
(insn 279 278 280 14 (set (reg:DI 211)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 280 279 281 14 (set (reg:DF 21 xmm0)
        (reg:DF 149 [ D.6655 ])) fmtext_o.cpp:94 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 149 [ D.6655 ])
        (nil)))
(insn 281 280 282 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7fa2a17ea7e0 *.LC14>)) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 282 281 283 14 (set (reg:DI 5 di)
        (reg:DI 211)) fmtext_o.cpp:94 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 211)
        (nil)))
(insn 283 282 284 14 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:94 93 {*movqi_internal}
     (nil))
(call_insn 284 283 285 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fa2a1d04870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:94 669 {*call_value}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 285 284 305 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:92 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 305 285 306 14 (set (pc)
        (label_ref 286)) fmtext_o.cpp:92 654 {jump}
     (nil)
 -> 286)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 306 305 289)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 289 306 290 15 9 "" [1 uses])
(note 290 289 291 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 291 290 292 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:98 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 292 291 293 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 310)
            (pc))) fmtext_o.cpp:98 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 310)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 212
(note 293 292 294 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 294 293 295 16 (set (reg:DI 212)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(insn 295 294 296 16 (set (reg:DI 5 di)
        (reg:DI 212)) fmtext_o.cpp:99 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 212)
        (nil)))
(call_insn 296 295 310 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fa2a1ac81b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:99 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 17, flags: (NEW, RTL, MODIFIED)
;;  pred:       15
;;              3 [100.0%] 
;;              16 [100.0%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 310 296 309 18 11 "" [2 uses])
(note 309 310 311 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 311 309 299 18 (const_int 0 [0]) fmtext_o.cpp:103 684 {nop}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 [100.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 299 311 300 17 1 "" [0 uses])
(note 300 299 0 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function int read_csi_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision3* (*)[100], Precision4* (*)[100], Precision4* (*)[32], int*, PE_info*) (_Z13read_csi_dataPiP10PreprocessP7IOFilesPP16Data_file_headerPP17Data_block_headerP10Precision2PP8_IO_FILEPA100_P10Precision3PA100_P10Precision4PA32_SK_S_P7PE_info, funcdef_no=3, decl_uid=5417, cgraph_uid=3, symbol_order=3)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 91 n_edges 120 count 91 (    1)
Building IRA IR
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 158.
verify found no changes in insn with uid = 180.
verify found no changes in insn with uid = 212.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 270.
verify found no changes in insn with uid = 325.
verify found no changes in insn with uid = 365.
verify found no changes in insn with uid = 371.
verify found no changes in insn with uid = 373.
verify found no changes in insn with uid = 714.
verify found no changes in insn with uid = 1112.
verify found no changes in insn with uid = 1125.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r704: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r704,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r703: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r703,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r702: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r702,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r701: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r701,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r700: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r700,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r699: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r699,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r698: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r698,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r697: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r697,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r696: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r696,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r695: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r695,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r694: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r694,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r693: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r693,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r692: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r692,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r691: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r691,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r690: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r690,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r689: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r689,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r688: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r688,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r687: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r687,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r686: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r686,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r685: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r685,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r684: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r684,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r683: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r683,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r682: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r682,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r681: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r681,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r680: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r680,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r679: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r679,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r678: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r678,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r677: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r677,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r676: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r676,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r675: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r675,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r674: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r674,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r673: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r673,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r672: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r672,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r671: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r671,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r670: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r670,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r669: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r669,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r668: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r668,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r667: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r667,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r666: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r666,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r665: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r665,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r664: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r664,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r663: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r663,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r662: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r662,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r661: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r661,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r660: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r660,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r659: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r659,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r658: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r658,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r657: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r657,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r656: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r656,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r655: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r655,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r654: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r654,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r653: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r653,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r652: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r652,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r651: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r651,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r650: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r650,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r649: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r649,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r648: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r648,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r647: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r647,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r646: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r646,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r645: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r645,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r644: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r644,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r643: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r643,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r642: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r642,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r641: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r641,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r640: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r640,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r639: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r639,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r638: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r638,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r637: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r637,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r636: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r636,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r635: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r635,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r634: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r634,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r633: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r633,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r632: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r632,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r631: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r631,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r630: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r630,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r629: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r629,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r628: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r628,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r627: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r627,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r626: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r626,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r625: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r625,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r624: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r624,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r623: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r623,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r622: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r622,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r621: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r621,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r620: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r620,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r619: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r619,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r618: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r618,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r617: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r617,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r616: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a167 (r616,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r615: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r615,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r614: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a169 (r614,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r613: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a168 (r613,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r612: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a170 (r612,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r611: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r611,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r610: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a174 (r610,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r609: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a176 (r609,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r608: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a178 (r608,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r607: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a180 (r607,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r606: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a183 (r606,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r605: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a184 (r605,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r604: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a182 (r604,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r603: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a186 (r603,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r602: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a185 (r602,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r601: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a187 (r601,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r600: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a181 (r600,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r599: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a188 (r599,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r598: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a192 (r598,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r597: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a194 (r597,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r596: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a197 (r596,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r595: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a198 (r595,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r594: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a196 (r594,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r593: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a200 (r593,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r592: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a199 (r592,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r591: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a201 (r591,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r590: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a195 (r590,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r589: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a204 (r589,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r588: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a207 (r588,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r587: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a210 (r587,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r586: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a212 (r586,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r585: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a216 (r585,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r584: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a219 (r584,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r583: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a218 (r583,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r582: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a220 (r582,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r581: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a223 (r581,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r580: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a226 (r580,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r579: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a228 (r579,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r578: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a230 (r578,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r577: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a234 (r577,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r576: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a232 (r576,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r575: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a235 (r575,l0) best AREG, allocno GENERAL_REGS
    r574: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a238 (r574,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r573: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a239 (r573,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r572: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a242 (r572,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r571: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a244 (r571,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r570: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a246 (r570,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r569: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a247 (r569,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r568: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a249 (r568,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r567: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a251 (r567,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r566: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a250 (r566,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r565: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a252 (r565,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r564: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a254 (r564,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r563: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a257 (r563,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r562: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a260 (r562,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r561: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a263 (r561,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r560: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a265 (r560,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r559: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a266 (r559,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r558: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a270 (r558,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r557: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a271 (r557,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r556: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a269 (r556,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r555: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a273 (r555,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r554: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a272 (r554,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r553: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a274 (r553,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r552: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a268 (r552,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r551: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a276 (r551,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r550: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a279 (r550,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r549: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a280 (r549,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r548: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a284 (r548,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r547: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a285 (r547,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r546: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a283 (r546,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r545: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a287 (r545,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r544: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a286 (r544,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r543: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a288 (r543,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r542: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a282 (r542,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r541: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a290 (r541,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r540: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a293 (r540,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r539: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a296 (r539,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r538: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a299 (r538,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r537: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a300 (r537,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r536: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a304 (r536,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r535: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a307 (r535,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r534: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a310 (r534,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r533: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a309 (r533,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r532: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a311 (r532,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r531: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a314 (r531,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r530: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a315 (r530,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r529: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a313 (r529,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r528: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a317 (r528,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r527: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a318 (r527,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r526: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a321 (r526,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r525: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a320 (r525,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r524: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a322 (r524,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r523: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a325 (r523,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r522: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a326 (r522,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r521: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a324 (r521,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r520: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a328 (r520,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r519: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a329 (r519,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r518: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a333 (r518,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r517: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a336 (r517,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r516: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a339 (r516,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r515: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a338 (r515,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r514: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a340 (r514,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r513: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a343 (r513,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r512: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a344 (r512,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r511: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a342 (r511,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r510: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a346 (r510,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r509: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a347 (r509,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r508: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a350 (r508,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r507: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a349 (r507,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r506: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a351 (r506,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r505: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a354 (r505,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r504: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a355 (r504,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r503: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a353 (r503,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r502: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a357 (r502,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r501: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a358 (r501,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r500: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a362 (r500,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r499: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a365 (r499,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r498: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a368 (r498,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r497: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a367 (r497,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r496: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a369 (r496,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r495: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a372 (r495,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r494: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a373 (r494,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r493: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a371 (r493,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r492: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a375 (r492,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r491: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a376 (r491,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r490: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a379 (r490,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r489: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a378 (r489,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r488: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a380 (r488,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r487: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a383 (r487,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r486: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a384 (r486,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r485: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a382 (r485,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r484: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a386 (r484,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r483: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a390 (r483,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r482: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a387 (r482,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r481: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a393 (r481,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r480: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a391 (r480,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r479: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a396 (r479,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r478: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a395 (r478,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r477: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a397 (r477,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r476: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a400 (r476,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r475: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a401 (r475,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r474: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a399 (r474,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r473: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a403 (r473,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r472: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a406 (r472,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r471: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a405 (r471,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r470: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a407 (r470,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r469: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a410 (r469,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r468: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a411 (r468,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r467: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a409 (r467,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r466: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a413 (r466,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r465: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a421 (r465,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r464: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a424 (r464,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r463: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a427 (r463,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r462: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a433 (r462,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r461: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a432 (r461,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r460: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a434 (r460,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r459: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a437 (r459,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r458: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a438 (r458,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r457: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a436 (r457,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r456: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a440 (r456,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r455: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a445 (r455,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r454: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a447 (r454,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r453: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a448 (r453,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r452: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a451 (r452,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r451: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a457 (r451,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r450: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a456 (r450,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r449: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a458 (r449,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r448: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a461 (r448,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r447: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a462 (r447,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r446: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a460 (r446,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r445: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a464 (r445,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r444: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a469 (r444,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r443: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a471 (r443,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r442: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a472 (r442,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r441: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a476 (r441,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r440: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a479 (r440,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r439: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a482 (r439,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r438: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a485 (r438,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r437: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a488 (r437,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r436: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a489 (r436,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r435: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a492 (r435,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r434: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a496 (r434,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r433: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a494 (r433,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r432: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a497 (r432,l0) best AREG, allocno GENERAL_REGS
    r431: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a500 (r431,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r430: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a501 (r430,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r429: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a504 (r429,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r428: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a505 (r428,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r427: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a503 (r427,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r426: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a507 (r426,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r425: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a511 (r425,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r424: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a509 (r424,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r423: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a512 (r423,l0) best AREG, allocno GENERAL_REGS
    r422: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a515 (r422,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r421: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a516 (r421,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r420: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a519 (r420,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r419: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a520 (r419,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r418: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a518 (r418,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r417: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a522 (r417,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r416: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a525 (r416,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r415: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a529 (r415,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r414: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a527 (r414,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r413: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a530 (r413,l0) best AREG, allocno GENERAL_REGS
    r412: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a533 (r412,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r411: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a534 (r411,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r410: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a537 (r410,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r409: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a538 (r409,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r408: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a536 (r408,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r407: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a540 (r407,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r406: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a544 (r406,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r405: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a542 (r405,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r404: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a545 (r404,l0) best AREG, allocno GENERAL_REGS
    r403: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a548 (r403,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r402: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a549 (r402,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r401: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a552 (r401,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r400: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a553 (r400,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r399: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a551 (r399,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r398: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a555 (r398,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r397: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a559 (r397,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r396: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a562 (r396,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r395: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a565 (r395,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r394: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a568 (r394,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r393: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a571 (r393,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r392: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a572 (r392,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r391: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a574 (r391,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r390: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a579 (r390,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r389: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a581 (r389,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r388: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a584 (r388,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r387: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a586 (r387,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r386: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a589 (r386,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r385: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a593 (r385,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r384: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a594 (r384,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r383: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a596 (r383,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r382: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a595 (r382,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r381: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a597 (r381,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r380: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a600 (r380,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r379: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a603 (r379,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r378: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a606 (r378,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r377: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a605 (r377,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r376: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a608 (r376,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r375: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a611 (r375,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r374: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a612 (r374,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r373: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a613 (r373,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r372: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a614 (r372,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r371: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a615 (r371,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r370: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a616 (r370,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r369: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a617 (r369,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r368: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r368,l0) best AREG, allocno GENERAL_REGS
    r367: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r367,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r366: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r366,l0) best DIREG, allocno GENERAL_REGS
    r365: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r365,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r364: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r364,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r363: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r363,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r362: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r362,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r361: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r361,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r360: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r360,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r359: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r359,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r358: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r358,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r357: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r357,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r356: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r356,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r355: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r355,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r354: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r354,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r353: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r353,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r352: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r352,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r351: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r351,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r350: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r350,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r349: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r349,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r348: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r348,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r347: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r347,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r346: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r346,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r345: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r345,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r344: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r344,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r343,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r342: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r342,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r341: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r341,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r340: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r340,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r339,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r338: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r338,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r337,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r336: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r336,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r335: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r335,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r334,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r333: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r333,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r332,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r331: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r331,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r330: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r330,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r329: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r329,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r328,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r327,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r326,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r325,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r324: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r324,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r323: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r323,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r322: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r322,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r321: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r321,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r320,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r319,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r318,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r317: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r317,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r316,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r315: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r315,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r314,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r313: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r313,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r312: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r312,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r311: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r311,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r310: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r310,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r309: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r309,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r308: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r308,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r307,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r306,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r305,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r304,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r303: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r303,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r302,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r301,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r300,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r299,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r298,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r297: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r297,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r296,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a159 (r295,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r294,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a162 (r293,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r292,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a171 (r291,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a173 (r290,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a172 (r289,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a177 (r288,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r287,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a175 (r286,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a189 (r285,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a190 (r284,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a191 (r283,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a193 (r282,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a202 (r281,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a203 (r280,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a205 (r279,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r278: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a206 (r278,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a208 (r277,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a209 (r276,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a211 (r275,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a213 (r274,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a215 (r273,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r272: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a214 (r272,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a217 (r271,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a221 (r270,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a222 (r269,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a224 (r268,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a225 (r267,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a227 (r266,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a229 (r265,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a233 (r264,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r263: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a236 (r263,l0) best DIREG, allocno GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a237 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a231 (r261,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a240 (r260,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a241 (r259,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a243 (r258,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a245 (r257,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a248 (r256,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a253 (r255,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a255 (r254,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a256 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a258 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a259 (r251,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a261 (r250,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a262 (r249,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a264 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a267 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a275 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a277 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a278 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a281 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a289 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a291 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a292 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a294 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a295 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a297 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a298 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a302 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a306 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a305 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a308 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a312 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a316 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a303 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a301 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a319 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a323 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a327 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a331 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a335 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a334 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a337 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a341 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a345 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a332 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a330 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a348 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a352 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a356 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a360 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a364 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a363 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a366 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a370 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a374 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a361 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a359 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a377 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a381 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a385 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a389 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a392 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a394 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a398 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a402 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a388 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a404 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a408 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a412 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a414 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a415 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a416 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a417 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a418 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a419 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a420 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a422 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a423 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a425 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a426 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a452 (r182,l0) best DIREG, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a455 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a459 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a463 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a453 (r178,l0) best SIREG, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a465 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a466 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a468 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a467 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a470 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a454 (r172,l0) best CREG, allocno GENERAL_REGS
    r171: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a428 (r171,l0) best DIREG, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a431 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a435 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a439 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a429 (r167,l0) best SIREG, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a441 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a442 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a444 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a443 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a446 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a430 (r161,l0) best CREG, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a449 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a450 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a473 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a474 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a475 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a477 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a478 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a480 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a481 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a483 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a484 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a486 (r149,l0) best DIREG, allocno GENERAL_REGS
    r148: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a487 (r148,l0) best CREG, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a490 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a491 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a528 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a531 (r144,l0) best DIREG, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a532 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a526 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a535 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a539 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a543 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a546 (r138,l0) best DIREG, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a547 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a541 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a550 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a554 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a495 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a498 (r132,l0) best DIREG, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a499 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a493 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a502 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a506 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a510 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a513 (r126,l0) best DIREG, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a514 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a508 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a517 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a521 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a523 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a524 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a556 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a557 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a558 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a560 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a561 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a563 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a564 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a566 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a567 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a569 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a570 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a573 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a575 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a576 (r106,l0) best AREG, allocno GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a577 (r105,l0) best DIREG, allocno GENERAL_REGS
    r104: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a578 (r104,l0) best CREG, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a580 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a582 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a583 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a585 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a587 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a588 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a591 (r97,l0) best AREG, allocno GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a592 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a590 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a598 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a599 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a601 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a602 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a604 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a607 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a609 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a610 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r368,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a1(r367,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a2(r366,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a3(r704,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a4(r365,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a5(r703,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a6(r702,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a7(r357,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a8(r364,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a9(r358,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a10(r701,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a11(r362,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a12(r363,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a13(r700,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a14(r361,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a15(r698,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a16(r699,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a17(r697,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a18(r360,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a19(r359,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a20(r696,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a21(r695,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a22(r356,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a23(r693,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a24(r694,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a25(r692,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a26(r355,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a27(r689,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a28(r691,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a29(r690,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a30(r354,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a31(r688,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a32(r687,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a33(r346,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a34(r353,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a35(r347,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a36(r686,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a37(r351,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a38(r352,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a39(r685,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a40(r350,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a41(r683,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a42(r684,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a43(r682,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a44(r349,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a45(r348,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a46(r681,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a47(r680,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a48(r345,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a49(r678,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a50(r679,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a51(r677,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a52(r344,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a53(r674,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a54(r676,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a55(r675,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a56(r343,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a57(r673,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a58(r672,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a59(r335,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a60(r342,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a61(r336,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a62(r671,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a63(r340,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a64(r341,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a65(r670,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a66(r339,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a67(r668,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a68(r669,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a69(r667,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a70(r338,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a71(r337,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a72(r666,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a73(r665,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a74(r334,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a75(r663,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a76(r664,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a77(r662,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a78(r333,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a79(r659,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a80(r661,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a81(r660,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a82(r332,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a83(r658,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a84(r656,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a85(r326,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a86(r331,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a87(r657,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a88(r654,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a89(r330,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a90(r655,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a91(r329,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a92(r652,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a93(r653,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a94(r651,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a95(r328,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a96(r327,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a97(r650,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a98(r325,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a99(r648,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a100(r649,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a101(r647,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a102(r324,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a103(r644,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a104(r646,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a105(r645,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a106(r323,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a107(r643,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a108(r322,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a109(r321,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a110(r320,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a111(r319,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a112(r318,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a113(r317,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a114(r316,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a115(r642,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a116(r315,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a117(r641,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a118(r314,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a119(r640,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a120(r292,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a121(r313,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a122(r312,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a123(r304,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a124(r311,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a125(r310,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a126(r308,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a127(r309,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a128(r639,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a129(r307,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a130(r637,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a131(r638,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a132(r636,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a133(r306,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a134(r633,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a135(r635,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a136(r634,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a137(r305,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a138(r632,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a139(r303,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a140(r302,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a141(r300,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a142(r301,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a143(r631,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a144(r297,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a145(r630,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a146(r299,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a147(r629,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a148(r298,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a149(r628,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a150(r621,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a151(r625,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a152(r627,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a153(r626,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a154(r623,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a155(r624,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a156(r622,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a157(r620,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a158(r296,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a159(r295,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a160(r294,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a161(r619,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a162(r293,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a163(r618,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a164(r611,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a165(r615,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a166(r617,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a167(r616,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a168(r613,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a169(r614,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a170(r612,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a171(r291,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a172(r289,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a173(r290,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a174(r610,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a175(r286,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a176(r609,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a177(r288,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a178(r608,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a179(r287,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a180(r607,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a181(r600,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a182(r604,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a183(r606,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a184(r605,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a185(r602,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a186(r603,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a187(r601,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a188(r599,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a189(r285,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a190(r284,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a191(r283,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a192(r598,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a193(r282,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a194(r597,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a195(r590,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a196(r594,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a197(r596,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a198(r595,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a199(r592,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a200(r593,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a201(r591,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a202(r281,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a203(r280,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a204(r589,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a205(r279,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a206(r278,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a207(r588,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a208(r277,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a209(r276,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a210(r587,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a211(r275,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a212(r586,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a213(r274,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a214(r272,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a215(r273,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a216(r585,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a217(r271,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a218(r583,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a219(r584,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a220(r582,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a221(r270,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a222(r269,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a223(r581,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a224(r268,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a225(r267,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a226(r580,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a227(r266,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a228(r579,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a229(r265,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a230(r578,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a231(r261,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a232(r576,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a233(r264,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a234(r577,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a235(r575,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a236(r263,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a237(r262,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a238(r574,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a239(r573,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a240(r260,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a241(r259,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a242(r572,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a243(r258,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a244(r571,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a245(r257,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a246(r570,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a247(r569,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a248(r256,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a249(r568,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a250(r566,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:11
  a251(r567,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a252(r565,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a253(r255,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a254(r564,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a255(r254,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a256(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a257(r563,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a258(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a259(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a260(r562,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a261(r250,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a262(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a263(r561,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a264(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a265(r560,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a266(r559,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a267(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a268(r552,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a269(r556,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a270(r558,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a271(r557,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a272(r554,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a273(r555,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a274(r553,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a275(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a276(r551,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a277(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a278(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a279(r550,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a280(r549,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a281(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a282(r542,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a283(r546,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a284(r548,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a285(r547,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a286(r544,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a287(r545,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a288(r543,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a289(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a290(r541,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a291(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a292(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a293(r540,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a294(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a295(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a296(r539,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a297(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a298(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a299(r538,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a300(r537,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a301(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a302(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a303(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a304(r536,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a305(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a306(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a307(r535,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a308(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a309(r533,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a310(r534,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a311(r532,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a312(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a313(r529,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a314(r531,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a315(r530,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a316(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a317(r528,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a318(r527,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a319(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a320(r525,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a321(r526,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a322(r524,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a323(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a324(r521,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a325(r523,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a326(r522,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a327(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a328(r520,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a329(r519,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a330(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a331(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a332(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a333(r518,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a334(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a335(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a336(r517,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a337(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a338(r515,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a339(r516,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a340(r514,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a341(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a342(r511,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a343(r513,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a344(r512,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a345(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a346(r510,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a347(r509,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a348(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a349(r507,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a350(r508,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a351(r506,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a352(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a353(r503,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a354(r505,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a355(r504,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a356(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a357(r502,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a358(r501,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a359(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a360(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a361(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a362(r500,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a363(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a364(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a365(r499,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a366(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a367(r497,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a368(r498,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a369(r496,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a370(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a371(r493,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a372(r495,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a373(r494,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a374(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a375(r492,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a376(r491,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a377(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a378(r489,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a379(r490,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a380(r488,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a381(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a382(r485,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a383(r487,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a384(r486,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a385(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a386(r484,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a387(r482,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a388(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a389(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a390(r483,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a391(r480,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a392(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a393(r481,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a394(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a395(r478,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a396(r479,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a397(r477,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a398(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a399(r474,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a400(r476,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a401(r475,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a402(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a403(r473,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a404(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a405(r471,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a406(r472,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a407(r470,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a408(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a409(r467,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a410(r469,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a411(r468,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a412(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a413(r466,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a414(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a415(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a416(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a417(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a418(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a419(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a420(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a421(r465,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a422(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a423(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a424(r464,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a425(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a426(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a427(r463,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a428(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a429(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a430(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a431(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a432(r461,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a433(r462,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a434(r460,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a435(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a436(r457,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a437(r459,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a438(r458,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a439(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a440(r456,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a441(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a442(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a443(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a444(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a445(r455,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a446(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a447(r454,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a448(r453,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a449(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a450(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a451(r452,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a452(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a453(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a454(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a455(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a456(r450,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a457(r451,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a458(r449,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a459(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a460(r446,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a461(r448,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a462(r447,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a463(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a464(r445,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a465(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a466(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a467(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a468(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a469(r444,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a470(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a471(r443,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a472(r442,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a473(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a474(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a475(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a476(r441,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a477(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a478(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a479(r440,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a480(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a481(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a482(r439,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a483(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a484(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a485(r438,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a486(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a487(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a488(r437,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a489(r436,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a490(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a491(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a492(r435,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a493(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a494(r433,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a495(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a496(r434,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a497(r432,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a498(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a499(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a500(r431,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a501(r430,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a502(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a503(r427,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a504(r429,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a505(r428,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a506(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a507(r426,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a508(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a509(r424,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a510(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a511(r425,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a512(r423,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a513(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a514(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a515(r422,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a516(r421,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a517(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a518(r418,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a519(r420,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a520(r419,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a521(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a522(r417,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a523(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a524(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a525(r416,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a526(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a527(r414,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a528(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a529(r415,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a530(r413,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a531(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a532(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a533(r412,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a534(r411,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a535(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a536(r408,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a537(r410,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a538(r409,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a539(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a540(r407,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a541(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a542(r405,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a543(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a544(r406,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a545(r404,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a546(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a547(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a548(r403,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a549(r402,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a550(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a551(r399,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a552(r401,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a553(r400,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a554(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a555(r398,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a556(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a557(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a558(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a559(r397,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a560(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a561(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a562(r396,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a563(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a564(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a565(r395,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a566(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a567(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a568(r394,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a569(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a570(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a571(r393,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a572(r392,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a573(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a574(r391,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a575(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a576(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a577(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a578(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a579(r390,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a580(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a581(r389,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a582(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a583(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a584(r388,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a585(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a586(r387,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a587(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a588(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a589(r386,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a590(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a591(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a592(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a593(r385,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a594(r384,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a595(r382,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a596(r383,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a597(r381,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a598(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a599(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a600(r380,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a601(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a602(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a603(r379,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a604(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a605(r377,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:74 NO_REX_SSE_REGS:74 SSE_REGS:74 MMX_REGS:94 INT_SSE_REGS:78 ALL_REGS:1448 MEM:20
  a606(r378,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a607(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a608(r376,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a609(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a610(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a611(r375,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a612(r374,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a613(r373,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a614(r372,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a615(r371,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a616(r370,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a617(r369,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8

   Insn 1128(l0): point = 0
   Insn 1125(l0): point = 3
   Insn 1124(l0): point = 6
   Insn 1123(l0): point = 8
   Insn 1122(l0): point = 10
   Insn 1118(l0): point = 12
   Insn 1115(l0): point = 14
   Insn 1112(l0): point = 17
   Insn 1111(l0): point = 19
   Insn 1110(l0): point = 21
   Insn 1109(l0): point = 23
   Insn 1107(l0): point = 26
   Insn 1106(l0): point = 28
   Insn 1105(l0): point = 30
   Insn 1104(l0): point = 32
   Insn 373(l0): point = 35
   Insn 372(l0): point = 37
   Insn 371(l0): point = 39
   Insn 370(l0): point = 41
   Insn 101(l0): point = 44
   Insn 100(l0): point = 46
   Insn 99(l0): point = 48
   Insn 98(l0): point = 50
   Insn 75(l0): point = 53
   Insn 74(l0): point = 55
   Insn 73(l0): point = 57
   Insn 72(l0): point = 59
   Insn 33(l0): point = 62
   Insn 32(l0): point = 64
   Insn 31(l0): point = 66
   Insn 30(l0): point = 68
   Insn 29(l0): point = 70
   Insn 1180(l0): point = 73
   Insn 1098(l0): point = 75
   Insn 47(l0): point = 78
   Insn 46(l0): point = 80
   Insn 45(l0): point = 82
   Insn 44(l0): point = 84
   Insn 43(l0): point = 86
   Insn 42(l0): point = 88
   Insn 41(l0): point = 90
   Insn 40(l0): point = 92
   Insn 39(l0): point = 94
   Insn 38(l0): point = 96
   Insn 37(l0): point = 98
   Insn 36(l0): point = 100
   Insn 35(l0): point = 102
   Insn 936(l0): point = 105
   Insn 935(l0): point = 107
   Insn 934(l0): point = 109
   Insn 933(l0): point = 111
   Insn 931(l0): point = 114
   Insn 792(l0): point = 117
   Insn 791(l0): point = 119
   Insn 790(l0): point = 121
   Insn 789(l0): point = 123
   Insn 788(l0): point = 125
   Insn 786(l0): point = 128
   Insn 737(l0): point = 131
   Insn 736(l0): point = 133
   Insn 735(l0): point = 135
   Insn 734(l0): point = 137
   Insn 732(l0): point = 140
   Insn 696(l0): point = 143
   Insn 695(l0): point = 145
   Insn 694(l0): point = 147
   Insn 693(l0): point = 149
   Insn 691(l0): point = 152
   Insn 690(l0): point = 154
   Insn 689(l0): point = 156
   Insn 688(l0): point = 158
   Insn 687(l0): point = 160
   Insn 686(l0): point = 162
   Insn 685(l0): point = 164
   Insn 684(l0): point = 166
   Insn 683(l0): point = 168
   Insn 657(l0): point = 171
   Insn 656(l0): point = 173
   Insn 655(l0): point = 175
   Insn 654(l0): point = 177
   Insn 652(l0): point = 180
   Insn 592(l0): point = 183
   Insn 591(l0): point = 185
   Insn 590(l0): point = 187
   Insn 589(l0): point = 189
   Insn 588(l0): point = 191
   Insn 586(l0): point = 194
   Insn 395(l0): point = 197
   Insn 394(l0): point = 199
   Insn 393(l0): point = 201
   Insn 392(l0): point = 203
   Insn 391(l0): point = 205
   Insn 389(l0): point = 208
   Insn 260(l0): point = 211
   Insn 259(l0): point = 213
   Insn 258(l0): point = 215
   Insn 257(l0): point = 217
   Insn 256(l0): point = 219
   Insn 254(l0): point = 222
   Insn 115(l0): point = 225
   Insn 114(l0): point = 227
   Insn 113(l0): point = 229
   Insn 112(l0): point = 231
   Insn 111(l0): point = 233
   Insn 109(l0): point = 236
   Insn 108(l0): point = 238
   Insn 107(l0): point = 240
   Insn 106(l0): point = 242
   Insn 105(l0): point = 244
   Insn 96(l0): point = 247
   Insn 95(l0): point = 249
   Insn 94(l0): point = 251
   Insn 93(l0): point = 253
   Insn 92(l0): point = 255
   Insn 91(l0): point = 257
   Insn 90(l0): point = 259
   Insn 89(l0): point = 261
   Insn 88(l0): point = 263
   Insn 87(l0): point = 265
   Insn 86(l0): point = 267
   Insn 85(l0): point = 269
   Insn 84(l0): point = 271
   Insn 83(l0): point = 273
   Insn 82(l0): point = 275
   Insn 81(l0): point = 277
   Insn 80(l0): point = 279
   Insn 79(l0): point = 281
   Insn 70(l0): point = 284
   Insn 69(l0): point = 286
   Insn 68(l0): point = 288
   Insn 67(l0): point = 290
   Insn 66(l0): point = 292
   Insn 65(l0): point = 294
   Insn 64(l0): point = 296
   Insn 63(l0): point = 298
   Insn 62(l0): point = 300
   Insn 61(l0): point = 302
   Insn 60(l0): point = 304
   Insn 59(l0): point = 306
   Insn 58(l0): point = 308
   Insn 57(l0): point = 310
   Insn 56(l0): point = 312
   Insn 55(l0): point = 314
   Insn 54(l0): point = 316
   Insn 53(l0): point = 318
   Insn 52(l0): point = 320
   Insn 51(l0): point = 322
   Insn 50(l0): point = 324
   Insn 49(l0): point = 326
   Insn 1136(l0): point = 329
   Insn 248(l0): point = 331
   Insn 123(l0): point = 334
   Insn 122(l0): point = 336
   Insn 121(l0): point = 338
   Insn 120(l0): point = 340
   Insn 119(l0): point = 342
   Insn 117(l0): point = 345
   Insn 1134(l0): point = 348
   Insn 242(l0): point = 350
   Insn 239(l0): point = 353
   Insn 238(l0): point = 355
   Insn 237(l0): point = 357
   Insn 236(l0): point = 359
   Insn 235(l0): point = 361
   Insn 234(l0): point = 363
   Insn 233(l0): point = 365
   Insn 232(l0): point = 367
   Insn 231(l0): point = 369
   Insn 230(l0): point = 371
   Insn 229(l0): point = 373
   Insn 228(l0): point = 375
   Insn 227(l0): point = 377
   Insn 226(l0): point = 379
   Insn 225(l0): point = 381
   Insn 224(l0): point = 383
   Insn 223(l0): point = 385
   Insn 222(l0): point = 387
   Insn 221(l0): point = 389
   Insn 220(l0): point = 391
   Insn 219(l0): point = 393
   Insn 218(l0): point = 395
   Insn 217(l0): point = 397
   Insn 216(l0): point = 399
   Insn 215(l0): point = 401
   Insn 214(l0): point = 403
   Insn 213(l0): point = 405
   Insn 212(l0): point = 407
   Insn 211(l0): point = 409
   Insn 210(l0): point = 411
   Insn 209(l0): point = 413
   Insn 208(l0): point = 415
   Insn 207(l0): point = 417
   Insn 206(l0): point = 419
   Insn 205(l0): point = 421
   Insn 204(l0): point = 423
   Insn 203(l0): point = 425
   Insn 202(l0): point = 427
   Insn 201(l0): point = 429
   Insn 200(l0): point = 431
   Insn 199(l0): point = 433
   Insn 198(l0): point = 435
   Insn 197(l0): point = 437
   Insn 196(l0): point = 439
   Insn 194(l0): point = 442
   Insn 193(l0): point = 444
   Insn 192(l0): point = 446
   Insn 191(l0): point = 448
   Insn 190(l0): point = 450
   Insn 1132(l0): point = 453
   Insn 185(l0): point = 455
   Insn 184(l0): point = 457
   Insn 183(l0): point = 459
   Insn 182(l0): point = 461
   Insn 181(l0): point = 463
   Insn 180(l0): point = 465
   Insn 179(l0): point = 467
   Insn 178(l0): point = 469
   Insn 177(l0): point = 471
   Insn 176(l0): point = 473
   Insn 175(l0): point = 475
   Insn 174(l0): point = 477
   Insn 173(l0): point = 479
   Insn 172(l0): point = 481
   Insn 171(l0): point = 483
   Insn 170(l0): point = 485
   Insn 169(l0): point = 487
   Insn 168(l0): point = 489
   Insn 167(l0): point = 491
   Insn 166(l0): point = 493
   Insn 165(l0): point = 495
   Insn 164(l0): point = 497
   Insn 163(l0): point = 499
   Insn 162(l0): point = 501
   Insn 161(l0): point = 503
   Insn 160(l0): point = 505
   Insn 159(l0): point = 507
   Insn 158(l0): point = 509
   Insn 157(l0): point = 511
   Insn 156(l0): point = 513
   Insn 155(l0): point = 515
   Insn 154(l0): point = 517
   Insn 153(l0): point = 519
   Insn 152(l0): point = 521
   Insn 151(l0): point = 523
   Insn 150(l0): point = 525
   Insn 149(l0): point = 527
   Insn 148(l0): point = 529
   Insn 147(l0): point = 531
   Insn 146(l0): point = 533
   Insn 145(l0): point = 535
   Insn 144(l0): point = 537
   Insn 143(l0): point = 539
   Insn 142(l0): point = 541
   Insn 129(l0): point = 544
   Insn 128(l0): point = 546
   Insn 127(l0): point = 548
   Insn 126(l0): point = 550
   Insn 125(l0): point = 552
   Insn 139(l0): point = 555
   Insn 138(l0): point = 557
   Insn 137(l0): point = 559
   Insn 136(l0): point = 561
   Insn 135(l0): point = 563
   Insn 134(l0): point = 565
   Insn 133(l0): point = 567
   Insn 132(l0): point = 569
   Insn 131(l0): point = 571
   Insn 1144(l0): point = 574
   Insn 383(l0): point = 576
   Insn 277(l0): point = 579
   Insn 276(l0): point = 581
   Insn 275(l0): point = 583
   Insn 274(l0): point = 585
   Insn 273(l0): point = 587
   Insn 271(l0): point = 590
   Insn 270(l0): point = 592
   Insn 269(l0): point = 594
   Insn 268(l0): point = 596
   Insn 267(l0): point = 598
   Insn 266(l0): point = 600
   Insn 265(l0): point = 602
   Insn 264(l0): point = 604
   Insn 263(l0): point = 606
   Insn 262(l0): point = 608
   Insn 1142(l0): point = 611
   Insn 377(l0): point = 613
   Insn 1138(l0): point = 616
   Insn 325(l0): point = 618
   Insn 324(l0): point = 620
   Insn 323(l0): point = 622
   Insn 322(l0): point = 624
   Insn 321(l0): point = 626
   Insn 320(l0): point = 628
   Insn 319(l0): point = 630
   Insn 318(l0): point = 632
   Insn 317(l0): point = 634
   Insn 316(l0): point = 636
   Insn 315(l0): point = 638
   Insn 314(l0): point = 640
   Insn 313(l0): point = 642
   Insn 312(l0): point = 644
   Insn 311(l0): point = 646
   Insn 310(l0): point = 648
   Insn 309(l0): point = 650
   Insn 308(l0): point = 652
   Insn 307(l0): point = 654
   Insn 306(l0): point = 656
   Insn 305(l0): point = 658
   Insn 304(l0): point = 660
   Insn 303(l0): point = 662
   Insn 302(l0): point = 664
   Insn 301(l0): point = 666
   Insn 300(l0): point = 668
   Insn 299(l0): point = 670
   Insn 298(l0): point = 672
   Insn 297(l0): point = 674
   Insn 296(l0): point = 676
   Insn 1140(l0): point = 679
   Insn 365(l0): point = 681
   Insn 364(l0): point = 683
   Insn 363(l0): point = 685
   Insn 362(l0): point = 687
   Insn 361(l0): point = 689
   Insn 360(l0): point = 691
   Insn 359(l0): point = 693
   Insn 358(l0): point = 695
   Insn 357(l0): point = 697
   Insn 356(l0): point = 699
   Insn 355(l0): point = 701
   Insn 354(l0): point = 703
   Insn 353(l0): point = 705
   Insn 352(l0): point = 707
   Insn 351(l0): point = 709
   Insn 350(l0): point = 711
   Insn 349(l0): point = 713
   Insn 348(l0): point = 715
   Insn 347(l0): point = 717
   Insn 346(l0): point = 719
   Insn 345(l0): point = 721
   Insn 344(l0): point = 723
   Insn 343(l0): point = 725
   Insn 342(l0): point = 727
   Insn 341(l0): point = 729
   Insn 340(l0): point = 731
   Insn 339(l0): point = 733
   Insn 338(l0): point = 735
   Insn 337(l0): point = 737
   Insn 336(l0): point = 739
   Insn 334(l0): point = 742
   Insn 333(l0): point = 744
   Insn 332(l0): point = 746
   Insn 331(l0): point = 748
   Insn 330(l0): point = 750
   Insn 293(l0): point = 753
   Insn 292(l0): point = 755
   Insn 291(l0): point = 757
   Insn 290(l0): point = 759
   Insn 289(l0): point = 761
   Insn 288(l0): point = 763
   Insn 287(l0): point = 765
   Insn 286(l0): point = 767
   Insn 285(l0): point = 769
   Insn 283(l0): point = 772
   Insn 282(l0): point = 774
   Insn 281(l0): point = 776
   Insn 280(l0): point = 778
   Insn 279(l0): point = 780
   Insn 1150(l0): point = 783
   Insn 580(l0): point = 785
   Insn 403(l0): point = 788
   Insn 402(l0): point = 790
   Insn 401(l0): point = 792
   Insn 400(l0): point = 794
   Insn 399(l0): point = 796
   Insn 397(l0): point = 799
   Insn 1148(l0): point = 802
   Insn 574(l0): point = 804
   Insn 416(l0): point = 807
   Insn 415(l0): point = 809
   Insn 414(l0): point = 811
   Insn 413(l0): point = 813
   Insn 412(l0): point = 815
   Insn 411(l0): point = 817
   Insn 410(l0): point = 819
   Insn 409(l0): point = 821
   Insn 408(l0): point = 823
   Insn 407(l0): point = 825
   Insn 405(l0): point = 828
   Insn 1146(l0): point = 831
   Insn 568(l0): point = 833
   Insn 567(l0): point = 835
   Insn 566(l0): point = 837
   Insn 565(l0): point = 839
   Insn 564(l0): point = 841
   Insn 563(l0): point = 843
   Insn 562(l0): point = 845
   Insn 561(l0): point = 847
   Insn 560(l0): point = 849
   Insn 559(l0): point = 851
   Insn 558(l0): point = 853
   Insn 557(l0): point = 855
   Insn 556(l0): point = 857
   Insn 555(l0): point = 859
   Insn 554(l0): point = 861
   Insn 553(l0): point = 863
   Insn 552(l0): point = 865
   Insn 551(l0): point = 867
   Insn 550(l0): point = 869
   Insn 549(l0): point = 871
   Insn 548(l0): point = 873
   Insn 547(l0): point = 875
   Insn 546(l0): point = 877
   Insn 545(l0): point = 879
   Insn 544(l0): point = 881
   Insn 543(l0): point = 883
   Insn 542(l0): point = 885
   Insn 541(l0): point = 887
   Insn 540(l0): point = 889
   Insn 539(l0): point = 891
   Insn 538(l0): point = 893
   Insn 537(l0): point = 895
   Insn 536(l0): point = 897
   Insn 535(l0): point = 899
   Insn 534(l0): point = 901
   Insn 533(l0): point = 903
   Insn 532(l0): point = 905
   Insn 531(l0): point = 907
   Insn 530(l0): point = 909
   Insn 529(l0): point = 911
   Insn 528(l0): point = 913
   Insn 527(l0): point = 915
   Insn 526(l0): point = 917
   Insn 525(l0): point = 919
   Insn 524(l0): point = 921
   Insn 523(l0): point = 923
   Insn 522(l0): point = 925
   Insn 521(l0): point = 927
   Insn 520(l0): point = 929
   Insn 519(l0): point = 931
   Insn 518(l0): point = 933
   Insn 517(l0): point = 935
   Insn 516(l0): point = 937
   Insn 515(l0): point = 939
   Insn 514(l0): point = 941
   Insn 513(l0): point = 943
   Insn 512(l0): point = 945
   Insn 511(l0): point = 947
   Insn 510(l0): point = 949
   Insn 509(l0): point = 951
   Insn 508(l0): point = 953
   Insn 507(l0): point = 955
   Insn 506(l0): point = 957
   Insn 505(l0): point = 959
   Insn 504(l0): point = 961
   Insn 503(l0): point = 963
   Insn 502(l0): point = 965
   Insn 501(l0): point = 967
   Insn 500(l0): point = 969
   Insn 499(l0): point = 971
   Insn 498(l0): point = 973
   Insn 497(l0): point = 975
   Insn 496(l0): point = 977
   Insn 495(l0): point = 979
   Insn 494(l0): point = 981
   Insn 493(l0): point = 983
   Insn 492(l0): point = 985
   Insn 491(l0): point = 987
   Insn 490(l0): point = 989
   Insn 489(l0): point = 991
   Insn 488(l0): point = 993
   Insn 487(l0): point = 995
   Insn 486(l0): point = 997
   Insn 485(l0): point = 999
   Insn 484(l0): point = 1001
   Insn 483(l0): point = 1003
   Insn 482(l0): point = 1005
   Insn 481(l0): point = 1007
   Insn 480(l0): point = 1009
   Insn 479(l0): point = 1011
   Insn 478(l0): point = 1013
   Insn 477(l0): point = 1015
   Insn 476(l0): point = 1017
   Insn 475(l0): point = 1019
   Insn 474(l0): point = 1021
   Insn 473(l0): point = 1023
   Insn 472(l0): point = 1025
   Insn 471(l0): point = 1027
   Insn 470(l0): point = 1029
   Insn 469(l0): point = 1031
   Insn 468(l0): point = 1033
   Insn 467(l0): point = 1035
   Insn 466(l0): point = 1037
   Insn 465(l0): point = 1039
   Insn 464(l0): point = 1041
   Insn 463(l0): point = 1043
   Insn 462(l0): point = 1045
   Insn 461(l0): point = 1047
   Insn 460(l0): point = 1049
   Insn 459(l0): point = 1051
   Insn 458(l0): point = 1053
   Insn 457(l0): point = 1055
   Insn 456(l0): point = 1057
   Insn 455(l0): point = 1059
   Insn 454(l0): point = 1061
   Insn 453(l0): point = 1063
   Insn 452(l0): point = 1065
   Insn 451(l0): point = 1067
   Insn 450(l0): point = 1069
   Insn 449(l0): point = 1071
   Insn 448(l0): point = 1073
   Insn 447(l0): point = 1075
   Insn 446(l0): point = 1077
   Insn 445(l0): point = 1079
   Insn 444(l0): point = 1081
   Insn 443(l0): point = 1083
   Insn 442(l0): point = 1085
   Insn 441(l0): point = 1087
   Insn 440(l0): point = 1089
   Insn 439(l0): point = 1091
   Insn 438(l0): point = 1093
   Insn 437(l0): point = 1095
   Insn 436(l0): point = 1097
   Insn 435(l0): point = 1099
   Insn 434(l0): point = 1101
   Insn 433(l0): point = 1103
   Insn 432(l0): point = 1105
   Insn 431(l0): point = 1107
   Insn 430(l0): point = 1109
   Insn 429(l0): point = 1111
   Insn 428(l0): point = 1113
   Insn 427(l0): point = 1115
   Insn 426(l0): point = 1117
   Insn 425(l0): point = 1119
   Insn 424(l0): point = 1121
   Insn 423(l0): point = 1123
   Insn 422(l0): point = 1125
   Insn 421(l0): point = 1127
   Insn 420(l0): point = 1129
   Insn 419(l0): point = 1131
   Insn 418(l0): point = 1133
   Insn 1154(l0): point = 1136
   Insn 646(l0): point = 1138
   Insn 600(l0): point = 1141
   Insn 599(l0): point = 1143
   Insn 598(l0): point = 1145
   Insn 597(l0): point = 1147
   Insn 596(l0): point = 1149
   Insn 594(l0): point = 1152
   Insn 1152(l0): point = 1155
   Insn 640(l0): point = 1157
   Insn 639(l0): point = 1159
   Insn 638(l0): point = 1161
   Insn 637(l0): point = 1163
   Insn 636(l0): point = 1165
   Insn 635(l0): point = 1167
   Insn 634(l0): point = 1169
   Insn 633(l0): point = 1171
   Insn 632(l0): point = 1173
   Insn 631(l0): point = 1175
   Insn 630(l0): point = 1177
   Insn 629(l0): point = 1179
   Insn 628(l0): point = 1181
   Insn 627(l0): point = 1183
   Insn 626(l0): point = 1185
   Insn 625(l0): point = 1187
   Insn 624(l0): point = 1189
   Insn 623(l0): point = 1191
   Insn 622(l0): point = 1193
   Insn 621(l0): point = 1195
   Insn 620(l0): point = 1197
   Insn 619(l0): point = 1199
   Insn 618(l0): point = 1201
   Insn 617(l0): point = 1203
   Insn 616(l0): point = 1205
   Insn 615(l0): point = 1207
   Insn 614(l0): point = 1209
   Insn 613(l0): point = 1211
   Insn 612(l0): point = 1213
   Insn 611(l0): point = 1215
   Insn 610(l0): point = 1217
   Insn 609(l0): point = 1219
   Insn 608(l0): point = 1221
   Insn 607(l0): point = 1223
   Insn 606(l0): point = 1225
   Insn 605(l0): point = 1227
   Insn 604(l0): point = 1229
   Insn 603(l0): point = 1231
   Insn 602(l0): point = 1233
   Insn 1156(l0): point = 1236
   Insn 677(l0): point = 1238
   Insn 666(l0): point = 1241
   Insn 665(l0): point = 1243
   Insn 664(l0): point = 1245
   Insn 663(l0): point = 1247
   Insn 662(l0): point = 1249
   Insn 661(l0): point = 1251
   Insn 660(l0): point = 1253
   Insn 659(l0): point = 1255
   Insn 674(l0): point = 1258
   Insn 673(l0): point = 1260
   Insn 672(l0): point = 1262
   Insn 671(l0): point = 1264
   Insn 670(l0): point = 1266
   Insn 669(l0): point = 1268
   Insn 668(l0): point = 1270
   Insn 1160(l0): point = 1273
   Insn 726(l0): point = 1275
   Insn 703(l0): point = 1278
   Insn 702(l0): point = 1280
   Insn 701(l0): point = 1282
   Insn 700(l0): point = 1284
   Insn 698(l0): point = 1287
   Insn 1158(l0): point = 1290
   Insn 720(l0): point = 1292
   Insn 719(l0): point = 1294
   Insn 718(l0): point = 1296
   Insn 717(l0): point = 1298
   Insn 716(l0): point = 1300
   Insn 715(l0): point = 1302
   Insn 714(l0): point = 1304
   Insn 713(l0): point = 1306
   Insn 712(l0): point = 1308
   Insn 711(l0): point = 1310
   Insn 710(l0): point = 1312
   Insn 709(l0): point = 1314
   Insn 708(l0): point = 1316
   Insn 707(l0): point = 1318
   Insn 706(l0): point = 1320
   Insn 705(l0): point = 1322
   Insn 1166(l0): point = 1325
   Insn 780(l0): point = 1327
   Insn 744(l0): point = 1330
   Insn 743(l0): point = 1332
   Insn 742(l0): point = 1334
   Insn 741(l0): point = 1336
   Insn 739(l0): point = 1339
   Insn 1164(l0): point = 1342
   Insn 774(l0): point = 1344
   Insn 752(l0): point = 1347
   Insn 751(l0): point = 1349
   Insn 750(l0): point = 1351
   Insn 749(l0): point = 1353
   Insn 748(l0): point = 1355
   Insn 746(l0): point = 1358
   Insn 1162(l0): point = 1361
   Insn 768(l0): point = 1363
   Insn 767(l0): point = 1365
   Insn 766(l0): point = 1367
   Insn 765(l0): point = 1369
   Insn 764(l0): point = 1371
   Insn 763(l0): point = 1373
   Insn 762(l0): point = 1375
   Insn 761(l0): point = 1377
   Insn 760(l0): point = 1379
   Insn 759(l0): point = 1381
   Insn 758(l0): point = 1383
   Insn 757(l0): point = 1385
   Insn 756(l0): point = 1387
   Insn 755(l0): point = 1389
   Insn 754(l0): point = 1391
   Insn 1172(l0): point = 1394
   Insn 925(l0): point = 1396
   Insn 800(l0): point = 1399
   Insn 799(l0): point = 1401
   Insn 798(l0): point = 1403
   Insn 797(l0): point = 1405
   Insn 796(l0): point = 1407
   Insn 794(l0): point = 1410
   Insn 1170(l0): point = 1413
   Insn 919(l0): point = 1415
   Insn 808(l0): point = 1418
   Insn 807(l0): point = 1420
   Insn 806(l0): point = 1422
   Insn 805(l0): point = 1424
   Insn 804(l0): point = 1426
   Insn 802(l0): point = 1429
   Insn 1168(l0): point = 1432
   Insn 913(l0): point = 1434
   Insn 912(l0): point = 1436
   Insn 911(l0): point = 1438
   Insn 910(l0): point = 1440
   Insn 909(l0): point = 1442
   Insn 908(l0): point = 1444
   Insn 907(l0): point = 1446
   Insn 906(l0): point = 1448
   Insn 905(l0): point = 1450
   Insn 904(l0): point = 1452
   Insn 903(l0): point = 1454
   Insn 902(l0): point = 1456
   Insn 901(l0): point = 1458
   Insn 900(l0): point = 1460
   Insn 899(l0): point = 1462
   Insn 898(l0): point = 1464
   Insn 897(l0): point = 1466
   Insn 896(l0): point = 1468
   Insn 895(l0): point = 1470
   Insn 894(l0): point = 1472
   Insn 893(l0): point = 1474
   Insn 892(l0): point = 1476
   Insn 891(l0): point = 1478
   Insn 890(l0): point = 1480
   Insn 889(l0): point = 1482
   Insn 888(l0): point = 1484
   Insn 887(l0): point = 1486
   Insn 886(l0): point = 1488
   Insn 885(l0): point = 1490
   Insn 884(l0): point = 1492
   Insn 883(l0): point = 1494
   Insn 882(l0): point = 1496
   Insn 881(l0): point = 1498
   Insn 880(l0): point = 1500
   Insn 879(l0): point = 1502
   Insn 878(l0): point = 1504
   Insn 877(l0): point = 1506
   Insn 876(l0): point = 1508
   Insn 875(l0): point = 1510
   Insn 874(l0): point = 1512
   Insn 873(l0): point = 1514
   Insn 872(l0): point = 1516
   Insn 871(l0): point = 1518
   Insn 870(l0): point = 1520
   Insn 869(l0): point = 1522
   Insn 868(l0): point = 1524
   Insn 867(l0): point = 1526
   Insn 866(l0): point = 1528
   Insn 865(l0): point = 1530
   Insn 864(l0): point = 1532
   Insn 863(l0): point = 1534
   Insn 862(l0): point = 1536
   Insn 861(l0): point = 1538
   Insn 860(l0): point = 1540
   Insn 859(l0): point = 1542
   Insn 858(l0): point = 1544
   Insn 857(l0): point = 1546
   Insn 856(l0): point = 1548
   Insn 855(l0): point = 1550
   Insn 854(l0): point = 1552
   Insn 853(l0): point = 1554
   Insn 852(l0): point = 1556
   Insn 851(l0): point = 1558
   Insn 850(l0): point = 1560
   Insn 849(l0): point = 1562
   Insn 848(l0): point = 1564
   Insn 847(l0): point = 1566
   Insn 846(l0): point = 1568
   Insn 845(l0): point = 1570
   Insn 844(l0): point = 1572
   Insn 843(l0): point = 1574
   Insn 842(l0): point = 1576
   Insn 841(l0): point = 1578
   Insn 840(l0): point = 1580
   Insn 839(l0): point = 1582
   Insn 838(l0): point = 1584
   Insn 837(l0): point = 1586
   Insn 836(l0): point = 1588
   Insn 835(l0): point = 1590
   Insn 834(l0): point = 1592
   Insn 833(l0): point = 1594
   Insn 832(l0): point = 1596
   Insn 831(l0): point = 1598
   Insn 830(l0): point = 1600
   Insn 829(l0): point = 1602
   Insn 828(l0): point = 1604
   Insn 827(l0): point = 1606
   Insn 826(l0): point = 1608
   Insn 825(l0): point = 1610
   Insn 824(l0): point = 1612
   Insn 823(l0): point = 1614
   Insn 822(l0): point = 1616
   Insn 821(l0): point = 1618
   Insn 820(l0): point = 1620
   Insn 819(l0): point = 1622
   Insn 818(l0): point = 1624
   Insn 817(l0): point = 1626
   Insn 816(l0): point = 1628
   Insn 815(l0): point = 1630
   Insn 814(l0): point = 1632
   Insn 813(l0): point = 1634
   Insn 812(l0): point = 1636
   Insn 811(l0): point = 1638
   Insn 810(l0): point = 1640
   Insn 1178(l0): point = 1643
   Insn 1092(l0): point = 1645
   Insn 943(l0): point = 1648
   Insn 942(l0): point = 1650
   Insn 941(l0): point = 1652
   Insn 940(l0): point = 1654
   Insn 938(l0): point = 1657
   Insn 1176(l0): point = 1660
   Insn 1086(l0): point = 1662
   Insn 956(l0): point = 1665
   Insn 955(l0): point = 1667
   Insn 954(l0): point = 1669
   Insn 953(l0): point = 1671
   Insn 952(l0): point = 1673
   Insn 951(l0): point = 1675
   Insn 950(l0): point = 1677
   Insn 949(l0): point = 1679
   Insn 948(l0): point = 1681
   Insn 947(l0): point = 1683
   Insn 945(l0): point = 1686
   Insn 1174(l0): point = 1689
   Insn 1080(l0): point = 1691
   Insn 1079(l0): point = 1693
   Insn 1078(l0): point = 1695
   Insn 1077(l0): point = 1697
   Insn 1076(l0): point = 1699
   Insn 1075(l0): point = 1701
   Insn 1074(l0): point = 1703
   Insn 1073(l0): point = 1705
   Insn 1072(l0): point = 1707
   Insn 1071(l0): point = 1709
   Insn 1070(l0): point = 1711
   Insn 1069(l0): point = 1713
   Insn 1068(l0): point = 1715
   Insn 1067(l0): point = 1717
   Insn 1066(l0): point = 1719
   Insn 1065(l0): point = 1721
   Insn 1064(l0): point = 1723
   Insn 1063(l0): point = 1725
   Insn 1062(l0): point = 1727
   Insn 1061(l0): point = 1729
   Insn 1060(l0): point = 1731
   Insn 1059(l0): point = 1733
   Insn 1058(l0): point = 1735
   Insn 1057(l0): point = 1737
   Insn 1056(l0): point = 1739
   Insn 1055(l0): point = 1741
   Insn 1054(l0): point = 1743
   Insn 1053(l0): point = 1745
   Insn 1052(l0): point = 1747
   Insn 1051(l0): point = 1749
   Insn 1050(l0): point = 1751
   Insn 1049(l0): point = 1753
   Insn 1048(l0): point = 1755
   Insn 1047(l0): point = 1757
   Insn 1046(l0): point = 1759
   Insn 1045(l0): point = 1761
   Insn 1044(l0): point = 1763
   Insn 1043(l0): point = 1765
   Insn 1042(l0): point = 1767
   Insn 1041(l0): point = 1769
   Insn 1040(l0): point = 1771
   Insn 1039(l0): point = 1773
   Insn 1038(l0): point = 1775
   Insn 1037(l0): point = 1777
   Insn 1036(l0): point = 1779
   Insn 1035(l0): point = 1781
   Insn 1034(l0): point = 1783
   Insn 1033(l0): point = 1785
   Insn 1032(l0): point = 1787
   Insn 1031(l0): point = 1789
   Insn 1030(l0): point = 1791
   Insn 1029(l0): point = 1793
   Insn 1028(l0): point = 1795
   Insn 1027(l0): point = 1797
   Insn 1026(l0): point = 1799
   Insn 1025(l0): point = 1801
   Insn 1024(l0): point = 1803
   Insn 1023(l0): point = 1805
   Insn 1022(l0): point = 1807
   Insn 1021(l0): point = 1809
   Insn 1020(l0): point = 1811
   Insn 1019(l0): point = 1813
   Insn 1018(l0): point = 1815
   Insn 1017(l0): point = 1817
   Insn 1016(l0): point = 1819
   Insn 1015(l0): point = 1821
   Insn 1014(l0): point = 1823
   Insn 1013(l0): point = 1825
   Insn 1012(l0): point = 1827
   Insn 1011(l0): point = 1829
   Insn 1010(l0): point = 1831
   Insn 1009(l0): point = 1833
   Insn 1008(l0): point = 1835
   Insn 1007(l0): point = 1837
   Insn 1006(l0): point = 1839
   Insn 1005(l0): point = 1841
   Insn 1004(l0): point = 1843
   Insn 1003(l0): point = 1845
   Insn 1002(l0): point = 1847
   Insn 1001(l0): point = 1849
   Insn 1000(l0): point = 1851
   Insn 999(l0): point = 1853
   Insn 998(l0): point = 1855
   Insn 997(l0): point = 1857
   Insn 996(l0): point = 1859
   Insn 995(l0): point = 1861
   Insn 994(l0): point = 1863
   Insn 993(l0): point = 1865
   Insn 992(l0): point = 1867
   Insn 991(l0): point = 1869
   Insn 990(l0): point = 1871
   Insn 989(l0): point = 1873
   Insn 988(l0): point = 1875
   Insn 987(l0): point = 1877
   Insn 986(l0): point = 1879
   Insn 985(l0): point = 1881
   Insn 984(l0): point = 1883
   Insn 983(l0): point = 1885
   Insn 982(l0): point = 1887
   Insn 981(l0): point = 1889
   Insn 980(l0): point = 1891
   Insn 979(l0): point = 1893
   Insn 978(l0): point = 1895
   Insn 977(l0): point = 1897
   Insn 976(l0): point = 1899
   Insn 975(l0): point = 1901
   Insn 974(l0): point = 1903
   Insn 973(l0): point = 1905
   Insn 972(l0): point = 1907
   Insn 971(l0): point = 1909
   Insn 970(l0): point = 1911
   Insn 969(l0): point = 1913
   Insn 968(l0): point = 1915
   Insn 967(l0): point = 1917
   Insn 966(l0): point = 1919
   Insn 965(l0): point = 1921
   Insn 964(l0): point = 1923
   Insn 963(l0): point = 1925
   Insn 962(l0): point = 1927
   Insn 961(l0): point = 1929
   Insn 960(l0): point = 1931
   Insn 959(l0): point = 1933
   Insn 958(l0): point = 1935
   Insn 27(l0): point = 1938
   Insn 26(l0): point = 1940
   Insn 25(l0): point = 1942
   Insn 24(l0): point = 1944
   Insn 21(l0): point = 1946
   Insn 19(l0): point = 1948
   Insn 18(l0): point = 1950
   Insn 17(l0): point = 1952
   Insn 16(l0): point = 1954
   Insn 15(l0): point = 1956
   Insn 14(l0): point = 1958
   Insn 13(l0): point = 1960
   Insn 12(l0): point = 1962
   Insn 11(l0): point = 1964
   Insn 10(l0): point = 1966
   Insn 9(l0): point = 1968
   Insn 8(l0): point = 1970
   Insn 7(l0): point = 1972
   Insn 6(l0): point = 1974
   Insn 5(l0): point = 1976
   Insn 4(l0): point = 1978
   Insn 3(l0): point = 1980
   Insn 2(l0): point = 1982
 a0(r368): [11..12]
 a1(r367): [13..14]
 a2(r366): [20..21]
 a3(r704): [22..23]
 a4(r365): [29..30]
 a5(r703): [31..32]
 a6(r702): [1694..1695]
 a7(r357): [1694..1725]
 a8(r364): [1694..1697]
 a9(r358): [1696..1721]
 a10(r701): [1698..1699]
 a11(r362): [1698..1705]
 a12(r363): [1700..1701]
 a13(r700): [1702..1703]
 a14(r361): [1706..1711]
 a15(r698): [1706..1707]
 a16(r699): [1708..1709]
 a17(r697): [1712..1713]
 a18(r360): [1712..1715]
 a19(r359): [1716..1717]
 a20(r696): [1718..1719]
 a21(r695): [1722..1723]
 a22(r356): [1726..1731]
 a23(r693): [1726..1727]
 a24(r694): [1728..1729]
 a25(r692): [1732..1733]
 a26(r355): [1732..1735]
 a27(r689): [1740..1749] [1736..1737]
 a28(r691): [1738..1739]
 a29(r690): [1742..1743]
 a30(r354): [1746..1751]
 a31(r688): [1752..1753]
 a32(r687): [1756..1757]
 a33(r346): [1756..1787]
 a34(r353): [1756..1759]
 a35(r347): [1758..1783]
 a36(r686): [1760..1761]
 a37(r351): [1760..1767]
 a38(r352): [1762..1763]
 a39(r685): [1764..1765]
 a40(r350): [1768..1773]
 a41(r683): [1768..1769]
 a42(r684): [1770..1771]
 a43(r682): [1774..1775]
 a44(r349): [1774..1777]
 a45(r348): [1778..1779]
 a46(r681): [1780..1781]
 a47(r680): [1784..1785]
 a48(r345): [1788..1793]
 a49(r678): [1788..1789]
 a50(r679): [1790..1791]
 a51(r677): [1794..1795]
 a52(r344): [1794..1797]
 a53(r674): [1802..1811] [1798..1799]
 a54(r676): [1800..1801]
 a55(r675): [1804..1805]
 a56(r343): [1808..1813]
 a57(r673): [1814..1815]
 a58(r672): [1818..1819]
 a59(r335): [1818..1849]
 a60(r342): [1818..1821]
 a61(r336): [1820..1845]
 a62(r671): [1822..1823]
 a63(r340): [1822..1829]
 a64(r341): [1824..1825]
 a65(r670): [1826..1827]
 a66(r339): [1830..1835]
 a67(r668): [1830..1831]
 a68(r669): [1832..1833]
 a69(r667): [1836..1837]
 a70(r338): [1836..1839]
 a71(r337): [1840..1841]
 a72(r666): [1842..1843]
 a73(r665): [1846..1847]
 a74(r334): [1850..1855]
 a75(r663): [1850..1851]
 a76(r664): [1852..1853]
 a77(r662): [1856..1857]
 a78(r333): [1856..1859]
 a79(r659): [1864..1873] [1860..1861]
 a80(r661): [1862..1863]
 a81(r660): [1866..1867]
 a82(r332): [1870..1875]
 a83(r658): [1876..1877]
 a84(r656): [1880..1881]
 a85(r326): [1880..1907]
 a86(r331): [1880..1885]
 a87(r657): [1882..1883]
 a88(r654): [1886..1887]
 a89(r330): [1886..1891]
 a90(r655): [1888..1889]
 a91(r329): [1892..1897]
 a92(r652): [1892..1893]
 a93(r653): [1894..1895]
 a94(r651): [1898..1899]
 a95(r328): [1898..1901]
 a96(r327): [1902..1903]
 a97(r650): [1904..1905]
 a98(r325): [1908..1913]
 a99(r648): [1908..1909]
 a100(r649): [1910..1911]
 a101(r647): [1914..1915]
 a102(r324): [1914..1917]
 a103(r644): [1922..1931] [1918..1919]
 a104(r646): [1920..1921]
 a105(r645): [1924..1925]
 a106(r323): [1928..1933]
 a107(r643): [1934..1935]
 a108(r322): [1668..1669]
 a109(r321): [1670..1671]
 a110(r320): [1672..1673]
 a111(r319): [1672..1675]
 a112(r318): [1676..1677]
 a113(r317): [1678..1679]
 a114(r316): [1680..1681]
 a115(r642): [1682..1683]
 a116(r315): [1651..1652]
 a117(r641): [1653..1654]
 a118(r314): [108..109]
 a119(r640): [110..111]
 a120(r292): [1437..1562]
 a121(r313): [1437..1438]
 a122(r312): [1439..1440]
 a123(r304): [1439..1480]
 a124(r311): [1441..1442]
 a125(r310): [1443..1444]
 a126(r308): [1443..1450]
 a127(r309): [1445..1446]
 a128(r639): [1447..1448]
 a129(r307): [1451..1456]
 a130(r637): [1451..1452]
 a131(r638): [1453..1454]
 a132(r636): [1457..1458]
 a133(r306): [1457..1460]
 a134(r633): [1465..1474] [1461..1462]
 a135(r635): [1463..1464]
 a136(r634): [1467..1468]
 a137(r305): [1471..1476]
 a138(r632): [1477..1478]
 a139(r303): [1481..1482]
 a140(r302): [1483..1484]
 a141(r300): [1483..1490]
 a142(r301): [1485..1486]
 a143(r631): [1487..1488]
 a144(r297): [1491..1524]
 a145(r630): [1491..1492]
 a146(r299): [1493..1494]
 a147(r629): [1495..1496]
 a148(r298): [1495..1498]
 a149(r628): [1499..1500]
 a150(r621): [1501..1520]
 a151(r625): [1505..1514] [1501..1502]
 a152(r627): [1503..1504]
 a153(r626): [1507..1508]
 a154(r623): [1511..1516]
 a155(r624): [1517..1518]
 a156(r622): [1521..1522]
 a157(r620): [1525..1526]
 a158(r296): [1525..1528]
 a159(r295): [1529..1530]
 a160(r294): [1531..1532]
 a161(r619): [1533..1534]
 a162(r293): [1533..1536]
 a163(r618): [1537..1538]
 a164(r611): [1539..1558]
 a165(r615): [1543..1552] [1539..1540]
 a166(r617): [1541..1542]
 a167(r616): [1545..1546]
 a168(r613): [1549..1554]
 a169(r614): [1555..1556]
 a170(r612): [1559..1560]
 a171(r291): [1563..1564]
 a172(r289): [1563..1570]
 a173(r290): [1565..1566]
 a174(r610): [1567..1568]
 a175(r286): [1571..1604]
 a176(r609): [1571..1572]
 a177(r288): [1573..1574]
 a178(r608): [1575..1576]
 a179(r287): [1575..1578]
 a180(r607): [1579..1580]
 a181(r600): [1581..1600]
 a182(r604): [1585..1594] [1581..1582]
 a183(r606): [1583..1584]
 a184(r605): [1587..1588]
 a185(r602): [1591..1596]
 a186(r603): [1597..1598]
 a187(r601): [1601..1602]
 a188(r599): [1605..1606]
 a189(r285): [1605..1608]
 a190(r284): [1609..1610]
 a191(r283): [1611..1612]
 a192(r598): [1613..1614]
 a193(r282): [1613..1616]
 a194(r597): [1617..1618]
 a195(r590): [1619..1638]
 a196(r594): [1623..1632] [1619..1620]
 a197(r596): [1621..1622]
 a198(r595): [1625..1626]
 a199(r592): [1629..1634]
 a200(r593): [1635..1636]
 a201(r591): [1639..1640]
 a202(r281): [1421..1422]
 a203(r280): [1423..1424]
 a204(r589): [1425..1426]
 a205(r279): [1402..1403]
 a206(r278): [1404..1405]
 a207(r588): [1406..1407]
 a208(r277): [120..121]
 a209(r276): [122..123]
 a210(r587): [124..125]
 a211(r275): [1366..1369]
 a212(r586): [1366..1367]
 a213(r274): [1370..1371]
 a214(r272): [1370..1377]
 a215(r273): [1372..1373]
 a216(r585): [1374..1375]
 a217(r271): [1378..1383]
 a218(r583): [1378..1379]
 a219(r584): [1380..1381]
 a220(r582): [1384..1385]
 a221(r270): [1384..1387]
 a222(r269): [1388..1389]
 a223(r581): [1390..1391]
 a224(r268): [1350..1351]
 a225(r267): [1352..1353]
 a226(r580): [1354..1355]
 a227(r266): [1333..1334]
 a228(r579): [1335..1336]
 a229(r265): [134..135]
 a230(r578): [136..137]
 a231(r261): [1295..1314]
 a232(r576): [1295..1296]
 a233(r264): [1295..1300]
 a234(r577): [1297..1298]
 a235(r575): [1301..1302]
 a236(r263): [1307..1308]
 a237(r262): [1309..1310]
 a238(r574): [1311..1312]
 a239(r573): [1315..1316]
 a240(r260): [1315..1318]
 a241(r259): [1319..1320]
 a242(r572): [1321..1322]
 a243(r258): [1281..1282]
 a244(r571): [1283..1284]
 a245(r257): [146..147]
 a246(r570): [148..149]
 a247(r569): [155..156]
 a248(r256): [155..158]
 a249(r568): [159..160]
 a250(r566): [163..166]
 a251(r567): [167..168]
 a252(r565): [1259..1260]
 a253(r255): [1261..1262]
 a254(r564): [1263..1264]
 a255(r254): [1263..1266]
 a256(r253): [1267..1268]
 a257(r563): [1269..1270]
 a258(r252): [1244..1245]
 a259(r251): [1246..1247]
 a260(r562): [1248..1249]
 a261(r250): [1248..1251]
 a262(r249): [1252..1253]
 a263(r561): [1254..1255]
 a264(r248): [174..175]
 a265(r560): [176..177]
 a266(r559): [1160..1161]
 a267(r247): [1160..1185]
 a268(r552): [1162..1181]
 a269(r556): [1166..1175] [1162..1163]
 a270(r558): [1164..1165]
 a271(r557): [1168..1169]
 a272(r554): [1172..1177]
 a273(r555): [1178..1179]
 a274(r553): [1182..1183]
 a275(r246): [1186..1187]
 a276(r551): [1188..1189]
 a277(r245): [1188..1191]
 a278(r244): [1192..1193]
 a279(r550): [1194..1195]
 a280(r549): [1198..1199]
 a281(r243): [1198..1223]
 a282(r542): [1200..1219]
 a283(r546): [1204..1213] [1200..1201]
 a284(r548): [1202..1203]
 a285(r547): [1206..1207]
 a286(r544): [1210..1215]
 a287(r545): [1216..1217]
 a288(r543): [1220..1221]
 a289(r242): [1224..1225]
 a290(r541): [1226..1227]
 a291(r241): [1226..1229]
 a292(r240): [1230..1231]
 a293(r540): [1232..1233]
 a294(r239): [1144..1145]
 a295(r238): [1146..1147]
 a296(r539): [1148..1149]
 a297(r237): [186..187]
 a298(r236): [188..189]
 a299(r538): [190..191]
 a300(r537): [836..837]
 a301(r228): [836..881]
 a302(r235): [836..839]
 a303(r229): [838..877]
 a304(r536): [840..841]
 a305(r233): [840..847]
 a306(r234): [842..843]
 a307(r535): [844..845]
 a308(r232): [848..853]
 a309(r533): [848..849]
 a310(r534): [850..851]
 a311(r532): [854..855]
 a312(r231): [854..857]
 a313(r529): [862..871] [858..859]
 a314(r531): [860..861]
 a315(r530): [864..865]
 a316(r230): [868..873]
 a317(r528): [874..875]
 a318(r527): [878..879]
 a319(r227): [882..887]
 a320(r525): [882..883]
 a321(r526): [884..885]
 a322(r524): [888..889]
 a323(r226): [888..891]
 a324(r521): [896..905] [892..893]
 a325(r523): [894..895]
 a326(r522): [898..899]
 a327(r225): [902..907]
 a328(r520): [908..909]
 a329(r519): [912..913]
 a330(r217): [912..957]
 a331(r224): [912..915]
 a332(r218): [914..953]
 a333(r518): [916..917]
 a334(r222): [916..923]
 a335(r223): [918..919]
 a336(r517): [920..921]
 a337(r221): [924..929]
 a338(r515): [924..925]
 a339(r516): [926..927]
 a340(r514): [930..931]
 a341(r220): [930..933]
 a342(r511): [938..947] [934..935]
 a343(r513): [936..937]
 a344(r512): [940..941]
 a345(r219): [944..949]
 a346(r510): [950..951]
 a347(r509): [954..955]
 a348(r216): [958..963]
 a349(r507): [958..959]
 a350(r508): [960..961]
 a351(r506): [964..965]
 a352(r215): [964..967]
 a353(r503): [972..981] [968..969]
 a354(r505): [970..971]
 a355(r504): [974..975]
 a356(r214): [978..983]
 a357(r502): [984..985]
 a358(r501): [988..989]
 a359(r206): [988..1033]
 a360(r213): [988..991]
 a361(r207): [990..1029]
 a362(r500): [992..993]
 a363(r211): [992..999]
 a364(r212): [994..995]
 a365(r499): [996..997]
 a366(r210): [1000..1005]
 a367(r497): [1000..1001]
 a368(r498): [1002..1003]
 a369(r496): [1006..1007]
 a370(r209): [1006..1009]
 a371(r493): [1014..1023] [1010..1011]
 a372(r495): [1012..1013]
 a373(r494): [1016..1017]
 a374(r208): [1020..1025]
 a375(r492): [1026..1027]
 a376(r491): [1030..1031]
 a377(r205): [1034..1039]
 a378(r489): [1034..1035]
 a379(r490): [1036..1037]
 a380(r488): [1040..1041]
 a381(r204): [1040..1043]
 a382(r485): [1048..1057] [1044..1045]
 a383(r487): [1046..1047]
 a384(r486): [1050..1051]
 a385(r203): [1054..1059]
 a386(r484): [1060..1061]
 a387(r482): [1064..1065]
 a388(r197): [1064..1105]
 a389(r202): [1064..1069]
 a390(r483): [1066..1067]
 a391(r480): [1070..1071]
 a392(r201): [1070..1075]
 a393(r481): [1072..1073]
 a394(r200): [1076..1081]
 a395(r478): [1076..1077]
 a396(r479): [1078..1079]
 a397(r477): [1082..1083]
 a398(r199): [1082..1085]
 a399(r474): [1090..1099] [1086..1087]
 a400(r476): [1088..1089]
 a401(r475): [1092..1093]
 a402(r198): [1096..1101]
 a403(r473): [1102..1103]
 a404(r196): [1106..1111]
 a405(r471): [1106..1107]
 a406(r472): [1108..1109]
 a407(r470): [1112..1113]
 a408(r195): [1112..1115]
 a409(r467): [1120..1129] [1116..1117]
 a410(r469): [1118..1119]
 a411(r468): [1122..1123]
 a412(r194): [1126..1131]
 a413(r466): [1132..1133]
 a414(r193): [810..811]
 a415(r192): [812..813]
 a416(r191): [814..815]
 a417(r190): [814..817]
 a418(r189): [818..819]
 a419(r188): [820..821]
 a420(r187): [822..823]
 a421(r465): [824..825]
 a422(r186): [791..792]
 a423(r185): [793..794]
 a424(r464): [795..796]
 a425(r184): [200..201]
 a426(r183): [202..203]
 a427(r463): [204..205]
 a428(r171): [684..691]
 a429(r167): [686..721]
 a430(r161): [690..737]
 a431(r170): [692..697]
 a432(r461): [692..693]
 a433(r462): [694..695]
 a434(r460): [698..699]
 a435(r169): [698..701]
 a436(r457): [706..715] [702..703]
 a437(r459): [704..705]
 a438(r458): [708..709]
 a439(r168): [712..717]
 a440(r456): [718..719]
 a441(r166): [722..723]
 a442(r165): [724..725]
 a443(r163): [724..731]
 a444(r164): [726..727]
 a445(r455): [728..729]
 a446(r162): [732..733]
 a447(r454): [734..735]
 a448(r453): [738..739]
 a449(r160): [745..746]
 a450(r159): [747..748]
 a451(r452): [749..750]
 a452(r182): [621..628]
 a453(r178): [623..658]
 a454(r172): [627..674]
 a455(r181): [629..634]
 a456(r450): [629..630]
 a457(r451): [631..632]
 a458(r449): [635..636]
 a459(r180): [635..638]
 a460(r446): [643..652] [639..640]
 a461(r448): [641..642]
 a462(r447): [645..646]
 a463(r179): [649..654]
 a464(r445): [655..656]
 a465(r177): [659..660]
 a466(r176): [661..662]
 a467(r174): [661..668]
 a468(r175): [663..664]
 a469(r444): [665..666]
 a470(r173): [669..670]
 a471(r443): [671..672]
 a472(r442): [675..676]
 a473(r158): [756..757]
 a474(r157): [758..759]
 a475(r156): [760..761]
 a476(r441): [762..763]
 a477(r155): [762..765]
 a478(r154): [766..767]
 a479(r440): [768..769]
 a480(r153): [775..776]
 a481(r152): [777..778]
 a482(r439): [779..780]
 a483(r151): [582..583]
 a484(r150): [584..585]
 a485(r438): [586..587]
 a486(r149): [595..602]
 a487(r148): [601..606]
 a488(r437): [603..604]
 a489(r436): [607..608]
 a490(r147): [214..215]
 a491(r146): [216..217]
 a492(r435): [218..219]
 a493(r130): [354..373]
 a494(r433): [354..355]
 a495(r133): [354..359]
 a496(r434): [356..357]
 a497(r432): [360..361]
 a498(r132): [366..367]
 a499(r131): [368..369]
 a500(r431): [370..371]
 a501(r430): [374..375]
 a502(r129): [374..377]
 a503(r427): [382..391] [378..379]
 a504(r429): [380..381]
 a505(r428): [384..385]
 a506(r128): [388..393]
 a507(r426): [394..395]
 a508(r124): [398..417]
 a509(r424): [398..399]
 a510(r127): [398..403]
 a511(r425): [400..401]
 a512(r423): [404..405]
 a513(r126): [410..411]
 a514(r125): [412..413]
 a515(r422): [414..415]
 a516(r421): [418..419]
 a517(r123): [418..421]
 a518(r418): [426..435] [422..423]
 a519(r420): [424..425]
 a520(r419): [428..429]
 a521(r122): [432..437]
 a522(r417): [438..439]
 a523(r121): [445..446]
 a524(r120): [447..448]
 a525(r416): [449..450]
 a526(r142): [456..475]
 a527(r414): [456..457]
 a528(r145): [456..461]
 a529(r415): [458..459]
 a530(r413): [462..463]
 a531(r144): [468..469]
 a532(r143): [470..471]
 a533(r412): [472..473]
 a534(r411): [476..477]
 a535(r141): [476..479]
 a536(r408): [484..493] [480..481]
 a537(r410): [482..483]
 a538(r409): [486..487]
 a539(r140): [490..495]
 a540(r407): [496..497]
 a541(r136): [500..519]
 a542(r405): [500..501]
 a543(r139): [500..505]
 a544(r406): [502..503]
 a545(r404): [506..507]
 a546(r138): [512..513]
 a547(r137): [514..515]
 a548(r403): [516..517]
 a549(r402): [520..521]
 a550(r135): [520..523]
 a551(r399): [528..537] [524..525]
 a552(r401): [526..527]
 a553(r400): [530..531]
 a554(r134): [534..539]
 a555(r398): [540..541]
 a556(r119): [558..559]
 a557(r118): [560..561]
 a558(r117): [562..563]
 a559(r397): [564..565]
 a560(r116): [564..567]
 a561(r115): [568..569]
 a562(r396): [570..571]
 a563(r114): [547..548]
 a564(r113): [549..550]
 a565(r395): [551..552]
 a566(r112): [337..338]
 a567(r111): [339..340]
 a568(r394): [341..342]
 a569(r110): [228..229]
 a570(r109): [230..231]
 a571(r393): [232..233]
 a572(r392): [239..240]
 a573(r108): [241..242]
 a574(r391): [243..244]
 a575(r107): [250..251]
 a576(r106): [254..255]
 a577(r105): [260..267]
 a578(r104): [266..271]
 a579(r390): [268..269]
 a580(r103): [272..273]
 a581(r389): [274..275]
 a582(r102): [274..277]
 a583(r101): [278..279]
 a584(r388): [280..281]
 a585(r100): [287..288]
 a586(r387): [289..290]
 a587(r99): [289..292]
 a588(r98): [293..294]
 a589(r386): [295..296]
 a590(r95): [299..318]
 a591(r97): [299..300]
 a592(r96): [305..308]
 a593(r385): [309..310]
 a594(r384): [309..312]
 a595(r382): [313..314]
 a596(r383): [315..316]
 a597(r381): [319..320]
 a598(r94): [319..322]
 a599(r93): [323..324]
 a600(r380): [325..326]
 a601(r92): [81..82]
 a602(r91): [83..84]
 a603(r379): [85..86]
 a604(r90): [85..88]
 a605(r377): [93..98] [89..90]
 a606(r378): [91..92]
 a607(r89): [95..100]
 a608(r376): [101..102]
 a609(r88): [65..66]
 a610(r87): [67..68]
 a611(r375): [69..70]
 a612(r374): [1949..1950]
 a613(r373): [1953..1954]
 a614(r372): [1957..1958]
 a615(r371): [1961..1962]
 a616(r370): [1965..1966]
 a617(r369): [1969..1970]
Compressing live ranges: from 1985 to 986 - 49%
Ranges after the compression:
 a0(r368): [0..1]
 a1(r367): [2..3]
 a2(r366): [4..5]
 a3(r704): [6..7]
 a4(r365): [8..9]
 a5(r703): [10..11]
 a6(r702): [826..827]
 a7(r357): [826..847]
 a8(r364): [826..829]
 a9(r358): [828..845]
 a10(r701): [830..831]
 a11(r362): [830..835]
 a12(r363): [832..833]
 a13(r700): [834..835]
 a14(r361): [836..839]
 a15(r698): [836..837]
 a16(r699): [838..839]
 a17(r697): [840..841]
 a18(r360): [840..841]
 a19(r359): [842..843]
 a20(r696): [844..845]
 a21(r695): [846..847]
 a22(r356): [848..851]
 a23(r693): [848..849]
 a24(r694): [850..851]
 a25(r692): [852..853]
 a26(r355): [852..853]
 a27(r689): [858..861] [854..855]
 a28(r691): [856..857]
 a29(r690): [858..859]
 a30(r354): [860..861]
 a31(r688): [862..863]
 a32(r687): [864..865]
 a33(r346): [864..885]
 a34(r353): [864..867]
 a35(r347): [866..883]
 a36(r686): [868..869]
 a37(r351): [868..873]
 a38(r352): [870..871]
 a39(r685): [872..873]
 a40(r350): [874..877]
 a41(r683): [874..875]
 a42(r684): [876..877]
 a43(r682): [878..879]
 a44(r349): [878..879]
 a45(r348): [880..881]
 a46(r681): [882..883]
 a47(r680): [884..885]
 a48(r345): [886..889]
 a49(r678): [886..887]
 a50(r679): [888..889]
 a51(r677): [890..891]
 a52(r344): [890..891]
 a53(r674): [896..899] [892..893]
 a54(r676): [894..895]
 a55(r675): [896..897]
 a56(r343): [898..899]
 a57(r673): [900..901]
 a58(r672): [902..903]
 a59(r335): [902..923]
 a60(r342): [902..905]
 a61(r336): [904..921]
 a62(r671): [906..907]
 a63(r340): [906..911]
 a64(r341): [908..909]
 a65(r670): [910..911]
 a66(r339): [912..915]
 a67(r668): [912..913]
 a68(r669): [914..915]
 a69(r667): [916..917]
 a70(r338): [916..917]
 a71(r337): [918..919]
 a72(r666): [920..921]
 a73(r665): [922..923]
 a74(r334): [924..927]
 a75(r663): [924..925]
 a76(r664): [926..927]
 a77(r662): [928..929]
 a78(r333): [928..929]
 a79(r659): [934..937] [930..931]
 a80(r661): [932..933]
 a81(r660): [934..935]
 a82(r332): [936..937]
 a83(r658): [938..939]
 a84(r656): [940..941]
 a85(r326): [940..957]
 a86(r331): [940..943]
 a87(r657): [942..943]
 a88(r654): [944..945]
 a89(r330): [944..947]
 a90(r655): [946..947]
 a91(r329): [948..951]
 a92(r652): [948..949]
 a93(r653): [950..951]
 a94(r651): [952..953]
 a95(r328): [952..953]
 a96(r327): [954..955]
 a97(r650): [956..957]
 a98(r325): [958..961]
 a99(r648): [958..959]
 a100(r649): [960..961]
 a101(r647): [962..963]
 a102(r324): [962..963]
 a103(r644): [968..971] [964..965]
 a104(r646): [966..967]
 a105(r645): [968..969]
 a106(r323): [970..971]
 a107(r643): [972..973]
 a108(r322): [812..813]
 a109(r321): [814..815]
 a110(r320): [816..817]
 a111(r319): [816..817]
 a112(r318): [818..819]
 a113(r317): [820..821]
 a114(r316): [822..823]
 a115(r642): [824..825]
 a116(r315): [808..809]
 a117(r641): [810..811]
 a118(r314): [32..33]
 a119(r640): [34..35]
 a120(r292): [682..759]
 a121(r313): [682..683]
 a122(r312): [684..685]
 a123(r304): [684..709]
 a124(r311): [686..687]
 a125(r310): [688..689]
 a126(r308): [688..693]
 a127(r309): [690..691]
 a128(r639): [692..693]
 a129(r307): [694..697]
 a130(r637): [694..695]
 a131(r638): [696..697]
 a132(r636): [698..699]
 a133(r306): [698..699]
 a134(r633): [704..707] [700..701]
 a135(r635): [702..703]
 a136(r634): [704..705]
 a137(r305): [706..707]
 a138(r632): [708..709]
 a139(r303): [710..711]
 a140(r302): [712..713]
 a141(r300): [712..717]
 a142(r301): [714..715]
 a143(r631): [716..717]
 a144(r297): [718..737]
 a145(r630): [718..719]
 a146(r299): [720..721]
 a147(r629): [722..723]
 a148(r298): [722..723]
 a149(r628): [724..725]
 a150(r621): [726..735]
 a151(r625): [730..733] [726..727]
 a152(r627): [728..729]
 a153(r626): [730..731]
 a154(r623): [732..733]
 a155(r624): [734..735]
 a156(r622): [736..737]
 a157(r620): [738..739]
 a158(r296): [738..739]
 a159(r295): [740..741]
 a160(r294): [742..743]
 a161(r619): [744..745]
 a162(r293): [744..745]
 a163(r618): [746..747]
 a164(r611): [748..757]
 a165(r615): [752..755] [748..749]
 a166(r617): [750..751]
 a167(r616): [752..753]
 a168(r613): [754..755]
 a169(r614): [756..757]
 a170(r612): [758..759]
 a171(r291): [760..761]
 a172(r289): [760..765]
 a173(r290): [762..763]
 a174(r610): [764..765]
 a175(r286): [766..785]
 a176(r609): [766..767]
 a177(r288): [768..769]
 a178(r608): [770..771]
 a179(r287): [770..771]
 a180(r607): [772..773]
 a181(r600): [774..783]
 a182(r604): [778..781] [774..775]
 a183(r606): [776..777]
 a184(r605): [778..779]
 a185(r602): [780..781]
 a186(r603): [782..783]
 a187(r601): [784..785]
 a188(r599): [786..787]
 a189(r285): [786..787]
 a190(r284): [788..789]
 a191(r283): [790..791]
 a192(r598): [792..793]
 a193(r282): [792..793]
 a194(r597): [794..795]
 a195(r590): [796..805]
 a196(r594): [800..803] [796..797]
 a197(r596): [798..799]
 a198(r595): [800..801]
 a199(r592): [802..803]
 a200(r593): [804..805]
 a201(r591): [806..807]
 a202(r281): [676..677]
 a203(r280): [678..679]
 a204(r589): [680..681]
 a205(r279): [670..671]
 a206(r278): [672..673]
 a207(r588): [674..675]
 a208(r277): [36..37]
 a209(r276): [38..39]
 a210(r587): [40..41]
 a211(r275): [652..653]
 a212(r586): [652..653]
 a213(r274): [654..655]
 a214(r272): [654..659]
 a215(r273): [656..657]
 a216(r585): [658..659]
 a217(r271): [660..663]
 a218(r583): [660..661]
 a219(r584): [662..663]
 a220(r582): [664..665]
 a221(r270): [664..665]
 a222(r269): [666..667]
 a223(r581): [668..669]
 a224(r268): [646..647]
 a225(r267): [648..649]
 a226(r580): [650..651]
 a227(r266): [642..643]
 a228(r579): [644..645]
 a229(r265): [42..43]
 a230(r578): [44..45]
 a231(r261): [624..635]
 a232(r576): [624..625]
 a233(r264): [624..627]
 a234(r577): [626..627]
 a235(r575): [628..629]
 a236(r263): [630..631]
 a237(r262): [632..633]
 a238(r574): [634..635]
 a239(r573): [636..637]
 a240(r260): [636..637]
 a241(r259): [638..639]
 a242(r572): [640..641]
 a243(r258): [620..621]
 a244(r571): [622..623]
 a245(r257): [46..47]
 a246(r570): [48..49]
 a247(r569): [50..51]
 a248(r256): [50..51]
 a249(r568): [52..53]
 a250(r566): [54..55]
 a251(r567): [56..57]
 a252(r565): [610..611]
 a253(r255): [612..613]
 a254(r564): [614..615]
 a255(r254): [614..615]
 a256(r253): [616..617]
 a257(r563): [618..619]
 a258(r252): [600..601]
 a259(r251): [602..603]
 a260(r562): [604..605]
 a261(r250): [604..605]
 a262(r249): [606..607]
 a263(r561): [608..609]
 a264(r248): [58..59]
 a265(r560): [60..61]
 a266(r559): [556..557]
 a267(r247): [556..569]
 a268(r552): [558..567]
 a269(r556): [562..565] [558..559]
 a270(r558): [560..561]
 a271(r557): [562..563]
 a272(r554): [564..565]
 a273(r555): [566..567]
 a274(r553): [568..569]
 a275(r246): [570..571]
 a276(r551): [572..573]
 a277(r245): [572..573]
 a278(r244): [574..575]
 a279(r550): [576..577]
 a280(r549): [578..579]
 a281(r243): [578..591]
 a282(r542): [580..589]
 a283(r546): [584..587] [580..581]
 a284(r548): [582..583]
 a285(r547): [584..585]
 a286(r544): [586..587]
 a287(r545): [588..589]
 a288(r543): [590..591]
 a289(r242): [592..593]
 a290(r541): [594..595]
 a291(r241): [594..595]
 a292(r240): [596..597]
 a293(r540): [598..599]
 a294(r239): [550..551]
 a295(r238): [552..553]
 a296(r539): [554..555]
 a297(r237): [62..63]
 a298(r236): [64..65]
 a299(r538): [66..67]
 a300(r537): [378..379]
 a301(r228): [378..405]
 a302(r235): [378..381]
 a303(r229): [380..403]
 a304(r536): [382..383]
 a305(r233): [382..387]
 a306(r234): [384..385]
 a307(r535): [386..387]
 a308(r232): [388..391]
 a309(r533): [388..389]
 a310(r534): [390..391]
 a311(r532): [392..393]
 a312(r231): [392..393]
 a313(r529): [398..401] [394..395]
 a314(r531): [396..397]
 a315(r530): [398..399]
 a316(r230): [400..401]
 a317(r528): [402..403]
 a318(r527): [404..405]
 a319(r227): [406..409]
 a320(r525): [406..407]
 a321(r526): [408..409]
 a322(r524): [410..411]
 a323(r226): [410..411]
 a324(r521): [416..419] [412..413]
 a325(r523): [414..415]
 a326(r522): [416..417]
 a327(r225): [418..419]
 a328(r520): [420..421]
 a329(r519): [422..423]
 a330(r217): [422..449]
 a331(r224): [422..425]
 a332(r218): [424..447]
 a333(r518): [426..427]
 a334(r222): [426..431]
 a335(r223): [428..429]
 a336(r517): [430..431]
 a337(r221): [432..435]
 a338(r515): [432..433]
 a339(r516): [434..435]
 a340(r514): [436..437]
 a341(r220): [436..437]
 a342(r511): [442..445] [438..439]
 a343(r513): [440..441]
 a344(r512): [442..443]
 a345(r219): [444..445]
 a346(r510): [446..447]
 a347(r509): [448..449]
 a348(r216): [450..453]
 a349(r507): [450..451]
 a350(r508): [452..453]
 a351(r506): [454..455]
 a352(r215): [454..455]
 a353(r503): [460..463] [456..457]
 a354(r505): [458..459]
 a355(r504): [460..461]
 a356(r214): [462..463]
 a357(r502): [464..465]
 a358(r501): [466..467]
 a359(r206): [466..493]
 a360(r213): [466..469]
 a361(r207): [468..491]
 a362(r500): [470..471]
 a363(r211): [470..475]
 a364(r212): [472..473]
 a365(r499): [474..475]
 a366(r210): [476..479]
 a367(r497): [476..477]
 a368(r498): [478..479]
 a369(r496): [480..481]
 a370(r209): [480..481]
 a371(r493): [486..489] [482..483]
 a372(r495): [484..485]
 a373(r494): [486..487]
 a374(r208): [488..489]
 a375(r492): [490..491]
 a376(r491): [492..493]
 a377(r205): [494..497]
 a378(r489): [494..495]
 a379(r490): [496..497]
 a380(r488): [498..499]
 a381(r204): [498..499]
 a382(r485): [504..507] [500..501]
 a383(r487): [502..503]
 a384(r486): [504..505]
 a385(r203): [506..507]
 a386(r484): [508..509]
 a387(r482): [510..511]
 a388(r197): [510..533]
 a389(r202): [510..513]
 a390(r483): [512..513]
 a391(r480): [514..515]
 a392(r201): [514..517]
 a393(r481): [516..517]
 a394(r200): [518..521]
 a395(r478): [518..519]
 a396(r479): [520..521]
 a397(r477): [522..523]
 a398(r199): [522..523]
 a399(r474): [528..531] [524..525]
 a400(r476): [526..527]
 a401(r475): [528..529]
 a402(r198): [530..531]
 a403(r473): [532..533]
 a404(r196): [534..537]
 a405(r471): [534..535]
 a406(r472): [536..537]
 a407(r470): [538..539]
 a408(r195): [538..539]
 a409(r467): [544..547] [540..541]
 a410(r469): [542..543]
 a411(r468): [544..545]
 a412(r194): [546..547]
 a413(r466): [548..549]
 a414(r193): [364..365]
 a415(r192): [366..367]
 a416(r191): [368..369]
 a417(r190): [368..369]
 a418(r189): [370..371]
 a419(r188): [372..373]
 a420(r187): [374..375]
 a421(r465): [376..377]
 a422(r186): [358..359]
 a423(r185): [360..361]
 a424(r464): [362..363]
 a425(r184): [68..69]
 a426(r183): [70..71]
 a427(r463): [72..73]
 a428(r171): [302..303]
 a429(r167): [302..319]
 a430(r161): [302..331]
 a431(r170): [304..307]
 a432(r461): [304..305]
 a433(r462): [306..307]
 a434(r460): [308..309]
 a435(r169): [308..309]
 a436(r457): [314..317] [310..311]
 a437(r459): [312..313]
 a438(r458): [314..315]
 a439(r168): [316..317]
 a440(r456): [318..319]
 a441(r166): [320..321]
 a442(r165): [322..323]
 a443(r163): [322..327]
 a444(r164): [324..325]
 a445(r455): [326..327]
 a446(r162): [328..329]
 a447(r454): [330..331]
 a448(r453): [332..333]
 a449(r160): [334..335]
 a450(r159): [336..337]
 a451(r452): [338..339]
 a452(r182): [270..271]
 a453(r178): [270..287]
 a454(r172): [270..299]
 a455(r181): [272..275]
 a456(r450): [272..273]
 a457(r451): [274..275]
 a458(r449): [276..277]
 a459(r180): [276..277]
 a460(r446): [282..285] [278..279]
 a461(r448): [280..281]
 a462(r447): [282..283]
 a463(r179): [284..285]
 a464(r445): [286..287]
 a465(r177): [288..289]
 a466(r176): [290..291]
 a467(r174): [290..295]
 a468(r175): [292..293]
 a469(r444): [294..295]
 a470(r173): [296..297]
 a471(r443): [298..299]
 a472(r442): [300..301]
 a473(r158): [340..341]
 a474(r157): [342..343]
 a475(r156): [344..345]
 a476(r441): [346..347]
 a477(r155): [346..347]
 a478(r154): [348..349]
 a479(r440): [350..351]
 a480(r153): [352..353]
 a481(r152): [354..355]
 a482(r439): [356..357]
 a483(r151): [258..259]
 a484(r150): [260..261]
 a485(r438): [262..263]
 a486(r149): [264..265]
 a487(r148): [264..267]
 a488(r437): [266..267]
 a489(r436): [268..269]
 a490(r147): [74..75]
 a491(r146): [76..77]
 a492(r435): [78..79]
 a493(r130): [138..149]
 a494(r433): [138..139]
 a495(r133): [138..141]
 a496(r434): [140..141]
 a497(r432): [142..143]
 a498(r132): [144..145]
 a499(r131): [146..147]
 a500(r431): [148..149]
 a501(r430): [150..151]
 a502(r129): [150..151]
 a503(r427): [156..159] [152..153]
 a504(r429): [154..155]
 a505(r428): [156..157]
 a506(r128): [158..159]
 a507(r426): [160..161]
 a508(r124): [162..173]
 a509(r424): [162..163]
 a510(r127): [162..165]
 a511(r425): [164..165]
 a512(r423): [166..167]
 a513(r126): [168..169]
 a514(r125): [170..171]
 a515(r422): [172..173]
 a516(r421): [174..175]
 a517(r123): [174..175]
 a518(r418): [180..183] [176..177]
 a519(r420): [178..179]
 a520(r419): [180..181]
 a521(r122): [182..183]
 a522(r417): [184..185]
 a523(r121): [186..187]
 a524(r120): [188..189]
 a525(r416): [190..191]
 a526(r142): [192..203]
 a527(r414): [192..193]
 a528(r145): [192..195]
 a529(r415): [194..195]
 a530(r413): [196..197]
 a531(r144): [198..199]
 a532(r143): [200..201]
 a533(r412): [202..203]
 a534(r411): [204..205]
 a535(r141): [204..205]
 a536(r408): [210..213] [206..207]
 a537(r410): [208..209]
 a538(r409): [210..211]
 a539(r140): [212..213]
 a540(r407): [214..215]
 a541(r136): [216..227]
 a542(r405): [216..217]
 a543(r139): [216..219]
 a544(r406): [218..219]
 a545(r404): [220..221]
 a546(r138): [222..223]
 a547(r137): [224..225]
 a548(r403): [226..227]
 a549(r402): [228..229]
 a550(r135): [228..229]
 a551(r399): [234..237] [230..231]
 a552(r401): [232..233]
 a553(r400): [234..235]
 a554(r134): [236..237]
 a555(r398): [238..239]
 a556(r119): [246..247]
 a557(r118): [248..249]
 a558(r117): [250..251]
 a559(r397): [252..253]
 a560(r116): [252..253]
 a561(r115): [254..255]
 a562(r396): [256..257]
 a563(r114): [240..241]
 a564(r113): [242..243]
 a565(r395): [244..245]
 a566(r112): [132..133]
 a567(r111): [134..135]
 a568(r394): [136..137]
 a569(r110): [80..81]
 a570(r109): [82..83]
 a571(r393): [84..85]
 a572(r392): [86..87]
 a573(r108): [88..89]
 a574(r391): [90..91]
 a575(r107): [92..93]
 a576(r106): [94..95]
 a577(r105): [96..97]
 a578(r104): [96..99]
 a579(r390): [98..99]
 a580(r103): [100..101]
 a581(r389): [102..103]
 a582(r102): [102..103]
 a583(r101): [104..105]
 a584(r388): [106..107]
 a585(r100): [108..109]
 a586(r387): [110..111]
 a587(r99): [110..111]
 a588(r98): [112..113]
 a589(r386): [114..115]
 a590(r95): [116..125]
 a591(r97): [116..117]
 a592(r96): [118..119]
 a593(r385): [120..121]
 a594(r384): [120..121]
 a595(r382): [122..123]
 a596(r383): [124..125]
 a597(r381): [126..127]
 a598(r94): [126..127]
 a599(r93): [128..129]
 a600(r380): [130..131]
 a601(r92): [18..19]
 a602(r91): [20..21]
 a603(r379): [22..23]
 a604(r90): [22..23]
 a605(r377): [28..29] [24..25]
 a606(r378): [26..27]
 a607(r89): [28..29]
 a608(r376): [30..31]
 a609(r88): [12..13]
 a610(r87): [14..15]
 a611(r375): [16..17]
 a612(r374): [974..975]
 a613(r373): [976..977]
 a614(r372): [978..979]
 a615(r371): [980..981]
 a616(r370): [982..983]
 a617(r369): [984..985]
  regions=1, blocks=91, points=986
    allocnos=618 (big 0), copies=0, conflicts=0, ranges=644
Disposition:
  610:r87  l0     0  609:r88  l0     0  607:r89  l0     1  604:r90  l0     1
  602:r91  l0     0  601:r92  l0     0  599:r93  l0     0  598:r94  l0     1
  590:r95  l0     3  592:r96  l0     0  591:r97  l0     0  588:r98  l0     0
  587:r99  l0     1  585:r100 l0     0  583:r101 l0     0  582:r102 l0     1
  580:r103 l0     0  578:r104 l0     1  577:r105 l0     0  576:r106 l0     0
  575:r107 l0     0  573:r108 l0     0  570:r109 l0     0  569:r110 l0     0
  567:r111 l0     0  566:r112 l0     0  564:r113 l0     0  563:r114 l0     0
  561:r115 l0     0  560:r116 l0     1  558:r117 l0     0  557:r118 l0     0
  556:r119 l0     0  524:r120 l0     0  523:r121 l0     0  521:r122 l0     1
  517:r123 l0     1  508:r124 l0     3  514:r125 l0     0  513:r126 l0     0
  510:r127 l0     1  506:r128 l0     1  502:r129 l0     1  493:r130 l0     3
  499:r131 l0     0  498:r132 l0     0  495:r133 l0     1  554:r134 l0     1
  550:r135 l0     1  541:r136 l0     3  547:r137 l0     0  546:r138 l0     0
  543:r139 l0     1  539:r140 l0     1  535:r141 l0     1  526:r142 l0     3
  532:r143 l0     0  531:r144 l0     0  528:r145 l0     1  491:r146 l0     0
  490:r147 l0     0  487:r148 l0     1  486:r149 l0     0  484:r150 l0     0
  483:r151 l0     0  481:r152 l0     0  480:r153 l0     0  478:r154 l0     0
  477:r155 l0     1  475:r156 l0     0  474:r157 l0     0  473:r158 l0     0
  450:r159 l0     0  449:r160 l0     0  430:r161 l0     2  446:r162 l0     0
  443:r163 l0     1  444:r164 l0     0  442:r165 l0     0  441:r166 l0     0
  429:r167 l0     4  439:r168 l0     1  435:r169 l0     1  431:r170 l0     1
  428:r171 l0     0  454:r172 l0     2  470:r173 l0     0  467:r174 l0     1
  468:r175 l0     0  466:r176 l0     0  465:r177 l0     0  453:r178 l0     4
  463:r179 l0     1  459:r180 l0     1  455:r181 l0     1  452:r182 l0     0
  426:r183 l0     0  425:r184 l0     0  423:r185 l0     0  422:r186 l0     0
  420:r187 l0     0  419:r188 l0     0  418:r189 l0     0  417:r190 l0     1
  416:r191 l0     0  415:r192 l0     0  414:r193 l0     0  412:r194 l0     1
  408:r195 l0     1  404:r196 l0     1  388:r197 l0     2  402:r198 l0     1
  398:r199 l0     1  394:r200 l0     1  392:r201 l0     1  389:r202 l0     1
  385:r203 l0     1  381:r204 l0     1  377:r205 l0     1  359:r206 l0     2
  361:r207 l0     4  374:r208 l0     1  370:r209 l0     1  366:r210 l0     1
  363:r211 l0     1  364:r212 l0     0  360:r213 l0     1  356:r214 l0     1
  352:r215 l0     1  348:r216 l0     1  330:r217 l0     2  332:r218 l0     4
  345:r219 l0     1  341:r220 l0     1  337:r221 l0     1  334:r222 l0     1
  335:r223 l0     0  331:r224 l0     1  327:r225 l0     1  323:r226 l0     1
  319:r227 l0     1  301:r228 l0     2  303:r229 l0     4  316:r230 l0     1
  312:r231 l0     1  308:r232 l0     1  305:r233 l0     1  306:r234 l0     0
  302:r235 l0     1  298:r236 l0     0  297:r237 l0     0  295:r238 l0     0
  294:r239 l0     0  292:r240 l0     0  291:r241 l0     1  289:r242 l0     0
  281:r243 l0     2  278:r244 l0     0  277:r245 l0     1  275:r246 l0     0
  267:r247 l0     2  264:r248 l0     0  262:r249 l0     0  261:r250 l0     1
  259:r251 l0     0  258:r252 l0     0  256:r253 l0     0  255:r254 l0     1
  253:r255 l0     0  248:r256 l0     1  245:r257 l0     0  243:r258 l0     0
  241:r259 l0     0  240:r260 l0     1  231:r261 l0     3  237:r262 l0     0
  236:r263 l0     0  233:r264 l0     1  229:r265 l0     0  227:r266 l0     0
  225:r267 l0     0  224:r268 l0     0  222:r269 l0     0  221:r270 l0     1
  217:r271 l0     1  214:r272 l0     0  215:r273 l0     1  213:r274 l0     1
  211:r275 l0     1  209:r276 l0     0  208:r277 l0     0  206:r278 l0     0
  205:r279 l0     0  203:r280 l0     0  202:r281 l0     0  193:r282 l0     1
  191:r283 l0     0  190:r284 l0     0  189:r285 l0     1  175:r286 l0     2
  179:r287 l0     1  177:r288 l0     0  172:r289 l0     0  173:r290 l0     1
  171:r291 l0     1  120:r292 l0     2  162:r293 l0     1  160:r294 l0     0
  159:r295 l0     0  158:r296 l0     1  144:r297 l0     4  148:r298 l0     1
  146:r299 l0     0  141:r300 l0     0  142:r301 l0     1  140:r302 l0     1
  139:r303 l0     0  123:r304 l0     4  137:r305 l0     1  133:r306 l0     1
  129:r307 l0     1  126:r308 l0     0  127:r309 l0     1  125:r310 l0     1
  124:r311 l0     0  122:r312 l0     0  121:r313 l0     0  118:r314 l0     0
  116:r315 l0     0  114:r316 l0     0  113:r317 l0     0  112:r318 l0     0
  111:r319 l0     1  110:r320 l0     0  109:r321 l0     0  108:r322 l0     0
  106:r323 l0     1  102:r324 l0     1   98:r325 l0     1   85:r326 l0     1
   96:r327 l0     0   95:r328 l0     2   91:r329 l0     2   89:r330 l0     2
   86:r331 l0     2   82:r332 l0     1   78:r333 l0     1   74:r334 l0     1
   59:r335 l0     1   61:r336 l0     4   71:r337 l0     0   70:r338 l0     2
   66:r339 l0     2   63:r340 l0     2   64:r341 l0     0   60:r342 l0     2
   56:r343 l0     1   52:r344 l0     1   48:r345 l0     1   33:r346 l0     1
   35:r347 l0     4   45:r348 l0     0   44:r349 l0     2   40:r350 l0     2
   37:r351 l0     2   38:r352 l0     0   34:r353 l0     2   30:r354 l0     1
   26:r355 l0     1   22:r356 l0     1    7:r357 l0     1    9:r358 l0     4
   19:r359 l0     0   18:r360 l0     2   14:r361 l0     2   11:r362 l0     2
   12:r363 l0     0    8:r364 l0     2    4:r365 l0     0    2:r366 l0     0
    1:r367 l0     0    0:r368 l0     0  617:r369 l0     0  616:r370 l0     0
  615:r371 l0     0  614:r372 l0     0  613:r373 l0     0  612:r374 l0     0
  611:r375 l0     0  608:r376 l0     0  605:r377 l0     0  606:r378 l0     0
  603:r379 l0     0  600:r380 l0     0  597:r381 l0     0  595:r382 l0     0
  596:r383 l0     0  594:r384 l0     1  593:r385 l0     0  589:r386 l0     0
  586:r387 l0     0  584:r388 l0     0  581:r389 l0     0  579:r390 l0     0
  574:r391 l0     0  572:r392 l0     0  571:r393 l0     0  568:r394 l0     0
  565:r395 l0     0  562:r396 l0     0  559:r397 l0     0  555:r398 l0     0
  551:r399 l0     0  553:r400 l0     1  552:r401 l0     0  549:r402 l0     0
  548:r403 l0     0  545:r404 l0     0  542:r405 l0     0  544:r406 l0     0
  540:r407 l0     0  536:r408 l0     0  538:r409 l0     1  537:r410 l0     0
  534:r411 l0     0  533:r412 l0     0  530:r413 l0     0  527:r414 l0     0
  529:r415 l0     0  525:r416 l0     0  522:r417 l0     0  518:r418 l0     0
  520:r419 l0     1  519:r420 l0     0  516:r421 l0     0  515:r422 l0     0
  512:r423 l0     0  509:r424 l0     0  511:r425 l0     0  507:r426 l0     0
  503:r427 l0     0  505:r428 l0     1  504:r429 l0     0  501:r430 l0     0
  500:r431 l0     0  497:r432 l0     0  494:r433 l0     0  496:r434 l0     0
  492:r435 l0     0  489:r436 l0     0  488:r437 l0     0  485:r438 l0     0
  482:r439 l0     0  479:r440 l0     0  476:r441 l0     0  472:r442 l0     0
  471:r443 l0     0  469:r444 l0     0  464:r445 l0     0  460:r446 l0     0
  462:r447 l0     1  461:r448 l0     0  458:r449 l0     0  456:r450 l0     0
  457:r451 l0     0  451:r452 l0     0  448:r453 l0     0  447:r454 l0     0
  445:r455 l0     0  440:r456 l0     0  436:r457 l0     0  438:r458 l0     1
  437:r459 l0     0  434:r460 l0     0  432:r461 l0     0  433:r462 l0     0
  427:r463 l0     0  424:r464 l0     0  421:r465 l0     0  413:r466 l0     0
  409:r467 l0     0  411:r468 l0     1  410:r469 l0     0  407:r470 l0     0
  405:r471 l0     0  406:r472 l0     0  403:r473 l0     0  399:r474 l0     0
  401:r475 l0     1  400:r476 l0     0  397:r477 l0     0  395:r478 l0     0
  396:r479 l0     0  391:r480 l0     0  393:r481 l0     0  387:r482 l0     0
  390:r483 l0     0  386:r484 l0     0  382:r485 l0     0  384:r486 l0     1
  383:r487 l0     0  380:r488 l0     0  378:r489 l0     0  379:r490 l0     0
  376:r491 l0     0  375:r492 l0     0  371:r493 l0     0  373:r494 l0     1
  372:r495 l0     0  369:r496 l0     0  367:r497 l0     0  368:r498 l0     0
  365:r499 l0     0  362:r500 l0     0  358:r501 l0     0  357:r502 l0     0
  353:r503 l0     0  355:r504 l0     1  354:r505 l0     0  351:r506 l0     0
  349:r507 l0     0  350:r508 l0     0  347:r509 l0     0  346:r510 l0     0
  342:r511 l0     0  344:r512 l0     1  343:r513 l0     0  340:r514 l0     0
  338:r515 l0     0  339:r516 l0     0  336:r517 l0     0  333:r518 l0     0
  329:r519 l0     0  328:r520 l0     0  324:r521 l0     0  326:r522 l0     1
  325:r523 l0     0  322:r524 l0     0  320:r525 l0     0  321:r526 l0     0
  318:r527 l0     0  317:r528 l0     0  313:r529 l0     0  315:r530 l0     1
  314:r531 l0     0  311:r532 l0     0  309:r533 l0     0  310:r534 l0     0
  307:r535 l0     0  304:r536 l0     0  300:r537 l0     0  299:r538 l0     0
  296:r539 l0     0  293:r540 l0     0  290:r541 l0     0  282:r542 l0     4
  288:r543 l0     0  286:r544 l0     1  287:r545 l0     0  283:r546 l0     0
  285:r547 l0     1  284:r548 l0     0  280:r549 l0     0  279:r550 l0     0
  276:r551 l0     0  268:r552 l0     4  274:r553 l0     0  272:r554 l0     1
  273:r555 l0     0  269:r556 l0     0  271:r557 l0     1  270:r558 l0     0
  266:r559 l0     0  265:r560 l0     0  263:r561 l0     0  260:r562 l0     0
  257:r563 l0     0  254:r564 l0     0  252:r565 l0     0  250:r566 l0     0
  251:r567 l0     0  249:r568 l0     0  247:r569 l0     0  246:r570 l0     0
  244:r571 l0     0  242:r572 l0     0  239:r573 l0     0  238:r574 l0     0
  235:r575 l0     0  232:r576 l0     0  234:r577 l0     0  230:r578 l0     0
  228:r579 l0     0  226:r580 l0     0  223:r581 l0     0  220:r582 l0     0
  218:r583 l0     0  219:r584 l0     0  216:r585 l0     1  212:r586 l0     0
  210:r587 l0     0  207:r588 l0     0  204:r589 l0     0  195:r590 l0     2
  201:r591 l0     0  199:r592 l0     1  200:r593 l0     0  196:r594 l0     0
  198:r595 l0     1  197:r596 l0     0  194:r597 l0     0  192:r598 l0     0
  188:r599 l0     0  181:r600 l0     4  187:r601 l0     0  185:r602 l0     1
  186:r603 l0     0  182:r604 l0     0  184:r605 l0     1  183:r606 l0     0
  180:r607 l0     0  178:r608 l0     0  176:r609 l0     0  174:r610 l0     1
  164:r611 l0     4  170:r612 l0     0  168:r613 l0     1  169:r614 l0     0
  165:r615 l0     0  167:r616 l0     1  166:r617 l0     0  163:r618 l0     0
  161:r619 l0     0  157:r620 l0     0  150:r621 l0     5  156:r622 l0     0
  154:r623 l0     1  155:r624 l0     0  151:r625 l0     0  153:r626 l0     1
  152:r627 l0     0  149:r628 l0     0  147:r629 l0     0  145:r630 l0     0
  143:r631 l0     1  138:r632 l0     0  134:r633 l0     0  136:r634 l0     1
  135:r635 l0     0  132:r636 l0     0  130:r637 l0     0  131:r638 l0     0
  128:r639 l0     1  119:r640 l0     0  117:r641 l0     0  115:r642 l0     0
  107:r643 l0     0  103:r644 l0     0  105:r645 l0     1  104:r646 l0     0
  101:r647 l0     0   99:r648 l0     0  100:r649 l0     0   97:r650 l0     0
   94:r651 l0     0   92:r652 l0     0   93:r653 l0     0   88:r654 l0     0
   90:r655 l0     0   84:r656 l0     0   87:r657 l0     0   83:r658 l0     0
   79:r659 l0     0   81:r660 l0     1   80:r661 l0     0   77:r662 l0     0
   75:r663 l0     0   76:r664 l0     0   73:r665 l0     0   72:r666 l0     0
   69:r667 l0     0   67:r668 l0     0   68:r669 l0     0   65:r670 l0     0
   62:r671 l0     0   58:r672 l0     0   57:r673 l0     0   53:r674 l0     0
   55:r675 l0     1   54:r676 l0     0   51:r677 l0     0   49:r678 l0     0
   50:r679 l0     0   47:r680 l0     0   46:r681 l0     0   43:r682 l0     0
   41:r683 l0     0   42:r684 l0     0   39:r685 l0     0   36:r686 l0     0
   32:r687 l0     0   31:r688 l0     0   27:r689 l0     0   29:r690 l0     1
   28:r691 l0     0   25:r692 l0     0   23:r693 l0     0   24:r694 l0     0
   21:r695 l0     0   20:r696 l0     0   17:r697 l0     0   15:r698 l0     0
   16:r699 l0     0   13:r700 l0     0   10:r701 l0     0    6:r702 l0     0
    5:r703 l0     0    3:r704 l0     0
+++Costs: overall -25, reg -25, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


int read_csi_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision3* (*)[100], Precision4* (*)[100], Precision4* (*)[32], int*, PE_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={20d,9u} r1={23d,5u} r2={23d,5u} r4={24d,6u} r5={36d,18u} r6={1d,90u} r7={1d,108u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r16={1d,95u} r17={305d,35u} r18={18d} r19={18d} r20={1d,390u,56e} r21={19d} r22={19d} r23={19d} r24={19d} r25={19d} r26={19d} r27={19d} r28={19d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={19d,1u} r38={19d,1u} r39={18d} r40={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} r77={18d} r78={18d} r79={18d} r80={18d} r87={1d,1u} r88={1d,1u} r89={1d,2u,1e} r90={1d,1u,1e} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u,1e} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u,1e} r100={1d,1u} r101={1d,1u} r102={1d,1u,1e} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u,1e} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,2u,1e} r123={1d,1u,1e} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,2u,1e} r129={1d,1u,1e} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,2u,1e} r135={1d,1u,1e} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,2u,1e} r141={1d,1u,1e} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u,1e} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,2u,1e} r169={1d,1u,1e} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,2u,1e} r180={1d,1u,1e} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,2u,1e} r195={1d,1u,1e} r196={1d,1u} r197={1d,1u} r198={1d,2u,1e} r199={1d,1u,1e} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,2u,1e} r204={1d,1u,1e} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,2u,1e} r209={1d,1u,1e} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,2u,1e} r215={1d,1u,1e} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,2u,1e} r220={1d,1u,1e} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,2u,1e} r226={1d,1u,1e} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,2u,1e} r231={1d,1u,1e} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u,1e} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u,1e} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u,1e} r251={1d,1u} r252={1d,1u} r253={1d,1u} r254={1d,1u,1e} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={1d,1u} r260={1d,1u,1e} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u,1e} r271={1d,1u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u} r281={1d,1u} r282={1d,1u,1e} r283={1d,1u} r284={1d,1u} r285={1d,1u,1e} r286={1d,1u} r287={1d,1u,1e} r288={1d,1u} r289={1d,1u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,1u,1e} r294={1d,1u} r295={1d,1u} r296={1d,1u,1e} r297={1d,1u} r298={1d,1u,1e} r299={1d,1u} r300={1d,1u} r301={1d,1u} r302={1d,1u} r303={1d,1u} r304={1d,1u} r305={1d,2u,1e} r306={1d,1u,1e} r307={1d,1u} r308={1d,1u} r309={1d,1u} r310={1d,1u} r311={1d,1u} r312={1d,1u} r313={1d,1u} r314={1d,1u} r315={1d,1u} r316={1d,1u} r317={1d,1u} r318={1d,1u} r319={1d,1u} r320={1d,1u} r321={1d,1u} r322={1d,1u} r323={1d,2u,1e} r324={1d,1u,1e} r325={1d,1u} r326={1d,1u} r327={1d,1u} r328={1d,1u,1e} r329={1d,1u} r330={1d,1u} r331={1d,1u} r332={1d,2u,1e} r333={1d,1u,1e} r334={1d,1u} r335={1d,1u} r336={1d,1u} r337={1d,1u} r338={1d,1u,1e} r339={1d,1u} r340={1d,1u} r341={1d,1u} r342={1d,1u} r343={1d,2u,1e} r344={1d,1u,1e} r345={1d,1u} r346={1d,1u} r347={1d,1u} r348={1d,1u} r349={1d,1u,1e} r350={1d,1u} r351={1d,1u} r352={1d,1u} r353={1d,1u} r354={1d,2u,1e} r355={1d,1u,1e} r356={1d,1u} r357={1d,1u} r358={1d,1u} r359={1d,1u} r360={1d,1u,1e} r361={1d,1u} r362={1d,1u} r363={1d,1u} r364={1d,1u} r365={1d,1u} r366={1d,1u} r367={1d,1u} r368={1d,1u} r369={1d,1u} r370={1d,1u} r371={1d,1u} r372={1d,1u} r373={1d,1u} r374={1d,1u} r375={1d,1u} r376={1d,1u} r377={4d,4u} r378={1d,1u} r379={1d,1u} r380={1d,1u} r381={1d,1u} r382={1d,1u} r383={1d,1u} r384={1d,1u,1e} r385={1d,1u} r386={1d,1u} r387={1d,1u} r388={1d,1u} r389={1d,1u} r390={1d,1u} r391={1d,1u} r392={1d,1u} r393={1d,1u} r394={1d,1u} r395={1d,1u} r396={1d,1u} r397={1d,1u} r398={1d,1u} r399={5d,6u} r400={1d,1u} r401={1d,1u} r402={1d,1u} r403={1d,1u} r404={1d,1u} r405={1d,1u} r406={1d,1u} r407={1d,1u} r408={5d,6u} r409={1d,1u} r410={1d,1u} r411={1d,1u} r412={1d,1u} r413={1d,1u} r414={1d,1u} r415={1d,1u} r416={1d,1u} r417={1d,1u} r418={5d,6u} r419={1d,1u} r420={1d,1u} r421={1d,1u} r422={1d,1u} r423={1d,1u} r424={1d,1u} r425={1d,1u} r426={1d,1u} r427={5d,6u} r428={1d,1u} r429={1d,1u} r430={1d,1u} r431={1d,1u} r432={1d,1u} r433={1d,1u} r434={1d,1u} r435={1d,1u} r436={1d,1u} r437={1d,1u} r438={1d,1u} r439={1d,1u} r440={1d,1u} r441={1d,1u} r442={1d,1u} r443={1d,1u} r444={1d,1u} r445={1d,1u} r446={5d,6u} r447={1d,1u} r448={1d,1u} r449={1d,1u} r450={1d,1u} r451={1d,1u} r452={1d,1u} r453={1d,1u} r454={1d,1u} r455={1d,1u} r456={1d,1u} r457={5d,6u} r458={1d,1u} r459={1d,1u} r460={1d,1u} r461={1d,1u} r462={1d,1u} r463={1d,1u} r464={1d,1u} r465={1d,1u} r466={1d,1u} r467={5d,6u} r468={1d,1u} r469={1d,1u} r470={1d,1u} r471={1d,1u} r472={1d,1u} r473={1d,1u} r474={5d,6u} r475={1d,1u} r476={1d,1u} r477={1d,1u} r478={1d,1u} r479={1d,1u} r480={1d,1u} r481={1d,1u} r482={1d,1u} r483={1d,1u} r484={1d,1u} r485={5d,6u} r486={1d,1u} r487={1d,1u} r488={1d,1u} r489={1d,1u} r490={1d,1u} r491={1d,1u} r492={1d,1u} r493={5d,6u} r494={1d,1u} r495={1d,1u} r496={1d,1u} r497={1d,1u} r498={1d,1u} r499={1d,1u} r500={1d,1u} r501={1d,1u} r502={1d,1u} r503={5d,6u} r504={1d,1u} r505={1d,1u} r506={1d,1u} r507={1d,1u} r508={1d,1u} r509={1d,1u} r510={1d,1u} r511={5d,6u} r512={1d,1u} r513={1d,1u} r514={1d,1u} r515={1d,1u} r516={1d,1u} r517={1d,1u} r518={1d,1u} r519={1d,1u} r520={1d,1u} r521={5d,6u} r522={1d,1u} r523={1d,1u} r524={1d,1u} r525={1d,1u} r526={1d,1u} r527={1d,1u} r528={1d,1u} r529={5d,6u} r530={1d,1u} r531={1d,1u} r532={1d,1u} r533={1d,1u} r534={1d,1u} r535={1d,1u} r536={1d,1u} r537={1d,1u} r538={1d,1u} r539={1d,1u} r540={1d,1u} r541={1d,1u} r542={1d,1u} r543={1d,1u} r544={1d,2u,1e} r545={1d,1u} r546={5d,6u} r547={1d,1u} r548={1d,1u} r549={1d,1u} r550={1d,1u} r551={1d,1u} r552={1d,1u} r553={1d,1u} r554={1d,2u,1e} r555={1d,1u} r556={5d,6u} r557={1d,1u} r558={1d,1u} r559={1d,1u} r560={1d,1u} r561={1d,1u} r562={1d,1u} r563={1d,1u} r564={1d,1u} r565={1d,1u} r566={1d,2u} r567={1d,1u} r568={1d,1u} r569={1d,1u} r570={1d,1u} r571={1d,1u} r572={1d,1u} r573={1d,1u} r574={1d,1u} r575={1d,1u} r576={1d,1u} r577={1d,1u} r578={1d,1u} r579={1d,1u} r580={1d,1u} r581={1d,1u} r582={1d,1u} r583={1d,1u} r584={1d,1u} r585={1d,1u} r586={1d,1u} r587={1d,1u} r588={1d,1u} r589={1d,1u} r590={1d,1u} r591={1d,1u} r592={1d,2u,1e} r593={1d,1u} r594={5d,6u} r595={1d,1u} r596={1d,1u} r597={1d,1u} r598={1d,1u} r599={1d,1u} r600={1d,1u} r601={1d,1u} r602={1d,2u,1e} r603={1d,1u} r604={5d,6u} r605={1d,1u} r606={1d,1u} r607={1d,1u} r608={1d,1u} r609={1d,1u} r610={1d,1u} r611={1d,1u} r612={1d,1u} r613={1d,2u,1e} r614={1d,1u} r615={5d,6u} r616={1d,1u} r617={1d,1u} r618={1d,1u} r619={1d,1u} r620={1d,1u} r621={1d,1u} r622={1d,1u} r623={1d,2u,1e} r624={1d,1u} r625={5d,6u} r626={1d,1u} r627={1d,1u} r628={1d,1u} r629={1d,1u} r630={1d,1u} r631={1d,1u} r632={1d,1u} r633={5d,6u} r634={1d,1u} r635={1d,1u} r636={1d,1u} r637={1d,1u} r638={1d,1u} r639={1d,1u} r640={1d,1u} r641={1d,1u} r642={1d,1u} r643={1d,1u} r644={5d,6u} r645={1d,1u} r646={1d,1u} r647={1d,1u} r648={1d,1u} r649={1d,1u} r650={1d,1u} r651={1d,1u} r652={1d,1u} r653={1d,1u} r654={1d,1u} r655={1d,1u} r656={1d,1u} r657={1d,1u} r658={1d,1u} r659={5d,6u} r660={1d,1u} r661={1d,1u} r662={1d,1u} r663={1d,1u} r664={1d,1u} r665={1d,1u} r666={1d,1u} r667={1d,1u} r668={1d,1u} r669={1d,1u} r670={1d,1u} r671={1d,1u} r672={1d,1u} r673={1d,1u} r674={5d,6u} r675={1d,1u} r676={1d,1u} r677={1d,1u} r678={1d,1u} r679={1d,1u} r680={1d,1u} r681={1d,1u} r682={1d,1u} r683={1d,1u} r684={1d,1u} r685={1d,1u} r686={1d,1u} r687={1d,1u} r688={1d,1u} r689={5d,6u} r690={1d,1u} r691={1d,1u} r692={1d,1u} r693={1d,1u} r694={1d,1u} r695={1d,1u} r696={1d,1u} r697={1d,1u} r698={1d,1u} r699={1d,1u} r700={1d,1u} r701={1d,1u} r702={1d,1u} r703={1d,1u} r704={1d,1u} 
;;    total ref usage 4014{2354d,1536u,124e} in 948{930 regular + 18 call} insns.
(note 1 0 22 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 369 370 371 372 373 374
(note 22 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 22 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80072 [0xfffffffffffec738])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ fid ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80080 [0xfffffffffffec730])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ preprocess ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80088 [0xfffffffffffec728])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ file ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ main_header ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80104 [0xfffffffffffec718])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ block_header ])
        (nil)))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80112 [0xfffffffffffec710])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ switch_data ])
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 369)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])
        (reg/f:DI 369)) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 369)
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 370)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
        (reg/f:DI 370)) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 370)
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 371)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
        (reg/f:DI 371)) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 371)
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 372)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 24 [0x18])) [0 final_data+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
        (reg/f:DI 372)) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 372)
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 373)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])
        (reg/f:DI 373)) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 373)
        (nil)))
(insn 18 17 19 2 (set (reg/f:DI 374)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 40 [0x28])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])
        (reg/f:DI 374)) fmtext_o.cpp:112 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 374)
        (nil)))
(note 20 19 21 2 NOTE_INSN_FUNCTION_BEG)
(insn 21 20 24 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.6698+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:112 986 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 24 21 25 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:114 90 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80040 [0xfffffffffffec758])) [0 actual_number_pe+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:114 90 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/j/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80032 [0xfffffffffffec760])) [0 init_precision4.lo+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:118 89 {*movdi_internal}
     (nil))
(insn 27 26 1099 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:120 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              85 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 375
(code_label 1099 27 28 3 66 "" [1 uses])
(note 28 1099 29 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 3 (set (reg/f:DI 375)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80072 [0xfffffffffffec738])) [0 fid+0 S8 A64])) fmtext_o.cpp:120 89 {*movdi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:SI 87 [ D.6677 ])
        (mem:SI (reg/f:DI 375) [0 *fid_59(D)+0 S4 A32])) fmtext_o.cpp:120 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 375)
        (nil)))
(insn 31 30 32 3 (parallel [
            (set (reg:SI 88 [ D.6677 ])
                (plus:SI (reg:SI 87 [ D.6677 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:120 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 87 [ D.6677 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 32 31 33 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 88 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:120 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 88 [ D.6677 ])
        (nil)))
(jump_insn 33 32 34 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1102)
            (pc))) fmtext_o.cpp:120 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 1102)
;;  succ:       86
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 376 377 378 379
(note 34 33 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 4 (set (reg:SI 376)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:122 90 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 89 [ D.6678 ])
        (sign_extend:DI (reg:SI 376))) fmtext_o.cpp:122 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 376)
        (nil)))
(insn 37 36 38 4 (set (reg:DI 377)
        (reg:DI 89 [ D.6678 ])) fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 377)
                (ashift:DI (reg:DI 377)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 39 38 40 4 (parallel [
            (set (reg:DI 377)
                (plus:DI (reg:DI 377)
                    (reg:DI 89 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 89 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 89 [ D.6678 ])
                    (const_int 9 [0x9]))
                (nil)))))
(insn 40 39 41 4 (parallel [
            (set (reg:DI 378)
                (ashift:DI (reg:DI 377)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 377)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 41 40 42 4 (set (reg:DI 377)
        (reg:DI 378)) fmtext_o.cpp:122 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 378)
        (nil)))
(insn 42 41 43 4 (set (reg:DI 90 [ D.6678 ])
        (reg:DI 377)) fmtext_o.cpp:122 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 377)
        (nil)))
(insn 43 42 44 4 (set (reg/f:DI 379)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80080 [0xfffffffffffec730])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg/f:DI 91 [ D.6679 ])
                (plus:DI (reg:DI 90 [ D.6678 ])
                    (reg/f:DI 379)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 379)
        (expr_list:REG_DEAD (reg:DI 90 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80080 [0xfffffffffffec730])) [0 preprocess+0 S8 A64])
                        (reg:DI 90 [ D.6678 ]))
                    (nil))))))
(insn 45 44 46 4 (set (reg:SI 92 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 91 [ D.6679 ])
                (const_int 20 [0x14])) [0 _65->file_type+0 S4 A32])) fmtext_o.cpp:122 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ D.6679 ])
        (nil)))
(insn 46 45 47 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 92 [ D.6677 ])
            (const_int 0 [0]))) fmtext_o.cpp:122 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 92 [ D.6677 ])
        (nil)))
(jump_insn 47 46 48 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1096)
            (pc))) fmtext_o.cpp:122 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 1096)
;;  succ:       5 (FALLTHRU)
;;              85
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 93 94 95 96 97 98 99 100 380 381 382 383 384 385 386 387
(note 48 47 49 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 5 (set (reg:SI 380)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (set (reg:DI 93 [ D.6678 ])
        (sign_extend:DI (reg:SI 380))) fmtext_o.cpp:124 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 380)
        (nil)))
(insn 51 50 52 5 (parallel [
            (set (reg:DI 94 [ D.6678 ])
                (ashift:DI (reg:DI 93 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 93 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 52 51 53 5 (set (reg/f:DI 381)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 53 52 54 5 (parallel [
            (set (reg/f:DI 95 [ D.6680 ])
                (plus:DI (reg:DI 94 [ D.6678 ])
                    (reg/f:DI 381)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 381)
        (expr_list:REG_DEAD (reg:DI 94 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])
                        (reg:DI 94 [ D.6678 ]))
                    (nil))))))
(insn 54 53 55 5 (set (reg:SI 383)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:DI 382)
        (sign_extend:DI (reg:SI 383))) fmtext_o.cpp:124 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 383)
        (nil)))
(insn 56 55 57 5 (parallel [
            (set (reg:DI 384)
                (ashift:DI (reg:DI 382)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 382)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 57 56 58 5 (set (reg/f:DI 385)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80088 [0xfffffffffffec728])) [0 file+0 S8 A64])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 58 57 59 5 (parallel [
            (set (reg/f:DI 96 [ D.6681 ])
                (plus:DI (reg:DI 384)
                    (reg/f:DI 385)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 385)
        (expr_list:REG_DEAD (reg:DI 384)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80088 [0xfffffffffffec728])) [0 file+0 S8 A64])
                        (reg:DI 384))
                    (nil))))))
(insn 59 58 60 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7fa2a18053f0 *.LC15>)) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 60 59 61 5 (set (reg:DI 5 di)
        (reg/f:DI 96 [ D.6681 ])) fmtext_o.cpp:124 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ D.6681 ])
        (nil)))
(call_insn 61 60 62 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fa2a1ac8510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:124 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 62 61 63 5 (set (reg/f:DI 97 [ D.6682 ])
        (reg:DI 0 ax)) fmtext_o.cpp:124 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 63 62 64 5 (set (mem/f:DI (reg/f:DI 95 [ D.6680 ]) [0 *_70+0 S8 A64])
        (reg/f:DI 97 [ D.6682 ])) fmtext_o.cpp:124 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ D.6682 ])
        (expr_list:REG_DEAD (reg/f:DI 95 [ D.6680 ])
            (nil))))
(insn 64 63 65 5 (set (reg:SI 386)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:126 90 {*movsi_internal}
     (nil))
(insn 65 64 66 5 (set (reg:DI 98 [ D.6678 ])
        (sign_extend:DI (reg:SI 386))) fmtext_o.cpp:126 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 386)
        (nil)))
(insn 66 65 67 5 (parallel [
            (set (reg:DI 99 [ D.6678 ])
                (ashift:DI (reg:DI 98 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:126 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 98 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 67 66 68 5 (set (reg/f:DI 387)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:126 89 {*movdi_internal}
     (nil))
(insn 68 67 69 5 (parallel [
            (set (reg/f:DI 100 [ D.6680 ])
                (plus:DI (reg:DI 99 [ D.6678 ])
                    (reg/f:DI 387)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:126 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 387)
        (expr_list:REG_DEAD (reg:DI 99 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])
                        (reg:DI 99 [ D.6678 ]))
                    (nil))))))
(insn 69 68 70 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 100 [ D.6680 ])
            (const_int 0 [0]))) fmtext_o.cpp:126 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 100 [ D.6680 ])
        (nil)))
(jump_insn 70 69 71 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) fmtext_o.cpp:126 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 77)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 71 70 72 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fa2a1805480 *.LC16>)) fmtext_o.cpp:127 89 {*movdi_internal}
     (nil))
(call_insn 73 72 74 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:127 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 74 73 75 6 (set (reg:SI 5 di)
        (const_int 4 [0x4])) fmtext_o.cpp:128 90 {*movsi_internal}
     (nil))
(call_insn 75 74 76 6 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fa2a1d26ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:128 660 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 76 75 77)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 101 102 103 104 105 106 107 388 389 390
(code_label 77 76 78 7 15 "" [1 uses])
(note 78 77 79 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 7 (set (reg:SI 388)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:133 90 {*movsi_internal}
     (nil))
(insn 80 79 81 7 (set (reg:DI 101 [ D.6678 ])
        (sign_extend:DI (reg:SI 388))) fmtext_o.cpp:133 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 388)
        (nil)))
(insn 81 80 82 7 (parallel [
            (set (reg:DI 102 [ D.6678 ])
                (ashift:DI (reg:DI 101 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:133 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 101 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 82 81 83 7 (set (reg/f:DI 389)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 83 82 84 7 (parallel [
            (set (reg/f:DI 103 [ D.6680 ])
                (plus:DI (reg:DI 102 [ D.6678 ])
                    (reg/f:DI 389)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:133 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 389)
        (expr_list:REG_DEAD (reg:DI 102 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])
                        (reg:DI 102 [ D.6678 ]))
                    (nil))))))
(insn 84 83 85 7 (set (reg/f:DI 104 [ D.6682 ])
        (mem/f:DI (reg/f:DI 103 [ D.6680 ]) [0 *_82+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ D.6680 ])
        (nil)))
(insn 85 84 86 7 (set (reg/f:DI 390)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 86 85 87 7 (set (reg/f:DI 105 [ D.6683 ])
        (mem/f:DI (reg/f:DI 390) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 390)
        (nil)))
(insn 87 86 88 7 (set (reg:DI 2 cx)
        (reg/f:DI 104 [ D.6682 ])) fmtext_o.cpp:133 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ D.6682 ])
        (nil)))
(insn 88 87 89 7 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 89 88 90 7 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 90 89 91 7 (set (reg:DI 5 di)
        (reg/f:DI 105 [ D.6683 ])) fmtext_o.cpp:133 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ D.6683 ])
        (nil)))
(call_insn 91 90 92 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fa2a1ada360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:133 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 92 91 93 7 (set (reg:DI 106 [ D.6678 ])
        (reg:DI 0 ax)) fmtext_o.cpp:133 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 93 92 94 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 106 [ D.6678 ])
            (const_int 1 [0x1]))) fmtext_o.cpp:133 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 106 [ D.6678 ])
        (nil)))
(insn 94 93 95 7 (set (reg:QI 107 [ D.6684 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:133 607 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 95 94 96 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 107 [ D.6684 ])
            (const_int 0 [0]))) fmtext_o.cpp:133 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 107 [ D.6684 ])
        (nil)))
(jump_insn 96 95 97 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 103)
            (pc))) fmtext_o.cpp:133 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 103)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 97 96 98 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7fa2a1805510 *.LC17>)) fmtext_o.cpp:134 89 {*movdi_internal}
     (nil))
(call_insn 99 98 100 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:134 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 100 99 101 8 (set (reg:SI 5 di)
        (const_int 5 [0x5])) fmtext_o.cpp:135 90 {*movsi_internal}
     (nil))
(call_insn 101 100 102 8 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fa2a1d26ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:135 660 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 102 101 103)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 108 391 392
(code_label 103 102 104 9 16 "" [1 uses])
(note 104 103 105 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 9 (set (reg/f:DI 391)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:139 89 {*movdi_internal}
     (nil))
(insn 106 105 107 9 (set (reg/f:DI 108 [ D.6683 ])
        (mem/f:DI (reg/f:DI 391) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:139 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 391)
        (nil)))
(insn 107 106 108 9 (set (reg:SI 392)
        (mem/j:SI (plus:DI (reg/f:DI 108 [ D.6683 ])
                (const_int 8 [0x8])) [0 _90->np.number+0 S4 A32])) fmtext_o.cpp:139 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ D.6683 ])
        (nil)))
(insn 108 107 109 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])
        (reg:SI 392)) fmtext_o.cpp:139 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 392)
        (nil)))
(insn 109 108 249 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:143 90 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              19 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 393
(code_label 249 109 110 10 23 "" [1 uses])
(note 110 249 111 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 10 (set (reg/f:DI 393)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(insn 112 111 113 10 (set (reg/f:DI 109 [ D.6683 ])
        (mem/f:DI (reg/f:DI 393) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:143 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 393)
        (nil)))
(insn 113 112 114 10 (set (reg:SI 110 [ D.6677 ])
        (mem/j:SI (reg/f:DI 109 [ D.6683 ]) [0 _93->nblocks.number+0 S4 A32])) fmtext_o.cpp:143 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ D.6683 ])
        (nil)))
(insn 114 113 115 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 110 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:143 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 110 [ D.6677 ])
        (nil)))
(jump_insn 115 114 116 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 252)
            (pc))) fmtext_o.cpp:143 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 252)
;;  succ:       20
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 116 115 117 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 243 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:145 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              18 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 394
(code_label 243 117 118 12 22 "" [1 uses])
(note 118 243 119 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 12 (set (reg/f:DI 394)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:145 89 {*movdi_internal}
     (nil))
(insn 120 119 121 12 (set (reg/f:DI 111 [ D.6683 ])
        (mem/f:DI (reg/f:DI 394) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:145 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 394)
        (nil)))
(insn 121 120 122 12 (set (reg:SI 112 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 111 [ D.6683 ])
                (const_int 4 [0x4])) [0 _96->ntraces.number+0 S4 A32])) fmtext_o.cpp:145 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 111 [ D.6683 ])
        (nil)))
(insn 122 121 123 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 112 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:145 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 112 [ D.6677 ])
        (nil)))
(jump_insn 123 122 124 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 246)
            (pc))) fmtext_o.cpp:145 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 246)
;;  succ:       19
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 114 395
(note 124 123 125 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 13 (set (reg/f:DI 395)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (nil))
(insn 126 125 127 13 (set (reg/f:DI 113 [ D.6683 ])
        (mem/f:DI (reg/f:DI 395) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 395)
        (nil)))
(insn 127 126 128 13 (set (reg:HI 114 [ D.6685 ])
        (mem/j:HI (plus:DI (reg/f:DI 113 [ D.6683 ])
                (const_int 26 [0x1a])) [0 _98->status.number+0 S2 A16])) fmtext_o.cpp:148 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ D.6683 ])
        (nil)))
(insn 128 127 129 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 114 [ D.6685 ])
            (const_int 69 [0x45]))) fmtext_o.cpp:148 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 114 [ D.6685 ])
        (nil)))
(jump_insn 129 128 130 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 140)
            (pc))) fmtext_o.cpp:148 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 140)
;;  succ:       15
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 118 119 396 397
(note 130 129 131 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 14 (set (reg:SI 396)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:148 90 {*movsi_internal}
     (nil))
(insn 132 131 133 14 (set (reg:DI 115 [ D.6678 ])
        (sign_extend:DI (reg:SI 396))) fmtext_o.cpp:148 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 396)
        (nil)))
(insn 133 132 134 14 (parallel [
            (set (reg:DI 116 [ D.6678 ])
                (ashift:DI (reg:DI 115 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:148 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 115 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 134 133 135 14 (set (reg/f:DI 397)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (nil))
(insn 135 134 136 14 (parallel [
            (set (reg/f:DI 117 [ D.6686 ])
                (plus:DI (reg:DI 116 [ D.6678 ])
                    (reg/f:DI 397)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:148 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 397)
        (expr_list:REG_DEAD (reg:DI 116 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])
                        (reg:DI 116 [ D.6678 ]))
                    (nil))))))
(insn 136 135 137 14 (set (reg/f:DI 118 [ D.6683 ])
        (mem/f:DI (reg/f:DI 117 [ D.6686 ]) [0 *_102+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117 [ D.6686 ])
        (nil)))
(insn 137 136 138 14 (set (reg:HI 119 [ D.6685 ])
        (mem/j:HI (plus:DI (reg/f:DI 118 [ D.6683 ])
                (const_int 26 [0x1a])) [0 _103->status.number+0 S2 A16])) fmtext_o.cpp:148 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ D.6683 ])
        (nil)))
(insn 138 137 139 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 119 [ D.6685 ])
            (const_int 2073 [0x819]))) fmtext_o.cpp:148 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 119 [ D.6685 ])
        (nil)))
(jump_insn 139 138 140 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 188)
            (pc))) fmtext_o.cpp:148 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 188)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 134 135 136 137 138 139 140 141 142 143 144 145 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415
(code_label 140 139 141 15 19 "" [1 uses])
(note 141 140 142 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 15 (set (reg:SI 398)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:149 90 {*movsi_internal}
     (nil))
(insn 143 142 144 15 (set (reg:DI 134 [ D.6678 ])
        (sign_extend:DI (reg:SI 398))) fmtext_o.cpp:149 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 398)
        (nil)))
(insn 144 143 145 15 (set (reg:DI 399)
        (reg:DI 134 [ D.6678 ])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 145 144 146 15 (parallel [
            (set (reg:DI 399)
                (ashift:DI (reg:DI 399)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 146 145 147 15 (parallel [
            (set (reg:DI 399)
                (plus:DI (reg:DI 399)
                    (reg:DI 134 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 134 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 134 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 147 146 148 15 (parallel [
            (set (reg:DI 400)
                (ashift:DI (reg:DI 399)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 148 147 149 15 (parallel [
            (set (reg:DI 399)
                (plus:DI (reg:DI 399)
                    (reg:DI 400)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 400)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 149 148 150 15 (parallel [
            (set (reg:DI 401)
                (ashift:DI (reg:DI 399)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 399)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 150 149 151 15 (set (reg:DI 399)
        (reg:DI 401)) fmtext_o.cpp:149 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 401)
        (nil)))
(insn 151 150 152 15 (set (reg:DI 135 [ D.6678 ])
        (reg:DI 399)) fmtext_o.cpp:149 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 399)
        (nil)))
(insn 152 151 153 15 (set (reg/f:DI 402)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 153 152 154 15 (parallel [
            (set (reg/f:DI 136 [ D.6687 ])
                (plus:DI (reg:DI 135 [ D.6678 ])
                    (reg/f:DI 402)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 402)
        (expr_list:REG_DEAD (reg:DI 135 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
                        (reg:DI 135 [ D.6678 ]))
                    (nil))))))
(insn 154 153 155 15 (set (reg:SI 403)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:149 90 {*movsi_internal}
     (nil))
(insn 155 154 156 15 (set (reg:DI 137 [ D.6678 ])
        (sign_extend:DI (reg:SI 403))) fmtext_o.cpp:149 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 403)
        (nil)))
(insn 156 155 157 15 (parallel [
            (set (reg:DI 138 [ D.6678 ])
                (ashift:DI (reg:DI 137 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 137 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 157 156 158 15 (set (reg:DI 5 di)
        (reg:DI 138 [ D.6678 ])) fmtext_o.cpp:149 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 138 [ D.6678 ])
        (nil)))
(call_insn 158 157 159 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:149 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 159 158 160 15 (set (reg/f:DI 404)
        (reg:DI 0 ax)) fmtext_o.cpp:149 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 404)
            (nil))))
(insn 160 159 161 15 (set (reg/f:DI 139 [ D.6688 ])
        (reg/f:DI 404)) fmtext_o.cpp:149 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 404)
        (nil)))
(insn 161 160 162 15 (set (reg:SI 406)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:149 90 {*movsi_internal}
     (nil))
(insn 162 161 163 15 (set (reg:DI 405)
        (sign_extend:DI (reg:SI 406))) fmtext_o.cpp:149 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 406)
        (nil)))
(insn 163 162 164 15 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 405)
                    (const_int 8 [0x8]))
                (reg/f:DI 136 [ D.6687 ])) [0 *_127 S8 A64])
        (reg/f:DI 139 [ D.6688 ])) fmtext_o.cpp:149 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 405)
        (expr_list:REG_DEAD (reg/f:DI 139 [ D.6688 ])
            (expr_list:REG_DEAD (reg/f:DI 136 [ D.6687 ])
                (nil)))))
(insn 164 163 165 15 (set (reg:SI 407)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:150 90 {*movsi_internal}
     (nil))
(insn 165 164 166 15 (set (reg:DI 140 [ D.6678 ])
        (sign_extend:DI (reg:SI 407))) fmtext_o.cpp:150 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 407)
        (nil)))
(insn 166 165 167 15 (set (reg:DI 408)
        (reg:DI 140 [ D.6678 ])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 167 166 168 15 (parallel [
            (set (reg:DI 408)
                (ashift:DI (reg:DI 408)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 168 167 169 15 (parallel [
            (set (reg:DI 408)
                (plus:DI (reg:DI 408)
                    (reg:DI 140 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 140 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 140 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 169 168 170 15 (parallel [
            (set (reg:DI 409)
                (ashift:DI (reg:DI 408)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 170 169 171 15 (parallel [
            (set (reg:DI 408)
                (plus:DI (reg:DI 408)
                    (reg:DI 409)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 409)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 171 170 172 15 (parallel [
            (set (reg:DI 410)
                (ashift:DI (reg:DI 408)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 408)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 172 171 173 15 (set (reg:DI 408)
        (reg:DI 410)) fmtext_o.cpp:150 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 410)
        (nil)))
(insn 173 172 174 15 (set (reg:DI 141 [ D.6678 ])
        (reg:DI 408)) fmtext_o.cpp:150 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 408)
        (nil)))
(insn 174 173 175 15 (set (reg/f:DI 411)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 175 174 176 15 (parallel [
            (set (reg/f:DI 142 [ D.6689 ])
                (plus:DI (reg:DI 141 [ D.6678 ])
                    (reg/f:DI 411)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 411)
        (expr_list:REG_DEAD (reg:DI 141 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 141 [ D.6678 ]))
                    (nil))))))
(insn 176 175 177 15 (set (reg:SI 412)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:150 90 {*movsi_internal}
     (nil))
(insn 177 176 178 15 (set (reg:DI 143 [ D.6678 ])
        (sign_extend:DI (reg:SI 412))) fmtext_o.cpp:150 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 412)
        (nil)))
(insn 178 177 179 15 (parallel [
            (set (reg:DI 144 [ D.6678 ])
                (ashift:DI (reg:DI 143 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 143 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 179 178 180 15 (set (reg:DI 5 di)
        (reg:DI 144 [ D.6678 ])) fmtext_o.cpp:150 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 144 [ D.6678 ])
        (nil)))
(call_insn 180 179 181 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:150 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 181 180 182 15 (set (reg/f:DI 413)
        (reg:DI 0 ax)) fmtext_o.cpp:150 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 413)
            (nil))))
(insn 182 181 183 15 (set (reg/f:DI 145 [ D.6688 ])
        (reg/f:DI 413)) fmtext_o.cpp:150 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 413)
        (nil)))
(insn 183 182 184 15 (set (reg:SI 415)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:150 90 {*movsi_internal}
     (nil))
(insn 184 183 185 15 (set (reg:DI 414)
        (sign_extend:DI (reg:SI 415))) fmtext_o.cpp:150 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 415)
        (nil)))
(insn 185 184 1132 15 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 414)
                    (const_int 8 [0x8]))
                (reg/f:DI 142 [ D.6689 ])) [0 *_135 S8 A64])
        (reg/f:DI 145 [ D.6688 ])) fmtext_o.cpp:150 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 414)
        (expr_list:REG_DEAD (reg/f:DI 145 [ D.6688 ])
            (expr_list:REG_DEAD (reg/f:DI 142 [ D.6689 ])
                (nil)))))
(jump_insn 1132 185 1133 15 (set (pc)
        (label_ref 240)) fmtext_o.cpp:150 654 {jump}
     (nil)
 -> 240)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1133 1132 188)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 416
(code_label 188 1133 189 16 20 "" [1 uses])
(note 189 188 190 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 190 189 191 16 (set (reg/f:DI 416)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:151 89 {*movdi_internal}
     (nil))
(insn 191 190 192 16 (set (reg/f:DI 120 [ D.6683 ])
        (mem/f:DI (reg/f:DI 416) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:151 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 416)
        (nil)))
(insn 192 191 193 16 (set (reg:HI 121 [ D.6685 ])
        (mem/j:HI (plus:DI (reg/f:DI 120 [ D.6683 ])
                (const_int 26 [0x1a])) [0 _105->status.number+0 S2 A16])) fmtext_o.cpp:151 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 120 [ D.6683 ])
        (nil)))
(insn 193 192 194 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 121 [ D.6685 ])
            (const_int 73 [0x49]))) fmtext_o.cpp:151 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 121 [ D.6685 ])
        (nil)))
(jump_insn 194 193 195 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 240)
            (pc))) fmtext_o.cpp:151 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 240)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 122 123 124 125 126 127 128 129 130 131 132 133 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434
(note 195 194 196 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 17 (set (reg:SI 417)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:152 90 {*movsi_internal}
     (nil))
(insn 197 196 198 17 (set (reg:DI 122 [ D.6678 ])
        (sign_extend:DI (reg:SI 417))) fmtext_o.cpp:152 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 417)
        (nil)))
(insn 198 197 199 17 (set (reg:DI 418)
        (reg:DI 122 [ D.6678 ])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 199 198 200 17 (parallel [
            (set (reg:DI 418)
                (ashift:DI (reg:DI 418)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 200 199 201 17 (parallel [
            (set (reg:DI 418)
                (plus:DI (reg:DI 418)
                    (reg:DI 122 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 122 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 122 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 201 200 202 17 (parallel [
            (set (reg:DI 419)
                (ashift:DI (reg:DI 418)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 202 201 203 17 (parallel [
            (set (reg:DI 418)
                (plus:DI (reg:DI 418)
                    (reg:DI 419)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 419)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 203 202 204 17 (parallel [
            (set (reg:DI 420)
                (ashift:DI (reg:DI 418)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 418)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 204 203 205 17 (set (reg:DI 418)
        (reg:DI 420)) fmtext_o.cpp:152 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 420)
        (nil)))
(insn 205 204 206 17 (set (reg:DI 123 [ D.6678 ])
        (reg:DI 418)) fmtext_o.cpp:152 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 418)
        (nil)))
(insn 206 205 207 17 (set (reg/f:DI 421)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 207 206 208 17 (parallel [
            (set (reg/f:DI 124 [ D.6687 ])
                (plus:DI (reg:DI 123 [ D.6678 ])
                    (reg/f:DI 421)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 421)
        (expr_list:REG_DEAD (reg:DI 123 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
                        (reg:DI 123 [ D.6678 ]))
                    (nil))))))
(insn 208 207 209 17 (set (reg:SI 422)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:152 90 {*movsi_internal}
     (nil))
(insn 209 208 210 17 (set (reg:DI 125 [ D.6678 ])
        (sign_extend:DI (reg:SI 422))) fmtext_o.cpp:152 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 422)
        (nil)))
(insn 210 209 211 17 (parallel [
            (set (reg:DI 126 [ D.6678 ])
                (ashift:DI (reg:DI 125 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 125 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 211 210 212 17 (set (reg:DI 5 di)
        (reg:DI 126 [ D.6678 ])) fmtext_o.cpp:152 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 126 [ D.6678 ])
        (nil)))
(call_insn 212 211 213 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:152 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 213 212 214 17 (set (reg/f:DI 423)
        (reg:DI 0 ax)) fmtext_o.cpp:152 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 423)
            (nil))))
(insn 214 213 215 17 (set (reg/f:DI 127 [ D.6688 ])
        (reg/f:DI 423)) fmtext_o.cpp:152 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 423)
        (nil)))
(insn 215 214 216 17 (set (reg:SI 425)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:152 90 {*movsi_internal}
     (nil))
(insn 216 215 217 17 (set (reg:DI 424)
        (sign_extend:DI (reg:SI 425))) fmtext_o.cpp:152 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 425)
        (nil)))
(insn 217 216 218 17 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 424)
                    (const_int 8 [0x8]))
                (reg/f:DI 124 [ D.6687 ])) [0 *_110 S8 A64])
        (reg/f:DI 127 [ D.6688 ])) fmtext_o.cpp:152 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 424)
        (expr_list:REG_DEAD (reg/f:DI 127 [ D.6688 ])
            (expr_list:REG_DEAD (reg/f:DI 124 [ D.6687 ])
                (nil)))))
(insn 218 217 219 17 (set (reg:SI 426)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:153 90 {*movsi_internal}
     (nil))
(insn 219 218 220 17 (set (reg:DI 128 [ D.6678 ])
        (sign_extend:DI (reg:SI 426))) fmtext_o.cpp:153 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 426)
        (nil)))
(insn 220 219 221 17 (set (reg:DI 427)
        (reg:DI 128 [ D.6678 ])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 221 220 222 17 (parallel [
            (set (reg:DI 427)
                (ashift:DI (reg:DI 427)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 222 221 223 17 (parallel [
            (set (reg:DI 427)
                (plus:DI (reg:DI 427)
                    (reg:DI 128 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 128 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 128 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 223 222 224 17 (parallel [
            (set (reg:DI 428)
                (ashift:DI (reg:DI 427)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 224 223 225 17 (parallel [
            (set (reg:DI 427)
                (plus:DI (reg:DI 427)
                    (reg:DI 428)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 428)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 225 224 226 17 (parallel [
            (set (reg:DI 429)
                (ashift:DI (reg:DI 427)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 427)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 226 225 227 17 (set (reg:DI 427)
        (reg:DI 429)) fmtext_o.cpp:153 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 429)
        (nil)))
(insn 227 226 228 17 (set (reg:DI 129 [ D.6678 ])
        (reg:DI 427)) fmtext_o.cpp:153 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 427)
        (nil)))
(insn 228 227 229 17 (set (reg/f:DI 430)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 229 228 230 17 (parallel [
            (set (reg/f:DI 130 [ D.6689 ])
                (plus:DI (reg:DI 129 [ D.6678 ])
                    (reg/f:DI 430)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 430)
        (expr_list:REG_DEAD (reg:DI 129 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 129 [ D.6678 ]))
                    (nil))))))
(insn 230 229 231 17 (set (reg:SI 431)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:153 90 {*movsi_internal}
     (nil))
(insn 231 230 232 17 (set (reg:DI 131 [ D.6678 ])
        (sign_extend:DI (reg:SI 431))) fmtext_o.cpp:153 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 431)
        (nil)))
(insn 232 231 233 17 (parallel [
            (set (reg:DI 132 [ D.6678 ])
                (ashift:DI (reg:DI 131 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 131 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 233 232 234 17 (set (reg:DI 5 di)
        (reg:DI 132 [ D.6678 ])) fmtext_o.cpp:153 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 132 [ D.6678 ])
        (nil)))
(call_insn 234 233 235 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:153 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 235 234 236 17 (set (reg/f:DI 432)
        (reg:DI 0 ax)) fmtext_o.cpp:153 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 432)
            (nil))))
(insn 236 235 237 17 (set (reg/f:DI 133 [ D.6688 ])
        (reg/f:DI 432)) fmtext_o.cpp:153 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 432)
        (nil)))
(insn 237 236 238 17 (set (reg:SI 434)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:153 90 {*movsi_internal}
     (nil))
(insn 238 237 239 17 (set (reg:DI 433)
        (sign_extend:DI (reg:SI 434))) fmtext_o.cpp:153 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 434)
        (nil)))
(insn 239 238 240 17 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 433)
                    (const_int 8 [0x8]))
                (reg/f:DI 130 [ D.6689 ])) [0 *_119 S8 A64])
        (reg/f:DI 133 [ D.6688 ])) fmtext_o.cpp:153 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 433)
        (expr_list:REG_DEAD (reg/f:DI 133 [ D.6688 ])
            (expr_list:REG_DEAD (reg/f:DI 130 [ D.6689 ])
                (nil)))))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;;              16
;;              15 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 240 239 241 18 21 "" [2 uses])
(note 241 240 242 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 1134 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:145 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1134 242 1135 18 (set (pc)
        (label_ref 243)) fmtext_o.cpp:145 654 {jump}
     (nil)
 -> 243)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1135 1134 246)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 246 1135 247 19 18 "" [1 uses])
(note 247 246 248 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 248 247 1136 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:143 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1136 248 1137 19 (set (pc)
        (label_ref 249)) fmtext_o.cpp:143 654 {jump}
     (nil)
 -> 249)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1137 1136 252)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 252 1137 253 20 17 "" [1 uses])
(note 253 252 254 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 384 20 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:161 90 {*movsi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              31 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 435
(code_label 384 254 255 21 31 "" [1 uses])
(note 255 384 256 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 21 (set (reg/f:DI 435)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 257 256 258 21 (set (reg/f:DI 146 [ D.6683 ])
        (mem/f:DI (reg/f:DI 435) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:161 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 435)
        (nil)))
(insn 258 257 259 21 (set (reg:SI 147 [ D.6677 ])
        (mem/j:SI (reg/f:DI 146 [ D.6683 ]) [0 _144->nblocks.number+0 S4 A32])) fmtext_o.cpp:161 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146 [ D.6683 ])
        (nil)))
(insn 259 258 260 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 147 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:161 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 147 [ D.6677 ])
        (nil)))
(jump_insn 260 259 261 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 387)
            (pc))) fmtext_o.cpp:161 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 387)
;;  succ:       32
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 148 149 436 437
(note 261 260 262 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 262 261 263 22 (set (reg/f:DI 436)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 263 262 264 22 (set (reg/f:DI 148 [ D.6682 ])
        (mem/f:DI (reg/f:DI 436) [0 *in_file_69(D)+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 436)
        (nil)))
(insn 264 263 265 22 (set (reg/f:DI 437)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80104 [0xfffffffffffec718])) [0 block_header+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 265 264 266 22 (set (reg/f:DI 149 [ D.6690 ])
        (mem/f:DI (reg/f:DI 437) [0 *block_header_147(D)+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 437)
        (nil)))
(insn 266 265 267 22 (set (reg:DI 2 cx)
        (reg/f:DI 148 [ D.6682 ])) fmtext_o.cpp:163 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148 [ D.6682 ])
        (nil)))
(insn 267 266 268 22 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 268 267 269 22 (set (reg:DI 4 si)
        (const_int 28 [0x1c])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 269 268 270 22 (set (reg:DI 5 di)
        (reg/f:DI 149 [ D.6690 ])) fmtext_o.cpp:163 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 149 [ D.6690 ])
        (nil)))
(call_insn 270 269 271 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fa2a1ada360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:163 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 271 270 378 22 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:166 90 {*movsi_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;;              30 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 438
(code_label 378 271 272 23 30 "" [1 uses])
(note 272 378 273 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 273 272 274 23 (set (reg/f:DI 438)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:166 89 {*movdi_internal}
     (nil))
(insn 274 273 275 23 (set (reg/f:DI 150 [ D.6683 ])
        (mem/f:DI (reg/f:DI 438) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:166 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 438)
        (nil)))
(insn 275 274 276 23 (set (reg:SI 151 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 150 [ D.6683 ])
                (const_int 4 [0x4])) [0 _151->ntraces.number+0 S4 A32])) fmtext_o.cpp:166 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150 [ D.6683 ])
        (nil)))
(insn 276 275 277 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 151 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:166 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 151 [ D.6677 ])
        (nil)))
(jump_insn 277 276 278 23 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 381)
            (pc))) fmtext_o.cpp:166 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 381)
;;  succ:       31
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 439
(note 278 277 279 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 279 278 280 24 (set (reg/f:DI 439)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 280 279 281 24 (set (reg/f:DI 152 [ D.6683 ])
        (mem/f:DI (reg/f:DI 439) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 439)
        (nil)))
(insn 281 280 282 24 (set (reg:HI 153 [ D.6685 ])
        (mem/j:HI (plus:DI (reg/f:DI 152 [ D.6683 ])
                (const_int 26 [0x1a])) [0 _153->status.number+0 S2 A16])) fmtext_o.cpp:168 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ D.6683 ])
        (nil)))
(insn 282 281 283 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 153 [ D.6685 ])
            (const_int 69 [0x45]))) fmtext_o.cpp:168 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 153 [ D.6685 ])
        (nil)))
(jump_insn 283 282 284 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 294)
            (pc))) fmtext_o.cpp:168 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 294)
;;  succ:       26
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 157 158 440 441
(note 284 283 285 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 25 (set (reg:SI 440)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:168 90 {*movsi_internal}
     (nil))
(insn 286 285 287 25 (set (reg:DI 154 [ D.6678 ])
        (sign_extend:DI (reg:SI 440))) fmtext_o.cpp:168 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 440)
        (nil)))
(insn 287 286 288 25 (parallel [
            (set (reg:DI 155 [ D.6678 ])
                (ashift:DI (reg:DI 154 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:168 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 154 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 288 287 289 25 (set (reg/f:DI 441)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 289 288 290 25 (parallel [
            (set (reg/f:DI 156 [ D.6686 ])
                (plus:DI (reg:DI 155 [ D.6678 ])
                    (reg/f:DI 441)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:168 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 441)
        (expr_list:REG_DEAD (reg:DI 155 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])
                        (reg:DI 155 [ D.6678 ]))
                    (nil))))))
(insn 290 289 291 25 (set (reg/f:DI 157 [ D.6683 ])
        (mem/f:DI (reg/f:DI 156 [ D.6686 ]) [0 *_157+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 156 [ D.6686 ])
        (nil)))
(insn 291 290 292 25 (set (reg:HI 158 [ D.6685 ])
        (mem/j:HI (plus:DI (reg/f:DI 157 [ D.6683 ])
                (const_int 26 [0x1a])) [0 _158->status.number+0 S2 A16])) fmtext_o.cpp:168 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ D.6683 ])
        (nil)))
(insn 292 291 293 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 158 [ D.6685 ])
            (const_int 2073 [0x819]))) fmtext_o.cpp:168 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 158 [ D.6685 ])
        (nil)))
(jump_insn 293 292 294 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 328)
            (pc))) fmtext_o.cpp:168 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 328)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;;              25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 172 173 174 175 176 177 178 179 180 181 182 442 443 444 445 446 447 448 449 450 451
(code_label 294 293 295 26 26 "" [1 uses])
(note 295 294 296 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 296 295 297 26 (set (reg/f:DI 442)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 297 296 298 26 (set (reg/f:DI 172 [ D.6682 ])
        (mem/f:DI (reg/f:DI 442) [0 *in_file_69(D)+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 442)
        (nil)))
(insn 298 297 299 26 (set (reg/f:DI 443)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 299 298 300 26 (set (reg/f:DI 173 [ D.6683 ])
        (mem/f:DI (reg/f:DI 443) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 443)
        (nil)))
(insn 300 299 301 26 (set (reg:SI 174 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 173 [ D.6683 ])
                (const_int 8 [0x8])) [0 _177->np.number+0 S4 A32])) fmtext_o.cpp:169 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 173 [ D.6683 ])
        (nil)))
(insn 301 300 302 26 (set (reg/f:DI 444)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(insn 302 301 303 26 (set (reg/f:DI 175 [ D.6683 ])
        (mem/f:DI (reg/f:DI 444) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:170 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 444)
        (nil)))
(insn 303 302 304 26 (set (reg:SI 176 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 175 [ D.6683 ])
                (const_int 12 [0xc])) [0 _179->ebytes.number+0 S4 A32])) fmtext_o.cpp:170 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 175 [ D.6683 ])
        (nil)))
(insn 304 303 305 26 (parallel [
            (set (reg:SI 177 [ D.6677 ])
                (mult:SI (reg:SI 174 [ D.6677 ])
                    (reg:SI 176 [ D.6677 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 176 [ D.6677 ])
        (expr_list:REG_DEAD (reg:SI 174 [ D.6677 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 305 304 306 26 (set (reg:DI 178 [ D.6678 ])
        (sign_extend:DI (reg:SI 177 [ D.6677 ]))) fmtext_o.cpp:169 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 177 [ D.6677 ])
        (nil)))
(insn 306 305 307 26 (set (reg:SI 445)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:169 90 {*movsi_internal}
     (nil))
(insn 307 306 308 26 (set (reg:DI 179 [ D.6678 ])
        (sign_extend:DI (reg:SI 445))) fmtext_o.cpp:169 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 445)
        (nil)))
(insn 308 307 309 26 (set (reg:DI 446)
        (reg:DI 179 [ D.6678 ])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 309 308 310 26 (parallel [
            (set (reg:DI 446)
                (ashift:DI (reg:DI 446)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 310 309 311 26 (parallel [
            (set (reg:DI 446)
                (plus:DI (reg:DI 446)
                    (reg:DI 179 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 179 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 179 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 311 310 312 26 (parallel [
            (set (reg:DI 447)
                (ashift:DI (reg:DI 446)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 312 311 313 26 (parallel [
            (set (reg:DI 446)
                (plus:DI (reg:DI 446)
                    (reg:DI 447)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 447)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 313 312 314 26 (parallel [
            (set (reg:DI 448)
                (ashift:DI (reg:DI 446)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 446)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 314 313 315 26 (set (reg:DI 446)
        (reg:DI 448)) fmtext_o.cpp:169 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 448)
        (nil)))
(insn 315 314 316 26 (set (reg:DI 180 [ D.6678 ])
        (reg:DI 446)) fmtext_o.cpp:169 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 446)
        (nil)))
(insn 316 315 317 26 (set (reg/f:DI 449)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 317 316 318 26 (parallel [
            (set (reg/f:DI 181 [ D.6687 ])
                (plus:DI (reg:DI 180 [ D.6678 ])
                    (reg/f:DI 449)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 449)
        (expr_list:REG_DEAD (reg:DI 180 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
                        (reg:DI 180 [ D.6678 ]))
                    (nil))))))
(insn 318 317 319 26 (set (reg:SI 451)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:169 90 {*movsi_internal}
     (nil))
(insn 319 318 320 26 (set (reg:DI 450)
        (sign_extend:DI (reg:SI 451))) fmtext_o.cpp:169 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 451)
        (nil)))
(insn 320 319 321 26 (set (reg/f:DI 182 [ D.6691 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 450)
                    (const_int 8 [0x8]))
                (reg/f:DI 181 [ D.6687 ])) [0 *_185 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 450)
        (expr_list:REG_DEAD (reg/f:DI 181 [ D.6687 ])
            (nil))))
(insn 321 320 322 26 (set (reg:DI 2 cx)
        (reg/f:DI 172 [ D.6682 ])) fmtext_o.cpp:170 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 172 [ D.6682 ])
        (nil)))
(insn 322 321 323 26 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(insn 323 322 324 26 (set (reg:DI 4 si)
        (reg:DI 178 [ D.6678 ])) fmtext_o.cpp:170 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 178 [ D.6678 ])
        (nil)))
(insn 324 323 325 26 (set (reg:DI 5 di)
        (reg/f:DI 182 [ D.6691 ])) fmtext_o.cpp:170 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 182 [ D.6691 ])
        (nil)))
(call_insn 325 324 1138 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fa2a1ada360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:170 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 1138 325 1139 26 (set (pc)
        (label_ref 375)) fmtext_o.cpp:170 654 {jump}
     (nil)
 -> 375)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1139 1138 328)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 159 160 452
(code_label 328 1139 329 27 27 "" [1 uses])
(note 329 328 330 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 330 329 331 27 (set (reg/f:DI 452)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:171 89 {*movdi_internal}
     (nil))
(insn 331 330 332 27 (set (reg/f:DI 159 [ D.6683 ])
        (mem/f:DI (reg/f:DI 452) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:171 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 452)
        (nil)))
(insn 332 331 333 27 (set (reg:HI 160 [ D.6685 ])
        (mem/j:HI (plus:DI (reg/f:DI 159 [ D.6683 ])
                (const_int 26 [0x1a])) [0 _160->status.number+0 S2 A16])) fmtext_o.cpp:171 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 159 [ D.6683 ])
        (nil)))
(insn 333 332 334 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 160 [ D.6685 ])
            (const_int 73 [0x49]))) fmtext_o.cpp:171 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 160 [ D.6685 ])
        (nil)))
(jump_insn 334 333 335 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 368)
            (pc))) fmtext_o.cpp:171 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 368)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 161 162 163 164 165 166 167 168 169 170 171 453 454 455 456 457 458 459 460 461 462
(note 335 334 336 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 336 335 337 28 (set (reg/f:DI 453)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 337 336 338 28 (set (reg/f:DI 161 [ D.6682 ])
        (mem/f:DI (reg/f:DI 453) [0 *in_file_69(D)+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 453)
        (nil)))
(insn 338 337 339 28 (set (reg/f:DI 454)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 339 338 340 28 (set (reg/f:DI 162 [ D.6683 ])
        (mem/f:DI (reg/f:DI 454) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 454)
        (nil)))
(insn 340 339 341 28 (set (reg:SI 163 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 162 [ D.6683 ])
                (const_int 8 [0x8])) [0 _163->np.number+0 S4 A32])) fmtext_o.cpp:172 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162 [ D.6683 ])
        (nil)))
(insn 341 340 342 28 (set (reg/f:DI 455)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 342 341 343 28 (set (reg/f:DI 164 [ D.6683 ])
        (mem/f:DI (reg/f:DI 455) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:173 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 455)
        (nil)))
(insn 343 342 344 28 (set (reg:SI 165 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 164 [ D.6683 ])
                (const_int 12 [0xc])) [0 _165->ebytes.number+0 S4 A32])) fmtext_o.cpp:173 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 164 [ D.6683 ])
        (nil)))
(insn 344 343 345 28 (parallel [
            (set (reg:SI 166 [ D.6677 ])
                (mult:SI (reg:SI 163 [ D.6677 ])
                    (reg:SI 165 [ D.6677 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 165 [ D.6677 ])
        (expr_list:REG_DEAD (reg:SI 163 [ D.6677 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 345 344 346 28 (set (reg:DI 167 [ D.6678 ])
        (sign_extend:DI (reg:SI 166 [ D.6677 ]))) fmtext_o.cpp:172 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 166 [ D.6677 ])
        (nil)))
(insn 346 345 347 28 (set (reg:SI 456)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:172 90 {*movsi_internal}
     (nil))
(insn 347 346 348 28 (set (reg:DI 168 [ D.6678 ])
        (sign_extend:DI (reg:SI 456))) fmtext_o.cpp:172 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 456)
        (nil)))
(insn 348 347 349 28 (set (reg:DI 457)
        (reg:DI 168 [ D.6678 ])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 349 348 350 28 (parallel [
            (set (reg:DI 457)
                (ashift:DI (reg:DI 457)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 350 349 351 28 (parallel [
            (set (reg:DI 457)
                (plus:DI (reg:DI 457)
                    (reg:DI 168 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 168 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 168 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 351 350 352 28 (parallel [
            (set (reg:DI 458)
                (ashift:DI (reg:DI 457)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 352 351 353 28 (parallel [
            (set (reg:DI 457)
                (plus:DI (reg:DI 457)
                    (reg:DI 458)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 458)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 353 352 354 28 (parallel [
            (set (reg:DI 459)
                (ashift:DI (reg:DI 457)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 457)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 354 353 355 28 (set (reg:DI 457)
        (reg:DI 459)) fmtext_o.cpp:172 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 459)
        (nil)))
(insn 355 354 356 28 (set (reg:DI 169 [ D.6678 ])
        (reg:DI 457)) fmtext_o.cpp:172 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 457)
        (nil)))
(insn 356 355 357 28 (set (reg/f:DI 460)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 357 356 358 28 (parallel [
            (set (reg/f:DI 170 [ D.6687 ])
                (plus:DI (reg:DI 169 [ D.6678 ])
                    (reg/f:DI 460)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 460)
        (expr_list:REG_DEAD (reg:DI 169 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
                        (reg:DI 169 [ D.6678 ]))
                    (nil))))))
(insn 358 357 359 28 (set (reg:SI 462)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:172 90 {*movsi_internal}
     (nil))
(insn 359 358 360 28 (set (reg:DI 461)
        (sign_extend:DI (reg:SI 462))) fmtext_o.cpp:172 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 462)
        (nil)))
(insn 360 359 361 28 (set (reg/f:DI 171 [ D.6691 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 461)
                    (const_int 8 [0x8]))
                (reg/f:DI 170 [ D.6687 ])) [0 *_171 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 461)
        (expr_list:REG_DEAD (reg/f:DI 170 [ D.6687 ])
            (nil))))
(insn 361 360 362 28 (set (reg:DI 2 cx)
        (reg/f:DI 161 [ D.6682 ])) fmtext_o.cpp:173 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161 [ D.6682 ])
        (nil)))
(insn 362 361 363 28 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 363 362 364 28 (set (reg:DI 4 si)
        (reg:DI 167 [ D.6678 ])) fmtext_o.cpp:173 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 167 [ D.6678 ])
        (nil)))
(insn 364 363 365 28 (set (reg:DI 5 di)
        (reg/f:DI 171 [ D.6691 ])) fmtext_o.cpp:173 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 171 [ D.6691 ])
        (nil)))
(call_insn 365 364 1140 28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fa2a1ada360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:173 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 1140 365 1141 28 (set (pc)
        (label_ref 375)) 654 {jump}
     (nil)
 -> 375)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1141 1140 368)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 368 1141 369 29 29 "" [1 uses])
(note 369 368 370 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 370 369 371 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7fa2a18055a0 *.LC18>)) fmtext_o.cpp:175 89 {*movdi_internal}
     (nil))
(call_insn 371 370 372 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:175 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 372 371 373 29 (set (reg:SI 5 di)
        (const_int 6 [0x6])) fmtext_o.cpp:176 90 {*movsi_internal}
     (nil))
(call_insn 373 372 374 29 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fa2a1d26ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:176 660 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 374 373 375)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 [100.0%] 
;;              28 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 375 374 376 30 28 "" [2 uses])
(note 376 375 377 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 1142 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:166 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1142 377 1143 30 (set (pc)
        (label_ref 378)) fmtext_o.cpp:166 654 {jump}
     (nil)
 -> 378)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1143 1142 381)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 381 1143 382 31 25 "" [1 uses])
(note 382 381 383 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 383 382 1144 31 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:161 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1144 383 1145 31 (set (pc)
        (label_ref 384)) fmtext_o.cpp:161 654 {jump}
     (nil)
 -> 384)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1145 1144 387)
;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 387 1145 388 32 24 "" [1 uses])
(note 388 387 389 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 389 388 581 32 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:183 90 {*movsi_internal}
     (nil))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;;              40 [100.0%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 183 184 463
(code_label 581 389 390 33 37 "" [1 uses])
(note 390 581 391 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 391 390 392 33 (set (reg/f:DI 463)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:183 89 {*movdi_internal}
     (nil))
(insn 392 391 393 33 (set (reg/f:DI 183 [ D.6683 ])
        (mem/f:DI (reg/f:DI 463) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:183 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 463)
        (nil)))
(insn 393 392 394 33 (set (reg:SI 184 [ D.6677 ])
        (mem/j:SI (reg/f:DI 183 [ D.6683 ]) [0 _191->nblocks.number+0 S4 A32])) fmtext_o.cpp:183 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 183 [ D.6683 ])
        (nil)))
(insn 394 393 395 33 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 184 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:183 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 184 [ D.6677 ])
        (nil)))
(jump_insn 395 394 396 33 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 584)
            (pc))) fmtext_o.cpp:183 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 584)
;;  succ:       41
;;              34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 396 395 397 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 397 396 575 34 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;;              39 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 185 186 464
(code_label 575 397 398 35 36 "" [1 uses])
(note 398 575 399 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 399 398 400 35 (set (reg/f:DI 464)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 400 399 401 35 (set (reg/f:DI 185 [ D.6683 ])
        (mem/f:DI (reg/f:DI 464) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:185 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 464)
        (nil)))
(insn 401 400 402 35 (set (reg:SI 186 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 185 [ D.6683 ])
                (const_int 4 [0x4])) [0 _194->ntraces.number+0 S4 A32])) fmtext_o.cpp:185 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 185 [ D.6683 ])
        (nil)))
(insn 402 401 403 35 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 186 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:185 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 186 [ D.6677 ])
        (nil)))
(jump_insn 403 402 404 35 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 578)
            (pc))) fmtext_o.cpp:185 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 578)
;;  succ:       40
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 404 403 405 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 405 404 569 36 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;;              38 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 187 188 189 190 191 192 193 465
(code_label 569 405 406 37 35 "" [1 uses])
(note 406 569 407 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 37 (set (reg/f:DI 465)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:187 89 {*movdi_internal}
     (nil))
(insn 408 407 409 37 (set (reg/f:DI 187 [ D.6683 ])
        (mem/f:DI (reg/f:DI 465) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:187 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 465)
        (nil)))
(insn 409 408 410 37 (set (reg:SI 188 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 187 [ D.6683 ])
                (const_int 8 [0x8])) [0 _197->np.number+0 S4 A32])) fmtext_o.cpp:187 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 187 [ D.6683 ])
        (nil)))
(insn 410 409 411 37 (set (reg:DI 189 [ D.6678 ])
        (sign_extend:DI (reg:SI 188 [ D.6677 ]))) fmtext_o.cpp:187 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 188 [ D.6677 ])
        (nil)))
(insn 411 410 412 37 (set (reg:SI 190 [ D.6692 ])
        (subreg:SI (reg:DI 189 [ D.6678 ]) 0)) fmtext_o.cpp:187 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 189 [ D.6678 ])
        (nil)))
(insn 412 411 413 37 (set (reg:SI 191 [ D.6692 ])
        (const_int 8 [0x8])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
(insn 413 412 414 37 (parallel [
            (set (reg:SI 192 [ D.6692 ])
                (mult:SI (reg:SI 190 [ D.6692 ])
                    (reg:SI 191 [ D.6692 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:187 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 191 [ D.6692 ])
        (expr_list:REG_DEAD (reg:SI 190 [ D.6692 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 414 413 415 37 (set (reg:SI 193 [ D.6677 ])
        (reg:SI 192 [ D.6692 ])) fmtext_o.cpp:187 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 192 [ D.6692 ])
        (nil)))
(insn 415 414 416 37 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 193 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32]))) fmtext_o.cpp:187 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 193 [ D.6677 ])
        (nil)))
(jump_insn 416 415 417 37 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 572)
            (pc))) fmtext_o.cpp:187 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 572)
;;  succ:       39
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537
(note 417 416 418 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 419 38 (set (reg:SI 466)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 419 418 420 38 (set (reg:DI 194 [ D.6678 ])
        (sign_extend:DI (reg:SI 466))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 466)
        (nil)))
(insn 420 419 421 38 (set (reg:DI 467)
        (reg:DI 194 [ D.6678 ])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 421 420 422 38 (parallel [
            (set (reg:DI 467)
                (ashift:DI (reg:DI 467)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 422 421 423 38 (parallel [
            (set (reg:DI 467)
                (plus:DI (reg:DI 467)
                    (reg:DI 194 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 194 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 194 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 423 422 424 38 (parallel [
            (set (reg:DI 468)
                (ashift:DI (reg:DI 467)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 424 423 425 38 (parallel [
            (set (reg:DI 467)
                (plus:DI (reg:DI 467)
                    (reg:DI 468)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 468)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 425 424 426 38 (parallel [
            (set (reg:DI 469)
                (ashift:DI (reg:DI 467)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 467)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 426 425 427 38 (set (reg:DI 467)
        (reg:DI 469)) fmtext_o.cpp:189 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 469)
        (nil)))
(insn 427 426 428 38 (set (reg:DI 195 [ D.6678 ])
        (reg:DI 467)) fmtext_o.cpp:189 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 467)
        (nil)))
(insn 428 427 429 38 (set (reg/f:DI 470)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 429 428 430 38 (parallel [
            (set (reg/f:DI 196 [ D.6689 ])
                (plus:DI (reg:DI 195 [ D.6678 ])
                    (reg/f:DI 470)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 470)
        (expr_list:REG_DEAD (reg:DI 195 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 195 [ D.6678 ]))
                    (nil))))))
(insn 430 429 431 38 (set (reg:SI 472)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 431 430 432 38 (set (reg:DI 471)
        (sign_extend:DI (reg:SI 472))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 472)
        (nil)))
(insn 432 431 433 38 (set (reg/f:DI 197 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 471)
                    (const_int 8 [0x8]))
                (reg/f:DI 196 [ D.6689 ])) [0 *_206 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 471)
        (expr_list:REG_DEAD (reg/f:DI 196 [ D.6689 ])
            (nil))))
(insn 433 432 434 38 (set (reg:SI 473)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 434 433 435 38 (set (reg:DI 198 [ D.6678 ])
        (sign_extend:DI (reg:SI 473))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 473)
        (nil)))
(insn 435 434 436 38 (set (reg:DI 474)
        (reg:DI 198 [ D.6678 ])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 436 435 437 38 (parallel [
            (set (reg:DI 474)
                (ashift:DI (reg:DI 474)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 437 436 438 38 (parallel [
            (set (reg:DI 474)
                (plus:DI (reg:DI 474)
                    (reg:DI 198 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 198 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 198 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 438 437 439 38 (parallel [
            (set (reg:DI 475)
                (ashift:DI (reg:DI 474)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 439 438 440 38 (parallel [
            (set (reg:DI 474)
                (plus:DI (reg:DI 474)
                    (reg:DI 475)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 475)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 440 439 441 38 (parallel [
            (set (reg:DI 476)
                (ashift:DI (reg:DI 474)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 474)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 441 440 442 38 (set (reg:DI 474)
        (reg:DI 476)) fmtext_o.cpp:189 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 476)
        (nil)))
(insn 442 441 443 38 (set (reg:DI 199 [ D.6678 ])
        (reg:DI 474)) fmtext_o.cpp:189 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 474)
        (nil)))
(insn 443 442 444 38 (set (reg/f:DI 477)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 444 443 445 38 (parallel [
            (set (reg/f:DI 200 [ D.6687 ])
                (plus:DI (reg:DI 199 [ D.6678 ])
                    (reg/f:DI 477)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 477)
        (expr_list:REG_DEAD (reg:DI 199 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
                        (reg:DI 199 [ D.6678 ]))
                    (nil))))))
(insn 445 444 446 38 (set (reg:SI 479)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 446 445 447 38 (set (reg:DI 478)
        (sign_extend:DI (reg:SI 479))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 479)
        (nil)))
(insn 447 446 448 38 (set (reg/f:DI 201 [ D.6691 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 478)
                    (const_int 8 [0x8]))
                (reg/f:DI 200 [ D.6687 ])) [0 *_210 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 478)
        (expr_list:REG_DEAD (reg/f:DI 200 [ D.6687 ])
            (nil))))
(insn 448 447 449 38 (set (reg:SI 481)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 449 448 450 38 (set (reg:DI 480)
        (sign_extend:DI (reg:SI 481))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 481)
        (nil)))
(insn 450 449 451 38 (set (reg:QI 202 [ D.6694 ])
        (mem/j:QI (plus:DI (reg/f:DI 201 [ D.6691 ])
                (reg:DI 480)) [0 _211->character S1 A8])) fmtext_o.cpp:189 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 480)
        (expr_list:REG_DEAD (reg/f:DI 201 [ D.6691 ])
            (nil))))
(insn 451 450 452 38 (set (reg:SI 483)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 452 451 453 38 (set (reg:DI 482)
        (sign_extend:DI (reg:SI 483))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 483)
        (nil)))
(insn 453 452 454 38 (set (mem/j:QI (plus:DI (reg/f:DI 197 [ D.6693 ])
                (reg:DI 482)) [0 _207->character S1 A8])
        (reg:QI 202 [ D.6694 ])) fmtext_o.cpp:189 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 482)
        (expr_list:REG_DEAD (reg:QI 202 [ D.6694 ])
            (expr_list:REG_DEAD (reg/f:DI 197 [ D.6693 ])
                (nil)))))
(insn 454 453 455 38 (set (reg:SI 484)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 455 454 456 38 (set (reg:DI 203 [ D.6678 ])
        (sign_extend:DI (reg:SI 484))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 484)
        (nil)))
(insn 456 455 457 38 (set (reg:DI 485)
        (reg:DI 203 [ D.6678 ])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 457 456 458 38 (parallel [
            (set (reg:DI 485)
                (ashift:DI (reg:DI 485)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 458 457 459 38 (parallel [
            (set (reg:DI 485)
                (plus:DI (reg:DI 485)
                    (reg:DI 203 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 203 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 203 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 459 458 460 38 (parallel [
            (set (reg:DI 486)
                (ashift:DI (reg:DI 485)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 460 459 461 38 (parallel [
            (set (reg:DI 485)
                (plus:DI (reg:DI 485)
                    (reg:DI 486)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 486)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 461 460 462 38 (parallel [
            (set (reg:DI 487)
                (ashift:DI (reg:DI 485)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 485)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 462 461 463 38 (set (reg:DI 485)
        (reg:DI 487)) fmtext_o.cpp:190 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 487)
        (nil)))
(insn 463 462 464 38 (set (reg:DI 204 [ D.6678 ])
        (reg:DI 485)) fmtext_o.cpp:190 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 485)
        (nil)))
(insn 464 463 465 38 (set (reg/f:DI 488)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 465 464 466 38 (parallel [
            (set (reg/f:DI 205 [ D.6689 ])
                (plus:DI (reg:DI 204 [ D.6678 ])
                    (reg/f:DI 488)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 488)
        (expr_list:REG_DEAD (reg:DI 204 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 204 [ D.6678 ]))
                    (nil))))))
(insn 466 465 467 38 (set (reg:SI 490)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 467 466 468 38 (set (reg:DI 489)
        (sign_extend:DI (reg:SI 490))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 490)
        (nil)))
(insn 468 467 469 38 (set (reg/f:DI 206 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 489)
                    (const_int 8 [0x8]))
                (reg/f:DI 205 [ D.6689 ])) [0 *_216 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 489)
        (expr_list:REG_DEAD (reg/f:DI 205 [ D.6689 ])
            (nil))))
(insn 469 468 470 38 (set (reg:SI 491)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 470 469 471 38 (parallel [
            (set (reg:SI 207 [ D.6677 ])
                (plus:SI (reg:SI 491)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 491)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 471 470 472 38 (set (reg:SI 492)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 472 471 473 38 (set (reg:DI 208 [ D.6678 ])
        (sign_extend:DI (reg:SI 492))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 492)
        (nil)))
(insn 473 472 474 38 (set (reg:DI 493)
        (reg:DI 208 [ D.6678 ])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 474 473 475 38 (parallel [
            (set (reg:DI 493)
                (ashift:DI (reg:DI 493)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 475 474 476 38 (parallel [
            (set (reg:DI 493)
                (plus:DI (reg:DI 493)
                    (reg:DI 208 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 208 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 208 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 476 475 477 38 (parallel [
            (set (reg:DI 494)
                (ashift:DI (reg:DI 493)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 477 476 478 38 (parallel [
            (set (reg:DI 493)
                (plus:DI (reg:DI 493)
                    (reg:DI 494)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 494)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 478 477 479 38 (parallel [
            (set (reg:DI 495)
                (ashift:DI (reg:DI 493)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 493)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 479 478 480 38 (set (reg:DI 493)
        (reg:DI 495)) fmtext_o.cpp:190 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 495)
        (nil)))
(insn 480 479 481 38 (set (reg:DI 209 [ D.6678 ])
        (reg:DI 493)) fmtext_o.cpp:190 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 493)
        (nil)))
(insn 481 480 482 38 (set (reg/f:DI 496)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 482 481 483 38 (parallel [
            (set (reg/f:DI 210 [ D.6687 ])
                (plus:DI (reg:DI 209 [ D.6678 ])
                    (reg/f:DI 496)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 496)
        (expr_list:REG_DEAD (reg:DI 209 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
                        (reg:DI 209 [ D.6678 ]))
                    (nil))))))
(insn 483 482 484 38 (set (reg:SI 498)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 484 483 485 38 (set (reg:DI 497)
        (sign_extend:DI (reg:SI 498))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 498)
        (nil)))
(insn 485 484 486 38 (set (reg/f:DI 211 [ D.6691 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 497)
                    (const_int 8 [0x8]))
                (reg/f:DI 210 [ D.6687 ])) [0 *_221 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 497)
        (expr_list:REG_DEAD (reg/f:DI 210 [ D.6687 ])
            (nil))))
(insn 486 485 487 38 (set (reg:SI 499)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 487 486 488 38 (parallel [
            (set (reg:SI 212 [ D.6677 ])
                (plus:SI (reg:SI 499)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 499)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 488 487 489 38 (set (reg:DI 500)
        (sign_extend:DI (reg:SI 212 [ D.6677 ]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 212 [ D.6677 ])
        (nil)))
(insn 489 488 490 38 (set (reg:QI 213 [ D.6694 ])
        (mem/j:QI (plus:DI (reg/f:DI 211 [ D.6691 ])
                (reg:DI 500)) [0 _222->character S1 A8])) fmtext_o.cpp:190 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 500)
        (expr_list:REG_DEAD (reg/f:DI 211 [ D.6691 ])
            (nil))))
(insn 490 489 491 38 (set (reg:DI 501)
        (sign_extend:DI (reg:SI 207 [ D.6677 ]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 207 [ D.6677 ])
        (nil)))
(insn 491 490 492 38 (set (mem/j:QI (plus:DI (reg/f:DI 206 [ D.6693 ])
                (reg:DI 501)) [0 _217->character S1 A8])
        (reg:QI 213 [ D.6694 ])) fmtext_o.cpp:190 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 501)
        (expr_list:REG_DEAD (reg:QI 213 [ D.6694 ])
            (expr_list:REG_DEAD (reg/f:DI 206 [ D.6693 ])
                (nil)))))
(insn 492 491 493 38 (set (reg:SI 502)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 493 492 494 38 (set (reg:DI 214 [ D.6678 ])
        (sign_extend:DI (reg:SI 502))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 502)
        (nil)))
(insn 494 493 495 38 (set (reg:DI 503)
        (reg:DI 214 [ D.6678 ])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 495 494 496 38 (parallel [
            (set (reg:DI 503)
                (ashift:DI (reg:DI 503)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 496 495 497 38 (parallel [
            (set (reg:DI 503)
                (plus:DI (reg:DI 503)
                    (reg:DI 214 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 214 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 214 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 497 496 498 38 (parallel [
            (set (reg:DI 504)
                (ashift:DI (reg:DI 503)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 498 497 499 38 (parallel [
            (set (reg:DI 503)
                (plus:DI (reg:DI 503)
                    (reg:DI 504)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 504)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 499 498 500 38 (parallel [
            (set (reg:DI 505)
                (ashift:DI (reg:DI 503)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 503)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 500 499 501 38 (set (reg:DI 503)
        (reg:DI 505)) fmtext_o.cpp:191 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 505)
        (nil)))
(insn 501 500 502 38 (set (reg:DI 215 [ D.6678 ])
        (reg:DI 503)) fmtext_o.cpp:191 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 503)
        (nil)))
(insn 502 501 503 38 (set (reg/f:DI 506)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 503 502 504 38 (parallel [
            (set (reg/f:DI 216 [ D.6689 ])
                (plus:DI (reg:DI 215 [ D.6678 ])
                    (reg/f:DI 506)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 506)
        (expr_list:REG_DEAD (reg:DI 215 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 215 [ D.6678 ]))
                    (nil))))))
(insn 504 503 505 38 (set (reg:SI 508)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 505 504 506 38 (set (reg:DI 507)
        (sign_extend:DI (reg:SI 508))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 508)
        (nil)))
(insn 506 505 507 38 (set (reg/f:DI 217 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 507)
                    (const_int 8 [0x8]))
                (reg/f:DI 216 [ D.6689 ])) [0 *_228 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 507)
        (expr_list:REG_DEAD (reg/f:DI 216 [ D.6689 ])
            (nil))))
(insn 507 506 508 38 (set (reg:SI 509)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 508 507 509 38 (parallel [
            (set (reg:SI 218 [ D.6677 ])
                (plus:SI (reg:SI 509)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 509)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 2 [0x2]))
                (nil)))))
(insn 509 508 510 38 (set (reg:SI 510)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 510 509 511 38 (set (reg:DI 219 [ D.6678 ])
        (sign_extend:DI (reg:SI 510))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 510)
        (nil)))
(insn 511 510 512 38 (set (reg:DI 511)
        (reg:DI 219 [ D.6678 ])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 512 511 513 38 (parallel [
            (set (reg:DI 511)
                (ashift:DI (reg:DI 511)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 513 512 514 38 (parallel [
            (set (reg:DI 511)
                (plus:DI (reg:DI 511)
                    (reg:DI 219 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 219 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 219 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 514 513 515 38 (parallel [
            (set (reg:DI 512)
                (ashift:DI (reg:DI 511)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 515 514 516 38 (parallel [
            (set (reg:DI 511)
                (plus:DI (reg:DI 511)
                    (reg:DI 512)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 512)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 516 515 517 38 (parallel [
            (set (reg:DI 513)
                (ashift:DI (reg:DI 511)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 511)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 517 516 518 38 (set (reg:DI 511)
        (reg:DI 513)) fmtext_o.cpp:191 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 513)
        (nil)))
(insn 518 517 519 38 (set (reg:DI 220 [ D.6678 ])
        (reg:DI 511)) fmtext_o.cpp:191 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 511)
        (nil)))
(insn 519 518 520 38 (set (reg/f:DI 514)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 520 519 521 38 (parallel [
            (set (reg/f:DI 221 [ D.6687 ])
                (plus:DI (reg:DI 220 [ D.6678 ])
                    (reg/f:DI 514)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 514)
        (expr_list:REG_DEAD (reg:DI 220 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
                        (reg:DI 220 [ D.6678 ]))
                    (nil))))))
(insn 521 520 522 38 (set (reg:SI 516)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 522 521 523 38 (set (reg:DI 515)
        (sign_extend:DI (reg:SI 516))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 516)
        (nil)))
(insn 523 522 524 38 (set (reg/f:DI 222 [ D.6691 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 515)
                    (const_int 8 [0x8]))
                (reg/f:DI 221 [ D.6687 ])) [0 *_233 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 515)
        (expr_list:REG_DEAD (reg/f:DI 221 [ D.6687 ])
            (nil))))
(insn 524 523 525 38 (set (reg:SI 517)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 525 524 526 38 (parallel [
            (set (reg:SI 223 [ D.6677 ])
                (plus:SI (reg:SI 517)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 517)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 2 [0x2]))
                (nil)))))
(insn 526 525 527 38 (set (reg:DI 518)
        (sign_extend:DI (reg:SI 223 [ D.6677 ]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 223 [ D.6677 ])
        (nil)))
(insn 527 526 528 38 (set (reg:QI 224 [ D.6694 ])
        (mem/j:QI (plus:DI (reg/f:DI 222 [ D.6691 ])
                (reg:DI 518)) [0 _234->character S1 A8])) fmtext_o.cpp:191 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 518)
        (expr_list:REG_DEAD (reg/f:DI 222 [ D.6691 ])
            (nil))))
(insn 528 527 529 38 (set (reg:DI 519)
        (sign_extend:DI (reg:SI 218 [ D.6677 ]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 218 [ D.6677 ])
        (nil)))
(insn 529 528 530 38 (set (mem/j:QI (plus:DI (reg/f:DI 217 [ D.6693 ])
                (reg:DI 519)) [0 _229->character S1 A8])
        (reg:QI 224 [ D.6694 ])) fmtext_o.cpp:191 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 519)
        (expr_list:REG_DEAD (reg:QI 224 [ D.6694 ])
            (expr_list:REG_DEAD (reg/f:DI 217 [ D.6693 ])
                (nil)))))
(insn 530 529 531 38 (set (reg:SI 520)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 531 530 532 38 (set (reg:DI 225 [ D.6678 ])
        (sign_extend:DI (reg:SI 520))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 520)
        (nil)))
(insn 532 531 533 38 (set (reg:DI 521)
        (reg:DI 225 [ D.6678 ])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 533 532 534 38 (parallel [
            (set (reg:DI 521)
                (ashift:DI (reg:DI 521)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 534 533 535 38 (parallel [
            (set (reg:DI 521)
                (plus:DI (reg:DI 521)
                    (reg:DI 225 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 225 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 225 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 535 534 536 38 (parallel [
            (set (reg:DI 522)
                (ashift:DI (reg:DI 521)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 536 535 537 38 (parallel [
            (set (reg:DI 521)
                (plus:DI (reg:DI 521)
                    (reg:DI 522)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 522)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 537 536 538 38 (parallel [
            (set (reg:DI 523)
                (ashift:DI (reg:DI 521)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 521)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 538 537 539 38 (set (reg:DI 521)
        (reg:DI 523)) fmtext_o.cpp:192 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 523)
        (nil)))
(insn 539 538 540 38 (set (reg:DI 226 [ D.6678 ])
        (reg:DI 521)) fmtext_o.cpp:192 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 521)
        (nil)))
(insn 540 539 541 38 (set (reg/f:DI 524)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 541 540 542 38 (parallel [
            (set (reg/f:DI 227 [ D.6689 ])
                (plus:DI (reg:DI 226 [ D.6678 ])
                    (reg/f:DI 524)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 524)
        (expr_list:REG_DEAD (reg:DI 226 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 226 [ D.6678 ]))
                    (nil))))))
(insn 542 541 543 38 (set (reg:SI 526)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 543 542 544 38 (set (reg:DI 525)
        (sign_extend:DI (reg:SI 526))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 526)
        (nil)))
(insn 544 543 545 38 (set (reg/f:DI 228 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 525)
                    (const_int 8 [0x8]))
                (reg/f:DI 227 [ D.6689 ])) [0 *_240 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 525)
        (expr_list:REG_DEAD (reg/f:DI 227 [ D.6689 ])
            (nil))))
(insn 545 544 546 38 (set (reg:SI 527)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 546 545 547 38 (parallel [
            (set (reg:SI 229 [ D.6677 ])
                (plus:SI (reg:SI 527)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 527)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 547 546 548 38 (set (reg:SI 528)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 548 547 549 38 (set (reg:DI 230 [ D.6678 ])
        (sign_extend:DI (reg:SI 528))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 528)
        (nil)))
(insn 549 548 550 38 (set (reg:DI 529)
        (reg:DI 230 [ D.6678 ])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 550 549 551 38 (parallel [
            (set (reg:DI 529)
                (ashift:DI (reg:DI 529)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 551 550 552 38 (parallel [
            (set (reg:DI 529)
                (plus:DI (reg:DI 529)
                    (reg:DI 230 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 230 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 230 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 552 551 553 38 (parallel [
            (set (reg:DI 530)
                (ashift:DI (reg:DI 529)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 553 552 554 38 (parallel [
            (set (reg:DI 529)
                (plus:DI (reg:DI 529)
                    (reg:DI 530)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 530)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 554 553 555 38 (parallel [
            (set (reg:DI 531)
                (ashift:DI (reg:DI 529)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 529)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 555 554 556 38 (set (reg:DI 529)
        (reg:DI 531)) fmtext_o.cpp:192 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 531)
        (nil)))
(insn 556 555 557 38 (set (reg:DI 231 [ D.6678 ])
        (reg:DI 529)) fmtext_o.cpp:192 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 529)
        (nil)))
(insn 557 556 558 38 (set (reg/f:DI 532)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 558 557 559 38 (parallel [
            (set (reg/f:DI 232 [ D.6687 ])
                (plus:DI (reg:DI 231 [ D.6678 ])
                    (reg/f:DI 532)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 532)
        (expr_list:REG_DEAD (reg:DI 231 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
                        (reg:DI 231 [ D.6678 ]))
                    (nil))))))
(insn 559 558 560 38 (set (reg:SI 534)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 560 559 561 38 (set (reg:DI 533)
        (sign_extend:DI (reg:SI 534))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 534)
        (nil)))
(insn 561 560 562 38 (set (reg/f:DI 233 [ D.6691 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 533)
                    (const_int 8 [0x8]))
                (reg/f:DI 232 [ D.6687 ])) [0 *_245 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 533)
        (expr_list:REG_DEAD (reg/f:DI 232 [ D.6687 ])
            (nil))))
(insn 562 561 563 38 (set (reg:SI 535)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 563 562 564 38 (parallel [
            (set (reg:SI 234 [ D.6677 ])
                (plus:SI (reg:SI 535)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 535)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 564 563 565 38 (set (reg:DI 536)
        (sign_extend:DI (reg:SI 234 [ D.6677 ]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 234 [ D.6677 ])
        (nil)))
(insn 565 564 566 38 (set (reg:QI 235 [ D.6694 ])
        (mem/j:QI (plus:DI (reg/f:DI 233 [ D.6691 ])
                (reg:DI 536)) [0 _246->character S1 A8])) fmtext_o.cpp:192 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 536)
        (expr_list:REG_DEAD (reg/f:DI 233 [ D.6691 ])
            (nil))))
(insn 566 565 567 38 (set (reg:DI 537)
        (sign_extend:DI (reg:SI 229 [ D.6677 ]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 229 [ D.6677 ])
        (nil)))
(insn 567 566 568 38 (set (mem/j:QI (plus:DI (reg/f:DI 228 [ D.6693 ])
                (reg:DI 537)) [0 _241->character S1 A8])
        (reg:QI 235 [ D.6694 ])) fmtext_o.cpp:192 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 537)
        (expr_list:REG_DEAD (reg:QI 235 [ D.6694 ])
            (expr_list:REG_DEAD (reg/f:DI 228 [ D.6693 ])
                (nil)))))
(insn 568 567 1146 38 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:187 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1146 568 1147 38 (set (pc)
        (label_ref 569)) fmtext_o.cpp:187 654 {jump}
     (nil)
 -> 569)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1147 1146 572)
;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 572 1147 573 39 34 "" [1 uses])
(note 573 572 574 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 574 573 1148 39 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:185 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1148 574 1149 39 (set (pc)
        (label_ref 575)) fmtext_o.cpp:185 654 {jump}
     (nil)
 -> 575)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1149 1148 578)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 578 1149 579 40 33 "" [1 uses])
(note 579 578 580 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 1150 40 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:183 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1150 580 1151 40 (set (pc)
        (label_ref 581)) fmtext_o.cpp:183 654 {jump}
     (nil)
 -> 581)
;;  succ:       33 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1151 1150 584)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 584 1151 585 41 32 "" [1 uses])
(note 585 584 586 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 586 585 647 41 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:202 90 {*movsi_internal}
     (nil))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;;              46 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 236 237 538
(code_label 647 586 587 42 41 "" [1 uses])
(note 587 647 588 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 588 587 589 42 (set (reg/f:DI 538)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:202 89 {*movdi_internal}
     (nil))
(insn 589 588 590 42 (set (reg/f:DI 236 [ D.6683 ])
        (mem/f:DI (reg/f:DI 538) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:202 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 538)
        (nil)))
(insn 590 589 591 42 (set (reg:SI 237 [ D.6677 ])
        (mem/j:SI (reg/f:DI 236 [ D.6683 ]) [0 _254->nblocks.number+0 S4 A32])) fmtext_o.cpp:202 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 236 [ D.6683 ])
        (nil)))
(insn 591 590 592 42 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 237 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:202 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 237 [ D.6677 ])
        (nil)))
(jump_insn 592 591 593 42 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 650)
            (pc))) fmtext_o.cpp:202 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 650)
;;  succ:       47
;;              43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 593 592 594 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 594 593 641 43 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:204 90 {*movsi_internal}
     (nil))
;;  succ:       44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;;              45 [100.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238 239 539
(code_label 641 594 595 44 40 "" [1 uses])
(note 595 641 596 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 596 595 597 44 (set (reg/f:DI 539)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:204 89 {*movdi_internal}
     (nil))
(insn 597 596 598 44 (set (reg/f:DI 238 [ D.6683 ])
        (mem/f:DI (reg/f:DI 539) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:204 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 539)
        (nil)))
(insn 598 597 599 44 (set (reg:SI 239 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 238 [ D.6683 ])
                (const_int 4 [0x4])) [0 _257->ntraces.number+0 S4 A32])) fmtext_o.cpp:204 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 238 [ D.6683 ])
        (nil)))
(insn 599 598 600 44 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 239 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:204 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 239 [ D.6677 ])
        (nil)))
(jump_insn 600 599 601 44 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 644)
            (pc))) fmtext_o.cpp:204 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 644)
;;  succ:       46
;;              45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 240 241 242 243 244 245 246 247 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559
(note 601 600 602 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 602 601 603 45 (set (reg:SI 540)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 603 602 604 45 (set (reg:DI 240 [ D.6678 ])
        (sign_extend:DI (reg:SI 540))) fmtext_o.cpp:206 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 540)
        (nil)))
(insn 604 603 605 45 (parallel [
            (set (reg:DI 241 [ D.6678 ])
                (ashift:DI (reg:DI 240 [ D.6678 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 240 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 605 604 606 45 (set (reg/f:DI 541)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:206 89 {*movdi_internal}
     (nil))
(insn 606 605 607 45 (parallel [
            (set (reg/f:DI 242 [ D.6695 ])
                (plus:DI (reg:DI 241 [ D.6678 ])
                    (reg/f:DI 541)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 541)
        (expr_list:REG_DEAD (reg:DI 241 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])
                        (reg:DI 241 [ D.6678 ]))
                    (nil))))))
(insn 607 606 608 45 (set (reg:SI 243 [ D.6677 ])
        (mem:SI (reg/f:DI 242 [ D.6695 ]) [0 *_262+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 242 [ D.6695 ])
        (nil)))
(insn 608 607 609 45 (set (reg:SI 543)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 609 608 610 45 (set (reg:DI 542)
        (sign_extend:DI (reg:SI 543))) fmtext_o.cpp:206 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 543)
        (nil)))
(insn 610 609 611 45 (set (reg:SI 545)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 611 610 612 45 (set (reg:DI 544)
        (sign_extend:DI (reg:SI 545))) fmtext_o.cpp:206 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 545)
        (nil)))
(insn 612 611 613 45 (set (reg:DI 546)
        (reg:DI 544)) fmtext_o.cpp:206 89 {*movdi_internal}
     (nil))
(insn 613 612 614 45 (parallel [
            (set (reg:DI 546)
                (ashift:DI (reg:DI 546)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 614 613 615 45 (parallel [
            (set (reg:DI 546)
                (plus:DI (reg:DI 546)
                    (reg:DI 544)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 544)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 544)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 615 614 616 45 (parallel [
            (set (reg:DI 547)
                (ashift:DI (reg:DI 546)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 616 615 617 45 (parallel [
            (set (reg:DI 546)
                (plus:DI (reg:DI 546)
                    (reg:DI 547)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 547)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 617 616 618 45 (parallel [
            (set (reg:DI 548)
                (ashift:DI (reg:DI 546)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 546)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 618 617 619 45 (set (reg:DI 546)
        (reg:DI 548)) fmtext_o.cpp:206 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 548)
        (nil)))
(insn 619 618 620 45 (parallel [
            (set (reg:DI 549)
                (plus:DI (reg:DI 546)
                    (reg:DI 542)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 546)
        (expr_list:REG_DEAD (reg:DI 542)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 620 619 621 45 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 549)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -80016 [0xfffffffffffec770])) [0 pe_index[i_5][j_15].index_r+0 S4 A64])
        (reg:SI 243 [ D.6677 ])) fmtext_o.cpp:206 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 549)
        (expr_list:REG_DEAD (reg:SI 243 [ D.6677 ])
            (nil))))
(insn 621 620 622 45 (set (reg:SI 550)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 622 621 623 45 (set (reg:DI 244 [ D.6678 ])
        (sign_extend:DI (reg:SI 550))) fmtext_o.cpp:207 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 550)
        (nil)))
(insn 623 622 624 45 (parallel [
            (set (reg:DI 245 [ D.6678 ])
                (ashift:DI (reg:DI 244 [ D.6678 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 244 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 624 623 625 45 (set (reg/f:DI 551)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:207 89 {*movdi_internal}
     (nil))
(insn 625 624 626 45 (parallel [
            (set (reg/f:DI 246 [ D.6695 ])
                (plus:DI (reg:DI 245 [ D.6678 ])
                    (reg/f:DI 551)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 551)
        (expr_list:REG_DEAD (reg:DI 245 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])
                        (reg:DI 245 [ D.6678 ]))
                    (nil))))))
(insn 626 625 627 45 (set (reg:SI 247 [ D.6677 ])
        (mem:SI (reg/f:DI 246 [ D.6695 ]) [0 *_267+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 246 [ D.6695 ])
        (nil)))
(insn 627 626 628 45 (set (reg:SI 553)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 628 627 629 45 (set (reg:DI 552)
        (sign_extend:DI (reg:SI 553))) fmtext_o.cpp:207 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 553)
        (nil)))
(insn 629 628 630 45 (set (reg:SI 555)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 630 629 631 45 (set (reg:DI 554)
        (sign_extend:DI (reg:SI 555))) fmtext_o.cpp:207 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 555)
        (nil)))
(insn 631 630 632 45 (set (reg:DI 556)
        (reg:DI 554)) fmtext_o.cpp:207 89 {*movdi_internal}
     (nil))
(insn 632 631 633 45 (parallel [
            (set (reg:DI 556)
                (ashift:DI (reg:DI 556)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 633 632 634 45 (parallel [
            (set (reg:DI 556)
                (plus:DI (reg:DI 556)
                    (reg:DI 554)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 554)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 554)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 634 633 635 45 (parallel [
            (set (reg:DI 557)
                (ashift:DI (reg:DI 556)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 635 634 636 45 (parallel [
            (set (reg:DI 556)
                (plus:DI (reg:DI 556)
                    (reg:DI 557)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 557)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 636 635 637 45 (parallel [
            (set (reg:DI 558)
                (ashift:DI (reg:DI 556)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 556)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 637 636 638 45 (set (reg:DI 556)
        (reg:DI 558)) fmtext_o.cpp:207 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 558)
        (nil)))
(insn 638 637 639 45 (parallel [
            (set (reg:DI 559)
                (plus:DI (reg:DI 556)
                    (reg:DI 552)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 556)
        (expr_list:REG_DEAD (reg:DI 552)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 639 638 640 45 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 559)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -80012 [0xfffffffffffec774])) [0 pe_index[i_5][j_15].index_c+0 S4 A32])
        (reg:SI 247 [ D.6677 ])) fmtext_o.cpp:207 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 559)
        (expr_list:REG_DEAD (reg:SI 247 [ D.6677 ])
            (nil))))
(insn 640 639 1152 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:204 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1152 640 1153 45 (set (pc)
        (label_ref 641)) fmtext_o.cpp:204 654 {jump}
     (nil)
 -> 641)
;;  succ:       44 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1153 1152 644)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 644 1153 645 46 39 "" [1 uses])
(note 645 644 646 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 646 645 1154 46 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:202 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1154 646 1155 46 (set (pc)
        (label_ref 647)) fmtext_o.cpp:202 654 {jump}
     (nil)
 -> 647)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1155 1154 650)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 650 1155 651 47 38 "" [1 uses])
(note 651 650 652 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 652 651 678 47 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:214 90 {*movsi_internal}
     (nil))
;;  succ:       48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;;              51 [100.0%] 
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 248 560
(code_label 678 652 653 48 44 "" [1 uses])
(note 653 678 654 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 654 653 655 48 (set (reg/f:DI 560)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:214 89 {*movdi_internal}
     (nil))
(insn 655 654 656 48 (set (reg:SI 248 [ D.6677 ])
        (mem/j:SI (reg/f:DI 560) [0 pe_info_273(D)->number_pe+0 S4 A32])) fmtext_o.cpp:214 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 560)
        (nil)))
(insn 656 655 657 48 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 248 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:214 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 248 [ D.6677 ])
        (nil)))
(jump_insn 657 656 658 48 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 681)
            (pc))) fmtext_o.cpp:214 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 681)
;;  succ:       52
;;              49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 249 250 251 252 561 562
(note 658 657 659 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 659 658 660 49 (set (reg:SI 561)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:216 90 {*movsi_internal}
     (nil))
(insn 660 659 661 49 (set (reg:DI 249 [ D.6678 ])
        (sign_extend:DI (reg:SI 561))) fmtext_o.cpp:216 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 561)
        (nil)))
(insn 661 660 662 49 (parallel [
            (set (reg:DI 250 [ D.6678 ])
                (ashift:DI (reg:DI 249 [ D.6678 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:216 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 249 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 662 661 663 49 (set (reg/f:DI 562)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:216 89 {*movdi_internal}
     (nil))
(insn 663 662 664 49 (parallel [
            (set (reg/f:DI 251 [ D.6695 ])
                (plus:DI (reg:DI 250 [ D.6678 ])
                    (reg/f:DI 562)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:216 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 562)
        (expr_list:REG_DEAD (reg:DI 250 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])
                        (reg:DI 250 [ D.6678 ]))
                    (nil))))))
(insn 664 663 665 49 (set (reg:SI 252 [ D.6677 ])
        (mem:SI (reg/f:DI 251 [ D.6695 ]) [0 *_277+0 S4 A32])) fmtext_o.cpp:216 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 251 [ D.6695 ])
        (nil)))
(insn 665 664 666 49 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 252 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32]))) fmtext_o.cpp:216 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 252 [ D.6677 ])
        (nil)))
(jump_insn 666 665 667 49 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 675)
            (pc))) fmtext_o.cpp:216 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 675)
;;  succ:       50 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 253 254 255 563 564 565
(note 667 666 668 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 668 667 669 50 (set (reg:SI 563)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:217 90 {*movsi_internal}
     (nil))
(insn 669 668 670 50 (set (reg:DI 253 [ D.6678 ])
        (sign_extend:DI (reg:SI 563))) fmtext_o.cpp:217 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 563)
        (nil)))
(insn 670 669 671 50 (parallel [
            (set (reg:DI 254 [ D.6678 ])
                (ashift:DI (reg:DI 253 [ D.6678 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:217 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 253 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 671 670 672 50 (set (reg/f:DI 564)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:217 89 {*movdi_internal}
     (nil))
(insn 672 671 673 50 (parallel [
            (set (reg/f:DI 255 [ D.6695 ])
                (plus:DI (reg:DI 254 [ D.6678 ])
                    (reg/f:DI 564)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:217 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 564)
        (expr_list:REG_DEAD (reg:DI 254 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])
                        (reg:DI 254 [ D.6678 ]))
                    (nil))))))
(insn 673 672 674 50 (set (reg:SI 565)
        (mem:SI (reg/f:DI 255 [ D.6695 ]) [0 *_281+0 S4 A32])) fmtext_o.cpp:217 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 255 [ D.6695 ])
        (nil)))
(insn 674 673 675 50 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
        (reg:SI 565)) fmtext_o.cpp:217 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 565)
        (nil)))
;;  succ:       51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;;              50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 675 674 676 51 43 "" [1 uses])
(note 676 675 677 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 677 676 1156 51 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:214 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1156 677 1157 51 (set (pc)
        (label_ref 678)) fmtext_o.cpp:214 654 {jump}
     (nil)
 -> 678)
;;  succ:       48 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1157 1156 681)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 256 566 567 568 569
(code_label 681 1157 682 52 42 "" [1 uses])
(note 682 681 683 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 683 682 684 52 (set (reg:SI 567)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:221 90 {*movsi_internal}
     (nil))
(insn 684 683 685 52 (parallel [
            (set (reg:SI 566)
                (ashiftrt:SI (reg:SI 567)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:221 538 {ashrsi3_cvt}
     (expr_list:REG_DEAD (reg:SI 567)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashiftrt:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
                    (const_int 31 [0x1f]))
                (nil)))))
(insn 685 684 686 52 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
                (xor:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
                    (reg:SI 566)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:221 400 {*xorsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 686 685 687 52 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
                (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
                    (reg:SI 566)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:221 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 566)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 687 686 688 52 (set (reg:SI 568)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:222 90 {*movsi_internal}
     (nil))
(insn 688 687 689 52 (parallel [
            (set (reg:SI 256 [ D.6677 ])
                (ashift:SI (reg:SI 568)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:222 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 568)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 689 688 690 52 (set (reg/f:DI 569)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:222 89 {*movdi_internal}
     (nil))
(insn 690 689 691 52 (set (mem/j:SI (plus:DI (reg/f:DI 569)
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])
        (reg:SI 256 [ D.6677 ])) fmtext_o.cpp:222 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 569)
        (expr_list:REG_DEAD (reg:SI 256 [ D.6677 ])
            (nil))))
(insn 691 690 727 52 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:227 90 {*movsi_internal}
     (nil))
;;  succ:       53 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52 (FALLTHRU)
;;              57 [100.0%] 
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 257 570
(code_label 727 691 692 53 48 "" [1 uses])
(note 692 727 693 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 693 692 694 53 (set (reg/f:DI 570)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:227 89 {*movdi_internal}
     (nil))
(insn 694 693 695 53 (set (reg:SI 257 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 570)
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:227 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 570)
        (nil)))
(insn 695 694 696 53 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 257 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:227 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 257 [ D.6677 ])
        (nil)))
(jump_insn 696 695 697 53 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 730)
            (pc))) fmtext_o.cpp:227 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 730)
;;  succ:       58
;;              54 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 697 696 698 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 698 697 721 54 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:229 90 {*movsi_internal}
     (nil))
;;  succ:       55 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;;              56 [100.0%] 
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 258 571
(code_label 721 698 699 55 47 "" [1 uses])
(note 699 721 700 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 700 699 701 55 (set (reg/f:DI 571)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:229 89 {*movdi_internal}
     (nil))
(insn 701 700 702 55 (set (reg:SI 258 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 571)
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:229 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 571)
        (nil)))
(insn 702 701 703 55 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 258 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:229 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 258 [ D.6677 ])
        (nil)))
(jump_insn 703 702 704 55 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 724)
            (pc))) fmtext_o.cpp:229 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 724)
;;  succ:       57
;;              56 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55 (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 259 260 261 262 263 264 572 573 574 575 576 577
(note 704 703 705 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 705 704 706 56 (set (reg:SI 572)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:230 90 {*movsi_internal}
     (nil))
(insn 706 705 707 56 (set (reg:DI 259 [ D.6678 ])
        (sign_extend:DI (reg:SI 572))) fmtext_o.cpp:230 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 572)
        (nil)))
(insn 707 706 708 56 (parallel [
            (set (reg:DI 260 [ D.6678 ])
                (ashift:DI (reg:DI 259 [ D.6678 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:230 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 259 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 708 707 709 56 (set (reg/f:DI 573)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 709 708 710 56 (parallel [
            (set (reg/f:DI 261 [ D.6696 ])
                (plus:DI (reg:DI 260 [ D.6678 ])
                    (reg/f:DI 573)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:230 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 573)
        (expr_list:REG_DEAD (reg:DI 260 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
                        (reg:DI 260 [ D.6678 ]))
                    (nil))))))
(insn 710 709 711 56 (set (reg:SI 574)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:230 90 {*movsi_internal}
     (nil))
(insn 711 710 712 56 (set (reg:DI 262 [ D.6678 ])
        (sign_extend:DI (reg:SI 574))) fmtext_o.cpp:230 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 574)
        (nil)))
(insn 712 711 713 56 (parallel [
            (set (reg:DI 263 [ D.6678 ])
                (ashift:DI (reg:DI 262 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:230 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 262 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 713 712 714 56 (set (reg:DI 5 di)
        (reg:DI 263 [ D.6678 ])) fmtext_o.cpp:230 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 263 [ D.6678 ])
        (nil)))
(call_insn 714 713 715 56 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:230 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 715 714 716 56 (set (reg/f:DI 575)
        (reg:DI 0 ax)) fmtext_o.cpp:230 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 575)
            (nil))))
(insn 716 715 717 56 (set (reg/f:DI 264 [ D.6688 ])
        (reg/f:DI 575)) fmtext_o.cpp:230 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 575)
        (nil)))
(insn 717 716 718 56 (set (reg:SI 577)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:230 90 {*movsi_internal}
     (nil))
(insn 718 717 719 56 (set (reg:DI 576)
        (sign_extend:DI (reg:SI 577))) fmtext_o.cpp:230 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 577)
        (nil)))
(insn 719 718 720 56 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 576)
                    (const_int 8 [0x8]))
                (reg/f:DI 261 [ D.6696 ])) [0 *_294 S8 A64])
        (reg/f:DI 264 [ D.6688 ])) fmtext_o.cpp:230 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 576)
        (expr_list:REG_DEAD (reg/f:DI 264 [ D.6688 ])
            (expr_list:REG_DEAD (reg/f:DI 261 [ D.6696 ])
                (nil)))))
(insn 720 719 1158 56 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:229 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1158 720 1159 56 (set (pc)
        (label_ref 721)) fmtext_o.cpp:229 654 {jump}
     (nil)
 -> 721)
;;  succ:       55 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1159 1158 724)
;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 724 1159 725 57 46 "" [1 uses])
(note 725 724 726 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 726 725 1160 57 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:227 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1160 726 1161 57 (set (pc)
        (label_ref 727)) fmtext_o.cpp:227 654 {jump}
     (nil)
 -> 727)
;;  succ:       53 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1161 1160 730)
;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 730 1161 731 58 45 "" [1 uses])
(note 731 730 732 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 732 731 781 58 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:236 90 {*movsi_internal}
     (nil))
;;  succ:       59 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       58 (FALLTHRU)
;;              66 [100.0%] 
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 265 578
(code_label 781 732 733 59 54 "" [1 uses])
(note 733 781 734 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 734 733 735 59 (set (reg/f:DI 578)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:236 89 {*movdi_internal}
     (nil))
(insn 735 734 736 59 (set (reg:SI 265 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 578)
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:236 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 578)
        (nil)))
(insn 736 735 737 59 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 265 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:236 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 265 [ D.6677 ])
        (nil)))
(jump_insn 737 736 738 59 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 784)
            (pc))) fmtext_o.cpp:236 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 784)
;;  succ:       67
;;              60 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59 (FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 738 737 739 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 739 738 775 60 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:238 90 {*movsi_internal}
     (nil))
;;  succ:       61 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;;              65 [100.0%] 
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 266 579
(code_label 775 739 740 61 53 "" [1 uses])
(note 740 775 741 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 741 740 742 61 (set (reg/f:DI 579)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:238 89 {*movdi_internal}
     (nil))
(insn 742 741 743 61 (set (reg:SI 266 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 579)
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:238 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 579)
        (nil)))
(insn 743 742 744 61 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 266 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:238 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 266 [ D.6677 ])
        (nil)))
(jump_insn 744 743 745 61 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 778)
            (pc))) fmtext_o.cpp:238 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 778)
;;  succ:       66
;;              62 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61 (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 745 744 746 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 746 745 769 62 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:240 90 {*movsi_internal}
     (nil))
;;  succ:       63 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       62 (FALLTHRU)
;;              64 [100.0%] 
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 267 268 580
(code_label 769 746 747 63 52 "" [1 uses])
(note 747 769 748 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 748 747 749 63 (set (reg/f:DI 580)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 749 748 750 63 (set (reg/f:DI 267 [ D.6683 ])
        (mem/f:DI (reg/f:DI 580) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:240 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 580)
        (nil)))
(insn 750 749 751 63 (set (reg:SI 268 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 267 [ D.6683 ])
                (const_int 8 [0x8])) [0 _307->np.number+0 S4 A32])) fmtext_o.cpp:240 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 267 [ D.6683 ])
        (nil)))
(insn 751 750 752 63 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 268 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32]))) fmtext_o.cpp:240 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 268 [ D.6677 ])
        (nil)))
(jump_insn 752 751 753 63 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 772)
            (pc))) fmtext_o.cpp:240 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 772)
;;  succ:       65
;;              64 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 269 270 271 272 273 274 275 581 582 583 584 585 586
(note 753 752 754 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 754 753 755 64 (set (reg:SI 581)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 755 754 756 64 (set (reg:DI 269 [ D.6678 ])
        (sign_extend:DI (reg:SI 581))) fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 581)
        (nil)))
(insn 756 755 757 64 (parallel [
            (set (reg:DI 270 [ D.6678 ])
                (ashift:DI (reg:DI 269 [ D.6678 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 269 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 757 756 758 64 (set (reg/f:DI 582)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 758 757 759 64 (parallel [
            (set (reg/f:DI 271 [ D.6696 ])
                (plus:DI (reg:DI 270 [ D.6678 ])
                    (reg/f:DI 582)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 582)
        (expr_list:REG_DEAD (reg:DI 270 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
                        (reg:DI 270 [ D.6678 ]))
                    (nil))))))
(insn 759 758 760 64 (set (reg:SI 584)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 760 759 761 64 (set (reg:DI 583)
        (sign_extend:DI (reg:SI 584))) fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 584)
        (nil)))
(insn 761 760 762 64 (set (reg/f:DI 272 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 583)
                    (const_int 8 [0x8]))
                (reg/f:DI 271 [ D.6696 ])) [0 *_311 S8 A64])) fmtext_o.cpp:242 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 583)
        (expr_list:REG_DEAD (reg/f:DI 271 [ D.6696 ])
            (nil))))
(insn 762 761 763 64 (set (reg:SI 585)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 763 762 764 64 (set (reg:DI 273 [ D.6678 ])
        (sign_extend:DI (reg:SI 585))) fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 585)
        (nil)))
(insn 764 763 765 64 (parallel [
            (set (reg:DI 274 [ D.6678 ])
                (ashift:DI (reg:DI 273 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 273 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 765 764 766 64 (parallel [
            (set (reg/f:DI 275 [ D.6693 ])
                (plus:DI (reg/f:DI 272 [ D.6693 ])
                    (reg:DI 274 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 274 [ D.6678 ])
        (expr_list:REG_DEAD (reg/f:DI 272 [ D.6693 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 766 765 767 64 (set (reg:DI 586)
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80032 [0xfffffffffffec760])) [0 init_precision4+0 S8 A64])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 767 766 768 64 (set (mem:DI (reg/f:DI 275 [ D.6693 ]) [0 *_315+0 S8 A64])
        (reg:DI 586)) fmtext_o.cpp:242 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 586)
        (expr_list:REG_DEAD (reg/f:DI 275 [ D.6693 ])
            (nil))))
(insn 768 767 1162 64 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:240 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1162 768 1163 64 (set (pc)
        (label_ref 769)) fmtext_o.cpp:240 654 {jump}
     (nil)
 -> 769)
;;  succ:       63 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1163 1162 772)
;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 772 1163 773 65 51 "" [1 uses])
(note 773 772 774 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 774 773 1164 65 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:238 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1164 774 1165 65 (set (pc)
        (label_ref 775)) fmtext_o.cpp:238 654 {jump}
     (nil)
 -> 775)
;;  succ:       61 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1165 1164 778)
;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 778 1165 779 66 50 "" [1 uses])
(note 779 778 780 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 780 779 1166 66 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:236 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1166 780 1167 66 (set (pc)
        (label_ref 781)) fmtext_o.cpp:236 654 {jump}
     (nil)
 -> 781)
;;  succ:       59 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1167 1166 784)
;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 784 1167 785 67 49 "" [1 uses])
(note 785 784 786 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 786 785 926 67 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:249 90 {*movsi_internal}
     (nil))
;;  succ:       68 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 (FALLTHRU)
;;              75 [100.0%] 
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 276 277 587
(code_label 926 786 787 68 60 "" [1 uses])
(note 787 926 788 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 788 787 789 68 (set (reg/f:DI 587)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:249 89 {*movdi_internal}
     (nil))
(insn 789 788 790 68 (set (reg/f:DI 276 [ D.6683 ])
        (mem/f:DI (reg/f:DI 587) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:249 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 587)
        (nil)))
(insn 790 789 791 68 (set (reg:SI 277 [ D.6677 ])
        (mem/j:SI (reg/f:DI 276 [ D.6683 ]) [0 _321->nblocks.number+0 S4 A32])) fmtext_o.cpp:249 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 276 [ D.6683 ])
        (nil)))
(insn 791 790 792 68 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 277 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:249 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 277 [ D.6677 ])
        (nil)))
(jump_insn 792 791 793 68 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 929)
            (pc))) fmtext_o.cpp:249 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 929)
;;  succ:       76
;;              69 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 793 792 794 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 794 793 920 69 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:251 90 {*movsi_internal}
     (nil))
;;  succ:       70 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69 (FALLTHRU)
;;              74 [100.0%] 
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 278 279 588
(code_label 920 794 795 70 59 "" [1 uses])
(note 795 920 796 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 796 795 797 70 (set (reg/f:DI 588)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(insn 797 796 798 70 (set (reg/f:DI 278 [ D.6683 ])
        (mem/f:DI (reg/f:DI 588) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:251 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 588)
        (nil)))
(insn 798 797 799 70 (set (reg:SI 279 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 278 [ D.6683 ])
                (const_int 4 [0x4])) [0 _324->ntraces.number+0 S4 A32])) fmtext_o.cpp:251 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 278 [ D.6683 ])
        (nil)))
(insn 799 798 800 70 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 279 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:251 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 279 [ D.6677 ])
        (nil)))
(jump_insn 800 799 801 70 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 923)
            (pc))) fmtext_o.cpp:251 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 923)
;;  succ:       75
;;              71 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 801 800 802 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 802 801 914 71 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:253 90 {*movsi_internal}
     (nil))
;;  succ:       72 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71 (FALLTHRU)
;;              73 [100.0%] 
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 280 281 589
(code_label 914 802 803 72 58 "" [1 uses])
(note 803 914 804 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 804 803 805 72 (set (reg/f:DI 589)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 805 804 806 72 (set (reg/f:DI 280 [ D.6683 ])
        (mem/f:DI (reg/f:DI 589) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:253 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 589)
        (nil)))
(insn 806 805 807 72 (set (reg:SI 281 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 280 [ D.6683 ])
                (const_int 8 [0x8])) [0 _327->np.number+0 S4 A32])) fmtext_o.cpp:253 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 280 [ D.6683 ])
        (nil)))
(insn 807 806 808 72 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 281 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32]))) fmtext_o.cpp:253 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 281 [ D.6677 ])
        (nil)))
(jump_insn 808 807 809 72 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 917)
            (pc))) fmtext_o.cpp:253 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 917)
;;  succ:       74
;;              73 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639
(note 809 808 810 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 810 809 811 73 (set (reg:SI 591)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 811 810 812 73 (set (reg:DI 590)
        (sign_extend:DI (reg:SI 591))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 591)
        (nil)))
(insn 812 811 813 73 (set (reg:SI 593)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 813 812 814 73 (set (reg:DI 592)
        (sign_extend:DI (reg:SI 593))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 593)
        (nil)))
(insn 814 813 815 73 (set (reg:DI 594)
        (reg:DI 592)) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 815 814 816 73 (parallel [
            (set (reg:DI 594)
                (ashift:DI (reg:DI 594)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 816 815 817 73 (parallel [
            (set (reg:DI 594)
                (plus:DI (reg:DI 594)
                    (reg:DI 592)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 592)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 592)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 817 816 818 73 (parallel [
            (set (reg:DI 595)
                (ashift:DI (reg:DI 594)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 818 817 819 73 (parallel [
            (set (reg:DI 594)
                (plus:DI (reg:DI 594)
                    (reg:DI 595)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 595)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 819 818 820 73 (parallel [
            (set (reg:DI 596)
                (ashift:DI (reg:DI 594)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 594)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 820 819 821 73 (set (reg:DI 594)
        (reg:DI 596)) fmtext_o.cpp:256 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 596)
        (nil)))
(insn 821 820 822 73 (parallel [
            (set (reg:DI 597)
                (plus:DI (reg:DI 594)
                    (reg:DI 590)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 594)
        (expr_list:REG_DEAD (reg:DI 590)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 822 821 823 73 (set (reg:SI 282 [ D.6677 ])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 597)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -80016 [0xfffffffffffec770])) [0 pe_index[i_9][j_18].index_r+0 S4 A64])) fmtext_o.cpp:256 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 597)
        (nil)))
(insn 823 822 824 73 (set (reg:SI 598)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 824 823 825 73 (parallel [
            (set (reg:SI 283 [ D.6677 ])
                (plus:SI (reg:SI 282 [ D.6677 ])
                    (reg:SI 598)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 598)
        (expr_list:REG_DEAD (reg:SI 282 [ D.6677 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (reg:SI 282 [ D.6677 ])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32]))
                    (nil))))))
(insn 825 824 826 73 (set (reg:DI 284 [ D.6678 ])
        (sign_extend:DI (reg:SI 283 [ D.6677 ]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 283 [ D.6677 ])
        (nil)))
(insn 826 825 827 73 (parallel [
            (set (reg:DI 285 [ D.6678 ])
                (ashift:DI (reg:DI 284 [ D.6678 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 284 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 827 826 828 73 (set (reg/f:DI 599)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 828 827 829 73 (parallel [
            (set (reg/f:DI 286 [ D.6696 ])
                (plus:DI (reg:DI 285 [ D.6678 ])
                    (reg/f:DI 599)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 599)
        (expr_list:REG_DEAD (reg:DI 285 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
                        (reg:DI 285 [ D.6678 ]))
                    (nil))))))
(insn 829 828 830 73 (set (reg:SI 601)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 830 829 831 73 (set (reg:DI 600)
        (sign_extend:DI (reg:SI 601))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 601)
        (nil)))
(insn 831 830 832 73 (set (reg:SI 603)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 832 831 833 73 (set (reg:DI 602)
        (sign_extend:DI (reg:SI 603))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 603)
        (nil)))
(insn 833 832 834 73 (set (reg:DI 604)
        (reg:DI 602)) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 834 833 835 73 (parallel [
            (set (reg:DI 604)
                (ashift:DI (reg:DI 604)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 835 834 836 73 (parallel [
            (set (reg:DI 604)
                (plus:DI (reg:DI 604)
                    (reg:DI 602)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 602)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 602)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 836 835 837 73 (parallel [
            (set (reg:DI 605)
                (ashift:DI (reg:DI 604)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 837 836 838 73 (parallel [
            (set (reg:DI 604)
                (plus:DI (reg:DI 604)
                    (reg:DI 605)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 605)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 838 837 839 73 (parallel [
            (set (reg:DI 606)
                (ashift:DI (reg:DI 604)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 604)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 839 838 840 73 (set (reg:DI 604)
        (reg:DI 606)) fmtext_o.cpp:257 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 606)
        (nil)))
(insn 840 839 841 73 (parallel [
            (set (reg:DI 607)
                (plus:DI (reg:DI 604)
                    (reg:DI 600)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 604)
        (expr_list:REG_DEAD (reg:DI 600)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 841 840 842 73 (set (reg:SI 287 [ D.6677 ])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 607)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -80012 [0xfffffffffffec774])) [0 pe_index[i_9][j_18].index_c+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 607)
        (nil)))
(insn 842 841 843 73 (set (reg:SI 608)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 843 842 844 73 (parallel [
            (set (reg:SI 288 [ D.6677 ])
                (plus:SI (reg:SI 287 [ D.6677 ])
                    (reg:SI 608)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 608)
        (expr_list:REG_DEAD (reg:SI 287 [ D.6677 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (reg:SI 287 [ D.6677 ])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32]))
                    (nil))))))
(insn 844 843 845 73 (set (reg:DI 609)
        (sign_extend:DI (reg:SI 288 [ D.6677 ]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 288 [ D.6677 ])
        (nil)))
(insn 845 844 846 73 (set (reg/f:DI 289 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 609)
                    (const_int 8 [0x8]))
                (reg/f:DI 286 [ D.6696 ])) [0 *_333 S8 A64])) fmtext_o.cpp:257 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 609)
        (expr_list:REG_DEAD (reg/f:DI 286 [ D.6696 ])
            (nil))))
(insn 846 845 847 73 (set (reg:SI 610)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 847 846 848 73 (set (reg:DI 290 [ D.6678 ])
        (sign_extend:DI (reg:SI 610))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 610)
        (nil)))
(insn 848 847 849 73 (parallel [
            (set (reg:DI 291 [ D.6678 ])
                (ashift:DI (reg:DI 290 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 290 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 849 848 850 73 (parallel [
            (set (reg/f:DI 292 [ D.6693 ])
                (plus:DI (reg/f:DI 289 [ D.6693 ])
                    (reg:DI 291 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 291 [ D.6678 ])
        (expr_list:REG_DEAD (reg/f:DI 289 [ D.6693 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 850 849 851 73 (set (reg:SI 612)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 851 850 852 73 (set (reg:DI 611)
        (sign_extend:DI (reg:SI 612))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 612)
        (nil)))
(insn 852 851 853 73 (set (reg:SI 614)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 853 852 854 73 (set (reg:DI 613)
        (sign_extend:DI (reg:SI 614))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 614)
        (nil)))
(insn 854 853 855 73 (set (reg:DI 615)
        (reg:DI 613)) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 855 854 856 73 (parallel [
            (set (reg:DI 615)
                (ashift:DI (reg:DI 615)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 856 855 857 73 (parallel [
            (set (reg:DI 615)
                (plus:DI (reg:DI 615)
                    (reg:DI 613)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 613)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 613)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 857 856 858 73 (parallel [
            (set (reg:DI 616)
                (ashift:DI (reg:DI 615)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 858 857 859 73 (parallel [
            (set (reg:DI 615)
                (plus:DI (reg:DI 615)
                    (reg:DI 616)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 616)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 859 858 860 73 (parallel [
            (set (reg:DI 617)
                (ashift:DI (reg:DI 615)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 615)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 860 859 861 73 (set (reg:DI 615)
        (reg:DI 617)) fmtext_o.cpp:256 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 617)
        (nil)))
(insn 861 860 862 73 (parallel [
            (set (reg:DI 618)
                (plus:DI (reg:DI 615)
                    (reg:DI 611)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 615)
        (expr_list:REG_DEAD (reg:DI 611)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 862 861 863 73 (set (reg:SI 293 [ D.6677 ])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 618)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -80016 [0xfffffffffffec770])) [0 pe_index[i_9][j_18].index_r+0 S4 A64])) fmtext_o.cpp:256 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 618)
        (nil)))
(insn 863 862 864 73 (set (reg:SI 619)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 864 863 865 73 (parallel [
            (set (reg:SI 294 [ D.6677 ])
                (plus:SI (reg:SI 293 [ D.6677 ])
                    (reg:SI 619)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 619)
        (expr_list:REG_DEAD (reg:SI 293 [ D.6677 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (reg:SI 293 [ D.6677 ])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32]))
                    (nil))))))
(insn 865 864 866 73 (set (reg:DI 295 [ D.6678 ])
        (sign_extend:DI (reg:SI 294 [ D.6677 ]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 294 [ D.6677 ])
        (nil)))
(insn 866 865 867 73 (parallel [
            (set (reg:DI 296 [ D.6678 ])
                (ashift:DI (reg:DI 295 [ D.6678 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 295 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 867 866 868 73 (set (reg/f:DI 620)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 868 867 869 73 (parallel [
            (set (reg/f:DI 297 [ D.6696 ])
                (plus:DI (reg:DI 296 [ D.6678 ])
                    (reg/f:DI 620)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 620)
        (expr_list:REG_DEAD (reg:DI 296 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
                        (reg:DI 296 [ D.6678 ]))
                    (nil))))))
(insn 869 868 870 73 (set (reg:SI 622)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 870 869 871 73 (set (reg:DI 621)
        (sign_extend:DI (reg:SI 622))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 622)
        (nil)))
(insn 871 870 872 73 (set (reg:SI 624)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 872 871 873 73 (set (reg:DI 623)
        (sign_extend:DI (reg:SI 624))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 624)
        (nil)))
(insn 873 872 874 73 (set (reg:DI 625)
        (reg:DI 623)) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 874 873 875 73 (parallel [
            (set (reg:DI 625)
                (ashift:DI (reg:DI 625)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 875 874 876 73 (parallel [
            (set (reg:DI 625)
                (plus:DI (reg:DI 625)
                    (reg:DI 623)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 623)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 623)
                    (const_int 5 [0x5]))
                (nil)))))
(insn 876 875 877 73 (parallel [
            (set (reg:DI 626)
                (ashift:DI (reg:DI 625)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 877 876 878 73 (parallel [
            (set (reg:DI 625)
                (plus:DI (reg:DI 625)
                    (reg:DI 626)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 626)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 878 877 879 73 (parallel [
            (set (reg:DI 627)
                (ashift:DI (reg:DI 625)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 625)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 879 878 880 73 (set (reg:DI 625)
        (reg:DI 627)) fmtext_o.cpp:257 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 627)
        (nil)))
(insn 880 879 881 73 (parallel [
            (set (reg:DI 628)
                (plus:DI (reg:DI 625)
                    (reg:DI 621)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 625)
        (expr_list:REG_DEAD (reg:DI 621)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 881 880 882 73 (set (reg:SI 298 [ D.6677 ])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 628)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -80012 [0xfffffffffffec774])) [0 pe_index[i_9][j_18].index_c+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 628)
        (nil)))
(insn 882 881 883 73 (set (reg:SI 629)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 883 882 884 73 (parallel [
            (set (reg:SI 299 [ D.6677 ])
                (plus:SI (reg:SI 298 [ D.6677 ])
                    (reg:SI 629)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 629)
        (expr_list:REG_DEAD (reg:SI 298 [ D.6677 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (reg:SI 298 [ D.6677 ])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32]))
                    (nil))))))
(insn 884 883 885 73 (set (reg:DI 630)
        (sign_extend:DI (reg:SI 299 [ D.6677 ]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 299 [ D.6677 ])
        (nil)))
(insn 885 884 886 73 (set (reg/f:DI 300 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 630)
                    (const_int 8 [0x8]))
                (reg/f:DI 297 [ D.6696 ])) [0 *_344 S8 A64])) fmtext_o.cpp:257 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 630)
        (expr_list:REG_DEAD (reg/f:DI 297 [ D.6696 ])
            (nil))))
(insn 886 885 887 73 (set (reg:SI 631)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 887 886 888 73 (set (reg:DI 301 [ D.6678 ])
        (sign_extend:DI (reg:SI 631))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 631)
        (nil)))
(insn 888 887 889 73 (parallel [
            (set (reg:DI 302 [ D.6678 ])
                (ashift:DI (reg:DI 301 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 301 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 889 888 890 73 (parallel [
            (set (reg/f:DI 303 [ D.6693 ])
                (plus:DI (reg/f:DI 300 [ D.6693 ])
                    (reg:DI 302 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 302 [ D.6678 ])
        (expr_list:REG_DEAD (reg/f:DI 300 [ D.6693 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 890 889 891 73 (set (reg:DI 304 [ D.6697 ])
        (mem/j:DI (reg/f:DI 303 [ D.6693 ]) [0 _350->lo+0 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 303 [ D.6693 ])
        (nil)))
(insn 891 890 892 73 (set (reg:SI 632)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 892 891 893 73 (set (reg:DI 305 [ D.6678 ])
        (sign_extend:DI (reg:SI 632))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 632)
        (nil)))
(insn 893 892 894 73 (set (reg:DI 633)
        (reg:DI 305 [ D.6678 ])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 894 893 895 73 (parallel [
            (set (reg:DI 633)
                (ashift:DI (reg:DI 633)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 895 894 896 73 (parallel [
            (set (reg:DI 633)
                (plus:DI (reg:DI 633)
                    (reg:DI 305 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 305 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 305 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 896 895 897 73 (parallel [
            (set (reg:DI 634)
                (ashift:DI (reg:DI 633)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 897 896 898 73 (parallel [
            (set (reg:DI 633)
                (plus:DI (reg:DI 633)
                    (reg:DI 634)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 634)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 898 897 899 73 (parallel [
            (set (reg:DI 635)
                (ashift:DI (reg:DI 633)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 633)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 899 898 900 73 (set (reg:DI 633)
        (reg:DI 635)) fmtext_o.cpp:258 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 635)
        (nil)))
(insn 900 899 901 73 (set (reg:DI 306 [ D.6678 ])
        (reg:DI 633)) fmtext_o.cpp:258 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 633)
        (nil)))
(insn 901 900 902 73 (set (reg/f:DI 636)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 902 901 903 73 (parallel [
            (set (reg/f:DI 307 [ D.6689 ])
                (plus:DI (reg:DI 306 [ D.6678 ])
                    (reg/f:DI 636)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 636)
        (expr_list:REG_DEAD (reg:DI 306 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 306 [ D.6678 ]))
                    (nil))))))
(insn 903 902 904 73 (set (reg:SI 638)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 904 903 905 73 (set (reg:DI 637)
        (sign_extend:DI (reg:SI 638))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 638)
        (nil)))
(insn 905 904 906 73 (set (reg/f:DI 308 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 637)
                    (const_int 8 [0x8]))
                (reg/f:DI 307 [ D.6689 ])) [0 *_354 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 637)
        (expr_list:REG_DEAD (reg/f:DI 307 [ D.6689 ])
            (nil))))
(insn 906 905 907 73 (set (reg:SI 639)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 907 906 908 73 (set (reg:DI 309 [ D.6678 ])
        (sign_extend:DI (reg:SI 639))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 639)
        (nil)))
(insn 908 907 909 73 (parallel [
            (set (reg:DI 310 [ D.6678 ])
                (ashift:DI (reg:DI 309 [ D.6678 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 309 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 909 908 910 73 (parallel [
            (set (reg/f:DI 311 [ D.6693 ])
                (plus:DI (reg/f:DI 308 [ D.6693 ])
                    (reg:DI 310 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 310 [ D.6678 ])
        (expr_list:REG_DEAD (reg/f:DI 308 [ D.6693 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 910 909 911 73 (set (reg:DI 312 [ D.6697 ])
        (mem/j:DI (reg/f:DI 311 [ D.6693 ]) [0 _358->lo+0 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 311 [ D.6693 ])
        (nil)))
(insn 911 910 912 73 (parallel [
            (set (reg:DI 313 [ D.6697 ])
                (plus:DI (reg:DI 304 [ D.6697 ])
                    (reg:DI 312 [ D.6697 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 312 [ D.6697 ])
        (expr_list:REG_DEAD (reg:DI 304 [ D.6697 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 912 911 913 73 (set (mem/j:DI (reg/f:DI 292 [ D.6693 ]) [0 _339->lo+0 S8 A64])
        (reg:DI 313 [ D.6697 ])) fmtext_o.cpp:258 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 313 [ D.6697 ])
        (expr_list:REG_DEAD (reg/f:DI 292 [ D.6693 ])
            (nil))))
(insn 913 912 1168 73 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:253 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1168 913 1169 73 (set (pc)
        (label_ref 914)) fmtext_o.cpp:253 654 {jump}
     (nil)
 -> 914)
;;  succ:       72 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1169 1168 917)
;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 917 1169 918 74 57 "" [1 uses])
(note 918 917 919 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 919 918 1170 74 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:251 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1170 919 1171 74 (set (pc)
        (label_ref 920)) fmtext_o.cpp:251 654 {jump}
     (nil)
 -> 920)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1171 1170 923)
;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 923 1171 924 75 56 "" [1 uses])
(note 924 923 925 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 925 924 1172 75 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:249 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1172 925 1173 75 (set (pc)
        (label_ref 926)) fmtext_o.cpp:249 654 {jump}
     (nil)
 -> 926)
;;  succ:       68 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1173 1172 929)
;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 929 1173 930 76 55 "" [1 uses])
(note 930 929 931 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 931 930 1093 76 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
;;  succ:       77 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 (FALLTHRU)
;;              84 [100.0%] 
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 314 640
(code_label 1093 931 932 77 65 "" [1 uses])
(note 932 1093 933 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 933 932 934 77 (set (reg/f:DI 640)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:265 89 {*movdi_internal}
     (nil))
(insn 934 933 935 77 (set (reg:SI 314 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 640)
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:265 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 640)
        (nil)))
(insn 935 934 936 77 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 314 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:265 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 314 [ D.6677 ])
        (nil)))
(jump_insn 936 935 937 77 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1096)
            (pc))) fmtext_o.cpp:265 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 1096)
;;  succ:       85
;;              78 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       77 (FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 937 936 938 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 938 937 1087 78 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:267 90 {*movsi_internal}
     (nil))
;;  succ:       79 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;;              83 [100.0%] 
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 315 641
(code_label 1087 938 939 79 64 "" [1 uses])
(note 939 1087 940 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 940 939 941 79 (set (reg/f:DI 641)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:267 89 {*movdi_internal}
     (nil))
(insn 941 940 942 79 (set (reg:SI 315 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 641)
                (const_int 8 [0x8])) [0 pe_info_273(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:267 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 641)
        (nil)))
(insn 942 941 943 79 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 315 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:267 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 315 [ D.6677 ])
        (nil)))
(jump_insn 943 942 944 79 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1090)
            (pc))) fmtext_o.cpp:267 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 1090)
;;  succ:       84
;;              80 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79 (FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 944 943 945 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 945 944 1081 80 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
;;  succ:       81 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 (FALLTHRU)
;;              82 [100.0%] 
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 316 317 318 319 320 321 322 642
(code_label 1081 945 946 81 63 "" [1 uses])
(note 946 1081 947 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 947 946 948 81 (set (reg/f:DI 642)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 948 947 949 81 (set (reg/f:DI 316 [ D.6683 ])
        (mem/f:DI (reg/f:DI 642) [0 *main_header_84(D)+0 S8 A64])) fmtext_o.cpp:269 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 642)
        (nil)))
(insn 949 948 950 81 (set (reg:SI 317 [ D.6677 ])
        (mem/j:SI (plus:DI (reg/f:DI 316 [ D.6683 ])
                (const_int 8 [0x8])) [0 _370->np.number+0 S4 A32])) fmtext_o.cpp:269 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 316 [ D.6683 ])
        (nil)))
(insn 950 949 951 81 (set (reg:DI 318 [ D.6678 ])
        (sign_extend:DI (reg:SI 317 [ D.6677 ]))) fmtext_o.cpp:269 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 317 [ D.6677 ])
        (nil)))
(insn 951 950 952 81 (set (reg:SI 319 [ D.6692 ])
        (subreg:SI (reg:DI 318 [ D.6678 ]) 0)) fmtext_o.cpp:269 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 318 [ D.6678 ])
        (nil)))
(insn 952 951 953 81 (set (reg:SI 320 [ D.6692 ])
        (const_int 8 [0x8])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 953 952 954 81 (parallel [
            (set (reg:SI 321 [ D.6692 ])
                (mult:SI (reg:SI 319 [ D.6692 ])
                    (reg:SI 320 [ D.6692 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:269 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 320 [ D.6692 ])
        (expr_list:REG_DEAD (reg:SI 319 [ D.6692 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 954 953 955 81 (set (reg:SI 322 [ D.6677 ])
        (reg:SI 321 [ D.6692 ])) fmtext_o.cpp:269 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 321 [ D.6692 ])
        (nil)))
(insn 955 954 956 81 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 322 [ D.6677 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32]))) fmtext_o.cpp:269 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 322 [ D.6677 ])
        (nil)))
(jump_insn 956 955 957 81 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1084)
            (pc))) fmtext_o.cpp:269 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 1084)
;;  succ:       83
;;              82 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81 (FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702
(note 957 956 958 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 958 957 959 82 (set (reg:SI 643)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 959 958 960 82 (set (reg:DI 323 [ D.6678 ])
        (sign_extend:DI (reg:SI 643))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 643)
        (nil)))
(insn 960 959 961 82 (set (reg:DI 644)
        (reg:DI 323 [ D.6678 ])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 961 960 962 82 (parallel [
            (set (reg:DI 644)
                (ashift:DI (reg:DI 644)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 962 961 963 82 (parallel [
            (set (reg:DI 644)
                (plus:DI (reg:DI 644)
                    (reg:DI 323 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 323 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 323 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 963 962 964 82 (parallel [
            (set (reg:DI 645)
                (ashift:DI (reg:DI 644)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 964 963 965 82 (parallel [
            (set (reg:DI 644)
                (plus:DI (reg:DI 644)
                    (reg:DI 645)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 645)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 965 964 966 82 (parallel [
            (set (reg:DI 646)
                (ashift:DI (reg:DI 644)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 644)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 966 965 967 82 (set (reg:DI 644)
        (reg:DI 646)) fmtext_o.cpp:271 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 646)
        (nil)))
(insn 967 966 968 82 (set (reg:DI 324 [ D.6678 ])
        (reg:DI 644)) fmtext_o.cpp:271 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 644)
        (nil)))
(insn 968 967 969 82 (set (reg/f:DI 647)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 969 968 970 82 (parallel [
            (set (reg/f:DI 325 [ D.6689 ])
                (plus:DI (reg:DI 324 [ D.6678 ])
                    (reg/f:DI 647)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 647)
        (expr_list:REG_DEAD (reg:DI 324 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 324 [ D.6678 ]))
                    (nil))))))
(insn 970 969 971 82 (set (reg:SI 649)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 971 970 972 82 (set (reg:DI 648)
        (sign_extend:DI (reg:SI 649))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 649)
        (nil)))
(insn 972 971 973 82 (set (reg/f:DI 326 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 648)
                    (const_int 8 [0x8]))
                (reg/f:DI 325 [ D.6689 ])) [0 *_379 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 648)
        (expr_list:REG_DEAD (reg/f:DI 325 [ D.6689 ])
            (nil))))
(insn 973 972 974 82 (set (reg:SI 650)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 974 973 975 82 (set (reg:DI 327 [ D.6678 ])
        (sign_extend:DI (reg:SI 650))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 650)
        (nil)))
(insn 975 974 976 82 (parallel [
            (set (reg:DI 328 [ D.6678 ])
                (ashift:DI (reg:DI 327 [ D.6678 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 327 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 976 975 977 82 (set (reg/f:DI 651)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 977 976 978 82 (parallel [
            (set (reg/f:DI 329 [ D.6696 ])
                (plus:DI (reg:DI 328 [ D.6678 ])
                    (reg/f:DI 651)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 651)
        (expr_list:REG_DEAD (reg:DI 328 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
                        (reg:DI 328 [ D.6678 ]))
                    (nil))))))
(insn 978 977 979 82 (set (reg:SI 653)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 979 978 980 82 (set (reg:DI 652)
        (sign_extend:DI (reg:SI 653))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 653)
        (nil)))
(insn 980 979 981 82 (set (reg/f:DI 330 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 652)
                    (const_int 8 [0x8]))
                (reg/f:DI 329 [ D.6696 ])) [0 *_383 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 652)
        (expr_list:REG_DEAD (reg/f:DI 329 [ D.6696 ])
            (nil))))
(insn 981 980 982 82 (set (reg:SI 655)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 982 981 983 82 (set (reg:DI 654)
        (sign_extend:DI (reg:SI 655))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 655)
        (nil)))
(insn 983 982 984 82 (set (reg:QI 331 [ D.6694 ])
        (mem/j:QI (plus:DI (reg/f:DI 330 [ D.6693 ])
                (reg:DI 654)) [0 _384->character S1 A8])) fmtext_o.cpp:271 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 654)
        (expr_list:REG_DEAD (reg/f:DI 330 [ D.6693 ])
            (nil))))
(insn 984 983 985 82 (set (reg:SI 657)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 985 984 986 82 (set (reg:DI 656)
        (sign_extend:DI (reg:SI 657))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 657)
        (nil)))
(insn 986 985 987 82 (set (mem/j:QI (plus:DI (reg/f:DI 326 [ D.6693 ])
                (reg:DI 656)) [0 _380->character S1 A8])
        (reg:QI 331 [ D.6694 ])) fmtext_o.cpp:271 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 656)
        (expr_list:REG_DEAD (reg:QI 331 [ D.6694 ])
            (expr_list:REG_DEAD (reg/f:DI 326 [ D.6693 ])
                (nil)))))
(insn 987 986 988 82 (set (reg:SI 658)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 988 987 989 82 (set (reg:DI 332 [ D.6678 ])
        (sign_extend:DI (reg:SI 658))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 658)
        (nil)))
(insn 989 988 990 82 (set (reg:DI 659)
        (reg:DI 332 [ D.6678 ])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 990 989 991 82 (parallel [
            (set (reg:DI 659)
                (ashift:DI (reg:DI 659)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 991 990 992 82 (parallel [
            (set (reg:DI 659)
                (plus:DI (reg:DI 659)
                    (reg:DI 332 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 332 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 332 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 992 991 993 82 (parallel [
            (set (reg:DI 660)
                (ashift:DI (reg:DI 659)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 993 992 994 82 (parallel [
            (set (reg:DI 659)
                (plus:DI (reg:DI 659)
                    (reg:DI 660)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 660)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 994 993 995 82 (parallel [
            (set (reg:DI 661)
                (ashift:DI (reg:DI 659)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 659)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 995 994 996 82 (set (reg:DI 659)
        (reg:DI 661)) fmtext_o.cpp:272 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 661)
        (nil)))
(insn 996 995 997 82 (set (reg:DI 333 [ D.6678 ])
        (reg:DI 659)) fmtext_o.cpp:272 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 659)
        (nil)))
(insn 997 996 998 82 (set (reg/f:DI 662)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 998 997 999 82 (parallel [
            (set (reg/f:DI 334 [ D.6689 ])
                (plus:DI (reg:DI 333 [ D.6678 ])
                    (reg/f:DI 662)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 662)
        (expr_list:REG_DEAD (reg:DI 333 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 333 [ D.6678 ]))
                    (nil))))))
(insn 999 998 1000 82 (set (reg:SI 664)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 1000 999 1001 82 (set (reg:DI 663)
        (sign_extend:DI (reg:SI 664))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 664)
        (nil)))
(insn 1001 1000 1002 82 (set (reg/f:DI 335 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 663)
                    (const_int 8 [0x8]))
                (reg/f:DI 334 [ D.6689 ])) [0 *_389 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 663)
        (expr_list:REG_DEAD (reg/f:DI 334 [ D.6689 ])
            (nil))))
(insn 1002 1001 1003 82 (set (reg:SI 665)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 1003 1002 1004 82 (parallel [
            (set (reg:SI 336 [ D.6677 ])
                (plus:SI (reg:SI 665)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 665)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 1004 1003 1005 82 (set (reg:SI 666)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 1005 1004 1006 82 (set (reg:DI 337 [ D.6678 ])
        (sign_extend:DI (reg:SI 666))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 666)
        (nil)))
(insn 1006 1005 1007 82 (parallel [
            (set (reg:DI 338 [ D.6678 ])
                (ashift:DI (reg:DI 337 [ D.6678 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 337 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1007 1006 1008 82 (set (reg/f:DI 667)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 1008 1007 1009 82 (parallel [
            (set (reg/f:DI 339 [ D.6696 ])
                (plus:DI (reg:DI 338 [ D.6678 ])
                    (reg/f:DI 667)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 667)
        (expr_list:REG_DEAD (reg:DI 338 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
                        (reg:DI 338 [ D.6678 ]))
                    (nil))))))
(insn 1009 1008 1010 82 (set (reg:SI 669)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 1010 1009 1011 82 (set (reg:DI 668)
        (sign_extend:DI (reg:SI 669))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 669)
        (nil)))
(insn 1011 1010 1012 82 (set (reg/f:DI 340 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 668)
                    (const_int 8 [0x8]))
                (reg/f:DI 339 [ D.6696 ])) [0 *_394 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 668)
        (expr_list:REG_DEAD (reg/f:DI 339 [ D.6696 ])
            (nil))))
(insn 1012 1011 1013 82 (set (reg:SI 670)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 1013 1012 1014 82 (parallel [
            (set (reg:SI 341 [ D.6677 ])
                (plus:SI (reg:SI 670)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 670)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 1014 1013 1015 82 (set (reg:DI 671)
        (sign_extend:DI (reg:SI 341 [ D.6677 ]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 341 [ D.6677 ])
        (nil)))
(insn 1015 1014 1016 82 (set (reg:QI 342 [ D.6694 ])
        (mem/j:QI (plus:DI (reg/f:DI 340 [ D.6693 ])
                (reg:DI 671)) [0 _395->character S1 A8])) fmtext_o.cpp:272 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 671)
        (expr_list:REG_DEAD (reg/f:DI 340 [ D.6693 ])
            (nil))))
(insn 1016 1015 1017 82 (set (reg:DI 672)
        (sign_extend:DI (reg:SI 336 [ D.6677 ]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 336 [ D.6677 ])
        (nil)))
(insn 1017 1016 1018 82 (set (mem/j:QI (plus:DI (reg/f:DI 335 [ D.6693 ])
                (reg:DI 672)) [0 _390->character S1 A8])
        (reg:QI 342 [ D.6694 ])) fmtext_o.cpp:272 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 672)
        (expr_list:REG_DEAD (reg:QI 342 [ D.6694 ])
            (expr_list:REG_DEAD (reg/f:DI 335 [ D.6693 ])
                (nil)))))
(insn 1018 1017 1019 82 (set (reg:SI 673)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1019 1018 1020 82 (set (reg:DI 343 [ D.6678 ])
        (sign_extend:DI (reg:SI 673))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 673)
        (nil)))
(insn 1020 1019 1021 82 (set (reg:DI 674)
        (reg:DI 343 [ D.6678 ])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1021 1020 1022 82 (parallel [
            (set (reg:DI 674)
                (ashift:DI (reg:DI 674)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1022 1021 1023 82 (parallel [
            (set (reg:DI 674)
                (plus:DI (reg:DI 674)
                    (reg:DI 343 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 343 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 343 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 1023 1022 1024 82 (parallel [
            (set (reg:DI 675)
                (ashift:DI (reg:DI 674)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1024 1023 1025 82 (parallel [
            (set (reg:DI 674)
                (plus:DI (reg:DI 674)
                    (reg:DI 675)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 675)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1025 1024 1026 82 (parallel [
            (set (reg:DI 676)
                (ashift:DI (reg:DI 674)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 674)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1026 1025 1027 82 (set (reg:DI 674)
        (reg:DI 676)) fmtext_o.cpp:273 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 676)
        (nil)))
(insn 1027 1026 1028 82 (set (reg:DI 344 [ D.6678 ])
        (reg:DI 674)) fmtext_o.cpp:273 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 674)
        (nil)))
(insn 1028 1027 1029 82 (set (reg/f:DI 677)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1029 1028 1030 82 (parallel [
            (set (reg/f:DI 345 [ D.6689 ])
                (plus:DI (reg:DI 344 [ D.6678 ])
                    (reg/f:DI 677)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 677)
        (expr_list:REG_DEAD (reg:DI 344 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 344 [ D.6678 ]))
                    (nil))))))
(insn 1030 1029 1031 82 (set (reg:SI 679)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1031 1030 1032 82 (set (reg:DI 678)
        (sign_extend:DI (reg:SI 679))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 679)
        (nil)))
(insn 1032 1031 1033 82 (set (reg/f:DI 346 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 678)
                    (const_int 8 [0x8]))
                (reg/f:DI 345 [ D.6689 ])) [0 *_401 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 678)
        (expr_list:REG_DEAD (reg/f:DI 345 [ D.6689 ])
            (nil))))
(insn 1033 1032 1034 82 (set (reg:SI 680)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1034 1033 1035 82 (parallel [
            (set (reg:SI 347 [ D.6677 ])
                (plus:SI (reg:SI 680)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 680)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 2 [0x2]))
                (nil)))))
(insn 1035 1034 1036 82 (set (reg:SI 681)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1036 1035 1037 82 (set (reg:DI 348 [ D.6678 ])
        (sign_extend:DI (reg:SI 681))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 681)
        (nil)))
(insn 1037 1036 1038 82 (parallel [
            (set (reg:DI 349 [ D.6678 ])
                (ashift:DI (reg:DI 348 [ D.6678 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 348 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1038 1037 1039 82 (set (reg/f:DI 682)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1039 1038 1040 82 (parallel [
            (set (reg/f:DI 350 [ D.6696 ])
                (plus:DI (reg:DI 349 [ D.6678 ])
                    (reg/f:DI 682)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 682)
        (expr_list:REG_DEAD (reg:DI 349 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
                        (reg:DI 349 [ D.6678 ]))
                    (nil))))))
(insn 1040 1039 1041 82 (set (reg:SI 684)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1041 1040 1042 82 (set (reg:DI 683)
        (sign_extend:DI (reg:SI 684))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 684)
        (nil)))
(insn 1042 1041 1043 82 (set (reg/f:DI 351 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 683)
                    (const_int 8 [0x8]))
                (reg/f:DI 350 [ D.6696 ])) [0 *_406 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 683)
        (expr_list:REG_DEAD (reg/f:DI 350 [ D.6696 ])
            (nil))))
(insn 1043 1042 1044 82 (set (reg:SI 685)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1044 1043 1045 82 (parallel [
            (set (reg:SI 352 [ D.6677 ])
                (plus:SI (reg:SI 685)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 685)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 2 [0x2]))
                (nil)))))
(insn 1045 1044 1046 82 (set (reg:DI 686)
        (sign_extend:DI (reg:SI 352 [ D.6677 ]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 352 [ D.6677 ])
        (nil)))
(insn 1046 1045 1047 82 (set (reg:QI 353 [ D.6694 ])
        (mem/j:QI (plus:DI (reg/f:DI 351 [ D.6693 ])
                (reg:DI 686)) [0 _407->character S1 A8])) fmtext_o.cpp:273 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 686)
        (expr_list:REG_DEAD (reg/f:DI 351 [ D.6693 ])
            (nil))))
(insn 1047 1046 1048 82 (set (reg:DI 687)
        (sign_extend:DI (reg:SI 347 [ D.6677 ]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 347 [ D.6677 ])
        (nil)))
(insn 1048 1047 1049 82 (set (mem/j:QI (plus:DI (reg/f:DI 346 [ D.6693 ])
                (reg:DI 687)) [0 _402->character S1 A8])
        (reg:QI 353 [ D.6694 ])) fmtext_o.cpp:273 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 687)
        (expr_list:REG_DEAD (reg:QI 353 [ D.6694 ])
            (expr_list:REG_DEAD (reg/f:DI 346 [ D.6693 ])
                (nil)))))
(insn 1049 1048 1050 82 (set (reg:SI 688)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1050 1049 1051 82 (set (reg:DI 354 [ D.6678 ])
        (sign_extend:DI (reg:SI 688))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 688)
        (nil)))
(insn 1051 1050 1052 82 (set (reg:DI 689)
        (reg:DI 354 [ D.6678 ])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1052 1051 1053 82 (parallel [
            (set (reg:DI 689)
                (ashift:DI (reg:DI 689)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1053 1052 1054 82 (parallel [
            (set (reg:DI 689)
                (plus:DI (reg:DI 689)
                    (reg:DI 354 [ D.6678 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 354 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 354 [ D.6678 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 1054 1053 1055 82 (parallel [
            (set (reg:DI 690)
                (ashift:DI (reg:DI 689)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1055 1054 1056 82 (parallel [
            (set (reg:DI 689)
                (plus:DI (reg:DI 689)
                    (reg:DI 690)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 690)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1056 1055 1057 82 (parallel [
            (set (reg:DI 691)
                (ashift:DI (reg:DI 689)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 689)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1057 1056 1058 82 (set (reg:DI 689)
        (reg:DI 691)) fmtext_o.cpp:274 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 691)
        (nil)))
(insn 1058 1057 1059 82 (set (reg:DI 355 [ D.6678 ])
        (reg:DI 689)) fmtext_o.cpp:274 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 689)
        (nil)))
(insn 1059 1058 1060 82 (set (reg/f:DI 692)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1060 1059 1061 82 (parallel [
            (set (reg/f:DI 356 [ D.6689 ])
                (plus:DI (reg:DI 355 [ D.6678 ])
                    (reg/f:DI 692)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 692)
        (expr_list:REG_DEAD (reg:DI 355 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
                        (reg:DI 355 [ D.6678 ]))
                    (nil))))))
(insn 1061 1060 1062 82 (set (reg:SI 694)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1062 1061 1063 82 (set (reg:DI 693)
        (sign_extend:DI (reg:SI 694))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 694)
        (nil)))
(insn 1063 1062 1064 82 (set (reg/f:DI 357 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 693)
                    (const_int 8 [0x8]))
                (reg/f:DI 356 [ D.6689 ])) [0 *_413 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 693)
        (expr_list:REG_DEAD (reg/f:DI 356 [ D.6689 ])
            (nil))))
(insn 1064 1063 1065 82 (set (reg:SI 695)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1065 1064 1066 82 (parallel [
            (set (reg:SI 358 [ D.6677 ])
                (plus:SI (reg:SI 695)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 695)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 1066 1065 1067 82 (set (reg:SI 696)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1067 1066 1068 82 (set (reg:DI 359 [ D.6678 ])
        (sign_extend:DI (reg:SI 696))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 696)
        (nil)))
(insn 1068 1067 1069 82 (parallel [
            (set (reg:DI 360 [ D.6678 ])
                (ashift:DI (reg:DI 359 [ D.6678 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 359 [ D.6678 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1069 1068 1070 82 (set (reg/f:DI 697)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1070 1069 1071 82 (parallel [
            (set (reg/f:DI 361 [ D.6696 ])
                (plus:DI (reg:DI 360 [ D.6678 ])
                    (reg/f:DI 697)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 697)
        (expr_list:REG_DEAD (reg:DI 360 [ D.6678 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
                        (reg:DI 360 [ D.6678 ]))
                    (nil))))))
(insn 1071 1070 1072 82 (set (reg:SI 699)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1072 1071 1073 82 (set (reg:DI 698)
        (sign_extend:DI (reg:SI 699))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 699)
        (nil)))
(insn 1073 1072 1074 82 (set (reg/f:DI 362 [ D.6693 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 698)
                    (const_int 8 [0x8]))
                (reg/f:DI 361 [ D.6696 ])) [0 *_418 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 698)
        (expr_list:REG_DEAD (reg/f:DI 361 [ D.6696 ])
            (nil))))
(insn 1074 1073 1075 82 (set (reg:SI 700)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1075 1074 1076 82 (parallel [
            (set (reg:SI 363 [ D.6677 ])
                (plus:SI (reg:SI 700)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 700)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 1076 1075 1077 82 (set (reg:DI 701)
        (sign_extend:DI (reg:SI 363 [ D.6677 ]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 363 [ D.6677 ])
        (nil)))
(insn 1077 1076 1078 82 (set (reg:QI 364 [ D.6694 ])
        (mem/j:QI (plus:DI (reg/f:DI 362 [ D.6693 ])
                (reg:DI 701)) [0 _419->character S1 A8])) fmtext_o.cpp:274 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 701)
        (expr_list:REG_DEAD (reg/f:DI 362 [ D.6693 ])
            (nil))))
(insn 1078 1077 1079 82 (set (reg:DI 702)
        (sign_extend:DI (reg:SI 358 [ D.6677 ]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 358 [ D.6677 ])
        (nil)))
(insn 1079 1078 1080 82 (set (mem/j:QI (plus:DI (reg/f:DI 357 [ D.6693 ])
                (reg:DI 702)) [0 _414->character S1 A8])
        (reg:QI 364 [ D.6694 ])) fmtext_o.cpp:274 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 702)
        (expr_list:REG_DEAD (reg:QI 364 [ D.6694 ])
            (expr_list:REG_DEAD (reg/f:DI 357 [ D.6693 ])
                (nil)))))
(insn 1080 1079 1174 82 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:269 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1174 1080 1175 82 (set (pc)
        (label_ref 1081)) fmtext_o.cpp:269 654 {jump}
     (nil)
 -> 1081)
;;  succ:       81 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1175 1174 1084)
;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1084 1175 1085 83 62 "" [1 uses])
(note 1085 1084 1086 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1086 1085 1176 83 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:267 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1176 1086 1177 83 (set (pc)
        (label_ref 1087)) fmtext_o.cpp:267 654 {jump}
     (nil)
 -> 1087)
;;  succ:       79 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1177 1176 1090)
;; basic block 84, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1090 1177 1091 84 61 "" [1 uses])
(note 1091 1090 1092 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 1092 1091 1178 84 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:265 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1178 1092 1179 84 (set (pc)
        (label_ref 1093)) fmtext_o.cpp:265 654 {jump}
     (nil)
 -> 1093)
;;  succ:       77 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1179 1178 1096)
;; basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              77
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1096 1179 1097 85 14 "" [2 uses])
(note 1097 1096 1098 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 1098 1097 1180 85 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:120 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1180 1098 1181 85 (set (pc)
        (label_ref 1099)) fmtext_o.cpp:120 654 {jump}
     (nil)
 -> 1099)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1181 1180 1102)
;; basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 365 703
(code_label 1102 1181 1103 86 13 "" [1 uses])
(note 1103 1102 1104 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 1104 1103 1105 86 (set (reg/f:DI 703)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1105 1104 1106 86 (set (reg/f:DI 365 [ D.6682 ])
        (mem/f:DI (reg/f:DI 703) [0 *in_file_69(D)+0 S8 A64])) fmtext_o.cpp:284 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 703)
        (nil)))
(insn 1106 1105 1107 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 365 [ D.6682 ])
            (const_int 0 [0]))) fmtext_o.cpp:284 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 365 [ D.6682 ])
        (nil)))
(jump_insn 1107 1106 1108 86 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1113)
            (pc))) fmtext_o.cpp:284 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 1113)
;;  succ:       87 (FALLTHRU)
;;              88
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       86 (FALLTHRU)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 366 704
(note 1108 1107 1109 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 1109 1108 1110 87 (set (reg/f:DI 704)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:285 89 {*movdi_internal}
     (nil))
(insn 1110 1109 1111 87 (set (reg/f:DI 366 [ D.6682 ])
        (mem/f:DI (reg/f:DI 704) [0 *in_file_69(D)+0 S8 A64])) fmtext_o.cpp:285 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 704)
        (nil)))
(insn 1111 1110 1112 87 (set (reg:DI 5 di)
        (reg/f:DI 366 [ D.6682 ])) fmtext_o.cpp:285 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 366 [ D.6682 ])
        (nil)))
(call_insn 1112 1111 1113 87 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fa2a1ac81b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:285 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       88 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 89, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       86
;;              87 (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 367 368
(code_label 1113 1112 1114 88 67 "" [1 uses])
(note 1114 1113 1115 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 1115 1114 1118 88 (set (reg:SI 367 [ D.6677 ])
        (const_int 1 [0x1])) fmtext_o.cpp:288 90 {*movsi_internal}
     (nil))
(insn 1118 1115 1122 88 (set (reg:SI 368 [ <retval> ])
        (reg:SI 367 [ D.6677 ])) fmtext_o.cpp:288 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 367 [ D.6677 ])
        (nil)))
(insn 1122 1118 1123 88 (set (reg/i:SI 0 ax)
        (reg:SI 368 [ <retval> ])) fmtext_o.cpp:290 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 368 [ <retval> ])
        (nil)))
(insn 1123 1122 1124 88 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.6698+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) fmtext_o.cpp:290 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 1124 1123 1130 88 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1127)
            (pc))) fmtext_o.cpp:290 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 1127)
;;  succ:       90
;;              89 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 88, next block 90, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88 (FALLTHRU)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1130 1124 1125 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(call_insn 1125 1130 1126 89 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fa2a1c07af8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:290 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1126 1125 1127)
;; basic block 90, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 89, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1127 1126 1131 90 69 "" [1 uses])
(note 1131 1127 1128 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 1128 1131 0 90 (use (reg/i:SI 0 ax)) fmtext_o.cpp:290 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function void write_csi_data(char*, Precision4* (*)[100], Data_file_header**, Data_block_header**, PE_info*) (_Z14write_csi_dataPcPA100_P10Precision4PP16Data_file_headerPP17Data_block_headerP7PE_info, funcdef_no=4, decl_uid=5427, cgraph_uid=4, symbol_order=4)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 19 count 16 (    1)
Building IRA IR
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 166.
verify found no changes in insn with uid = 172.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r164: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r164,l0) best DIREG, allocno GENERAL_REGS
    r163: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r163,l0) best SIREG, allocno GENERAL_REGS
    r162: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r162,l0) best CREG, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r151,l0) best CREG, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a41 (r146,l0) best CREG, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a44 (r144,l0) best SSE_REGS, allocno SSE_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a47 (r142,l0) best SSE_REGS, allocno SSE_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a74 (r129,l0) best SIREG, allocno GENERAL_REGS
    r128: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a77 (r128,l0) best DIREG, allocno GENERAL_REGS
    r127: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r127,l0) best AREG, allocno GENERAL_REGS
    r126: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r126,l0) best DIREG, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r122,l0) best SIREG, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r115,l0) best DIREG, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a40 (r105,l0) best DIREG, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a76 (r87,l0) best AREG, allocno GENERAL_REGS

  a0(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a1(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:-1 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a2(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a3(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a4(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a5(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a6(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a7(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a8(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a9(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a10(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a11(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:103 NO_REX_SSE_REGS:103 SSE_REGS:103 MMX_REGS:133 INT_SSE_REGS:109 ALL_REGS:2072 MEM:30
  a12(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a13(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a14(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a15(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a16(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a17(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a18(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a19(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a20(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a21(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a22(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a23(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a24(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a25(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a26(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a27(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a28(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a29(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a30(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a31(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a32(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a33(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a34(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:5
  a35(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:6
  a36(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:4
  a37(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a38(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a39(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a40(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a41(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a42(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a43(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a44(r144,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a45(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a46(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a47(r142,l0) costs: AREG:4 DREG:4 CREG:4 BREG:4 SIREG:4 DIREG:4 AD_REGS:4 Q_REGS:4 NON_Q_REGS:4 GENERAL_REGS:4 FP_TOP_REG:31 FP_SECOND_REG:31 FLOAT_REGS:31 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MMX_REGS:29 FP_TOP_SSE_REGS:33 FP_SECOND_SSE_REGS:33 FLOAT_SSE_REGS:33 FLOAT_INT_REGS:31 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:33 ALL_REGS:33 MEM:12
  a48(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a49(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a50(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a51(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a52(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a53(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:40 NO_REX_SSE_REGS:40 SSE_REGS:40 MMX_REGS:55 INT_SSE_REGS:43 ALL_REGS:824 MEM:12
  a54(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a55(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a56(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a57(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a58(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a59(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a60(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a61(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a62(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a63(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a64(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a65(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a66(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a67(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a68(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a69(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a70(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a71(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a72(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a73(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a74(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a75(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a76(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a77(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7

   Insn 172(l0): point = 1
   Insn 171(l0): point = 4
   Insn 170(l0): point = 6
   Insn 188(l0): point = 9
   Insn 166(l0): point = 12
   Insn 165(l0): point = 14
   Insn 164(l0): point = 16
   Insn 162(l0): point = 19
   Insn 161(l0): point = 21
   Insn 160(l0): point = 23
   Insn 159(l0): point = 25
   Insn 158(l0): point = 27
   Insn 157(l0): point = 29
   Insn 156(l0): point = 31
   Insn 155(l0): point = 33
   Insn 154(l0): point = 35
   Insn 83(l0): point = 38
   Insn 82(l0): point = 40
   Insn 81(l0): point = 42
   Insn 80(l0): point = 44
   Insn 182(l0): point = 47
   Insn 148(l0): point = 49
   Insn 111(l0): point = 52
   Insn 110(l0): point = 54
   Insn 109(l0): point = 56
   Insn 108(l0): point = 58
   Insn 106(l0): point = 61
   Insn 105(l0): point = 63
   Insn 104(l0): point = 65
   Insn 103(l0): point = 67
   Insn 102(l0): point = 69
   Insn 101(l0): point = 71
   Insn 100(l0): point = 73
   Insn 99(l0): point = 75
   Insn 98(l0): point = 77
   Insn 97(l0): point = 79
   Insn 96(l0): point = 81
   Insn 95(l0): point = 83
   Insn 94(l0): point = 85
   Insn 93(l0): point = 87
   Insn 92(l0): point = 89
   Insn 91(l0): point = 91
   Insn 90(l0): point = 93
   Insn 89(l0): point = 95
   Insn 88(l0): point = 97
   Insn 87(l0): point = 99
   Insn 86(l0): point = 101
   Insn 85(l0): point = 103
   Insn 180(l0): point = 106
   Insn 142(l0): point = 108
   Insn 141(l0): point = 110
   Insn 140(l0): point = 112
   Insn 139(l0): point = 114
   Insn 138(l0): point = 116
   Insn 137(l0): point = 118
   Insn 136(l0): point = 120
   Insn 135(l0): point = 122
   Insn 134(l0): point = 124
   Insn 133(l0): point = 126
   Insn 132(l0): point = 128
   Insn 131(l0): point = 130
   Insn 130(l0): point = 132
   Insn 129(l0): point = 134
   Insn 128(l0): point = 136
   Insn 127(l0): point = 138
   Insn 126(l0): point = 140
   Insn 125(l0): point = 142
   Insn 124(l0): point = 144
   Insn 123(l0): point = 146
   Insn 122(l0): point = 148
   Insn 121(l0): point = 150
   Insn 120(l0): point = 152
   Insn 119(l0): point = 154
   Insn 118(l0): point = 156
   Insn 117(l0): point = 158
   Insn 116(l0): point = 160
   Insn 115(l0): point = 162
   Insn 114(l0): point = 164
   Insn 113(l0): point = 166
   Insn 78(l0): point = 169
   Insn 77(l0): point = 171
   Insn 76(l0): point = 173
   Insn 75(l0): point = 175
   Insn 74(l0): point = 177
   Insn 73(l0): point = 179
   Insn 72(l0): point = 181
   Insn 71(l0): point = 183
   Insn 70(l0): point = 185
   Insn 69(l0): point = 187
   Insn 68(l0): point = 189
   Insn 67(l0): point = 191
   Insn 66(l0): point = 193
   Insn 65(l0): point = 195
   Insn 64(l0): point = 197
   Insn 63(l0): point = 199
   Insn 62(l0): point = 201
   Insn 61(l0): point = 203
   Insn 60(l0): point = 205
   Insn 59(l0): point = 207
   Insn 58(l0): point = 209
   Insn 57(l0): point = 211
   Insn 56(l0): point = 213
   Insn 55(l0): point = 215
   Insn 54(l0): point = 217
   Insn 53(l0): point = 219
   Insn 52(l0): point = 221
   Insn 51(l0): point = 223
   Insn 50(l0): point = 225
   Insn 49(l0): point = 227
   Insn 48(l0): point = 229
   Insn 47(l0): point = 231
   Insn 46(l0): point = 233
   Insn 45(l0): point = 235
   Insn 44(l0): point = 237
   Insn 43(l0): point = 239
   Insn 42(l0): point = 241
   Insn 41(l0): point = 243
   Insn 40(l0): point = 245
   Insn 39(l0): point = 247
   Insn 38(l0): point = 249
   Insn 37(l0): point = 251
   Insn 36(l0): point = 253
   Insn 35(l0): point = 255
   Insn 34(l0): point = 257
   Insn 33(l0): point = 259
   Insn 32(l0): point = 261
   Insn 178(l0): point = 264
   Insn 27(l0): point = 266
   Insn 26(l0): point = 268
   Insn 25(l0): point = 270
   Insn 24(l0): point = 272
   Insn 23(l0): point = 274
   Insn 21(l0): point = 277
   Insn 20(l0): point = 279
   Insn 19(l0): point = 281
   Insn 18(l0): point = 283
   Insn 17(l0): point = 285
   Insn 16(l0): point = 287
   Insn 15(l0): point = 289
   Insn 14(l0): point = 291
   Insn 13(l0): point = 293
   Insn 12(l0): point = 295
   Insn 11(l0): point = 297
   Insn 8(l0): point = 299
   Insn 6(l0): point = 301
   Insn 5(l0): point = 303
   Insn 4(l0): point = 305
   Insn 3(l0): point = 307
   Insn 2(l0): point = 309
 a0(r164): [15..16]
 a1(r127): [26..31]
 a2(r163): [28..29]
 a3(r126): [113..122]
 a4(r122): [115..152]
 a5(r162): [119..120]
 a6(r125): [123..128]
 a7(r160): [123..124]
 a8(r161): [125..126]
 a9(r159): [129..130]
 a10(r124): [129..132]
 a11(r156): [137..146] [133..134]
 a12(r158): [135..136]
 a13(r157): [139..140]
 a14(r123): [143..148]
 a15(r155): [149..150]
 a16(r121): [153..154]
 a17(r120): [155..156]
 a18(r118): [155..162]
 a19(r119): [157..158]
 a20(r154): [159..160]
 a21(r117): [163..164]
 a22(r153): [165..166]
 a23(r116): [55..56]
 a24(r152): [57..58]
 a25(r115): [66..75]
 a26(r151): [72..73]
 a27(r150): [76..77]
 a28(r113): [80..83]
 a29(r114): [80..81]
 a30(r149): [84..85]
 a31(r111): [88..91]
 a32(r112): [88..89]
 a33(r148): [92..93]
 a34(r110): [96..97]
 a35(r109): [98..99]
 a36(r108): [100..101]
 a37(r107): [102..103]
 a38(r106): [41..42]
 a39(r147): [43..44]
 a40(r105): [176..185]
 a41(r146): [182..183]
 a42(r145): [186..187]
 a43(r104): [190..193]
 a44(r144): [190..191]
 a45(r143): [194..195]
 a46(r103): [198..201]
 a47(r142): [198..199]
 a48(r141): [202..203]
 a49(r93): [206..239]
 a50(r102): [206..207]
 a51(r101): [208..209]
 a52(r98): [208..225]
 a53(r138): [216..217] [210..213]
 a54(r140): [210..211]
 a55(r139): [214..215]
 a56(r100): [218..219]
 a57(r99): [220..221]
 a58(r137): [222..223]
 a59(r97): [226..227]
 a60(r95): [226..233]
 a61(r96): [228..229]
 a62(r136): [230..231]
 a63(r94): [234..235]
 a64(r135): [236..237]
 a65(r134): [240..241]
 a66(r91): [244..249]
 a67(r92): [244..245]
 a68(r133): [246..247]
 a69(r132): [250..251]
 a70(r89): [254..259]
 a71(r90): [254..255]
 a72(r131): [256..257]
 a73(r130): [260..261]
 a74(r129): [273..274]
 a75(r88): [280..281]
 a76(r87): [286..287]
 a77(r128): [292..295]
Compressing live ranges: from 312 to 122 - 39%
Ranges after the compression:
 a0(r164): [0..1]
 a1(r127): [2..3]
 a2(r163): [2..3]
 a3(r126): [32..33]
 a4(r122): [32..49]
 a5(r162): [32..33]
 a6(r125): [34..37]
 a7(r160): [34..35]
 a8(r161): [36..37]
 a9(r159): [38..39]
 a10(r124): [38..39]
 a11(r156): [44..47] [40..41]
 a12(r158): [42..43]
 a13(r157): [44..45]
 a14(r123): [46..47]
 a15(r155): [48..49]
 a16(r121): [50..51]
 a17(r120): [52..53]
 a18(r118): [52..57]
 a19(r119): [54..55]
 a20(r154): [56..57]
 a21(r117): [58..59]
 a22(r153): [60..61]
 a23(r116): [8..9]
 a24(r152): [10..11]
 a25(r115): [12..13]
 a26(r151): [12..13]
 a27(r150): [14..15]
 a28(r113): [16..17]
 a29(r114): [16..17]
 a30(r149): [18..19]
 a31(r111): [20..21]
 a32(r112): [20..21]
 a33(r148): [22..23]
 a34(r110): [24..25]
 a35(r109): [26..27]
 a36(r108): [28..29]
 a37(r107): [30..31]
 a38(r106): [4..5]
 a39(r147): [6..7]
 a40(r105): [62..63]
 a41(r146): [62..63]
 a42(r145): [64..65]
 a43(r104): [66..67]
 a44(r144): [66..67]
 a45(r143): [68..69]
 a46(r103): [70..71]
 a47(r142): [70..71]
 a48(r141): [72..73]
 a49(r93): [74..99]
 a50(r102): [74..75]
 a51(r101): [76..77]
 a52(r98): [76..89]
 a53(r138): [82..83] [78..79]
 a54(r140): [78..79]
 a55(r139): [80..81]
 a56(r100): [84..85]
 a57(r99): [86..87]
 a58(r137): [88..89]
 a59(r97): [90..91]
 a60(r95): [90..95]
 a61(r96): [92..93]
 a62(r136): [94..95]
 a63(r94): [96..97]
 a64(r135): [98..99]
 a65(r134): [100..101]
 a66(r91): [102..105]
 a67(r92): [102..103]
 a68(r133): [104..105]
 a69(r132): [106..107]
 a70(r89): [108..111]
 a71(r90): [108..109]
 a72(r131): [110..111]
 a73(r130): [112..113]
 a74(r129): [114..115]
 a75(r88): [116..117]
 a76(r87): [118..119]
 a77(r128): [120..121]
  regions=1, blocks=16, points=122
    allocnos=78 (big 0), copies=0, conflicts=0, ranges=80
Disposition:
   76:r87  l0     0   75:r88  l0     0   70:r89  l0     0   71:r90  l0     1
   66:r91  l0     0   67:r92  l0     1   49:r93  l0     1   63:r94  l0     0
   60:r95  l0     2   61:r96  l0     0   59:r97  l0     0   52:r98  l0     2
   57:r99  l0     0   56:r100 l0     0   51:r101 l0     0   50:r102 l0     0
   46:r103 l0     0   43:r104 l0     0   40:r105 l0     0   38:r106 l0     0
   37:r107 l0     0   36:r108 l0     0   35:r109 l0     0   34:r110 l0     0
   31:r111 l0     0   32:r112 l0     1   28:r113 l0     0   29:r114 l0     1
   25:r115 l0     0   23:r116 l0     0   21:r117 l0     0   18:r118 l0     1
   19:r119 l0     0   17:r120 l0     0   16:r121 l0     0    4:r122 l0     4
   14:r123 l0     1   10:r124 l0     1    6:r125 l0     1    3:r126 l0     0
    1:r127 l0     1   77:r128 l0     0   74:r129 l0     0   73:r130 l0     0
   72:r131 l0     1   69:r132 l0     0   68:r133 l0     1   65:r134 l0     0
   64:r135 l0     0   62:r136 l0     0   58:r137 l0     0   53:r138 l0     0
   55:r139 l0     0   54:r140 l0     4   48:r141 l0     0   47:r142 l0    21
   45:r143 l0     0   44:r144 l0    21   42:r145 l0     0   41:r146 l0     1
   39:r147 l0     0   33:r148 l0     0   30:r149 l0     0   27:r150 l0     0
   26:r151 l0     1   24:r152 l0     0   22:r153 l0     0   20:r154 l0     0
   15:r155 l0     0   11:r156 l0     0   13:r157 l0     1   12:r158 l0     0
    9:r159 l0     0    7:r160 l0     0    8:r161 l0     0    5:r162 l0     1
    2:r163 l0     0    0:r164 l0     0
+++Costs: overall -13, reg -13, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


void write_csi_data(char*, Precision4* (*)[100], Data_file_header**, Data_block_header**, PE_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={11d,3u} r1={13d,4u} r2={13d,4u} r4={16d,7u} r5={18d,9u} r6={1d,15u} r7={1d,24u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r16={1d,14u} r17={31d,6u} r18={9d} r19={9d} r20={1d,67u,1e} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d,1u} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,2u,1e} r124={1d,1u,1e} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={2d,3u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={5d,6u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} 
;;    total ref usage 1036{793d,240u,3e} in 149{140 regular + 9 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 128
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])
        (reg:DI 5 di [ outfile_name ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ outfile_name ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 csi_final+0 S8 A64])
        (reg:DI 4 si [ csi_final ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ csi_final ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ main_header ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])
        (reg:DI 2 cx [ block_header ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ block_header ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])
        (reg:DI 37 r8 [ pe_info ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ pe_info ])
        (nil)))
(note 7 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 7 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.6716+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:294 986 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:296 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:300 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7fa2a185d090 *.LC19>)) fmtext_o.cpp:300 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 128)) fmtext_o.cpp:300 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 128)
        (nil)))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fa2a1ac8510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:300 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 16 15 17 2 (set (reg/f:DI 87 [ D.6705 ])
        (reg:DI 0 ax)) fmtext_o.cpp:300 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
        (reg/f:DI 87 [ D.6705 ])) fmtext_o.cpp:300 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ D.6705 ])
        (nil)))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:300 4 {*cmpdi_ccno_1}
     (nil))
(insn 19 18 20 2 (set (reg:QI 88 [ D.6706 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:300 607 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 20 19 21 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 88 [ D.6706 ])
            (const_int 0 [0]))) fmtext_o.cpp:300 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 88 [ D.6706 ])
        (nil)))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) fmtext_o.cpp:300 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 30)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 129
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:302 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 4 si)
        (reg:DI 129)) fmtext_o.cpp:302 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 129)
        (nil)))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fa2a17ea120 *.LC1>)) fmtext_o.cpp:302 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:302 93 {*movqi_internal}
     (nil))
(call_insn 27 26 178 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2a1d0a5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:302 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 178 27 179 3 (set (pc)
        (label_ref:DI 187)) fmtext_o.cpp:369 654 {jump}
     (nil)
 -> 187)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 179 178 30)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146
(code_label 30 179 31 4 71 "" [1 uses])
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:306 89 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 89 [ D.6707 ])
        (mem/f:DI (reg/f:DI 130) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:306 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130)
        (nil)))
(insn 34 33 35 4 (set (reg/f:DI 131)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:306 89 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:SI 90 [ D.6708 ])
        (mem/j:SI (plus:DI (reg/f:DI 131)
                (const_int 8 [0x8])) [0 pe_info_17(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:306 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131)
        (nil)))
(insn 36 35 37 4 (set (mem/j:SI (reg/f:DI 89 [ D.6707 ]) [0 _16->nblocks.number+0 S4 A32])
        (reg:SI 90 [ D.6708 ])) fmtext_o.cpp:306 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90 [ D.6708 ])
        (expr_list:REG_DEAD (reg/f:DI 89 [ D.6707 ])
            (nil))))
(insn 37 36 38 4 (set (reg/f:DI 132)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:307 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg/f:DI 91 [ D.6707 ])
        (mem/f:DI (reg/f:DI 132) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:307 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132)
        (nil)))
(insn 39 38 40 4 (set (reg/f:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:307 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:SI 92 [ D.6708 ])
        (mem/j:SI (plus:DI (reg/f:DI 133)
                (const_int 8 [0x8])) [0 pe_info_17(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:307 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 133)
        (nil)))
(insn 41 40 42 4 (set (mem/j:SI (plus:DI (reg/f:DI 91 [ D.6707 ])
                (const_int 4 [0x4])) [0 _20->ntraces.number+0 S4 A32])
        (reg:SI 92 [ D.6708 ])) fmtext_o.cpp:307 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ D.6708 ])
        (expr_list:REG_DEAD (reg/f:DI 91 [ D.6707 ])
            (nil))))
(insn 42 41 43 4 (set (reg/f:DI 134)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (reg/f:DI 93 [ D.6707 ])
        (mem/f:DI (reg/f:DI 134) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134)
        (nil)))
(insn 44 43 45 4 (set (reg/f:DI 135)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 94 [ D.6707 ])
        (mem/f:DI (reg/f:DI 135) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135)
        (nil)))
(insn 46 45 47 4 (set (reg:SI 95 [ D.6708 ])
        (mem/j:SI (plus:DI (reg/f:DI 94 [ D.6707 ])
                (const_int 4 [0x4])) [0 _24->ntraces.number+0 S4 A32])) fmtext_o.cpp:308 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ D.6707 ])
        (nil)))
(insn 47 46 48 4 (set (reg/f:DI 136)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg/f:DI 96 [ D.6707 ])
        (mem/f:DI (reg/f:DI 136) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 136)
        (nil)))
(insn 49 48 50 4 (set (reg:SI 97 [ D.6708 ])
        (mem/j:SI (plus:DI (reg/f:DI 96 [ D.6707 ])
                (const_int 16 [0x10])) [0 _26->tbytes.number+0 S4 A32])) fmtext_o.cpp:308 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ D.6707 ])
        (nil)))
(insn 50 49 51 4 (parallel [
            (set (reg:SI 98 [ D.6708 ])
                (mult:SI (reg:SI 95 [ D.6708 ])
                    (reg:SI 97 [ D.6708 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:308 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 97 [ D.6708 ])
        (expr_list:REG_DEAD (reg:SI 95 [ D.6708 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 51 50 52 4 (set (reg/f:DI 137)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:309 89 {*movdi_internal}
     (nil))
(insn 52 51 53 4 (set (reg/f:DI 99 [ D.6707 ])
        (mem/f:DI (reg/f:DI 137) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:309 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 137)
        (nil)))
(insn 53 52 54 4 (set (reg:SI 100 [ D.6708 ])
        (mem/j:SI (plus:DI (reg/f:DI 99 [ D.6707 ])
                (const_int 28 [0x1c])) [0 _29->spare1.number+0 S4 A32])) fmtext_o.cpp:309 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99 [ D.6707 ])
        (nil)))
(insn 54 53 55 4 (set (reg:SI 138)
        (reg:SI 100 [ D.6708 ])) fmtext_o.cpp:309 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 100 [ D.6708 ])
        (nil)))
(insn 55 54 56 4 (parallel [
            (set (reg:SI 139)
                (ashift:SI (reg:SI 138)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 511 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 138)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 56 55 57 4 (set (reg:SI 138)
        (reg:SI 139)) fmtext_o.cpp:309 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 139)
        (nil)))
(insn 57 56 58 4 (parallel [
            (set (reg:SI 140)
                (ashift:SI (reg:SI 138)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 511 {*ashlsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 58 57 59 4 (parallel [
            (set (reg:SI 101 [ D.6708 ])
                (minus:SI (reg:SI 140)
                    (reg:SI 138)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 260 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 140)
        (expr_list:REG_DEAD (reg:SI 138)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 59 58 60 4 (parallel [
            (set (reg:SI 102 [ D.6708 ])
                (plus:SI (reg:SI 98 [ D.6708 ])
                    (reg:SI 101 [ D.6708 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 101 [ D.6708 ])
        (expr_list:REG_DEAD (reg:SI 98 [ D.6708 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 60 59 61 4 (set (mem/j:SI (plus:DI (reg/f:DI 93 [ D.6707 ])
                (const_int 20 [0x14])) [0 _23->bbytes.number+0 S4 A32])
        (reg:SI 102 [ D.6708 ])) fmtext_o.cpp:309 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 102 [ D.6708 ])
        (expr_list:REG_DEAD (reg/f:DI 93 [ D.6707 ])
            (nil))))
(insn 61 60 62 4 (set (reg/f:DI 141)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:326 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (set (reg/f:DI 103 [ D.6709 ])
        (mem/f:DI (reg/f:DI 141) [0 *block_header_34(D)+0 S8 A64])) fmtext_o.cpp:326 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141)
        (nil)))
(insn 63 62 64 4 (set (reg:SF 142)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S4 A32])) fmtext_o.cpp:326 129 {*movsf_internal}
     (nil))
(insn 64 63 65 4 (set (mem/j:SF (plus:DI (reg/f:DI 103 [ D.6709 ])
                (const_int 20 [0x14])) [0 _35->lvl.number+0 S4 A32])
        (reg:SF 142)) fmtext_o.cpp:326 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 142)
        (expr_list:REG_DEAD (reg/f:DI 103 [ D.6709 ])
            (nil))))
(insn 65 64 66 4 (set (reg/f:DI 143)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:327 89 {*movdi_internal}
     (nil))
(insn 66 65 67 4 (set (reg/f:DI 104 [ D.6709 ])
        (mem/f:DI (reg/f:DI 143) [0 *block_header_34(D)+0 S8 A64])) fmtext_o.cpp:327 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 143)
        (nil)))
(insn 67 66 68 4 (set (reg:SF 144)
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S4 A32])) fmtext_o.cpp:327 129 {*movsf_internal}
     (nil))
(insn 68 67 69 4 (set (mem/j:SF (plus:DI (reg/f:DI 104 [ D.6709 ])
                (const_int 24 [0x18])) [0 _37->tlt.number+0 S4 A32])
        (reg:SF 144)) fmtext_o.cpp:327 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 144)
        (expr_list:REG_DEAD (reg/f:DI 104 [ D.6709 ])
            (nil))))
(insn 69 68 70 4 (set (reg/f:DI 145)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (set (reg/f:DI 105 [ D.6707 ])
        (mem/f:DI (reg/f:DI 145) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:339 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 145)
        (nil)))
(insn 71 70 72 4 (set (reg:DI 146)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 2 cx)
        (reg:DI 146)) fmtext_o.cpp:339 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 146)
        (nil)))
(insn 73 72 74 4 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:DI 5 di)
        (reg/f:DI 105 [ D.6707 ])) fmtext_o.cpp:339 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ D.6707 ])
        (nil)))
(call_insn 76 75 77 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fa2a1d0a0d8 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:339 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 77 76 78 4 (set (mem/j/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_short_variable.number+0 S2 A64])
        (const_int 0 [0])) fmtext_o.cpp:343 92 {*movhi_internal}
     (nil))
(insn 78 77 149 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:345 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              9 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 147
(code_label 149 78 79 5 76 "" [1 uses])
(note 79 149 80 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 5 (set (reg/f:DI 147)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:345 89 {*movdi_internal}
     (nil))
(insn 81 80 82 5 (set (reg:SI 106 [ D.6708 ])
        (mem/j:SI (plus:DI (reg/f:DI 147)
                (const_int 8 [0x8])) [0 pe_info_17(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:345 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 147)
        (nil)))
(insn 82 81 83 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 106 [ D.6708 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32]))) fmtext_o.cpp:345 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 106 [ D.6708 ])
        (nil)))
(jump_insn 83 82 84 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 152)
            (pc))) fmtext_o.cpp:345 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 152)
;;  succ:       10
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 108 109 110 111 112 113 114 115 148 149 150 151
(note 84 83 85 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 6 (set (reg:HI 107 [ D.6710 ])
        (mem/j/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_short_variable.number+0 S2 A64])) fmtext_o.cpp:347 92 {*movhi_internal}
     (nil))
(insn 86 85 87 6 (set (reg:HI 108 [ D.6711 ])
        (reg:HI 107 [ D.6710 ])) fmtext_o.cpp:347 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 107 [ D.6710 ])
        (nil)))
(insn 87 86 88 6 (parallel [
            (set (reg:HI 109 [ D.6711 ])
                (plus:HI (reg:HI 108 [ D.6711 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:347 220 {*addhi_1}
     (expr_list:REG_DEAD (reg:HI 108 [ D.6711 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 88 87 89 6 (set (reg:HI 110 [ D.6710 ])
        (reg:HI 109 [ D.6711 ])) fmtext_o.cpp:347 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 109 [ D.6711 ])
        (nil)))
(insn 89 88 90 6 (set (mem/j/c:HI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_short_variable.number+0 S2 A64])
        (reg:HI 110 [ D.6710 ])) fmtext_o.cpp:347 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 110 [ D.6710 ])
        (nil)))
(insn 90 89 91 6 (set (reg/f:DI 148)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:349 89 {*movdi_internal}
     (nil))
(insn 91 90 92 6 (set (reg/f:DI 111 [ D.6709 ])
        (mem/f:DI (reg/f:DI 148) [0 *block_header_34(D)+0 S8 A64])) fmtext_o.cpp:349 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148)
        (nil)))
(insn 92 91 93 6 (set (reg:QI 112 [ D.6712 ])
        (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_short_variable.character+0 S1 A64])) fmtext_o.cpp:349 93 {*movqi_internal}
     (nil))
(insn 93 92 94 6 (set (mem/j:QI (plus:DI (reg/f:DI 111 [ D.6709 ])
                (const_int 4 [0x4])) [0 _49->index.character+0 S1 A32])
        (reg:QI 112 [ D.6712 ])) fmtext_o.cpp:349 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 112 [ D.6712 ])
        (expr_list:REG_DEAD (reg/f:DI 111 [ D.6709 ])
            (nil))))
(insn 94 93 95 6 (set (reg/f:DI 149)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:350 89 {*movdi_internal}
     (nil))
(insn 95 94 96 6 (set (reg/f:DI 113 [ D.6709 ])
        (mem/f:DI (reg/f:DI 149) [0 *block_header_34(D)+0 S8 A64])) fmtext_o.cpp:350 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 149)
        (nil)))
(insn 96 95 97 6 (set (reg:QI 114 [ D.6712 ])
        (mem/j/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -15 [0xfffffffffffffff1])) [0 temp_short_variable.character+1 S1 A8])) fmtext_o.cpp:350 93 {*movqi_internal}
     (nil))
(insn 97 96 98 6 (set (mem/j:QI (plus:DI (reg/f:DI 113 [ D.6709 ])
                (const_int 5 [0x5])) [0 _52->index.character+1 S1 A8])
        (reg:QI 114 [ D.6712 ])) fmtext_o.cpp:350 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 114 [ D.6712 ])
        (expr_list:REG_DEAD (reg/f:DI 113 [ D.6709 ])
            (nil))))
(insn 98 97 99 6 (set (reg/f:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 99 98 100 6 (set (reg/f:DI 115 [ D.6709 ])
        (mem/f:DI (reg/f:DI 150) [0 *block_header_34(D)+0 S8 A64])) fmtext_o.cpp:352 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150)
        (nil)))
(insn 100 99 101 6 (set (reg:DI 151)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 101 100 102 6 (set (reg:DI 2 cx)
        (reg:DI 151)) fmtext_o.cpp:352 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 151)
        (nil)))
(insn 102 101 103 6 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 103 102 104 6 (set (reg:DI 4 si)
        (const_int 28 [0x1c])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 104 103 105 6 (set (reg:DI 5 di)
        (reg/f:DI 115 [ D.6709 ])) fmtext_o.cpp:352 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ D.6709 ])
        (nil)))
(call_insn 105 104 106 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fa2a1d0a0d8 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:352 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 106 105 143 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:354 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              8 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 152
(code_label 143 106 107 7 75 "" [1 uses])
(note 107 143 108 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 7 (set (reg/f:DI 152)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:354 89 {*movdi_internal}
     (nil))
(insn 109 108 110 7 (set (reg:SI 116 [ D.6708 ])
        (mem/j:SI (plus:DI (reg/f:DI 152)
                (const_int 8 [0x8])) [0 pe_info_17(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:354 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152)
        (nil)))
(insn 110 109 111 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 116 [ D.6708 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32]))) fmtext_o.cpp:354 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 116 [ D.6708 ])
        (nil)))
(jump_insn 111 110 112 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) fmtext_o.cpp:354 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 146)
;;  succ:       9
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117 118 119 120 121 122 123 124 125 126 153 154 155 156 157 158 159 160 161 162
(note 112 111 113 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 8 (set (reg/f:DI 153)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 114 113 115 8 (set (reg/f:DI 117 [ D.6707 ])
        (mem/f:DI (reg/f:DI 153) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 153)
        (nil)))
(insn 115 114 116 8 (set (reg:SI 118 [ D.6708 ])
        (mem/j:SI (plus:DI (reg/f:DI 117 [ D.6707 ])
                (const_int 8 [0x8])) [0 _59->np.number+0 S4 A32])) fmtext_o.cpp:356 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117 [ D.6707 ])
        (nil)))
(insn 116 115 117 8 (set (reg/f:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 117 116 118 8 (set (reg/f:DI 119 [ D.6707 ])
        (mem/f:DI (reg/f:DI 154) [0 *main_header_15(D)+0 S8 A64])) fmtext_o.cpp:357 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154)
        (nil)))
(insn 118 117 119 8 (set (reg:SI 120 [ D.6708 ])
        (mem/j:SI (plus:DI (reg/f:DI 119 [ D.6707 ])
                (const_int 12 [0xc])) [0 _61->ebytes.number+0 S4 A32])) fmtext_o.cpp:357 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119 [ D.6707 ])
        (nil)))
(insn 119 118 120 8 (parallel [
            (set (reg:SI 121 [ D.6708 ])
                (mult:SI (reg:SI 118 [ D.6708 ])
                    (reg:SI 120 [ D.6708 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 120 [ D.6708 ])
        (expr_list:REG_DEAD (reg:SI 118 [ D.6708 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 120 119 121 8 (set (reg:DI 122 [ D.6713 ])
        (sign_extend:DI (reg:SI 121 [ D.6708 ]))) fmtext_o.cpp:356 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 121 [ D.6708 ])
        (nil)))
(insn 121 120 122 8 (set (reg:SI 155)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])) fmtext_o.cpp:356 90 {*movsi_internal}
     (nil))
(insn 122 121 123 8 (set (reg:DI 123 [ D.6713 ])
        (sign_extend:DI (reg:SI 155))) fmtext_o.cpp:356 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 155)
        (nil)))
(insn 123 122 124 8 (set (reg:DI 156)
        (reg:DI 123 [ D.6713 ])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 124 123 125 8 (parallel [
            (set (reg:DI 156)
                (ashift:DI (reg:DI 156)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 125 124 126 8 (parallel [
            (set (reg:DI 156)
                (plus:DI (reg:DI 156)
                    (reg:DI 123 [ D.6713 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 123 [ D.6713 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 123 [ D.6713 ])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 126 125 127 8 (parallel [
            (set (reg:DI 157)
                (ashift:DI (reg:DI 156)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 127 126 128 8 (parallel [
            (set (reg:DI 156)
                (plus:DI (reg:DI 156)
                    (reg:DI 157)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 157)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 128 127 129 8 (parallel [
            (set (reg:DI 158)
                (ashift:DI (reg:DI 156)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 156)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 129 128 130 8 (set (reg:DI 156)
        (reg:DI 158)) fmtext_o.cpp:356 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 158)
        (nil)))
(insn 130 129 131 8 (set (reg:DI 124 [ D.6713 ])
        (reg:DI 156)) fmtext_o.cpp:356 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 156)
        (nil)))
(insn 131 130 132 8 (set (reg/f:DI 159)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 132 131 133 8 (parallel [
            (set (reg/f:DI 125 [ D.6714 ])
                (plus:DI (reg:DI 124 [ D.6713 ])
                    (reg/f:DI 159)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 159)
        (expr_list:REG_DEAD (reg:DI 124 [ D.6713 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 csi_final+0 S8 A64])
                        (reg:DI 124 [ D.6713 ]))
                    (nil))))))
(insn 133 132 134 8 (set (reg:SI 161)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) fmtext_o.cpp:356 90 {*movsi_internal}
     (nil))
(insn 134 133 135 8 (set (reg:DI 160)
        (sign_extend:DI (reg:SI 161))) fmtext_o.cpp:356 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 161)
        (nil)))
(insn 135 134 136 8 (set (reg/f:DI 126 [ D.6715 ])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 160)
                    (const_int 8 [0x8]))
                (reg/f:DI 125 [ D.6714 ])) [0 *_68 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 160)
        (expr_list:REG_DEAD (reg/f:DI 125 [ D.6714 ])
            (nil))))
(insn 136 135 137 8 (set (reg:DI 162)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 137 136 138 8 (set (reg:DI 2 cx)
        (reg:DI 162)) fmtext_o.cpp:357 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 162)
        (nil)))
(insn 138 137 139 8 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 139 138 140 8 (set (reg:DI 4 si)
        (reg:DI 122 [ D.6713 ])) fmtext_o.cpp:357 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 122 [ D.6713 ])
        (nil)))
(insn 140 139 141 8 (set (reg:DI 5 di)
        (reg/f:DI 126 [ D.6715 ])) fmtext_o.cpp:357 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 126 [ D.6715 ])
        (nil)))
(call_insn 141 140 142 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fa2a1d0a0d8 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:357 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 142 141 180 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:354 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 180 142 181 8 (set (pc)
        (label_ref 143)) fmtext_o.cpp:354 654 {jump}
     (nil)
 -> 143)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 181 180 146)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 146 181 147 9 74 "" [1 uses])
(note 147 146 148 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 182 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:345 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 182 148 183 9 (set (pc)
        (label_ref 149)) fmtext_o.cpp:345 654 {jump}
     (nil)
 -> 149)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 183 182 152)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 127 163
(code_label 152 183 153 10 73 "" [1 uses])
(note 153 152 154 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 154 153 155 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7fa2a185d120 *.LC21>)) fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(call_insn/i 155 154 156 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7fa2a1b89bd0 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:361 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 156 155 157 10 (set (reg:SI 127 [ D.6708 ])
        (reg:SI 0 ax)) fmtext_o.cpp:361 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 157 156 158 10 (set (reg:DI 163)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 158 157 159 10 (set (reg:DI 4 si)
        (reg:DI 163)) fmtext_o.cpp:361 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 163)
        (nil)))
(insn 159 158 160 10 (set (reg:SI 5 di)
        (reg:SI 127 [ D.6708 ])) fmtext_o.cpp:361 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 127 [ D.6708 ])
        (nil)))
(call_insn 160 159 161 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_putc") [flags 0x41]  <function_decl 0x7fa2a1a63d80 _IO_putc>) [0 _IO_putc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:361 669 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 161 160 162 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:364 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 162 161 163 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 187)
            (pc))) fmtext_o.cpp:364 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 187)
;;  succ:       11 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 164
(note 163 162 164 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 11 (set (reg:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 of+0 S8 A64])) fmtext_o.cpp:365 89 {*movdi_internal}
     (nil))
(insn 165 164 166 11 (set (reg:DI 5 di)
        (reg:DI 164)) fmtext_o.cpp:365 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 164)
        (nil)))
(call_insn 166 165 187 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fa2a1ac81b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:365 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 12, flags: (NEW, RTL, MODIFIED)
;;  pred:       10
;;              3 [100.0%] 
;;              11 [100.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 187 166 186 15 78 "" [2 uses])
(note 186 187 188 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 188 186 169 15 (const_int 0 [0]) fmtext_o.cpp:369 684 {nop}
     (nil))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 169 188 175 12 70 "" [0 uses])
(note 175 169 170 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 170 175 171 12 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.6716+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) fmtext_o.cpp:369 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 171 170 176 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) fmtext_o.cpp:369 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 174)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 176 171 172 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(call_insn 172 176 173 13 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fa2a1c07af8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:369 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 173 172 174)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 174 173 177 14 77 "" [1 uses])
(note 177 174 0 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function int read_nmr_text(char*, float**, Header*, float**, int) (_Z13read_nmr_textPcPPfP6HeaderS1_i, funcdef_no=5, decl_uid=5404, cgraph_uid=5, symbol_order=5)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 25 count 20 (    1)
Building IRA IR
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 161.
verify found no changes in insn with uid = 169.
verify found no changes in insn with uid = 175.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 197.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 211.
verify found no changes in insn with uid = 218.
verify found no changes in insn with uid = 224.
verify found no changes in insn with uid = 241.
verify found no changes in insn with uid = 257.
verify found no changes in insn with uid = 263.
verify found no changes in insn with uid = 280.
verify found no changes in insn with uid = 303.
verify found no changes in insn with uid = 319.
verify found no changes in insn with uid = 342.
verify found no changes in insn with uid = 366.
verify found no changes in insn with uid = 378.
verify found no changes in insn with uid = 393.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r249: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r249,l0) best DIREG, allocno GENERAL_REGS
    r248: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r248,l0) best DIREG, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r240,l0) best DIREG, allocno GENERAL_REGS
    r239: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r239,l0) best DREG, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r234,l0) best DIREG, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a41 (r230,l0) best DIREG, allocno GENERAL_REGS
    r229: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a42 (r229,l0) best DREG, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a49 (r224,l0) best DIREG, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a61 (r220,l0) best DIREG, allocno GENERAL_REGS
    r219: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a62 (r219,l0) best DREG, allocno GENERAL_REGS
    r218: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a63 (r218,l0) best DIREG, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a74 (r214,l0) best DIREG, allocno GENERAL_REGS
    r213: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a75 (r213,l0) best DREG, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a82 (r210,l0) best DREG, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a84 (r208,l0) best DIREG, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a87 (r206,l0) best DIREG, allocno GENERAL_REGS
    r205: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a88 (r205,l0) best DREG, allocno GENERAL_REGS
    r204: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a89 (r204,l0) best DIREG, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a92 (r202,l0) best DIREG, allocno GENERAL_REGS
    r201: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a93 (r201,l0) best DREG, allocno GENERAL_REGS
    r200: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a94 (r200,l0) best DIREG, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a97 (r198,l0) best DIREG, allocno GENERAL_REGS
    r197: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a98 (r197,l0) best DREG, allocno GENERAL_REGS
    r196: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a99 (r196,l0) best DIREG, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a102 (r194,l0) best DIREG, allocno GENERAL_REGS
    r193: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a103 (r193,l0) best DREG, allocno GENERAL_REGS
    r192: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a104 (r192,l0) best DIREG, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a107 (r190,l0) best DIREG, allocno GENERAL_REGS
    r189: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a108 (r189,l0) best DREG, allocno GENERAL_REGS
    r188: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a109 (r188,l0) best DIREG, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a112 (r186,l0) best DIREG, allocno GENERAL_REGS
    r185: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a113 (r185,l0) best DREG, allocno GENERAL_REGS
    r184: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a114 (r184,l0) best DIREG, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a117 (r182,l0) best DIREG, allocno GENERAL_REGS
    r181: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a118 (r181,l0) best DREG, allocno GENERAL_REGS
    r180: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a119 (r180,l0) best DIREG, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a122 (r178,l0) best DIREG, allocno GENERAL_REGS
    r177: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a123 (r177,l0) best DREG, allocno GENERAL_REGS
    r176: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a124 (r176,l0) best DIREG, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a127 (r174,l0) best DIREG, allocno GENERAL_REGS
    r173: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a128 (r173,l0) best DREG, allocno GENERAL_REGS
    r172: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a129 (r172,l0) best DIREG, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a132 (r170,l0) best DIREG, allocno GENERAL_REGS
    r169: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a133 (r169,l0) best DREG, allocno GENERAL_REGS
    r168: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a136 (r168,l0) best AREG, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a147 (r164,l0) best AREG, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a156 (r160,l0) best DIREG, allocno GENERAL_REGS
    r159: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a158 (r159,l0) best DIREG, allocno GENERAL_REGS
    r158: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a159 (r158,l0) best DREG, allocno GENERAL_REGS
    r157: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a160 (r157,l0) best SIREG, allocno GENERAL_REGS
    r156: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a162 (r156,l0) best DIREG, allocno GENERAL_REGS
    r155: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r155,l0) best AREG, allocno GENERAL_REGS
    r154: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r154,l0) best DREG, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a31 (r141,l0) best DREG, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a50 (r132,l0) best DREG, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a64 (r124,l0) best DREG, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a78 (r116,l0) best AREG, allocno GENERAL_REGS
    r115: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a79 (r115,l0) best DIREG, allocno GENERAL_REGS
    r114: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a81 (r114,l0) best DIREG, allocno GENERAL_REGS
    r113: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a85 (r113,l0) best DREG, allocno GENERAL_REGS
    r112: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a90 (r112,l0) best DREG, allocno GENERAL_REGS
    r111: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a95 (r111,l0) best DREG, allocno GENERAL_REGS
    r110: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a100 (r110,l0) best DREG, allocno GENERAL_REGS
    r109: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a105 (r109,l0) best DREG, allocno GENERAL_REGS
    r108: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a110 (r108,l0) best DREG, allocno GENERAL_REGS
    r107: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a115 (r107,l0) best DREG, allocno GENERAL_REGS
    r106: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a120 (r106,l0) best DREG, allocno GENERAL_REGS
    r105: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a125 (r105,l0) best DREG, allocno GENERAL_REGS
    r104: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a130 (r104,l0) best DREG, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a137 (r102,l0) best DIREG, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a148 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a157 (r89,l0) best DREG, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a161 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a1(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24 NO_REX_SSE_REGS:24 SSE_REGS:24 MMX_REGS:29 INT_SSE_REGS:25 ALL_REGS:408 MEM:5
  a2(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a3(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a4(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a5(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a6(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a7(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a8(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a9(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a10(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a11(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a12(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a13(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a14(r148,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:30 NO_REX_SSE_REGS:30 SSE_REGS:30 MMX_REGS:40 INT_SSE_REGS:32 ALL_REGS:522 MEM:12
  a15(r244,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:23 NO_REX_SSE_REGS:23 SSE_REGS:23 MMX_REGS:28 INT_SSE_REGS:24 ALL_REGS:418 MEM:8
  a16(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a17(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a18(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a19(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a20(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a21(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a22(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a23(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a24(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a25(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a26(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a27(r142,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:30 NO_REX_SSE_REGS:30 SSE_REGS:30 MMX_REGS:40 INT_SSE_REGS:32 ALL_REGS:522 MEM:12
  a28(r236,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:23 NO_REX_SSE_REGS:23 SSE_REGS:23 MMX_REGS:28 INT_SSE_REGS:24 ALL_REGS:418 MEM:8
  a29(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a30(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a31(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a32(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a33(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a34(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a35(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a36(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a37(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a38(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a39(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a40(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a41(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a42(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a43(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a44(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a45(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a46(r133,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:30 NO_REX_SSE_REGS:30 SSE_REGS:30 MMX_REGS:40 INT_SSE_REGS:32 ALL_REGS:522 MEM:12
  a47(r226,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 GENERAL_REGS:2 SSE_FIRST_REG:23 NO_REX_SSE_REGS:23 SSE_REGS:23 MMX_REGS:28 INT_SSE_REGS:24 ALL_REGS:418 MEM:8
  a48(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a49(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a50(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a51(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a52(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a53(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a54(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a55(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a56(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a57(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a58(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a59(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a60(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a61(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a62(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a63(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a64(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a65(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a66(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a67(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a68(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a69(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a70(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a71(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a72(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a73(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a74(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a75(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a76(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a77(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a78(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a79(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a80(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a81(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a82(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a83(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a84(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a85(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a86(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a87(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a88(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a89(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a90(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a91(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a92(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a93(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a94(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a95(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a96(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a97(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a98(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a99(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a100(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a101(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a102(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a103(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a104(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a105(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a106(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a107(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a108(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a109(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a110(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a111(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a112(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a113(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a114(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a115(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a116(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a117(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a118(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a119(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a120(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a121(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a122(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a123(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a124(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a125(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a126(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a127(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a128(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a129(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a130(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a131(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a132(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a133(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a134(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a135(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a136(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a137(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a138(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a139(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a140(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a141(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a142(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a143(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a144(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a145(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a146(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a147(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a148(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a149(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a150(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a151(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a152(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a153(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a154(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a155(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a156(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a157(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a158(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a159(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a160(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a161(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a162(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7

   Insn 396(l0): point = 0
   Insn 393(l0): point = 3
   Insn 392(l0): point = 6
   Insn 391(l0): point = 8
   Insn 390(l0): point = 10
   Insn 386(l0): point = 12
   Insn 381(l0): point = 15
   Insn 378(l0): point = 18
   Insn 377(l0): point = 20
   Insn 376(l0): point = 22
   Insn 374(l0): point = 25
   Insn 373(l0): point = 27
   Insn 335(l0): point = 30
   Insn 334(l0): point = 32
   Insn 333(l0): point = 34
   Insn 332(l0): point = 36
   Insn 331(l0): point = 38
   Insn 330(l0): point = 40
   Insn 329(l0): point = 42
   Insn 328(l0): point = 44
   Insn 406(l0): point = 47
   Insn 367(l0): point = 49
   Insn 366(l0): point = 51
   Insn 365(l0): point = 53
   Insn 364(l0): point = 55
   Insn 363(l0): point = 57
   Insn 362(l0): point = 59
   Insn 361(l0): point = 61
   Insn 360(l0): point = 63
   Insn 359(l0): point = 65
   Insn 358(l0): point = 67
   Insn 357(l0): point = 69
   Insn 356(l0): point = 71
   Insn 355(l0): point = 73
   Insn 354(l0): point = 75
   Insn 353(l0): point = 77
   Insn 352(l0): point = 79
   Insn 351(l0): point = 81
   Insn 350(l0): point = 83
   Insn 349(l0): point = 85
   Insn 348(l0): point = 87
   Insn 347(l0): point = 89
   Insn 346(l0): point = 91
   Insn 345(l0): point = 93
   Insn 344(l0): point = 95
   Insn 343(l0): point = 97
   Insn 342(l0): point = 99
   Insn 341(l0): point = 101
   Insn 340(l0): point = 103
   Insn 339(l0): point = 105
   Insn 338(l0): point = 107
   Insn 337(l0): point = 109
   Insn 326(l0): point = 112
   Insn 296(l0): point = 115
   Insn 295(l0): point = 117
   Insn 294(l0): point = 119
   Insn 293(l0): point = 121
   Insn 292(l0): point = 123
   Insn 291(l0): point = 125
   Insn 290(l0): point = 127
   Insn 289(l0): point = 129
   Insn 404(l0): point = 132
   Insn 320(l0): point = 134
   Insn 319(l0): point = 136
   Insn 318(l0): point = 138
   Insn 317(l0): point = 140
   Insn 316(l0): point = 142
   Insn 315(l0): point = 144
   Insn 314(l0): point = 146
   Insn 313(l0): point = 148
   Insn 312(l0): point = 150
   Insn 311(l0): point = 152
   Insn 310(l0): point = 154
   Insn 309(l0): point = 156
   Insn 308(l0): point = 158
   Insn 307(l0): point = 160
   Insn 306(l0): point = 162
   Insn 305(l0): point = 164
   Insn 304(l0): point = 166
   Insn 303(l0): point = 168
   Insn 302(l0): point = 170
   Insn 301(l0): point = 172
   Insn 300(l0): point = 174
   Insn 299(l0): point = 176
   Insn 298(l0): point = 178
   Insn 287(l0): point = 181
   Insn 234(l0): point = 184
   Insn 233(l0): point = 186
   Insn 232(l0): point = 188
   Insn 231(l0): point = 190
   Insn 402(l0): point = 193
   Insn 281(l0): point = 195
   Insn 280(l0): point = 197
   Insn 279(l0): point = 199
   Insn 278(l0): point = 201
   Insn 277(l0): point = 203
   Insn 276(l0): point = 205
   Insn 275(l0): point = 207
   Insn 274(l0): point = 209
   Insn 273(l0): point = 211
   Insn 272(l0): point = 213
   Insn 271(l0): point = 215
   Insn 270(l0): point = 217
   Insn 269(l0): point = 219
   Insn 268(l0): point = 221
   Insn 267(l0): point = 223
   Insn 266(l0): point = 225
   Insn 265(l0): point = 227
   Insn 264(l0): point = 229
   Insn 263(l0): point = 231
   Insn 262(l0): point = 233
   Insn 261(l0): point = 235
   Insn 260(l0): point = 237
   Insn 259(l0): point = 239
   Insn 258(l0): point = 241
   Insn 257(l0): point = 243
   Insn 256(l0): point = 245
   Insn 255(l0): point = 247
   Insn 254(l0): point = 249
   Insn 253(l0): point = 251
   Insn 252(l0): point = 253
   Insn 251(l0): point = 255
   Insn 250(l0): point = 257
   Insn 249(l0): point = 259
   Insn 248(l0): point = 261
   Insn 247(l0): point = 263
   Insn 246(l0): point = 265
   Insn 245(l0): point = 267
   Insn 244(l0): point = 269
   Insn 243(l0): point = 271
   Insn 242(l0): point = 273
   Insn 241(l0): point = 275
   Insn 240(l0): point = 277
   Insn 239(l0): point = 279
   Insn 238(l0): point = 281
   Insn 237(l0): point = 283
   Insn 236(l0): point = 285
   Insn 229(l0): point = 288
   Insn 227(l0): point = 291
   Insn 226(l0): point = 293
   Insn 225(l0): point = 295
   Insn 224(l0): point = 297
   Insn 223(l0): point = 299
   Insn 222(l0): point = 301
   Insn 221(l0): point = 303
   Insn 220(l0): point = 305
   Insn 219(l0): point = 307
   Insn 218(l0): point = 309
   Insn 217(l0): point = 311
   Insn 216(l0): point = 313
   Insn 215(l0): point = 315
   Insn 214(l0): point = 317
   Insn 213(l0): point = 319
   Insn 212(l0): point = 321
   Insn 211(l0): point = 323
   Insn 210(l0): point = 325
   Insn 209(l0): point = 327
   Insn 208(l0): point = 329
   Insn 207(l0): point = 331
   Insn 206(l0): point = 333
   Insn 205(l0): point = 335
   Insn 204(l0): point = 337
   Insn 203(l0): point = 339
   Insn 202(l0): point = 341
   Insn 201(l0): point = 343
   Insn 200(l0): point = 345
   Insn 199(l0): point = 347
   Insn 198(l0): point = 349
   Insn 197(l0): point = 351
   Insn 196(l0): point = 353
   Insn 195(l0): point = 355
   Insn 194(l0): point = 357
   Insn 193(l0): point = 359
   Insn 192(l0): point = 361
   Insn 191(l0): point = 363
   Insn 190(l0): point = 365
   Insn 189(l0): point = 367
   Insn 188(l0): point = 369
   Insn 187(l0): point = 371
   Insn 186(l0): point = 373
   Insn 185(l0): point = 375
   Insn 184(l0): point = 377
   Insn 183(l0): point = 379
   Insn 182(l0): point = 381
   Insn 181(l0): point = 383
   Insn 180(l0): point = 385
   Insn 179(l0): point = 387
   Insn 178(l0): point = 389
   Insn 177(l0): point = 391
   Insn 176(l0): point = 393
   Insn 175(l0): point = 395
   Insn 174(l0): point = 397
   Insn 173(l0): point = 399
   Insn 172(l0): point = 401
   Insn 171(l0): point = 403
   Insn 170(l0): point = 405
   Insn 169(l0): point = 407
   Insn 168(l0): point = 409
   Insn 167(l0): point = 411
   Insn 166(l0): point = 413
   Insn 165(l0): point = 415
   Insn 164(l0): point = 417
   Insn 163(l0): point = 419
   Insn 162(l0): point = 421
   Insn 161(l0): point = 423
   Insn 160(l0): point = 425
   Insn 159(l0): point = 427
   Insn 158(l0): point = 429
   Insn 157(l0): point = 431
   Insn 156(l0): point = 433
   Insn 155(l0): point = 435
   Insn 154(l0): point = 437
   Insn 153(l0): point = 439
   Insn 152(l0): point = 441
   Insn 151(l0): point = 443
   Insn 150(l0): point = 445
   Insn 149(l0): point = 447
   Insn 148(l0): point = 449
   Insn 147(l0): point = 451
   Insn 146(l0): point = 453
   Insn 145(l0): point = 455
   Insn 144(l0): point = 457
   Insn 143(l0): point = 459
   Insn 142(l0): point = 461
   Insn 141(l0): point = 463
   Insn 140(l0): point = 465
   Insn 139(l0): point = 467
   Insn 138(l0): point = 469
   Insn 137(l0): point = 471
   Insn 136(l0): point = 473
   Insn 135(l0): point = 475
   Insn 134(l0): point = 477
   Insn 133(l0): point = 479
   Insn 132(l0): point = 481
   Insn 131(l0): point = 483
   Insn 130(l0): point = 485
   Insn 129(l0): point = 487
   Insn 128(l0): point = 489
   Insn 127(l0): point = 491
   Insn 126(l0): point = 493
   Insn 125(l0): point = 495
   Insn 124(l0): point = 497
   Insn 123(l0): point = 499
   Insn 122(l0): point = 501
   Insn 121(l0): point = 503
   Insn 120(l0): point = 505
   Insn 119(l0): point = 507
   Insn 118(l0): point = 509
   Insn 117(l0): point = 511
   Insn 116(l0): point = 513
   Insn 115(l0): point = 515
   Insn 114(l0): point = 517
   Insn 113(l0): point = 519
   Insn 112(l0): point = 521
   Insn 111(l0): point = 523
   Insn 110(l0): point = 525
   Insn 109(l0): point = 527
   Insn 108(l0): point = 529
   Insn 107(l0): point = 531
   Insn 106(l0): point = 533
   Insn 105(l0): point = 535
   Insn 104(l0): point = 537
   Insn 103(l0): point = 539
   Insn 102(l0): point = 541
   Insn 101(l0): point = 543
   Insn 100(l0): point = 545
   Insn 99(l0): point = 547
   Insn 98(l0): point = 549
   Insn 97(l0): point = 551
   Insn 96(l0): point = 553
   Insn 95(l0): point = 555
   Insn 94(l0): point = 557
   Insn 93(l0): point = 559
   Insn 92(l0): point = 561
   Insn 91(l0): point = 563
   Insn 90(l0): point = 565
   Insn 89(l0): point = 567
   Insn 88(l0): point = 569
   Insn 87(l0): point = 571
   Insn 86(l0): point = 573
   Insn 85(l0): point = 575
   Insn 84(l0): point = 577
   Insn 83(l0): point = 579
   Insn 82(l0): point = 581
   Insn 81(l0): point = 583
   Insn 80(l0): point = 585
   Insn 79(l0): point = 587
   Insn 78(l0): point = 589
   Insn 77(l0): point = 591
   Insn 76(l0): point = 593
   Insn 75(l0): point = 595
   Insn 74(l0): point = 597
   Insn 73(l0): point = 599
   Insn 72(l0): point = 601
   Insn 71(l0): point = 603
   Insn 70(l0): point = 605
   Insn 69(l0): point = 607
   Insn 68(l0): point = 609
   Insn 67(l0): point = 611
   Insn 66(l0): point = 613
   Insn 65(l0): point = 615
   Insn 64(l0): point = 617
   Insn 63(l0): point = 619
   Insn 62(l0): point = 621
   Insn 61(l0): point = 623
   Insn 60(l0): point = 625
   Insn 59(l0): point = 627
   Insn 58(l0): point = 629
   Insn 57(l0): point = 631
   Insn 56(l0): point = 633
   Insn 55(l0): point = 635
   Insn 54(l0): point = 637
   Insn 53(l0): point = 639
   Insn 52(l0): point = 641
   Insn 51(l0): point = 643
   Insn 50(l0): point = 645
   Insn 49(l0): point = 647
   Insn 48(l0): point = 649
   Insn 47(l0): point = 651
   Insn 46(l0): point = 653
   Insn 45(l0): point = 655
   Insn 44(l0): point = 657
   Insn 43(l0): point = 659
   Insn 42(l0): point = 661
   Insn 41(l0): point = 663
   Insn 40(l0): point = 665
   Insn 39(l0): point = 667
   Insn 38(l0): point = 669
   Insn 37(l0): point = 671
   Insn 36(l0): point = 673
   Insn 35(l0): point = 675
   Insn 34(l0): point = 677
   Insn 33(l0): point = 679
   Insn 32(l0): point = 681
   Insn 31(l0): point = 683
   Insn 400(l0): point = 686
   Insn 26(l0): point = 688
   Insn 25(l0): point = 690
   Insn 24(l0): point = 692
   Insn 23(l0): point = 694
   Insn 22(l0): point = 696
   Insn 21(l0): point = 698
   Insn 19(l0): point = 701
   Insn 18(l0): point = 703
   Insn 17(l0): point = 705
   Insn 16(l0): point = 707
   Insn 15(l0): point = 709
   Insn 14(l0): point = 711
   Insn 13(l0): point = 713
   Insn 12(l0): point = 715
   Insn 11(l0): point = 717
   Insn 8(l0): point = 719
   Insn 6(l0): point = 721
   Insn 5(l0): point = 723
   Insn 4(l0): point = 725
   Insn 3(l0): point = 727
   Insn 2(l0): point = 729
 a0(r155): [11..12]
 a1(r87): [686..688] [13..15]
 a2(r249): [21..22]
 a3(r248): [56..61]
 a4(r154): [60..63]
 a5(r153): [64..65]
 a6(r147): [64..87]
 a7(r152): [66..67]
 a8(r151): [68..69]
 a9(r150): [68..73]
 a10(r247): [70..71]
 a11(r149): [74..75]
 a12(r246): [76..77]
 a13(r245): [78..79]
 a14(r148): [80..83]
 a15(r244): [80..81]
 a16(r243): [84..85]
 a17(r146): [88..89]
 a18(r242): [90..91]
 a19(r145): [90..93]
 a20(r144): [94..95]
 a21(r241): [96..97]
 a22(r240): [102..107]
 a23(r239): [106..109]
 a24(r143): [33..34]
 a25(r238): [35..36]
 a26(r237): [37..38]
 a27(r142): [39..42]
 a28(r236): [39..40]
 a29(r235): [43..44]
 a30(r234): [141..146]
 a31(r141): [145..148]
 a32(r140): [149..150]
 a33(r138): [149..156]
 a34(r139): [151..152]
 a35(r233): [153..154]
 a36(r137): [157..158]
 a37(r232): [159..160]
 a38(r136): [159..162]
 a39(r135): [163..164]
 a40(r231): [165..166]
 a41(r230): [171..176]
 a42(r229): [175..178]
 a43(r134): [118..119]
 a44(r228): [120..121]
 a45(r227): [122..123]
 a46(r133): [124..127]
 a47(r226): [124..125]
 a48(r225): [128..129]
 a49(r224): [202..207]
 a50(r132): [206..209]
 a51(r131): [210..211]
 a52(r128): [210..219]
 a53(r130): [212..213]
 a54(r129): [214..215]
 a55(r223): [216..217]
 a56(r127): [220..221]
 a57(r222): [222..223]
 a58(r126): [222..225]
 a59(r125): [226..227]
 a60(r221): [228..229]
 a61(r220): [234..239]
 a62(r219): [238..241]
 a63(r218): [248..253]
 a64(r124): [252..255]
 a65(r123): [256..257]
 a66(r121): [256..263]
 a67(r122): [258..259]
 a68(r217): [260..261]
 a69(r120): [264..265]
 a70(r216): [266..267]
 a71(r119): [266..269]
 a72(r118): [270..271]
 a73(r215): [272..273]
 a74(r214): [278..283]
 a75(r213): [282..285]
 a76(r117): [187..188]
 a77(r212): [189..190]
 a78(r116): [294..295]
 a79(r115): [300..305]
 a80(r211): [306..307]
 a81(r114): [312..319]
 a82(r210): [316..317]
 a83(r209): [320..321]
 a84(r208): [328..333]
 a85(r113): [332..335]
 a86(r207): [336..337]
 a87(r206): [342..347]
 a88(r205): [346..349]
 a89(r204): [356..361]
 a90(r112): [360..363]
 a91(r203): [364..365]
 a92(r202): [370..375]
 a93(r201): [374..377]
 a94(r200): [384..389]
 a95(r111): [388..391]
 a96(r199): [392..393]
 a97(r198): [398..403]
 a98(r197): [402..405]
 a99(r196): [412..417]
 a100(r110): [416..419]
 a101(r195): [420..421]
 a102(r194): [426..431]
 a103(r193): [430..433]
 a104(r192): [440..445]
 a105(r109): [444..447]
 a106(r191): [448..449]
 a107(r190): [454..459]
 a108(r189): [458..461]
 a109(r188): [468..473]
 a110(r108): [472..475]
 a111(r187): [476..477]
 a112(r186): [482..487]
 a113(r185): [486..489]
 a114(r184): [496..501]
 a115(r107): [500..503]
 a116(r183): [504..505]
 a117(r182): [510..515]
 a118(r181): [514..517]
 a119(r180): [524..529]
 a120(r106): [528..531]
 a121(r179): [532..533]
 a122(r178): [538..543]
 a123(r177): [542..545]
 a124(r176): [552..557]
 a125(r105): [556..559]
 a126(r175): [560..561]
 a127(r174): [566..571]
 a128(r173): [570..573]
 a129(r172): [580..585]
 a130(r104): [584..587]
 a131(r171): [588..589]
 a132(r170): [594..599]
 a133(r169): [598..601]
 a134(r99): [604..621]
 a135(r103): [604..605]
 a136(r168): [606..607]
 a137(r102): [612..613]
 a138(r101): [614..615]
 a139(r100): [616..617]
 a140(r167): [618..619]
 a141(r166): [622..623]
 a142(r98): [622..625]
 a143(r97): [626..627]
 a144(r165): [628..629]
 a145(r92): [632..649]
 a146(r96): [632..633]
 a147(r164): [634..635]
 a148(r95): [640..641]
 a149(r94): [642..643]
 a150(r93): [644..645]
 a151(r163): [646..647]
 a152(r162): [650..651]
 a153(r91): [650..653]
 a154(r90): [654..655]
 a155(r161): [656..657]
 a156(r160): [664..669]
 a157(r89): [668..671]
 a158(r159): [676..681]
 a159(r158): [680..683]
 a160(r157): [697..698]
 a161(r88): [706..707]
 a162(r156): [712..715]
Compressing live ranges: from 732 to 234 - 31%
Ranges after the compression:
 a0(r155): [0..1]
 a1(r87): [226..227] [2..3]
 a2(r249): [4..5]
 a3(r248): [16..17]
 a4(r154): [16..17]
 a5(r153): [18..19]
 a6(r147): [18..35]
 a7(r152): [20..21]
 a8(r151): [22..23]
 a9(r150): [22..25]
 a10(r247): [24..25]
 a11(r149): [26..27]
 a12(r246): [28..29]
 a13(r245): [30..31]
 a14(r148): [32..33]
 a15(r244): [32..33]
 a16(r243): [34..35]
 a17(r146): [36..37]
 a18(r242): [38..39]
 a19(r145): [38..39]
 a20(r144): [40..41]
 a21(r241): [42..43]
 a22(r240): [44..45]
 a23(r239): [44..45]
 a24(r143): [6..7]
 a25(r238): [8..9]
 a26(r237): [10..11]
 a27(r142): [12..13]
 a28(r236): [12..13]
 a29(r235): [14..15]
 a30(r234): [56..57]
 a31(r141): [56..57]
 a32(r140): [58..59]
 a33(r138): [58..63]
 a34(r139): [60..61]
 a35(r233): [62..63]
 a36(r137): [64..65]
 a37(r232): [66..67]
 a38(r136): [66..67]
 a39(r135): [68..69]
 a40(r231): [70..71]
 a41(r230): [72..73]
 a42(r229): [72..73]
 a43(r134): [46..47]
 a44(r228): [48..49]
 a45(r227): [50..51]
 a46(r133): [52..53]
 a47(r226): [52..53]
 a48(r225): [54..55]
 a49(r224): [78..79]
 a50(r132): [78..79]
 a51(r131): [80..81]
 a52(r128): [80..87]
 a53(r130): [82..83]
 a54(r129): [84..85]
 a55(r223): [86..87]
 a56(r127): [88..89]
 a57(r222): [90..91]
 a58(r126): [90..91]
 a59(r125): [92..93]
 a60(r221): [94..95]
 a61(r220): [96..97]
 a62(r219): [96..97]
 a63(r218): [98..99]
 a64(r124): [98..99]
 a65(r123): [100..101]
 a66(r121): [100..105]
 a67(r122): [102..103]
 a68(r217): [104..105]
 a69(r120): [106..107]
 a70(r216): [108..109]
 a71(r119): [108..109]
 a72(r118): [110..111]
 a73(r215): [112..113]
 a74(r214): [114..115]
 a75(r213): [114..115]
 a76(r117): [74..75]
 a77(r212): [76..77]
 a78(r116): [116..117]
 a79(r115): [118..119]
 a80(r211): [120..121]
 a81(r114): [122..123]
 a82(r210): [122..123]
 a83(r209): [124..125]
 a84(r208): [126..127]
 a85(r113): [126..127]
 a86(r207): [128..129]
 a87(r206): [130..131]
 a88(r205): [130..131]
 a89(r204): [132..133]
 a90(r112): [132..133]
 a91(r203): [134..135]
 a92(r202): [136..137]
 a93(r201): [136..137]
 a94(r200): [138..139]
 a95(r111): [138..139]
 a96(r199): [140..141]
 a97(r198): [142..143]
 a98(r197): [142..143]
 a99(r196): [144..145]
 a100(r110): [144..145]
 a101(r195): [146..147]
 a102(r194): [148..149]
 a103(r193): [148..149]
 a104(r192): [150..151]
 a105(r109): [150..151]
 a106(r191): [152..153]
 a107(r190): [154..155]
 a108(r189): [154..155]
 a109(r188): [156..157]
 a110(r108): [156..157]
 a111(r187): [158..159]
 a112(r186): [160..161]
 a113(r185): [160..161]
 a114(r184): [162..163]
 a115(r107): [162..163]
 a116(r183): [164..165]
 a117(r182): [166..167]
 a118(r181): [166..167]
 a119(r180): [168..169]
 a120(r106): [168..169]
 a121(r179): [170..171]
 a122(r178): [172..173]
 a123(r177): [172..173]
 a124(r176): [174..175]
 a125(r105): [174..175]
 a126(r175): [176..177]
 a127(r174): [178..179]
 a128(r173): [178..179]
 a129(r172): [180..181]
 a130(r104): [180..181]
 a131(r171): [182..183]
 a132(r170): [184..185]
 a133(r169): [184..185]
 a134(r99): [186..197]
 a135(r103): [186..187]
 a136(r168): [188..189]
 a137(r102): [190..191]
 a138(r101): [192..193]
 a139(r100): [194..195]
 a140(r167): [196..197]
 a141(r166): [198..199]
 a142(r98): [198..199]
 a143(r97): [200..201]
 a144(r165): [202..203]
 a145(r92): [204..215]
 a146(r96): [204..205]
 a147(r164): [206..207]
 a148(r95): [208..209]
 a149(r94): [210..211]
 a150(r93): [212..213]
 a151(r163): [214..215]
 a152(r162): [216..217]
 a153(r91): [216..217]
 a154(r90): [218..219]
 a155(r161): [220..221]
 a156(r160): [222..223]
 a157(r89): [222..223]
 a158(r159): [224..225]
 a159(r158): [224..225]
 a160(r157): [228..229]
 a161(r88): [230..231]
 a162(r156): [232..233]
  regions=1, blocks=20, points=234
    allocnos=163 (big 0), copies=0, conflicts=0, ranges=164
Disposition:
    1:r87  l0     0  161:r88  l0     0  157:r89  l0     1  154:r90  l0     0
  153:r91  l0     1  145:r92  l0     3  150:r93  l0     0  149:r94  l0     0
  148:r95  l0     0  146:r96  l0     0  143:r97  l0     0  142:r98  l0     1
  134:r99  l0     3  139:r100 l0     0  138:r101 l0     0  137:r102 l0     0
  135:r103 l0     0  130:r104 l0     1  125:r105 l0     1  120:r106 l0     1
  115:r107 l0     1  110:r108 l0     1  105:r109 l0     1  100:r110 l0     1
   95:r111 l0     1   90:r112 l0     1   85:r113 l0     1   81:r114 l0     2
   79:r115 l0     0   78:r116 l0     0   76:r117 l0     0   72:r118 l0     0
   71:r119 l0     1   69:r120 l0     0   66:r121 l0     0   67:r122 l0     1
   65:r123 l0     1   64:r124 l0     1   59:r125 l0     0   58:r126 l0     1
   56:r127 l0     0   52:r128 l0     0   54:r129 l0     1   53:r130 l0     1
   51:r131 l0     1   50:r132 l0     1   46:r133 l0     0   43:r134 l0     0
   39:r135 l0     0   38:r136 l0     1   36:r137 l0     0   33:r138 l0     0
   34:r139 l0     1   32:r140 l0     1   31:r141 l0     1   27:r142 l0     0
   24:r143 l0     0   20:r144 l0     0   19:r145 l0     1   17:r146 l0     0
    6:r147 l0     1   14:r148 l0     0   11:r149 l0     0    9:r150 l0     2
    8:r151 l0     0    7:r152 l0     0    5:r153 l0     0    4:r154 l0     1
    0:r155 l0     0  162:r156 l0     0  160:r157 l0     0  159:r158 l0     1
  158:r159 l0     0  156:r160 l0     0  155:r161 l0     0  152:r162 l0     0
  151:r163 l0     0  147:r164 l0     0  144:r165 l0     0  141:r166 l0     0
  140:r167 l0     0  136:r168 l0     0  133:r169 l0     1  132:r170 l0     0
  131:r171 l0     0  129:r172 l0     0  128:r173 l0     1  127:r174 l0     0
  126:r175 l0     0  124:r176 l0     0  123:r177 l0     1  122:r178 l0     0
  121:r179 l0     0  119:r180 l0     0  118:r181 l0     1  117:r182 l0     0
  116:r183 l0     0  114:r184 l0     0  113:r185 l0     1  112:r186 l0     0
  111:r187 l0     0  109:r188 l0     0  108:r189 l0     1  107:r190 l0     0
  106:r191 l0     0  104:r192 l0     0  103:r193 l0     1  102:r194 l0     0
  101:r195 l0     0   99:r196 l0     0   98:r197 l0     1   97:r198 l0     0
   96:r199 l0     0   94:r200 l0     0   93:r201 l0     1   92:r202 l0     0
   91:r203 l0     0   89:r204 l0     0   88:r205 l0     1   87:r206 l0     0
   86:r207 l0     0   84:r208 l0     0   83:r209 l0     0   82:r210 l0     0
   80:r211 l0     0   77:r212 l0     0   75:r213 l0     1   74:r214 l0     0
   73:r215 l0     0   70:r216 l0     0   68:r217 l0     1   63:r218 l0     0
   62:r219 l0     1   61:r220 l0     0   60:r221 l0     0   57:r222 l0     0
   55:r223 l0     1   49:r224 l0     0   48:r225 l0     0   47:r226 l0     1
   45:r227 l0     0   44:r228 l0     0   42:r229 l0     1   41:r230 l0     0
   40:r231 l0     0   37:r232 l0     0   35:r233 l0     1   30:r234 l0     0
   29:r235 l0     0   28:r236 l0     1   26:r237 l0     0   25:r238 l0     0
   23:r239 l0     1   22:r240 l0     0   21:r241 l0     0   18:r242 l0     0
   16:r243 l0     0   15:r244 l0     2   13:r245 l0     0   12:r246 l0     0
   10:r247 l0     0    3:r248 l0     0    2:r249 l0     0
+++Costs: overall -61, reg -61, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


int read_nmr_text(char*, float**, Header*, float**, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={56d,22u} r1={71d,33u} r2={39d,1u} r4={73d,35u} r5={76d,38u} r6={1d,19u} r7={1d,57u} r8={38d} r9={38d} r10={38d} r11={38d} r12={38d} r13={38d} r14={38d} r15={38d} r16={1d,18u} r17={124d,7u} r18={38d} r19={38d} r20={1d,126u,18e} r21={39d} r22={39d} r23={39d} r24={39d} r25={39d} r26={39d} r27={39d} r28={39d} r29={38d} r30={38d} r31={38d} r32={38d} r33={38d} r34={38d} r35={38d} r36={38d} r37={39d,1u} r38={39d} r39={38d} r40={38d} r45={38d} r46={38d} r47={38d} r48={38d} r49={38d} r50={38d} r51={38d} r52={38d} r53={38d} r54={38d} r55={38d} r56={38d} r57={38d} r58={38d} r59={38d} r60={38d} r61={38d} r62={38d} r63={38d} r64={38d} r65={38d} r66={38d} r67={38d} r68={38d} r69={38d} r70={38d} r71={38d} r72={38d} r73={38d} r74={38d} r75={38d} r76={38d} r77={38d} r78={38d} r79={38d} r80={38d} r87={2d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u,1e} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u,1e} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u,1e} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u,1e} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,2u} r134={1d,1u} r135={1d,1u} r136={1d,1u,1e} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,2u} r143={1d,1u} r144={1d,1u} r145={1d,1u,1e} r146={1d,1u} r147={1d,1u} r148={1d,2u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} 
;;    total ref usage 3672{3125d,523u,24e} in 357{319 regular + 38 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 156
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])
        (reg:DI 5 di [ filename ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ filename ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
        (reg:DI 4 si [ out_data ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ out_data ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
        (reg:DI 1 dx [ header ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ header ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -144 [0xffffffffffffff70])) [0 scratch_data+0 S8 A64])
        (reg:DI 2 cx [ scratch_data ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ scratch_data ])
        (nil)))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -148 [0xffffffffffffff6c])) [0 fn+0 S4 A32])
        (reg:SI 37 r8 [ fn ])) fmtext_o.cpp:374 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 37 r8 [ fn ])
        (nil)))
(note 7 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 7 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.6729+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:374 986 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:376 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7fa2a186b360 *.LC22>)) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 156)) fmtext_o.cpp:382 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 156)
        (nil)))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fa2a1ac8510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:382 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 16 15 17 2 (set (reg/f:DI 88 [ D.6720 ])
        (reg:DI 0 ax)) fmtext_o.cpp:382 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
        (reg/f:DI 88 [ D.6720 ])) fmtext_o.cpp:382 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ D.6720 ])
        (nil)))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:385 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) fmtext_o.cpp:385 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 157
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg:DI 157)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])) fmtext_o.cpp:386 89 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:DI 4 si)
        (reg:DI 157)) fmtext_o.cpp:386 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 157)
        (nil)))
(insn 23 22 24 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7fa2a186b3f0 *.LC23>)) fmtext_o.cpp:386 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:386 93 {*movqi_internal}
     (nil))
(call_insn 25 24 26 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2a1d0a5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:386 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 26 25 400 3 (set (reg:SI 87 [ D.6719 ])
        (const_int 0 [0])) fmtext_o.cpp:387 90 {*movsi_internal}
     (nil))
(jump_insn 400 26 401 3 (set (pc)
        (label_ref 384)) fmtext_o.cpp:387 654 {jump}
     (nil)
 -> 384)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 401 400 29)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211
(code_label 29 401 30 4 80 "" [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg:DI 158)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:390 89 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:DI 159)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:390 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 33 32 34 4 (set (reg:DI 1 dx)
        (reg:DI 158)) fmtext_o.cpp:390 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 158)
        (nil)))
(insn 34 33 35 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:390 90 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 5 di)
        (reg:DI 159)) fmtext_o.cpp:390 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 159)
        (nil)))
(call_insn 36 35 37 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:390 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 37 36 38 4 (set (reg/f:DI 89 [ D.6721 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:391 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 160)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:391 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 39 38 40 4 (set (reg:DI 1 dx)
        (reg/f:DI 89 [ D.6721 ])) fmtext_o.cpp:391 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ D.6721 ])
        (nil)))
(insn 40 39 41 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7fa2a186b480 *.LC24>)) fmtext_o.cpp:391 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 5 di)
        (reg:DI 160)) fmtext_o.cpp:391 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 160)
        (nil)))
(insn 42 41 43 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:391 93 {*movqi_internal}
     (nil))
(call_insn 43 42 44 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:391 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 44 43 45 4 (set (reg:SI 161)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -148 [0xffffffffffffff6c])) [0 fn+0 S4 A32])) fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 90 [ D.6722 ])
        (sign_extend:DI (reg:SI 161))) fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 161)
        (nil)))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 91 [ D.6722 ])
                (ashift:DI (reg:DI 90 [ D.6722 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:393 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 90 [ D.6722 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 47 46 48 4 (set (reg/f:DI 162)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg/f:DI 92 [ D.6723 ])
                (plus:DI (reg:DI 91 [ D.6722 ])
                    (reg/f:DI 162)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:393 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 162)
        (expr_list:REG_DEAD (reg:DI 91 [ D.6722 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
                        (reg:DI 91 [ D.6722 ]))
                    (nil))))))
(insn 49 48 50 4 (set (reg/f:DI 163)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:SI 93 [ D.6719 ])
        (mem/j:SI (reg/f:DI 163) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:393 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 163)
        (nil)))
(insn 51 50 52 4 (set (reg:DI 94 [ D.6722 ])
        (sign_extend:DI (reg:SI 93 [ D.6719 ]))) fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 93 [ D.6719 ])
        (nil)))
(insn 52 51 53 4 (parallel [
            (set (reg:DI 95 [ D.6722 ])
                (ashift:DI (reg:DI 94 [ D.6722 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:393 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 94 [ D.6722 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 53 52 54 4 (set (reg:DI 5 di)
        (reg:DI 95 [ D.6722 ])) fmtext_o.cpp:393 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95 [ D.6722 ])
        (nil)))
(call_insn 54 53 55 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:393 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 55 54 56 4 (set (reg/f:DI 164)
        (reg:DI 0 ax)) fmtext_o.cpp:393 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 164)
            (nil))))
(insn 56 55 57 4 (set (reg/f:DI 96 [ D.6724 ])
        (reg/f:DI 164)) fmtext_o.cpp:393 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 164)
        (nil)))
(insn 57 56 58 4 (set (mem/f:DI (reg/f:DI 92 [ D.6723 ]) [0 *_28+0 S8 A64])
        (reg/f:DI 96 [ D.6724 ])) fmtext_o.cpp:393 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ D.6724 ])
        (expr_list:REG_DEAD (reg/f:DI 92 [ D.6723 ])
            (nil))))
(insn 58 57 59 4 (set (reg:SI 165)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -148 [0xffffffffffffff6c])) [0 fn+0 S4 A32])) fmtext_o.cpp:394 90 {*movsi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DI 97 [ D.6722 ])
        (sign_extend:DI (reg:SI 165))) fmtext_o.cpp:394 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 165)
        (nil)))
(insn 60 59 61 4 (parallel [
            (set (reg:DI 98 [ D.6722 ])
                (ashift:DI (reg:DI 97 [ D.6722 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:394 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 97 [ D.6722 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 61 60 62 4 (set (reg/f:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -144 [0xffffffffffffff70])) [0 scratch_data+0 S8 A64])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg/f:DI 99 [ D.6723 ])
                (plus:DI (reg:DI 98 [ D.6722 ])
                    (reg/f:DI 166)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:394 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 166)
        (expr_list:REG_DEAD (reg:DI 98 [ D.6722 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -144 [0xffffffffffffff70])) [0 scratch_data+0 S8 A64])
                        (reg:DI 98 [ D.6722 ]))
                    (nil))))))
(insn 63 62 64 4 (set (reg/f:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:SI 100 [ D.6719 ])
        (mem/j:SI (reg/f:DI 167) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:394 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (nil)))
(insn 65 64 66 4 (set (reg:DI 101 [ D.6722 ])
        (sign_extend:DI (reg:SI 100 [ D.6719 ]))) fmtext_o.cpp:394 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 100 [ D.6719 ])
        (nil)))
(insn 66 65 67 4 (parallel [
            (set (reg:DI 102 [ D.6722 ])
                (ashift:DI (reg:DI 101 [ D.6722 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:394 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 101 [ D.6722 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 67 66 68 4 (set (reg:DI 5 di)
        (reg:DI 102 [ D.6722 ])) fmtext_o.cpp:394 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 102 [ D.6722 ])
        (nil)))
(call_insn 68 67 69 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:394 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 69 68 70 4 (set (reg/f:DI 168)
        (reg:DI 0 ax)) fmtext_o.cpp:394 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 168)
            (nil))))
(insn 70 69 71 4 (set (reg/f:DI 103 [ D.6724 ])
        (reg/f:DI 168)) fmtext_o.cpp:394 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168)
        (nil)))
(insn 71 70 72 4 (set (mem/f:DI (reg/f:DI 99 [ D.6723 ]) [0 *_38+0 S8 A64])
        (reg/f:DI 103 [ D.6724 ])) fmtext_o.cpp:394 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ D.6724 ])
        (expr_list:REG_DEAD (reg/f:DI 99 [ D.6723 ])
            (nil))))
(insn 72 71 73 4 (set (reg:DI 169)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:396 89 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (parallel [
            (set (reg:DI 170)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:396 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 74 73 75 4 (set (reg:DI 1 dx)
        (reg:DI 169)) fmtext_o.cpp:396 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 169)
        (nil)))
(insn 75 74 76 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:396 90 {*movsi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:DI 5 di)
        (reg:DI 170)) fmtext_o.cpp:396 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 170)
        (nil)))
(call_insn 77 76 78 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:396 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 78 77 79 4 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:397 89 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (parallel [
            (set (reg/f:DI 104 [ D.6721 ])
                (plus:DI (reg/f:DI 171)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:397 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 4 [0x4]))
                (nil)))))
(insn 80 79 81 4 (parallel [
            (set (reg:DI 172)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:397 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 81 80 82 4 (set (reg:DI 1 dx)
        (reg/f:DI 104 [ D.6721 ])) fmtext_o.cpp:397 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ D.6721 ])
        (nil)))
(insn 82 81 83 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7fa2a186b480 *.LC24>)) fmtext_o.cpp:397 89 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (set (reg:DI 5 di)
        (reg:DI 172)) fmtext_o.cpp:397 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 172)
        (nil)))
(insn 84 83 85 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:397 93 {*movqi_internal}
     (nil))
(call_insn 85 84 86 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:397 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 86 85 87 4 (set (reg:DI 173)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:399 89 {*movdi_internal}
     (nil))
(insn 87 86 88 4 (parallel [
            (set (reg:DI 174)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:399 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 88 87 89 4 (set (reg:DI 1 dx)
        (reg:DI 173)) fmtext_o.cpp:399 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 173)
        (nil)))
(insn 89 88 90 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:399 90 {*movsi_internal}
     (nil))
(insn 90 89 91 4 (set (reg:DI 5 di)
        (reg:DI 174)) fmtext_o.cpp:399 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 174)
        (nil)))
(call_insn 91 90 92 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:399 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 92 91 93 4 (set (reg/f:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:400 89 {*movdi_internal}
     (nil))
(insn 93 92 94 4 (parallel [
            (set (reg/f:DI 105 [ D.6725 ])
                (plus:DI (reg/f:DI 175)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:400 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 175)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 8 [0x8]))
                (nil)))))
(insn 94 93 95 4 (parallel [
            (set (reg:DI 176)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:400 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 95 94 96 4 (set (reg:DI 1 dx)
        (reg/f:DI 105 [ D.6725 ])) fmtext_o.cpp:400 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ D.6725 ])
        (nil)))
(insn 96 95 97 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fa2a186b510 *.LC25>)) fmtext_o.cpp:400 89 {*movdi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:DI 5 di)
        (reg:DI 176)) fmtext_o.cpp:400 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 176)
        (nil)))
(insn 98 97 99 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:400 93 {*movqi_internal}
     (nil))
(call_insn 99 98 100 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:400 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 100 99 101 4 (set (reg:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:402 89 {*movdi_internal}
     (nil))
(insn 101 100 102 4 (parallel [
            (set (reg:DI 178)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:402 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 102 101 103 4 (set (reg:DI 1 dx)
        (reg:DI 177)) fmtext_o.cpp:402 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 177)
        (nil)))
(insn 103 102 104 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:402 90 {*movsi_internal}
     (nil))
(insn 104 103 105 4 (set (reg:DI 5 di)
        (reg:DI 178)) fmtext_o.cpp:402 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 178)
        (nil)))
(call_insn 105 104 106 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:402 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 106 105 107 4 (set (reg/f:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:403 89 {*movdi_internal}
     (nil))
(insn 107 106 108 4 (parallel [
            (set (reg/f:DI 106 [ D.6726 ])
                (plus:DI (reg/f:DI 179)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:403 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 16 [0x10]))
                (nil)))))
(insn 108 107 109 4 (parallel [
            (set (reg:DI 180)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:403 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 109 108 110 4 (set (reg:DI 1 dx)
        (reg/f:DI 106 [ D.6726 ])) fmtext_o.cpp:403 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ D.6726 ])
        (nil)))
(insn 110 109 111 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7fa2a186b5a0 *.LC26>)) fmtext_o.cpp:403 89 {*movdi_internal}
     (nil))
(insn 111 110 112 4 (set (reg:DI 5 di)
        (reg:DI 180)) fmtext_o.cpp:403 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 180)
        (nil)))
(insn 112 111 113 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:403 93 {*movqi_internal}
     (nil))
(call_insn 113 112 114 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:403 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 114 113 115 4 (set (reg:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:405 89 {*movdi_internal}
     (nil))
(insn 115 114 116 4 (parallel [
            (set (reg:DI 182)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:405 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 116 115 117 4 (set (reg:DI 1 dx)
        (reg:DI 181)) fmtext_o.cpp:405 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 181)
        (nil)))
(insn 117 116 118 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:405 90 {*movsi_internal}
     (nil))
(insn 118 117 119 4 (set (reg:DI 5 di)
        (reg:DI 182)) fmtext_o.cpp:405 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 182)
        (nil)))
(call_insn 119 118 120 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:405 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 120 119 121 4 (set (reg/f:DI 183)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:406 89 {*movdi_internal}
     (nil))
(insn 121 120 122 4 (parallel [
            (set (reg/f:DI 107 [ D.6721 ])
                (plus:DI (reg/f:DI 183)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:406 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 183)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 24 [0x18]))
                (nil)))))
(insn 122 121 123 4 (parallel [
            (set (reg:DI 184)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:406 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 123 122 124 4 (set (reg:DI 1 dx)
        (reg/f:DI 107 [ D.6721 ])) fmtext_o.cpp:406 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ D.6721 ])
        (nil)))
(insn 124 123 125 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7fa2a186b480 *.LC24>)) fmtext_o.cpp:406 89 {*movdi_internal}
     (nil))
(insn 125 124 126 4 (set (reg:DI 5 di)
        (reg:DI 184)) fmtext_o.cpp:406 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 184)
        (nil)))
(insn 126 125 127 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:406 93 {*movqi_internal}
     (nil))
(call_insn 127 126 128 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:406 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 128 127 129 4 (set (reg:DI 185)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 129 128 130 4 (parallel [
            (set (reg:DI 186)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:408 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 130 129 131 4 (set (reg:DI 1 dx)
        (reg:DI 185)) fmtext_o.cpp:408 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 185)
        (nil)))
(insn 131 130 132 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:408 90 {*movsi_internal}
     (nil))
(insn 132 131 133 4 (set (reg:DI 5 di)
        (reg:DI 186)) fmtext_o.cpp:408 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 186)
        (nil)))
(call_insn 133 132 134 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:408 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 134 133 135 4 (set (reg/f:DI 187)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 135 134 136 4 (parallel [
            (set (reg/f:DI 108 [ D.6727 ])
                (plus:DI (reg/f:DI 187)
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:409 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 187)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 28 [0x1c]))
                (nil)))))
(insn 136 135 137 4 (parallel [
            (set (reg:DI 188)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:409 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 137 136 138 4 (set (reg:DI 1 dx)
        (reg/f:DI 108 [ D.6727 ])) fmtext_o.cpp:409 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ D.6727 ])
        (nil)))
(insn 138 137 139 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7fa2a186b480 *.LC24>)) fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 139 138 140 4 (set (reg:DI 5 di)
        (reg:DI 188)) fmtext_o.cpp:409 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 188)
        (nil)))
(insn 140 139 141 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:409 93 {*movqi_internal}
     (nil))
(call_insn 141 140 142 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:409 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 142 141 143 4 (set (reg:DI 189)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 143 142 144 4 (parallel [
            (set (reg:DI 190)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:411 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 144 143 145 4 (set (reg:DI 1 dx)
        (reg:DI 189)) fmtext_o.cpp:411 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 189)
        (nil)))
(insn 145 144 146 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:411 90 {*movsi_internal}
     (nil))
(insn 146 145 147 4 (set (reg:DI 5 di)
        (reg:DI 190)) fmtext_o.cpp:411 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 190)
        (nil)))
(call_insn 147 146 148 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:411 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 148 147 149 4 (set (reg/f:DI 191)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(insn 149 148 150 4 (parallel [
            (set (reg/f:DI 109 [ D.6727 ])
                (plus:DI (reg/f:DI 191)
                    (const_int 108 [0x6c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:412 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 108 [0x6c]))
                (nil)))))
(insn 150 149 151 4 (parallel [
            (set (reg:DI 192)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:412 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 151 150 152 4 (set (reg:DI 1 dx)
        (reg/f:DI 109 [ D.6727 ])) fmtext_o.cpp:412 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ D.6727 ])
        (nil)))
(insn 152 151 153 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7fa2a186b630 *.LC27>)) fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(insn 153 152 154 4 (set (reg:DI 5 di)
        (reg:DI 192)) fmtext_o.cpp:412 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 192)
        (nil)))
(insn 154 153 155 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:412 93 {*movqi_internal}
     (nil))
(call_insn 155 154 156 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:412 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 156 155 157 4 (set (reg:DI 193)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 157 156 158 4 (parallel [
            (set (reg:DI 194)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:414 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 158 157 159 4 (set (reg:DI 1 dx)
        (reg:DI 193)) fmtext_o.cpp:414 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 193)
        (nil)))
(insn 159 158 160 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:414 90 {*movsi_internal}
     (nil))
(insn 160 159 161 4 (set (reg:DI 5 di)
        (reg:DI 194)) fmtext_o.cpp:414 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 194)
        (nil)))
(call_insn 161 160 162 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:414 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 162 161 163 4 (set (reg/f:DI 195)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(insn 163 162 164 4 (parallel [
            (set (reg/f:DI 110 [ D.6727 ])
                (plus:DI (reg/f:DI 195)
                    (const_int 188 [0xbc])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:415 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 195)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 188 [0xbc]))
                (nil)))))
(insn 164 163 165 4 (parallel [
            (set (reg:DI 196)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:415 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 165 164 166 4 (set (reg:DI 1 dx)
        (reg/f:DI 110 [ D.6727 ])) fmtext_o.cpp:415 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110 [ D.6727 ])
        (nil)))
(insn 166 165 167 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7fa2a186b630 *.LC27>)) fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(insn 167 166 168 4 (set (reg:DI 5 di)
        (reg:DI 196)) fmtext_o.cpp:415 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 196)
        (nil)))
(insn 168 167 169 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:415 93 {*movqi_internal}
     (nil))
(call_insn 169 168 170 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:415 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 170 169 171 4 (set (reg:DI 197)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:417 89 {*movdi_internal}
     (nil))
(insn 171 170 172 4 (parallel [
            (set (reg:DI 198)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:417 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 172 171 173 4 (set (reg:DI 1 dx)
        (reg:DI 197)) fmtext_o.cpp:417 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 197)
        (nil)))
(insn 173 172 174 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:417 90 {*movsi_internal}
     (nil))
(insn 174 173 175 4 (set (reg:DI 5 di)
        (reg:DI 198)) fmtext_o.cpp:417 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 198)
        (nil)))
(call_insn 175 174 176 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:417 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 176 175 177 4 (set (reg/f:DI 199)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 177 176 178 4 (parallel [
            (set (reg/f:DI 111 [ D.6727 ])
                (plus:DI (reg/f:DI 199)
                    (const_int 268 [0x10c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:418 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 199)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 268 [0x10c]))
                (nil)))))
(insn 178 177 179 4 (parallel [
            (set (reg:DI 200)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:418 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 179 178 180 4 (set (reg:DI 1 dx)
        (reg/f:DI 111 [ D.6727 ])) fmtext_o.cpp:418 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 111 [ D.6727 ])
        (nil)))
(insn 180 179 181 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7fa2a186b630 *.LC27>)) fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 181 180 182 4 (set (reg:DI 5 di)
        (reg:DI 200)) fmtext_o.cpp:418 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 200)
        (nil)))
(insn 182 181 183 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:418 93 {*movqi_internal}
     (nil))
(call_insn 183 182 184 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:418 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 184 183 185 4 (set (reg:DI 201)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:420 89 {*movdi_internal}
     (nil))
(insn 185 184 186 4 (parallel [
            (set (reg:DI 202)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:420 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 186 185 187 4 (set (reg:DI 1 dx)
        (reg:DI 201)) fmtext_o.cpp:420 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 201)
        (nil)))
(insn 187 186 188 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:420 90 {*movsi_internal}
     (nil))
(insn 188 187 189 4 (set (reg:DI 5 di)
        (reg:DI 202)) fmtext_o.cpp:420 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 202)
        (nil)))
(call_insn 189 188 190 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:420 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 190 189 191 4 (set (reg/f:DI 203)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:421 89 {*movdi_internal}
     (nil))
(insn 191 190 192 4 (parallel [
            (set (reg/f:DI 112 [ D.6727 ])
                (plus:DI (reg/f:DI 203)
                    (const_int 348 [0x15c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:421 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 203)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 348 [0x15c]))
                (nil)))))
(insn 192 191 193 4 (parallel [
            (set (reg:DI 204)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:421 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 193 192 194 4 (set (reg:DI 1 dx)
        (reg/f:DI 112 [ D.6727 ])) fmtext_o.cpp:421 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ D.6727 ])
        (nil)))
(insn 194 193 195 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7fa2a186b630 *.LC27>)) fmtext_o.cpp:421 89 {*movdi_internal}
     (nil))
(insn 195 194 196 4 (set (reg:DI 5 di)
        (reg:DI 204)) fmtext_o.cpp:421 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 204)
        (nil)))
(insn 196 195 197 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:421 93 {*movqi_internal}
     (nil))
(call_insn 197 196 198 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:421 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 198 197 199 4 (set (reg:DI 205)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:423 89 {*movdi_internal}
     (nil))
(insn 199 198 200 4 (parallel [
            (set (reg:DI 206)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:423 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 200 199 201 4 (set (reg:DI 1 dx)
        (reg:DI 205)) fmtext_o.cpp:423 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 205)
        (nil)))
(insn 201 200 202 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:423 90 {*movsi_internal}
     (nil))
(insn 202 201 203 4 (set (reg:DI 5 di)
        (reg:DI 206)) fmtext_o.cpp:423 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 206)
        (nil)))
(call_insn 203 202 204 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:423 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 204 203 205 4 (set (reg/f:DI 207)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:424 89 {*movdi_internal}
     (nil))
(insn 205 204 206 4 (parallel [
            (set (reg/f:DI 113 [ D.6725 ])
                (plus:DI (reg/f:DI 207)
                    (const_int 428 [0x1ac])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:424 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 207)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 428 [0x1ac]))
                (nil)))))
(insn 206 205 207 4 (parallel [
            (set (reg:DI 208)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:424 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 207 206 208 4 (set (reg:DI 1 dx)
        (reg/f:DI 113 [ D.6725 ])) fmtext_o.cpp:424 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ D.6725 ])
        (nil)))
(insn 208 207 209 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fa2a186b510 *.LC25>)) fmtext_o.cpp:424 89 {*movdi_internal}
     (nil))
(insn 209 208 210 4 (set (reg:DI 5 di)
        (reg:DI 208)) fmtext_o.cpp:424 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 208)
        (nil)))
(insn 210 209 211 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:424 93 {*movqi_internal}
     (nil))
(call_insn 211 210 212 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:424 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 212 211 213 4 (set (reg/f:DI 209)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:426 89 {*movdi_internal}
     (nil))
(insn 213 212 214 4 (parallel [
            (set (reg/f:DI 114 [ D.6727 ])
                (plus:DI (reg/f:DI 209)
                    (const_int 432 [0x1b0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:426 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 209)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 432 [0x1b0]))
                (nil)))))
(insn 214 213 215 4 (set (reg:DI 210)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:426 89 {*movdi_internal}
     (nil))
(insn 215 214 216 4 (set (reg:DI 1 dx)
        (reg:DI 210)) fmtext_o.cpp:426 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 210)
        (nil)))
(insn 216 215 217 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:426 90 {*movsi_internal}
     (nil))
(insn 217 216 218 4 (set (reg:DI 5 di)
        (reg/f:DI 114 [ D.6727 ])) fmtext_o.cpp:426 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114 [ D.6727 ])
        (nil)))
(call_insn 218 217 219 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:426 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 219 218 220 4 (set (reg/f:DI 211)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(insn 220 219 221 4 (parallel [
            (set (reg/f:DI 115 [ D.6727 ])
                (plus:DI (reg/f:DI 211)
                    (const_int 348 [0x15c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:428 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 211)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
                    (const_int 348 [0x15c]))
                (nil)))))
(insn 221 220 222 4 (set (reg:DI 1 dx)
        (const_int 3 [0x3])) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(insn 222 221 223 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7fa2a186b6c0 *.LC28>)) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(insn 223 222 224 4 (set (reg:DI 5 di)
        (reg/f:DI 115 [ D.6727 ])) fmtext_o.cpp:428 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ D.6727 ])
        (nil)))
(call_insn/i 224 223 225 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strncmp") [flags 0x41]  <function_decl 0x7fa2a1d01870 strncmp>) [0 __builtin_strncmp S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:428 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 225 224 226 4 (set (reg:SI 116 [ D.6719 ])
        (reg:SI 0 ax)) fmtext_o.cpp:428 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 226 225 227 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 116 [ D.6719 ])
            (const_int 0 [0]))) fmtext_o.cpp:428 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 116 [ D.6719 ])
        (nil)))
(jump_insn 227 226 228 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 285)
            (pc))) fmtext_o.cpp:428 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 285)
;;  succ:       5 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 228 227 229 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 282 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:429 90 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117 212
(code_label 282 229 230 6 84 "" [1 uses])
(note 230 282 231 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 231 230 232 6 (set (reg/f:DI 212)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 232 231 233 6 (set (reg:SI 117 [ D.6719 ])
        (mem/j:SI (reg/f:DI 212) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:429 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 212)
        (nil)))
(insn 233 232 234 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 117 [ D.6719 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32]))) fmtext_o.cpp:429 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 117 [ D.6719 ])
        (nil)))
(jump_insn 234 233 235 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 371)
            (pc))) fmtext_o.cpp:429 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 371)
;;  succ:       14
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 213 214 215 216 217 218 219 220 221 222 223 224
(note 235 234 236 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 7 (set (reg:DI 213)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:430 89 {*movdi_internal}
     (nil))
(insn 237 236 238 7 (parallel [
            (set (reg:DI 214)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:430 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 238 237 239 7 (set (reg:DI 1 dx)
        (reg:DI 213)) fmtext_o.cpp:430 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 213)
        (nil)))
(insn 239 238 240 7 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:430 90 {*movsi_internal}
     (nil))
(insn 240 239 241 7 (set (reg:DI 5 di)
        (reg:DI 214)) fmtext_o.cpp:430 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 214)
        (nil)))
(call_insn 241 240 242 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:430 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 242 241 243 7 (set (reg:SI 215)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -148 [0xffffffffffffff6c])) [0 fn+0 S4 A32])) fmtext_o.cpp:431 90 {*movsi_internal}
     (nil))
(insn 243 242 244 7 (set (reg:DI 118 [ D.6722 ])
        (sign_extend:DI (reg:SI 215))) fmtext_o.cpp:431 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 215)
        (nil)))
(insn 244 243 245 7 (parallel [
            (set (reg:DI 119 [ D.6722 ])
                (ashift:DI (reg:DI 118 [ D.6722 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 118 [ D.6722 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 245 244 246 7 (set (reg/f:DI 216)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])) fmtext_o.cpp:431 89 {*movdi_internal}
     (nil))
(insn 246 245 247 7 (parallel [
            (set (reg/f:DI 120 [ D.6723 ])
                (plus:DI (reg:DI 119 [ D.6722 ])
                    (reg/f:DI 216)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 216)
        (expr_list:REG_DEAD (reg:DI 119 [ D.6722 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
                        (reg:DI 119 [ D.6722 ]))
                    (nil))))))
(insn 247 246 248 7 (set (reg/f:DI 121 [ D.6725 ])
        (mem/f:DI (reg/f:DI 120 [ D.6723 ]) [0 *_84+0 S8 A64])) fmtext_o.cpp:431 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 120 [ D.6723 ])
        (nil)))
(insn 248 247 249 7 (set (reg:SI 217)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])) fmtext_o.cpp:431 90 {*movsi_internal}
     (nil))
(insn 249 248 250 7 (set (reg:DI 122 [ D.6722 ])
        (sign_extend:DI (reg:SI 217))) fmtext_o.cpp:431 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 217)
        (nil)))
(insn 250 249 251 7 (parallel [
            (set (reg:DI 123 [ D.6722 ])
                (ashift:DI (reg:DI 122 [ D.6722 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 122 [ D.6722 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 251 250 252 7 (parallel [
            (set (reg/f:DI 124 [ D.6725 ])
                (plus:DI (reg/f:DI 121 [ D.6725 ])
                    (reg:DI 123 [ D.6722 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 123 [ D.6722 ])
        (expr_list:REG_DEAD (reg/f:DI 121 [ D.6725 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 252 251 253 7 (parallel [
            (set (reg:DI 218)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 253 252 254 7 (set (reg:DI 1 dx)
        (reg/f:DI 124 [ D.6725 ])) fmtext_o.cpp:431 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 124 [ D.6725 ])
        (nil)))
(insn 254 253 255 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fa2a186b510 *.LC25>)) fmtext_o.cpp:431 89 {*movdi_internal}
     (nil))
(insn 255 254 256 7 (set (reg:DI 5 di)
        (reg:DI 218)) fmtext_o.cpp:431 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 218)
        (nil)))
(insn 256 255 257 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:431 93 {*movqi_internal}
     (nil))
(call_insn 257 256 258 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:431 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 258 257 259 7 (set (reg:DI 219)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:432 89 {*movdi_internal}
     (nil))
(insn 259 258 260 7 (parallel [
            (set (reg:DI 220)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:432 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 260 259 261 7 (set (reg:DI 1 dx)
        (reg:DI 219)) fmtext_o.cpp:432 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 219)
        (nil)))
(insn 261 260 262 7 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:432 90 {*movsi_internal}
     (nil))
(insn 262 261 263 7 (set (reg:DI 5 di)
        (reg:DI 220)) fmtext_o.cpp:432 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 220)
        (nil)))
(call_insn 263 262 264 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:432 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 264 263 265 7 (set (reg:SI 221)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -148 [0xffffffffffffff6c])) [0 fn+0 S4 A32])) fmtext_o.cpp:433 90 {*movsi_internal}
     (nil))
(insn 265 264 266 7 (set (reg:DI 125 [ D.6722 ])
        (sign_extend:DI (reg:SI 221))) fmtext_o.cpp:433 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 221)
        (nil)))
(insn 266 265 267 7 (parallel [
            (set (reg:DI 126 [ D.6722 ])
                (ashift:DI (reg:DI 125 [ D.6722 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 125 [ D.6722 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 267 266 268 7 (set (reg/f:DI 222)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])) fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 268 267 269 7 (parallel [
            (set (reg/f:DI 127 [ D.6723 ])
                (plus:DI (reg:DI 126 [ D.6722 ])
                    (reg/f:DI 222)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 222)
        (expr_list:REG_DEAD (reg:DI 126 [ D.6722 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
                        (reg:DI 126 [ D.6722 ]))
                    (nil))))))
(insn 269 268 270 7 (set (reg/f:DI 128 [ D.6725 ])
        (mem/f:DI (reg/f:DI 127 [ D.6723 ]) [0 *_93+0 S8 A64])) fmtext_o.cpp:433 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 127 [ D.6723 ])
        (nil)))
(insn 270 269 271 7 (set (reg:SI 223)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])) fmtext_o.cpp:433 90 {*movsi_internal}
     (nil))
(insn 271 270 272 7 (set (reg:DI 129 [ D.6728 ])
        (sign_extend:DI (reg:SI 223))) fmtext_o.cpp:433 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 223)
        (nil)))
(insn 272 271 273 7 (parallel [
            (set (reg:DI 130 [ D.6728 ])
                (plus:DI (reg:DI 129 [ D.6728 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 129 [ D.6728 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 273 272 274 7 (parallel [
            (set (reg:DI 131 [ D.6728 ])
                (ashift:DI (reg:DI 130 [ D.6728 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 130 [ D.6728 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 274 273 275 7 (parallel [
            (set (reg/f:DI 132 [ D.6725 ])
                (plus:DI (reg/f:DI 128 [ D.6725 ])
                    (reg:DI 131 [ D.6728 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 131 [ D.6728 ])
        (expr_list:REG_DEAD (reg/f:DI 128 [ D.6725 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 275 274 276 7 (parallel [
            (set (reg:DI 224)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 276 275 277 7 (set (reg:DI 1 dx)
        (reg/f:DI 132 [ D.6725 ])) fmtext_o.cpp:433 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132 [ D.6725 ])
        (nil)))
(insn 277 276 278 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fa2a186b510 *.LC25>)) fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 278 277 279 7 (set (reg:DI 5 di)
        (reg:DI 224)) fmtext_o.cpp:433 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 224)
        (nil)))
(insn 279 278 280 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:433 93 {*movqi_internal}
     (nil))
(call_insn 280 279 281 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:433 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 281 280 402 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:429 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 402 281 403 7 (set (pc)
        (label_ref 282)) fmtext_o.cpp:429 654 {jump}
     (nil)
 -> 282)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 403 402 285)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 285 403 286 8 82 "" [1 uses])
(note 286 285 287 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 321 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              10 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133 134 225 226 227 228
(code_label 321 287 288 9 86 "" [1 uses])
(note 288 321 289 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 289 288 290 9 (set (reg/f:DI 225)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 290 289 291 9 (set (reg:SI 133 [ D.6719 ])
        (mem/j:SI (reg/f:DI 225) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:437 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 225)
        (nil)))
(insn 291 290 292 9 (parallel [
            (set (reg:SI 226)
                (lshiftrt:SI (reg:SI 133 [ D.6719 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 292 291 293 9 (parallel [
            (set (reg:SI 227)
                (plus:SI (reg:SI 226)
                    (reg:SI 133 [ D.6719 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 226)
        (expr_list:REG_DEAD (reg:SI 133 [ D.6719 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 293 292 294 9 (parallel [
            (set (reg:SI 228)
                (ashiftrt:SI (reg:SI 227)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 227)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 294 293 295 9 (set (reg:SI 134 [ D.6719 ])
        (reg:SI 228)) fmtext_o.cpp:437 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 228)
        (nil)))
(insn 295 294 296 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 134 [ D.6719 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32]))) fmtext_o.cpp:437 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 134 [ D.6719 ])
        (nil)))
(jump_insn 296 295 297 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 324)
            (pc))) fmtext_o.cpp:437 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 324)
;;  succ:       11
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 135 136 137 138 139 140 141 229 230 231 232 233 234
(note 297 296 298 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 10 (set (reg:DI 229)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(insn 299 298 300 10 (parallel [
            (set (reg:DI 230)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:438 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 300 299 301 10 (set (reg:DI 1 dx)
        (reg:DI 229)) fmtext_o.cpp:438 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 229)
        (nil)))
(insn 301 300 302 10 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:438 90 {*movsi_internal}
     (nil))
(insn 302 301 303 10 (set (reg:DI 5 di)
        (reg:DI 230)) fmtext_o.cpp:438 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 230)
        (nil)))
(call_insn 303 302 304 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:438 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 304 303 305 10 (set (reg:SI 231)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -148 [0xffffffffffffff6c])) [0 fn+0 S4 A32])) fmtext_o.cpp:439 90 {*movsi_internal}
     (nil))
(insn 305 304 306 10 (set (reg:DI 135 [ D.6722 ])
        (sign_extend:DI (reg:SI 231))) fmtext_o.cpp:439 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 231)
        (nil)))
(insn 306 305 307 10 (parallel [
            (set (reg:DI 136 [ D.6722 ])
                (ashift:DI (reg:DI 135 [ D.6722 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 135 [ D.6722 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 307 306 308 10 (set (reg/f:DI 232)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])) fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 308 307 309 10 (parallel [
            (set (reg/f:DI 137 [ D.6723 ])
                (plus:DI (reg:DI 136 [ D.6722 ])
                    (reg/f:DI 232)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 232)
        (expr_list:REG_DEAD (reg:DI 136 [ D.6722 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
                        (reg:DI 136 [ D.6722 ]))
                    (nil))))))
(insn 309 308 310 10 (set (reg/f:DI 138 [ D.6725 ])
        (mem/f:DI (reg/f:DI 137 [ D.6723 ]) [0 *_107+0 S8 A64])) fmtext_o.cpp:439 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 137 [ D.6723 ])
        (nil)))
(insn 310 309 311 10 (set (reg:SI 233)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])) fmtext_o.cpp:439 90 {*movsi_internal}
     (nil))
(insn 311 310 312 10 (set (reg:DI 139 [ D.6722 ])
        (sign_extend:DI (reg:SI 233))) fmtext_o.cpp:439 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 233)
        (nil)))
(insn 312 311 313 10 (parallel [
            (set (reg:DI 140 [ D.6722 ])
                (ashift:DI (reg:DI 139 [ D.6722 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 139 [ D.6722 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 313 312 314 10 (parallel [
            (set (reg/f:DI 141 [ D.6725 ])
                (plus:DI (reg/f:DI 138 [ D.6725 ])
                    (reg:DI 140 [ D.6722 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 140 [ D.6722 ])
        (expr_list:REG_DEAD (reg/f:DI 138 [ D.6725 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 314 313 315 10 (parallel [
            (set (reg:DI 234)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 315 314 316 10 (set (reg:DI 1 dx)
        (reg/f:DI 141 [ D.6725 ])) fmtext_o.cpp:439 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141 [ D.6725 ])
        (nil)))
(insn 316 315 317 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fa2a186b510 *.LC25>)) fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 317 316 318 10 (set (reg:DI 5 di)
        (reg:DI 234)) fmtext_o.cpp:439 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 234)
        (nil)))
(insn 318 317 319 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:439 93 {*movqi_internal}
     (nil))
(call_insn 319 318 320 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:439 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 320 319 404 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 404 320 405 10 (set (pc)
        (label_ref 321)) fmtext_o.cpp:437 654 {jump}
     (nil)
 -> 321)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 405 404 324)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 324 405 325 11 85 "" [1 uses])
(note 325 324 326 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 326 325 368 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:441 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              13 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 235 236 237 238
(code_label 368 326 327 12 87 "" [1 uses])
(note 327 368 328 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 328 327 329 12 (set (reg/f:DI 235)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:441 89 {*movdi_internal}
     (nil))
(insn 329 328 330 12 (set (reg:SI 142 [ D.6719 ])
        (mem/j:SI (reg/f:DI 235) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:441 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 235)
        (nil)))
(insn 330 329 331 12 (parallel [
            (set (reg:SI 236)
                (lshiftrt:SI (reg:SI 142 [ D.6719 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 331 330 332 12 (parallel [
            (set (reg:SI 237)
                (plus:SI (reg:SI 236)
                    (reg:SI 142 [ D.6719 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 236)
        (expr_list:REG_DEAD (reg:SI 142 [ D.6719 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 332 331 333 12 (parallel [
            (set (reg:SI 238)
                (ashiftrt:SI (reg:SI 237)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 237)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 333 332 334 12 (set (reg:SI 143 [ D.6719 ])
        (reg:SI 238)) fmtext_o.cpp:441 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 238)
        (nil)))
(insn 334 333 335 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 143 [ D.6719 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32]))) fmtext_o.cpp:441 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 143 [ D.6719 ])
        (nil)))
(jump_insn 335 334 336 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 371)
            (pc))) fmtext_o.cpp:441 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 371)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 144 145 146 147 148 149 150 151 152 153 154 239 240 241 242 243 244 245 246 247 248
(note 336 335 337 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 337 336 338 13 (set (reg:DI 239)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:442 89 {*movdi_internal}
     (nil))
(insn 338 337 339 13 (parallel [
            (set (reg:DI 240)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:442 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 339 338 340 13 (set (reg:DI 1 dx)
        (reg:DI 239)) fmtext_o.cpp:442 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 239)
        (nil)))
(insn 340 339 341 13 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:442 90 {*movsi_internal}
     (nil))
(insn 341 340 342 13 (set (reg:DI 5 di)
        (reg:DI 240)) fmtext_o.cpp:442 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 240)
        (nil)))
(call_insn 342 341 343 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:442 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 343 342 344 13 (set (reg:SI 241)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -148 [0xffffffffffffff6c])) [0 fn+0 S4 A32])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 344 343 345 13 (set (reg:DI 144 [ D.6722 ])
        (sign_extend:DI (reg:SI 241))) fmtext_o.cpp:443 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 241)
        (nil)))
(insn 345 344 346 13 (parallel [
            (set (reg:DI 145 [ D.6722 ])
                (ashift:DI (reg:DI 144 [ D.6722 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 144 [ D.6722 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 346 345 347 13 (set (reg/f:DI 242)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 347 346 348 13 (parallel [
            (set (reg/f:DI 146 [ D.6723 ])
                (plus:DI (reg:DI 145 [ D.6722 ])
                    (reg/f:DI 242)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 242)
        (expr_list:REG_DEAD (reg:DI 145 [ D.6722 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
                        (reg:DI 145 [ D.6722 ]))
                    (nil))))))
(insn 348 347 349 13 (set (reg/f:DI 147 [ D.6725 ])
        (mem/f:DI (reg/f:DI 146 [ D.6723 ]) [0 *_120+0 S8 A64])) fmtext_o.cpp:443 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146 [ D.6723 ])
        (nil)))
(insn 349 348 350 13 (set (reg/f:DI 243)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 350 349 351 13 (set (reg:SI 148 [ D.6719 ])
        (mem/j:SI (reg/f:DI 243) [0 header_21(D)->number_points+0 S4 A64])) fmtext_o.cpp:443 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 243)
        (nil)))
(insn 351 350 352 13 (parallel [
            (set (reg:SI 244)
                (lshiftrt:SI (reg:SI 148 [ D.6719 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 352 351 353 13 (parallel [
            (set (reg:SI 245)
                (plus:SI (reg:SI 244)
                    (reg:SI 148 [ D.6719 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 244)
        (expr_list:REG_DEAD (reg:SI 148 [ D.6719 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 353 352 354 13 (parallel [
            (set (reg:SI 246)
                (ashiftrt:SI (reg:SI 245)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 545 {*ashrsi3_1}
     (expr_list:REG_DEAD (reg:SI 245)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 354 353 355 13 (set (reg:SI 149 [ D.6719 ])
        (reg:SI 246)) fmtext_o.cpp:443 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 246)
        (nil)))
(insn 355 354 356 13 (set (reg:DI 150 [ D.6728 ])
        (sign_extend:DI (reg:SI 149 [ D.6719 ]))) fmtext_o.cpp:443 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 149 [ D.6719 ])
        (nil)))
(insn 356 355 357 13 (set (reg:SI 247)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 357 356 358 13 (set (reg:DI 151 [ D.6728 ])
        (sign_extend:DI (reg:SI 247))) fmtext_o.cpp:443 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 247)
        (nil)))
(insn 358 357 359 13 (parallel [
            (set (reg:DI 152 [ D.6728 ])
                (plus:DI (reg:DI 150 [ D.6728 ])
                    (reg:DI 151 [ D.6728 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 151 [ D.6728 ])
        (expr_list:REG_DEAD (reg:DI 150 [ D.6728 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 359 358 360 13 (parallel [
            (set (reg:DI 153 [ D.6728 ])
                (ashift:DI (reg:DI 152 [ D.6728 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 152 [ D.6728 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 360 359 361 13 (parallel [
            (set (reg/f:DI 154 [ D.6725 ])
                (plus:DI (reg/f:DI 147 [ D.6725 ])
                    (reg:DI 153 [ D.6728 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 153 [ D.6728 ])
        (expr_list:REG_DEAD (reg/f:DI 147 [ D.6725 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 361 360 362 13 (parallel [
            (set (reg:DI 248)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 362 361 363 13 (set (reg:DI 1 dx)
        (reg/f:DI 154 [ D.6725 ])) fmtext_o.cpp:443 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154 [ D.6725 ])
        (nil)))
(insn 363 362 364 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fa2a186b510 *.LC25>)) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 364 363 365 13 (set (reg:DI 5 di)
        (reg:DI 248)) fmtext_o.cpp:443 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 248)
        (nil)))
(insn 365 364 366 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:443 93 {*movqi_internal}
     (nil))
(call_insn 366 365 367 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:443 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 367 366 406 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 406 367 407 13 (set (pc)
        (label_ref 368)) fmtext_o.cpp:441 654 {jump}
     (nil)
 -> 368)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 407 406 371)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 371 407 372 14 83 "" [2 uses])
(note 372 371 373 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 373 372 374 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:447 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 374 373 375 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 379)
            (pc))) fmtext_o.cpp:447 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 379)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 249
(note 375 374 376 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 376 375 377 15 (set (reg:DI 249)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:448 89 {*movdi_internal}
     (nil))
(insn 377 376 378 15 (set (reg:DI 5 di)
        (reg:DI 249)) fmtext_o.cpp:448 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 249)
        (nil)))
(call_insn 378 377 379 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fa2a1ac81b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:448 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 379 378 380 16 88 "" [1 uses])
(note 380 379 381 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 384 16 (set (reg:SI 87 [ D.6719 ])
        (const_int 1 [0x1])) fmtext_o.cpp:451 90 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              3 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 155
(code_label 384 381 385 17 89 "" [1 uses])
(note 385 384 386 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 386 385 390 17 (set (reg:SI 155 [ <retval> ])
        (reg:SI 87 [ D.6719 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87 [ D.6719 ])
        (nil)))
(insn 390 386 391 17 (set (reg/i:SI 0 ax)
        (reg:SI 155 [ <retval> ])) fmtext_o.cpp:452 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 155 [ <retval> ])
        (nil)))
(insn 391 390 392 17 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.6729+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) fmtext_o.cpp:452 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 392 391 398 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 395)
            (pc))) fmtext_o.cpp:452 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 395)
;;  succ:       19
;;              18 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 398 392 393 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(call_insn 393 398 394 18 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fa2a1c07af8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:452 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 394 393 395)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 395 394 399 19 90 "" [1 uses])
(note 399 395 396 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 396 399 0 19 (use (reg/i:SI 0 ax)) fmtext_o.cpp:452 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function int read_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision1*, float**, float**, Endian_Check*) (_Z9read_dataPiP10PreprocessP7IOFilesPP16Data_file_headerPP17Data_block_headerP10Precision2PP8_IO_FILEP10Precision1PPfSI_P12Endian_Check, funcdef_no=6, decl_uid=5398, cgraph_uid=6, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 55 n_edges 76 count 55 (    1)
Building IRA IR
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 167.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 184.
verify found no changes in insn with uid = 190.
verify found no changes in insn with uid = 198.
verify found no changes in insn with uid = 214.
verify found no changes in insn with uid = 220.
verify found no changes in insn with uid = 233.
verify found no changes in insn with uid = 239.
verify found no changes in insn with uid = 243.
verify found no changes in insn with uid = 248.
verify found no changes in insn with uid = 285.
verify found no changes in insn with uid = 298.
verify found no changes in insn with uid = 317.
verify found no changes in insn with uid = 336.
verify found no changes in insn with uid = 356.
verify found no changes in insn with uid = 368.
verify found no changes in insn with uid = 413.
verify found no changes in insn with uid = 481.
verify found no changes in insn with uid = 487.
verify found no changes in insn with uid = 489.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r577: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r577,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r576: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r576,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r575: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r575,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r574: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r574,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r573: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r573,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r572: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r572,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r571: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r571,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r570: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r570,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r569: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r569,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r568: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r568,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r567: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r567,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r566: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r566,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r565: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r565,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r564: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r564,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r563: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r563,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r562: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r562,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r561: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r561,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r560: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r560,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r559: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r559,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r558: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r558,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r557: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r557,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r556: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r556,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r555: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r555,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r554: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r554,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r553: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r553,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r552: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r552,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r551: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r551,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r550: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r550,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r549: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r549,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r548: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r548,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r547: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r547,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r546: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r546,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r545: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r545,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r544: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r544,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r543: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r543,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r542: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r542,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r541: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r541,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r540: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r540,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r539: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r539,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r538: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r538,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r537: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r537,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r536: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r536,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r535: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r535,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r534: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r534,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r533: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a162 (r533,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r532: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r532,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r531: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a169 (r531,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r530: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a171 (r530,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r529: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a174 (r529,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r528: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a181 (r528,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r527: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a183 (r527,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r526: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a186 (r526,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r525: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a190 (r525,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r524: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a192 (r524,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r523: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a195 (r523,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r522: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a201 (r522,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r521: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a203 (r521,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r520: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a206 (r520,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r519: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a209 (r519,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r518: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a211 (r518,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r517: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a214 (r517,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r516: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a223 (r516,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r515: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a226 (r515,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r514: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a229 (r514,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r513: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a230 (r513,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r512: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a235 (r512,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r511: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a238 (r511,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r510: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a244 (r510,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r509: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a247 (r509,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r508: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a250 (r508,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r507: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a253 (r507,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r506: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a255 (r506,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r505: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a258 (r505,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r504: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a262 (r504,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r503: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a265 (r503,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r502: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a269 (r502,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r501: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a272 (r501,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r500: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a276 (r500,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r499: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a279 (r499,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r498: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a284 (r498,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r497: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a287 (r497,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r496: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a293 (r496,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r495: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a296 (r495,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r494: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a299 (r494,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r493: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a302 (r493,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r492: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a304 (r492,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r491: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a307 (r491,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r490: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a311 (r490,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r489: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a314 (r489,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r488: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a315 (r488,l0) best DIREG, allocno GENERAL_REGS
    r487: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a316 (r487,l0) best SIREG, allocno GENERAL_REGS
    r486: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a319 (r486,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r485: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a320 (r485,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r484: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a324 (r484,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r483: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a327 (r483,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r482: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a329 (r482,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r481: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a332 (r481,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r480: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a335 (r480,l0) best AREG, allocno GENERAL_REGS
    r479: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a341 (r479,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r478: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a344 (r478,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r477: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a345 (r477,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r476: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a348 (r476,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r475: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a351 (r475,l0) best AREG, allocno GENERAL_REGS
    r474: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a357 (r474,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r473: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a360 (r473,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r472: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a361 (r472,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r471: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a364 (r471,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r470: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a367 (r470,l0) best AREG, allocno GENERAL_REGS
    r469: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a370 (r469,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r468: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a371 (r468,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r467: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a374 (r467,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r466: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a377 (r466,l0) best AREG, allocno GENERAL_REGS
    r465: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a380 (r465,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r464: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a381 (r464,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r463: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a384 (r463,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r462: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a385 (r462,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r461: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a386 (r461,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r460: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a391 (r460,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r459: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a394 (r459,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r458: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a395 (r458,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r457: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a396 (r457,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r456: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a399 (r456,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r455: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a402 (r455,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r454: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a403 (r454,l0) best DIREG, allocno GENERAL_REGS
    r453: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a404 (r453,l0) best SIREG, allocno GENERAL_REGS
    r452: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a405 (r452,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r451: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a406 (r451,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r450: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a408 (r450,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r449: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a409 (r449,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r448: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a411 (r448,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r447: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a413 (r447,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r446: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a417 (r446,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r445: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a420 (r445,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r444: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a424 (r444,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r443: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a427 (r443,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r442: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a431 (r442,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r441: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a434 (r441,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r440: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a440 (r440,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r439: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a443 (r439,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r438: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a445 (r438,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r437: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a448 (r437,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r436: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a454 (r436,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r435: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a457 (r435,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r434: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a459 (r434,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r433: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a462 (r433,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r432: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a465 (r432,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r431: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a468 (r431,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r430: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a472 (r430,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r429: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a473 (r429,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r428: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a475 (r428,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r427: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a474 (r427,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r426: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a476 (r426,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r425: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a479 (r425,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r424: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a482 (r424,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r423: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a485 (r423,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r422: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a484 (r422,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r421: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a487 (r421,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r420: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a490 (r420,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r419: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r419,l0) best AREG, allocno GENERAL_REGS
    r418: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r418,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r417: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r417,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r416: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r416,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r415: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r415,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r414: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r414,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r413: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r413,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r412: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r412,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r411: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r411,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r410: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r410,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r409: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r409,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r408: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r408,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r407: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r407,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r406: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r406,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r405: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r405,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r404: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r404,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r403: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r403,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r402: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r402,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r401: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r401,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r400: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r400,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r399: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r399,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r398: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r398,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r397: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r397,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r396: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r396,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r395: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r395,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r394: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r394,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r393: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r393,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r392: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r392,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r391: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r391,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r390: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r390,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r389: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r389,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r388: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r388,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r387: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r387,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r386: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r386,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r385: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r385,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r384: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r384,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r383: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r383,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r382: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r382,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r381: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r381,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r380: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r380,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r379: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r379,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r378: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r378,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r377: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r377,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r376: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r376,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r375: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r375,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r374: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r374,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r373: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r373,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r372: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r372,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r371: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r371,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r370: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r370,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r369: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r369,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r368: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r368,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r367: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r367,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r366: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r366,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r365: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r365,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r364: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r364,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r363: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r363,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r362: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r362,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r361: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r361,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r360: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r360,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r359: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r359,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r358: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r358,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r357: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r357,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r356: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r356,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r355: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r355,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r354: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r354,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r353: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r353,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r352: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r352,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r351: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r351,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r350: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r350,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r349: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r349,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r348: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r348,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r347: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r347,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r346: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r346,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r345: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r345,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r344: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r344,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r343,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r342: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r342,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r341: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r341,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r340: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r340,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r339,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r338: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r338,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r337,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r336: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r336,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r335: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r335,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r334,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r333: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r333,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r332,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r331: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r331,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r330: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r330,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r329: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r329,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r328,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r327,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r326,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r325,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r324: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r324,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r323: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r323,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r322: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r322,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r321: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r321,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r320,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r319,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r318,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r317: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r317,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r316,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r315: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r315,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r314,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r313: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r313,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r312: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r312,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r311: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r311,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r310: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r310,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r309: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r309,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r308: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r308,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r307,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r306,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a159 (r305,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r304,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r303: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r303,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r302,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r301,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r300,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r299,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a168 (r298,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r297: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a167 (r297,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a170 (r296,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a172 (r295,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a173 (r294,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a176 (r293,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a177 (r292,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a178 (r291,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a180 (r290,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r289,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a182 (r288,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a184 (r287,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a185 (r286,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a175 (r285,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a187 (r284,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a189 (r283,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a188 (r282,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a191 (r281,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a193 (r280,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a194 (r279,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r278: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a197 (r278,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a198 (r277,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a199 (r276,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a200 (r275,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a202 (r274,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a204 (r273,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r272: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a205 (r272,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a196 (r271,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a207 (r270,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a208 (r269,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a210 (r268,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a212 (r267,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a213 (r266,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a215 (r265,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a216 (r264,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a217 (r263,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a218 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a219 (r261,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a220 (r260,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a221 (r259,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a222 (r258,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a224 (r257,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a225 (r256,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a227 (r255,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a228 (r254,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r253: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a231 (r253,l0) best DIREG, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a234 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a236 (r251,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a237 (r250,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r249: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a232 (r249,l0) best SIREG, allocno GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a239 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a240 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a242 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a243 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a245 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a246 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a241 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a248 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a249 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a251 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a252 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a233 (r237,l0) best CREG, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a254 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a256 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a257 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a259 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a260 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a261 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a263 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a264 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a266 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a267 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a268 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a270 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a271 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a273 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a274 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a275 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a277 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a278 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a280 (r218,l0) best DIREG, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a283 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a285 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a286 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a281 (r214,l0) best SIREG, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a288 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a289 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a291 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a292 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a294 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a295 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a290 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a297 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a298 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a300 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a301 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a282 (r202,l0) best CREG, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a303 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a305 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a306 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a308 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a309 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a310 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a312 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a313 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a317 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a318 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a321 (r191,l0) best DIREG, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a323 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a325 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a326 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a322 (r187,l0) best CREG, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a328 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a330 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a331 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a334 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a336 (r182,l0) best DIREG, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a337 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a338 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a339 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a340 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a342 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a343 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a333 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a346 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a347 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a350 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a352 (r171,l0) best DIREG, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a353 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a354 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a355 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a356 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a358 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a359 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a349 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a362 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a363 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a366 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a368 (r160,l0) best DIREG, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a369 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a365 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a372 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a373 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a376 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a378 (r154,l0) best DIREG, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a379 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a375 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a382 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a383 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a387 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a389 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a390 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a392 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a393 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a388 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a397 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a398 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a400 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a401 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a410 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a412 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a407 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a414 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a415 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a416 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a418 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a419 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a421 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a422 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a423 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a425 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a426 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a428 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a429 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a430 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a432 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a433 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a435 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a436 (r120,l0) best AREG, allocno GENERAL_REGS
    r119: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a437 (r119,l0) best DIREG, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a439 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a441 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a442 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a438 (r115,l0) best CREG, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a444 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a446 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a447 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a449 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a450 (r110,l0) best AREG, allocno GENERAL_REGS
    r109: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a451 (r109,l0) best DIREG, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a453 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a455 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a456 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a452 (r105,l0) best CREG, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a458 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a460 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a461 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a463 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a464 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a466 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a467 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a470 (r97,l0) best AREG, allocno GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a471 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a469 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a477 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a478 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a480 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a481 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a483 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a486 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a488 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a489 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r419,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a1(r418,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a2(r408,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a3(r417,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:8
  a4(r416,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a5(r415,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a6(r414,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a7(r412,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a8(r413,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a9(r577,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a10(r411,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a11(r576,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a12(r410,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a13(r409,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a14(r575,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a15(r407,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a16(r405,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a17(r406,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a18(r574,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a19(r404,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a20(r573,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a21(r403,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a22(r402,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a23(r572,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a24(r571,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a25(r401,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a26(r400,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a27(r399,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a28(r570,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a29(r398,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a30(r397,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a31(r569,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a32(r396,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a33(r395,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a34(r394,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a35(r568,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a36(r393,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a37(r392,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a38(r567,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a39(r384,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a40(r391,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a41(r390,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a42(r389,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a43(r388,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a44(r566,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a45(r387,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a46(r565,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a47(r386,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a48(r385,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a49(r564,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a50(r383,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a51(r381,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a52(r382,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a53(r563,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a54(r380,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a55(r562,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a56(r379,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a57(r378,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a58(r561,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a59(r369,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a60(r377,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a61(r376,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a62(r375,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a63(r373,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a64(r374,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a65(r560,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a66(r372,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a67(r559,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a68(r371,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a69(r370,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a70(r558,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a71(r368,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a72(r366,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a73(r367,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a74(r557,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a75(r365,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a76(r556,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a77(r364,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a78(r363,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a79(r555,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a80(r354,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a81(r362,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a82(r361,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a83(r360,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a84(r358,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a85(r359,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a86(r554,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a87(r357,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a88(r553,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a89(r356,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a90(r355,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a91(r552,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a92(r353,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a93(r351,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a94(r352,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a95(r551,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a96(r350,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a97(r550,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a98(r349,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a99(r348,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a100(r549,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a101(r339,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a102(r347,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a103(r346,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a104(r345,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a105(r343,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a106(r344,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a107(r548,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a108(r342,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a109(r547,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a110(r341,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a111(r340,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a112(r546,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a113(r338,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a114(r337,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a115(r545,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a116(r336,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a117(r544,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a118(r335,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a119(r334,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a120(r543,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a121(r333,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a122(r332,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a123(r331,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a124(r330,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a125(r329,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a126(r328,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a127(r327,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a128(r326,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a129(r542,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a130(r325,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a131(r324,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a132(r541,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a133(r315,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a134(r323,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a135(r322,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a136(r321,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a137(r319,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a138(r320,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a139(r540,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a140(r318,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a141(r539,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a142(r317,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a143(r316,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a144(r538,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a145(r314,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a146(r312,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a147(r313,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a148(r537,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a149(r311,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a150(r536,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a151(r310,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a152(r309,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a153(r535,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a154(r300,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a155(r308,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a156(r307,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a157(r306,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a158(r304,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a159(r305,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a160(r534,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a161(r303,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a162(r533,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a163(r302,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a164(r301,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a165(r532,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a166(r299,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a167(r297,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a168(r298,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a169(r531,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a170(r296,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a171(r530,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a172(r295,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a173(r294,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a174(r529,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a175(r285,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a176(r293,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a177(r292,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a178(r291,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a179(r289,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a180(r290,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a181(r528,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a182(r288,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a183(r527,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a184(r287,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a185(r286,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a186(r526,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a187(r284,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a188(r282,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a189(r283,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a190(r525,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a191(r281,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a192(r524,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a193(r280,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a194(r279,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a195(r523,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a196(r271,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a197(r278,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:8
  a198(r277,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a199(r276,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a200(r275,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a201(r522,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a202(r274,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a203(r521,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a204(r273,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a205(r272,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a206(r520,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a207(r270,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a208(r269,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a209(r519,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a210(r268,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a211(r518,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a212(r267,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a213(r266,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a214(r517,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a215(r265,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a216(r264,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a217(r263,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a218(r262,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a219(r261,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a220(r260,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a221(r259,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a222(r258,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a223(r516,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a224(r257,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a225(r256,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a226(r515,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a227(r255,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a228(r254,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a229(r514,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a230(r513,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a231(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a232(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a233(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a234(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a235(r512,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a236(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a237(r250,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a238(r511,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a239(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a240(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a241(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a242(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a243(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a244(r510,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a245(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a246(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a247(r509,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a248(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a249(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a250(r508,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a251(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a252(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a253(r507,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a254(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a255(r506,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a256(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a257(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a258(r505,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a259(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a260(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a261(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a262(r504,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a263(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a264(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a265(r503,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a266(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a267(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a268(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a269(r502,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a270(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a271(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a272(r501,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a273(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a274(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a275(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a276(r500,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a277(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a278(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a279(r499,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a280(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a281(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a282(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a283(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a284(r498,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a285(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a286(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a287(r497,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a288(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a289(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a290(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a291(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a292(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a293(r496,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a294(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a295(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a296(r495,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a297(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a298(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a299(r494,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a300(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a301(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a302(r493,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a303(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a304(r492,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a305(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a306(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a307(r491,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a308(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a309(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a310(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a311(r490,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a312(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a313(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a314(r489,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a315(r488,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a316(r487,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a317(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a318(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a319(r486,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a320(r485,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a321(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a322(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a323(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a324(r484,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a325(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a326(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a327(r483,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a328(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a329(r482,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a330(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a331(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a332(r481,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a333(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a334(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a335(r480,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a336(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a337(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a338(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a339(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a340(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a341(r479,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a342(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a343(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a344(r478,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a345(r477,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a346(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a347(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a348(r476,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a349(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a350(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a351(r475,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a352(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a353(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a354(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a355(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a356(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a357(r474,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a358(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a359(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a360(r473,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a361(r472,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a362(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a363(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a364(r471,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a365(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a366(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a367(r470,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a368(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a369(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a370(r469,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a371(r468,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a372(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a373(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a374(r467,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a375(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a376(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a377(r466,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a378(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a379(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a380(r465,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a381(r464,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a382(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a383(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a384(r463,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a385(r462,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a386(r461,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a387(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a388(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a389(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a390(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a391(r460,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a392(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a393(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a394(r459,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a395(r458,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a396(r457,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a397(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a398(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a399(r456,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a400(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a401(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a402(r455,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a403(r454,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a404(r453,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a405(r452,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a406(r451,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a407(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a408(r450,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a409(r449,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a410(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a411(r448,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a412(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a413(r447,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a414(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a415(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a416(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a417(r446,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a418(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a419(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a420(r445,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a421(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a422(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a423(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a424(r444,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a425(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a426(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a427(r443,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a428(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a429(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a430(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a431(r442,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a432(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a433(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a434(r441,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a435(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a436(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a437(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a438(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a439(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a440(r440,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a441(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a442(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a443(r439,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a444(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a445(r438,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a446(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a447(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a448(r437,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a449(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a450(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a451(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a452(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a453(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a454(r436,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a455(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a456(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a457(r435,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a458(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a459(r434,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a460(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a461(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a462(r433,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a463(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a464(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a465(r432,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a466(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a467(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a468(r431,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a469(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a470(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a471(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a472(r430,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a473(r429,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a474(r427,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a475(r428,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a476(r426,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a477(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a478(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a479(r425,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a480(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a481(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a482(r424,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a483(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a484(r422,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:74 NO_REX_SSE_REGS:74 SSE_REGS:74 MMX_REGS:94 INT_SSE_REGS:78 ALL_REGS:1448 MEM:20
  a485(r423,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a486(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:29 NO_REX_SSE_REGS:29 SSE_REGS:29 MMX_REGS:39 INT_SSE_REGS:31 ALL_REGS:624 MEM:10
  a487(r421,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a488(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a489(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a490(r420,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8

   Insn 784(l0): point = 0
   Insn 783(l0): point = 2
   Insn 779(l0): point = 4
   Insn 776(l0): point = 6
   Insn 489(l0): point = 9
   Insn 488(l0): point = 11
   Insn 487(l0): point = 13
   Insn 486(l0): point = 15
   Insn 123(l0): point = 18
   Insn 122(l0): point = 20
   Insn 121(l0): point = 22
   Insn 120(l0): point = 24
   Insn 93(l0): point = 27
   Insn 92(l0): point = 29
   Insn 91(l0): point = 31
   Insn 90(l0): point = 33
   Insn 60(l0): point = 36
   Insn 59(l0): point = 38
   Insn 58(l0): point = 40
   Insn 57(l0): point = 42
   Insn 17(l0): point = 45
   Insn 16(l0): point = 47
   Insn 15(l0): point = 49
   Insn 14(l0): point = 51
   Insn 13(l0): point = 53
   Insn 810(l0): point = 56
   Insn 770(l0): point = 58
   Insn 31(l0): point = 61
   Insn 30(l0): point = 63
   Insn 29(l0): point = 65
   Insn 28(l0): point = 67
   Insn 27(l0): point = 69
   Insn 26(l0): point = 71
   Insn 25(l0): point = 73
   Insn 24(l0): point = 75
   Insn 23(l0): point = 77
   Insn 22(l0): point = 79
   Insn 21(l0): point = 81
   Insn 20(l0): point = 83
   Insn 19(l0): point = 85
   Insn 739(l0): point = 88
   Insn 738(l0): point = 90
   Insn 736(l0): point = 93
   Insn 735(l0): point = 95
   Insn 734(l0): point = 97
   Insn 733(l0): point = 99
   Insn 732(l0): point = 101
   Insn 731(l0): point = 103
   Insn 730(l0): point = 105
   Insn 729(l0): point = 107
   Insn 728(l0): point = 109
   Insn 808(l0): point = 112
   Insn 764(l0): point = 114
   Insn 763(l0): point = 116
   Insn 762(l0): point = 118
   Insn 761(l0): point = 120
   Insn 760(l0): point = 122
   Insn 759(l0): point = 124
   Insn 758(l0): point = 126
   Insn 757(l0): point = 128
   Insn 756(l0): point = 130
   Insn 755(l0): point = 132
   Insn 754(l0): point = 134
   Insn 753(l0): point = 136
   Insn 752(l0): point = 138
   Insn 751(l0): point = 140
   Insn 750(l0): point = 142
   Insn 749(l0): point = 144
   Insn 748(l0): point = 146
   Insn 747(l0): point = 148
   Insn 746(l0): point = 150
   Insn 745(l0): point = 152
   Insn 744(l0): point = 154
   Insn 743(l0): point = 156
   Insn 742(l0): point = 158
   Insn 741(l0): point = 160
   Insn 726(l0): point = 163
   Insn 725(l0): point = 165
   Insn 724(l0): point = 167
   Insn 723(l0): point = 169
   Insn 722(l0): point = 171
   Insn 721(l0): point = 173
   Insn 720(l0): point = 175
   Insn 719(l0): point = 177
   Insn 718(l0): point = 179
   Insn 515(l0): point = 182
   Insn 514(l0): point = 184
   Insn 513(l0): point = 186
   Insn 512(l0): point = 188
   Insn 511(l0): point = 190
   Insn 510(l0): point = 192
   Insn 509(l0): point = 194
   Insn 508(l0): point = 196
   Insn 507(l0): point = 198
   Insn 506(l0): point = 200
   Insn 505(l0): point = 202
   Insn 504(l0): point = 204
   Insn 503(l0): point = 206
   Insn 502(l0): point = 208
   Insn 500(l0): point = 211
   Insn 804(l0): point = 214
   Insn 603(l0): point = 216
   Insn 602(l0): point = 218
   Insn 601(l0): point = 220
   Insn 600(l0): point = 222
   Insn 599(l0): point = 224
   Insn 598(l0): point = 226
   Insn 597(l0): point = 228
   Insn 596(l0): point = 230
   Insn 595(l0): point = 232
   Insn 594(l0): point = 234
   Insn 593(l0): point = 236
   Insn 592(l0): point = 238
   Insn 591(l0): point = 240
   Insn 590(l0): point = 242
   Insn 589(l0): point = 244
   Insn 588(l0): point = 246
   Insn 587(l0): point = 248
   Insn 586(l0): point = 250
   Insn 585(l0): point = 252
   Insn 584(l0): point = 254
   Insn 583(l0): point = 256
   Insn 582(l0): point = 258
   Insn 581(l0): point = 260
   Insn 580(l0): point = 262
   Insn 579(l0): point = 264
   Insn 578(l0): point = 266
   Insn 577(l0): point = 268
   Insn 576(l0): point = 270
   Insn 575(l0): point = 272
   Insn 574(l0): point = 274
   Insn 573(l0): point = 276
   Insn 572(l0): point = 278
   Insn 571(l0): point = 280
   Insn 570(l0): point = 282
   Insn 569(l0): point = 284
   Insn 568(l0): point = 286
   Insn 567(l0): point = 288
   Insn 566(l0): point = 290
   Insn 565(l0): point = 292
   Insn 564(l0): point = 294
   Insn 563(l0): point = 296
   Insn 562(l0): point = 298
   Insn 561(l0): point = 300
   Insn 560(l0): point = 302
   Insn 559(l0): point = 304
   Insn 558(l0): point = 306
   Insn 557(l0): point = 308
   Insn 556(l0): point = 310
   Insn 555(l0): point = 312
   Insn 554(l0): point = 314
   Insn 553(l0): point = 316
   Insn 552(l0): point = 318
   Insn 551(l0): point = 320
   Insn 550(l0): point = 322
   Insn 549(l0): point = 324
   Insn 548(l0): point = 326
   Insn 547(l0): point = 328
   Insn 546(l0): point = 330
   Insn 545(l0): point = 332
   Insn 544(l0): point = 334
   Insn 543(l0): point = 336
   Insn 542(l0): point = 338
   Insn 541(l0): point = 340
   Insn 540(l0): point = 342
   Insn 539(l0): point = 344
   Insn 538(l0): point = 346
   Insn 537(l0): point = 348
   Insn 536(l0): point = 350
   Insn 535(l0): point = 352
   Insn 534(l0): point = 354
   Insn 533(l0): point = 356
   Insn 532(l0): point = 358
   Insn 531(l0): point = 360
   Insn 530(l0): point = 362
   Insn 529(l0): point = 364
   Insn 528(l0): point = 366
   Insn 527(l0): point = 368
   Insn 526(l0): point = 370
   Insn 525(l0): point = 372
   Insn 524(l0): point = 374
   Insn 523(l0): point = 376
   Insn 522(l0): point = 378
   Insn 521(l0): point = 380
   Insn 520(l0): point = 382
   Insn 519(l0): point = 384
   Insn 518(l0): point = 386
   Insn 517(l0): point = 388
   Insn 624(l0): point = 391
   Insn 623(l0): point = 393
   Insn 622(l0): point = 395
   Insn 621(l0): point = 397
   Insn 620(l0): point = 399
   Insn 619(l0): point = 401
   Insn 618(l0): point = 403
   Insn 617(l0): point = 405
   Insn 616(l0): point = 407
   Insn 615(l0): point = 409
   Insn 614(l0): point = 411
   Insn 613(l0): point = 413
   Insn 612(l0): point = 415
   Insn 611(l0): point = 417
   Insn 609(l0): point = 420
   Insn 498(l0): point = 423
   Insn 497(l0): point = 425
   Insn 496(l0): point = 427
   Insn 495(l0): point = 429
   Insn 494(l0): point = 431
   Insn 493(l0): point = 433
   Insn 800(l0): point = 436
   Insn 413(l0): point = 438
   Insn 412(l0): point = 440
   Insn 411(l0): point = 442
   Insn 410(l0): point = 444
   Insn 409(l0): point = 446
   Insn 408(l0): point = 448
   Insn 407(l0): point = 450
   Insn 406(l0): point = 452
   Insn 405(l0): point = 454
   Insn 404(l0): point = 456
   Insn 403(l0): point = 458
   Insn 402(l0): point = 460
   Insn 401(l0): point = 462
   Insn 400(l0): point = 464
   Insn 399(l0): point = 466
   Insn 398(l0): point = 468
   Insn 397(l0): point = 470
   Insn 396(l0): point = 472
   Insn 395(l0): point = 474
   Insn 394(l0): point = 476
   Insn 393(l0): point = 478
   Insn 392(l0): point = 480
   Insn 391(l0): point = 482
   Insn 390(l0): point = 484
   Insn 389(l0): point = 486
   Insn 388(l0): point = 488
   Insn 387(l0): point = 490
   Insn 386(l0): point = 492
   Insn 385(l0): point = 494
   Insn 384(l0): point = 496
   Insn 383(l0): point = 498
   Insn 382(l0): point = 500
   Insn 381(l0): point = 502
   Insn 802(l0): point = 505
   Insn 481(l0): point = 507
   Insn 480(l0): point = 509
   Insn 479(l0): point = 511
   Insn 478(l0): point = 513
   Insn 477(l0): point = 515
   Insn 476(l0): point = 517
   Insn 475(l0): point = 519
   Insn 474(l0): point = 521
   Insn 473(l0): point = 523
   Insn 472(l0): point = 525
   Insn 471(l0): point = 527
   Insn 470(l0): point = 529
   Insn 469(l0): point = 531
   Insn 468(l0): point = 533
   Insn 467(l0): point = 535
   Insn 466(l0): point = 537
   Insn 465(l0): point = 539
   Insn 464(l0): point = 541
   Insn 463(l0): point = 543
   Insn 462(l0): point = 545
   Insn 461(l0): point = 547
   Insn 460(l0): point = 549
   Insn 459(l0): point = 551
   Insn 458(l0): point = 553
   Insn 457(l0): point = 555
   Insn 456(l0): point = 557
   Insn 455(l0): point = 559
   Insn 454(l0): point = 561
   Insn 453(l0): point = 563
   Insn 452(l0): point = 565
   Insn 451(l0): point = 567
   Insn 450(l0): point = 569
   Insn 449(l0): point = 571
   Insn 426(l0): point = 574
   Insn 425(l0): point = 576
   Insn 424(l0): point = 578
   Insn 423(l0): point = 580
   Insn 422(l0): point = 582
   Insn 421(l0): point = 584
   Insn 420(l0): point = 586
   Insn 419(l0): point = 588
   Insn 418(l0): point = 590
   Insn 379(l0): point = 593
   Insn 378(l0): point = 595
   Insn 377(l0): point = 597
   Insn 376(l0): point = 599
   Insn 375(l0): point = 601
   Insn 374(l0): point = 603
   Insn 373(l0): point = 605
   Insn 372(l0): point = 607
   Insn 371(l0): point = 609
   Insn 362(l0): point = 612
   Insn 361(l0): point = 614
   Insn 360(l0): point = 616
   Insn 359(l0): point = 618
   Insn 358(l0): point = 620
   Insn 357(l0): point = 622
   Insn 356(l0): point = 624
   Insn 355(l0): point = 626
   Insn 354(l0): point = 628
   Insn 353(l0): point = 630
   Insn 352(l0): point = 632
   Insn 351(l0): point = 634
   Insn 350(l0): point = 636
   Insn 349(l0): point = 638
   Insn 348(l0): point = 640
   Insn 347(l0): point = 642
   Insn 346(l0): point = 644
   Insn 345(l0): point = 646
   Insn 344(l0): point = 648
   Insn 343(l0): point = 650
   Insn 342(l0): point = 652
   Insn 341(l0): point = 654
   Insn 340(l0): point = 656
   Insn 339(l0): point = 658
   Insn 338(l0): point = 660
   Insn 337(l0): point = 662
   Insn 336(l0): point = 664
   Insn 335(l0): point = 666
   Insn 334(l0): point = 668
   Insn 333(l0): point = 670
   Insn 332(l0): point = 672
   Insn 331(l0): point = 674
   Insn 330(l0): point = 676
   Insn 329(l0): point = 678
   Insn 328(l0): point = 680
   Insn 327(l0): point = 682
   Insn 326(l0): point = 684
   Insn 325(l0): point = 686
   Insn 324(l0): point = 688
   Insn 323(l0): point = 690
   Insn 322(l0): point = 692
   Insn 321(l0): point = 694
   Insn 320(l0): point = 696
   Insn 319(l0): point = 698
   Insn 318(l0): point = 700
   Insn 317(l0): point = 702
   Insn 316(l0): point = 704
   Insn 315(l0): point = 706
   Insn 314(l0): point = 708
   Insn 313(l0): point = 710
   Insn 312(l0): point = 712
   Insn 311(l0): point = 714
   Insn 310(l0): point = 716
   Insn 309(l0): point = 718
   Insn 308(l0): point = 720
   Insn 307(l0): point = 722
   Insn 306(l0): point = 724
   Insn 305(l0): point = 726
   Insn 304(l0): point = 728
   Insn 303(l0): point = 730
   Insn 302(l0): point = 732
   Insn 301(l0): point = 734
   Insn 300(l0): point = 736
   Insn 299(l0): point = 738
   Insn 298(l0): point = 740
   Insn 297(l0): point = 742
   Insn 296(l0): point = 744
   Insn 295(l0): point = 746
   Insn 294(l0): point = 748
   Insn 293(l0): point = 750
   Insn 292(l0): point = 752
   Insn 291(l0): point = 754
   Insn 290(l0): point = 756
   Insn 289(l0): point = 758
   Insn 288(l0): point = 760
   Insn 287(l0): point = 762
   Insn 286(l0): point = 764
   Insn 285(l0): point = 766
   Insn 284(l0): point = 768
   Insn 283(l0): point = 770
   Insn 282(l0): point = 772
   Insn 281(l0): point = 774
   Insn 280(l0): point = 776
   Insn 279(l0): point = 778
   Insn 278(l0): point = 780
   Insn 277(l0): point = 782
   Insn 276(l0): point = 784
   Insn 269(l0): point = 787
   Insn 268(l0): point = 789
   Insn 267(l0): point = 791
   Insn 266(l0): point = 793
   Insn 265(l0): point = 795
   Insn 264(l0): point = 797
   Insn 263(l0): point = 799
   Insn 262(l0): point = 801
   Insn 261(l0): point = 803
   Insn 260(l0): point = 805
   Insn 259(l0): point = 807
   Insn 258(l0): point = 809
   Insn 257(l0): point = 811
   Insn 256(l0): point = 813
   Insn 255(l0): point = 815
   Insn 254(l0): point = 817
   Insn 253(l0): point = 819
   Insn 252(l0): point = 821
   Insn 251(l0): point = 823
   Insn 248(l0): point = 826
   Insn 247(l0): point = 828
   Insn 246(l0): point = 830
   Insn 245(l0): point = 832
   Insn 244(l0): point = 834
   Insn 243(l0): point = 836
   Insn 242(l0): point = 838
   Insn 794(l0): point = 841
   Insn 214(l0): point = 843
   Insn 213(l0): point = 845
   Insn 796(l0): point = 848
   Insn 220(l0): point = 850
   Insn 219(l0): point = 852
   Insn 211(l0): point = 855
   Insn 210(l0): point = 857
   Insn 209(l0): point = 859
   Insn 208(l0): point = 861
   Insn 239(l0): point = 864
   Insn 238(l0): point = 866
   Insn 798(l0): point = 869
   Insn 233(l0): point = 871
   Insn 232(l0): point = 873
   Insn 230(l0): point = 876
   Insn 229(l0): point = 878
   Insn 228(l0): point = 880
   Insn 227(l0): point = 882
   Insn 206(l0): point = 885
   Insn 205(l0): point = 887
   Insn 204(l0): point = 889
   Insn 203(l0): point = 891
   Insn 792(l0): point = 894
   Insn 198(l0): point = 896
   Insn 197(l0): point = 898
   Insn 196(l0): point = 900
   Insn 195(l0): point = 902
   Insn 194(l0): point = 904
   Insn 193(l0): point = 906
   Insn 786(l0): point = 909
   Insn 167(l0): point = 911
   Insn 166(l0): point = 913
   Insn 788(l0): point = 916
   Insn 173(l0): point = 918
   Insn 172(l0): point = 920
   Insn 164(l0): point = 923
   Insn 163(l0): point = 925
   Insn 190(l0): point = 928
   Insn 189(l0): point = 930
   Insn 790(l0): point = 933
   Insn 184(l0): point = 935
   Insn 183(l0): point = 937
   Insn 181(l0): point = 940
   Insn 180(l0): point = 942
   Insn 161(l0): point = 945
   Insn 160(l0): point = 947
   Insn 159(l0): point = 949
   Insn 158(l0): point = 951
   Insn 135(l0): point = 954
   Insn 134(l0): point = 956
   Insn 133(l0): point = 958
   Insn 132(l0): point = 960
   Insn 131(l0): point = 962
   Insn 130(l0): point = 964
   Insn 129(l0): point = 966
   Insn 128(l0): point = 968
   Insn 127(l0): point = 970
   Insn 88(l0): point = 973
   Insn 87(l0): point = 975
   Insn 86(l0): point = 977
   Insn 85(l0): point = 979
   Insn 84(l0): point = 981
   Insn 83(l0): point = 983
   Insn 82(l0): point = 985
   Insn 81(l0): point = 987
   Insn 80(l0): point = 989
   Insn 79(l0): point = 991
   Insn 78(l0): point = 993
   Insn 77(l0): point = 995
   Insn 76(l0): point = 997
   Insn 75(l0): point = 999
   Insn 74(l0): point = 1001
   Insn 73(l0): point = 1003
   Insn 72(l0): point = 1005
   Insn 71(l0): point = 1007
   Insn 70(l0): point = 1009
   Insn 69(l0): point = 1011
   Insn 68(l0): point = 1013
   Insn 67(l0): point = 1015
   Insn 118(l0): point = 1018
   Insn 117(l0): point = 1020
   Insn 116(l0): point = 1022
   Insn 115(l0): point = 1024
   Insn 114(l0): point = 1026
   Insn 113(l0): point = 1028
   Insn 112(l0): point = 1030
   Insn 111(l0): point = 1032
   Insn 110(l0): point = 1034
   Insn 109(l0): point = 1036
   Insn 108(l0): point = 1038
   Insn 107(l0): point = 1040
   Insn 106(l0): point = 1042
   Insn 105(l0): point = 1044
   Insn 104(l0): point = 1046
   Insn 103(l0): point = 1048
   Insn 102(l0): point = 1050
   Insn 101(l0): point = 1052
   Insn 100(l0): point = 1054
   Insn 99(l0): point = 1056
   Insn 98(l0): point = 1058
   Insn 97(l0): point = 1060
   Insn 65(l0): point = 1063
   Insn 64(l0): point = 1065
   Insn 55(l0): point = 1068
   Insn 54(l0): point = 1070
   Insn 53(l0): point = 1072
   Insn 52(l0): point = 1074
   Insn 51(l0): point = 1076
   Insn 50(l0): point = 1078
   Insn 49(l0): point = 1080
   Insn 48(l0): point = 1082
   Insn 47(l0): point = 1084
   Insn 46(l0): point = 1086
   Insn 45(l0): point = 1088
   Insn 44(l0): point = 1090
   Insn 43(l0): point = 1092
   Insn 42(l0): point = 1094
   Insn 41(l0): point = 1096
   Insn 40(l0): point = 1098
   Insn 39(l0): point = 1100
   Insn 38(l0): point = 1102
   Insn 37(l0): point = 1104
   Insn 36(l0): point = 1106
   Insn 35(l0): point = 1108
   Insn 34(l0): point = 1110
   Insn 33(l0): point = 1112
   Insn 145(l0): point = 1115
   Insn 144(l0): point = 1117
   Insn 143(l0): point = 1119
   Insn 142(l0): point = 1121
   Insn 141(l0): point = 1123
   Insn 140(l0): point = 1125
   Insn 139(l0): point = 1127
   Insn 138(l0): point = 1129
   Insn 137(l0): point = 1131
   Insn 155(l0): point = 1134
   Insn 154(l0): point = 1136
   Insn 153(l0): point = 1138
   Insn 152(l0): point = 1140
   Insn 151(l0): point = 1142
   Insn 150(l0): point = 1144
   Insn 149(l0): point = 1146
   Insn 148(l0): point = 1148
   Insn 147(l0): point = 1150
   Insn 273(l0): point = 1153
   Insn 272(l0): point = 1155
   Insn 271(l0): point = 1157
   Insn 368(l0): point = 1160
   Insn 367(l0): point = 1162
   Insn 366(l0): point = 1164
   Insn 365(l0): point = 1166
   Insn 364(l0): point = 1168
   Insn 436(l0): point = 1171
   Insn 435(l0): point = 1173
   Insn 434(l0): point = 1175
   Insn 433(l0): point = 1177
   Insn 432(l0): point = 1179
   Insn 431(l0): point = 1181
   Insn 430(l0): point = 1183
   Insn 429(l0): point = 1185
   Insn 428(l0): point = 1187
   Insn 446(l0): point = 1190
   Insn 445(l0): point = 1192
   Insn 444(l0): point = 1194
   Insn 443(l0): point = 1196
   Insn 442(l0): point = 1198
   Insn 441(l0): point = 1200
   Insn 440(l0): point = 1202
   Insn 439(l0): point = 1204
   Insn 438(l0): point = 1206
   Insn 806(l0): point = 1209
   Insn 712(l0): point = 1211
   Insn 711(l0): point = 1213
   Insn 710(l0): point = 1215
   Insn 709(l0): point = 1217
   Insn 708(l0): point = 1219
   Insn 707(l0): point = 1221
   Insn 706(l0): point = 1223
   Insn 705(l0): point = 1225
   Insn 704(l0): point = 1227
   Insn 703(l0): point = 1229
   Insn 702(l0): point = 1231
   Insn 701(l0): point = 1233
   Insn 700(l0): point = 1235
   Insn 699(l0): point = 1237
   Insn 698(l0): point = 1239
   Insn 697(l0): point = 1241
   Insn 696(l0): point = 1243
   Insn 695(l0): point = 1245
   Insn 694(l0): point = 1247
   Insn 693(l0): point = 1249
   Insn 692(l0): point = 1251
   Insn 691(l0): point = 1253
   Insn 690(l0): point = 1255
   Insn 689(l0): point = 1257
   Insn 688(l0): point = 1259
   Insn 687(l0): point = 1261
   Insn 686(l0): point = 1263
   Insn 685(l0): point = 1265
   Insn 684(l0): point = 1267
   Insn 683(l0): point = 1269
   Insn 682(l0): point = 1271
   Insn 681(l0): point = 1273
   Insn 680(l0): point = 1275
   Insn 679(l0): point = 1277
   Insn 678(l0): point = 1279
   Insn 677(l0): point = 1281
   Insn 676(l0): point = 1283
   Insn 675(l0): point = 1285
   Insn 674(l0): point = 1287
   Insn 673(l0): point = 1289
   Insn 672(l0): point = 1291
   Insn 671(l0): point = 1293
   Insn 670(l0): point = 1295
   Insn 669(l0): point = 1297
   Insn 668(l0): point = 1299
   Insn 667(l0): point = 1301
   Insn 666(l0): point = 1303
   Insn 665(l0): point = 1305
   Insn 664(l0): point = 1307
   Insn 663(l0): point = 1309
   Insn 662(l0): point = 1311
   Insn 661(l0): point = 1313
   Insn 660(l0): point = 1315
   Insn 659(l0): point = 1317
   Insn 658(l0): point = 1319
   Insn 657(l0): point = 1321
   Insn 656(l0): point = 1323
   Insn 655(l0): point = 1325
   Insn 654(l0): point = 1327
   Insn 653(l0): point = 1329
   Insn 652(l0): point = 1331
   Insn 651(l0): point = 1333
   Insn 650(l0): point = 1335
   Insn 649(l0): point = 1337
   Insn 648(l0): point = 1339
   Insn 647(l0): point = 1341
   Insn 646(l0): point = 1343
   Insn 645(l0): point = 1345
   Insn 644(l0): point = 1347
   Insn 643(l0): point = 1349
   Insn 642(l0): point = 1351
   Insn 641(l0): point = 1353
   Insn 640(l0): point = 1355
   Insn 639(l0): point = 1357
   Insn 638(l0): point = 1359
   Insn 637(l0): point = 1361
   Insn 636(l0): point = 1363
   Insn 635(l0): point = 1365
   Insn 634(l0): point = 1367
   Insn 633(l0): point = 1369
   Insn 632(l0): point = 1371
   Insn 631(l0): point = 1373
   Insn 630(l0): point = 1375
   Insn 629(l0): point = 1377
   Insn 628(l0): point = 1379
   Insn 627(l0): point = 1381
   Insn 626(l0): point = 1383
   Insn 11(l0): point = 1386
   Insn 7(l0): point = 1388
   Insn 6(l0): point = 1390
   Insn 5(l0): point = 1392
   Insn 4(l0): point = 1394
   Insn 3(l0): point = 1396
   Insn 2(l0): point = 1398
 a0(r419): [3..4]
 a1(r418): [5..6]
 a2(r408): [117..142]
 a3(r417): [117..118]
 a4(r416): [119..120]
 a5(r415): [121..122]
 a6(r414): [123..124]
 a7(r412): [123..130]
 a8(r413): [125..126]
 a9(r577): [127..128]
 a10(r411): [131..132]
 a11(r576): [133..134]
 a12(r410): [133..136]
 a13(r409): [137..138]
 a14(r575): [139..140]
 a15(r407): [143..144]
 a16(r405): [143..150]
 a17(r406): [145..146]
 a18(r574): [147..148]
 a19(r404): [151..152]
 a20(r573): [153..154]
 a21(r403): [153..156]
 a22(r402): [157..158]
 a23(r572): [159..160]
 a24(r571): [94..95]
 a25(r401): [96..97]
 a26(r400): [98..99]
 a27(r399): [100..101]
 a28(r570): [102..103]
 a29(r398): [102..105]
 a30(r397): [106..107]
 a31(r569): [108..109]
 a32(r396): [166..167]
 a33(r395): [168..169]
 a34(r394): [170..171]
 a35(r568): [172..173]
 a36(r393): [172..175]
 a37(r392): [176..177]
 a38(r567): [178..179]
 a39(r384): [1214..1235]
 a40(r391): [1214..1215]
 a41(r390): [1216..1217]
 a42(r389): [1218..1219]
 a43(r388): [1218..1223]
 a44(r566): [1220..1221]
 a45(r387): [1224..1225]
 a46(r565): [1226..1227]
 a47(r386): [1226..1229]
 a48(r385): [1230..1231]
 a49(r564): [1232..1233]
 a50(r383): [1236..1237]
 a51(r381): [1236..1243]
 a52(r382): [1238..1239]
 a53(r563): [1240..1241]
 a54(r380): [1244..1245]
 a55(r562): [1246..1247]
 a56(r379): [1246..1249]
 a57(r378): [1250..1251]
 a58(r561): [1252..1253]
 a59(r369): [1256..1279]
 a60(r377): [1256..1257]
 a61(r376): [1258..1259]
 a62(r375): [1260..1261]
 a63(r373): [1260..1267]
 a64(r374): [1262..1263]
 a65(r560): [1264..1265]
 a66(r372): [1268..1269]
 a67(r559): [1270..1271]
 a68(r371): [1270..1273]
 a69(r370): [1274..1275]
 a70(r558): [1276..1277]
 a71(r368): [1280..1281]
 a72(r366): [1280..1287]
 a73(r367): [1282..1283]
 a74(r557): [1284..1285]
 a75(r365): [1288..1289]
 a76(r556): [1290..1291]
 a77(r364): [1290..1293]
 a78(r363): [1294..1295]
 a79(r555): [1296..1297]
 a80(r354): [1300..1323]
 a81(r362): [1300..1301]
 a82(r361): [1302..1303]
 a83(r360): [1304..1305]
 a84(r358): [1304..1311]
 a85(r359): [1306..1307]
 a86(r554): [1308..1309]
 a87(r357): [1312..1313]
 a88(r553): [1314..1315]
 a89(r356): [1314..1317]
 a90(r355): [1318..1319]
 a91(r552): [1320..1321]
 a92(r353): [1324..1325]
 a93(r351): [1324..1331]
 a94(r352): [1326..1327]
 a95(r551): [1328..1329]
 a96(r350): [1332..1333]
 a97(r550): [1334..1335]
 a98(r349): [1334..1337]
 a99(r348): [1338..1339]
 a100(r549): [1340..1341]
 a101(r339): [1344..1367]
 a102(r347): [1344..1345]
 a103(r346): [1346..1347]
 a104(r345): [1348..1349]
 a105(r343): [1348..1355]
 a106(r344): [1350..1351]
 a107(r548): [1352..1353]
 a108(r342): [1356..1357]
 a109(r547): [1358..1359]
 a110(r341): [1358..1361]
 a111(r340): [1362..1363]
 a112(r546): [1364..1365]
 a113(r338): [1368..1369]
 a114(r337): [1368..1373]
 a115(r545): [1370..1371]
 a116(r336): [1374..1375]
 a117(r544): [1376..1377]
 a118(r335): [1376..1379]
 a119(r334): [1380..1381]
 a120(r543): [1382..1383]
 a121(r333): [394..395]
 a122(r332): [396..397]
 a123(r331): [398..399]
 a124(r330): [398..401]
 a125(r329): [402..403]
 a126(r328): [404..405]
 a127(r327): [406..407]
 a128(r326): [408..409]
 a129(r542): [410..411]
 a130(r325): [410..413]
 a131(r324): [414..415]
 a132(r541): [416..417]
 a133(r315): [219..242]
 a134(r323): [219..220]
 a135(r322): [221..222]
 a136(r321): [223..224]
 a137(r319): [223..230]
 a138(r320): [225..226]
 a139(r540): [227..228]
 a140(r318): [231..232]
 a141(r539): [233..234]
 a142(r317): [233..236]
 a143(r316): [237..238]
 a144(r538): [239..240]
 a145(r314): [243..244]
 a146(r312): [243..250]
 a147(r313): [245..246]
 a148(r537): [247..248]
 a149(r311): [251..252]
 a150(r536): [253..254]
 a151(r310): [253..256]
 a152(r309): [257..258]
 a153(r535): [259..260]
 a154(r300): [263..286]
 a155(r308): [263..264]
 a156(r307): [265..266]
 a157(r306): [267..268]
 a158(r304): [267..274]
 a159(r305): [269..270]
 a160(r534): [271..272]
 a161(r303): [275..276]
 a162(r533): [277..278]
 a163(r302): [277..280]
 a164(r301): [281..282]
 a165(r532): [283..284]
 a166(r299): [287..288]
 a167(r297): [287..294]
 a168(r298): [289..290]
 a169(r531): [291..292]
 a170(r296): [295..296]
 a171(r530): [297..298]
 a172(r295): [297..300]
 a173(r294): [301..302]
 a174(r529): [303..304]
 a175(r285): [307..330]
 a176(r293): [307..308]
 a177(r292): [309..310]
 a178(r291): [311..312]
 a179(r289): [311..318]
 a180(r290): [313..314]
 a181(r528): [315..316]
 a182(r288): [319..320]
 a183(r527): [321..322]
 a184(r287): [321..324]
 a185(r286): [325..326]
 a186(r526): [327..328]
 a187(r284): [331..332]
 a188(r282): [331..338]
 a189(r283): [333..334]
 a190(r525): [335..336]
 a191(r281): [339..340]
 a192(r524): [341..342]
 a193(r280): [341..344]
 a194(r279): [345..346]
 a195(r523): [347..348]
 a196(r271): [351..372]
 a197(r278): [351..352]
 a198(r277): [353..354]
 a199(r276): [355..356]
 a200(r275): [355..360]
 a201(r522): [357..358]
 a202(r274): [361..362]
 a203(r521): [363..364]
 a204(r273): [363..366]
 a205(r272): [367..368]
 a206(r520): [369..370]
 a207(r270): [373..374]
 a208(r269): [373..378]
 a209(r519): [375..376]
 a210(r268): [379..380]
 a211(r518): [381..382]
 a212(r267): [381..384]
 a213(r266): [385..386]
 a214(r517): [387..388]
 a215(r265): [185..186]
 a216(r264): [187..188]
 a217(r263): [189..190]
 a218(r262): [189..192]
 a219(r261): [193..194]
 a220(r260): [195..196]
 a221(r259): [197..198]
 a222(r258): [199..200]
 a223(r516): [201..202]
 a224(r257): [201..204]
 a225(r256): [205..206]
 a226(r515): [207..208]
 a227(r255): [426..427]
 a228(r254): [426..431]
 a229(r514): [428..429]
 a230(r513): [432..433]
 a231(r253): [510..517]
 a232(r249): [512..529]
 a233(r237): [516..561]
 a234(r252): [518..519]
 a235(r512): [520..521]
 a236(r251): [520..523]
 a237(r250): [524..525]
 a238(r511): [526..527]
 a239(r248): [530..531]
 a240(r247): [532..533]
 a241(r242): [532..547]
 a242(r246): [534..535]
 a243(r245): [536..537]
 a244(r510): [538..539]
 a245(r244): [538..541]
 a246(r243): [542..543]
 a247(r509): [544..545]
 a248(r241): [548..549]
 a249(r240): [550..551]
 a250(r508): [552..553]
 a251(r239): [552..555]
 a252(r238): [556..557]
 a253(r507): [558..559]
 a254(r236): [562..563]
 a255(r506): [564..565]
 a256(r235): [564..567]
 a257(r234): [568..569]
 a258(r505): [570..571]
 a259(r233): [1193..1194]
 a260(r232): [1195..1196]
 a261(r231): [1197..1198]
 a262(r504): [1199..1200]
 a263(r230): [1199..1202]
 a264(r229): [1203..1204]
 a265(r503): [1205..1206]
 a266(r228): [1174..1175]
 a267(r227): [1176..1177]
 a268(r226): [1178..1179]
 a269(r502): [1180..1181]
 a270(r225): [1180..1183]
 a271(r224): [1184..1185]
 a272(r501): [1186..1187]
 a273(r223): [577..578]
 a274(r222): [579..580]
 a275(r221): [581..582]
 a276(r500): [583..584]
 a277(r220): [583..586]
 a278(r219): [587..588]
 a279(r499): [589..590]
 a280(r218): [441..448]
 a281(r214): [443..460]
 a282(r202): [447..492]
 a283(r217): [449..450]
 a284(r498): [451..452]
 a285(r216): [451..454]
 a286(r215): [455..456]
 a287(r497): [457..458]
 a288(r213): [461..462]
 a289(r212): [463..464]
 a290(r207): [463..478]
 a291(r211): [465..466]
 a292(r210): [467..468]
 a293(r496): [469..470]
 a294(r209): [469..472]
 a295(r208): [473..474]
 a296(r495): [475..476]
 a297(r206): [479..480]
 a298(r205): [481..482]
 a299(r494): [483..484]
 a300(r204): [483..486]
 a301(r203): [487..488]
 a302(r493): [489..490]
 a303(r201): [493..494]
 a304(r492): [495..496]
 a305(r200): [495..498]
 a306(r199): [499..500]
 a307(r491): [501..502]
 a308(r198): [596..597]
 a309(r197): [598..599]
 a310(r196): [600..601]
 a311(r490): [602..603]
 a312(r195): [602..605]
 a313(r194): [606..607]
 a314(r489): [608..609]
 a315(r488): [1163..1166]
 a316(r487): [1165..1168]
 a317(r193): [615..616]
 a318(r192): [615..620]
 a319(r486): [617..618]
 a320(r485): [621..622]
 a321(r191): [627..634]
 a322(r187): [633..646]
 a323(r190): [635..636]
 a324(r484): [637..638]
 a325(r189): [637..640]
 a326(r188): [641..642]
 a327(r483): [643..644]
 a328(r186): [647..648]
 a329(r482): [649..650]
 a330(r185): [649..652]
 a331(r184): [653..654]
 a332(r481): [655..656]
 a333(r175): [659..686]
 a334(r183): [659..660]
 a335(r480): [661..662]
 a336(r182): [667..668]
 a337(r181): [669..670]
 a338(r180): [671..672]
 a339(r179): [673..674]
 a340(r178): [675..676]
 a341(r479): [677..678]
 a342(r177): [677..680]
 a343(r176): [681..682]
 a344(r478): [683..684]
 a345(r477): [687..688]
 a346(r174): [687..690]
 a347(r173): [691..692]
 a348(r476): [693..694]
 a349(r164): [697..724]
 a350(r172): [697..698]
 a351(r475): [699..700]
 a352(r171): [705..706]
 a353(r170): [707..708]
 a354(r169): [709..710]
 a355(r168): [711..712]
 a356(r167): [713..714]
 a357(r474): [715..716]
 a358(r166): [715..718]
 a359(r165): [719..720]
 a360(r473): [721..722]
 a361(r472): [725..726]
 a362(r163): [725..728]
 a363(r162): [729..730]
 a364(r471): [731..732]
 a365(r158): [735..750]
 a366(r161): [735..736]
 a367(r470): [737..738]
 a368(r160): [743..744]
 a369(r159): [745..746]
 a370(r469): [747..748]
 a371(r468): [751..752]
 a372(r157): [751..754]
 a373(r156): [755..756]
 a374(r467): [757..758]
 a375(r152): [761..776]
 a376(r155): [761..762]
 a377(r466): [763..764]
 a378(r154): [769..770]
 a379(r153): [771..772]
 a380(r465): [773..774]
 a381(r464): [777..778]
 a382(r151): [777..780]
 a383(r150): [781..782]
 a384(r463): [783..784]
 a385(r462): [1154..1155]
 a386(r461): [1156..1157]
 a387(r149): [790..791]
 a388(r144): [790..805]
 a389(r148): [792..793]
 a390(r147): [794..795]
 a391(r460): [796..797]
 a392(r146): [796..799]
 a393(r145): [800..801]
 a394(r459): [802..803]
 a395(r458): [806..807]
 a396(r457): [810..811]
 a397(r143): [812..813]
 a398(r142): [814..815]
 a399(r456): [816..817]
 a400(r141): [816..819]
 a401(r140): [820..821]
 a402(r455): [822..823]
 a403(r454): [829..832]
 a404(r453): [831..834]
 a405(r452): [881..882]
 a406(r451): [860..861]
 a407(r137): [888..889]
 a408(r450): [890..891]
 a409(r449): [901..902]
 a410(r139): [901..904]
 a411(r448): [905..906]
 a412(r138): [948..949]
 a413(r447): [950..951]
 a414(r136): [1137..1138]
 a415(r135): [1139..1140]
 a416(r134): [1141..1142]
 a417(r446): [1143..1144]
 a418(r133): [1143..1146]
 a419(r132): [1147..1148]
 a420(r445): [1149..1150]
 a421(r131): [1118..1119]
 a422(r130): [1120..1121]
 a423(r129): [1122..1123]
 a424(r444): [1124..1125]
 a425(r128): [1124..1127]
 a426(r127): [1128..1129]
 a427(r443): [1130..1131]
 a428(r126): [957..958]
 a429(r125): [959..960]
 a430(r124): [961..962]
 a431(r442): [963..964]
 a432(r123): [963..966]
 a433(r122): [967..968]
 a434(r441): [969..970]
 a435(r121): [1021..1022]
 a436(r120): [1025..1026]
 a437(r119): [1031..1038]
 a438(r115): [1037..1050]
 a439(r118): [1039..1040]
 a440(r440): [1041..1042]
 a441(r117): [1041..1044]
 a442(r116): [1045..1046]
 a443(r439): [1047..1048]
 a444(r114): [1051..1052]
 a445(r438): [1053..1054]
 a446(r113): [1053..1056]
 a447(r112): [1057..1058]
 a448(r437): [1059..1060]
 a449(r111): [976..977]
 a450(r110): [980..981]
 a451(r109): [986..993]
 a452(r105): [992..1005]
 a453(r108): [994..995]
 a454(r436): [996..997]
 a455(r107): [996..999]
 a456(r106): [1000..1001]
 a457(r435): [1002..1003]
 a458(r104): [1006..1007]
 a459(r434): [1008..1009]
 a460(r103): [1008..1011]
 a461(r102): [1012..1013]
 a462(r433): [1014..1015]
 a463(r101): [1071..1072]
 a464(r100): [1073..1074]
 a465(r432): [1075..1076]
 a466(r99): [1075..1078]
 a467(r98): [1079..1080]
 a468(r431): [1081..1082]
 a469(r95): [1085..1104]
 a470(r97): [1085..1086]
 a471(r96): [1091..1094]
 a472(r430): [1095..1096]
 a473(r429): [1095..1098]
 a474(r427): [1099..1100]
 a475(r428): [1101..1102]
 a476(r426): [1105..1106]
 a477(r94): [1105..1108]
 a478(r93): [1109..1110]
 a479(r425): [1111..1112]
 a480(r92): [64..65]
 a481(r91): [66..67]
 a482(r424): [68..69]
 a483(r90): [68..71]
 a484(r422): [76..81] [72..73]
 a485(r423): [74..75]
 a486(r89): [78..83]
 a487(r421): [84..85]
 a488(r88): [48..49]
 a489(r87): [50..51]
 a490(r420): [52..53]
Compressing live ranges: from 1401 to 774 - 55%
Ranges after the compression:
 a0(r419): [0..1]
 a1(r418): [2..3]
 a2(r408): [38..57]
 a3(r417): [38..39]
 a4(r416): [40..41]
 a5(r415): [42..43]
 a6(r414): [44..45]
 a7(r412): [44..49]
 a8(r413): [46..47]
 a9(r577): [48..49]
 a10(r411): [50..51]
 a11(r576): [52..53]
 a12(r410): [52..53]
 a13(r409): [54..55]
 a14(r575): [56..57]
 a15(r407): [58..59]
 a16(r405): [58..63]
 a17(r406): [60..61]
 a18(r574): [62..63]
 a19(r404): [64..65]
 a20(r573): [66..67]
 a21(r403): [66..67]
 a22(r402): [68..69]
 a23(r572): [70..71]
 a24(r571): [24..25]
 a25(r401): [26..27]
 a26(r400): [28..29]
 a27(r399): [30..31]
 a28(r570): [32..33]
 a29(r398): [32..33]
 a30(r397): [34..35]
 a31(r569): [36..37]
 a32(r396): [72..73]
 a33(r395): [74..75]
 a34(r394): [76..77]
 a35(r568): [78..79]
 a36(r393): [78..79]
 a37(r392): [80..81]
 a38(r567): [82..83]
 a39(r384): [650..665]
 a40(r391): [650..651]
 a41(r390): [652..653]
 a42(r389): [654..655]
 a43(r388): [654..657]
 a44(r566): [656..657]
 a45(r387): [658..659]
 a46(r565): [660..661]
 a47(r386): [660..661]
 a48(r385): [662..663]
 a49(r564): [664..665]
 a50(r383): [666..667]
 a51(r381): [666..671]
 a52(r382): [668..669]
 a53(r563): [670..671]
 a54(r380): [672..673]
 a55(r562): [674..675]
 a56(r379): [674..675]
 a57(r378): [676..677]
 a58(r561): [678..679]
 a59(r369): [680..697]
 a60(r377): [680..681]
 a61(r376): [682..683]
 a62(r375): [684..685]
 a63(r373): [684..689]
 a64(r374): [686..687]
 a65(r560): [688..689]
 a66(r372): [690..691]
 a67(r559): [692..693]
 a68(r371): [692..693]
 a69(r370): [694..695]
 a70(r558): [696..697]
 a71(r368): [698..699]
 a72(r366): [698..703]
 a73(r367): [700..701]
 a74(r557): [702..703]
 a75(r365): [704..705]
 a76(r556): [706..707]
 a77(r364): [706..707]
 a78(r363): [708..709]
 a79(r555): [710..711]
 a80(r354): [712..729]
 a81(r362): [712..713]
 a82(r361): [714..715]
 a83(r360): [716..717]
 a84(r358): [716..721]
 a85(r359): [718..719]
 a86(r554): [720..721]
 a87(r357): [722..723]
 a88(r553): [724..725]
 a89(r356): [724..725]
 a90(r355): [726..727]
 a91(r552): [728..729]
 a92(r353): [730..731]
 a93(r351): [730..735]
 a94(r352): [732..733]
 a95(r551): [734..735]
 a96(r350): [736..737]
 a97(r550): [738..739]
 a98(r349): [738..739]
 a99(r348): [740..741]
 a100(r549): [742..743]
 a101(r339): [744..761]
 a102(r347): [744..745]
 a103(r346): [746..747]
 a104(r345): [748..749]
 a105(r343): [748..753]
 a106(r344): [750..751]
 a107(r548): [752..753]
 a108(r342): [754..755]
 a109(r547): [756..757]
 a110(r341): [756..757]
 a111(r340): [758..759]
 a112(r546): [760..761]
 a113(r338): [762..763]
 a114(r337): [762..765]
 a115(r545): [764..765]
 a116(r336): [766..767]
 a117(r544): [768..769]
 a118(r335): [768..769]
 a119(r334): [770..771]
 a120(r543): [772..773]
 a121(r333): [228..229]
 a122(r332): [230..231]
 a123(r331): [232..233]
 a124(r330): [232..233]
 a125(r329): [234..235]
 a126(r328): [236..237]
 a127(r327): [238..239]
 a128(r326): [240..241]
 a129(r542): [242..243]
 a130(r325): [242..243]
 a131(r324): [244..245]
 a132(r541): [246..247]
 a133(r315): [104..121]
 a134(r323): [104..105]
 a135(r322): [106..107]
 a136(r321): [108..109]
 a137(r319): [108..113]
 a138(r320): [110..111]
 a139(r540): [112..113]
 a140(r318): [114..115]
 a141(r539): [116..117]
 a142(r317): [116..117]
 a143(r316): [118..119]
 a144(r538): [120..121]
 a145(r314): [122..123]
 a146(r312): [122..127]
 a147(r313): [124..125]
 a148(r537): [126..127]
 a149(r311): [128..129]
 a150(r536): [130..131]
 a151(r310): [130..131]
 a152(r309): [132..133]
 a153(r535): [134..135]
 a154(r300): [136..153]
 a155(r308): [136..137]
 a156(r307): [138..139]
 a157(r306): [140..141]
 a158(r304): [140..145]
 a159(r305): [142..143]
 a160(r534): [144..145]
 a161(r303): [146..147]
 a162(r533): [148..149]
 a163(r302): [148..149]
 a164(r301): [150..151]
 a165(r532): [152..153]
 a166(r299): [154..155]
 a167(r297): [154..159]
 a168(r298): [156..157]
 a169(r531): [158..159]
 a170(r296): [160..161]
 a171(r530): [162..163]
 a172(r295): [162..163]
 a173(r294): [164..165]
 a174(r529): [166..167]
 a175(r285): [168..185]
 a176(r293): [168..169]
 a177(r292): [170..171]
 a178(r291): [172..173]
 a179(r289): [172..177]
 a180(r290): [174..175]
 a181(r528): [176..177]
 a182(r288): [178..179]
 a183(r527): [180..181]
 a184(r287): [180..181]
 a185(r286): [182..183]
 a186(r526): [184..185]
 a187(r284): [186..187]
 a188(r282): [186..191]
 a189(r283): [188..189]
 a190(r525): [190..191]
 a191(r281): [192..193]
 a192(r524): [194..195]
 a193(r280): [194..195]
 a194(r279): [196..197]
 a195(r523): [198..199]
 a196(r271): [200..215]
 a197(r278): [200..201]
 a198(r277): [202..203]
 a199(r276): [204..205]
 a200(r275): [204..207]
 a201(r522): [206..207]
 a202(r274): [208..209]
 a203(r521): [210..211]
 a204(r273): [210..211]
 a205(r272): [212..213]
 a206(r520): [214..215]
 a207(r270): [216..217]
 a208(r269): [216..219]
 a209(r519): [218..219]
 a210(r268): [220..221]
 a211(r518): [222..223]
 a212(r267): [222..223]
 a213(r266): [224..225]
 a214(r517): [226..227]
 a215(r265): [84..85]
 a216(r264): [86..87]
 a217(r263): [88..89]
 a218(r262): [88..89]
 a219(r261): [90..91]
 a220(r260): [92..93]
 a221(r259): [94..95]
 a222(r258): [96..97]
 a223(r516): [98..99]
 a224(r257): [98..99]
 a225(r256): [100..101]
 a226(r515): [102..103]
 a227(r255): [248..249]
 a228(r254): [248..251]
 a229(r514): [250..251]
 a230(r513): [252..253]
 a231(r253): [296..297]
 a232(r249): [296..305]
 a233(r237): [296..329]
 a234(r252): [298..299]
 a235(r512): [300..301]
 a236(r251): [300..301]
 a237(r250): [302..303]
 a238(r511): [304..305]
 a239(r248): [306..307]
 a240(r247): [308..309]
 a241(r242): [308..319]
 a242(r246): [310..311]
 a243(r245): [312..313]
 a244(r510): [314..315]
 a245(r244): [314..315]
 a246(r243): [316..317]
 a247(r509): [318..319]
 a248(r241): [320..321]
 a249(r240): [322..323]
 a250(r508): [324..325]
 a251(r239): [324..325]
 a252(r238): [326..327]
 a253(r507): [328..329]
 a254(r236): [330..331]
 a255(r506): [332..333]
 a256(r235): [332..333]
 a257(r234): [334..335]
 a258(r505): [336..337]
 a259(r233): [638..639]
 a260(r232): [640..641]
 a261(r231): [642..643]
 a262(r504): [644..645]
 a263(r230): [644..645]
 a264(r229): [646..647]
 a265(r503): [648..649]
 a266(r228): [626..627]
 a267(r227): [628..629]
 a268(r226): [630..631]
 a269(r502): [632..633]
 a270(r225): [632..633]
 a271(r224): [634..635]
 a272(r501): [636..637]
 a273(r223): [338..339]
 a274(r222): [340..341]
 a275(r221): [342..343]
 a276(r500): [344..345]
 a277(r220): [344..345]
 a278(r219): [346..347]
 a279(r499): [348..349]
 a280(r218): [254..255]
 a281(r214): [254..263]
 a282(r202): [254..287]
 a283(r217): [256..257]
 a284(r498): [258..259]
 a285(r216): [258..259]
 a286(r215): [260..261]
 a287(r497): [262..263]
 a288(r213): [264..265]
 a289(r212): [266..267]
 a290(r207): [266..277]
 a291(r211): [268..269]
 a292(r210): [270..271]
 a293(r496): [272..273]
 a294(r209): [272..273]
 a295(r208): [274..275]
 a296(r495): [276..277]
 a297(r206): [278..279]
 a298(r205): [280..281]
 a299(r494): [282..283]
 a300(r204): [282..283]
 a301(r203): [284..285]
 a302(r493): [286..287]
 a303(r201): [288..289]
 a304(r492): [290..291]
 a305(r200): [290..291]
 a306(r199): [292..293]
 a307(r491): [294..295]
 a308(r198): [350..351]
 a309(r197): [352..353]
 a310(r196): [354..355]
 a311(r490): [356..357]
 a312(r195): [356..357]
 a313(r194): [358..359]
 a314(r489): [360..361]
 a315(r488): [624..625]
 a316(r487): [624..625]
 a317(r193): [362..363]
 a318(r192): [362..365]
 a319(r486): [364..365]
 a320(r485): [366..367]
 a321(r191): [368..369]
 a322(r187): [368..377]
 a323(r190): [370..371]
 a324(r484): [372..373]
 a325(r189): [372..373]
 a326(r188): [374..375]
 a327(r483): [376..377]
 a328(r186): [378..379]
 a329(r482): [380..381]
 a330(r185): [380..381]
 a331(r184): [382..383]
 a332(r481): [384..385]
 a333(r175): [386..405]
 a334(r183): [386..387]
 a335(r480): [388..389]
 a336(r182): [390..391]
 a337(r181): [392..393]
 a338(r180): [394..395]
 a339(r179): [396..397]
 a340(r178): [398..399]
 a341(r479): [400..401]
 a342(r177): [400..401]
 a343(r176): [402..403]
 a344(r478): [404..405]
 a345(r477): [406..407]
 a346(r174): [406..407]
 a347(r173): [408..409]
 a348(r476): [410..411]
 a349(r164): [412..431]
 a350(r172): [412..413]
 a351(r475): [414..415]
 a352(r171): [416..417]
 a353(r170): [418..419]
 a354(r169): [420..421]
 a355(r168): [422..423]
 a356(r167): [424..425]
 a357(r474): [426..427]
 a358(r166): [426..427]
 a359(r165): [428..429]
 a360(r473): [430..431]
 a361(r472): [432..433]
 a362(r163): [432..433]
 a363(r162): [434..435]
 a364(r471): [436..437]
 a365(r158): [438..447]
 a366(r161): [438..439]
 a367(r470): [440..441]
 a368(r160): [442..443]
 a369(r159): [444..445]
 a370(r469): [446..447]
 a371(r468): [448..449]
 a372(r157): [448..449]
 a373(r156): [450..451]
 a374(r467): [452..453]
 a375(r152): [454..463]
 a376(r155): [454..455]
 a377(r466): [456..457]
 a378(r154): [458..459]
 a379(r153): [460..461]
 a380(r465): [462..463]
 a381(r464): [464..465]
 a382(r151): [464..465]
 a383(r150): [466..467]
 a384(r463): [468..469]
 a385(r462): [620..621]
 a386(r461): [622..623]
 a387(r149): [470..471]
 a388(r144): [470..481]
 a389(r148): [472..473]
 a390(r147): [474..475]
 a391(r460): [476..477]
 a392(r146): [476..477]
 a393(r145): [478..479]
 a394(r459): [480..481]
 a395(r458): [482..483]
 a396(r457): [484..485]
 a397(r143): [486..487]
 a398(r142): [488..489]
 a399(r456): [490..491]
 a400(r141): [490..491]
 a401(r140): [492..493]
 a402(r455): [494..495]
 a403(r454): [496..497]
 a404(r453): [496..497]
 a405(r452): [500..501]
 a406(r451): [498..499]
 a407(r137): [502..503]
 a408(r450): [504..505]
 a409(r449): [506..507]
 a410(r139): [506..507]
 a411(r448): [508..509]
 a412(r138): [510..511]
 a413(r447): [512..513]
 a414(r136): [608..609]
 a415(r135): [610..611]
 a416(r134): [612..613]
 a417(r446): [614..615]
 a418(r133): [614..615]
 a419(r132): [616..617]
 a420(r445): [618..619]
 a421(r131): [596..597]
 a422(r130): [598..599]
 a423(r129): [600..601]
 a424(r444): [602..603]
 a425(r128): [602..603]
 a426(r127): [604..605]
 a427(r443): [606..607]
 a428(r126): [514..515]
 a429(r125): [516..517]
 a430(r124): [518..519]
 a431(r442): [520..521]
 a432(r123): [520..521]
 a433(r122): [522..523]
 a434(r441): [524..525]
 a435(r121): [548..549]
 a436(r120): [550..551]
 a437(r119): [552..553]
 a438(r115): [552..561]
 a439(r118): [554..555]
 a440(r440): [556..557]
 a441(r117): [556..557]
 a442(r116): [558..559]
 a443(r439): [560..561]
 a444(r114): [562..563]
 a445(r438): [564..565]
 a446(r113): [564..565]
 a447(r112): [566..567]
 a448(r437): [568..569]
 a449(r111): [526..527]
 a450(r110): [528..529]
 a451(r109): [530..531]
 a452(r105): [530..539]
 a453(r108): [532..533]
 a454(r436): [534..535]
 a455(r107): [534..535]
 a456(r106): [536..537]
 a457(r435): [538..539]
 a458(r104): [540..541]
 a459(r434): [542..543]
 a460(r103): [542..543]
 a461(r102): [544..545]
 a462(r433): [546..547]
 a463(r101): [570..571]
 a464(r100): [572..573]
 a465(r432): [574..575]
 a466(r99): [574..575]
 a467(r98): [576..577]
 a468(r431): [578..579]
 a469(r95): [580..589]
 a470(r97): [580..581]
 a471(r96): [582..583]
 a472(r430): [584..585]
 a473(r429): [584..585]
 a474(r427): [586..587]
 a475(r428): [588..589]
 a476(r426): [590..591]
 a477(r94): [590..591]
 a478(r93): [592..593]
 a479(r425): [594..595]
 a480(r92): [10..11]
 a481(r91): [12..13]
 a482(r424): [14..15]
 a483(r90): [14..15]
 a484(r422): [20..21] [16..17]
 a485(r423): [18..19]
 a486(r89): [20..21]
 a487(r421): [22..23]
 a488(r88): [4..5]
 a489(r87): [6..7]
 a490(r420): [8..9]
  regions=1, blocks=55, points=774
    allocnos=491 (big 0), copies=0, conflicts=0, ranges=492
Disposition:
  489:r87  l0     0  488:r88  l0     0  486:r89  l0     1  483:r90  l0     1
  481:r91  l0     0  480:r92  l0     0  478:r93  l0     0  477:r94  l0     1
  469:r95  l0     3  471:r96  l0     0  470:r97  l0     0  467:r98  l0     0
  466:r99  l0     1  464:r100 l0     0  463:r101 l0     0  461:r102 l0     0
  460:r103 l0     1  458:r104 l0     0  452:r105 l0     1  456:r106 l0     0
  455:r107 l0     2  453:r108 l0     0  451:r109 l0     0  450:r110 l0     0
  449:r111 l0     0  447:r112 l0     0  446:r113 l0     1  444:r114 l0     0
  438:r115 l0     1  442:r116 l0     0  441:r117 l0     2  439:r118 l0     0
  437:r119 l0     0  436:r120 l0     0  435:r121 l0     0  433:r122 l0     0
  432:r123 l0     1  430:r124 l0     0  429:r125 l0     0  428:r126 l0     0
  426:r127 l0     0  425:r128 l0     1  423:r129 l0     0  422:r130 l0     0
  421:r131 l0     0  419:r132 l0     0  418:r133 l0     1  416:r134 l0     0
  415:r135 l0     0  414:r136 l0     0  407:r137 l0     0  412:r138 l0     0
  410:r139 l0     1  401:r140 l0     0  400:r141 l0     1  398:r142 l0     0
  397:r143 l0     0  388:r144 l0     1  393:r145 l0     0  392:r146 l0     2
  390:r147 l0     0  389:r148 l0     0  387:r149 l0     0  383:r150 l0     0
  382:r151 l0     1  375:r152 l0     3  379:r153 l0     0  378:r154 l0     0
  376:r155 l0     0  373:r156 l0     0  372:r157 l0     1  365:r158 l0     3
  369:r159 l0     0  368:r160 l0     0  366:r161 l0     0  363:r162 l0     0
  362:r163 l0     1  349:r164 l0     3  359:r165 l0     0  358:r166 l0     1
  356:r167 l0     0  355:r168 l0     0  354:r169 l0     0  353:r170 l0     0
  352:r171 l0     0  350:r172 l0     0  347:r173 l0     0  346:r174 l0     1
  333:r175 l0     3  343:r176 l0     0  342:r177 l0     1  340:r178 l0     0
  339:r179 l0     0  338:r180 l0     0  337:r181 l0     0  336:r182 l0     0
  334:r183 l0     0  331:r184 l0     0  330:r185 l0     1  328:r186 l0     0
  322:r187 l0     1  326:r188 l0     0  325:r189 l0     2  323:r190 l0     0
  321:r191 l0     0  318:r192 l0     1  317:r193 l0     0  313:r194 l0     0
  312:r195 l0     1  310:r196 l0     0  309:r197 l0     0  308:r198 l0     0
  306:r199 l0     0  305:r200 l0     1  303:r201 l0     0  282:r202 l0     1
  301:r203 l0     0  300:r204 l0     2  298:r205 l0     0  297:r206 l0     0
  290:r207 l0     2  295:r208 l0     0  294:r209 l0     4  292:r210 l0     0
  291:r211 l0     0  289:r212 l0     0  288:r213 l0     0  281:r214 l0     4
  286:r215 l0     0  285:r216 l0     2  283:r217 l0     0  280:r218 l0     0
  278:r219 l0     0  277:r220 l0     1  275:r221 l0     0  274:r222 l0     0
  273:r223 l0     0  271:r224 l0     0  270:r225 l0     1  268:r226 l0     0
  267:r227 l0     0  266:r228 l0     0  264:r229 l0     0  263:r230 l0     1
  261:r231 l0     0  260:r232 l0     0  259:r233 l0     0  257:r234 l0     0
  256:r235 l0     1  254:r236 l0     0  233:r237 l0     1  252:r238 l0     0
  251:r239 l0     2  249:r240 l0     0  248:r241 l0     0  241:r242 l0     2
  246:r243 l0     0  245:r244 l0     4  243:r245 l0     0  242:r246 l0     0
  240:r247 l0     0  239:r248 l0     0  232:r249 l0     4  237:r250 l0     0
  236:r251 l0     2  234:r252 l0     0  231:r253 l0     0  228:r254 l0     1
  227:r255 l0     0  225:r256 l0     0  224:r257 l0     1  222:r258 l0     0
  221:r259 l0     0  220:r260 l0     0  219:r261 l0     0  218:r262 l0     1
  217:r263 l0     0  216:r264 l0     0  215:r265 l0     0  213:r266 l0     0
  212:r267 l0     1  210:r268 l0     0  208:r269 l0     1  207:r270 l0     0
  196:r271 l0     1  205:r272 l0     0  204:r273 l0     2  202:r274 l0     0
  200:r275 l0     2  199:r276 l0     0  198:r277 l0     0  197:r278 l0     0
  194:r279 l0     0  193:r280 l0     1  191:r281 l0     0  188:r282 l0     0
  189:r283 l0     1  187:r284 l0     1  175:r285 l0     1  185:r286 l0     0
  184:r287 l0     2  182:r288 l0     0  179:r289 l0     0  180:r290 l0     2
  178:r291 l0     2  177:r292 l0     0  176:r293 l0     0  173:r294 l0     0
  172:r295 l0     1  170:r296 l0     0  167:r297 l0     0  168:r298 l0     1
  166:r299 l0     1  154:r300 l0     1  164:r301 l0     0  163:r302 l0     2
  161:r303 l0     0  158:r304 l0     0  159:r305 l0     2  157:r306 l0     2
  156:r307 l0     0  155:r308 l0     0  152:r309 l0     0  151:r310 l0     1
  149:r311 l0     0  146:r312 l0     0  147:r313 l0     1  145:r314 l0     1
  133:r315 l0     1  143:r316 l0     0  142:r317 l0     2  140:r318 l0     0
  137:r319 l0     0  138:r320 l0     2  136:r321 l0     2  135:r322 l0     0
  134:r323 l0     0  131:r324 l0     0  130:r325 l0     1  128:r326 l0     0
  127:r327 l0     0  126:r328 l0     0  125:r329 l0     0  124:r330 l0     1
  123:r331 l0     0  122:r332 l0     0  121:r333 l0     0  119:r334 l0     0
  118:r335 l0     1  116:r336 l0     0  114:r337 l0     1  113:r338 l0     0
  101:r339 l0     1  111:r340 l0     0  110:r341 l0     2  108:r342 l0     0
  105:r343 l0     0  106:r344 l0     2  104:r345 l0     2  103:r346 l0     0
  102:r347 l0     0   99:r348 l0     0   98:r349 l0     1   96:r350 l0     0
   93:r351 l0     0   94:r352 l0     1   92:r353 l0     1   80:r354 l0     1
   90:r355 l0     0   89:r356 l0     2   87:r357 l0     0   84:r358 l0     0
   85:r359 l0     2   83:r360 l0     2   82:r361 l0     0   81:r362 l0     0
   78:r363 l0     0   77:r364 l0     1   75:r365 l0     0   72:r366 l0     0
   73:r367 l0     1   71:r368 l0     1   59:r369 l0     1   69:r370 l0     0
   68:r371 l0     2   66:r372 l0     0   63:r373 l0     0   64:r374 l0     2
   62:r375 l0     2   61:r376 l0     0   60:r377 l0     0   57:r378 l0     0
   56:r379 l0     1   54:r380 l0     0   51:r381 l0     0   52:r382 l0     1
   50:r383 l0     1   39:r384 l0     1   48:r385 l0     0   47:r386 l0     2
   45:r387 l0     0   43:r388 l0     2   42:r389 l0     0   41:r390 l0     0
   40:r391 l0     0   37:r392 l0     0   36:r393 l0     1   34:r394 l0     0
   33:r395 l0     0   32:r396 l0     0   30:r397 l0     0   29:r398 l0     1
   27:r399 l0     0   26:r400 l0     0   25:r401 l0     0   22:r402 l0     0
   21:r403 l0     1   19:r404 l0     0   16:r405 l0     0   17:r406 l0     1
   15:r407 l0     1    2:r408 l0     1   13:r409 l0     0   12:r410 l0     2
   10:r411 l0     0    7:r412 l0     0    8:r413 l0     2    6:r414 l0     2
    5:r415 l0     0    4:r416 l0     0    3:r417 l0     0    1:r418 l0     0
    0:r419 l0     0  490:r420 l0     0  487:r421 l0     0  484:r422 l0     0
  485:r423 l0     0  482:r424 l0     0  479:r425 l0     0  476:r426 l0     0
  474:r427 l0     0  475:r428 l0     0  473:r429 l0     1  472:r430 l0     0
  468:r431 l0     0  465:r432 l0     0  462:r433 l0     0  459:r434 l0     0
  457:r435 l0     0  454:r436 l0     0  448:r437 l0     0  445:r438 l0     0
  443:r439 l0     0  440:r440 l0     0  434:r441 l0     0  431:r442 l0     0
  427:r443 l0     0  424:r444 l0     0  420:r445 l0     0  417:r446 l0     0
  413:r447 l0     0  411:r448 l0     0  409:r449 l0     0  408:r450 l0     0
  406:r451 l0     0  405:r452 l0     0  404:r453 l0     1  403:r454 l0     0
  402:r455 l0     0  399:r456 l0     0  396:r457 l0     0  395:r458 l0     0
  394:r459 l0     0  391:r460 l0     0  386:r461 l0     0  385:r462 l0     0
  384:r463 l0     0  381:r464 l0     0  380:r465 l0     0  377:r466 l0     0
  374:r467 l0     0  371:r468 l0     0  370:r469 l0     0  367:r470 l0     0
  364:r471 l0     0  361:r472 l0     0  360:r473 l0     0  357:r474 l0     0
  351:r475 l0     0  348:r476 l0     0  345:r477 l0     0  344:r478 l0     0
  341:r479 l0     0  335:r480 l0     0  332:r481 l0     0  329:r482 l0     0
  327:r483 l0     0  324:r484 l0     0  320:r485 l0     0  319:r486 l0     0
  316:r487 l0     1  315:r488 l0     0  314:r489 l0     0  311:r490 l0     0
  307:r491 l0     0  304:r492 l0     0  302:r493 l0     0  299:r494 l0     0
  296:r495 l0     0  293:r496 l0     0  287:r497 l0     0  284:r498 l0     0
  279:r499 l0     0  276:r500 l0     0  272:r501 l0     0  269:r502 l0     0
  265:r503 l0     0  262:r504 l0     0  258:r505 l0     0  255:r506 l0     0
  253:r507 l0     0  250:r508 l0     0  247:r509 l0     0  244:r510 l0     0
  238:r511 l0     0  235:r512 l0     0  230:r513 l0     0  229:r514 l0     0
  226:r515 l0     0  223:r516 l0     0  214:r517 l0     0  211:r518 l0     0
  209:r519 l0     0  206:r520 l0     0  203:r521 l0     0  201:r522 l0     0
  195:r523 l0     0  192:r524 l0     0  190:r525 l0     1  186:r526 l0     0
  183:r527 l0     0  181:r528 l0     2  174:r529 l0     0  171:r530 l0     0
  169:r531 l0     1  165:r532 l0     0  162:r533 l0     0  160:r534 l0     2
  153:r535 l0     0  150:r536 l0     0  148:r537 l0     1  144:r538 l0     0
  141:r539 l0     0  139:r540 l0     2  132:r541 l0     0  129:r542 l0     0
  120:r543 l0     0  117:r544 l0     0  115:r545 l0     0  112:r546 l0     0
  109:r547 l0     0  107:r548 l0     2  100:r549 l0     0   97:r550 l0     0
   95:r551 l0     1   91:r552 l0     0   88:r553 l0     0   86:r554 l0     2
   79:r555 l0     0   76:r556 l0     0   74:r557 l0     1   70:r558 l0     0
   67:r559 l0     0   65:r560 l0     2   58:r561 l0     0   55:r562 l0     0
   53:r563 l0     1   49:r564 l0     0   46:r565 l0     0   44:r566 l0     0
   38:r567 l0     0   35:r568 l0     0   31:r569 l0     0   28:r570 l0     0
   24:r571 l0     0   23:r572 l0     0   20:r573 l0     0   18:r574 l0     1
   14:r575 l0     0   11:r576 l0     0    9:r577 l0     2
+++Costs: overall -29, reg -29, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


int read_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision1*, float**, float**, Endian_Check*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={32d,9u} r1={36d,6u} r2={36d,6u} r4={39d,9u} r5={61d,31u} r6={1d,54u} r7={1d,84u} r8={30d} r9={30d} r10={30d} r11={30d} r12={30d} r13={30d} r14={30d} r15={30d} r16={1d,85u,22e} r17={216d,28u} r18={30d} r19={30d} r20={1d,198u,33e} r21={31d} r22={31d} r23={31d} r24={31d} r25={31d} r26={31d} r27={31d} r28={31d} r29={30d} r30={30d} r31={30d} r32={30d} r33={30d} r34={30d} r35={30d} r36={30d} r37={31d,1u} r38={31d,1u} r39={30d} r40={30d} r45={30d} r46={30d} r47={30d} r48={30d} r49={30d} r50={30d} r51={30d} r52={30d} r53={30d} r54={30d} r55={30d} r56={30d} r57={30d} r58={30d} r59={30d} r60={30d} r61={30d} r62={30d} r63={30d} r64={30d} r65={30d} r66={30d} r67={30d} r68={30d} r69={30d} r70={30d} r71={30d} r72={30d} r73={30d} r74={30d} r75={30d} r76={30d} r77={30d} r78={30d} r79={30d} r80={30d} r87={1d,1u} r88={1d,1u} r89={1d,2u,1e} r90={1d,1u,1e} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u,1e} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u,1e} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u,1e} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u,1e} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u,1e} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u,1e} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u,1e} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u,1e} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u,1e} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u,1e} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u,1e} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u,1e} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u,1e} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u,1e} r164={1d,1u} r165={1d,1u} r166={1d,1u,1e} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u,1e} r175={1d,1u} r176={1d,1u} r177={1d,1u,1e} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u,1e} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u,1e} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u,1e} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u,1e} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u,1e} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u,1e} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u,1e} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u,1e} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u,1e} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u,1e} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u,1e} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u,1e} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u,1e} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u,1e} r252={1d,1u} r253={1d,1u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u,1e} r258={1d,1u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u,1e} r268={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r272={1d,1u} r273={1d,1u,1e} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u,1e} r281={1d,1u} r282={1d,1u} r283={1d,1u} r284={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u,1e} r288={1d,1u} r289={1d,1u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u} r295={1d,1u,1e} r296={1d,1u} r297={1d,1u} r298={1d,1u} r299={1d,1u} r300={1d,1u} r301={1d,1u} r302={1d,1u,1e} r303={1d,1u} r304={1d,1u} r305={1d,1u} r306={1d,1u} r307={1d,1u} r308={1d,1u} r309={1d,1u} r310={1d,1u,1e} r311={1d,1u} r312={1d,1u} r313={1d,1u} r314={1d,1u} r315={1d,1u} r316={1d,1u} r317={1d,1u,1e} r318={1d,1u} r319={1d,1u} r320={1d,1u} r321={1d,1u} r322={1d,1u} r323={1d,1u} r324={1d,1u} r325={1d,1u,1e} r326={1d,1u} r327={1d,1u} r328={1d,1u} r329={1d,1u} r330={1d,1u} r331={1d,1u} r332={1d,1u} r333={1d,1u} r334={1d,1u} r335={1d,1u,1e} r336={1d,1u} r337={1d,1u} r338={1d,1u} r339={1d,1u} r340={1d,1u} r341={1d,1u,1e} r342={1d,1u} r343={1d,1u} r344={1d,1u} r345={1d,1u} r346={1d,1u} r347={1d,1u} r348={1d,1u} r349={1d,1u,1e} r350={1d,1u} r351={1d,1u} r352={1d,1u} r353={1d,1u} r354={1d,1u} r355={1d,1u} r356={1d,1u,1e} r357={1d,1u} r358={1d,1u} r359={1d,1u} r360={1d,1u} r361={1d,1u} r362={1d,1u} r363={1d,1u} r364={1d,1u,1e} r365={1d,1u} r366={1d,1u} r367={1d,1u} r368={1d,1u} r369={1d,1u} r370={1d,1u} r371={1d,1u,1e} r372={1d,1u} r373={1d,1u} r374={1d,1u} r375={1d,1u} r376={1d,1u} r377={1d,1u} r378={1d,1u} r379={1d,1u,1e} r380={1d,1u} r381={1d,1u} r382={1d,1u} r383={1d,1u} r384={1d,1u} r385={1d,1u} r386={1d,1u,1e} r387={1d,1u} r388={1d,1u} r389={1d,1u} r390={1d,1u} r391={1d,1u} r392={1d,1u} r393={1d,1u,1e} r394={1d,1u} r395={1d,1u} r396={1d,1u} r397={1d,1u} r398={1d,1u,1e} r399={1d,1u} r400={1d,1u} r401={1d,1u} r402={1d,1u} r403={1d,1u,1e} r404={1d,1u} r405={1d,1u} r406={1d,1u} r407={1d,1u} r408={1d,1u} r409={1d,1u} r410={1d,1u,1e} r411={1d,1u} r412={1d,1u} r413={1d,1u} r414={1d,1u} r415={1d,1u} r416={1d,1u} r417={1d,1u} r418={1d,1u} r419={1d,1u} r420={1d,1u} r421={1d,1u} r422={4d,4u} r423={1d,1u} r424={1d,1u} r425={1d,1u} r426={1d,1u} r427={1d,1u} r428={1d,1u} r429={1d,1u,1e} r430={1d,1u} r431={1d,1u} r432={1d,1u} r433={1d,1u} r434={1d,1u} r435={1d,1u} r436={1d,1u} r437={1d,1u} r438={1d,1u} r439={1d,1u} r440={1d,1u} r441={1d,1u} r442={1d,1u} r443={1d,1u} r444={1d,1u} r445={1d,1u} r446={1d,1u} r447={1d,1u} r448={1d,1u} r449={1d,1u} r450={1d,1u} r451={1d,1u} r452={1d,1u} r453={1d,1u} r454={1d,1u} r455={1d,1u} r456={1d,1u} r457={1d,1u} r458={1d,1u} r459={1d,1u} r460={1d,1u} r461={1d,1u} r462={1d,1u} r463={1d,1u} r464={1d,1u} r465={1d,1u} r466={1d,1u} r467={1d,1u} r468={1d,1u} r469={1d,1u} r470={1d,1u} r471={1d,1u} r472={1d,1u} r473={1d,1u} r474={1d,1u} r475={1d,1u} r476={1d,1u} r477={1d,1u} r478={1d,1u} r479={1d,1u} r480={1d,1u} r481={1d,1u} r482={1d,1u} r483={1d,1u} r484={1d,1u} r485={1d,1u} r486={1d,1u} r487={1d,1u} r488={1d,1u} r489={1d,1u} r490={1d,1u} r491={1d,1u} r492={1d,1u} r493={1d,1u} r494={1d,1u} r495={1d,1u} r496={1d,1u} r497={1d,1u} r498={1d,1u} r499={1d,1u} r500={1d,1u} r501={1d,1u} r502={1d,1u} r503={1d,1u} r504={1d,1u} r505={1d,1u} r506={1d,1u} r507={1d,1u} r508={1d,1u} r509={1d,1u} r510={1d,1u} r511={1d,1u} r512={1d,1u} r513={1d,1u} r514={1d,1u} r515={1d,1u} r516={1d,1u} r517={1d,1u} r518={1d,1u} r519={1d,1u} r520={1d,1u} r521={1d,1u} r522={1d,1u} r523={1d,1u} r524={1d,1u} r525={1d,1u} r526={1d,1u} r527={1d,1u} r528={1d,1u} r529={1d,1u} r530={1d,1u} r531={1d,1u} r532={1d,1u} r533={1d,1u} r534={1d,1u} r535={1d,1u} r536={1d,1u} r537={1d,1u} r538={1d,1u} r539={1d,1u} r540={1d,1u} r541={1d,1u} r542={1d,1u} r543={1d,1u} r544={1d,1u} r545={1d,1u} r546={1d,1u} r547={1d,1u} r548={1d,1u} r549={1d,1u} r550={1d,1u} r551={1d,1u} r552={1d,1u} r553={1d,1u} r554={1d,1u} r555={1d,1u} r556={1d,1u} r557={1d,1u} r558={1d,1u} r559={1d,1u} r560={1d,1u} r561={1d,1u} r562={1d,1u} r563={1d,1u} r564={1d,1u} r565={1d,1u} r566={1d,1u} r567={1d,1u} r568={1d,1u} r569={1d,1u} r570={1d,1u} r571={1d,1u} r572={1d,1u} r573={1d,1u} r574={1d,1u} r575={1d,1u} r576={1d,1u} r577={1d,1u} 
;;    total ref usage 4026{2908d,1007u,111e} in 674{644 regular + 30 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ fid ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ preprocess ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ file ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ main_header ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ block_header ])
        (nil)))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 38 r9 [ switch_data ])
        (nil)))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 771 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:463 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              53 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 420
(code_label 771 11 12 3 121 "" [1 uses])
(note 12 771 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 420)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [0 fid+0 S8 A64])) fmtext_o.cpp:463 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:SI 87 [ D.6737 ])
        (mem:SI (reg/f:DI 420) [0 *fid_22(D)+0 S4 A32])) fmtext_o.cpp:463 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 420)
        (nil)))
(insn 15 14 16 3 (parallel [
            (set (reg:SI 88 [ D.6737 ])
                (plus:SI (reg:SI 87 [ D.6737 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:463 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 87 [ D.6737 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 16 15 17 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 88 [ D.6737 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) fmtext_o.cpp:463 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 88 [ D.6737 ])
        (nil)))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 774)
            (pc))) fmtext_o.cpp:463 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 774)
;;  succ:       54
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 421 422 423 424
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 421)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:DI 89 [ D.6738 ])
        (sign_extend:DI (reg:SI 421))) fmtext_o.cpp:464 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 421)
        (nil)))
(insn 21 20 22 4 (set (reg:DI 422)
        (reg:DI 89 [ D.6738 ])) fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg:DI 422)
                (ashift:DI (reg:DI 422)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 23 22 24 4 (parallel [
            (set (reg:DI 422)
                (plus:DI (reg:DI 422)
                    (reg:DI 89 [ D.6738 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 89 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (mult:DI (reg:DI 89 [ D.6738 ])
                    (const_int 9 [0x9]))
                (nil)))))
(insn 24 23 25 4 (parallel [
            (set (reg:DI 423)
                (ashift:DI (reg:DI 422)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 422)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 25 24 26 4 (set (reg:DI 422)
        (reg:DI 423)) fmtext_o.cpp:464 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 423)
        (nil)))
(insn 26 25 27 4 (set (reg:DI 90 [ D.6738 ])
        (reg:DI 422)) fmtext_o.cpp:464 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 422)
        (nil)))
(insn 27 26 28 4 (set (reg/f:DI 424)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg/f:DI 91 [ D.6739 ])
                (plus:DI (reg:DI 90 [ D.6738 ])
                    (reg/f:DI 424)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 424)
        (expr_list:REG_DEAD (reg:DI 90 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -32 [0xffffffffffffffe0])) [0 preprocess+0 S8 A64])
                        (reg:DI 90 [ D.6738 ]))
                    (nil))))))
(insn 29 28 30 4 (set (reg:SI 92 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 91 [ D.6739 ])
                (const_int 20 [0x14])) [0 _28->file_type+0 S4 A32])) fmtext_o.cpp:464 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ D.6739 ])
        (nil)))
(insn 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 92 [ D.6737 ])
            (const_int 0 [0]))) fmtext_o.cpp:464 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 92 [ D.6737 ])
        (nil)))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 768)
            (pc))) fmtext_o.cpp:464 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 768)
;;  succ:       5 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 93 94 95 96 97 98 99 100 101 425 426 427 428 429 430 431 432
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg:SI 425)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:466 90 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:DI 93 [ D.6738 ])
        (sign_extend:DI (reg:SI 425))) fmtext_o.cpp:466 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 425)
        (nil)))
(insn 35 34 36 5 (parallel [
            (set (reg:DI 94 [ D.6738 ])
                (ashift:DI (reg:DI 93 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 93 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 36 35 37 5 (set (reg/f:DI 426)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (parallel [
            (set (reg/f:DI 95 [ D.6740 ])
                (plus:DI (reg:DI 94 [ D.6738 ])
                    (reg/f:DI 426)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 426)
        (expr_list:REG_DEAD (reg:DI 94 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
                        (reg:DI 94 [ D.6738 ]))
                    (nil))))))
(insn 38 37 39 5 (set (reg:SI 428)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:466 90 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (reg:DI 427)
        (sign_extend:DI (reg:SI 428))) fmtext_o.cpp:466 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 428)
        (nil)))
(insn 40 39 41 5 (parallel [
            (set (reg:DI 429)
                (ashift:DI (reg:DI 427)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 427)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 41 40 42 5 (set (reg/f:DI 430)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [0 file+0 S8 A64])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (parallel [
            (set (reg/f:DI 96 [ D.6741 ])
                (plus:DI (reg:DI 429)
                    (reg/f:DI 430)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 430)
        (expr_list:REG_DEAD (reg:DI 429)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -40 [0xffffffffffffffd8])) [0 file+0 S8 A64])
                        (reg:DI 429))
                    (nil))))))
(insn 43 42 44 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7fa2a18053f0 *.LC15>)) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:DI 5 di)
        (reg/f:DI 96 [ D.6741 ])) fmtext_o.cpp:466 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ D.6741 ])
        (nil)))
(call_insn 45 44 46 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fa2a1ac8510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:466 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 46 45 47 5 (set (reg/f:DI 97 [ D.6742 ])
        (reg:DI 0 ax)) fmtext_o.cpp:466 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 47 46 48 5 (set (mem/f:DI (reg/f:DI 95 [ D.6740 ]) [0 *_33+0 S8 A64])
        (reg/f:DI 97 [ D.6742 ])) fmtext_o.cpp:466 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ D.6742 ])
        (expr_list:REG_DEAD (reg/f:DI 95 [ D.6740 ])
            (nil))))
(insn 48 47 49 5 (set (reg:SI 431)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:468 90 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:DI 98 [ D.6738 ])
        (sign_extend:DI (reg:SI 431))) fmtext_o.cpp:468 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 431)
        (nil)))
(insn 50 49 51 5 (parallel [
            (set (reg:DI 99 [ D.6738 ])
                (ashift:DI (reg:DI 98 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:468 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 98 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 51 50 52 5 (set (reg/f:DI 432)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])) fmtext_o.cpp:468 89 {*movdi_internal}
     (nil))
(insn 52 51 53 5 (parallel [
            (set (reg/f:DI 100 [ D.6740 ])
                (plus:DI (reg:DI 99 [ D.6738 ])
                    (reg/f:DI 432)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:468 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 432)
        (expr_list:REG_DEAD (reg:DI 99 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
                        (reg:DI 99 [ D.6738 ]))
                    (nil))))))
(insn 53 52 54 5 (set (reg/f:DI 101 [ D.6742 ])
        (mem/f:DI (reg/f:DI 100 [ D.6740 ]) [0 *_42+0 S8 A64])) fmtext_o.cpp:468 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100 [ D.6740 ])
        (nil)))
(insn 54 53 55 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 101 [ D.6742 ])
            (const_int 0 [0]))) fmtext_o.cpp:468 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 101 [ D.6742 ])
        (nil)))
(jump_insn 55 54 56 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) fmtext_o.cpp:468 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 62)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 56 55 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fa2a1805480 *.LC16>)) fmtext_o.cpp:469 89 {*movdi_internal}
     (nil))
(call_insn 58 57 59 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:469 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 59 58 60 6 (set (reg:SI 5 di)
        (const_int 4 [0x4])) fmtext_o.cpp:470 90 {*movsi_internal}
     (nil))
(call_insn 60 59 61 6 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fa2a1d26ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:470 660 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 61 60 62)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 62 61 63 7 94 "" [1 uses])
(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:473 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 65 64 66 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) fmtext_o.cpp:473 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 95)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102 103 104 105 106 107 108 109 110 111 433 434 435 436
(note 66 65 67 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 8 (set (reg:SI 433)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:474 90 {*movsi_internal}
     (nil))
(insn 68 67 69 8 (set (reg:DI 102 [ D.6738 ])
        (sign_extend:DI (reg:SI 433))) fmtext_o.cpp:474 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 433)
        (nil)))
(insn 69 68 70 8 (parallel [
            (set (reg:DI 103 [ D.6738 ])
                (ashift:DI (reg:DI 102 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 102 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 70 69 71 8 (set (reg/f:DI 434)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 71 70 72 8 (parallel [
            (set (reg/f:DI 104 [ D.6740 ])
                (plus:DI (reg:DI 103 [ D.6738 ])
                    (reg/f:DI 434)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 434)
        (expr_list:REG_DEAD (reg:DI 103 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
                        (reg:DI 103 [ D.6738 ]))
                    (nil))))))
(insn 72 71 73 8 (set (reg/f:DI 105 [ D.6742 ])
        (mem/f:DI (reg/f:DI 104 [ D.6740 ]) [0 *_46+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ D.6740 ])
        (nil)))
(insn 73 72 74 8 (set (reg:SI 435)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:474 90 {*movsi_internal}
     (nil))
(insn 74 73 75 8 (set (reg:DI 106 [ D.6738 ])
        (sign_extend:DI (reg:SI 435))) fmtext_o.cpp:474 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 435)
        (nil)))
(insn 75 74 76 8 (parallel [
            (set (reg:DI 107 [ D.6738 ])
                (ashift:DI (reg:DI 106 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 106 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 76 75 77 8 (set (reg/f:DI 436)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 77 76 78 8 (parallel [
            (set (reg/f:DI 108 [ D.6743 ])
                (plus:DI (reg:DI 107 [ D.6738 ])
                    (reg/f:DI 436)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 436)
        (expr_list:REG_DEAD (reg:DI 107 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 107 [ D.6738 ]))
                    (nil))))))
(insn 78 77 79 8 (set (reg/f:DI 109 [ D.6744 ])
        (mem/f:DI (reg/f:DI 108 [ D.6743 ]) [0 *_51+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ D.6743 ])
        (nil)))
(insn 79 78 80 8 (set (reg:DI 2 cx)
        (reg/f:DI 105 [ D.6742 ])) fmtext_o.cpp:474 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ D.6742 ])
        (nil)))
(insn 80 79 81 8 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 81 80 82 8 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 82 81 83 8 (set (reg:DI 5 di)
        (reg/f:DI 109 [ D.6744 ])) fmtext_o.cpp:474 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ D.6744 ])
        (nil)))
(call_insn 83 82 84 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fa2a1ada360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:474 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 84 83 85 8 (set (reg:DI 110 [ D.6738 ])
        (reg:DI 0 ax)) fmtext_o.cpp:474 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 85 84 86 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 110 [ D.6738 ])
            (const_int 1 [0x1]))) fmtext_o.cpp:474 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 110 [ D.6738 ])
        (nil)))
(insn 86 85 87 8 (set (reg:QI 111 [ D.6745 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:474 607 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 87 86 88 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 111 [ D.6745 ])
            (const_int 0 [0]))) fmtext_o.cpp:474 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 111 [ D.6745 ])
        (nil)))
(jump_insn 88 87 89 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) fmtext_o.cpp:474 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 125)
;;  succ:       9 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 89 88 90 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7fa2a1805510 *.LC17>)) fmtext_o.cpp:475 89 {*movdi_internal}
     (nil))
(call_insn 91 90 92 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:475 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 92 91 93 9 (set (reg:SI 5 di)
        (const_int 5 [0x5])) fmtext_o.cpp:476 90 {*movsi_internal}
     (nil))
(call_insn 93 92 94 9 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fa2a1d26ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:476 660 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 94 93 95)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 113 114 115 116 117 118 119 120 121 437 438 439 440
(code_label 95 94 96 10 95 "" [1 uses])
(note 96 95 97 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 10 (set (reg:SI 437)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:479 90 {*movsi_internal}
     (nil))
(insn 98 97 99 10 (set (reg:DI 112 [ D.6738 ])
        (sign_extend:DI (reg:SI 437))) fmtext_o.cpp:479 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 437)
        (nil)))
(insn 99 98 100 10 (parallel [
            (set (reg:DI 113 [ D.6738 ])
                (ashift:DI (reg:DI 112 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 112 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 100 99 101 10 (set (reg/f:DI 438)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 101 100 102 10 (parallel [
            (set (reg/f:DI 114 [ D.6740 ])
                (plus:DI (reg:DI 113 [ D.6738 ])
                    (reg/f:DI 438)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 438)
        (expr_list:REG_DEAD (reg:DI 113 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
                        (reg:DI 113 [ D.6738 ]))
                    (nil))))))
(insn 102 101 103 10 (set (reg/f:DI 115 [ D.6742 ])
        (mem/f:DI (reg/f:DI 114 [ D.6740 ]) [0 *_61+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114 [ D.6740 ])
        (nil)))
(insn 103 102 104 10 (set (reg:SI 439)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:479 90 {*movsi_internal}
     (nil))
(insn 104 103 105 10 (set (reg:DI 116 [ D.6738 ])
        (sign_extend:DI (reg:SI 439))) fmtext_o.cpp:479 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 439)
        (nil)))
(insn 105 104 106 10 (parallel [
            (set (reg:DI 117 [ D.6738 ])
                (ashift:DI (reg:DI 116 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 116 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 106 105 107 10 (set (reg/f:DI 440)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 107 106 108 10 (parallel [
            (set (reg/f:DI 118 [ D.6743 ])
                (plus:DI (reg:DI 117 [ D.6738 ])
                    (reg/f:DI 440)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 440)
        (expr_list:REG_DEAD (reg:DI 117 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 117 [ D.6738 ]))
                    (nil))))))
(insn 108 107 109 10 (set (reg/f:DI 119 [ D.6744 ])
        (mem/f:DI (reg/f:DI 118 [ D.6743 ]) [0 *_65+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ D.6743 ])
        (nil)))
(insn 109 108 110 10 (set (reg:DI 2 cx)
        (reg/f:DI 115 [ D.6742 ])) fmtext_o.cpp:479 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ D.6742 ])
        (nil)))
(insn 110 109 111 10 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 111 110 112 10 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 112 111 113 10 (set (reg:DI 5 di)
        (reg/f:DI 119 [ D.6744 ])) fmtext_o.cpp:479 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119 [ D.6744 ])
        (nil)))
(call_insn 113 112 114 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fa2a1ada360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:479 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 114 113 115 10 (set (reg:DI 120 [ D.6738 ])
        (reg:DI 0 ax)) fmtext_o.cpp:479 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 115 114 116 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 120 [ D.6738 ])
            (const_int 1 [0x1]))) fmtext_o.cpp:479 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 120 [ D.6738 ])
        (nil)))
(insn 116 115 117 10 (set (reg:QI 121 [ D.6745 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:479 607 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 117 116 118 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 121 [ D.6745 ])
            (const_int 0 [0]))) fmtext_o.cpp:479 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 121 [ D.6745 ])
        (nil)))
(jump_insn 118 117 119 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) fmtext_o.cpp:479 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 125)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 119 118 120 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7fa2a188c3f0 *.LC29>)) fmtext_o.cpp:480 89 {*movdi_internal}
     (nil))
(call_insn 121 120 122 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:480 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 122 121 123 11 (set (reg:SI 5 di)
        (const_int 5 [0x5])) fmtext_o.cpp:481 90 {*movsi_internal}
     (nil))
(call_insn 123 122 124 11 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fa2a1d26ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:481 660 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 124 123 125)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122 123 124 125 126 441 442
(code_label 125 124 126 12 96 "" [2 uses])
(note 126 125 127 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 12 (set (reg:SI 441)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:486 90 {*movsi_internal}
     (nil))
(insn 128 127 129 12 (set (reg:DI 122 [ D.6738 ])
        (sign_extend:DI (reg:SI 441))) fmtext_o.cpp:486 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 441)
        (nil)))
(insn 129 128 130 12 (parallel [
            (set (reg:DI 123 [ D.6738 ])
                (ashift:DI (reg:DI 122 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:486 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 122 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 130 129 131 12 (set (reg/f:DI 442)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:486 89 {*movdi_internal}
     (nil))
(insn 131 130 132 12 (parallel [
            (set (reg/f:DI 124 [ D.6743 ])
                (plus:DI (reg:DI 123 [ D.6738 ])
                    (reg/f:DI 442)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:486 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 442)
        (expr_list:REG_DEAD (reg:DI 123 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 123 [ D.6738 ]))
                    (nil))))))
(insn 132 131 133 12 (set (reg/f:DI 125 [ D.6744 ])
        (mem/f:DI (reg/f:DI 124 [ D.6743 ]) [0 *_75+0 S8 A64])) fmtext_o.cpp:486 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 124 [ D.6743 ])
        (nil)))
(insn 133 132 134 12 (set (reg:HI 126 [ D.6746 ])
        (mem/j:HI (plus:DI (reg/f:DI 125 [ D.6744 ])
                (const_int 26 [0x1a])) [0 _76->status.number+0 S2 A16])) fmtext_o.cpp:486 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ D.6744 ])
        (nil)))
(insn 134 133 135 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 126 [ D.6746 ])
            (const_int 69 [0x45]))) fmtext_o.cpp:486 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 126 [ D.6746 ])
        (nil)))
(jump_insn 135 134 136 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 156)
            (pc))) fmtext_o.cpp:486 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 156)
;;  succ:       15
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 129 130 131 443 444
(note 136 135 137 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 138 13 (set (reg:SI 443)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:487 90 {*movsi_internal}
     (nil))
(insn 138 137 139 13 (set (reg:DI 127 [ D.6738 ])
        (sign_extend:DI (reg:SI 443))) fmtext_o.cpp:487 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 443)
        (nil)))
(insn 139 138 140 13 (parallel [
            (set (reg:DI 128 [ D.6738 ])
                (ashift:DI (reg:DI 127 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:487 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 127 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 140 139 141 13 (set (reg/f:DI 444)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:487 89 {*movdi_internal}
     (nil))
(insn 141 140 142 13 (parallel [
            (set (reg/f:DI 129 [ D.6743 ])
                (plus:DI (reg:DI 128 [ D.6738 ])
                    (reg/f:DI 444)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:487 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 444)
        (expr_list:REG_DEAD (reg:DI 128 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 128 [ D.6738 ]))
                    (nil))))))
(insn 142 141 143 13 (set (reg/f:DI 130 [ D.6744 ])
        (mem/f:DI (reg/f:DI 129 [ D.6743 ]) [0 *_80+0 S8 A64])) fmtext_o.cpp:487 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 129 [ D.6743 ])
        (nil)))
(insn 143 142 144 13 (set (reg:HI 131 [ D.6746 ])
        (mem/j:HI (plus:DI (reg/f:DI 130 [ D.6744 ])
                (const_int 26 [0x1a])) [0 _81->status.number+0 S2 A16])) fmtext_o.cpp:487 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130 [ D.6744 ])
        (nil)))
(insn 144 143 145 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 131 [ D.6746 ])
            (const_int 73 [0x49]))) fmtext_o.cpp:486 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 131 [ D.6746 ])
        (nil)))
(jump_insn 145 144 146 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 156)
            (pc))) fmtext_o.cpp:486 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 156)
;;  succ:       15
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132 133 134 135 136 445 446
(note 146 145 147 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 14 (set (reg:SI 445)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:488 90 {*movsi_internal}
     (nil))
(insn 148 147 149 14 (set (reg:DI 132 [ D.6738 ])
        (sign_extend:DI (reg:SI 445))) fmtext_o.cpp:488 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 445)
        (nil)))
(insn 149 148 150 14 (parallel [
            (set (reg:DI 133 [ D.6738 ])
                (ashift:DI (reg:DI 132 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:488 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 132 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 150 149 151 14 (set (reg/f:DI 446)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:488 89 {*movdi_internal}
     (nil))
(insn 151 150 152 14 (parallel [
            (set (reg/f:DI 134 [ D.6743 ])
                (plus:DI (reg:DI 133 [ D.6738 ])
                    (reg/f:DI 446)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:488 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 446)
        (expr_list:REG_DEAD (reg:DI 133 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 133 [ D.6738 ]))
                    (nil))))))
(insn 152 151 153 14 (set (reg/f:DI 135 [ D.6744 ])
        (mem/f:DI (reg/f:DI 134 [ D.6743 ]) [0 *_85+0 S8 A64])) fmtext_o.cpp:488 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134 [ D.6743 ])
        (nil)))
(insn 153 152 154 14 (set (reg:HI 136 [ D.6746 ])
        (mem/j:HI (plus:DI (reg/f:DI 135 [ D.6744 ])
                (const_int 26 [0x1a])) [0 _86->status.number+0 S2 A16])) fmtext_o.cpp:488 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135 [ D.6744 ])
        (nil)))
(insn 154 153 155 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 136 [ D.6746 ])
            (const_int 2073 [0x819]))) fmtext_o.cpp:487 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 136 [ D.6746 ])
        (nil)))
(jump_insn 155 154 156 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 201)
            (pc))) fmtext_o.cpp:487 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 201)
;;  succ:       15 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 447
(code_label 156 155 157 15 97 "" [2 uses])
(note 157 156 158 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 158 157 159 15 (set (reg/f:DI 447)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:490 89 {*movdi_internal}
     (nil))
(insn 159 158 160 15 (set (reg:SI 138 [ D.6737 ])
        (mem/j:SI (reg/f:DI 447) [0 endianCheck_88(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:490 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 447)
        (nil)))
(insn 160 159 161 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 138 [ D.6737 ])
            (const_int 0 [0]))) fmtext_o.cpp:490 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 138 [ D.6737 ])
        (nil)))
(jump_insn 161 160 162 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) fmtext_o.cpp:490 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 178)
;;  succ:       16 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 162 161 163 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:491 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 164 163 165 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 170)
            (pc))) fmtext_o.cpp:491 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 170)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 165 164 166 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 166 165 167 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7fa2a188c480 *.LC30>)) fmtext_o.cpp:492 89 {*movdi_internal}
     (nil))
(call_insn 167 166 786 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:492 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 786 167 787 17 (set (pc)
        (label_ref 191)) 654 {jump}
     (nil)
 -> 191)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 787 786 170)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 170 787 171 18 100 "" [1 uses])
(note 171 170 172 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7fa2a188c510 *.LC31>)) fmtext_o.cpp:494 89 {*movdi_internal}
     (nil))
(call_insn 173 172 788 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:494 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 788 173 789 18 (set (pc)
        (label_ref 191)) 654 {jump}
     (nil)
 -> 191)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 789 788 178)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 178 789 179 19 99 "" [1 uses])
(note 179 178 180 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:496 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 181 180 182 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 187)
            (pc))) fmtext_o.cpp:496 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 187)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 182 181 183 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 183 182 184 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7fa2a188c5a0 *.LC32>)) fmtext_o.cpp:497 89 {*movdi_internal}
     (nil))
(call_insn 184 183 790 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:497 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 790 184 791 20 (set (pc)
        (label_ref 191)) 654 {jump}
     (nil)
 -> 191)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 791 790 187)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 187 791 188 21 103 "" [1 uses])
(note 188 187 189 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7fa2a188c630 *.LC33>)) fmtext_o.cpp:499 89 {*movdi_internal}
     (nil))
(call_insn 190 189 191 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:499 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 [100.0%] 
;;              18 [100.0%] 
;;              21 (FALLTHRU)
;;              20 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 139 448 449
(code_label 191 190 192 22 102 "" [3 uses])
(note 192 191 193 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 193 192 194 22 (set (reg/f:DI 448)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:501 89 {*movdi_internal}
     (nil))
(insn 194 193 195 22 (set (reg:SI 139 [ D.6737 ])
        (mem/j:SI (reg/f:DI 448) [0 endianCheck_88(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:501 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 448)
        (nil)))
(insn 195 194 196 22 (set (reg/f:DI 449)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:501 89 {*movdi_internal}
     (nil))
(insn 196 195 197 22 (set (mem/j:SI (plus:DI (reg/f:DI 449)
                (const_int 4 [0x4])) [0 endianCheck_88(D)->fileStruct+0 S4 A32])
        (reg:SI 139 [ D.6737 ])) fmtext_o.cpp:501 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 449)
        (expr_list:REG_DEAD (reg:SI 139 [ D.6737 ])
            (nil))))
(insn 197 196 198 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7fa2a188c6c0 *.LC34>)) fmtext_o.cpp:502 89 {*movdi_internal}
     (nil))
(call_insn 198 197 792 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:502 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 792 198 793 22 (set (pc)
        (label_ref 249)) fmtext_o.cpp:502 654 {jump}
     (nil)
 -> 249)
;;  succ:       31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 793 792 201)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 137 450
(code_label 201 793 202 23 98 "" [1 uses])
(note 202 201 203 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 23 (set (reg/f:DI 450)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:504 89 {*movdi_internal}
     (nil))
(insn 204 203 205 23 (set (reg:SI 137 [ D.6737 ])
        (mem/j:SI (reg/f:DI 450) [0 endianCheck_88(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:504 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 450)
        (nil)))
(insn 205 204 206 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 137 [ D.6737 ])
            (const_int 0 [0]))) fmtext_o.cpp:504 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 137 [ D.6737 ])
        (nil)))
(jump_insn 206 205 207 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 225)
            (pc))) fmtext_o.cpp:504 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 225)
;;  succ:       24 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 451
(note 207 206 208 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 24 (set (reg/f:DI 451)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:505 89 {*movdi_internal}
     (nil))
(insn 209 208 210 24 (set (mem/j:SI (plus:DI (reg/f:DI 451)
                (const_int 4 [0x4])) [0 endianCheck_88(D)->fileStruct+0 S4 A32])
        (const_int 1 [0x1])) fmtext_o.cpp:505 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 451)
        (nil)))
(insn 210 209 211 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:506 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 211 210 212 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 217)
            (pc))) fmtext_o.cpp:506 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 217)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 212 211 213 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 213 212 214 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7fa2a188c5a0 *.LC32>)) fmtext_o.cpp:507 89 {*movdi_internal}
     (nil))
(call_insn 214 213 794 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:507 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 794 214 795 25 (set (pc)
        (label_ref 240)) 654 {jump}
     (nil)
 -> 240)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 795 794 217)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 217 795 218 26 106 "" [1 uses])
(note 218 217 219 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7fa2a188c630 *.LC33>)) fmtext_o.cpp:509 89 {*movdi_internal}
     (nil))
(call_insn 220 219 796 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:509 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 796 220 797 26 (set (pc)
        (label_ref 240)) 654 {jump}
     (nil)
 -> 240)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 797 796 225)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 452
(code_label 225 797 226 27 105 "" [1 uses])
(note 226 225 227 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 227 226 228 27 (set (reg/f:DI 452)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:511 89 {*movdi_internal}
     (nil))
(insn 228 227 229 27 (set (mem/j:SI (plus:DI (reg/f:DI 452)
                (const_int 4 [0x4])) [0 endianCheck_88(D)->fileStruct+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:511 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 452)
        (nil)))
(insn 229 228 230 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:512 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 230 229 231 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 236)
            (pc))) fmtext_o.cpp:512 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 236)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 231 230 232 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 232 231 233 28 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7fa2a188c480 *.LC30>)) fmtext_o.cpp:513 89 {*movdi_internal}
     (nil))
(call_insn 233 232 798 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:513 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 798 233 799 28 (set (pc)
        (label_ref 240)) 654 {jump}
     (nil)
 -> 240)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 799 798 236)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 236 799 237 29 109 "" [1 uses])
(note 237 236 238 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7fa2a188c510 *.LC31>)) fmtext_o.cpp:515 89 {*movdi_internal}
     (nil))
(call_insn 239 238 240 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:515 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 [100.0%] 
;;              26 [100.0%] 
;;              29 (FALLTHRU)
;;              28 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 453 454
(code_label 240 239 241 30 108 "" [3 uses])
(note 241 240 242 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 30 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7fa2a188c750 *.LC35>)) fmtext_o.cpp:517 89 {*movdi_internal}
     (nil))
(call_insn 243 242 244 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:517 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 244 243 245 30 (set (reg:SI 453)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:518 90 {*movsi_internal}
     (nil))
(insn 245 244 246 30 (set (reg:DI 454)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:518 89 {*movdi_internal}
     (nil))
(insn 246 245 247 30 (set (reg:SI 4 si)
        (reg:SI 453)) fmtext_o.cpp:518 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 453)
        (nil)))
(insn 247 246 248 30 (set (reg:DI 5 di)
        (reg:DI 454)) fmtext_o.cpp:518 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 454)
        (nil)))
(call_insn 248 247 249 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16main_header_swapPP16Data_file_headeri") [flags 0x41]  <function_decl 0x7fa2a1c00d80 main_header_swap>) [0 main_header_swap S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:518 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;;              22 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 141 142 143 144 145 146 147 148 149 455 456 457 458 459 460
(code_label 249 248 250 31 104 "" [1 uses])
(note 250 249 251 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 31 (set (reg:SI 455)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 252 251 253 31 (set (reg:DI 140 [ D.6738 ])
        (sign_extend:DI (reg:SI 455))) fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 455)
        (nil)))
(insn 253 252 254 31 (parallel [
            (set (reg:DI 141 [ D.6738 ])
                (ashift:DI (reg:DI 140 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:521 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 140 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 254 253 255 31 (set (reg/f:DI 456)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 255 254 256 31 (parallel [
            (set (reg/f:DI 142 [ D.6743 ])
                (plus:DI (reg:DI 141 [ D.6738 ])
                    (reg/f:DI 456)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:521 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 456)
        (expr_list:REG_DEAD (reg:DI 141 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 141 [ D.6738 ]))
                    (nil))))))
(insn 256 255 257 31 (set (reg/f:DI 143 [ D.6744 ])
        (mem/f:DI (reg/f:DI 142 [ D.6743 ]) [0 *_108+0 S8 A64])) fmtext_o.cpp:521 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ D.6743 ])
        (nil)))
(insn 257 256 258 31 (set (reg:SI 457)
        (mem/j:SI (plus:DI (reg/f:DI 143 [ D.6744 ])
                (const_int 8 [0x8])) [0 _109->np.number+0 S4 A32])) fmtext_o.cpp:521 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 143 [ D.6744 ])
        (nil)))
(insn 258 257 259 31 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 out_data_size+0 S4 A32])
        (reg:SI 457)) fmtext_o.cpp:521 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 457)
        (nil)))
(insn 259 258 260 31 (set (reg/f:DI 458)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:524 89 {*movdi_internal}
     (nil))
(insn 260 259 261 31 (set (reg:SI 144 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 458)
                (const_int 24 [0x18])) [0 preprocess_27(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:524 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 458)
        (nil)))
(insn 261 260 262 31 (set (reg:SI 459)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:524 90 {*movsi_internal}
     (nil))
(insn 262 261 263 31 (set (reg:DI 145 [ D.6738 ])
        (sign_extend:DI (reg:SI 459))) fmtext_o.cpp:524 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 459)
        (nil)))
(insn 263 262 264 31 (parallel [
            (set (reg:DI 146 [ D.6738 ])
                (ashift:DI (reg:DI 145 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:524 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 145 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 264 263 265 31 (set (reg/f:DI 460)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:524 89 {*movdi_internal}
     (nil))
(insn 265 264 266 31 (parallel [
            (set (reg/f:DI 147 [ D.6743 ])
                (plus:DI (reg:DI 146 [ D.6738 ])
                    (reg/f:DI 460)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:524 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 460)
        (expr_list:REG_DEAD (reg:DI 146 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 146 [ D.6738 ]))
                    (nil))))))
(insn 266 265 267 31 (set (reg/f:DI 148 [ D.6744 ])
        (mem/f:DI (reg/f:DI 147 [ D.6743 ]) [0 *_114+0 S8 A64])) fmtext_o.cpp:524 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 147 [ D.6743 ])
        (nil)))
(insn 267 266 268 31 (set (reg:SI 149 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 148 [ D.6744 ])
                (const_int 8 [0x8])) [0 _115->np.number+0 S4 A32])) fmtext_o.cpp:524 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148 [ D.6744 ])
        (nil)))
(insn 268 267 269 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 144 [ D.6737 ])
            (reg:SI 149 [ D.6737 ]))) fmtext_o.cpp:524 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 149 [ D.6737 ])
        (expr_list:REG_DEAD (reg:SI 144 [ D.6737 ])
            (nil))))
(jump_insn 269 268 270 31 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 274)
            (pc))) fmtext_o.cpp:524 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 274)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 461 462
(note 270 269 271 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 271 270 272 32 (set (reg/f:DI 461)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:525 89 {*movdi_internal}
     (nil))
(insn 272 271 273 32 (set (reg:SI 462)
        (mem/j:SI (plus:DI (reg/f:DI 461)
                (const_int 24 [0x18])) [0 preprocess_27(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:525 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 461)
        (nil)))
(insn 273 272 274 32 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 out_data_size+0 S4 A32])
        (reg:SI 462)) fmtext_o.cpp:525 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 462)
        (nil)))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486
(code_label 274 273 275 33 110 "" [1 uses])
(note 275 274 276 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 33 (set (reg:SI 463)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:527 90 {*movsi_internal}
     (nil))
(insn 277 276 278 33 (set (reg:DI 150 [ D.6738 ])
        (sign_extend:DI (reg:SI 463))) fmtext_o.cpp:527 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 463)
        (nil)))
(insn 278 277 279 33 (parallel [
            (set (reg:DI 151 [ D.6738 ])
                (ashift:DI (reg:DI 150 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:527 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 150 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 279 278 280 33 (set (reg/f:DI 464)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [0 out_data+0 S8 A64])) fmtext_o.cpp:527 89 {*movdi_internal}
     (nil))
(insn 280 279 281 33 (parallel [
            (set (reg/f:DI 152 [ D.6747 ])
                (plus:DI (reg:DI 151 [ D.6738 ])
                    (reg/f:DI 464)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:527 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 464)
        (expr_list:REG_DEAD (reg:DI 151 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 16 [0x10])) [0 out_data+0 S8 A64])
                        (reg:DI 151 [ D.6738 ]))
                    (nil))))))
(insn 281 280 282 33 (set (reg:SI 465)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:527 90 {*movsi_internal}
     (nil))
(insn 282 281 283 33 (set (reg:DI 153 [ D.6738 ])
        (sign_extend:DI (reg:SI 465))) fmtext_o.cpp:527 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 465)
        (nil)))
(insn 283 282 284 33 (parallel [
            (set (reg:DI 154 [ D.6738 ])
                (ashift:DI (reg:DI 153 [ D.6738 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:527 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 153 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 284 283 285 33 (set (reg:DI 5 di)
        (reg:DI 154 [ D.6738 ])) fmtext_o.cpp:527 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 154 [ D.6738 ])
        (nil)))
(call_insn 285 284 286 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:527 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 286 285 287 33 (set (reg/f:DI 466)
        (reg:DI 0 ax)) fmtext_o.cpp:527 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 466)
            (nil))))
(insn 287 286 288 33 (set (reg/f:DI 155 [ D.6748 ])
        (reg/f:DI 466)) fmtext_o.cpp:527 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 466)
        (nil)))
(insn 288 287 289 33 (set (mem/f:DI (reg/f:DI 152 [ D.6747 ]) [0 *_121+0 S8 A64])
        (reg/f:DI 155 [ D.6748 ])) fmtext_o.cpp:527 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 155 [ D.6748 ])
        (expr_list:REG_DEAD (reg/f:DI 152 [ D.6747 ])
            (nil))))
(insn 289 288 290 33 (set (reg:SI 467)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:528 90 {*movsi_internal}
     (nil))
(insn 290 289 291 33 (set (reg:DI 156 [ D.6738 ])
        (sign_extend:DI (reg:SI 467))) fmtext_o.cpp:528 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 467)
        (nil)))
(insn 291 290 292 33 (parallel [
            (set (reg:DI 157 [ D.6738 ])
                (ashift:DI (reg:DI 156 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:528 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 156 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 292 291 293 33 (set (reg/f:DI 468)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 24 [0x18])) [0 scratch_data+0 S8 A64])) fmtext_o.cpp:528 89 {*movdi_internal}
     (nil))
(insn 293 292 294 33 (parallel [
            (set (reg/f:DI 158 [ D.6747 ])
                (plus:DI (reg:DI 157 [ D.6738 ])
                    (reg/f:DI 468)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:528 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 468)
        (expr_list:REG_DEAD (reg:DI 157 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 24 [0x18])) [0 scratch_data+0 S8 A64])
                        (reg:DI 157 [ D.6738 ]))
                    (nil))))))
(insn 294 293 295 33 (set (reg:SI 469)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:528 90 {*movsi_internal}
     (nil))
(insn 295 294 296 33 (set (reg:DI 159 [ D.6738 ])
        (sign_extend:DI (reg:SI 469))) fmtext_o.cpp:528 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 469)
        (nil)))
(insn 296 295 297 33 (parallel [
            (set (reg:DI 160 [ D.6738 ])
                (ashift:DI (reg:DI 159 [ D.6738 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:528 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 159 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 297 296 298 33 (set (reg:DI 5 di)
        (reg:DI 160 [ D.6738 ])) fmtext_o.cpp:528 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 160 [ D.6738 ])
        (nil)))
(call_insn 298 297 299 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:528 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 299 298 300 33 (set (reg/f:DI 470)
        (reg:DI 0 ax)) fmtext_o.cpp:528 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 470)
            (nil))))
(insn 300 299 301 33 (set (reg/f:DI 161 [ D.6748 ])
        (reg/f:DI 470)) fmtext_o.cpp:528 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 470)
        (nil)))
(insn 301 300 302 33 (set (mem/f:DI (reg/f:DI 158 [ D.6747 ]) [0 *_130+0 S8 A64])
        (reg/f:DI 161 [ D.6748 ])) fmtext_o.cpp:528 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161 [ D.6748 ])
        (expr_list:REG_DEAD (reg/f:DI 158 [ D.6747 ])
            (nil))))
(insn 302 301 303 33 (set (reg:SI 471)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:529 90 {*movsi_internal}
     (nil))
(insn 303 302 304 33 (set (reg:DI 162 [ D.6738 ])
        (sign_extend:DI (reg:SI 471))) fmtext_o.cpp:529 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 471)
        (nil)))
(insn 304 303 305 33 (parallel [
            (set (reg:DI 163 [ D.6738 ])
                (ashift:DI (reg:DI 162 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 162 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 305 304 306 33 (set (reg/f:DI 472)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 306 305 307 33 (parallel [
            (set (reg/f:DI 164 [ D.6749 ])
                (plus:DI (reg:DI 163 [ D.6738 ])
                    (reg/f:DI 472)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 472)
        (expr_list:REG_DEAD (reg:DI 163 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 163 [ D.6738 ]))
                    (nil))))))
(insn 307 306 308 33 (set (reg:SI 473)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:529 90 {*movsi_internal}
     (nil))
(insn 308 307 309 33 (set (reg:DI 165 [ D.6738 ])
        (sign_extend:DI (reg:SI 473))) fmtext_o.cpp:529 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 473)
        (nil)))
(insn 309 308 310 33 (parallel [
            (set (reg:DI 166 [ D.6738 ])
                (ashift:DI (reg:DI 165 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 165 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 310 309 311 33 (set (reg/f:DI 474)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 311 310 312 33 (parallel [
            (set (reg/f:DI 167 [ D.6743 ])
                (plus:DI (reg:DI 166 [ D.6738 ])
                    (reg/f:DI 474)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 474)
        (expr_list:REG_DEAD (reg:DI 166 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 166 [ D.6738 ]))
                    (nil))))))
(insn 312 311 313 33 (set (reg/f:DI 168 [ D.6744 ])
        (mem/f:DI (reg/f:DI 167 [ D.6743 ]) [0 *_142+0 S8 A64])) fmtext_o.cpp:529 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167 [ D.6743 ])
        (nil)))
(insn 313 312 314 33 (set (reg:SI 169 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 168 [ D.6744 ])
                (const_int 8 [0x8])) [0 _143->np.number+0 S4 A32])) fmtext_o.cpp:529 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168 [ D.6744 ])
        (nil)))
(insn 314 313 315 33 (set (reg:DI 170 [ D.6738 ])
        (sign_extend:DI (reg:SI 169 [ D.6737 ]))) fmtext_o.cpp:529 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 169 [ D.6737 ])
        (nil)))
(insn 315 314 316 33 (parallel [
            (set (reg:DI 171 [ D.6738 ])
                (ashift:DI (reg:DI 170 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 170 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 316 315 317 33 (set (reg:DI 5 di)
        (reg:DI 171 [ D.6738 ])) fmtext_o.cpp:529 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 171 [ D.6738 ])
        (nil)))
(call_insn 317 316 318 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:529 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 318 317 319 33 (set (reg/f:DI 475)
        (reg:DI 0 ax)) fmtext_o.cpp:529 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 475)
            (nil))))
(insn 319 318 320 33 (set (reg/f:DI 172 [ D.6748 ])
        (reg/f:DI 475)) fmtext_o.cpp:529 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 475)
        (nil)))
(insn 320 319 321 33 (set (mem/f/j:DI (reg/f:DI 164 [ D.6749 ]) [0 _139->lo+0 S8 A64])
        (reg/f:DI 172 [ D.6748 ])) fmtext_o.cpp:529 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 172 [ D.6748 ])
        (expr_list:REG_DEAD (reg/f:DI 164 [ D.6749 ])
            (nil))))
(insn 321 320 322 33 (set (reg:SI 476)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:530 90 {*movsi_internal}
     (nil))
(insn 322 321 323 33 (set (reg:DI 173 [ D.6738 ])
        (sign_extend:DI (reg:SI 476))) fmtext_o.cpp:530 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 476)
        (nil)))
(insn 323 322 324 33 (parallel [
            (set (reg:DI 174 [ D.6738 ])
                (ashift:DI (reg:DI 173 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 173 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 324 323 325 33 (set (reg/f:DI 477)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 325 324 326 33 (parallel [
            (set (reg/f:DI 175 [ D.6750 ])
                (plus:DI (reg:DI 174 [ D.6738 ])
                    (reg/f:DI 477)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 477)
        (expr_list:REG_DEAD (reg:DI 174 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
                        (reg:DI 174 [ D.6738 ]))
                    (nil))))))
(insn 326 325 327 33 (set (reg:SI 478)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:530 90 {*movsi_internal}
     (nil))
(insn 327 326 328 33 (set (reg:DI 176 [ D.6738 ])
        (sign_extend:DI (reg:SI 478))) fmtext_o.cpp:530 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 478)
        (nil)))
(insn 328 327 329 33 (parallel [
            (set (reg:DI 177 [ D.6738 ])
                (ashift:DI (reg:DI 176 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 176 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 329 328 330 33 (set (reg/f:DI 479)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 330 329 331 33 (parallel [
            (set (reg/f:DI 178 [ D.6743 ])
                (plus:DI (reg:DI 177 [ D.6738 ])
                    (reg/f:DI 479)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 479)
        (expr_list:REG_DEAD (reg:DI 177 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 177 [ D.6738 ]))
                    (nil))))))
(insn 331 330 332 33 (set (reg/f:DI 179 [ D.6744 ])
        (mem/f:DI (reg/f:DI 178 [ D.6743 ]) [0 *_156+0 S8 A64])) fmtext_o.cpp:530 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 178 [ D.6743 ])
        (nil)))
(insn 332 331 333 33 (set (reg:SI 180 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 179 [ D.6744 ])
                (const_int 8 [0x8])) [0 _157->np.number+0 S4 A32])) fmtext_o.cpp:530 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 179 [ D.6744 ])
        (nil)))
(insn 333 332 334 33 (set (reg:DI 181 [ D.6738 ])
        (sign_extend:DI (reg:SI 180 [ D.6737 ]))) fmtext_o.cpp:530 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 180 [ D.6737 ])
        (nil)))
(insn 334 333 335 33 (parallel [
            (set (reg:DI 182 [ D.6738 ])
                (ashift:DI (reg:DI 181 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 181 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 335 334 336 33 (set (reg:DI 5 di)
        (reg:DI 182 [ D.6738 ])) fmtext_o.cpp:530 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 182 [ D.6738 ])
        (nil)))
(call_insn 336 335 337 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa2a1d35a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:530 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 337 336 338 33 (set (reg/f:DI 480)
        (reg:DI 0 ax)) fmtext_o.cpp:530 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 480)
            (nil))))
(insn 338 337 339 33 (set (reg/f:DI 183 [ D.6748 ])
        (reg/f:DI 480)) fmtext_o.cpp:530 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 480)
        (nil)))
(insn 339 338 340 33 (set (mem/f/j:DI (reg/f:DI 175 [ D.6750 ]) [0 _153->lo+0 S8 A64])
        (reg/f:DI 183 [ D.6748 ])) fmtext_o.cpp:530 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 183 [ D.6748 ])
        (expr_list:REG_DEAD (reg/f:DI 175 [ D.6750 ])
            (nil))))
(insn 340 339 341 33 (set (reg:SI 481)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:531 90 {*movsi_internal}
     (nil))
(insn 341 340 342 33 (set (reg:DI 184 [ D.6738 ])
        (sign_extend:DI (reg:SI 481))) fmtext_o.cpp:531 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 481)
        (nil)))
(insn 342 341 343 33 (parallel [
            (set (reg:DI 185 [ D.6738 ])
                (ashift:DI (reg:DI 184 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 184 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 343 342 344 33 (set (reg/f:DI 482)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 344 343 345 33 (parallel [
            (set (reg/f:DI 186 [ D.6740 ])
                (plus:DI (reg:DI 185 [ D.6738 ])
                    (reg/f:DI 482)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 482)
        (expr_list:REG_DEAD (reg:DI 185 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
                        (reg:DI 185 [ D.6738 ]))
                    (nil))))))
(insn 345 344 346 33 (set (reg/f:DI 187 [ D.6742 ])
        (mem/f:DI (reg/f:DI 186 [ D.6740 ]) [0 *_166+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 186 [ D.6740 ])
        (nil)))
(insn 346 345 347 33 (set (reg:SI 483)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:531 90 {*movsi_internal}
     (nil))
(insn 347 346 348 33 (set (reg:DI 188 [ D.6738 ])
        (sign_extend:DI (reg:SI 483))) fmtext_o.cpp:531 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 483)
        (nil)))
(insn 348 347 349 33 (parallel [
            (set (reg:DI 189 [ D.6738 ])
                (ashift:DI (reg:DI 188 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 188 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 349 348 350 33 (set (reg/f:DI 484)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 block_header+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 350 349 351 33 (parallel [
            (set (reg/f:DI 190 [ D.6751 ])
                (plus:DI (reg:DI 189 [ D.6738 ])
                    (reg/f:DI 484)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 484)
        (expr_list:REG_DEAD (reg:DI 189 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -56 [0xffffffffffffffc8])) [0 block_header+0 S8 A64])
                        (reg:DI 189 [ D.6738 ]))
                    (nil))))))
(insn 351 350 352 33 (set (reg/f:DI 191 [ D.6752 ])
        (mem/f:DI (reg/f:DI 190 [ D.6751 ]) [0 *_171+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 190 [ D.6751 ])
        (nil)))
(insn 352 351 353 33 (set (reg:DI 2 cx)
        (reg/f:DI 187 [ D.6742 ])) fmtext_o.cpp:531 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 187 [ D.6742 ])
        (nil)))
(insn 353 352 354 33 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 354 353 355 33 (set (reg:DI 4 si)
        (const_int 28 [0x1c])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 355 354 356 33 (set (reg:DI 5 di)
        (reg/f:DI 191 [ D.6752 ])) fmtext_o.cpp:531 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 191 [ D.6752 ])
        (nil)))
(call_insn 356 355 357 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fa2a1ada360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:531 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 357 356 358 33 (set (reg/f:DI 485)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:534 89 {*movdi_internal}
     (nil))
(insn 358 357 359 33 (set (reg:SI 192 [ D.6737 ])
        (mem/j:SI (reg/f:DI 485) [0 endianCheck_88(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:534 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 485)
        (nil)))
(insn 359 358 360 33 (set (reg/f:DI 486)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:534 89 {*movdi_internal}
     (nil))
(insn 360 359 361 33 (set (reg:SI 193 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 486)
                (const_int 4 [0x4])) [0 endianCheck_88(D)->fileStruct+0 S4 A32])) fmtext_o.cpp:534 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 486)
        (nil)))
(insn 361 360 362 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 192 [ D.6737 ])
            (reg:SI 193 [ D.6737 ]))) fmtext_o.cpp:534 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 193 [ D.6737 ])
        (expr_list:REG_DEAD (reg:SI 192 [ D.6737 ])
            (nil))))
(jump_insn 362 361 363 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 369)
            (pc))) fmtext_o.cpp:534 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 369)
;;  succ:       34 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 487 488
(note 363 362 364 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 364 363 365 34 (set (reg:SI 487)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:535 90 {*movsi_internal}
     (nil))
(insn 365 364 366 34 (set (reg:DI 488)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [0 block_header+0 S8 A64])) fmtext_o.cpp:535 89 {*movdi_internal}
     (nil))
(insn 366 365 367 34 (set (reg:SI 4 si)
        (reg:SI 487)) fmtext_o.cpp:535 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 487)
        (nil)))
(insn 367 366 368 34 (set (reg:DI 5 di)
        (reg:DI 488)) fmtext_o.cpp:535 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 488)
        (nil)))
(call_insn 368 367 369 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z17block_header_swapPP17Data_block_headeri") [flags 0x41]  <function_decl 0x7fa2a1c00e58 block_header_swap>) [0 block_header_swap S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:535 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33
;;              34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 194 195 196 197 198 489 490
(code_label 369 368 370 35 111 "" [1 uses])
(note 370 369 371 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 371 370 372 35 (set (reg:SI 489)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:546 90 {*movsi_internal}
     (nil))
(insn 372 371 373 35 (set (reg:DI 194 [ D.6738 ])
        (sign_extend:DI (reg:SI 489))) fmtext_o.cpp:546 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 489)
        (nil)))
(insn 373 372 374 35 (parallel [
            (set (reg:DI 195 [ D.6738 ])
                (ashift:DI (reg:DI 194 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:546 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 194 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 374 373 375 35 (set (reg/f:DI 490)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:546 89 {*movdi_internal}
     (nil))
(insn 375 374 376 35 (parallel [
            (set (reg/f:DI 196 [ D.6743 ])
                (plus:DI (reg:DI 195 [ D.6738 ])
                    (reg/f:DI 490)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:546 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 490)
        (expr_list:REG_DEAD (reg:DI 195 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 195 [ D.6738 ]))
                    (nil))))))
(insn 376 375 377 35 (set (reg/f:DI 197 [ D.6744 ])
        (mem/f:DI (reg/f:DI 196 [ D.6743 ]) [0 *_179+0 S8 A64])) fmtext_o.cpp:546 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 196 [ D.6743 ])
        (nil)))
(insn 377 376 378 35 (set (reg:HI 198 [ D.6746 ])
        (mem/j:HI (plus:DI (reg/f:DI 197 [ D.6744 ])
                (const_int 26 [0x1a])) [0 _180->status.number+0 S2 A16])) fmtext_o.cpp:546 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 197 [ D.6744 ])
        (nil)))
(insn 378 377 379 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 198 [ D.6746 ])
            (const_int 69 [0x45]))) fmtext_o.cpp:546 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 198 [ D.6746 ])
        (nil)))
(jump_insn 379 378 380 35 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 416)
            (pc))) fmtext_o.cpp:546 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 416)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 491 492 493 494 495 496 497 498
(note 380 379 381 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 382 36 (set (reg:SI 491)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:548 90 {*movsi_internal}
     (nil))
(insn 382 381 383 36 (set (reg:DI 199 [ D.6738 ])
        (sign_extend:DI (reg:SI 491))) fmtext_o.cpp:548 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 491)
        (nil)))
(insn 383 382 384 36 (parallel [
            (set (reg:DI 200 [ D.6738 ])
                (ashift:DI (reg:DI 199 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 199 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 384 383 385 36 (set (reg/f:DI 492)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 385 384 386 36 (parallel [
            (set (reg/f:DI 201 [ D.6740 ])
                (plus:DI (reg:DI 200 [ D.6738 ])
                    (reg/f:DI 492)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 492)
        (expr_list:REG_DEAD (reg:DI 200 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
                        (reg:DI 200 [ D.6738 ]))
                    (nil))))))
(insn 386 385 387 36 (set (reg/f:DI 202 [ D.6742 ])
        (mem/f:DI (reg/f:DI 201 [ D.6740 ]) [0 *_184+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 201 [ D.6740 ])
        (nil)))
(insn 387 386 388 36 (set (reg:SI 493)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:547 90 {*movsi_internal}
     (nil))
(insn 388 387 389 36 (set (reg:DI 203 [ D.6738 ])
        (sign_extend:DI (reg:SI 493))) fmtext_o.cpp:547 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 493)
        (nil)))
(insn 389 388 390 36 (parallel [
            (set (reg:DI 204 [ D.6738 ])
                (ashift:DI (reg:DI 203 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 203 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 390 389 391 36 (set (reg/f:DI 494)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (nil))
(insn 391 390 392 36 (parallel [
            (set (reg/f:DI 205 [ D.6743 ])
                (plus:DI (reg:DI 204 [ D.6738 ])
                    (reg/f:DI 494)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 494)
        (expr_list:REG_DEAD (reg:DI 204 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 204 [ D.6738 ]))
                    (nil))))))
(insn 392 391 393 36 (set (reg/f:DI 206 [ D.6744 ])
        (mem/f:DI (reg/f:DI 205 [ D.6743 ]) [0 *_188+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 205 [ D.6743 ])
        (nil)))
(insn 393 392 394 36 (set (reg:SI 207 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 206 [ D.6744 ])
                (const_int 8 [0x8])) [0 _189->np.number+0 S4 A32])) fmtext_o.cpp:547 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 206 [ D.6744 ])
        (nil)))
(insn 394 393 395 36 (set (reg:SI 495)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:548 90 {*movsi_internal}
     (nil))
(insn 395 394 396 36 (set (reg:DI 208 [ D.6738 ])
        (sign_extend:DI (reg:SI 495))) fmtext_o.cpp:548 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 495)
        (nil)))
(insn 396 395 397 36 (parallel [
            (set (reg:DI 209 [ D.6738 ])
                (ashift:DI (reg:DI 208 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 208 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 397 396 398 36 (set (reg/f:DI 496)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 398 397 399 36 (parallel [
            (set (reg/f:DI 210 [ D.6743 ])
                (plus:DI (reg:DI 209 [ D.6738 ])
                    (reg/f:DI 496)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 496)
        (expr_list:REG_DEAD (reg:DI 209 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 209 [ D.6738 ]))
                    (nil))))))
(insn 399 398 400 36 (set (reg/f:DI 211 [ D.6744 ])
        (mem/f:DI (reg/f:DI 210 [ D.6743 ]) [0 *_193+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 210 [ D.6743 ])
        (nil)))
(insn 400 399 401 36 (set (reg:SI 212 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 211 [ D.6744 ])
                (const_int 12 [0xc])) [0 _194->ebytes.number+0 S4 A32])) fmtext_o.cpp:548 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 211 [ D.6744 ])
        (nil)))
(insn 401 400 402 36 (parallel [
            (set (reg:SI 213 [ D.6737 ])
                (mult:SI (reg:SI 207 [ D.6737 ])
                    (reg:SI 212 [ D.6737 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 212 [ D.6737 ])
        (expr_list:REG_DEAD (reg:SI 207 [ D.6737 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 402 401 403 36 (set (reg:DI 214 [ D.6738 ])
        (sign_extend:DI (reg:SI 213 [ D.6737 ]))) fmtext_o.cpp:547 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 213 [ D.6737 ])
        (nil)))
(insn 403 402 404 36 (set (reg:SI 497)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:547 90 {*movsi_internal}
     (nil))
(insn 404 403 405 36 (set (reg:DI 215 [ D.6738 ])
        (sign_extend:DI (reg:SI 497))) fmtext_o.cpp:547 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 497)
        (nil)))
(insn 405 404 406 36 (parallel [
            (set (reg:DI 216 [ D.6738 ])
                (ashift:DI (reg:DI 215 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 215 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 406 405 407 36 (set (reg/f:DI 498)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (nil))
(insn 407 406 408 36 (parallel [
            (set (reg/f:DI 217 [ D.6749 ])
                (plus:DI (reg:DI 216 [ D.6738 ])
                    (reg/f:DI 498)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 498)
        (expr_list:REG_DEAD (reg:DI 216 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 216 [ D.6738 ]))
                    (nil))))))
(insn 408 407 409 36 (set (reg/f:DI 218 [ D.6753 ])
        (mem/f/j:DI (reg/f:DI 217 [ D.6749 ]) [0 _200->lo+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 217 [ D.6749 ])
        (nil)))
(insn 409 408 410 36 (set (reg:DI 2 cx)
        (reg/f:DI 202 [ D.6742 ])) fmtext_o.cpp:548 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 202 [ D.6742 ])
        (nil)))
(insn 410 409 411 36 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 411 410 412 36 (set (reg:DI 4 si)
        (reg:DI 214 [ D.6738 ])) fmtext_o.cpp:548 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 214 [ D.6738 ])
        (nil)))
(insn 412 411 413 36 (set (reg:DI 5 di)
        (reg/f:DI 218 [ D.6753 ])) fmtext_o.cpp:548 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 218 [ D.6753 ])
        (nil)))
(call_insn 413 412 800 36 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fa2a1ada360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:548 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 800 413 801 36 (set (pc)
        (label_ref 491)) 654 {jump}
     (nil)
 -> 491)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 801 800 416)
;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 219 220 221 222 223 499 500
(code_label 416 801 417 37 112 "" [1 uses])
(note 417 416 418 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 419 37 (set (reg:SI 499)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:549 90 {*movsi_internal}
     (nil))
(insn 419 418 420 37 (set (reg:DI 219 [ D.6738 ])
        (sign_extend:DI (reg:SI 499))) fmtext_o.cpp:549 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 499)
        (nil)))
(insn 420 419 421 37 (parallel [
            (set (reg:DI 220 [ D.6738 ])
                (ashift:DI (reg:DI 219 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 219 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 421 420 422 37 (set (reg/f:DI 500)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (nil))
(insn 422 421 423 37 (parallel [
            (set (reg/f:DI 221 [ D.6743 ])
                (plus:DI (reg:DI 220 [ D.6738 ])
                    (reg/f:DI 500)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 500)
        (expr_list:REG_DEAD (reg:DI 220 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 220 [ D.6738 ]))
                    (nil))))))
(insn 423 422 424 37 (set (reg/f:DI 222 [ D.6744 ])
        (mem/f:DI (reg/f:DI 221 [ D.6743 ]) [0 *_205+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 221 [ D.6743 ])
        (nil)))
(insn 424 423 425 37 (set (reg:HI 223 [ D.6746 ])
        (mem/j:HI (plus:DI (reg/f:DI 222 [ D.6744 ])
                (const_int 26 [0x1a])) [0 _206->status.number+0 S2 A16])) fmtext_o.cpp:549 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 222 [ D.6744 ])
        (nil)))
(insn 425 424 426 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 223 [ D.6746 ])
            (const_int 73 [0x49]))) fmtext_o.cpp:549 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 223 [ D.6746 ])
        (nil)))
(jump_insn 426 425 427 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 447)
            (pc))) fmtext_o.cpp:549 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 447)
;;  succ:       40
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 224 225 226 227 228 501 502
(note 427 426 428 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 428 427 429 38 (set (reg:SI 501)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:549 90 {*movsi_internal}
     (nil))
(insn 429 428 430 38 (set (reg:DI 224 [ D.6738 ])
        (sign_extend:DI (reg:SI 501))) fmtext_o.cpp:549 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 501)
        (nil)))
(insn 430 429 431 38 (parallel [
            (set (reg:DI 225 [ D.6738 ])
                (ashift:DI (reg:DI 224 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 224 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 431 430 432 38 (set (reg/f:DI 502)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (nil))
(insn 432 431 433 38 (parallel [
            (set (reg/f:DI 226 [ D.6743 ])
                (plus:DI (reg:DI 225 [ D.6738 ])
                    (reg/f:DI 502)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 502)
        (expr_list:REG_DEAD (reg:DI 225 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 225 [ D.6738 ]))
                    (nil))))))
(insn 433 432 434 38 (set (reg/f:DI 227 [ D.6744 ])
        (mem/f:DI (reg/f:DI 226 [ D.6743 ]) [0 *_210+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 226 [ D.6743 ])
        (nil)))
(insn 434 433 435 38 (set (reg:HI 228 [ D.6746 ])
        (mem/j:HI (plus:DI (reg/f:DI 227 [ D.6744 ])
                (const_int 26 [0x1a])) [0 _211->status.number+0 S2 A16])) fmtext_o.cpp:549 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 227 [ D.6744 ])
        (nil)))
(insn 435 434 436 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 228 [ D.6746 ])
            (const_int 2073 [0x819]))) fmtext_o.cpp:549 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 228 [ D.6746 ])
        (nil)))
(jump_insn 436 435 437 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 447)
            (pc))) fmtext_o.cpp:549 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 447)
;;  succ:       40
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 229 230 231 232 233 503 504
(note 437 436 438 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 438 437 439 39 (set (reg:SI 503)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:550 90 {*movsi_internal}
     (nil))
(insn 439 438 440 39 (set (reg:DI 229 [ D.6738 ])
        (sign_extend:DI (reg:SI 503))) fmtext_o.cpp:550 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 503)
        (nil)))
(insn 440 439 441 39 (parallel [
            (set (reg:DI 230 [ D.6738 ])
                (ashift:DI (reg:DI 229 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:550 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 229 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 441 440 442 39 (set (reg/f:DI 504)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:550 89 {*movdi_internal}
     (nil))
(insn 442 441 443 39 (parallel [
            (set (reg/f:DI 231 [ D.6743 ])
                (plus:DI (reg:DI 230 [ D.6738 ])
                    (reg/f:DI 504)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:550 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 504)
        (expr_list:REG_DEAD (reg:DI 230 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 230 [ D.6738 ]))
                    (nil))))))
(insn 443 442 444 39 (set (reg/f:DI 232 [ D.6744 ])
        (mem/f:DI (reg/f:DI 231 [ D.6743 ]) [0 *_215+0 S8 A64])) fmtext_o.cpp:550 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 231 [ D.6743 ])
        (nil)))
(insn 444 443 445 39 (set (reg:HI 233 [ D.6746 ])
        (mem/j:HI (plus:DI (reg/f:DI 232 [ D.6744 ])
                (const_int 26 [0x1a])) [0 _216->status.number+0 S2 A16])) fmtext_o.cpp:550 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 232 [ D.6744 ])
        (nil)))
(insn 445 444 446 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 233 [ D.6746 ])
            (const_int 201 [0xc9]))) fmtext_o.cpp:550 6 {*cmphi_1}
     (expr_list:REG_DEAD (reg:HI 233 [ D.6746 ])
        (nil)))
(jump_insn 446 445 447 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 484)
            (pc))) fmtext_o.cpp:550 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 484)
;;  succ:       40 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;;              38
;;              39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 505 506 507 508 509 510 511 512
(code_label 447 446 448 40 114 "" [2 uses])
(note 448 447 449 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 449 448 450 40 (set (reg:SI 505)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:553 90 {*movsi_internal}
     (nil))
(insn 450 449 451 40 (set (reg:DI 234 [ D.6738 ])
        (sign_extend:DI (reg:SI 505))) fmtext_o.cpp:553 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 505)
        (nil)))
(insn 451 450 452 40 (parallel [
            (set (reg:DI 235 [ D.6738 ])
                (ashift:DI (reg:DI 234 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 234 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 452 451 453 40 (set (reg/f:DI 506)
        (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 453 452 454 40 (parallel [
            (set (reg/f:DI 236 [ D.6740 ])
                (plus:DI (reg:DI 235 [ D.6738 ])
                    (reg/f:DI 506)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 506)
        (expr_list:REG_DEAD (reg:DI 235 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
                        (reg:DI 235 [ D.6738 ]))
                    (nil))))))
(insn 454 453 455 40 (set (reg/f:DI 237 [ D.6742 ])
        (mem/f:DI (reg/f:DI 236 [ D.6740 ]) [0 *_222+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 236 [ D.6740 ])
        (nil)))
(insn 455 454 456 40 (set (reg:SI 507)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:552 90 {*movsi_internal}
     (nil))
(insn 456 455 457 40 (set (reg:DI 238 [ D.6738 ])
        (sign_extend:DI (reg:SI 507))) fmtext_o.cpp:552 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 507)
        (nil)))
(insn 457 456 458 40 (parallel [
            (set (reg:DI 239 [ D.6738 ])
                (ashift:DI (reg:DI 238 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 238 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 458 457 459 40 (set (reg/f:DI 508)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (nil))
(insn 459 458 460 40 (parallel [
            (set (reg/f:DI 240 [ D.6743 ])
                (plus:DI (reg:DI 239 [ D.6738 ])
                    (reg/f:DI 508)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 508)
        (expr_list:REG_DEAD (reg:DI 239 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 239 [ D.6738 ]))
                    (nil))))))
(insn 460 459 461 40 (set (reg/f:DI 241 [ D.6744 ])
        (mem/f:DI (reg/f:DI 240 [ D.6743 ]) [0 *_226+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 240 [ D.6743 ])
        (nil)))
(insn 461 460 462 40 (set (reg:SI 242 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 241 [ D.6744 ])
                (const_int 8 [0x8])) [0 _227->np.number+0 S4 A32])) fmtext_o.cpp:552 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 241 [ D.6744 ])
        (nil)))
(insn 462 461 463 40 (set (reg:SI 509)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:553 90 {*movsi_internal}
     (nil))
(insn 463 462 464 40 (set (reg:DI 243 [ D.6738 ])
        (sign_extend:DI (reg:SI 509))) fmtext_o.cpp:553 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 509)
        (nil)))
(insn 464 463 465 40 (parallel [
            (set (reg:DI 244 [ D.6738 ])
                (ashift:DI (reg:DI 243 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 243 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 465 464 466 40 (set (reg/f:DI 510)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 466 465 467 40 (parallel [
            (set (reg/f:DI 245 [ D.6743 ])
                (plus:DI (reg:DI 244 [ D.6738 ])
                    (reg/f:DI 510)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 510)
        (expr_list:REG_DEAD (reg:DI 244 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 244 [ D.6738 ]))
                    (nil))))))
(insn 467 466 468 40 (set (reg/f:DI 246 [ D.6744 ])
        (mem/f:DI (reg/f:DI 245 [ D.6743 ]) [0 *_231+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 245 [ D.6743 ])
        (nil)))
(insn 468 467 469 40 (set (reg:SI 247 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 246 [ D.6744 ])
                (const_int 12 [0xc])) [0 _232->ebytes.number+0 S4 A32])) fmtext_o.cpp:553 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 246 [ D.6744 ])
        (nil)))
(insn 469 468 470 40 (parallel [
            (set (reg:SI 248 [ D.6737 ])
                (mult:SI (reg:SI 242 [ D.6737 ])
                    (reg:SI 247 [ D.6737 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 247 [ D.6737 ])
        (expr_list:REG_DEAD (reg:SI 242 [ D.6737 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 470 469 471 40 (set (reg:DI 249 [ D.6738 ])
        (sign_extend:DI (reg:SI 248 [ D.6737 ]))) fmtext_o.cpp:552 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 248 [ D.6737 ])
        (nil)))
(insn 471 470 472 40 (set (reg:SI 511)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:552 90 {*movsi_internal}
     (nil))
(insn 472 471 473 40 (set (reg:DI 250 [ D.6738 ])
        (sign_extend:DI (reg:SI 511))) fmtext_o.cpp:552 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 511)
        (nil)))
(insn 473 472 474 40 (parallel [
            (set (reg:DI 251 [ D.6738 ])
                (ashift:DI (reg:DI 250 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 250 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 474 473 475 40 (set (reg/f:DI 512)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (nil))
(insn 475 474 476 40 (parallel [
            (set (reg/f:DI 252 [ D.6749 ])
                (plus:DI (reg:DI 251 [ D.6738 ])
                    (reg/f:DI 512)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 512)
        (expr_list:REG_DEAD (reg:DI 251 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 251 [ D.6738 ]))
                    (nil))))))
(insn 476 475 477 40 (set (reg/f:DI 253 [ D.6754 ])
        (mem/f/j:DI (reg/f:DI 252 [ D.6749 ]) [0 _238->fl+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 252 [ D.6749 ])
        (nil)))
(insn 477 476 478 40 (set (reg:DI 2 cx)
        (reg/f:DI 237 [ D.6742 ])) fmtext_o.cpp:553 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 237 [ D.6742 ])
        (nil)))
(insn 478 477 479 40 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 479 478 480 40 (set (reg:DI 4 si)
        (reg:DI 249 [ D.6738 ])) fmtext_o.cpp:553 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 249 [ D.6738 ])
        (nil)))
(insn 480 479 481 40 (set (reg:DI 5 di)
        (reg/f:DI 253 [ D.6754 ])) fmtext_o.cpp:553 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 253 [ D.6754 ])
        (nil)))
(call_insn 481 480 802 40 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fa2a1ada360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:553 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 802 481 803 40 (set (pc)
        (label_ref 491)) fmtext_o.cpp:553 654 {jump}
     (nil)
 -> 491)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 803 802 484)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 484 803 485 41 115 "" [1 uses])
(note 485 484 486 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 486 485 487 41 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7fa2a18055a0 *.LC18>)) fmtext_o.cpp:555 89 {*movdi_internal}
     (nil))
(call_insn 487 486 488 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fa2a1d0b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:555 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 488 487 489 41 (set (reg:SI 5 di)
        (const_int 6 [0x6])) fmtext_o.cpp:556 90 {*movsi_internal}
     (nil))
(call_insn 489 488 490 41 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fa2a1d26ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:556 660 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 490 489 491)
;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 [100.0%] 
;;              40 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 254 255 513 514
(code_label 491 490 492 42 113 "" [2 uses])
(note 492 491 493 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 493 492 494 42 (set (reg/f:DI 513)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:560 89 {*movdi_internal}
     (nil))
(insn 494 493 495 42 (set (reg:SI 254 [ D.6737 ])
        (mem/j:SI (reg/f:DI 513) [0 endianCheck_88(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:560 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 513)
        (nil)))
(insn 495 494 496 42 (set (reg/f:DI 514)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 32 [0x20])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:560 89 {*movdi_internal}
     (nil))
(insn 496 495 497 42 (set (reg:SI 255 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 514)
                (const_int 4 [0x4])) [0 endianCheck_88(D)->fileStruct+0 S4 A32])) fmtext_o.cpp:560 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 514)
        (nil)))
(insn 497 496 498 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 254 [ D.6737 ])
            (reg:SI 255 [ D.6737 ]))) fmtext_o.cpp:560 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 255 [ D.6737 ])
        (expr_list:REG_DEAD (reg:SI 254 [ D.6737 ])
            (nil))))
(jump_insn 498 497 499 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 607)
            (pc))) fmtext_o.cpp:560 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 607)
;;  succ:       43 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 499 498 500 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 604 43 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
;;  succ:       44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;;              45 [100.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 256 257 258 259 260 261 262 263 264 265 515 516
(code_label 604 500 501 44 118 "" [1 uses])
(note 501 604 502 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 502 501 503 44 (set (reg:SI 515)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 503 502 504 44 (set (reg:DI 256 [ D.6738 ])
        (sign_extend:DI (reg:SI 515))) fmtext_o.cpp:562 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 515)
        (nil)))
(insn 504 503 505 44 (parallel [
            (set (reg:DI 257 [ D.6738 ])
                (ashift:DI (reg:DI 256 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 256 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 505 504 506 44 (set (reg/f:DI 516)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:562 89 {*movdi_internal}
     (nil))
(insn 506 505 507 44 (parallel [
            (set (reg/f:DI 258 [ D.6743 ])
                (plus:DI (reg:DI 257 [ D.6738 ])
                    (reg/f:DI 516)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 516)
        (expr_list:REG_DEAD (reg:DI 257 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 257 [ D.6738 ]))
                    (nil))))))
(insn 507 506 508 44 (set (reg/f:DI 259 [ D.6744 ])
        (mem/f:DI (reg/f:DI 258 [ D.6743 ]) [0 *_246+0 S8 A64])) fmtext_o.cpp:562 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 258 [ D.6743 ])
        (nil)))
(insn 508 507 509 44 (set (reg:SI 260 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 259 [ D.6744 ])
                (const_int 8 [0x8])) [0 _247->np.number+0 S4 A32])) fmtext_o.cpp:562 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 259 [ D.6744 ])
        (nil)))
(insn 509 508 510 44 (set (reg:DI 261 [ D.6738 ])
        (sign_extend:DI (reg:SI 260 [ D.6737 ]))) fmtext_o.cpp:562 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 260 [ D.6737 ])
        (nil)))
(insn 510 509 511 44 (set (reg:SI 262 [ D.6755 ])
        (subreg:SI (reg:DI 261 [ D.6738 ]) 0)) fmtext_o.cpp:562 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 261 [ D.6738 ])
        (nil)))
(insn 511 510 512 44 (set (reg:SI 263 [ D.6755 ])
        (const_int 8 [0x8])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 512 511 513 44 (parallel [
            (set (reg:SI 264 [ D.6755 ])
                (mult:SI (reg:SI 262 [ D.6755 ])
                    (reg:SI 263 [ D.6755 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 263 [ D.6755 ])
        (expr_list:REG_DEAD (reg:SI 262 [ D.6755 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 513 512 514 44 (set (reg:SI 265 [ D.6737 ])
        (reg:SI 264 [ D.6755 ])) fmtext_o.cpp:562 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 264 [ D.6755 ])
        (nil)))
(insn 514 513 515 44 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 265 [ D.6737 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) fmtext_o.cpp:562 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 265 [ D.6737 ])
        (nil)))
(jump_insn 515 514 516 44 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 716)
            (pc))) fmtext_o.cpp:562 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 716)
;;  succ:       49
;;              45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540
(note 516 515 517 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 517 516 518 45 (set (reg:SI 517)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 518 517 519 45 (set (reg:DI 266 [ D.6738 ])
        (sign_extend:DI (reg:SI 517))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 517)
        (nil)))
(insn 519 518 520 45 (parallel [
            (set (reg:DI 267 [ D.6738 ])
                (ashift:DI (reg:DI 266 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 266 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 520 519 521 45 (set (reg/f:DI 518)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (nil))
(insn 521 520 522 45 (parallel [
            (set (reg/f:DI 268 [ D.6750 ])
                (plus:DI (reg:DI 267 [ D.6738 ])
                    (reg/f:DI 518)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 518)
        (expr_list:REG_DEAD (reg:DI 267 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
                        (reg:DI 267 [ D.6738 ]))
                    (nil))))))
(insn 522 521 523 45 (set (reg/f:DI 269 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 268 [ D.6750 ]) [0 _256->character+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 268 [ D.6750 ])
        (nil)))
(insn 523 522 524 45 (set (reg:SI 519)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 524 523 525 45 (set (reg:DI 270 [ D.6757 ])
        (sign_extend:DI (reg:SI 519))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 519)
        (nil)))
(insn 525 524 526 45 (parallel [
            (set (reg/f:DI 271 [ D.6756 ])
                (plus:DI (reg/f:DI 269 [ D.6756 ])
                    (reg:DI 270 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 270 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 269 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 526 525 527 45 (set (reg:SI 520)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 527 526 528 45 (set (reg:DI 272 [ D.6738 ])
        (sign_extend:DI (reg:SI 520))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 520)
        (nil)))
(insn 528 527 529 45 (parallel [
            (set (reg:DI 273 [ D.6738 ])
                (ashift:DI (reg:DI 272 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 272 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 529 528 530 45 (set (reg/f:DI 521)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (nil))
(insn 530 529 531 45 (parallel [
            (set (reg/f:DI 274 [ D.6749 ])
                (plus:DI (reg:DI 273 [ D.6738 ])
                    (reg/f:DI 521)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 521)
        (expr_list:REG_DEAD (reg:DI 273 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 273 [ D.6738 ]))
                    (nil))))))
(insn 531 530 532 45 (set (reg/f:DI 275 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 274 [ D.6749 ]) [0 _262->character+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 274 [ D.6749 ])
        (nil)))
(insn 532 531 533 45 (set (reg:SI 522)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 533 532 534 45 (set (reg:DI 276 [ D.6757 ])
        (sign_extend:DI (reg:SI 522))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 522)
        (nil)))
(insn 534 533 535 45 (parallel [
            (set (reg/f:DI 277 [ D.6756 ])
                (plus:DI (reg/f:DI 275 [ D.6756 ])
                    (reg:DI 276 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 276 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 275 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 535 534 536 45 (set (reg:QI 278 [ D.6758 ])
        (mem:QI (reg/f:DI 277 [ D.6756 ]) [0 *_265+0 S1 A8])) fmtext_o.cpp:563 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 277 [ D.6756 ])
        (nil)))
(insn 536 535 537 45 (set (mem:QI (reg/f:DI 271 [ D.6756 ]) [0 *_259+0 S1 A8])
        (reg:QI 278 [ D.6758 ])) fmtext_o.cpp:563 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 278 [ D.6758 ])
        (expr_list:REG_DEAD (reg/f:DI 271 [ D.6756 ])
            (nil))))
(insn 537 536 538 45 (set (reg:SI 523)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 538 537 539 45 (set (reg:DI 279 [ D.6738 ])
        (sign_extend:DI (reg:SI 523))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 523)
        (nil)))
(insn 539 538 540 45 (parallel [
            (set (reg:DI 280 [ D.6738 ])
                (ashift:DI (reg:DI 279 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 279 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 540 539 541 45 (set (reg/f:DI 524)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (nil))
(insn 541 540 542 45 (parallel [
            (set (reg/f:DI 281 [ D.6750 ])
                (plus:DI (reg:DI 280 [ D.6738 ])
                    (reg/f:DI 524)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 524)
        (expr_list:REG_DEAD (reg:DI 280 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
                        (reg:DI 280 [ D.6738 ]))
                    (nil))))))
(insn 542 541 543 45 (set (reg/f:DI 282 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 281 [ D.6750 ]) [0 _270->character+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 281 [ D.6750 ])
        (nil)))
(insn 543 542 544 45 (set (reg:SI 525)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 544 543 545 45 (set (reg:DI 283 [ D.6757 ])
        (sign_extend:DI (reg:SI 525))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 525)
        (nil)))
(insn 545 544 546 45 (parallel [
            (set (reg:DI 284 [ D.6757 ])
                (plus:DI (reg:DI 283 [ D.6757 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 283 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 546 545 547 45 (parallel [
            (set (reg/f:DI 285 [ D.6756 ])
                (plus:DI (reg/f:DI 282 [ D.6756 ])
                    (reg:DI 284 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 284 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 282 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 547 546 548 45 (set (reg:SI 526)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 548 547 549 45 (set (reg:DI 286 [ D.6738 ])
        (sign_extend:DI (reg:SI 526))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 526)
        (nil)))
(insn 549 548 550 45 (parallel [
            (set (reg:DI 287 [ D.6738 ])
                (ashift:DI (reg:DI 286 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 286 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 550 549 551 45 (set (reg/f:DI 527)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (nil))
(insn 551 550 552 45 (parallel [
            (set (reg/f:DI 288 [ D.6749 ])
                (plus:DI (reg:DI 287 [ D.6738 ])
                    (reg/f:DI 527)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 527)
        (expr_list:REG_DEAD (reg:DI 287 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 287 [ D.6738 ]))
                    (nil))))))
(insn 552 551 553 45 (set (reg/f:DI 289 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 288 [ D.6749 ]) [0 _277->character+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 288 [ D.6749 ])
        (nil)))
(insn 553 552 554 45 (set (reg:SI 528)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 554 553 555 45 (set (reg:DI 290 [ D.6757 ])
        (sign_extend:DI (reg:SI 528))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 528)
        (nil)))
(insn 555 554 556 45 (parallel [
            (set (reg:DI 291 [ D.6757 ])
                (plus:DI (reg:DI 290 [ D.6757 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 290 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 556 555 557 45 (parallel [
            (set (reg/f:DI 292 [ D.6756 ])
                (plus:DI (reg/f:DI 289 [ D.6756 ])
                    (reg:DI 291 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 291 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 289 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 557 556 558 45 (set (reg:QI 293 [ D.6758 ])
        (mem:QI (reg/f:DI 292 [ D.6756 ]) [0 *_281+0 S1 A8])) fmtext_o.cpp:564 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 292 [ D.6756 ])
        (nil)))
(insn 558 557 559 45 (set (mem:QI (reg/f:DI 285 [ D.6756 ]) [0 *_274+0 S1 A8])
        (reg:QI 293 [ D.6758 ])) fmtext_o.cpp:564 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 293 [ D.6758 ])
        (expr_list:REG_DEAD (reg/f:DI 285 [ D.6756 ])
            (nil))))
(insn 559 558 560 45 (set (reg:SI 529)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 560 559 561 45 (set (reg:DI 294 [ D.6738 ])
        (sign_extend:DI (reg:SI 529))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 529)
        (nil)))
(insn 561 560 562 45 (parallel [
            (set (reg:DI 295 [ D.6738 ])
                (ashift:DI (reg:DI 294 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 294 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 562 561 563 45 (set (reg/f:DI 530)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (nil))
(insn 563 562 564 45 (parallel [
            (set (reg/f:DI 296 [ D.6750 ])
                (plus:DI (reg:DI 295 [ D.6738 ])
                    (reg/f:DI 530)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 530)
        (expr_list:REG_DEAD (reg:DI 295 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
                        (reg:DI 295 [ D.6738 ]))
                    (nil))))))
(insn 564 563 565 45 (set (reg/f:DI 297 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 296 [ D.6750 ]) [0 _286->character+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 296 [ D.6750 ])
        (nil)))
(insn 565 564 566 45 (set (reg:SI 531)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 566 565 567 45 (set (reg:DI 298 [ D.6757 ])
        (sign_extend:DI (reg:SI 531))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 531)
        (nil)))
(insn 567 566 568 45 (parallel [
            (set (reg:DI 299 [ D.6757 ])
                (plus:DI (reg:DI 298 [ D.6757 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 298 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 568 567 569 45 (parallel [
            (set (reg/f:DI 300 [ D.6756 ])
                (plus:DI (reg/f:DI 297 [ D.6756 ])
                    (reg:DI 299 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 299 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 297 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 569 568 570 45 (set (reg:SI 532)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 570 569 571 45 (set (reg:DI 301 [ D.6738 ])
        (sign_extend:DI (reg:SI 532))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 532)
        (nil)))
(insn 571 570 572 45 (parallel [
            (set (reg:DI 302 [ D.6738 ])
                (ashift:DI (reg:DI 301 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 301 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 572 571 573 45 (set (reg/f:DI 533)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (nil))
(insn 573 572 574 45 (parallel [
            (set (reg/f:DI 303 [ D.6749 ])
                (plus:DI (reg:DI 302 [ D.6738 ])
                    (reg/f:DI 533)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 533)
        (expr_list:REG_DEAD (reg:DI 302 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 302 [ D.6738 ]))
                    (nil))))))
(insn 574 573 575 45 (set (reg/f:DI 304 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 303 [ D.6749 ]) [0 _293->character+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 303 [ D.6749 ])
        (nil)))
(insn 575 574 576 45 (set (reg:SI 534)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 576 575 577 45 (set (reg:DI 305 [ D.6757 ])
        (sign_extend:DI (reg:SI 534))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 534)
        (nil)))
(insn 577 576 578 45 (parallel [
            (set (reg:DI 306 [ D.6757 ])
                (plus:DI (reg:DI 305 [ D.6757 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 305 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 578 577 579 45 (parallel [
            (set (reg/f:DI 307 [ D.6756 ])
                (plus:DI (reg/f:DI 304 [ D.6756 ])
                    (reg:DI 306 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 306 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 304 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 579 578 580 45 (set (reg:QI 308 [ D.6758 ])
        (mem:QI (reg/f:DI 307 [ D.6756 ]) [0 *_297+0 S1 A8])) fmtext_o.cpp:565 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 307 [ D.6756 ])
        (nil)))
(insn 580 579 581 45 (set (mem:QI (reg/f:DI 300 [ D.6756 ]) [0 *_290+0 S1 A8])
        (reg:QI 308 [ D.6758 ])) fmtext_o.cpp:565 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 308 [ D.6758 ])
        (expr_list:REG_DEAD (reg/f:DI 300 [ D.6756 ])
            (nil))))
(insn 581 580 582 45 (set (reg:SI 535)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 582 581 583 45 (set (reg:DI 309 [ D.6738 ])
        (sign_extend:DI (reg:SI 535))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 535)
        (nil)))
(insn 583 582 584 45 (parallel [
            (set (reg:DI 310 [ D.6738 ])
                (ashift:DI (reg:DI 309 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 309 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 584 583 585 45 (set (reg/f:DI 536)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (nil))
(insn 585 584 586 45 (parallel [
            (set (reg/f:DI 311 [ D.6750 ])
                (plus:DI (reg:DI 310 [ D.6738 ])
                    (reg/f:DI 536)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 536)
        (expr_list:REG_DEAD (reg:DI 310 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
                        (reg:DI 310 [ D.6738 ]))
                    (nil))))))
(insn 586 585 587 45 (set (reg/f:DI 312 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 311 [ D.6750 ]) [0 _302->character+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 311 [ D.6750 ])
        (nil)))
(insn 587 586 588 45 (set (reg:SI 537)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 588 587 589 45 (set (reg:DI 313 [ D.6757 ])
        (sign_extend:DI (reg:SI 537))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 537)
        (nil)))
(insn 589 588 590 45 (parallel [
            (set (reg:DI 314 [ D.6757 ])
                (plus:DI (reg:DI 313 [ D.6757 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 313 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 590 589 591 45 (parallel [
            (set (reg/f:DI 315 [ D.6756 ])
                (plus:DI (reg/f:DI 312 [ D.6756 ])
                    (reg:DI 314 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 314 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 312 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 591 590 592 45 (set (reg:SI 538)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 592 591 593 45 (set (reg:DI 316 [ D.6738 ])
        (sign_extend:DI (reg:SI 538))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 538)
        (nil)))
(insn 593 592 594 45 (parallel [
            (set (reg:DI 317 [ D.6738 ])
                (ashift:DI (reg:DI 316 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 316 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 594 593 595 45 (set (reg/f:DI 539)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (nil))
(insn 595 594 596 45 (parallel [
            (set (reg/f:DI 318 [ D.6749 ])
                (plus:DI (reg:DI 317 [ D.6738 ])
                    (reg/f:DI 539)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 539)
        (expr_list:REG_DEAD (reg:DI 317 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 317 [ D.6738 ]))
                    (nil))))))
(insn 596 595 597 45 (set (reg/f:DI 319 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 318 [ D.6749 ]) [0 _309->character+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 318 [ D.6749 ])
        (nil)))
(insn 597 596 598 45 (set (reg:SI 540)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 598 597 599 45 (set (reg:DI 320 [ D.6757 ])
        (sign_extend:DI (reg:SI 540))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 540)
        (nil)))
(insn 599 598 600 45 (parallel [
            (set (reg:DI 321 [ D.6757 ])
                (plus:DI (reg:DI 320 [ D.6757 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 320 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 600 599 601 45 (parallel [
            (set (reg/f:DI 322 [ D.6756 ])
                (plus:DI (reg/f:DI 319 [ D.6756 ])
                    (reg:DI 321 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 321 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 319 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 601 600 602 45 (set (reg:QI 323 [ D.6758 ])
        (mem:QI (reg/f:DI 322 [ D.6756 ]) [0 *_313+0 S1 A8])) fmtext_o.cpp:566 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 322 [ D.6756 ])
        (nil)))
(insn 602 601 603 45 (set (mem:QI (reg/f:DI 315 [ D.6756 ]) [0 *_306+0 S1 A8])
        (reg:QI 323 [ D.6758 ])) fmtext_o.cpp:566 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 323 [ D.6758 ])
        (expr_list:REG_DEAD (reg/f:DI 315 [ D.6756 ])
            (nil))))
(insn 603 602 804 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 804 603 805 45 (set (pc)
        (label_ref 604)) fmtext_o.cpp:562 654 {jump}
     (nil)
 -> 604)
;;  succ:       44 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 805 804 607)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 607 805 608 46 116 "" [1 uses])
(note 608 607 609 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 609 608 713 46 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
;;  succ:       47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;;              48 [100.0%] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 324 325 326 327 328 329 330 331 332 333 541 542
(code_label 713 609 610 47 119 "" [1 uses])
(note 610 713 611 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 611 610 612 47 (set (reg:SI 541)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 612 611 613 47 (set (reg:DI 324 [ D.6738 ])
        (sign_extend:DI (reg:SI 541))) fmtext_o.cpp:569 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 541)
        (nil)))
(insn 613 612 614 47 (parallel [
            (set (reg:DI 325 [ D.6738 ])
                (ashift:DI (reg:DI 324 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 324 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 614 613 615 47 (set (reg/f:DI 542)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:569 89 {*movdi_internal}
     (nil))
(insn 615 614 616 47 (parallel [
            (set (reg/f:DI 326 [ D.6743 ])
                (plus:DI (reg:DI 325 [ D.6738 ])
                    (reg/f:DI 542)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 542)
        (expr_list:REG_DEAD (reg:DI 325 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 325 [ D.6738 ]))
                    (nil))))))
(insn 616 615 617 47 (set (reg/f:DI 327 [ D.6744 ])
        (mem/f:DI (reg/f:DI 326 [ D.6743 ]) [0 *_320+0 S8 A64])) fmtext_o.cpp:569 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 326 [ D.6743 ])
        (nil)))
(insn 617 616 618 47 (set (reg:SI 328 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 327 [ D.6744 ])
                (const_int 8 [0x8])) [0 _321->np.number+0 S4 A32])) fmtext_o.cpp:569 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 327 [ D.6744 ])
        (nil)))
(insn 618 617 619 47 (set (reg:DI 329 [ D.6738 ])
        (sign_extend:DI (reg:SI 328 [ D.6737 ]))) fmtext_o.cpp:569 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 328 [ D.6737 ])
        (nil)))
(insn 619 618 620 47 (set (reg:SI 330 [ D.6755 ])
        (subreg:SI (reg:DI 329 [ D.6738 ]) 0)) fmtext_o.cpp:569 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 329 [ D.6738 ])
        (nil)))
(insn 620 619 621 47 (set (reg:SI 331 [ D.6755 ])
        (const_int 8 [0x8])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 621 620 622 47 (parallel [
            (set (reg:SI 332 [ D.6755 ])
                (mult:SI (reg:SI 330 [ D.6755 ])
                    (reg:SI 331 [ D.6755 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 305 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 331 [ D.6755 ])
        (expr_list:REG_DEAD (reg:SI 330 [ D.6755 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 622 621 623 47 (set (reg:SI 333 [ D.6737 ])
        (reg:SI 332 [ D.6755 ])) fmtext_o.cpp:569 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 332 [ D.6755 ])
        (nil)))
(insn 623 622 624 47 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 333 [ D.6737 ])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32]))) fmtext_o.cpp:569 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 333 [ D.6737 ])
        (nil)))
(jump_insn 624 623 625 47 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 716)
            (pc))) fmtext_o.cpp:569 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 716)
;;  succ:       49
;;              48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566
(note 625 624 626 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 626 625 627 48 (set (reg:SI 543)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 627 626 628 48 (set (reg:DI 334 [ D.6738 ])
        (sign_extend:DI (reg:SI 543))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 543)
        (nil)))
(insn 628 627 629 48 (parallel [
            (set (reg:DI 335 [ D.6738 ])
                (ashift:DI (reg:DI 334 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 334 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 629 628 630 48 (set (reg/f:DI 544)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (nil))
(insn 630 629 631 48 (parallel [
            (set (reg/f:DI 336 [ D.6750 ])
                (plus:DI (reg:DI 335 [ D.6738 ])
                    (reg/f:DI 544)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 544)
        (expr_list:REG_DEAD (reg:DI 335 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
                        (reg:DI 335 [ D.6738 ]))
                    (nil))))))
(insn 631 630 632 48 (set (reg/f:DI 337 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 336 [ D.6750 ]) [0 _330->character+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 336 [ D.6750 ])
        (nil)))
(insn 632 631 633 48 (set (reg:SI 545)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 633 632 634 48 (set (reg:DI 338 [ D.6757 ])
        (sign_extend:DI (reg:SI 545))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 545)
        (nil)))
(insn 634 633 635 48 (parallel [
            (set (reg/f:DI 339 [ D.6756 ])
                (plus:DI (reg/f:DI 337 [ D.6756 ])
                    (reg:DI 338 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 338 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 337 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 635 634 636 48 (set (reg:SI 546)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 636 635 637 48 (set (reg:DI 340 [ D.6738 ])
        (sign_extend:DI (reg:SI 546))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 546)
        (nil)))
(insn 637 636 638 48 (parallel [
            (set (reg:DI 341 [ D.6738 ])
                (ashift:DI (reg:DI 340 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 340 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 638 637 639 48 (set (reg/f:DI 547)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (nil))
(insn 639 638 640 48 (parallel [
            (set (reg/f:DI 342 [ D.6749 ])
                (plus:DI (reg:DI 341 [ D.6738 ])
                    (reg/f:DI 547)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 547)
        (expr_list:REG_DEAD (reg:DI 341 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 341 [ D.6738 ]))
                    (nil))))))
(insn 640 639 641 48 (set (reg/f:DI 343 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 342 [ D.6749 ]) [0 _336->character+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 342 [ D.6749 ])
        (nil)))
(insn 641 640 642 48 (set (reg:SI 548)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 642 641 643 48 (set (reg:DI 344 [ D.6757 ])
        (sign_extend:DI (reg:SI 548))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 548)
        (nil)))
(insn 643 642 644 48 (parallel [
            (set (reg:DI 345 [ D.6757 ])
                (plus:DI (reg:DI 344 [ D.6757 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 344 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 644 643 645 48 (parallel [
            (set (reg/f:DI 346 [ D.6756 ])
                (plus:DI (reg/f:DI 343 [ D.6756 ])
                    (reg:DI 345 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 345 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 343 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 645 644 646 48 (set (reg:QI 347 [ D.6758 ])
        (mem:QI (reg/f:DI 346 [ D.6756 ]) [0 *_340+0 S1 A8])) fmtext_o.cpp:570 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 346 [ D.6756 ])
        (nil)))
(insn 646 645 647 48 (set (mem:QI (reg/f:DI 339 [ D.6756 ]) [0 *_333+0 S1 A8])
        (reg:QI 347 [ D.6758 ])) fmtext_o.cpp:570 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 347 [ D.6758 ])
        (expr_list:REG_DEAD (reg/f:DI 339 [ D.6756 ])
            (nil))))
(insn 647 646 648 48 (set (reg:SI 549)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 648 647 649 48 (set (reg:DI 348 [ D.6738 ])
        (sign_extend:DI (reg:SI 549))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 549)
        (nil)))
(insn 649 648 650 48 (parallel [
            (set (reg:DI 349 [ D.6738 ])
                (ashift:DI (reg:DI 348 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 348 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 650 649 651 48 (set (reg/f:DI 550)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (nil))
(insn 651 650 652 48 (parallel [
            (set (reg/f:DI 350 [ D.6750 ])
                (plus:DI (reg:DI 349 [ D.6738 ])
                    (reg/f:DI 550)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 550)
        (expr_list:REG_DEAD (reg:DI 349 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
                        (reg:DI 349 [ D.6738 ]))
                    (nil))))))
(insn 652 651 653 48 (set (reg/f:DI 351 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 350 [ D.6750 ]) [0 _345->character+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 350 [ D.6750 ])
        (nil)))
(insn 653 652 654 48 (set (reg:SI 551)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 654 653 655 48 (set (reg:DI 352 [ D.6757 ])
        (sign_extend:DI (reg:SI 551))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 551)
        (nil)))
(insn 655 654 656 48 (parallel [
            (set (reg:DI 353 [ D.6757 ])
                (plus:DI (reg:DI 352 [ D.6757 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 352 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 656 655 657 48 (parallel [
            (set (reg/f:DI 354 [ D.6756 ])
                (plus:DI (reg/f:DI 351 [ D.6756 ])
                    (reg:DI 353 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 353 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 351 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 657 656 658 48 (set (reg:SI 552)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 658 657 659 48 (set (reg:DI 355 [ D.6738 ])
        (sign_extend:DI (reg:SI 552))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 552)
        (nil)))
(insn 659 658 660 48 (parallel [
            (set (reg:DI 356 [ D.6738 ])
                (ashift:DI (reg:DI 355 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 355 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 660 659 661 48 (set (reg/f:DI 553)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (nil))
(insn 661 660 662 48 (parallel [
            (set (reg/f:DI 357 [ D.6749 ])
                (plus:DI (reg:DI 356 [ D.6738 ])
                    (reg/f:DI 553)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 553)
        (expr_list:REG_DEAD (reg:DI 356 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 356 [ D.6738 ]))
                    (nil))))))
(insn 662 661 663 48 (set (reg/f:DI 358 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 357 [ D.6749 ]) [0 _352->character+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 357 [ D.6749 ])
        (nil)))
(insn 663 662 664 48 (set (reg:SI 554)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 664 663 665 48 (set (reg:DI 359 [ D.6757 ])
        (sign_extend:DI (reg:SI 554))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 554)
        (nil)))
(insn 665 664 666 48 (parallel [
            (set (reg:DI 360 [ D.6757 ])
                (plus:DI (reg:DI 359 [ D.6757 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 359 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 666 665 667 48 (parallel [
            (set (reg/f:DI 361 [ D.6756 ])
                (plus:DI (reg/f:DI 358 [ D.6756 ])
                    (reg:DI 360 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 360 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 358 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 667 666 668 48 (set (reg:QI 362 [ D.6758 ])
        (mem:QI (reg/f:DI 361 [ D.6756 ]) [0 *_356+0 S1 A8])) fmtext_o.cpp:571 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 361 [ D.6756 ])
        (nil)))
(insn 668 667 669 48 (set (mem:QI (reg/f:DI 354 [ D.6756 ]) [0 *_349+0 S1 A8])
        (reg:QI 362 [ D.6758 ])) fmtext_o.cpp:571 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 362 [ D.6758 ])
        (expr_list:REG_DEAD (reg/f:DI 354 [ D.6756 ])
            (nil))))
(insn 669 668 670 48 (set (reg:SI 555)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 670 669 671 48 (set (reg:DI 363 [ D.6738 ])
        (sign_extend:DI (reg:SI 555))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 555)
        (nil)))
(insn 671 670 672 48 (parallel [
            (set (reg:DI 364 [ D.6738 ])
                (ashift:DI (reg:DI 363 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 363 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 672 671 673 48 (set (reg/f:DI 556)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (nil))
(insn 673 672 674 48 (parallel [
            (set (reg/f:DI 365 [ D.6750 ])
                (plus:DI (reg:DI 364 [ D.6738 ])
                    (reg/f:DI 556)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 556)
        (expr_list:REG_DEAD (reg:DI 364 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
                        (reg:DI 364 [ D.6738 ]))
                    (nil))))))
(insn 674 673 675 48 (set (reg/f:DI 366 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 365 [ D.6750 ]) [0 _361->character+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 365 [ D.6750 ])
        (nil)))
(insn 675 674 676 48 (set (reg:SI 557)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 676 675 677 48 (set (reg:DI 367 [ D.6757 ])
        (sign_extend:DI (reg:SI 557))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 557)
        (nil)))
(insn 677 676 678 48 (parallel [
            (set (reg:DI 368 [ D.6757 ])
                (plus:DI (reg:DI 367 [ D.6757 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 367 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 678 677 679 48 (parallel [
            (set (reg/f:DI 369 [ D.6756 ])
                (plus:DI (reg/f:DI 366 [ D.6756 ])
                    (reg:DI 368 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 368 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 366 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 679 678 680 48 (set (reg:SI 558)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 680 679 681 48 (set (reg:DI 370 [ D.6738 ])
        (sign_extend:DI (reg:SI 558))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 558)
        (nil)))
(insn 681 680 682 48 (parallel [
            (set (reg:DI 371 [ D.6738 ])
                (ashift:DI (reg:DI 370 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 370 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 682 681 683 48 (set (reg/f:DI 559)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (nil))
(insn 683 682 684 48 (parallel [
            (set (reg/f:DI 372 [ D.6749 ])
                (plus:DI (reg:DI 371 [ D.6738 ])
                    (reg/f:DI 559)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 559)
        (expr_list:REG_DEAD (reg:DI 371 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 371 [ D.6738 ]))
                    (nil))))))
(insn 684 683 685 48 (set (reg/f:DI 373 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 372 [ D.6749 ]) [0 _368->character+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 372 [ D.6749 ])
        (nil)))
(insn 685 684 686 48 (set (reg:SI 560)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 686 685 687 48 (set (reg:DI 374 [ D.6757 ])
        (sign_extend:DI (reg:SI 560))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 560)
        (nil)))
(insn 687 686 688 48 (parallel [
            (set (reg:DI 375 [ D.6757 ])
                (plus:DI (reg:DI 374 [ D.6757 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 374 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 688 687 689 48 (parallel [
            (set (reg/f:DI 376 [ D.6756 ])
                (plus:DI (reg/f:DI 373 [ D.6756 ])
                    (reg:DI 375 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 375 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 373 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 689 688 690 48 (set (reg:QI 377 [ D.6758 ])
        (mem:QI (reg/f:DI 376 [ D.6756 ]) [0 *_372+0 S1 A8])) fmtext_o.cpp:572 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 376 [ D.6756 ])
        (nil)))
(insn 690 689 691 48 (set (mem:QI (reg/f:DI 369 [ D.6756 ]) [0 *_365+0 S1 A8])
        (reg:QI 377 [ D.6758 ])) fmtext_o.cpp:572 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 377 [ D.6758 ])
        (expr_list:REG_DEAD (reg/f:DI 369 [ D.6756 ])
            (nil))))
(insn 691 690 692 48 (set (reg:SI 561)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 692 691 693 48 (set (reg:DI 378 [ D.6738 ])
        (sign_extend:DI (reg:SI 561))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 561)
        (nil)))
(insn 693 692 694 48 (parallel [
            (set (reg:DI 379 [ D.6738 ])
                (ashift:DI (reg:DI 378 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 378 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 694 693 695 48 (set (reg/f:DI 562)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (nil))
(insn 695 694 696 48 (parallel [
            (set (reg/f:DI 380 [ D.6750 ])
                (plus:DI (reg:DI 379 [ D.6738 ])
                    (reg/f:DI 562)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 562)
        (expr_list:REG_DEAD (reg:DI 379 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
                        (reg:DI 379 [ D.6738 ]))
                    (nil))))))
(insn 696 695 697 48 (set (reg/f:DI 381 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 380 [ D.6750 ]) [0 _377->character+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 380 [ D.6750 ])
        (nil)))
(insn 697 696 698 48 (set (reg:SI 563)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 698 697 699 48 (set (reg:DI 382 [ D.6757 ])
        (sign_extend:DI (reg:SI 563))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 563)
        (nil)))
(insn 699 698 700 48 (parallel [
            (set (reg:DI 383 [ D.6757 ])
                (plus:DI (reg:DI 382 [ D.6757 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 382 [ D.6757 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 700 699 701 48 (parallel [
            (set (reg/f:DI 384 [ D.6756 ])
                (plus:DI (reg/f:DI 381 [ D.6756 ])
                    (reg:DI 383 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 383 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 381 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 701 700 702 48 (set (reg:SI 564)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 702 701 703 48 (set (reg:DI 385 [ D.6738 ])
        (sign_extend:DI (reg:SI 564))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 564)
        (nil)))
(insn 703 702 704 48 (parallel [
            (set (reg:DI 386 [ D.6738 ])
                (ashift:DI (reg:DI 385 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 385 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 704 703 705 48 (set (reg/f:DI 565)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (nil))
(insn 705 704 706 48 (parallel [
            (set (reg/f:DI 387 [ D.6749 ])
                (plus:DI (reg:DI 386 [ D.6738 ])
                    (reg/f:DI 565)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 565)
        (expr_list:REG_DEAD (reg:DI 386 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 386 [ D.6738 ]))
                    (nil))))))
(insn 706 705 707 48 (set (reg/f:DI 388 [ D.6756 ])
        (mem/f/j:DI (reg/f:DI 387 [ D.6749 ]) [0 _384->character+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 387 [ D.6749 ])
        (nil)))
(insn 707 706 708 48 (set (reg:SI 566)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 708 707 709 48 (set (reg:DI 389 [ D.6757 ])
        (sign_extend:DI (reg:SI 566))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 566)
        (nil)))
(insn 709 708 710 48 (parallel [
            (set (reg/f:DI 390 [ D.6756 ])
                (plus:DI (reg/f:DI 388 [ D.6756 ])
                    (reg:DI 389 [ D.6757 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 389 [ D.6757 ])
        (expr_list:REG_DEAD (reg/f:DI 388 [ D.6756 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 710 709 711 48 (set (reg:QI 391 [ D.6758 ])
        (mem:QI (reg/f:DI 390 [ D.6756 ]) [0 *_387+0 S1 A8])) fmtext_o.cpp:573 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 390 [ D.6756 ])
        (nil)))
(insn 711 710 712 48 (set (mem:QI (reg/f:DI 384 [ D.6756 ]) [0 *_381+0 S1 A8])
        (reg:QI 391 [ D.6758 ])) fmtext_o.cpp:573 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 391 [ D.6758 ])
        (expr_list:REG_DEAD (reg/f:DI 384 [ D.6756 ])
            (nil))))
(insn 712 711 806 48 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 806 712 807 48 (set (pc)
        (label_ref 713)) fmtext_o.cpp:569 654 {jump}
     (nil)
 -> 713)
;;  succ:       47 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 807 806 716)
;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;;              47
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 392 393 394 395 396 567 568
(code_label 716 807 717 49 117 "" [2 uses])
(note 717 716 718 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 718 717 719 49 (set (reg:SI 567)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:580 90 {*movsi_internal}
     (nil))
(insn 719 718 720 49 (set (reg:DI 392 [ D.6738 ])
        (sign_extend:DI (reg:SI 567))) fmtext_o.cpp:580 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 567)
        (nil)))
(insn 720 719 721 49 (parallel [
            (set (reg:DI 393 [ D.6738 ])
                (ashift:DI (reg:DI 392 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:580 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 392 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 721 720 722 49 (set (reg/f:DI 568)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:580 89 {*movdi_internal}
     (nil))
(insn 722 721 723 49 (parallel [
            (set (reg/f:DI 394 [ D.6743 ])
                (plus:DI (reg:DI 393 [ D.6738 ])
                    (reg/f:DI 568)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:580 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 568)
        (expr_list:REG_DEAD (reg:DI 393 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 393 [ D.6738 ]))
                    (nil))))))
(insn 723 722 724 49 (set (reg/f:DI 395 [ D.6744 ])
        (mem/f:DI (reg/f:DI 394 [ D.6743 ]) [0 *_393+0 S8 A64])) fmtext_o.cpp:580 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 394 [ D.6743 ])
        (nil)))
(insn 724 723 725 49 (set (reg:SI 396 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 395 [ D.6744 ])
                (const_int 12 [0xc])) [0 _394->ebytes.number+0 S4 A32])) fmtext_o.cpp:580 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 395 [ D.6744 ])
        (nil)))
(insn 725 724 726 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 396 [ D.6737 ])
            (const_int 2 [0x2]))) fmtext_o.cpp:580 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 396 [ D.6737 ])
        (nil)))
(jump_insn 726 725 727 49 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 768)
            (pc))) fmtext_o.cpp:580 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 768)
;;  succ:       50 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 397 398 399 400 401 569 570 571
(note 727 726 728 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 728 727 729 50 (set (reg:SI 569)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:581 90 {*movsi_internal}
     (nil))
(insn 729 728 730 50 (set (reg:DI 397 [ D.6738 ])
        (sign_extend:DI (reg:SI 569))) fmtext_o.cpp:581 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 569)
        (nil)))
(insn 730 729 731 50 (parallel [
            (set (reg:DI 398 [ D.6738 ])
                (ashift:DI (reg:DI 397 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 397 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 731 730 732 50 (set (reg/f:DI 570)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:581 89 {*movdi_internal}
     (nil))
(insn 732 731 733 50 (parallel [
            (set (reg/f:DI 399 [ D.6743 ])
                (plus:DI (reg:DI 398 [ D.6738 ])
                    (reg/f:DI 570)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 570)
        (expr_list:REG_DEAD (reg:DI 398 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
                        (reg:DI 398 [ D.6738 ]))
                    (nil))))))
(insn 733 732 734 50 (set (reg/f:DI 400 [ D.6744 ])
        (mem/f:DI (reg/f:DI 399 [ D.6743 ]) [0 *_398+0 S8 A64])) fmtext_o.cpp:581 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 399 [ D.6743 ])
        (nil)))
(insn 734 733 735 50 (set (reg:SI 401 [ D.6737 ])
        (mem/j:SI (plus:DI (reg/f:DI 400 [ D.6744 ])
                (const_int 8 [0x8])) [0 _399->np.number+0 S4 A32])) fmtext_o.cpp:581 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 400 [ D.6744 ])
        (nil)))
(insn 735 734 736 50 (parallel [
            (set (reg:SI 571)
                (plus:SI (reg:SI 401 [ D.6737 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 401 [ D.6737 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 736 735 765 50 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
        (reg:SI 571)) fmtext_o.cpp:581 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 571)
        (nil)))
;;  succ:       51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;;              52 [100.0%] 
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 765 736 737 51 120 "" [1 uses])
(note 737 765 738 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 738 737 739 51 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:581 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 739 738 740 51 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 768)
            (pc))) fmtext_o.cpp:581 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil))
 -> 768)
;;  succ:       53
;;              52 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 572 573 574 575 576 577
(note 740 739 741 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 741 740 742 52 (set (reg:SI 572)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 742 741 743 52 (set (reg:DI 402 [ D.6738 ])
        (sign_extend:DI (reg:SI 572))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 572)
        (nil)))
(insn 743 742 744 52 (parallel [
            (set (reg:DI 403 [ D.6738 ])
                (ashift:DI (reg:DI 402 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 402 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 744 743 745 52 (set (reg/f:DI 573)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 745 744 746 52 (parallel [
            (set (reg/f:DI 404 [ D.6749 ])
                (plus:DI (reg:DI 403 [ D.6738 ])
                    (reg/f:DI 573)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 573)
        (expr_list:REG_DEAD (reg:DI 403 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 403 [ D.6738 ]))
                    (nil))))))
(insn 746 745 747 52 (set (reg/f:DI 405 [ D.6753 ])
        (mem/f/j:DI (reg/f:DI 404 [ D.6749 ]) [0 _404->lo+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 404 [ D.6749 ])
        (nil)))
(insn 747 746 748 52 (set (reg:SI 574)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 748 747 749 52 (set (reg:DI 406 [ D.6738 ])
        (sign_extend:DI (reg:SI 574))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 574)
        (nil)))
(insn 749 748 750 52 (parallel [
            (set (reg:DI 407 [ D.6738 ])
                (ashift:DI (reg:DI 406 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 406 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 750 749 751 52 (parallel [
            (set (reg/f:DI 408 [ D.6753 ])
                (plus:DI (reg/f:DI 405 [ D.6753 ])
                    (reg:DI 407 [ D.6738 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 407 [ D.6738 ])
        (expr_list:REG_DEAD (reg/f:DI 405 [ D.6753 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 751 750 752 52 (set (reg:SI 575)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 752 751 753 52 (set (reg:DI 409 [ D.6738 ])
        (sign_extend:DI (reg:SI 575))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 575)
        (nil)))
(insn 753 752 754 52 (parallel [
            (set (reg:DI 410 [ D.6738 ])
                (ashift:DI (reg:DI 409 [ D.6738 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 409 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 754 753 755 52 (set (reg/f:DI 576)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [0 in_data+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 755 754 756 52 (parallel [
            (set (reg/f:DI 411 [ D.6749 ])
                (plus:DI (reg:DI 410 [ D.6738 ])
                    (reg/f:DI 576)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 576)
        (expr_list:REG_DEAD (reg:DI 410 [ D.6738 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                                (const_int 8 [0x8])) [0 in_data+0 S8 A64])
                        (reg:DI 410 [ D.6738 ]))
                    (nil))))))
(insn 756 755 757 52 (set (reg/f:DI 412 [ D.6759 ])
        (mem/f/j:DI (reg/f:DI 411 [ D.6749 ]) [0 _411->sh+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 411 [ D.6749 ])
        (nil)))
(insn 757 756 758 52 (set (reg:SI 577)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 758 757 759 52 (set (reg:DI 413 [ D.6738 ])
        (sign_extend:DI (reg:SI 577))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 577)
        (nil)))
(insn 759 758 760 52 (parallel [
            (set (reg:DI 414 [ D.6738 ])
                (ashift:DI (reg:DI 413 [ D.6738 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 413 [ D.6738 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 760 759 761 52 (parallel [
            (set (reg/f:DI 415 [ D.6759 ])
                (plus:DI (reg/f:DI 412 [ D.6759 ])
                    (reg:DI 414 [ D.6738 ])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 414 [ D.6738 ])
        (expr_list:REG_DEAD (reg/f:DI 412 [ D.6759 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 761 760 762 52 (set (reg:HI 416 [ D.6746 ])
        (mem:HI (reg/f:DI 415 [ D.6759 ]) [0 *_415+0 S2 A16])) fmtext_o.cpp:582 92 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:DI 415 [ D.6759 ])
        (nil)))
(insn 762 761 763 52 (set (reg:DI 417 [ D.6760 ])
        (sign_extend:DI (reg:HI 416 [ D.6746 ]))) fmtext_o.cpp:582 145 {extendhidi2}
     (expr_list:REG_DEAD (reg:HI 416 [ D.6746 ])
        (nil)))
(insn 763 762 764 52 (set (mem:DI (reg/f:DI 408 [ D.6753 ]) [0 *_408+0 S8 A64])
        (reg:DI 417 [ D.6760 ])) fmtext_o.cpp:582 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 417 [ D.6760 ])
        (expr_list:REG_DEAD (reg/f:DI 408 [ D.6753 ])
            (nil))))
(insn 764 763 808 52 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [0 j+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 808 764 809 52 (set (pc)
        (label_ref 765)) fmtext_o.cpp:581 654 {jump}
     (nil)
 -> 765)
;;  succ:       51 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 809 808 768)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              51
;;              49
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 768 809 769 53 93 "" [3 uses])
(note 769 768 770 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 770 769 810 53 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:463 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 810 770 811 53 (set (pc)
        (label_ref 771)) fmtext_o.cpp:463 654 {jump}
     (nil)
 -> 771)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 811 810 774)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 418 419
(code_label 774 811 775 54 92 "" [1 uses])
(note 775 774 776 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 776 775 779 54 (set (reg:SI 418 [ D.6737 ])
        (const_int 1 [0x1])) fmtext_o.cpp:588 90 {*movsi_internal}
     (nil))
(insn 779 776 783 54 (set (reg:SI 419 [ <retval> ])
        (reg:SI 418 [ D.6737 ])) fmtext_o.cpp:588 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 418 [ D.6737 ])
        (nil)))
(insn 783 779 784 54 (set (reg/i:SI 0 ax)
        (reg:SI 419 [ <retval> ])) fmtext_o.cpp:590 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 419 [ <retval> ])
        (nil)))
(insn 784 783 0 54 (use (reg/i:SI 0 ax)) fmtext_o.cpp:590 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function int read_PE_table(char*, int*, PE_info*) (_Z13read_PE_tablePcPiP7PE_info, funcdef_no=7, decl_uid=5421, cgraph_uid=7, symbol_order=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 15 count 13 (    1)
Building IRA IR
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 93.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r108: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r108,l0) best DIREG, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r105,l0) best DIREG, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r102,l0) best DIREG, allocno GENERAL_REGS
    r101: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r101,l0) best DREG, allocno GENERAL_REGS
    r100: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r100,l0) best DIREG, allocno GENERAL_REGS
    r99: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r99,l0) best DIREG, allocno GENERAL_REGS
    r98: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r98,l0) best DREG, allocno GENERAL_REGS
    r97: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r97,l0) best SIREG, allocno GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r95,l0) best AREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r93,l0) best DREG, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r89,l0) best AREG, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:4
  a1(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24 NO_REX_SSE_REGS:24 SSE_REGS:24 MMX_REGS:29 INT_SSE_REGS:25 ALL_REGS:408 MEM:5
  a2(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a3(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:8
  a4(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a5(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a6(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a7(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a8(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a9(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:6
  a10(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a11(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a12(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a13(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a14(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 MEM:7
  a15(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a16(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a17(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21 NO_REX_SSE_REGS:21 SSE_REGS:21 MMX_REGS:26 INT_SSE_REGS:22 ALL_REGS:416 MEM:7
  a18(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a19(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7
  a20(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:16 NO_REX_SSE_REGS:16 SSE_REGS:16 MMX_REGS:21 INT_SSE_REGS:17 ALL_REGS:308 MEM:5
  a21(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20 NO_REX_SSE_REGS:20 SSE_REGS:20 MMX_REGS:25 INT_SSE_REGS:21 ALL_REGS:312 MEM:7

   Insn 96(l0): point = 0
   Insn 93(l0): point = 3
   Insn 92(l0): point = 6
   Insn 91(l0): point = 8
   Insn 90(l0): point = 10
   Insn 86(l0): point = 12
   Insn 81(l0): point = 15
   Insn 78(l0): point = 18
   Insn 77(l0): point = 20
   Insn 76(l0): point = 22
   Insn 74(l0): point = 25
   Insn 73(l0): point = 27
   Insn 72(l0): point = 29
   Insn 71(l0): point = 31
   Insn 70(l0): point = 33
   Insn 69(l0): point = 35
   Insn 44(l0): point = 38
   Insn 43(l0): point = 40
   Insn 42(l0): point = 42
   Insn 41(l0): point = 44
   Insn 40(l0): point = 46
   Insn 39(l0): point = 48
   Insn 38(l0): point = 50
   Insn 37(l0): point = 52
   Insn 102(l0): point = 55
   Insn 63(l0): point = 57
   Insn 62(l0): point = 59
   Insn 61(l0): point = 61
   Insn 60(l0): point = 63
   Insn 59(l0): point = 65
   Insn 58(l0): point = 67
   Insn 57(l0): point = 69
   Insn 56(l0): point = 71
   Insn 55(l0): point = 73
   Insn 54(l0): point = 75
   Insn 53(l0): point = 77
   Insn 52(l0): point = 79
   Insn 51(l0): point = 81
   Insn 50(l0): point = 83
   Insn 49(l0): point = 85
   Insn 48(l0): point = 87
   Insn 47(l0): point = 89
   Insn 46(l0): point = 91
   Insn 35(l0): point = 94
   Insn 34(l0): point = 96
   Insn 33(l0): point = 98
   Insn 32(l0): point = 100
   Insn 31(l0): point = 102
   Insn 30(l0): point = 104
   Insn 29(l0): point = 106
   Insn 100(l0): point = 109
   Insn 24(l0): point = 111
   Insn 23(l0): point = 113
   Insn 22(l0): point = 115
   Insn 21(l0): point = 117
   Insn 20(l0): point = 119
   Insn 19(l0): point = 121
   Insn 17(l0): point = 124
   Insn 16(l0): point = 126
   Insn 15(l0): point = 128
   Insn 14(l0): point = 130
   Insn 13(l0): point = 132
   Insn 12(l0): point = 134
   Insn 11(l0): point = 136
   Insn 10(l0): point = 138
   Insn 9(l0): point = 140
   Insn 6(l0): point = 142
   Insn 4(l0): point = 144
   Insn 3(l0): point = 146
   Insn 2(l0): point = 148
 a0(r95): [11..12]
 a1(r87): [109..111] [13..15]
 a2(r108): [21..22]
 a3(r107): [30..31]
 a4(r94): [30..33]
 a5(r106): [34..35]
 a6(r105): [64..69]
 a7(r93): [68..71]
 a8(r104): [72..73]
 a9(r92): [72..75]
 a10(r91): [76..77]
 a11(r103): [78..79]
 a12(r102): [84..89]
 a13(r101): [88..91]
 a14(r90): [41..42]
 a15(r89): [45..46]
 a16(r100): [51..52]
 a17(r99): [99..104]
 a18(r98): [103..106]
 a19(r97): [120..121]
 a20(r88): [129..130]
 a21(r96): [135..138]
Compressing live ranges: from 151 to 36 - 23%
Ranges after the compression:
 a0(r95): [0..1]
 a1(r87): [28..29] [2..3]
 a2(r108): [4..5]
 a3(r107): [6..7]
 a4(r94): [6..7]
 a5(r106): [8..9]
 a6(r105): [16..17]
 a7(r93): [16..17]
 a8(r104): [18..19]
 a9(r92): [18..19]
 a10(r91): [20..21]
 a11(r103): [22..23]
 a12(r102): [24..25]
 a13(r101): [24..25]
 a14(r90): [10..11]
 a15(r89): [12..13]
 a16(r100): [14..15]
 a17(r99): [26..27]
 a18(r98): [26..27]
 a19(r97): [30..31]
 a20(r88): [32..33]
 a21(r96): [34..35]
  regions=1, blocks=13, points=36
    allocnos=22 (big 0), copies=0, conflicts=0, ranges=23
Disposition:
    1:r87  l0     0   20:r88  l0     0   15:r89  l0     0   14:r90  l0     0
   10:r91  l0     0    9:r92  l0     1    7:r93  l0     1    4:r94  l0     1
    0:r95  l0     0   21:r96  l0     0   19:r97  l0     0   18:r98  l0     1
   17:r99  l0     0   16:r100 l0     0   13:r101 l0     1   12:r102 l0     0
   11:r103 l0     0    8:r104 l0     0    6:r105 l0     0    5:r106 l0     0
    3:r107 l0     0    2:r108 l0     0
+++Costs: overall -13, reg -13, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


int read_PE_table(char*, int*, PE_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={12d,6u} r1={12d,4u} r2={9d} r4={14d,6u} r5={16d,8u} r6={1d,12u} r7={1d,20u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r16={1d,11u} r17={21d,5u} r18={8d} r19={8d} r20={1d,37u,2e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r87={2d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u,1e} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} 
;;    total ref usage 783{649d,131u,3e} in 70{62 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 96
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])
        (reg:DI 5 di [ filename ])) fmtext_o.cpp:592 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ filename ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [0 pe_table+0 S8 A64])
        (reg:DI 4 si [ pe_table ])) fmtext_o.cpp:592 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ pe_table ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 pe_info+0 S8 A64])
        (reg:DI 1 dx [ pe_info ])) fmtext_o.cpp:592 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ pe_info ])
        (nil)))
(note 5 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 5 9 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.6773+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:592 986 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 9 6 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:594 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7fa2a186b360 *.LC22>)) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 96)) fmtext_o.cpp:598 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(call_insn 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fa2a1ac8510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:598 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 88 [ D.6769 ])
        (reg:DI 0 ax)) fmtext_o.cpp:598 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
        (reg/f:DI 88 [ D.6769 ])) fmtext_o.cpp:598 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ D.6769 ])
        (nil)))
(insn 16 15 17 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:600 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 17 16 18 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) fmtext_o.cpp:600 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 27)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 97
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])) fmtext_o.cpp:601 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 4 si)
        (reg:DI 97)) fmtext_o.cpp:601 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 97)
        (nil)))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7fa2a186b3f0 *.LC23>)) fmtext_o.cpp:601 89 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:601 93 {*movqi_internal}
     (nil))
(call_insn 23 22 24 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fa2a1d0a5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:601 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 24 23 100 3 (set (reg:SI 87 [ D.6768 ])
        (const_int 0 [0])) fmtext_o.cpp:602 90 {*movsi_internal}
     (nil))
(jump_insn 100 24 101 3 (set (pc)
        (label_ref 84)) fmtext_o.cpp:602 654 {jump}
     (nil)
 -> 84)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 101 100 27)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 99
(code_label 27 101 28 4 124 "" [1 uses])
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 99)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:605 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 30 32 4 (set (reg:DI 1 dx)
        (reg:DI 98)) fmtext_o.cpp:605 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 98)
        (nil)))
(insn 32 31 33 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:605 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 5 di)
        (reg:DI 99)) fmtext_o.cpp:605 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 99)
        (nil)))
(call_insn 34 33 35 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:605 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 35 34 64 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:607 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 100
(code_label 64 35 36 5 127 "" [1 uses])
(note 36 64 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (reg:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:609 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 5 di)
        (reg:DI 100)) fmtext_o.cpp:609 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 100)
        (nil)))
(call_insn 39 38 40 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("feof") [flags 0x41]  <function_decl 0x7fa2a1ada510 feof>) [0 feof S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:609 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 40 39 41 5 (set (reg:SI 89 [ D.6768 ])
        (reg:SI 0 ax)) fmtext_o.cpp:609 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 41 40 42 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.6768 ])
            (const_int 0 [0]))) fmtext_o.cpp:609 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 89 [ D.6768 ])
        (nil)))
(insn 42 41 43 5 (set (reg:QI 90 [ D.6770 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:609 607 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 43 42 44 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 90 [ D.6770 ])
            (const_int 0 [0]))) fmtext_o.cpp:609 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 90 [ D.6770 ])
        (nil)))
(jump_insn 44 43 45 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) fmtext_o.cpp:609 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 67)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 101 102 103 104 105
(note 45 44 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 6 (set (reg:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(insn 47 46 48 6 (parallel [
            (set (reg:DI 102)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:610 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 48 47 49 6 (set (reg:DI 1 dx)
        (reg:DI 101)) fmtext_o.cpp:610 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 101)
        (nil)))
(insn 49 48 50 6 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:610 90 {*movsi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:DI 5 di)
        (reg:DI 102)) fmtext_o.cpp:610 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 102)
        (nil)))
(call_insn 51 50 52 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7fa2a1aceaf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:610 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 52 51 53 6 (set (reg:SI 103)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])) fmtext_o.cpp:611 90 {*movsi_internal}
     (nil))
(insn 53 52 54 6 (set (reg:DI 91 [ D.6771 ])
        (sign_extend:DI (reg:SI 103))) fmtext_o.cpp:611 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 103)
        (nil)))
(insn 54 53 55 6 (parallel [
            (set (reg:DI 92 [ D.6771 ])
                (ashift:DI (reg:DI 91 [ D.6771 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:611 512 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 91 [ D.6771 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 55 54 56 6 (set (reg/f:DI 104)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:611 89 {*movdi_internal}
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg/f:DI 93 [ D.6772 ])
                (plus:DI (reg:DI 92 [ D.6771 ])
                    (reg/f:DI 104)))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:611 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 104)
        (expr_list:REG_DEAD (reg:DI 92 [ D.6771 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -128 [0xffffffffffffff80])) [0 pe_table+0 S8 A64])
                        (reg:DI 92 [ D.6771 ]))
                    (nil))))))
(insn 57 56 58 6 (parallel [
            (set (reg:DI 105)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:611 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 58 57 59 6 (set (reg:DI 1 dx)
        (reg/f:DI 93 [ D.6772 ])) fmtext_o.cpp:611 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ D.6772 ])
        (nil)))
(insn 59 58 60 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7fa2a18beea0 *.LC36>)) fmtext_o.cpp:611 89 {*movdi_internal}
     (nil))
(insn 60 59 61 6 (set (reg:DI 5 di)
        (reg:DI 105)) fmtext_o.cpp:611 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 105)
        (nil)))
(insn 61 60 62 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:611 93 {*movqi_internal}
     (nil))
(call_insn 62 61 63 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fa2a1d0bd80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:611 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 63 62 102 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:612 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 102 63 103 6 (set (pc)
        (label_ref 64)) fmtext_o.cpp:609 654 {jump}
     (nil)
 -> 64)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 103 102 67)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 106 107
(code_label 67 103 68 7 126 "" [1 uses])
(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 7 (set (reg:SI 106)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])) fmtext_o.cpp:615 90 {*movsi_internal}
     (nil))
(insn 70 69 71 7 (parallel [
            (set (reg:SI 94 [ D.6768 ])
                (plus:SI (reg:SI 106)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:615 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 106)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff]))
                (nil)))))
(insn 71 70 72 7 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -136 [0xffffffffffffff78])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 72 71 73 7 (set (mem/j:SI (reg/f:DI 107) [0 pe_info_28(D)->number_pe+0 S4 A32])
        (reg:SI 94 [ D.6768 ])) fmtext_o.cpp:615 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107)
        (expr_list:REG_DEAD (reg:SI 94 [ D.6768 ])
            (nil))))
(insn 73 72 74 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:618 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 74 73 75 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) fmtext_o.cpp:618 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 79)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108
(note 75 74 76 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 8 (set (reg:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:619 89 {*movdi_internal}
     (nil))
(insn 77 76 78 8 (set (reg:DI 5 di)
        (reg:DI 108)) fmtext_o.cpp:619 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 108)
        (nil)))
(call_insn 78 77 79 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fa2a1ac81b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:619 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 79 78 80 9 128 "" [1 uses])
(note 80 79 81 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 84 9 (set (reg:SI 87 [ D.6768 ])
        (const_int 1 [0x1])) fmtext_o.cpp:622 90 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 95
(code_label 84 81 85 10 129 "" [1 uses])
(note 85 84 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 90 10 (set (reg:SI 95 [ <retval> ])
        (reg:SI 87 [ D.6768 ])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87 [ D.6768 ])
        (nil)))
(insn 90 86 91 10 (set (reg/i:SI 0 ax)
        (reg:SI 95 [ <retval> ])) fmtext_o.cpp:623 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 95 [ <retval> ])
        (nil)))
(insn 91 90 92 10 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.6773+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) fmtext_o.cpp:623 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 92 91 98 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) fmtext_o.cpp:623 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 95)
;;  succ:       12
;;              11 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 98 92 93 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(call_insn 93 98 94 11 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fa2a1c07af8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:623 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 94 93 95)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 95 94 99 12 130 "" [1 uses])
(note 99 95 96 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 96 99 0 12 (use (reg/i:SI 0 ax)) fmtext_o.cpp:623 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

