
;; Function int read_procpar(Procpar_info*, char*) (_Z12read_procparP12Procpar_infoPc, funcdef_no=2, decl_uid=5284, symbol_order=2)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 84 n_edges 102 count 84 (    1)
Building IRA IR
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 152.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 168.
verify found no changes in insn with uid = 178.
verify found no changes in insn with uid = 181.
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 191.
verify found no changes in insn with uid = 198.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 209.
verify found no changes in insn with uid = 221.
verify found no changes in insn with uid = 231.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 244.
verify found no changes in insn with uid = 251.
verify found no changes in insn with uid = 256.
verify found no changes in insn with uid = 263.
verify found no changes in insn with uid = 275.
verify found no changes in insn with uid = 285.
verify found no changes in insn with uid = 288.
verify found no changes in insn with uid = 296.
verify found no changes in insn with uid = 298.
verify found no changes in insn with uid = 305.
verify found no changes in insn with uid = 310.
verify found no changes in insn with uid = 317.
verify found no changes in insn with uid = 329.
verify found no changes in insn with uid = 339.
verify found no changes in insn with uid = 342.
verify found no changes in insn with uid = 350.
verify found no changes in insn with uid = 352.
verify found no changes in insn with uid = 359.
verify found no changes in insn with uid = 364.
verify found no changes in insn with uid = 370.
verify found no changes in insn with uid = 381.
verify found no changes in insn with uid = 391.
verify found no changes in insn with uid = 394.
verify found no changes in insn with uid = 402.
verify found no changes in insn with uid = 404.
verify found no changes in insn with uid = 411.
verify found no changes in insn with uid = 416.
verify found no changes in insn with uid = 422.
verify found no changes in insn with uid = 433.
verify found no changes in insn with uid = 443.
verify found no changes in insn with uid = 446.
verify found no changes in insn with uid = 454.
verify found no changes in insn with uid = 456.
verify found no changes in insn with uid = 463.
verify found no changes in insn with uid = 468.
verify found no changes in insn with uid = 474.
verify found no changes in insn with uid = 486.
verify found no changes in insn with uid = 496.
verify found no changes in insn with uid = 499.
verify found no changes in insn with uid = 507.
verify found no changes in insn with uid = 509.
verify found no changes in insn with uid = 516.
verify found no changes in insn with uid = 521.
verify found no changes in insn with uid = 527.
verify found no changes in insn with uid = 539.
verify found no changes in insn with uid = 549.
verify found no changes in insn with uid = 552.
verify found no changes in insn with uid = 560.
verify found no changes in insn with uid = 562.
verify found no changes in insn with uid = 569.
verify found no changes in insn with uid = 574.
verify found no changes in insn with uid = 580.
verify found no changes in insn with uid = 592.
verify found no changes in insn with uid = 602.
verify found no changes in insn with uid = 605.
verify found no changes in insn with uid = 613.
verify found no changes in insn with uid = 615.
verify found no changes in insn with uid = 622.
verify found no changes in insn with uid = 627.
verify found no changes in insn with uid = 633.
verify found no changes in insn with uid = 645.
verify found no changes in insn with uid = 655.
verify found no changes in insn with uid = 658.
verify found no changes in insn with uid = 666.
verify found no changes in insn with uid = 668.
verify found no changes in insn with uid = 675.
verify found no changes in insn with uid = 680.
verify found no changes in insn with uid = 686.
verify found no changes in insn with uid = 698.
verify found no changes in insn with uid = 708.
verify found no changes in insn with uid = 711.
verify found no changes in insn with uid = 719.
verify found no changes in insn with uid = 721.
verify found no changes in insn with uid = 728.
verify found no changes in insn with uid = 733.
verify found no changes in insn with uid = 739.
verify found no changes in insn with uid = 751.
verify found no changes in insn with uid = 761.
verify found no changes in insn with uid = 764.
verify found no changes in insn with uid = 772.
verify found no changes in insn with uid = 774.
verify found no changes in insn with uid = 781.
verify found no changes in insn with uid = 786.
verify found no changes in insn with uid = 792.
verify found no changes in insn with uid = 804.
verify found no changes in insn with uid = 814.
verify found no changes in insn with uid = 817.
verify found no changes in insn with uid = 825.
verify found no changes in insn with uid = 827.
verify found no changes in insn with uid = 834.
verify found no changes in insn with uid = 839.
verify found no changes in insn with uid = 845.
verify found no changes in insn with uid = 857.
verify found no changes in insn with uid = 867.
verify found no changes in insn with uid = 870.
verify found no changes in insn with uid = 878.
verify found no changes in insn with uid = 880.
verify found no changes in insn with uid = 887.
verify found no changes in insn with uid = 892.
verify found no changes in insn with uid = 898.
verify found no changes in insn with uid = 910.
verify found no changes in insn with uid = 920.
verify found no changes in insn with uid = 923.
verify found no changes in insn with uid = 931.
verify found no changes in insn with uid = 933.
verify found no changes in insn with uid = 940.
verify found no changes in insn with uid = 945.
verify found no changes in insn with uid = 951.
verify found no changes in insn with uid = 963.
verify found no changes in insn with uid = 967.
verify found no changes in insn with uid = 975.
verify found no changes in insn with uid = 977.
verify found no changes in insn with uid = 983.
verify found no changes in insn with uid = 995.
verify found no changes in insn with uid = 998.
verify found no changes in insn with uid = 1001.
verify found no changes in insn with uid = 1014.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r339: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r339,l0) best DIREG, allocno GENERAL_REGS
    r338: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r338,l0) best DIREG, allocno GENERAL_REGS
    r337: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r337,l0) best DIREG, allocno GENERAL_REGS
    r336: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r336,l0) best DIREG, allocno GENERAL_REGS
    r335: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r335,l0) best DREG, allocno GENERAL_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r334,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r333: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r333,l0) best DIREG, allocno GENERAL_REGS
    r332: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r332,l0) best AREG, allocno GENERAL_REGS
    r331: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r331,l0) best AREG, allocno GENERAL_REGS
    r330: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r330,l0) best DIREG, allocno GENERAL_REGS
    r329: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r329,l0) best DIREG, allocno GENERAL_REGS
    r328: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r328,l0) best DIREG, allocno GENERAL_REGS
    r327: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r327,l0) best DREG, allocno GENERAL_REGS
    r326: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r326,l0) best DIREG, allocno GENERAL_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r325,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r324: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r324,l0) best DIREG, allocno GENERAL_REGS
    r323: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r323,l0) best AREG, allocno GENERAL_REGS
    r322: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a31 (r322,l0) best AREG, allocno GENERAL_REGS
    r321: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r321,l0) best DIREG, allocno GENERAL_REGS
    r320: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a35 (r320,l0) best DIREG, allocno GENERAL_REGS
    r319: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r319,l0) best DIREG, allocno GENERAL_REGS
    r318: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r318,l0) best DREG, allocno GENERAL_REGS
    r317: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a39 (r317,l0) best DIREG, allocno GENERAL_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r316,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r315: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a43 (r315,l0) best DIREG, allocno GENERAL_REGS
    r314: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a44 (r314,l0) best AREG, allocno GENERAL_REGS
    r313: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a45 (r313,l0) best AREG, allocno GENERAL_REGS
    r312: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a46 (r312,l0) best DIREG, allocno GENERAL_REGS
    r311: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a49 (r311,l0) best DIREG, allocno GENERAL_REGS
    r310: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a50 (r310,l0) best DIREG, allocno GENERAL_REGS
    r309: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a51 (r309,l0) best DREG, allocno GENERAL_REGS
    r308: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a53 (r308,l0) best DIREG, allocno GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r307,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r306: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a57 (r306,l0) best DIREG, allocno GENERAL_REGS
    r305: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a58 (r305,l0) best AREG, allocno GENERAL_REGS
    r304: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a59 (r304,l0) best AREG, allocno GENERAL_REGS
    r303: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a60 (r303,l0) best DIREG, allocno GENERAL_REGS
    r302: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a63 (r302,l0) best DIREG, allocno GENERAL_REGS
    r301: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a64 (r301,l0) best DIREG, allocno GENERAL_REGS
    r300: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a65 (r300,l0) best DREG, allocno GENERAL_REGS
    r299: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a67 (r299,l0) best DIREG, allocno GENERAL_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r298,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r297: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a71 (r297,l0) best DIREG, allocno GENERAL_REGS
    r296: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a72 (r296,l0) best AREG, allocno GENERAL_REGS
    r295: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a73 (r295,l0) best AREG, allocno GENERAL_REGS
    r294: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a74 (r294,l0) best DIREG, allocno GENERAL_REGS
    r293: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a77 (r293,l0) best DIREG, allocno GENERAL_REGS
    r292: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a78 (r292,l0) best DIREG, allocno GENERAL_REGS
    r291: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a79 (r291,l0) best DREG, allocno GENERAL_REGS
    r290: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a81 (r290,l0) best DIREG, allocno GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r289,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r288: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a85 (r288,l0) best DIREG, allocno GENERAL_REGS
    r287: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a86 (r287,l0) best AREG, allocno GENERAL_REGS
    r286: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a87 (r286,l0) best AREG, allocno GENERAL_REGS
    r285: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a88 (r285,l0) best DIREG, allocno GENERAL_REGS
    r284: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a91 (r284,l0) best DIREG, allocno GENERAL_REGS
    r283: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a92 (r283,l0) best DIREG, allocno GENERAL_REGS
    r282: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a93 (r282,l0) best DREG, allocno GENERAL_REGS
    r281: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a95 (r281,l0) best DIREG, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r280,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a99 (r279,l0) best DIREG, allocno GENERAL_REGS
    r278: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a100 (r278,l0) best AREG, allocno GENERAL_REGS
    r277: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a101 (r277,l0) best AREG, allocno GENERAL_REGS
    r276: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a102 (r276,l0) best DIREG, allocno GENERAL_REGS
    r275: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a105 (r275,l0) best DIREG, allocno GENERAL_REGS
    r274: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a106 (r274,l0) best DIREG, allocno GENERAL_REGS
    r273: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a107 (r273,l0) best DREG, allocno GENERAL_REGS
    r272: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a109 (r272,l0) best DIREG, allocno GENERAL_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r271,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r270: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a113 (r270,l0) best DIREG, allocno GENERAL_REGS
    r269: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a114 (r269,l0) best AREG, allocno GENERAL_REGS
    r268: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a115 (r268,l0) best AREG, allocno GENERAL_REGS
    r267: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a116 (r267,l0) best DIREG, allocno GENERAL_REGS
    r266: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a119 (r266,l0) best DIREG, allocno GENERAL_REGS
    r265: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a120 (r265,l0) best DIREG, allocno GENERAL_REGS
    r264: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a121 (r264,l0) best DREG, allocno GENERAL_REGS
    r263: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a123 (r263,l0) best DIREG, allocno GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a127 (r261,l0) best DIREG, allocno GENERAL_REGS
    r260: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a128 (r260,l0) best AREG, allocno GENERAL_REGS
    r259: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a129 (r259,l0) best AREG, allocno GENERAL_REGS
    r258: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a130 (r258,l0) best DIREG, allocno GENERAL_REGS
    r257: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a133 (r257,l0) best DIREG, allocno GENERAL_REGS
    r256: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a134 (r256,l0) best DIREG, allocno GENERAL_REGS
    r255: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a135 (r255,l0) best DREG, allocno GENERAL_REGS
    r254: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a137 (r254,l0) best DIREG, allocno GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a141 (r252,l0) best DIREG, allocno GENERAL_REGS
    r251: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a142 (r251,l0) best AREG, allocno GENERAL_REGS
    r250: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a143 (r250,l0) best AREG, allocno GENERAL_REGS
    r249: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a144 (r249,l0) best DIREG, allocno GENERAL_REGS
    r248: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a147 (r248,l0) best DIREG, allocno GENERAL_REGS
    r247: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a148 (r247,l0) best DIREG, allocno GENERAL_REGS
    r246: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a149 (r246,l0) best DREG, allocno GENERAL_REGS
    r245: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a151 (r245,l0) best DIREG, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a154 (r243,l0) best DIREG, allocno GENERAL_REGS
    r242: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a155 (r242,l0) best AREG, allocno GENERAL_REGS
    r241: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a156 (r241,l0) best AREG, allocno GENERAL_REGS
    r240: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a157 (r240,l0) best DIREG, allocno GENERAL_REGS
    r239: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a160 (r239,l0) best DIREG, allocno GENERAL_REGS
    r238: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a161 (r238,l0) best DIREG, allocno GENERAL_REGS
    r237: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a162 (r237,l0) best DREG, allocno GENERAL_REGS
    r236: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a164 (r236,l0) best DIREG, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a167 (r234,l0) best DIREG, allocno GENERAL_REGS
    r233: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a168 (r233,l0) best AREG, allocno GENERAL_REGS
    r232: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a169 (r232,l0) best AREG, allocno GENERAL_REGS
    r231: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a170 (r231,l0) best DIREG, allocno GENERAL_REGS
    r230: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a173 (r230,l0) best DIREG, allocno GENERAL_REGS
    r229: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a174 (r229,l0) best DIREG, allocno GENERAL_REGS
    r228: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a175 (r228,l0) best DREG, allocno GENERAL_REGS
    r227: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a177 (r227,l0) best DIREG, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a178 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a181 (r225,l0) best DIREG, allocno GENERAL_REGS
    r224: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a182 (r224,l0) best AREG, allocno GENERAL_REGS
    r223: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a183 (r223,l0) best AREG, allocno GENERAL_REGS
    r222: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a184 (r222,l0) best DIREG, allocno GENERAL_REGS
    r221: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a187 (r221,l0) best DIREG, allocno GENERAL_REGS
    r220: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a188 (r220,l0) best DIREG, allocno GENERAL_REGS
    r219: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a189 (r219,l0) best DREG, allocno GENERAL_REGS
    r218: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a191 (r218,l0) best DIREG, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a192 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a195 (r216,l0) best DIREG, allocno GENERAL_REGS
    r215: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a196 (r215,l0) best AREG, allocno GENERAL_REGS
    r214: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a197 (r214,l0) best AREG, allocno GENERAL_REGS
    r213: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a198 (r213,l0) best DIREG, allocno GENERAL_REGS
    r212: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a201 (r212,l0) best DIREG, allocno GENERAL_REGS
    r211: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a202 (r211,l0) best DIREG, allocno GENERAL_REGS
    r210: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a203 (r210,l0) best DREG, allocno GENERAL_REGS
    r209: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a205 (r209,l0) best DIREG, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a206 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a209 (r207,l0) best DIREG, allocno GENERAL_REGS
    r206: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a210 (r206,l0) best AREG, allocno GENERAL_REGS
    r205: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a211 (r205,l0) best AREG, allocno GENERAL_REGS
    r204: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a212 (r204,l0) best DIREG, allocno GENERAL_REGS
    r203: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a215 (r203,l0) best DIREG, allocno GENERAL_REGS
    r202: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a216 (r202,l0) best DIREG, allocno GENERAL_REGS
    r201: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a217 (r201,l0) best DREG, allocno GENERAL_REGS
    r200: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a219 (r200,l0) best DIREG, allocno GENERAL_REGS
    r199: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a221 (r199,l0) best SIREG, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a222 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a223 (r197,l0) best AREG, allocno GENERAL_REGS
    r196: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a224 (r196,l0) best AREG, allocno GENERAL_REGS
    r195: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a225 (r195,l0) best DIREG, allocno GENERAL_REGS
    r194: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a228 (r194,l0) best DIREG, allocno GENERAL_REGS
    r193: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a229 (r193,l0) best DIREG, allocno GENERAL_REGS
    r192: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a230 (r192,l0) best DREG, allocno GENERAL_REGS
    r191: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a232 (r191,l0) best DIREG, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a233 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a236 (r189,l0) best DIREG, allocno GENERAL_REGS
    r188: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a237 (r188,l0) best AREG, allocno GENERAL_REGS
    r187: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a238 (r187,l0) best AREG, allocno GENERAL_REGS
    r186: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a239 (r186,l0) best DIREG, allocno GENERAL_REGS
    r185: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a242 (r185,l0) best DIREG, allocno GENERAL_REGS
    r184: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a243 (r184,l0) best DIREG, allocno GENERAL_REGS
    r183: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a244 (r183,l0) best DREG, allocno GENERAL_REGS
    r182: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a246 (r182,l0) best DIREG, allocno GENERAL_REGS
    r181: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a247 (r181,l0) best AREG, allocno GENERAL_REGS
    r180: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a248 (r180,l0) best DIREG, allocno GENERAL_REGS
    r179: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a251 (r179,l0) best DIREG, allocno GENERAL_REGS
    r178: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a252 (r178,l0) best DIREG, allocno GENERAL_REGS
    r177: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a253 (r177,l0) best DREG, allocno GENERAL_REGS
    r176: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a255 (r176,l0) best DIREG, allocno GENERAL_REGS
    r175: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r175,l0) best AREG, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r173,l0) best DIREG, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r171,l0) best AREG, allocno GENERAL_REGS
    r170: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a13 (r170,l0) best SSE_REGS, allocno INT_SSE_REGS
    r169: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a14 (r169,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r167,l0) best AREG, allocno GENERAL_REGS
    r166: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r166,l0) best AREG, allocno GENERAL_REGS
    r165: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a27 (r165,l0) best SSE_REGS, allocno INT_SSE_REGS
    r164: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a28 (r164,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a34 (r162,l0) best AREG, allocno GENERAL_REGS
    r161: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a38 (r161,l0) best AREG, allocno GENERAL_REGS
    r160: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a41 (r160,l0) best SSE_REGS, allocno INT_SSE_REGS
    r159: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a42 (r159,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a48 (r157,l0) best AREG, allocno GENERAL_REGS
    r156: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a52 (r156,l0) best AREG, allocno GENERAL_REGS
    r155: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a55 (r155,l0) best SSE_REGS, allocno INT_SSE_REGS
    r154: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a56 (r154,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a62 (r152,l0) best AREG, allocno GENERAL_REGS
    r151: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a66 (r151,l0) best AREG, allocno GENERAL_REGS
    r150: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a69 (r150,l0) best SSE_REGS, allocno INT_SSE_REGS
    r149: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a70 (r149,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a76 (r147,l0) best AREG, allocno GENERAL_REGS
    r146: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a80 (r146,l0) best AREG, allocno GENERAL_REGS
    r145: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a83 (r145,l0) best SSE_REGS, allocno INT_SSE_REGS
    r144: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a84 (r144,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a90 (r142,l0) best AREG, allocno GENERAL_REGS
    r141: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a94 (r141,l0) best AREG, allocno GENERAL_REGS
    r140: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a97 (r140,l0) best SSE_REGS, allocno INT_SSE_REGS
    r139: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a98 (r139,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a104 (r137,l0) best AREG, allocno GENERAL_REGS
    r136: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a108 (r136,l0) best AREG, allocno GENERAL_REGS
    r135: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a111 (r135,l0) best SSE_REGS, allocno INT_SSE_REGS
    r134: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a112 (r134,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a118 (r132,l0) best AREG, allocno GENERAL_REGS
    r131: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a122 (r131,l0) best AREG, allocno GENERAL_REGS
    r130: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a125 (r130,l0) best SSE_REGS, allocno INT_SSE_REGS
    r129: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a126 (r129,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a132 (r127,l0) best AREG, allocno GENERAL_REGS
    r126: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a136 (r126,l0) best AREG, allocno GENERAL_REGS
    r125: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a139 (r125,l0) best SSE_REGS, allocno INT_SSE_REGS
    r124: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a140 (r124,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a146 (r122,l0) best AREG, allocno GENERAL_REGS
    r121: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a150 (r121,l0) best AREG, allocno GENERAL_REGS
    r120: preferred SSE_FIRST_REG, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a153 (r120,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a159 (r118,l0) best AREG, allocno GENERAL_REGS
    r117: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a163 (r117,l0) best AREG, allocno GENERAL_REGS
    r116: preferred SSE_FIRST_REG, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a166 (r116,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a171 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a172 (r114,l0) best AREG, allocno GENERAL_REGS
    r113: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a176 (r113,l0) best AREG, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a180 (r111,l0) best AREG, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a185 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a186 (r109,l0) best AREG, allocno GENERAL_REGS
    r108: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a190 (r108,l0) best AREG, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a193 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a194 (r106,l0) best AREG, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a199 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a200 (r104,l0) best AREG, allocno GENERAL_REGS
    r103: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a204 (r103,l0) best AREG, allocno GENERAL_REGS
    r102: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a207 (r102,l0) best SSE_REGS, allocno INT_SSE_REGS
    r101: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a208 (r101,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a213 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a214 (r99,l0) best AREG, allocno GENERAL_REGS
    r98: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a218 (r98,l0) best AREG, allocno GENERAL_REGS
    r97: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a220 (r97,l0) best DIREG, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a226 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a227 (r95,l0) best AREG, allocno GENERAL_REGS
    r94: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a231 (r94,l0) best AREG, allocno GENERAL_REGS
    r93: preferred SSE_REGS, alternative INT_SSE_REGS, allocno INT_SSE_REGS
    a234 (r93,l0) best SSE_REGS, allocno INT_SSE_REGS
    r92: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a235 (r92,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a240 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a241 (r90,l0) best AREG, allocno GENERAL_REGS
    r89: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a245 (r89,l0) best AREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r87,l0) best AREG, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a249 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a250 (r85,l0) best AREG, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a254 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a256 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:4
  a1(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:4
  a2(r339,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a3(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a4(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a5(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a6(r338,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a7(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a8(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a9(r337,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a10(r336,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a11(r335,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a12(r334,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a13(r170,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a14(r169,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a15(r333,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a16(r332,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a17(r331,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a18(r330,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a19(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a20(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a21(r329,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a22(r328,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a23(r327,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a24(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a25(r326,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a26(r325,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a27(r165,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a28(r164,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a29(r324,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a30(r323,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a31(r322,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a32(r321,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a33(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a34(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a35(r320,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a36(r319,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a37(r318,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a38(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a39(r317,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a40(r316,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a41(r160,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a42(r159,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a43(r315,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a44(r314,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a45(r313,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a46(r312,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a47(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a48(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a49(r311,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a50(r310,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a51(r309,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a52(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a53(r308,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a54(r307,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a55(r155,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a56(r154,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a57(r306,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a58(r305,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a59(r304,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a60(r303,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a61(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a62(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a63(r302,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a64(r301,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a65(r300,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a66(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a67(r299,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a68(r298,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a69(r150,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a70(r149,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a71(r297,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a72(r296,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a73(r295,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a74(r294,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a75(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a76(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a77(r293,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a78(r292,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a79(r291,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a80(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a81(r290,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a82(r289,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a83(r145,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a84(r144,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a85(r288,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a86(r287,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a87(r286,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a88(r285,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a89(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a90(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a91(r284,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a92(r283,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a93(r282,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a94(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a95(r281,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a96(r280,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a97(r140,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a98(r139,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a99(r279,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a100(r278,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a101(r277,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a102(r276,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a103(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a104(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a105(r275,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a106(r274,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a107(r273,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a108(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a109(r272,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a110(r271,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a111(r135,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a112(r134,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a113(r270,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a114(r269,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a115(r268,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a116(r267,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a117(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a118(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a119(r266,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a120(r265,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a121(r264,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a122(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a123(r263,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a124(r262,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a125(r130,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a126(r129,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a127(r261,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a128(r260,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a129(r259,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a130(r258,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a131(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a132(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a133(r257,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a134(r256,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a135(r255,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a136(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a137(r254,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a138(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a139(r125,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a140(r124,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a141(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a142(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a143(r250,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a144(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a145(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a146(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a147(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a148(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a149(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a150(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a151(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a152(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a153(r120,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:25 FP_SECOND_REG:25 FLOAT_REGS:25 SSE_FIRST_REG:19 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:27 FP_SECOND_SSE_REGS:27 FLOAT_SSE_REGS:27 FLOAT_INT_REGS:25 INT_SSE_REGS:19 FLOAT_INT_SSE_REGS:27 ALL_REGS:28 MEM:7
  a154(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a155(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a156(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a157(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a158(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a159(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a160(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a161(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a162(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a163(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a164(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a165(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a166(r116,l0) costs: AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 LEGACY_REGS:2 CLOBBERED_REGS:2 FP_TOP_REG:25 FP_SECOND_REG:25 FLOAT_REGS:25 SSE_FIRST_REG:19 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:27 FP_SECOND_SSE_REGS:27 FLOAT_SSE_REGS:27 FLOAT_INT_REGS:25 INT_SSE_REGS:19 FLOAT_INT_SSE_REGS:27 ALL_REGS:28 MEM:7
  a167(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a168(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a169(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a170(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a171(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a172(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a173(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a174(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a175(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a176(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a177(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a178(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a179(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a180(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 MEM:4
  a181(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a182(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a183(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a184(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a185(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a186(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a187(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a188(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a189(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a190(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a191(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a192(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a193(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a194(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 MEM:4
  a195(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a196(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a197(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a198(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a199(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a200(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a201(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a202(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a203(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a204(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a205(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a206(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a207(r102,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a208(r101,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a209(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a210(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a211(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a212(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a213(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a214(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a215(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a216(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a217(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a218(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a219(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a220(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:6
  a221(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a222(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a223(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a224(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a225(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a226(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a227(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a228(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a229(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a230(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a231(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a232(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a233(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:8
  a234(r93,l0) costs: AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:10 INDEX_REGS:10 GENERAL_REGS:10 LEGACY_REGS:10 CLOBBERED_REGS:10 FP_TOP_REG:40 FP_SECOND_REG:40 FLOAT_REGS:40 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 MMX_REGS:32 FP_TOP_SSE_REGS:40 FP_SECOND_SSE_REGS:40 FLOAT_SSE_REGS:40 FLOAT_INT_REGS:40 INT_SSE_REGS:24 FLOAT_INT_SSE_REGS:40 ALL_REGS:40 MEM:14
  a235(r92,l0) costs: AREG:13 DREG:13 CREG:13 BREG:13 SIREG:13 DIREG:13 AD_REGS:13 Q_REGS:13 NON_Q_REGS:13 INDEX_REGS:13 GENERAL_REGS:13 LEGACY_REGS:13 CLOBBERED_REGS:13 FP_TOP_REG:27 FP_SECOND_REG:27 FLOAT_REGS:27 SSE_FIRST_REG:0 SSE_REGS:0 ALL_SSE_REGS:0 FP_TOP_SSE_REGS:29 FP_SECOND_SSE_REGS:29 FLOAT_SSE_REGS:29 FLOAT_INT_REGS:27 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:29 ALL_REGS:40 MEM:8
  a236(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a237(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a238(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a239(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a240(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a241(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a242(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a243(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a244(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a245(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a246(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a247(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a248(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a249(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 FLOAT_INT_REGS:416 INT_SSE_REGS:416 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a250(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a251(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a252(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:21 SSE_REGS:21 ALL_SSE_REGS:21 MMX_REGS:26 FP_TOP_SSE_REGS:416 FP_SECOND_SSE_REGS:416 FLOAT_SSE_REGS:416 FLOAT_INT_REGS:416 INT_SSE_REGS:22 FLOAT_INT_SSE_REGS:416 ALL_REGS:416 MEM:7
  a253(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a254(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5
  a255(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:20 SSE_REGS:20 ALL_SSE_REGS:20 MMX_REGS:25 FP_TOP_SSE_REGS:312 FP_SECOND_SSE_REGS:312 FLOAT_SSE_REGS:312 FLOAT_INT_REGS:312 INT_SSE_REGS:21 FLOAT_INT_SSE_REGS:312 ALL_REGS:312 MEM:7
  a256(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 LEGACY_REGS:0 CLOBBERED_REGS:0 SSE_FIRST_REG:16 SSE_REGS:16 ALL_SSE_REGS:16 MMX_REGS:21 FP_TOP_SSE_REGS:308 FP_SECOND_SSE_REGS:308 FLOAT_SSE_REGS:308 FLOAT_INT_REGS:308 INT_SSE_REGS:17 FLOAT_INT_SSE_REGS:308 ALL_REGS:308 MEM:5

   Insn 1017(l0): point = 0
   Insn 1014(l0): point = 3
   Insn 1013(l0): point = 6
   Insn 1012(l0): point = 8
   Insn 1011(l0): point = 10
   Insn 1007(l0): point = 12
   Insn 1004(l0): point = 14
   Insn 1001(l0): point = 17
   Insn 1000(l0): point = 19
   Insn 999(l0): point = 21
   Insn 998(l0): point = 23
   Insn 997(l0): point = 25
   Insn 996(l0): point = 27
   Insn 995(l0): point = 29
   Insn 994(l0): point = 31
   Insn 992(l0): point = 34
   Insn 991(l0): point = 36
   Insn 977(l0): point = 39
   Insn 976(l0): point = 41
   Insn 975(l0): point = 43
   Insn 974(l0): point = 45
   Insn 933(l0): point = 48
   Insn 932(l0): point = 50
   Insn 931(l0): point = 52
   Insn 930(l0): point = 54
   Insn 880(l0): point = 57
   Insn 879(l0): point = 59
   Insn 878(l0): point = 61
   Insn 877(l0): point = 63
   Insn 827(l0): point = 66
   Insn 826(l0): point = 68
   Insn 825(l0): point = 70
   Insn 824(l0): point = 72
   Insn 774(l0): point = 75
   Insn 773(l0): point = 77
   Insn 772(l0): point = 79
   Insn 771(l0): point = 81
   Insn 721(l0): point = 84
   Insn 720(l0): point = 86
   Insn 719(l0): point = 88
   Insn 718(l0): point = 90
   Insn 668(l0): point = 93
   Insn 667(l0): point = 95
   Insn 666(l0): point = 97
   Insn 665(l0): point = 99
   Insn 615(l0): point = 102
   Insn 614(l0): point = 104
   Insn 613(l0): point = 106
   Insn 612(l0): point = 108
   Insn 562(l0): point = 111
   Insn 561(l0): point = 113
   Insn 560(l0): point = 115
   Insn 559(l0): point = 117
   Insn 509(l0): point = 120
   Insn 508(l0): point = 122
   Insn 507(l0): point = 124
   Insn 506(l0): point = 126
   Insn 456(l0): point = 129
   Insn 455(l0): point = 131
   Insn 454(l0): point = 133
   Insn 453(l0): point = 135
   Insn 404(l0): point = 138
   Insn 403(l0): point = 140
   Insn 402(l0): point = 142
   Insn 401(l0): point = 144
   Insn 352(l0): point = 147
   Insn 351(l0): point = 149
   Insn 350(l0): point = 151
   Insn 349(l0): point = 153
   Insn 298(l0): point = 156
   Insn 297(l0): point = 158
   Insn 296(l0): point = 160
   Insn 295(l0): point = 162
   Insn 244(l0): point = 165
   Insn 243(l0): point = 167
   Insn 242(l0): point = 169
   Insn 241(l0): point = 171
   Insn 191(l0): point = 174
   Insn 190(l0): point = 176
   Insn 189(l0): point = 178
   Insn 188(l0): point = 180
   Insn 140(l0): point = 183
   Insn 139(l0): point = 185
   Insn 138(l0): point = 187
   Insn 137(l0): point = 189
   Insn 87(l0): point = 192
   Insn 86(l0): point = 194
   Insn 85(l0): point = 196
   Insn 84(l0): point = 198
   Insn 67(l0): point = 201
   Insn 66(l0): point = 203
   Insn 65(l0): point = 205
   Insn 64(l0): point = 207
   Insn 63(l0): point = 209
   Insn 62(l0): point = 211
   Insn 61(l0): point = 213
   Insn 60(l0): point = 215
   Insn 59(l0): point = 217
   Insn 58(l0): point = 219
   Insn 57(l0): point = 221
   Insn 56(l0): point = 223
   Insn 55(l0): point = 225
   Insn 54(l0): point = 227
   Insn 989(l0): point = 230
   Insn 988(l0): point = 232
   Insn 986(l0): point = 234
   Insn 985(l0): point = 236
   Insn 984(l0): point = 238
   Insn 983(l0): point = 240
   Insn 982(l0): point = 242
   Insn 981(l0): point = 244
   Insn 972(l0): point = 247
   Insn 971(l0): point = 249
   Insn 970(l0): point = 251
   Insn 969(l0): point = 253
   Insn 968(l0): point = 255
   Insn 967(l0): point = 257
   Insn 966(l0): point = 259
   Insn 965(l0): point = 261
   Insn 963(l0): point = 264
   Insn 962(l0): point = 266
   Insn 961(l0): point = 268
   Insn 960(l0): point = 270
   Insn 959(l0): point = 272
   Insn 958(l0): point = 274
   Insn 955(l0): point = 277
   Insn 954(l0): point = 279
   Insn 953(l0): point = 281
   Insn 952(l0): point = 283
   Insn 951(l0): point = 285
   Insn 950(l0): point = 287
   Insn 949(l0): point = 289
   Insn 948(l0): point = 291
   Insn 947(l0): point = 293
   Insn 946(l0): point = 295
   Insn 945(l0): point = 297
   Insn 944(l0): point = 299
   Insn 943(l0): point = 301
   Insn 942(l0): point = 303
   Insn 941(l0): point = 305
   Insn 940(l0): point = 307
   Insn 939(l0): point = 309
   Insn 938(l0): point = 311
   Insn 937(l0): point = 313
   Insn 928(l0): point = 316
   Insn 927(l0): point = 318
   Insn 926(l0): point = 320
   Insn 925(l0): point = 322
   Insn 924(l0): point = 324
   Insn 923(l0): point = 326
   Insn 922(l0): point = 328
   Insn 921(l0): point = 330
   Insn 920(l0): point = 332
   Insn 919(l0): point = 334
   Insn 918(l0): point = 336
   Insn 917(l0): point = 338
   Insn 916(l0): point = 340
   Insn 915(l0): point = 342
   Insn 1023(l0): point = 345
   Insn 109(l0): point = 347
   Insn 108(l0): point = 349
   Insn 107(l0): point = 351
   Insn 106(l0): point = 353
   Insn 105(l0): point = 355
   Insn 104(l0): point = 357
   Insn 103(l0): point = 359
   Insn 102(l0): point = 361
   Insn 101(l0): point = 363
   Insn 100(l0): point = 365
   Insn 99(l0): point = 367
   Insn 98(l0): point = 369
   Insn 97(l0): point = 371
   Insn 96(l0): point = 373
   Insn 95(l0): point = 375
   Insn 94(l0): point = 377
   Insn 93(l0): point = 379
   Insn 92(l0): point = 381
   Insn 91(l0): point = 383
   Insn 82(l0): point = 386
   Insn 81(l0): point = 388
   Insn 80(l0): point = 390
   Insn 79(l0): point = 392
   Insn 78(l0): point = 394
   Insn 77(l0): point = 396
   Insn 76(l0): point = 398
   Insn 75(l0): point = 400
   Insn 74(l0): point = 402
   Insn 73(l0): point = 404
   Insn 72(l0): point = 406
   Insn 71(l0): point = 408
   Insn 70(l0): point = 410
   Insn 69(l0): point = 412
   Insn 1025(l0): point = 415
   Insn 160(l0): point = 417
   Insn 159(l0): point = 419
   Insn 158(l0): point = 421
   Insn 157(l0): point = 423
   Insn 156(l0): point = 425
   Insn 155(l0): point = 427
   Insn 154(l0): point = 429
   Insn 153(l0): point = 431
   Insn 152(l0): point = 433
   Insn 151(l0): point = 435
   Insn 150(l0): point = 437
   Insn 149(l0): point = 439
   Insn 148(l0): point = 441
   Insn 147(l0): point = 443
   Insn 146(l0): point = 445
   Insn 145(l0): point = 447
   Insn 144(l0): point = 449
   Insn 135(l0): point = 452
   Insn 134(l0): point = 454
   Insn 133(l0): point = 456
   Insn 132(l0): point = 458
   Insn 131(l0): point = 460
   Insn 130(l0): point = 462
   Insn 129(l0): point = 464
   Insn 128(l0): point = 466
   Insn 127(l0): point = 468
   Insn 126(l0): point = 470
   Insn 125(l0): point = 472
   Insn 124(l0): point = 474
   Insn 123(l0): point = 476
   Insn 122(l0): point = 478
   Insn 1027(l0): point = 481
   Insn 213(l0): point = 483
   Insn 212(l0): point = 485
   Insn 211(l0): point = 487
   Insn 210(l0): point = 489
   Insn 209(l0): point = 491
   Insn 208(l0): point = 493
   Insn 207(l0): point = 495
   Insn 206(l0): point = 497
   Insn 205(l0): point = 499
   Insn 204(l0): point = 501
   Insn 203(l0): point = 503
   Insn 202(l0): point = 505
   Insn 201(l0): point = 507
   Insn 200(l0): point = 509
   Insn 199(l0): point = 511
   Insn 198(l0): point = 513
   Insn 197(l0): point = 515
   Insn 196(l0): point = 517
   Insn 195(l0): point = 519
   Insn 186(l0): point = 522
   Insn 185(l0): point = 524
   Insn 184(l0): point = 526
   Insn 183(l0): point = 528
   Insn 182(l0): point = 530
   Insn 181(l0): point = 532
   Insn 180(l0): point = 534
   Insn 179(l0): point = 536
   Insn 178(l0): point = 538
   Insn 177(l0): point = 540
   Insn 176(l0): point = 542
   Insn 175(l0): point = 544
   Insn 174(l0): point = 546
   Insn 173(l0): point = 548
   Insn 1029(l0): point = 551
   Insn 267(l0): point = 553
   Insn 266(l0): point = 555
   Insn 265(l0): point = 557
   Insn 264(l0): point = 559
   Insn 263(l0): point = 561
   Insn 262(l0): point = 563
   Insn 261(l0): point = 565
   Insn 260(l0): point = 567
   Insn 259(l0): point = 569
   Insn 258(l0): point = 571
   Insn 257(l0): point = 573
   Insn 256(l0): point = 575
   Insn 255(l0): point = 577
   Insn 254(l0): point = 579
   Insn 253(l0): point = 581
   Insn 252(l0): point = 583
   Insn 251(l0): point = 585
   Insn 250(l0): point = 587
   Insn 249(l0): point = 589
   Insn 248(l0): point = 591
   Insn 239(l0): point = 594
   Insn 238(l0): point = 596
   Insn 237(l0): point = 598
   Insn 236(l0): point = 600
   Insn 235(l0): point = 602
   Insn 234(l0): point = 604
   Insn 233(l0): point = 606
   Insn 232(l0): point = 608
   Insn 231(l0): point = 610
   Insn 230(l0): point = 612
   Insn 229(l0): point = 614
   Insn 228(l0): point = 616
   Insn 227(l0): point = 618
   Insn 226(l0): point = 620
   Insn 1031(l0): point = 623
   Insn 321(l0): point = 625
   Insn 320(l0): point = 627
   Insn 319(l0): point = 629
   Insn 318(l0): point = 631
   Insn 317(l0): point = 633
   Insn 316(l0): point = 635
   Insn 315(l0): point = 637
   Insn 314(l0): point = 639
   Insn 313(l0): point = 641
   Insn 312(l0): point = 643
   Insn 311(l0): point = 645
   Insn 310(l0): point = 647
   Insn 309(l0): point = 649
   Insn 308(l0): point = 651
   Insn 307(l0): point = 653
   Insn 306(l0): point = 655
   Insn 305(l0): point = 657
   Insn 304(l0): point = 659
   Insn 303(l0): point = 661
   Insn 302(l0): point = 663
   Insn 293(l0): point = 666
   Insn 292(l0): point = 668
   Insn 291(l0): point = 670
   Insn 290(l0): point = 672
   Insn 289(l0): point = 674
   Insn 288(l0): point = 676
   Insn 287(l0): point = 678
   Insn 286(l0): point = 680
   Insn 285(l0): point = 682
   Insn 284(l0): point = 684
   Insn 283(l0): point = 686
   Insn 282(l0): point = 688
   Insn 281(l0): point = 690
   Insn 280(l0): point = 692
   Insn 1033(l0): point = 695
   Insn 373(l0): point = 697
   Insn 372(l0): point = 699
   Insn 371(l0): point = 701
   Insn 370(l0): point = 703
   Insn 369(l0): point = 705
   Insn 368(l0): point = 707
   Insn 367(l0): point = 709
   Insn 366(l0): point = 711
   Insn 365(l0): point = 713
   Insn 364(l0): point = 715
   Insn 363(l0): point = 717
   Insn 362(l0): point = 719
   Insn 361(l0): point = 721
   Insn 360(l0): point = 723
   Insn 359(l0): point = 725
   Insn 358(l0): point = 727
   Insn 357(l0): point = 729
   Insn 356(l0): point = 731
   Insn 347(l0): point = 734
   Insn 346(l0): point = 736
   Insn 345(l0): point = 738
   Insn 344(l0): point = 740
   Insn 343(l0): point = 742
   Insn 342(l0): point = 744
   Insn 341(l0): point = 746
   Insn 340(l0): point = 748
   Insn 339(l0): point = 750
   Insn 338(l0): point = 752
   Insn 337(l0): point = 754
   Insn 336(l0): point = 756
   Insn 335(l0): point = 758
   Insn 334(l0): point = 760
   Insn 1035(l0): point = 763
   Insn 425(l0): point = 765
   Insn 424(l0): point = 767
   Insn 423(l0): point = 769
   Insn 422(l0): point = 771
   Insn 421(l0): point = 773
   Insn 420(l0): point = 775
   Insn 419(l0): point = 777
   Insn 418(l0): point = 779
   Insn 417(l0): point = 781
   Insn 416(l0): point = 783
   Insn 415(l0): point = 785
   Insn 414(l0): point = 787
   Insn 413(l0): point = 789
   Insn 412(l0): point = 791
   Insn 411(l0): point = 793
   Insn 410(l0): point = 795
   Insn 409(l0): point = 797
   Insn 408(l0): point = 799
   Insn 399(l0): point = 802
   Insn 398(l0): point = 804
   Insn 397(l0): point = 806
   Insn 396(l0): point = 808
   Insn 395(l0): point = 810
   Insn 394(l0): point = 812
   Insn 393(l0): point = 814
   Insn 392(l0): point = 816
   Insn 391(l0): point = 818
   Insn 390(l0): point = 820
   Insn 389(l0): point = 822
   Insn 388(l0): point = 824
   Insn 387(l0): point = 826
   Insn 386(l0): point = 828
   Insn 1037(l0): point = 831
   Insn 478(l0): point = 833
   Insn 477(l0): point = 835
   Insn 476(l0): point = 837
   Insn 475(l0): point = 839
   Insn 474(l0): point = 841
   Insn 473(l0): point = 843
   Insn 472(l0): point = 845
   Insn 471(l0): point = 847
   Insn 470(l0): point = 849
   Insn 469(l0): point = 851
   Insn 468(l0): point = 853
   Insn 467(l0): point = 855
   Insn 466(l0): point = 857
   Insn 465(l0): point = 859
   Insn 464(l0): point = 861
   Insn 463(l0): point = 863
   Insn 462(l0): point = 865
   Insn 461(l0): point = 867
   Insn 460(l0): point = 869
   Insn 451(l0): point = 872
   Insn 450(l0): point = 874
   Insn 449(l0): point = 876
   Insn 448(l0): point = 878
   Insn 447(l0): point = 880
   Insn 446(l0): point = 882
   Insn 445(l0): point = 884
   Insn 444(l0): point = 886
   Insn 443(l0): point = 888
   Insn 442(l0): point = 890
   Insn 441(l0): point = 892
   Insn 440(l0): point = 894
   Insn 439(l0): point = 896
   Insn 438(l0): point = 898
   Insn 1039(l0): point = 901
   Insn 531(l0): point = 903
   Insn 530(l0): point = 905
   Insn 529(l0): point = 907
   Insn 528(l0): point = 909
   Insn 527(l0): point = 911
   Insn 526(l0): point = 913
   Insn 525(l0): point = 915
   Insn 524(l0): point = 917
   Insn 523(l0): point = 919
   Insn 522(l0): point = 921
   Insn 521(l0): point = 923
   Insn 520(l0): point = 925
   Insn 519(l0): point = 927
   Insn 518(l0): point = 929
   Insn 517(l0): point = 931
   Insn 516(l0): point = 933
   Insn 515(l0): point = 935
   Insn 514(l0): point = 937
   Insn 513(l0): point = 939
   Insn 504(l0): point = 942
   Insn 503(l0): point = 944
   Insn 502(l0): point = 946
   Insn 501(l0): point = 948
   Insn 500(l0): point = 950
   Insn 499(l0): point = 952
   Insn 498(l0): point = 954
   Insn 497(l0): point = 956
   Insn 496(l0): point = 958
   Insn 495(l0): point = 960
   Insn 494(l0): point = 962
   Insn 493(l0): point = 964
   Insn 492(l0): point = 966
   Insn 491(l0): point = 968
   Insn 1041(l0): point = 971
   Insn 584(l0): point = 973
   Insn 583(l0): point = 975
   Insn 582(l0): point = 977
   Insn 581(l0): point = 979
   Insn 580(l0): point = 981
   Insn 579(l0): point = 983
   Insn 578(l0): point = 985
   Insn 577(l0): point = 987
   Insn 576(l0): point = 989
   Insn 575(l0): point = 991
   Insn 574(l0): point = 993
   Insn 573(l0): point = 995
   Insn 572(l0): point = 997
   Insn 571(l0): point = 999
   Insn 570(l0): point = 1001
   Insn 569(l0): point = 1003
   Insn 568(l0): point = 1005
   Insn 567(l0): point = 1007
   Insn 566(l0): point = 1009
   Insn 557(l0): point = 1012
   Insn 556(l0): point = 1014
   Insn 555(l0): point = 1016
   Insn 554(l0): point = 1018
   Insn 553(l0): point = 1020
   Insn 552(l0): point = 1022
   Insn 551(l0): point = 1024
   Insn 550(l0): point = 1026
   Insn 549(l0): point = 1028
   Insn 548(l0): point = 1030
   Insn 547(l0): point = 1032
   Insn 546(l0): point = 1034
   Insn 545(l0): point = 1036
   Insn 544(l0): point = 1038
   Insn 1043(l0): point = 1041
   Insn 637(l0): point = 1043
   Insn 636(l0): point = 1045
   Insn 635(l0): point = 1047
   Insn 634(l0): point = 1049
   Insn 633(l0): point = 1051
   Insn 632(l0): point = 1053
   Insn 631(l0): point = 1055
   Insn 630(l0): point = 1057
   Insn 629(l0): point = 1059
   Insn 628(l0): point = 1061
   Insn 627(l0): point = 1063
   Insn 626(l0): point = 1065
   Insn 625(l0): point = 1067
   Insn 624(l0): point = 1069
   Insn 623(l0): point = 1071
   Insn 622(l0): point = 1073
   Insn 621(l0): point = 1075
   Insn 620(l0): point = 1077
   Insn 619(l0): point = 1079
   Insn 610(l0): point = 1082
   Insn 609(l0): point = 1084
   Insn 608(l0): point = 1086
   Insn 607(l0): point = 1088
   Insn 606(l0): point = 1090
   Insn 605(l0): point = 1092
   Insn 604(l0): point = 1094
   Insn 603(l0): point = 1096
   Insn 602(l0): point = 1098
   Insn 601(l0): point = 1100
   Insn 600(l0): point = 1102
   Insn 599(l0): point = 1104
   Insn 598(l0): point = 1106
   Insn 597(l0): point = 1108
   Insn 1045(l0): point = 1111
   Insn 690(l0): point = 1113
   Insn 689(l0): point = 1115
   Insn 688(l0): point = 1117
   Insn 687(l0): point = 1119
   Insn 686(l0): point = 1121
   Insn 685(l0): point = 1123
   Insn 684(l0): point = 1125
   Insn 683(l0): point = 1127
   Insn 682(l0): point = 1129
   Insn 681(l0): point = 1131
   Insn 680(l0): point = 1133
   Insn 679(l0): point = 1135
   Insn 678(l0): point = 1137
   Insn 677(l0): point = 1139
   Insn 676(l0): point = 1141
   Insn 675(l0): point = 1143
   Insn 674(l0): point = 1145
   Insn 673(l0): point = 1147
   Insn 672(l0): point = 1149
   Insn 663(l0): point = 1152
   Insn 662(l0): point = 1154
   Insn 661(l0): point = 1156
   Insn 660(l0): point = 1158
   Insn 659(l0): point = 1160
   Insn 658(l0): point = 1162
   Insn 657(l0): point = 1164
   Insn 656(l0): point = 1166
   Insn 655(l0): point = 1168
   Insn 654(l0): point = 1170
   Insn 653(l0): point = 1172
   Insn 652(l0): point = 1174
   Insn 651(l0): point = 1176
   Insn 650(l0): point = 1178
   Insn 1047(l0): point = 1181
   Insn 743(l0): point = 1183
   Insn 742(l0): point = 1185
   Insn 741(l0): point = 1187
   Insn 740(l0): point = 1189
   Insn 739(l0): point = 1191
   Insn 738(l0): point = 1193
   Insn 737(l0): point = 1195
   Insn 736(l0): point = 1197
   Insn 735(l0): point = 1199
   Insn 734(l0): point = 1201
   Insn 733(l0): point = 1203
   Insn 732(l0): point = 1205
   Insn 731(l0): point = 1207
   Insn 730(l0): point = 1209
   Insn 729(l0): point = 1211
   Insn 728(l0): point = 1213
   Insn 727(l0): point = 1215
   Insn 726(l0): point = 1217
   Insn 725(l0): point = 1219
   Insn 716(l0): point = 1222
   Insn 715(l0): point = 1224
   Insn 714(l0): point = 1226
   Insn 713(l0): point = 1228
   Insn 712(l0): point = 1230
   Insn 711(l0): point = 1232
   Insn 710(l0): point = 1234
   Insn 709(l0): point = 1236
   Insn 708(l0): point = 1238
   Insn 707(l0): point = 1240
   Insn 706(l0): point = 1242
   Insn 705(l0): point = 1244
   Insn 704(l0): point = 1246
   Insn 703(l0): point = 1248
   Insn 1049(l0): point = 1251
   Insn 796(l0): point = 1253
   Insn 795(l0): point = 1255
   Insn 794(l0): point = 1257
   Insn 793(l0): point = 1259
   Insn 792(l0): point = 1261
   Insn 791(l0): point = 1263
   Insn 790(l0): point = 1265
   Insn 789(l0): point = 1267
   Insn 788(l0): point = 1269
   Insn 787(l0): point = 1271
   Insn 786(l0): point = 1273
   Insn 785(l0): point = 1275
   Insn 784(l0): point = 1277
   Insn 783(l0): point = 1279
   Insn 782(l0): point = 1281
   Insn 781(l0): point = 1283
   Insn 780(l0): point = 1285
   Insn 779(l0): point = 1287
   Insn 778(l0): point = 1289
   Insn 769(l0): point = 1292
   Insn 768(l0): point = 1294
   Insn 767(l0): point = 1296
   Insn 766(l0): point = 1298
   Insn 765(l0): point = 1300
   Insn 764(l0): point = 1302
   Insn 763(l0): point = 1304
   Insn 762(l0): point = 1306
   Insn 761(l0): point = 1308
   Insn 760(l0): point = 1310
   Insn 759(l0): point = 1312
   Insn 758(l0): point = 1314
   Insn 757(l0): point = 1316
   Insn 756(l0): point = 1318
   Insn 1051(l0): point = 1321
   Insn 849(l0): point = 1323
   Insn 848(l0): point = 1325
   Insn 847(l0): point = 1327
   Insn 846(l0): point = 1329
   Insn 845(l0): point = 1331
   Insn 844(l0): point = 1333
   Insn 843(l0): point = 1335
   Insn 842(l0): point = 1337
   Insn 841(l0): point = 1339
   Insn 840(l0): point = 1341
   Insn 839(l0): point = 1343
   Insn 838(l0): point = 1345
   Insn 837(l0): point = 1347
   Insn 836(l0): point = 1349
   Insn 835(l0): point = 1351
   Insn 834(l0): point = 1353
   Insn 833(l0): point = 1355
   Insn 832(l0): point = 1357
   Insn 831(l0): point = 1359
   Insn 822(l0): point = 1362
   Insn 821(l0): point = 1364
   Insn 820(l0): point = 1366
   Insn 819(l0): point = 1368
   Insn 818(l0): point = 1370
   Insn 817(l0): point = 1372
   Insn 816(l0): point = 1374
   Insn 815(l0): point = 1376
   Insn 814(l0): point = 1378
   Insn 813(l0): point = 1380
   Insn 812(l0): point = 1382
   Insn 811(l0): point = 1384
   Insn 810(l0): point = 1386
   Insn 809(l0): point = 1388
   Insn 913(l0): point = 1391
   Insn 912(l0): point = 1393
   Insn 911(l0): point = 1395
   Insn 910(l0): point = 1397
   Insn 909(l0): point = 1399
   Insn 908(l0): point = 1401
   Insn 907(l0): point = 1403
   Insn 1053(l0): point = 1406
   Insn 902(l0): point = 1408
   Insn 901(l0): point = 1410
   Insn 900(l0): point = 1412
   Insn 899(l0): point = 1414
   Insn 898(l0): point = 1416
   Insn 897(l0): point = 1418
   Insn 896(l0): point = 1420
   Insn 895(l0): point = 1422
   Insn 894(l0): point = 1424
   Insn 893(l0): point = 1426
   Insn 892(l0): point = 1428
   Insn 891(l0): point = 1430
   Insn 890(l0): point = 1432
   Insn 889(l0): point = 1434
   Insn 888(l0): point = 1436
   Insn 887(l0): point = 1438
   Insn 886(l0): point = 1440
   Insn 885(l0): point = 1442
   Insn 884(l0): point = 1444
   Insn 875(l0): point = 1447
   Insn 874(l0): point = 1449
   Insn 873(l0): point = 1451
   Insn 872(l0): point = 1453
   Insn 871(l0): point = 1455
   Insn 870(l0): point = 1457
   Insn 869(l0): point = 1459
   Insn 868(l0): point = 1461
   Insn 867(l0): point = 1463
   Insn 866(l0): point = 1465
   Insn 865(l0): point = 1467
   Insn 864(l0): point = 1469
   Insn 863(l0): point = 1471
   Insn 862(l0): point = 1473
   Insn 860(l0): point = 1476
   Insn 859(l0): point = 1478
   Insn 858(l0): point = 1480
   Insn 857(l0): point = 1482
   Insn 856(l0): point = 1484
   Insn 855(l0): point = 1486
   Insn 854(l0): point = 1488
   Insn 807(l0): point = 1491
   Insn 806(l0): point = 1493
   Insn 805(l0): point = 1495
   Insn 804(l0): point = 1497
   Insn 803(l0): point = 1499
   Insn 802(l0): point = 1501
   Insn 801(l0): point = 1503
   Insn 754(l0): point = 1506
   Insn 753(l0): point = 1508
   Insn 752(l0): point = 1510
   Insn 751(l0): point = 1512
   Insn 750(l0): point = 1514
   Insn 749(l0): point = 1516
   Insn 748(l0): point = 1518
   Insn 701(l0): point = 1521
   Insn 700(l0): point = 1523
   Insn 699(l0): point = 1525
   Insn 698(l0): point = 1527
   Insn 697(l0): point = 1529
   Insn 696(l0): point = 1531
   Insn 695(l0): point = 1533
   Insn 648(l0): point = 1536
   Insn 647(l0): point = 1538
   Insn 646(l0): point = 1540
   Insn 645(l0): point = 1542
   Insn 644(l0): point = 1544
   Insn 643(l0): point = 1546
   Insn 642(l0): point = 1548
   Insn 595(l0): point = 1551
   Insn 594(l0): point = 1553
   Insn 593(l0): point = 1555
   Insn 592(l0): point = 1557
   Insn 591(l0): point = 1559
   Insn 590(l0): point = 1561
   Insn 589(l0): point = 1563
   Insn 542(l0): point = 1566
   Insn 541(l0): point = 1568
   Insn 540(l0): point = 1570
   Insn 539(l0): point = 1572
   Insn 538(l0): point = 1574
   Insn 537(l0): point = 1576
   Insn 536(l0): point = 1578
   Insn 489(l0): point = 1581
   Insn 488(l0): point = 1583
   Insn 487(l0): point = 1585
   Insn 486(l0): point = 1587
   Insn 485(l0): point = 1589
   Insn 484(l0): point = 1591
   Insn 483(l0): point = 1593
   Insn 436(l0): point = 1596
   Insn 435(l0): point = 1598
   Insn 434(l0): point = 1600
   Insn 433(l0): point = 1602
   Insn 432(l0): point = 1604
   Insn 431(l0): point = 1606
   Insn 430(l0): point = 1608
   Insn 384(l0): point = 1611
   Insn 383(l0): point = 1613
   Insn 382(l0): point = 1615
   Insn 381(l0): point = 1617
   Insn 380(l0): point = 1619
   Insn 379(l0): point = 1621
   Insn 378(l0): point = 1623
   Insn 332(l0): point = 1626
   Insn 331(l0): point = 1628
   Insn 330(l0): point = 1630
   Insn 329(l0): point = 1632
   Insn 328(l0): point = 1634
   Insn 327(l0): point = 1636
   Insn 326(l0): point = 1638
   Insn 278(l0): point = 1641
   Insn 277(l0): point = 1643
   Insn 276(l0): point = 1645
   Insn 275(l0): point = 1647
   Insn 274(l0): point = 1649
   Insn 273(l0): point = 1651
   Insn 272(l0): point = 1653
   Insn 224(l0): point = 1656
   Insn 223(l0): point = 1658
   Insn 222(l0): point = 1660
   Insn 221(l0): point = 1662
   Insn 220(l0): point = 1664
   Insn 219(l0): point = 1666
   Insn 218(l0): point = 1668
   Insn 171(l0): point = 1671
   Insn 170(l0): point = 1673
   Insn 169(l0): point = 1675
   Insn 168(l0): point = 1677
   Insn 167(l0): point = 1679
   Insn 166(l0): point = 1681
   Insn 165(l0): point = 1683
   Insn 120(l0): point = 1686
   Insn 119(l0): point = 1688
   Insn 118(l0): point = 1690
   Insn 117(l0): point = 1692
   Insn 116(l0): point = 1694
   Insn 115(l0): point = 1696
   Insn 114(l0): point = 1698
   Insn 1021(l0): point = 1701
   Insn 47(l0): point = 1704
   Insn 46(l0): point = 1706
   Insn 45(l0): point = 1708
   Insn 44(l0): point = 1710
   Insn 42(l0): point = 1713
   Insn 41(l0): point = 1715
   Insn 40(l0): point = 1717
   Insn 39(l0): point = 1719
   Insn 38(l0): point = 1721
   Insn 37(l0): point = 1723
   Insn 36(l0): point = 1725
   Insn 35(l0): point = 1727
   Insn 34(l0): point = 1729
   Insn 33(l0): point = 1731
   Insn 32(l0): point = 1733
   Insn 31(l0): point = 1735
   Insn 30(l0): point = 1737
   Insn 29(l0): point = 1739
   Insn 25(l0): point = 1742
   Insn 24(l0): point = 1744
   Insn 23(l0): point = 1746
   Insn 22(l0): point = 1748
   Insn 20(l0): point = 1751
   Insn 19(l0): point = 1753
   Insn 18(l0): point = 1755
   Insn 17(l0): point = 1757
   Insn 16(l0): point = 1759
   Insn 15(l0): point = 1761
   Insn 14(l0): point = 1763
   Insn 13(l0): point = 1765
   Insn 12(l0): point = 1767
   Insn 11(l0): point = 1769
   Insn 10(l0): point = 1771
   Insn 9(l0): point = 1773
   Insn 8(l0): point = 1775
   Insn 5(l0): point = 1777
   Insn 3(l0): point = 1779
   Insn 2(l0): point = 1781
 a0(r175): [11..12]
 a1(r174): [13..14]
 a2(r339): [20..21]
 a3(r173): [26..27]
 a4(r88): [233..234]
 a5(r87): [237..238]
 a6(r338): [243..244]
 a7(r172): [250..251]
 a8(r171): [254..255]
 a9(r337): [260..261]
 a10(r336): [267..272]
 a11(r335): [271..274]
 a12(r334): [278..279]
 a13(r170): [278..281]
 a14(r169): [282..283]
 a15(r333): [288..291]
 a16(r332): [294..295]
 a17(r331): [304..305]
 a18(r330): [310..313]
 a19(r168): [319..320]
 a20(r167): [323..324]
 a21(r329): [329..330]
 a22(r328): [335..340]
 a23(r327): [339..342]
 a24(r166): [1394..1395]
 a25(r326): [1400..1403]
 a26(r325): [1409..1410]
 a27(r165): [1409..1412]
 a28(r164): [1413..1414]
 a29(r324): [1419..1422]
 a30(r323): [1425..1426]
 a31(r322): [1435..1436]
 a32(r321): [1441..1444]
 a33(r163): [1450..1451]
 a34(r162): [1454..1455]
 a35(r320): [1460..1461]
 a36(r319): [1466..1471]
 a37(r318): [1470..1473]
 a38(r161): [1479..1480]
 a39(r317): [1485..1488]
 a40(r316): [1324..1325]
 a41(r160): [1324..1327]
 a42(r159): [1328..1329]
 a43(r315): [1334..1337]
 a44(r314): [1340..1341]
 a45(r313): [1350..1351]
 a46(r312): [1356..1359]
 a47(r158): [1365..1366]
 a48(r157): [1369..1370]
 a49(r311): [1375..1376]
 a50(r310): [1381..1386]
 a51(r309): [1385..1388]
 a52(r156): [1494..1495]
 a53(r308): [1500..1503]
 a54(r307): [1254..1255]
 a55(r155): [1254..1257]
 a56(r154): [1258..1259]
 a57(r306): [1264..1267]
 a58(r305): [1270..1271]
 a59(r304): [1280..1281]
 a60(r303): [1286..1289]
 a61(r153): [1295..1296]
 a62(r152): [1299..1300]
 a63(r302): [1305..1306]
 a64(r301): [1311..1316]
 a65(r300): [1315..1318]
 a66(r151): [1509..1510]
 a67(r299): [1515..1518]
 a68(r298): [1184..1185]
 a69(r150): [1184..1187]
 a70(r149): [1188..1189]
 a71(r297): [1194..1197]
 a72(r296): [1200..1201]
 a73(r295): [1210..1211]
 a74(r294): [1216..1219]
 a75(r148): [1225..1226]
 a76(r147): [1229..1230]
 a77(r293): [1235..1236]
 a78(r292): [1241..1246]
 a79(r291): [1245..1248]
 a80(r146): [1524..1525]
 a81(r290): [1530..1533]
 a82(r289): [1114..1115]
 a83(r145): [1114..1117]
 a84(r144): [1118..1119]
 a85(r288): [1124..1127]
 a86(r287): [1130..1131]
 a87(r286): [1140..1141]
 a88(r285): [1146..1149]
 a89(r143): [1155..1156]
 a90(r142): [1159..1160]
 a91(r284): [1165..1166]
 a92(r283): [1171..1176]
 a93(r282): [1175..1178]
 a94(r141): [1539..1540]
 a95(r281): [1545..1548]
 a96(r280): [1044..1045]
 a97(r140): [1044..1047]
 a98(r139): [1048..1049]
 a99(r279): [1054..1057]
 a100(r278): [1060..1061]
 a101(r277): [1070..1071]
 a102(r276): [1076..1079]
 a103(r138): [1085..1086]
 a104(r137): [1089..1090]
 a105(r275): [1095..1096]
 a106(r274): [1101..1106]
 a107(r273): [1105..1108]
 a108(r136): [1554..1555]
 a109(r272): [1560..1563]
 a110(r271): [974..975]
 a111(r135): [974..977]
 a112(r134): [978..979]
 a113(r270): [984..987]
 a114(r269): [990..991]
 a115(r268): [1000..1001]
 a116(r267): [1006..1009]
 a117(r133): [1015..1016]
 a118(r132): [1019..1020]
 a119(r266): [1025..1026]
 a120(r265): [1031..1036]
 a121(r264): [1035..1038]
 a122(r131): [1569..1570]
 a123(r263): [1575..1578]
 a124(r262): [904..905]
 a125(r130): [904..907]
 a126(r129): [908..909]
 a127(r261): [914..917]
 a128(r260): [920..921]
 a129(r259): [930..931]
 a130(r258): [936..939]
 a131(r128): [945..946]
 a132(r127): [949..950]
 a133(r257): [955..956]
 a134(r256): [961..966]
 a135(r255): [965..968]
 a136(r126): [1584..1585]
 a137(r254): [1590..1593]
 a138(r253): [834..835]
 a139(r125): [834..837]
 a140(r124): [838..839]
 a141(r252): [844..847]
 a142(r251): [850..851]
 a143(r250): [860..861]
 a144(r249): [866..869]
 a145(r123): [875..876]
 a146(r122): [879..880]
 a147(r248): [885..886]
 a148(r247): [891..896]
 a149(r246): [895..898]
 a150(r121): [1599..1600]
 a151(r245): [1605..1608]
 a152(r244): [766..767]
 a153(r120): [766..769]
 a154(r243): [774..777]
 a155(r242): [780..781]
 a156(r241): [790..791]
 a157(r240): [796..799]
 a158(r119): [805..806]
 a159(r118): [809..810]
 a160(r239): [815..816]
 a161(r238): [821..826]
 a162(r237): [825..828]
 a163(r117): [1614..1615]
 a164(r236): [1620..1623]
 a165(r235): [698..699]
 a166(r116): [698..701]
 a167(r234): [706..709]
 a168(r233): [712..713]
 a169(r232): [722..723]
 a170(r231): [728..731]
 a171(r115): [737..738]
 a172(r114): [741..742]
 a173(r230): [747..748]
 a174(r229): [753..758]
 a175(r228): [757..760]
 a176(r113): [1629..1630]
 a177(r227): [1635..1638]
 a178(r226): [626..627]
 a179(r112): [626..629]
 a180(r111): [630..631]
 a181(r225): [636..641]
 a182(r224): [644..645]
 a183(r223): [654..655]
 a184(r222): [660..663]
 a185(r110): [669..670]
 a186(r109): [673..674]
 a187(r221): [679..680]
 a188(r220): [685..690]
 a189(r219): [689..692]
 a190(r108): [1644..1645]
 a191(r218): [1650..1653]
 a192(r217): [554..555]
 a193(r107): [554..557]
 a194(r106): [558..559]
 a195(r216): [564..569]
 a196(r215): [572..573]
 a197(r214): [582..583]
 a198(r213): [588..591]
 a199(r105): [597..598]
 a200(r104): [601..602]
 a201(r212): [607..608]
 a202(r211): [613..618]
 a203(r210): [617..620]
 a204(r103): [1659..1660]
 a205(r209): [1665..1668]
 a206(r208): [484..485]
 a207(r102): [484..487]
 a208(r101): [488..489]
 a209(r207): [494..497]
 a210(r206): [500..501]
 a211(r205): [510..511]
 a212(r204): [516..519]
 a213(r100): [525..526]
 a214(r99): [529..530]
 a215(r203): [535..536]
 a216(r202): [541..546]
 a217(r201): [545..548]
 a218(r98): [1674..1675]
 a219(r200): [1680..1683]
 a220(r97): [420..425]
 a221(r199): [422..423]
 a222(r198): [426..427]
 a223(r197): [430..431]
 a224(r196): [440..441]
 a225(r195): [446..449]
 a226(r96): [455..456]
 a227(r95): [459..460]
 a228(r194): [465..466]
 a229(r193): [471..476]
 a230(r192): [475..478]
 a231(r94): [1689..1690]
 a232(r191): [1695..1698]
 a233(r190): [348..349]
 a234(r93): [348..351]
 a235(r92): [352..353]
 a236(r189): [358..361]
 a237(r188): [364..365]
 a238(r187): [374..375]
 a239(r186): [380..383]
 a240(r91): [389..390]
 a241(r90): [393..394]
 a242(r185): [399..400]
 a243(r184): [405..410]
 a244(r183): [409..412]
 a245(r89): [204..205]
 a246(r182): [210..213]
 a247(r181): [216..217]
 a248(r180): [222..225]
 a249(r86): [1716..1717]
 a250(r85): [1720..1721]
 a251(r179): [1726..1727]
 a252(r178): [1732..1737]
 a253(r177): [1736..1739]
 a254(r84): [1756..1757]
 a255(r176): [1762..1765]
 a256(r83): [1770..1771]
Compressing live ranges: from 1784 to 442 - 24%
Ranges after the compression:
 a0(r175): [0..1]
 a1(r174): [2..3]
 a2(r339): [4..5]
 a3(r173): [6..7]
 a4(r88): [16..17]
 a5(r87): [18..19]
 a6(r338): [20..21]
 a7(r172): [22..23]
 a8(r171): [24..25]
 a9(r337): [26..27]
 a10(r336): [28..29]
 a11(r335): [28..29]
 a12(r334): [30..31]
 a13(r170): [30..31]
 a14(r169): [32..33]
 a15(r333): [34..35]
 a16(r332): [36..37]
 a17(r331): [38..39]
 a18(r330): [40..41]
 a19(r168): [42..43]
 a20(r167): [44..45]
 a21(r329): [46..47]
 a22(r328): [48..49]
 a23(r327): [48..49]
 a24(r166): [344..345]
 a25(r326): [346..347]
 a26(r325): [348..349]
 a27(r165): [348..349]
 a28(r164): [350..351]
 a29(r324): [352..353]
 a30(r323): [354..355]
 a31(r322): [356..357]
 a32(r321): [358..359]
 a33(r163): [360..361]
 a34(r162): [362..363]
 a35(r320): [364..365]
 a36(r319): [366..367]
 a37(r318): [366..367]
 a38(r161): [368..369]
 a39(r317): [370..371]
 a40(r316): [324..325]
 a41(r160): [324..325]
 a42(r159): [326..327]
 a43(r315): [328..329]
 a44(r314): [330..331]
 a45(r313): [332..333]
 a46(r312): [334..335]
 a47(r158): [336..337]
 a48(r157): [338..339]
 a49(r311): [340..341]
 a50(r310): [342..343]
 a51(r309): [342..343]
 a52(r156): [372..373]
 a53(r308): [374..375]
 a54(r307): [304..305]
 a55(r155): [304..305]
 a56(r154): [306..307]
 a57(r306): [308..309]
 a58(r305): [310..311]
 a59(r304): [312..313]
 a60(r303): [314..315]
 a61(r153): [316..317]
 a62(r152): [318..319]
 a63(r302): [320..321]
 a64(r301): [322..323]
 a65(r300): [322..323]
 a66(r151): [376..377]
 a67(r299): [378..379]
 a68(r298): [284..285]
 a69(r150): [284..285]
 a70(r149): [286..287]
 a71(r297): [288..289]
 a72(r296): [290..291]
 a73(r295): [292..293]
 a74(r294): [294..295]
 a75(r148): [296..297]
 a76(r147): [298..299]
 a77(r293): [300..301]
 a78(r292): [302..303]
 a79(r291): [302..303]
 a80(r146): [380..381]
 a81(r290): [382..383]
 a82(r289): [264..265]
 a83(r145): [264..265]
 a84(r144): [266..267]
 a85(r288): [268..269]
 a86(r287): [270..271]
 a87(r286): [272..273]
 a88(r285): [274..275]
 a89(r143): [276..277]
 a90(r142): [278..279]
 a91(r284): [280..281]
 a92(r283): [282..283]
 a93(r282): [282..283]
 a94(r141): [384..385]
 a95(r281): [386..387]
 a96(r280): [244..245]
 a97(r140): [244..245]
 a98(r139): [246..247]
 a99(r279): [248..249]
 a100(r278): [250..251]
 a101(r277): [252..253]
 a102(r276): [254..255]
 a103(r138): [256..257]
 a104(r137): [258..259]
 a105(r275): [260..261]
 a106(r274): [262..263]
 a107(r273): [262..263]
 a108(r136): [388..389]
 a109(r272): [390..391]
 a110(r271): [224..225]
 a111(r135): [224..225]
 a112(r134): [226..227]
 a113(r270): [228..229]
 a114(r269): [230..231]
 a115(r268): [232..233]
 a116(r267): [234..235]
 a117(r133): [236..237]
 a118(r132): [238..239]
 a119(r266): [240..241]
 a120(r265): [242..243]
 a121(r264): [242..243]
 a122(r131): [392..393]
 a123(r263): [394..395]
 a124(r262): [204..205]
 a125(r130): [204..205]
 a126(r129): [206..207]
 a127(r261): [208..209]
 a128(r260): [210..211]
 a129(r259): [212..213]
 a130(r258): [214..215]
 a131(r128): [216..217]
 a132(r127): [218..219]
 a133(r257): [220..221]
 a134(r256): [222..223]
 a135(r255): [222..223]
 a136(r126): [396..397]
 a137(r254): [398..399]
 a138(r253): [184..185]
 a139(r125): [184..185]
 a140(r124): [186..187]
 a141(r252): [188..189]
 a142(r251): [190..191]
 a143(r250): [192..193]
 a144(r249): [194..195]
 a145(r123): [196..197]
 a146(r122): [198..199]
 a147(r248): [200..201]
 a148(r247): [202..203]
 a149(r246): [202..203]
 a150(r121): [400..401]
 a151(r245): [402..403]
 a152(r244): [166..167]
 a153(r120): [166..167]
 a154(r243): [168..169]
 a155(r242): [170..171]
 a156(r241): [172..173]
 a157(r240): [174..175]
 a158(r119): [176..177]
 a159(r118): [178..179]
 a160(r239): [180..181]
 a161(r238): [182..183]
 a162(r237): [182..183]
 a163(r117): [404..405]
 a164(r236): [406..407]
 a165(r235): [148..149]
 a166(r116): [148..149]
 a167(r234): [150..151]
 a168(r233): [152..153]
 a169(r232): [154..155]
 a170(r231): [156..157]
 a171(r115): [158..159]
 a172(r114): [160..161]
 a173(r230): [162..163]
 a174(r229): [164..165]
 a175(r228): [164..165]
 a176(r113): [408..409]
 a177(r227): [410..411]
 a178(r226): [128..129]
 a179(r112): [128..129]
 a180(r111): [130..131]
 a181(r225): [132..133]
 a182(r224): [134..135]
 a183(r223): [136..137]
 a184(r222): [138..139]
 a185(r110): [140..141]
 a186(r109): [142..143]
 a187(r221): [144..145]
 a188(r220): [146..147]
 a189(r219): [146..147]
 a190(r108): [412..413]
 a191(r218): [414..415]
 a192(r217): [108..109]
 a193(r107): [108..109]
 a194(r106): [110..111]
 a195(r216): [112..113]
 a196(r215): [114..115]
 a197(r214): [116..117]
 a198(r213): [118..119]
 a199(r105): [120..121]
 a200(r104): [122..123]
 a201(r212): [124..125]
 a202(r211): [126..127]
 a203(r210): [126..127]
 a204(r103): [416..417]
 a205(r209): [418..419]
 a206(r208): [88..89]
 a207(r102): [88..89]
 a208(r101): [90..91]
 a209(r207): [92..93]
 a210(r206): [94..95]
 a211(r205): [96..97]
 a212(r204): [98..99]
 a213(r100): [100..101]
 a214(r99): [102..103]
 a215(r203): [104..105]
 a216(r202): [106..107]
 a217(r201): [106..107]
 a218(r98): [420..421]
 a219(r200): [422..423]
 a220(r97): [70..71]
 a221(r199): [70..71]
 a222(r198): [72..73]
 a223(r197): [74..75]
 a224(r196): [76..77]
 a225(r195): [78..79]
 a226(r96): [80..81]
 a227(r95): [82..83]
 a228(r194): [84..85]
 a229(r193): [86..87]
 a230(r192): [86..87]
 a231(r94): [424..425]
 a232(r191): [426..427]
 a233(r190): [50..51]
 a234(r93): [50..51]
 a235(r92): [52..53]
 a236(r189): [54..55]
 a237(r188): [56..57]
 a238(r187): [58..59]
 a239(r186): [60..61]
 a240(r91): [62..63]
 a241(r90): [64..65]
 a242(r185): [66..67]
 a243(r184): [68..69]
 a244(r183): [68..69]
 a245(r89): [8..9]
 a246(r182): [10..11]
 a247(r181): [12..13]
 a248(r180): [14..15]
 a249(r86): [428..429]
 a250(r85): [430..431]
 a251(r179): [432..433]
 a252(r178): [434..435]
 a253(r177): [434..435]
 a254(r84): [436..437]
 a255(r176): [438..439]
 a256(r83): [440..441]
  pref0:a153(r120)<-hr21@1
  pref1:a166(r116)<-hr21@1
  regions=1, blocks=84, points=442
    allocnos=257 (big 0), copies=0, conflicts=0, ranges=257
Disposition:
  256:r83  l0     0  254:r84  l0     0  250:r85  l0     0  249:r86  l0     0
    5:r87  l0     0    4:r88  l0     0  245:r89  l0     0  241:r90  l0     0
  240:r91  l0     0  235:r92  l0    21  234:r93  l0     0  231:r94  l0     0
  227:r95  l0     0  226:r96  l0     0  220:r97  l0     1  218:r98  l0     0
  214:r99  l0     0  213:r100 l0     0  208:r101 l0    21  207:r102 l0     0
  204:r103 l0     0  200:r104 l0     0  199:r105 l0     0  194:r106 l0     0
  193:r107 l0     1  190:r108 l0     0  186:r109 l0     0  185:r110 l0     0
  180:r111 l0     0  179:r112 l0     1  176:r113 l0     0  172:r114 l0     0
  171:r115 l0     0  166:r116 l0     1  163:r117 l0     0  159:r118 l0     0
  158:r119 l0     0  153:r120 l0     1  150:r121 l0     0  146:r122 l0     0
  145:r123 l0     0  140:r124 l0    21  139:r125 l0     0  136:r126 l0     0
  132:r127 l0     0  131:r128 l0     0  126:r129 l0    21  125:r130 l0     0
  122:r131 l0     0  118:r132 l0     0  117:r133 l0     0  112:r134 l0    21
  111:r135 l0     0  108:r136 l0     0  104:r137 l0     0  103:r138 l0     0
   98:r139 l0    21   97:r140 l0     0   94:r141 l0     0   90:r142 l0     0
   89:r143 l0     0   84:r144 l0    21   83:r145 l0     0   80:r146 l0     0
   76:r147 l0     0   75:r148 l0     0   70:r149 l0    21   69:r150 l0     0
   66:r151 l0     0   62:r152 l0     0   61:r153 l0     0   56:r154 l0    21
   55:r155 l0     0   52:r156 l0     0   48:r157 l0     0   47:r158 l0     0
   42:r159 l0    21   41:r160 l0     0   38:r161 l0     0   34:r162 l0     0
   33:r163 l0     0   28:r164 l0    21   27:r165 l0     0   24:r166 l0     0
   20:r167 l0     0   19:r168 l0     0   14:r169 l0    21   13:r170 l0     0
    8:r171 l0     0    7:r172 l0     0    3:r173 l0     0    1:r174 l0     0
    0:r175 l0     0  255:r176 l0     0  253:r177 l0     1  252:r178 l0     0
  251:r179 l0     0  248:r180 l0     0  247:r181 l0     0  246:r182 l0     0
  244:r183 l0     1  243:r184 l0     0  242:r185 l0     0  239:r186 l0     0
  238:r187 l0     0  237:r188 l0     0  236:r189 l0     0  233:r190 l0     1
  232:r191 l0     0  230:r192 l0     1  229:r193 l0     0  228:r194 l0     0
  225:r195 l0     0  224:r196 l0     0  223:r197 l0     0  222:r198 l0     0
  221:r199 l0     0  219:r200 l0     0  217:r201 l0     1  216:r202 l0     0
  215:r203 l0     0  212:r204 l0     0  211:r205 l0     0  210:r206 l0     0
  209:r207 l0     0  206:r208 l0     1  205:r209 l0     0  203:r210 l0     1
  202:r211 l0     0  201:r212 l0     0  198:r213 l0     0  197:r214 l0     0
  196:r215 l0     0  195:r216 l0     0  192:r217 l0     0  191:r218 l0     0
  189:r219 l0     1  188:r220 l0     0  187:r221 l0     0  184:r222 l0     0
  183:r223 l0     0  182:r224 l0     0  181:r225 l0     0  178:r226 l0     0
  177:r227 l0     0  175:r228 l0     1  174:r229 l0     0  173:r230 l0     0
  170:r231 l0     0  169:r232 l0     0  168:r233 l0     0  167:r234 l0     0
  165:r235 l0     0  164:r236 l0     0  162:r237 l0     1  161:r238 l0     0
  160:r239 l0     0  157:r240 l0     0  156:r241 l0     0  155:r242 l0     0
  154:r243 l0     0  152:r244 l0     0  151:r245 l0     0  149:r246 l0     1
  148:r247 l0     0  147:r248 l0     0  144:r249 l0     0  143:r250 l0     0
  142:r251 l0     0  141:r252 l0     0  138:r253 l0     1  137:r254 l0     0
  135:r255 l0     1  134:r256 l0     0  133:r257 l0     0  130:r258 l0     0
  129:r259 l0     0  128:r260 l0     0  127:r261 l0     0  124:r262 l0     1
  123:r263 l0     0  121:r264 l0     1  120:r265 l0     0  119:r266 l0     0
  116:r267 l0     0  115:r268 l0     0  114:r269 l0     0  113:r270 l0     0
  110:r271 l0     1  109:r272 l0     0  107:r273 l0     1  106:r274 l0     0
  105:r275 l0     0  102:r276 l0     0  101:r277 l0     0  100:r278 l0     0
   99:r279 l0     0   96:r280 l0     1   95:r281 l0     0   93:r282 l0     1
   92:r283 l0     0   91:r284 l0     0   88:r285 l0     0   87:r286 l0     0
   86:r287 l0     0   85:r288 l0     0   82:r289 l0     1   81:r290 l0     0
   79:r291 l0     1   78:r292 l0     0   77:r293 l0     0   74:r294 l0     0
   73:r295 l0     0   72:r296 l0     0   71:r297 l0     0   68:r298 l0     1
   67:r299 l0     0   65:r300 l0     1   64:r301 l0     0   63:r302 l0     0
   60:r303 l0     0   59:r304 l0     0   58:r305 l0     0   57:r306 l0     0
   54:r307 l0     1   53:r308 l0     0   51:r309 l0     1   50:r310 l0     0
   49:r311 l0     0   46:r312 l0     0   45:r313 l0     0   44:r314 l0     0
   43:r315 l0     0   40:r316 l0     1   39:r317 l0     0   37:r318 l0     1
   36:r319 l0     0   35:r320 l0     0   32:r321 l0     0   31:r322 l0     0
   30:r323 l0     0   29:r324 l0     0   26:r325 l0     1   25:r326 l0     0
   23:r327 l0     1   22:r328 l0     0   21:r329 l0     0   18:r330 l0     0
   17:r331 l0     0   16:r332 l0     0   15:r333 l0     0   12:r334 l0     1
   11:r335 l0     1   10:r336 l0     0    9:r337 l0     0    6:r338 l0     0
    2:r339 l0     0
+++Costs: overall -204, reg -204, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


int read_procpar(Procpar_info*, char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0]
;;  ref usage 	r0={155d,77u} r1={175d,21u} r2={154d} r4={243d,90u} r5={306d,153u} r6={1d,83u} r7={1d,236u} r8={153d} r9={153d} r10={153d} r11={153d} r12={153d} r13={153d} r14={153d} r15={153d} r16={1d,82u} r17={253d,60u} r18={153d} r19={153d} r20={1d,260u,1e} r21={154d,14u} r22={154d} r23={154d} r24={154d} r25={154d} r26={154d} r27={154d} r28={154d} r29={153d} r30={153d} r31={153d} r32={153d} r33={153d} r34={153d} r35={153d} r36={153d} r37={154d} r38={154d} r39={153d} r40={153d} r45={153d} r46={153d} r47={153d} r48={153d} r49={153d} r50={153d} r51={153d} r52={153d} r53={153d} r54={153d} r55={153d} r56={153d} r57={153d} r58={153d} r59={153d} r60={153d} r61={153d} r62={153d} r63={153d} r64={153d} r65={153d} r66={153d} r67={153d} r68={153d} r69={153d} r70={153d} r71={153d} r72={153d} r73={153d} r74={153d} r75={153d} r76={153d} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={1d,1u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u} r281={1d,1u} r282={1d,1u} r283={1d,1u} r284={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={1d,1u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u} r295={1d,1u} r296={1d,1u} r297={1d,1u} r298={1d,1u} r299={1d,1u} r300={1d,1u} r301={1d,1u} r302={1d,1u} r303={1d,1u} r304={1d,1u} r305={1d,1u} r306={1d,1u} r307={1d,1u} r308={1d,1u} r309={1d,1u} r310={1d,1u} r311={1d,1u} r312={1d,1u} r313={1d,1u} r314={1d,1u} r315={1d,1u} r316={1d,1u} r317={1d,1u} r318={1d,1u} r319={1d,1u} r320={1d,1u} r321={1d,1u} r322={1d,1u} r323={1d,1u} r324={1d,1u} r325={1d,1u} r326={1d,1u} r327={1d,1u} r328={1d,1u} r329={1d,1u} r330={1d,1u} r331={1d,1u} r332={1d,1u} r333={1d,1u} r334={1d,1u} r335={1d,1u} r336={1d,1u} r337={1d,1u} r338={1d,1u} r339={1d,1u} 
;;    total ref usage 12377{11043d,1333u,1e} in 851{698 regular + 153 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 176
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])
        (reg:DI 5 di [ procpar_info ])) read_procpar.cpp:20 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ procpar_info ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 procpar_string+0 S8 A64])
        (reg:DI 4 si [ procpar_string ])) read_procpar.cpp:20 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ procpar_string ])
        (nil)))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.5608+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:20 964 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 8 5 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])
        (const_int 0 [0])) read_procpar.cpp:22 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (const_int 0 [0])) read_procpar.cpp:25 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 83 [ D.5599 ])
        (const_int 5000 [0x1388])) read_procpar.cpp:28 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 83 [ D.5599 ])) read_procpar.cpp:28 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 83 [ D.5599 ])
        (nil)))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -50036 [0xffffffffffff3c8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) read_procpar.cpp:31 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 176)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50064 [0xffffffffffff3c70])) [0 procpar_string+0 S8 A64])) read_procpar.cpp:34 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b04d640a5f0 *.LC0>)) read_procpar.cpp:34 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 176)) read_procpar.cpp:34 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 176)
        (nil)))
(call_insn 16 15 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b04d627bd00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:34 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 17 16 18 2 (set (reg/f:DI 84 [ D.5600 ])
        (reg:DI 0 ax)) read_procpar.cpp:34 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 18 17 19 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])
        (reg/f:DI 84 [ D.5600 ])) read_procpar.cpp:34 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 84 [ D.5600 ])
        (nil)))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])
            (const_int 0 [0]))) read_procpar.cpp:35 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) read_procpar.cpp:35 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 27)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b04d640a688 *.LC1>)) read_procpar.cpp:36 89 {*movdi_internal}
     (nil))
(call_insn 23 22 24 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:36 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 3 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:37 90 {*movsi_internal}
     (nil))
(call_insn 25 24 26 3 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:37 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 26 25 27)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 177 178 179
(code_label 27 26 28 4 2 "" [1 uses])
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:41 89 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 178)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:41 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 30 32 4 (set (reg:DI 1 dx)
        (reg:DI 177)) read_procpar.cpp:41 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 177)
        (nil)))
(insn 32 31 33 4 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:41 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 5 di)
        (reg:DI 178)) read_procpar.cpp:41 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 178)
        (nil)))
(call_insn 34 33 35 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:41 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 35 34 36 4 (set (reg:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:42 89 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 5 di)
        (reg:DI 179)) read_procpar.cpp:42 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 179)
        (nil)))
(call_insn 37 36 38 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:42 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 38 37 39 4 (set (reg:SI 85 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:42 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 39 38 40 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 85 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:42 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 85 [ D.5601 ])
        (nil)))
(insn 40 39 41 4 (set (reg:QI 86 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:42 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 41 40 42 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 86 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:42 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 86 [ D.5602 ])
        (nil)))
(jump_insn 42 41 43 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) read_procpar.cpp:42 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 49)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:43 89 {*movdi_internal}
     (nil))
(call_insn 45 44 46 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:43 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 46 45 47 5 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:44 90 {*movsi_internal}
     (nil))
(call_insn 47 46 48 5 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:44 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 48 47 49)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 49 48 50 6 3 "" [1 uses])
(note 50 49 1021 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1021 50 1022 6 (set (pc)
        (label_ref 979)) read_procpar.cpp:51 636 {jump}
     (nil)
 -> 979)
;;  succ:       78 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1022 1021 987)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 89 180 181 182
(code_label 987 1022 53 7 39 "" [1 uses])
(note 53 987 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -50036 [0xffffffffffff3c8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50036 [0xffffffffffff3c8c])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:57 220 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 55 54 56 7 (parallel [
            (set (reg:DI 180)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:65 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 56 55 57 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b04d640a7b8 *.LC3>)) read_procpar.cpp:65 89 {*movdi_internal}
     (nil))
(insn 57 56 58 7 (set (reg:DI 5 di)
        (reg:DI 180)) read_procpar.cpp:65 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 180)
        (nil)))
(call_insn 58 57 59 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:65 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 59 58 60 7 (set (reg:DI 181)
        (reg:DI 0 ax)) read_procpar.cpp:65 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 60 59 61 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 181)) read_procpar.cpp:65 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 181)
        (nil)))
(insn 61 60 62 7 (set (reg:DI 182)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:80 89 {*movdi_internal}
     (nil))
(insn 62 61 63 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b04d640a850 *.LC4>)) read_procpar.cpp:80 89 {*movdi_internal}
     (nil))
(insn 63 62 64 7 (set (reg:DI 5 di)
        (reg:DI 182)) read_procpar.cpp:80 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 182)
        (nil)))
(call_insn/i 64 63 65 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:80 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 65 64 66 7 (set (reg:SI 89 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:80 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 66 65 67 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:80 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 89 [ D.5601 ])
        (nil)))
(jump_insn 67 66 68 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 112)
            (pc))) read_procpar.cpp:80 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 112)
;;  succ:       8 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 90 91 183 184 185
(note 68 67 69 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 8 (set (reg:DI 183)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:90 89 {*movdi_internal}
     (nil))
(insn 70 69 71 8 (parallel [
            (set (reg:DI 184)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:90 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 71 70 72 8 (set (reg:DI 1 dx)
        (reg:DI 183)) read_procpar.cpp:90 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 183)
        (nil)))
(insn 72 71 73 8 (set (reg:SI 4 si)
        (const_int 5000 [0x1388])) read_procpar.cpp:90 90 {*movsi_internal}
     (nil))
(insn 73 72 74 8 (set (reg:DI 5 di)
        (reg:DI 184)) read_procpar.cpp:90 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 184)
        (nil)))
(call_insn 74 73 75 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:90 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 75 74 76 8 (set (reg:DI 185)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:92 89 {*movdi_internal}
     (nil))
(insn 76 75 77 8 (set (reg:DI 5 di)
        (reg:DI 185)) read_procpar.cpp:92 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 185)
        (nil)))
(call_insn 77 76 78 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:92 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 78 77 79 8 (set (reg:SI 90 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:92 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 79 78 80 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:92 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 90 [ D.5601 ])
        (nil)))
(insn 80 79 81 8 (set (reg:QI 91 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:92 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 81 80 82 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 91 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:92 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 91 [ D.5602 ])
        (nil)))
(jump_insn 82 81 83 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) read_procpar.cpp:92 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 89)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 83 82 84 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:93 89 {*movdi_internal}
     (nil))
(call_insn 85 84 86 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:93 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 86 85 87 9 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:94 90 {*movsi_internal}
     (nil))
(call_insn 87 86 88 9 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:94 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 88 87 89)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 92 93 186 187 188 189 190
(code_label 89 88 90 10 6 "" [1 uses])
(note 90 89 91 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 10 (parallel [
            (set (reg:DI 186)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:106 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 92 91 93 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 93 92 94 10 (set (reg:DI 5 di)
        (reg:DI 186)) read_procpar.cpp:106 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 186)
        (nil)))
(call_insn 94 93 95 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:106 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 95 94 96 10 (set (reg:DI 187)
        (reg:DI 0 ax)) read_procpar.cpp:106 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 96 95 97 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 187)) read_procpar.cpp:106 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 187)
        (nil)))
(insn 97 96 98 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:110 89 {*movdi_internal}
     (nil))
(insn 98 97 99 10 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:110 89 {*movdi_internal}
     (nil))
(call_insn 99 98 100 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:110 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 100 99 101 10 (set (reg:DI 188)
        (reg:DI 0 ax)) read_procpar.cpp:110 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 101 100 102 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 188)) read_procpar.cpp:110 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 188)
        (nil)))
(insn 102 101 103 10 (set (reg:DI 189)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(insn 103 102 104 10 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(insn 104 103 105 10 (set (reg:DI 5 di)
        (reg:DI 189)) read_procpar.cpp:115 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 189)
        (nil)))
(call_insn 105 104 106 10 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:115 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 106 105 107 10 (set (reg:DF 92 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:115 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 107 106 108 10 (set (reg:SF 93 [ D.5604 ])
        (float_truncate:SF (reg:DF 92 [ D.5603 ]))) read_procpar.cpp:115 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 92 [ D.5603 ])
        (nil)))
(insn 108 107 109 10 (set (reg/f:DI 190)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(insn 109 108 1023 10 (set (mem/j:SF (reg/f:DI 190) [0 procpar_info_23(D)->acquision_time+0 S4 A64])
        (reg:SF 93 [ D.5604 ])) read_procpar.cpp:115 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 190)
        (expr_list:REG_DEAD (reg:SF 93 [ D.5604 ])
            (nil))))
(jump_insn 1023 109 1024 10 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1024 1023 112)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 94 191
(code_label 112 1024 113 11 5 "" [1 uses])
(note 113 112 114 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 11 (set (reg:DI 191)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:122 89 {*movdi_internal}
     (nil))
(insn 115 114 116 11 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b04d640a980 *.LC6>)) read_procpar.cpp:122 89 {*movdi_internal}
     (nil))
(insn 116 115 117 11 (set (reg:DI 5 di)
        (reg:DI 191)) read_procpar.cpp:122 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 191)
        (nil)))
(call_insn/i 117 116 118 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:122 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 118 117 119 11 (set (reg:SI 94 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:122 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 119 118 120 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 94 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:122 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 94 [ D.5601 ])
        (nil)))
(jump_insn 120 119 121 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 163)
            (pc))) read_procpar.cpp:122 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 163)
;;  succ:       12 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 95 96 192 193 194
(note 121 120 122 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 12 (set (reg:DI 192)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:125 89 {*movdi_internal}
     (nil))
(insn 123 122 124 12 (parallel [
            (set (reg:DI 193)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:125 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 124 123 125 12 (set (reg:DI 1 dx)
        (reg:DI 192)) read_procpar.cpp:125 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 192)
        (nil)))
(insn 125 124 126 12 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:125 90 {*movsi_internal}
     (nil))
(insn 126 125 127 12 (set (reg:DI 5 di)
        (reg:DI 193)) read_procpar.cpp:125 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 193)
        (nil)))
(call_insn 127 126 128 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:125 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 128 127 129 12 (set (reg:DI 194)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:126 89 {*movdi_internal}
     (nil))
(insn 129 128 130 12 (set (reg:DI 5 di)
        (reg:DI 194)) read_procpar.cpp:126 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 194)
        (nil)))
(call_insn 130 129 131 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:126 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 131 130 132 12 (set (reg:SI 95 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:126 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 132 131 133 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 95 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:126 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 95 [ D.5601 ])
        (nil)))
(insn 133 132 134 12 (set (reg:QI 96 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:126 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 134 133 135 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 96 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:126 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 96 [ D.5602 ])
        (nil)))
(jump_insn 135 134 136 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) read_procpar.cpp:126 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 142)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 136 135 137 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 138 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:127 89 {*movdi_internal}
     (nil))
(call_insn 138 137 139 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:127 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 139 138 140 13 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:128 90 {*movsi_internal}
     (nil))
(call_insn 140 139 141 13 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:128 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 141 140 142)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 97 195 196 197 198 199
(code_label 142 141 143 14 9 "" [1 uses])
(note 143 142 144 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 14 (parallel [
            (set (reg:DI 195)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:132 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 145 144 146 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b04d640aa18 *.LC7>)) read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(insn 146 145 147 14 (set (reg:DI 5 di)
        (reg:DI 195)) read_procpar.cpp:132 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 195)
        (nil)))
(call_insn 147 146 148 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:132 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 148 147 149 14 (set (reg:DI 196)
        (reg:DI 0 ax)) read_procpar.cpp:132 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 149 148 150 14 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 196)) read_procpar.cpp:132 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 196)
        (nil)))
(insn 150 149 151 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b04d640aab0 *.LC8>)) read_procpar.cpp:133 89 {*movdi_internal}
     (nil))
(insn 151 150 152 14 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:133 89 {*movdi_internal}
     (nil))
(call_insn 152 151 153 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:133 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 153 152 154 14 (set (reg:DI 197)
        (reg:DI 0 ax)) read_procpar.cpp:133 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 154 153 155 14 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 197)) read_procpar.cpp:133 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 197)
        (nil)))
(insn 155 154 156 14 (set (reg/f:DI 198)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:134 89 {*movdi_internal}
     (nil))
(insn 156 155 157 14 (parallel [
            (set (reg/f:DI 97 [ D.5605 ])
                (plus:DI (reg/f:DI 198)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:134 221 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 198)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])
                    (const_int 4 [0x4]))
                (nil)))))
(insn 157 156 158 14 (set (reg:DI 199)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:134 89 {*movdi_internal}
     (nil))
(insn 158 157 159 14 (set (reg:DI 4 si)
        (reg:DI 199)) read_procpar.cpp:134 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 199)
        (nil)))
(insn 159 158 160 14 (set (reg:DI 5 di)
        (reg/f:DI 97 [ D.5605 ])) read_procpar.cpp:134 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ D.5605 ])
        (nil)))
(call_insn 160 159 1025 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b04d60bd600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:134 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:DI 0 ax)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 1025 160 1026 14 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1026 1025 163)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 98 200
(code_label 163 1026 164 15 8 "" [1 uses])
(note 164 163 165 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 165 164 166 15 (set (reg:DI 200)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(insn 166 165 167 15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b04d640ab48 *.LC9>)) read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(insn 167 166 168 15 (set (reg:DI 5 di)
        (reg:DI 200)) read_procpar.cpp:136 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 200)
        (nil)))
(call_insn/i 168 167 169 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:136 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 169 168 170 15 (set (reg:SI 98 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:136 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 170 169 171 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 98 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:136 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 98 [ D.5601 ])
        (nil)))
(jump_insn 171 170 172 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 216)
            (pc))) read_procpar.cpp:136 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 216)
;;  succ:       16 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 99 100 201 202 203
(note 172 171 173 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 173 172 174 16 (set (reg:DI 201)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(insn 174 173 175 16 (parallel [
            (set (reg:DI 202)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:138 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 175 174 176 16 (set (reg:DI 1 dx)
        (reg:DI 201)) read_procpar.cpp:138 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 201)
        (nil)))
(insn 176 175 177 16 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:138 90 {*movsi_internal}
     (nil))
(insn 177 176 178 16 (set (reg:DI 5 di)
        (reg:DI 202)) read_procpar.cpp:138 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 202)
        (nil)))
(call_insn 178 177 179 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:138 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 179 178 180 16 (set (reg:DI 203)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(insn 180 179 181 16 (set (reg:DI 5 di)
        (reg:DI 203)) read_procpar.cpp:139 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 203)
        (nil)))
(call_insn 181 180 182 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:139 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 182 181 183 16 (set (reg:SI 99 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:139 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 183 182 184 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 99 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:139 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 99 [ D.5601 ])
        (nil)))
(insn 184 183 185 16 (set (reg:QI 100 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:139 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 185 184 186 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 100 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:139 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 100 [ D.5602 ])
        (nil)))
(jump_insn 186 185 187 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) read_procpar.cpp:139 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 193)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 187 186 188 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 189 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:140 89 {*movdi_internal}
     (nil))
(call_insn 189 188 190 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:140 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 190 189 191 17 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:141 90 {*movsi_internal}
     (nil))
(call_insn 191 190 192 17 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:141 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 192 191 193)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 101 102 204 205 206 207 208
(code_label 193 192 194 18 11 "" [1 uses])
(note 194 193 195 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 196 18 (parallel [
            (set (reg:DI 204)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:145 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 196 195 197 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(insn 197 196 198 18 (set (reg:DI 5 di)
        (reg:DI 204)) read_procpar.cpp:145 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 204)
        (nil)))
(call_insn 198 197 199 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:145 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 199 198 200 18 (set (reg:DI 205)
        (reg:DI 0 ax)) read_procpar.cpp:145 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 200 199 201 18 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 205)) read_procpar.cpp:145 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 205)
        (nil)))
(insn 201 200 202 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(insn 202 201 203 18 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(call_insn 203 202 204 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:146 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 204 203 205 18 (set (reg:DI 206)
        (reg:DI 0 ax)) read_procpar.cpp:146 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 205 204 206 18 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 206)) read_procpar.cpp:146 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 206)
        (nil)))
(insn 206 205 207 18 (set (reg:DI 207)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:147 89 {*movdi_internal}
     (nil))
(insn 207 206 208 18 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:147 89 {*movdi_internal}
     (nil))
(insn 208 207 209 18 (set (reg:DI 5 di)
        (reg:DI 207)) read_procpar.cpp:147 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 207)
        (nil)))
(call_insn 209 208 210 18 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:147 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 210 209 211 18 (set (reg:DF 101 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:147 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 211 210 212 18 (set (reg:SF 102 [ D.5604 ])
        (float_truncate:SF (reg:DF 101 [ D.5603 ]))) read_procpar.cpp:147 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 101 [ D.5603 ])
        (nil)))
(insn 212 211 213 18 (set (reg/f:DI 208)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:147 89 {*movdi_internal}
     (nil))
(insn 213 212 1027 18 (set (mem/j:SF (plus:DI (reg/f:DI 208)
                (const_int 292 [0x124])) [0 procpar_info_23(D)->filter+0 S4 A32])
        (reg:SF 102 [ D.5604 ])) read_procpar.cpp:147 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 208)
        (expr_list:REG_DEAD (reg:SF 102 [ D.5604 ])
            (nil))))
(jump_insn 1027 213 1028 18 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1028 1027 216)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 103 209
(code_label 216 1028 217 19 10 "" [1 uses])
(note 217 216 218 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 218 217 219 19 (set (reg:DI 209)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:149 89 {*movdi_internal}
     (nil))
(insn 219 218 220 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b04d640abe0 *.LC10>)) read_procpar.cpp:149 89 {*movdi_internal}
     (nil))
(insn 220 219 221 19 (set (reg:DI 5 di)
        (reg:DI 209)) read_procpar.cpp:149 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 209)
        (nil)))
(call_insn/i 221 220 222 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:149 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 222 221 223 19 (set (reg:SI 103 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:149 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 223 222 224 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 103 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:149 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 103 [ D.5601 ])
        (nil)))
(jump_insn 224 223 225 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 270)
            (pc))) read_procpar.cpp:149 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 270)
;;  succ:       20 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 104 105 210 211 212
(note 225 224 226 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 226 225 227 20 (set (reg:DI 210)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:151 89 {*movdi_internal}
     (nil))
(insn 227 226 228 20 (parallel [
            (set (reg:DI 211)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:151 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 228 227 229 20 (set (reg:DI 1 dx)
        (reg:DI 210)) read_procpar.cpp:151 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 210)
        (nil)))
(insn 229 228 230 20 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:151 90 {*movsi_internal}
     (nil))
(insn 230 229 231 20 (set (reg:DI 5 di)
        (reg:DI 211)) read_procpar.cpp:151 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 211)
        (nil)))
(call_insn 231 230 232 20 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:151 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 232 231 233 20 (set (reg:DI 212)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(insn 233 232 234 20 (set (reg:DI 5 di)
        (reg:DI 212)) read_procpar.cpp:152 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 212)
        (nil)))
(call_insn 234 233 235 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:152 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 235 234 236 20 (set (reg:SI 104 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:152 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 236 235 237 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 104 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:152 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 104 [ D.5601 ])
        (nil)))
(insn 237 236 238 20 (set (reg:QI 105 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:152 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 238 237 239 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 105 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:152 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 105 [ D.5602 ])
        (nil)))
(jump_insn 239 238 240 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 246)
            (pc))) read_procpar.cpp:152 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 246)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 240 239 241 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:153 89 {*movdi_internal}
     (nil))
(call_insn 242 241 243 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:153 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 243 242 244 21 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:154 90 {*movsi_internal}
     (nil))
(call_insn 244 243 245 21 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:154 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 245 244 246)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 106 107 213 214 215 216 217
(code_label 246 245 247 22 13 "" [1 uses])
(note 247 246 248 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 248 247 249 22 (parallel [
            (set (reg:DI 213)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:158 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 249 248 250 22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(insn 250 249 251 22 (set (reg:DI 5 di)
        (reg:DI 213)) read_procpar.cpp:158 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 213)
        (nil)))
(call_insn 251 250 252 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:158 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 252 251 253 22 (set (reg:DI 214)
        (reg:DI 0 ax)) read_procpar.cpp:158 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 253 252 254 22 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 214)) read_procpar.cpp:158 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 214)
        (nil)))
(insn 254 253 255 22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:159 89 {*movdi_internal}
     (nil))
(insn 255 254 256 22 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:159 89 {*movdi_internal}
     (nil))
(call_insn 256 255 257 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:159 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 257 256 258 22 (set (reg:DI 215)
        (reg:DI 0 ax)) read_procpar.cpp:159 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 258 257 259 22 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 215)) read_procpar.cpp:159 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 215)
        (nil)))
(insn 259 258 260 22 (set (reg:DI 216)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 260 259 261 22 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) read_procpar.cpp:160 90 {*movsi_internal}
     (nil))
(insn 261 260 262 22 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 262 261 263 22 (set (reg:DI 5 di)
        (reg:DI 216)) read_procpar.cpp:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 216)
        (nil)))
(call_insn 263 262 264 22 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x2b04d634d300 strtol>) [0 strtol S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:160 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 264 263 265 22 (set (reg:DI 106 [ D.5606 ])
        (reg:DI 0 ax)) read_procpar.cpp:160 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 265 264 266 22 (set (reg:SI 107 [ D.5601 ])
        (subreg:SI (reg:DI 106 [ D.5606 ]) 0)) read_procpar.cpp:160 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 106 [ D.5606 ])
        (nil)))
(insn 266 265 267 22 (set (reg/f:DI 217)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 267 266 1029 22 (set (mem/j:SI (plus:DI (reg/f:DI 217)
                (const_int 296 [0x128])) [0 procpar_info_23(D)->num_transients+0 S4 A64])
        (reg:SI 107 [ D.5601 ])) read_procpar.cpp:160 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 217)
        (expr_list:REG_DEAD (reg:SI 107 [ D.5601 ])
            (nil))))
(jump_insn 1029 267 1030 22 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1030 1029 270)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 108 218
(code_label 270 1030 271 23 12 "" [1 uses])
(note 271 270 272 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 23 (set (reg:DI 218)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:162 89 {*movdi_internal}
     (nil))
(insn 273 272 274 23 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b04d640ac78 *.LC11>)) read_procpar.cpp:162 89 {*movdi_internal}
     (nil))
(insn 274 273 275 23 (set (reg:DI 5 di)
        (reg:DI 218)) read_procpar.cpp:162 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 218)
        (nil)))
(call_insn/i 275 274 276 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:162 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 276 275 277 23 (set (reg:SI 108 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:162 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 277 276 278 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 108 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:162 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 108 [ D.5601 ])
        (nil)))
(jump_insn 278 277 279 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 324)
            (pc))) read_procpar.cpp:162 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 324)
;;  succ:       24 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 109 110 219 220 221
(note 279 278 280 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 280 279 281 24 (set (reg:DI 219)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:164 89 {*movdi_internal}
     (nil))
(insn 281 280 282 24 (parallel [
            (set (reg:DI 220)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:164 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 282 281 283 24 (set (reg:DI 1 dx)
        (reg:DI 219)) read_procpar.cpp:164 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 219)
        (nil)))
(insn 283 282 284 24 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:164 90 {*movsi_internal}
     (nil))
(insn 284 283 285 24 (set (reg:DI 5 di)
        (reg:DI 220)) read_procpar.cpp:164 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 220)
        (nil)))
(call_insn 285 284 286 24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:164 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 286 285 287 24 (set (reg:DI 221)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:165 89 {*movdi_internal}
     (nil))
(insn 287 286 288 24 (set (reg:DI 5 di)
        (reg:DI 221)) read_procpar.cpp:165 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 221)
        (nil)))
(call_insn 288 287 289 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:165 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 289 288 290 24 (set (reg:SI 109 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:165 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 290 289 291 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 109 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:165 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 109 [ D.5601 ])
        (nil)))
(insn 291 290 292 24 (set (reg:QI 110 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:165 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 292 291 293 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 110 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:165 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 110 [ D.5602 ])
        (nil)))
(jump_insn 293 292 294 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 300)
            (pc))) read_procpar.cpp:165 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 300)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 294 293 295 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 295 294 296 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:166 89 {*movdi_internal}
     (nil))
(call_insn 296 295 297 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:166 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 297 296 298 25 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:167 90 {*movsi_internal}
     (nil))
(call_insn 298 297 299 25 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:167 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 299 298 300)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 111 112 222 223 224 225 226
(code_label 300 299 301 26 15 "" [1 uses])
(note 301 300 302 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 303 26 (parallel [
            (set (reg:DI 222)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:171 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 303 302 304 26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:171 89 {*movdi_internal}
     (nil))
(insn 304 303 305 26 (set (reg:DI 5 di)
        (reg:DI 222)) read_procpar.cpp:171 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 222)
        (nil)))
(call_insn 305 304 306 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:171 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 306 305 307 26 (set (reg:DI 223)
        (reg:DI 0 ax)) read_procpar.cpp:171 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 307 306 308 26 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 223)) read_procpar.cpp:171 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 223)
        (nil)))
(insn 308 307 309 26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(insn 309 308 310 26 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(call_insn 310 309 311 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:172 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 311 310 312 26 (set (reg:DI 224)
        (reg:DI 0 ax)) read_procpar.cpp:172 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 312 311 313 26 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 224)) read_procpar.cpp:172 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 224)
        (nil)))
(insn 313 312 314 26 (set (reg:DI 225)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:173 89 {*movdi_internal}
     (nil))
(insn 314 313 315 26 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) read_procpar.cpp:173 90 {*movsi_internal}
     (nil))
(insn 315 314 316 26 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:173 89 {*movdi_internal}
     (nil))
(insn 316 315 317 26 (set (reg:DI 5 di)
        (reg:DI 225)) read_procpar.cpp:173 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 225)
        (nil)))
(call_insn 317 316 318 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x2b04d634d300 strtol>) [0 strtol S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:173 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 318 317 319 26 (set (reg:DI 111 [ D.5606 ])
        (reg:DI 0 ax)) read_procpar.cpp:173 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 319 318 320 26 (set (reg:SI 112 [ D.5601 ])
        (subreg:SI (reg:DI 111 [ D.5606 ]) 0)) read_procpar.cpp:173 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 111 [ D.5606 ])
        (nil)))
(insn 320 319 321 26 (set (reg/f:DI 226)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:173 89 {*movdi_internal}
     (nil))
(insn 321 320 1031 26 (set (mem/j:SI (plus:DI (reg/f:DI 226)
                (const_int 300 [0x12c])) [0 procpar_info_23(D)->num_points+0 S4 A32])
        (reg:SI 112 [ D.5601 ])) read_procpar.cpp:173 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 226)
        (expr_list:REG_DEAD (reg:SI 112 [ D.5601 ])
            (nil))))
(jump_insn 1031 321 1032 26 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1032 1031 324)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 113 227
(code_label 324 1032 325 27 14 "" [1 uses])
(note 325 324 326 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 326 325 327 27 (set (reg:DI 227)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(insn 327 326 328 27 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b04d640ad10 *.LC12>)) read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(insn 328 327 329 27 (set (reg:DI 5 di)
        (reg:DI 227)) read_procpar.cpp:175 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 227)
        (nil)))
(call_insn/i 329 328 330 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:175 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 330 329 331 27 (set (reg:SI 113 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:175 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 331 330 332 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 113 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:175 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 113 [ D.5601 ])
        (nil)))
(jump_insn 332 331 333 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 376)
            (pc))) read_procpar.cpp:175 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 376)
;;  succ:       28 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 114 115 228 229 230
(note 333 332 334 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 334 333 335 28 (set (reg:DI 228)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:177 89 {*movdi_internal}
     (nil))
(insn 335 334 336 28 (parallel [
            (set (reg:DI 229)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:177 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 336 335 337 28 (set (reg:DI 1 dx)
        (reg:DI 228)) read_procpar.cpp:177 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 228)
        (nil)))
(insn 337 336 338 28 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:177 90 {*movsi_internal}
     (nil))
(insn 338 337 339 28 (set (reg:DI 5 di)
        (reg:DI 229)) read_procpar.cpp:177 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 229)
        (nil)))
(call_insn 339 338 340 28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:177 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 340 339 341 28 (set (reg:DI 230)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:178 89 {*movdi_internal}
     (nil))
(insn 341 340 342 28 (set (reg:DI 5 di)
        (reg:DI 230)) read_procpar.cpp:178 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 230)
        (nil)))
(call_insn 342 341 343 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:178 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 343 342 344 28 (set (reg:SI 114 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:178 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 344 343 345 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 114 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:178 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 114 [ D.5601 ])
        (nil)))
(insn 345 344 346 28 (set (reg:QI 115 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:178 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 346 345 347 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 115 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:178 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 115 [ D.5602 ])
        (nil)))
(jump_insn 347 346 348 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 354)
            (pc))) read_procpar.cpp:178 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 354)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 348 347 349 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 349 348 350 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:179 89 {*movdi_internal}
     (nil))
(call_insn 350 349 351 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:179 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 351 350 352 29 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:180 90 {*movsi_internal}
     (nil))
(call_insn 352 351 353 29 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:180 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 353 352 354)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 116 231 232 233 234 235
(code_label 354 353 355 30 17 "" [1 uses])
(note 355 354 356 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 356 355 357 30 (parallel [
            (set (reg:DI 231)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:184 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 357 356 358 30 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(insn 358 357 359 30 (set (reg:DI 5 di)
        (reg:DI 231)) read_procpar.cpp:184 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 231)
        (nil)))
(call_insn 359 358 360 30 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:184 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 360 359 361 30 (set (reg:DI 232)
        (reg:DI 0 ax)) read_procpar.cpp:184 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 361 360 362 30 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 232)) read_procpar.cpp:184 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 232)
        (nil)))
(insn 362 361 363 30 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:185 89 {*movdi_internal}
     (nil))
(insn 363 362 364 30 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:185 89 {*movdi_internal}
     (nil))
(call_insn 364 363 365 30 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:185 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 365 364 366 30 (set (reg:DI 233)
        (reg:DI 0 ax)) read_procpar.cpp:185 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 366 365 367 30 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 233)) read_procpar.cpp:185 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 233)
        (nil)))
(insn 367 366 368 30 (set (reg:DI 234)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(insn 368 367 369 30 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(insn 369 368 370 30 (set (reg:DI 5 di)
        (reg:DI 234)) read_procpar.cpp:186 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 234)
        (nil)))
(call_insn 370 369 371 30 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:186 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 371 370 372 30 (set (reg:DF 116 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:186 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 372 371 373 30 (set (reg/f:DI 235)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(insn 373 372 1033 30 (set (mem/j:DF (plus:DI (reg/f:DI 235)
                (const_int 304 [0x130])) [0 procpar_info_23(D)->main_frequency+0 S8 A64])
        (reg:DF 116 [ D.5603 ])) read_procpar.cpp:186 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 235)
        (expr_list:REG_DEAD (reg:DF 116 [ D.5603 ])
            (nil))))
(jump_insn 1033 373 1034 30 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1034 1033 376)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 117 236
(code_label 376 1034 377 31 16 "" [1 uses])
(note 377 376 378 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 378 377 379 31 (set (reg:DI 236)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:188 89 {*movdi_internal}
     (nil))
(insn 379 378 380 31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b04d640ada8 *.LC13>)) read_procpar.cpp:188 89 {*movdi_internal}
     (nil))
(insn 380 379 381 31 (set (reg:DI 5 di)
        (reg:DI 236)) read_procpar.cpp:188 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 236)
        (nil)))
(call_insn/i 381 380 382 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:188 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 382 381 383 31 (set (reg:SI 117 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:188 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 383 382 384 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 117 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:188 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 117 [ D.5601 ])
        (nil)))
(jump_insn 384 383 385 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 428)
            (pc))) read_procpar.cpp:188 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 428)
;;  succ:       32 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 118 119 237 238 239
(note 385 384 386 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 386 385 387 32 (set (reg:DI 237)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:190 89 {*movdi_internal}
     (nil))
(insn 387 386 388 32 (parallel [
            (set (reg:DI 238)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:190 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 388 387 389 32 (set (reg:DI 1 dx)
        (reg:DI 237)) read_procpar.cpp:190 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 237)
        (nil)))
(insn 389 388 390 32 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:190 90 {*movsi_internal}
     (nil))
(insn 390 389 391 32 (set (reg:DI 5 di)
        (reg:DI 238)) read_procpar.cpp:190 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 238)
        (nil)))
(call_insn 391 390 392 32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:190 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 392 391 393 32 (set (reg:DI 239)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:191 89 {*movdi_internal}
     (nil))
(insn 393 392 394 32 (set (reg:DI 5 di)
        (reg:DI 239)) read_procpar.cpp:191 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 239)
        (nil)))
(call_insn 394 393 395 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:191 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 395 394 396 32 (set (reg:SI 118 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:191 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 396 395 397 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 118 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:191 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 118 [ D.5601 ])
        (nil)))
(insn 397 396 398 32 (set (reg:QI 119 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:191 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 398 397 399 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 119 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:191 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 119 [ D.5602 ])
        (nil)))
(jump_insn 399 398 400 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 406)
            (pc))) read_procpar.cpp:191 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 406)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 400 399 401 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 401 400 402 33 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:192 89 {*movdi_internal}
     (nil))
(call_insn 402 401 403 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:192 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 403 402 404 33 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:193 90 {*movsi_internal}
     (nil))
(call_insn 404 403 405 33 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:193 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 405 404 406)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 120 240 241 242 243 244
(code_label 406 405 407 34 19 "" [1 uses])
(note 407 406 408 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 408 407 409 34 (parallel [
            (set (reg:DI 240)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:197 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 409 408 410 34 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:197 89 {*movdi_internal}
     (nil))
(insn 410 409 411 34 (set (reg:DI 5 di)
        (reg:DI 240)) read_procpar.cpp:197 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 240)
        (nil)))
(call_insn 411 410 412 34 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:197 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 412 411 413 34 (set (reg:DI 241)
        (reg:DI 0 ax)) read_procpar.cpp:197 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 413 412 414 34 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 241)) read_procpar.cpp:197 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 241)
        (nil)))
(insn 414 413 415 34 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(insn 415 414 416 34 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(call_insn 416 415 417 34 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:198 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 417 416 418 34 (set (reg:DI 242)
        (reg:DI 0 ax)) read_procpar.cpp:198 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 418 417 419 34 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 242)) read_procpar.cpp:198 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 242)
        (nil)))
(insn 419 418 420 34 (set (reg:DI 243)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 420 419 421 34 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 421 420 422 34 (set (reg:DI 5 di)
        (reg:DI 243)) read_procpar.cpp:199 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 243)
        (nil)))
(call_insn 422 421 423 34 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:199 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 423 422 424 34 (set (reg:DF 120 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:199 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 424 423 425 34 (set (reg/f:DI 244)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 425 424 1035 34 (set (mem/j:DF (plus:DI (reg/f:DI 244)
                (const_int 312 [0x138])) [0 procpar_info_23(D)->offset_frequency+0 S8 A64])
        (reg:DF 120 [ D.5603 ])) read_procpar.cpp:199 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 244)
        (expr_list:REG_DEAD (reg:DF 120 [ D.5603 ])
            (nil))))
(jump_insn 1035 425 1036 34 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1036 1035 428)
;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 121 245
(code_label 428 1036 429 35 18 "" [1 uses])
(note 429 428 430 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 430 429 431 35 (set (reg:DI 245)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(insn 431 430 432 35 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x2b04d640ae40 *.LC14>)) read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(insn 432 431 433 35 (set (reg:DI 5 di)
        (reg:DI 245)) read_procpar.cpp:201 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 245)
        (nil)))
(call_insn/i 433 432 434 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:201 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 434 433 435 35 (set (reg:SI 121 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:201 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 435 434 436 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 121 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:201 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 121 [ D.5601 ])
        (nil)))
(jump_insn 436 435 437 35 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 481)
            (pc))) read_procpar.cpp:201 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 481)
;;  succ:       36 (FALLTHRU)
;;              39
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 122 123 246 247 248
(note 437 436 438 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 438 437 439 36 (set (reg:DI 246)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(insn 439 438 440 36 (parallel [
            (set (reg:DI 247)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:203 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 440 439 441 36 (set (reg:DI 1 dx)
        (reg:DI 246)) read_procpar.cpp:203 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 246)
        (nil)))
(insn 441 440 442 36 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:203 90 {*movsi_internal}
     (nil))
(insn 442 441 443 36 (set (reg:DI 5 di)
        (reg:DI 247)) read_procpar.cpp:203 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 247)
        (nil)))
(call_insn 443 442 444 36 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:203 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 444 443 445 36 (set (reg:DI 248)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(insn 445 444 446 36 (set (reg:DI 5 di)
        (reg:DI 248)) read_procpar.cpp:204 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 248)
        (nil)))
(call_insn 446 445 447 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:204 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 447 446 448 36 (set (reg:SI 122 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:204 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 448 447 449 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 122 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:204 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 122 [ D.5601 ])
        (nil)))
(insn 449 448 450 36 (set (reg:QI 123 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:204 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 450 449 451 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 123 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:204 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 123 [ D.5602 ])
        (nil)))
(jump_insn 451 450 452 36 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 458)
            (pc))) read_procpar.cpp:204 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 458)
;;  succ:       37 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 452 451 453 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 453 452 454 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:205 89 {*movdi_internal}
     (nil))
(call_insn 454 453 455 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:205 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 455 454 456 37 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:206 90 {*movsi_internal}
     (nil))
(call_insn 456 455 457 37 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:206 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 457 456 458)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 124 125 249 250 251 252 253
(code_label 458 457 459 38 21 "" [1 uses])
(note 459 458 460 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 460 459 461 38 (parallel [
            (set (reg:DI 249)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:210 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 461 460 462 38 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:210 89 {*movdi_internal}
     (nil))
(insn 462 461 463 38 (set (reg:DI 5 di)
        (reg:DI 249)) read_procpar.cpp:210 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 249)
        (nil)))
(call_insn 463 462 464 38 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:210 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 464 463 465 38 (set (reg:DI 250)
        (reg:DI 0 ax)) read_procpar.cpp:210 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 465 464 466 38 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 250)) read_procpar.cpp:210 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 250)
        (nil)))
(insn 466 465 467 38 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:211 89 {*movdi_internal}
     (nil))
(insn 467 466 468 38 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:211 89 {*movdi_internal}
     (nil))
(call_insn 468 467 469 38 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:211 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 469 468 470 38 (set (reg:DI 251)
        (reg:DI 0 ax)) read_procpar.cpp:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 470 469 471 38 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 251)) read_procpar.cpp:211 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 251)
        (nil)))
(insn 471 470 472 38 (set (reg:DI 252)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:212 89 {*movdi_internal}
     (nil))
(insn 472 471 473 38 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:212 89 {*movdi_internal}
     (nil))
(insn 473 472 474 38 (set (reg:DI 5 di)
        (reg:DI 252)) read_procpar.cpp:212 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 252)
        (nil)))
(call_insn 474 473 475 38 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:212 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 475 474 476 38 (set (reg:DF 124 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:212 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 476 475 477 38 (set (reg:SF 125 [ D.5604 ])
        (float_truncate:SF (reg:DF 124 [ D.5603 ]))) read_procpar.cpp:212 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 124 [ D.5603 ])
        (nil)))
(insn 477 476 478 38 (set (reg/f:DI 253)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:212 89 {*movdi_internal}
     (nil))
(insn 478 477 1037 38 (set (mem/j:SF (plus:DI (reg/f:DI 253)
                (const_int 320 [0x140])) [0 procpar_info_23(D)->te+0 S4 A64])
        (reg:SF 125 [ D.5604 ])) read_procpar.cpp:212 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 253)
        (expr_list:REG_DEAD (reg:SF 125 [ D.5604 ])
            (nil))))
(jump_insn 1037 478 1038 38 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1038 1037 481)
;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 126 254
(code_label 481 1038 482 39 20 "" [1 uses])
(note 482 481 483 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 483 482 484 39 (set (reg:DI 254)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:214 89 {*movdi_internal}
     (nil))
(insn 484 483 485 39 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2b04d640aed8 *.LC15>)) read_procpar.cpp:214 89 {*movdi_internal}
     (nil))
(insn 485 484 486 39 (set (reg:DI 5 di)
        (reg:DI 254)) read_procpar.cpp:214 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 254)
        (nil)))
(call_insn/i 486 485 487 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:214 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 487 486 488 39 (set (reg:SI 126 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:214 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 488 487 489 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 126 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:214 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 126 [ D.5601 ])
        (nil)))
(jump_insn 489 488 490 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 534)
            (pc))) read_procpar.cpp:214 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 534)
;;  succ:       40 (FALLTHRU)
;;              43
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 127 128 255 256 257
(note 490 489 491 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 491 490 492 40 (set (reg:DI 255)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(insn 492 491 493 40 (parallel [
            (set (reg:DI 256)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:216 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 493 492 494 40 (set (reg:DI 1 dx)
        (reg:DI 255)) read_procpar.cpp:216 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 255)
        (nil)))
(insn 494 493 495 40 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:216 90 {*movsi_internal}
     (nil))
(insn 495 494 496 40 (set (reg:DI 5 di)
        (reg:DI 256)) read_procpar.cpp:216 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 256)
        (nil)))
(call_insn 496 495 497 40 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:216 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 497 496 498 40 (set (reg:DI 257)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:217 89 {*movdi_internal}
     (nil))
(insn 498 497 499 40 (set (reg:DI 5 di)
        (reg:DI 257)) read_procpar.cpp:217 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 257)
        (nil)))
(call_insn 499 498 500 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:217 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 500 499 501 40 (set (reg:SI 127 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:217 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 501 500 502 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 127 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:217 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 127 [ D.5601 ])
        (nil)))
(insn 502 501 503 40 (set (reg:QI 128 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:217 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 503 502 504 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 128 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:217 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 128 [ D.5602 ])
        (nil)))
(jump_insn 504 503 505 40 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 511)
            (pc))) read_procpar.cpp:217 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 511)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 505 504 506 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 506 505 507 41 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:218 89 {*movdi_internal}
     (nil))
(call_insn 507 506 508 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:218 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 508 507 509 41 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:219 90 {*movsi_internal}
     (nil))
(call_insn 509 508 510 41 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:219 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 510 509 511)
;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 129 130 258 259 260 261 262
(code_label 511 510 512 42 23 "" [1 uses])
(note 512 511 513 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 513 512 514 42 (parallel [
            (set (reg:DI 258)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:223 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 514 513 515 42 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(insn 515 514 516 42 (set (reg:DI 5 di)
        (reg:DI 258)) read_procpar.cpp:223 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 258)
        (nil)))
(call_insn 516 515 517 42 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:223 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 517 516 518 42 (set (reg:DI 259)
        (reg:DI 0 ax)) read_procpar.cpp:223 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 518 517 519 42 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 259)) read_procpar.cpp:223 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 259)
        (nil)))
(insn 519 518 520 42 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(insn 520 519 521 42 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(call_insn 521 520 522 42 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:224 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 522 521 523 42 (set (reg:DI 260)
        (reg:DI 0 ax)) read_procpar.cpp:224 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 523 522 524 42 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 260)) read_procpar.cpp:224 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 260)
        (nil)))
(insn 524 523 525 42 (set (reg:DI 261)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:225 89 {*movdi_internal}
     (nil))
(insn 525 524 526 42 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:225 89 {*movdi_internal}
     (nil))
(insn 526 525 527 42 (set (reg:DI 5 di)
        (reg:DI 261)) read_procpar.cpp:225 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 261)
        (nil)))
(call_insn 527 526 528 42 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:225 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 528 527 529 42 (set (reg:DF 129 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:225 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 529 528 530 42 (set (reg:SF 130 [ D.5604 ])
        (float_truncate:SF (reg:DF 129 [ D.5603 ]))) read_procpar.cpp:225 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 129 [ D.5603 ])
        (nil)))
(insn 530 529 531 42 (set (reg/f:DI 262)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:225 89 {*movdi_internal}
     (nil))
(insn 531 530 1039 42 (set (mem/j:SF (plus:DI (reg/f:DI 262)
                (const_int 324 [0x144])) [0 procpar_info_23(D)->tm+0 S4 A32])
        (reg:SF 130 [ D.5604 ])) read_procpar.cpp:225 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 262)
        (expr_list:REG_DEAD (reg:SF 130 [ D.5604 ])
            (nil))))
(jump_insn 1039 531 1040 42 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1040 1039 534)
;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 131 263
(code_label 534 1040 535 43 22 "" [1 uses])
(note 535 534 536 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 536 535 537 43 (set (reg:DI 263)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:227 89 {*movdi_internal}
     (nil))
(insn 537 536 538 43 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b04d6425000 *.LC16>)) read_procpar.cpp:227 89 {*movdi_internal}
     (nil))
(insn 538 537 539 43 (set (reg:DI 5 di)
        (reg:DI 263)) read_procpar.cpp:227 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 263)
        (nil)))
(call_insn/i 539 538 540 43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:227 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 540 539 541 43 (set (reg:SI 131 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:227 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 541 540 542 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 131 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:227 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 131 [ D.5601 ])
        (nil)))
(jump_insn 542 541 543 43 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 587)
            (pc))) read_procpar.cpp:227 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 587)
;;  succ:       44 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 132 133 264 265 266
(note 543 542 544 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 544 543 545 44 (set (reg:DI 264)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:229 89 {*movdi_internal}
     (nil))
(insn 545 544 546 44 (parallel [
            (set (reg:DI 265)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:229 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 546 545 547 44 (set (reg:DI 1 dx)
        (reg:DI 264)) read_procpar.cpp:229 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 264)
        (nil)))
(insn 547 546 548 44 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:229 90 {*movsi_internal}
     (nil))
(insn 548 547 549 44 (set (reg:DI 5 di)
        (reg:DI 265)) read_procpar.cpp:229 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 265)
        (nil)))
(call_insn 549 548 550 44 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:229 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 550 549 551 44 (set (reg:DI 266)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:230 89 {*movdi_internal}
     (nil))
(insn 551 550 552 44 (set (reg:DI 5 di)
        (reg:DI 266)) read_procpar.cpp:230 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 266)
        (nil)))
(call_insn 552 551 553 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:230 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 553 552 554 44 (set (reg:SI 132 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:230 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 554 553 555 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 132 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:230 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 132 [ D.5601 ])
        (nil)))
(insn 555 554 556 44 (set (reg:QI 133 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:230 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 556 555 557 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 133 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:230 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 133 [ D.5602 ])
        (nil)))
(jump_insn 557 556 558 44 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 564)
            (pc))) read_procpar.cpp:230 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 564)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 558 557 559 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 559 558 560 45 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:231 89 {*movdi_internal}
     (nil))
(call_insn 560 559 561 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:231 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 561 560 562 45 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:232 90 {*movsi_internal}
     (nil))
(call_insn 562 561 563 45 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:232 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 563 562 564)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 134 135 267 268 269 270 271
(code_label 564 563 565 46 25 "" [1 uses])
(note 565 564 566 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 566 565 567 46 (parallel [
            (set (reg:DI 267)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:236 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 567 566 568 46 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:236 89 {*movdi_internal}
     (nil))
(insn 568 567 569 46 (set (reg:DI 5 di)
        (reg:DI 267)) read_procpar.cpp:236 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 267)
        (nil)))
(call_insn 569 568 570 46 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:236 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 570 569 571 46 (set (reg:DI 268)
        (reg:DI 0 ax)) read_procpar.cpp:236 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 571 570 572 46 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 268)) read_procpar.cpp:236 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 268)
        (nil)))
(insn 572 571 573 46 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:237 89 {*movdi_internal}
     (nil))
(insn 573 572 574 46 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:237 89 {*movdi_internal}
     (nil))
(call_insn 574 573 575 46 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:237 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 575 574 576 46 (set (reg:DI 269)
        (reg:DI 0 ax)) read_procpar.cpp:237 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 576 575 577 46 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 269)) read_procpar.cpp:237 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 269)
        (nil)))
(insn 577 576 578 46 (set (reg:DI 270)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:238 89 {*movdi_internal}
     (nil))
(insn 578 577 579 46 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:238 89 {*movdi_internal}
     (nil))
(insn 579 578 580 46 (set (reg:DI 5 di)
        (reg:DI 270)) read_procpar.cpp:238 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 270)
        (nil)))
(call_insn 580 579 581 46 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:238 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 581 580 582 46 (set (reg:DF 134 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:238 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 582 581 583 46 (set (reg:SF 135 [ D.5604 ])
        (float_truncate:SF (reg:DF 134 [ D.5603 ]))) read_procpar.cpp:238 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 134 [ D.5603 ])
        (nil)))
(insn 583 582 584 46 (set (reg/f:DI 271)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:238 89 {*movdi_internal}
     (nil))
(insn 584 583 1041 46 (set (mem/j:SF (plus:DI (reg/f:DI 271)
                (const_int 328 [0x148])) [0 procpar_info_23(D)->gain+0 S4 A64])
        (reg:SF 135 [ D.5604 ])) read_procpar.cpp:238 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 271)
        (expr_list:REG_DEAD (reg:SF 135 [ D.5604 ])
            (nil))))
(jump_insn 1041 584 1042 46 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1042 1041 587)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 136 272
(code_label 587 1042 588 47 24 "" [1 uses])
(note 588 587 589 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 589 588 590 47 (set (reg:DI 272)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:240 89 {*movdi_internal}
     (nil))
(insn 590 589 591 47 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b04d6425098 *.LC17>)) read_procpar.cpp:240 89 {*movdi_internal}
     (nil))
(insn 591 590 592 47 (set (reg:DI 5 di)
        (reg:DI 272)) read_procpar.cpp:240 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 272)
        (nil)))
(call_insn/i 592 591 593 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:240 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 593 592 594 47 (set (reg:SI 136 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:240 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 594 593 595 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 136 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:240 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 136 [ D.5601 ])
        (nil)))
(jump_insn 595 594 596 47 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 640)
            (pc))) read_procpar.cpp:240 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 640)
;;  succ:       48 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 137 138 273 274 275
(note 596 595 597 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 597 596 598 48 (set (reg:DI 273)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:242 89 {*movdi_internal}
     (nil))
(insn 598 597 599 48 (parallel [
            (set (reg:DI 274)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:242 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 599 598 600 48 (set (reg:DI 1 dx)
        (reg:DI 273)) read_procpar.cpp:242 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 273)
        (nil)))
(insn 600 599 601 48 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:242 90 {*movsi_internal}
     (nil))
(insn 601 600 602 48 (set (reg:DI 5 di)
        (reg:DI 274)) read_procpar.cpp:242 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 274)
        (nil)))
(call_insn 602 601 603 48 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:242 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 603 602 604 48 (set (reg:DI 275)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:243 89 {*movdi_internal}
     (nil))
(insn 604 603 605 48 (set (reg:DI 5 di)
        (reg:DI 275)) read_procpar.cpp:243 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 275)
        (nil)))
(call_insn 605 604 606 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:243 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 606 605 607 48 (set (reg:SI 137 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:243 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 607 606 608 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 137 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:243 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 137 [ D.5601 ])
        (nil)))
(insn 608 607 609 48 (set (reg:QI 138 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:243 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 609 608 610 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 138 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:243 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 138 [ D.5602 ])
        (nil)))
(jump_insn 610 609 611 48 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 617)
            (pc))) read_procpar.cpp:243 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 617)
;;  succ:       49 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 611 610 612 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 612 611 613 49 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:244 89 {*movdi_internal}
     (nil))
(call_insn 613 612 614 49 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:244 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 614 613 615 49 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:245 90 {*movsi_internal}
     (nil))
(call_insn 615 614 616 49 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:245 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 616 615 617)
;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 139 140 276 277 278 279 280
(code_label 617 616 618 50 27 "" [1 uses])
(note 618 617 619 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 619 618 620 50 (parallel [
            (set (reg:DI 276)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:249 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 620 619 621 50 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:249 89 {*movdi_internal}
     (nil))
(insn 621 620 622 50 (set (reg:DI 5 di)
        (reg:DI 276)) read_procpar.cpp:249 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 276)
        (nil)))
(call_insn 622 621 623 50 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:249 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 623 622 624 50 (set (reg:DI 277)
        (reg:DI 0 ax)) read_procpar.cpp:249 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 624 623 625 50 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 277)) read_procpar.cpp:249 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 277)
        (nil)))
(insn 625 624 626 50 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:250 89 {*movdi_internal}
     (nil))
(insn 626 625 627 50 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:250 89 {*movdi_internal}
     (nil))
(call_insn 627 626 628 50 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:250 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 628 627 629 50 (set (reg:DI 278)
        (reg:DI 0 ax)) read_procpar.cpp:250 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 629 628 630 50 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 278)) read_procpar.cpp:250 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 278)
        (nil)))
(insn 630 629 631 50 (set (reg:DI 279)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(insn 631 630 632 50 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(insn 632 631 633 50 (set (reg:DI 5 di)
        (reg:DI 279)) read_procpar.cpp:251 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 279)
        (nil)))
(call_insn 633 632 634 50 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:251 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 634 633 635 50 (set (reg:DF 139 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:251 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 635 634 636 50 (set (reg:SF 140 [ D.5604 ])
        (float_truncate:SF (reg:DF 139 [ D.5603 ]))) read_procpar.cpp:251 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 139 [ D.5603 ])
        (nil)))
(insn 636 635 637 50 (set (reg/f:DI 280)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(insn 637 636 1043 50 (set (mem/j:SF (plus:DI (reg/f:DI 280)
                (const_int 332 [0x14c])) [0 procpar_info_23(D)->pos1+0 S4 A32])
        (reg:SF 140 [ D.5604 ])) read_procpar.cpp:251 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 280)
        (expr_list:REG_DEAD (reg:SF 140 [ D.5604 ])
            (nil))))
(jump_insn 1043 637 1044 50 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1044 1043 640)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 141 281
(code_label 640 1044 641 51 26 "" [1 uses])
(note 641 640 642 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 642 641 643 51 (set (reg:DI 281)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:253 89 {*movdi_internal}
     (nil))
(insn 643 642 644 51 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b04d6425130 *.LC18>)) read_procpar.cpp:253 89 {*movdi_internal}
     (nil))
(insn 644 643 645 51 (set (reg:DI 5 di)
        (reg:DI 281)) read_procpar.cpp:253 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 281)
        (nil)))
(call_insn/i 645 644 646 51 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:253 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 646 645 647 51 (set (reg:SI 141 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:253 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 647 646 648 51 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 141 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:253 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 141 [ D.5601 ])
        (nil)))
(jump_insn 648 647 649 51 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 693)
            (pc))) read_procpar.cpp:253 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 693)
;;  succ:       52 (FALLTHRU)
;;              55
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 142 143 282 283 284
(note 649 648 650 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 650 649 651 52 (set (reg:DI 282)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:255 89 {*movdi_internal}
     (nil))
(insn 651 650 652 52 (parallel [
            (set (reg:DI 283)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:255 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 652 651 653 52 (set (reg:DI 1 dx)
        (reg:DI 282)) read_procpar.cpp:255 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 282)
        (nil)))
(insn 653 652 654 52 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:255 90 {*movsi_internal}
     (nil))
(insn 654 653 655 52 (set (reg:DI 5 di)
        (reg:DI 283)) read_procpar.cpp:255 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 283)
        (nil)))
(call_insn 655 654 656 52 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:255 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 656 655 657 52 (set (reg:DI 284)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:256 89 {*movdi_internal}
     (nil))
(insn 657 656 658 52 (set (reg:DI 5 di)
        (reg:DI 284)) read_procpar.cpp:256 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 284)
        (nil)))
(call_insn 658 657 659 52 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:256 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 659 658 660 52 (set (reg:SI 142 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:256 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 660 659 661 52 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 142 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:256 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 142 [ D.5601 ])
        (nil)))
(insn 661 660 662 52 (set (reg:QI 143 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:256 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 662 661 663 52 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 143 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:256 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 143 [ D.5602 ])
        (nil)))
(jump_insn 663 662 664 52 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 670)
            (pc))) read_procpar.cpp:256 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 670)
;;  succ:       53 (FALLTHRU)
;;              54
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52 (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 664 663 665 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 665 664 666 53 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:257 89 {*movdi_internal}
     (nil))
(call_insn 666 665 667 53 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:257 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 667 666 668 53 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:258 90 {*movsi_internal}
     (nil))
(call_insn 668 667 669 53 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:258 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 669 668 670)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 144 145 285 286 287 288 289
(code_label 670 669 671 54 29 "" [1 uses])
(note 671 670 672 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 672 671 673 54 (parallel [
            (set (reg:DI 285)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:262 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 673 672 674 54 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:262 89 {*movdi_internal}
     (nil))
(insn 674 673 675 54 (set (reg:DI 5 di)
        (reg:DI 285)) read_procpar.cpp:262 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 285)
        (nil)))
(call_insn 675 674 676 54 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:262 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 676 675 677 54 (set (reg:DI 286)
        (reg:DI 0 ax)) read_procpar.cpp:262 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 677 676 678 54 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 286)) read_procpar.cpp:262 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 286)
        (nil)))
(insn 678 677 679 54 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:263 89 {*movdi_internal}
     (nil))
(insn 679 678 680 54 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:263 89 {*movdi_internal}
     (nil))
(call_insn 680 679 681 54 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:263 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 681 680 682 54 (set (reg:DI 287)
        (reg:DI 0 ax)) read_procpar.cpp:263 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 682 681 683 54 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 287)) read_procpar.cpp:263 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 287)
        (nil)))
(insn 683 682 684 54 (set (reg:DI 288)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(insn 684 683 685 54 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(insn 685 684 686 54 (set (reg:DI 5 di)
        (reg:DI 288)) read_procpar.cpp:264 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 288)
        (nil)))
(call_insn 686 685 687 54 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:264 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 687 686 688 54 (set (reg:DF 144 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:264 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 688 687 689 54 (set (reg:SF 145 [ D.5604 ])
        (float_truncate:SF (reg:DF 144 [ D.5603 ]))) read_procpar.cpp:264 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 144 [ D.5603 ])
        (nil)))
(insn 689 688 690 54 (set (reg/f:DI 289)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(insn 690 689 1045 54 (set (mem/j:SF (plus:DI (reg/f:DI 289)
                (const_int 336 [0x150])) [0 procpar_info_23(D)->pos2+0 S4 A64])
        (reg:SF 145 [ D.5604 ])) read_procpar.cpp:264 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 289)
        (expr_list:REG_DEAD (reg:SF 145 [ D.5604 ])
            (nil))))
(jump_insn 1045 690 1046 54 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1046 1045 693)
;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 146 290
(code_label 693 1046 694 55 28 "" [1 uses])
(note 694 693 695 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 695 694 696 55 (set (reg:DI 290)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:266 89 {*movdi_internal}
     (nil))
(insn 696 695 697 55 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x2b04d64251c8 *.LC19>)) read_procpar.cpp:266 89 {*movdi_internal}
     (nil))
(insn 697 696 698 55 (set (reg:DI 5 di)
        (reg:DI 290)) read_procpar.cpp:266 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 290)
        (nil)))
(call_insn/i 698 697 699 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:266 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 699 698 700 55 (set (reg:SI 146 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:266 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 700 699 701 55 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 146 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:266 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 146 [ D.5601 ])
        (nil)))
(jump_insn 701 700 702 55 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 746)
            (pc))) read_procpar.cpp:266 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 746)
;;  succ:       56 (FALLTHRU)
;;              59
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55 (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 147 148 291 292 293
(note 702 701 703 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 703 702 704 56 (set (reg:DI 291)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:268 89 {*movdi_internal}
     (nil))
(insn 704 703 705 56 (parallel [
            (set (reg:DI 292)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:268 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 705 704 706 56 (set (reg:DI 1 dx)
        (reg:DI 291)) read_procpar.cpp:268 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 291)
        (nil)))
(insn 706 705 707 56 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:268 90 {*movsi_internal}
     (nil))
(insn 707 706 708 56 (set (reg:DI 5 di)
        (reg:DI 292)) read_procpar.cpp:268 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 292)
        (nil)))
(call_insn 708 707 709 56 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:268 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 709 708 710 56 (set (reg:DI 293)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:269 89 {*movdi_internal}
     (nil))
(insn 710 709 711 56 (set (reg:DI 5 di)
        (reg:DI 293)) read_procpar.cpp:269 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 293)
        (nil)))
(call_insn 711 710 712 56 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:269 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 712 711 713 56 (set (reg:SI 147 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:269 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 713 712 714 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 147 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:269 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 147 [ D.5601 ])
        (nil)))
(insn 714 713 715 56 (set (reg:QI 148 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:269 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 715 714 716 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 148 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:269 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 148 [ D.5602 ])
        (nil)))
(jump_insn 716 715 717 56 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 723)
            (pc))) read_procpar.cpp:269 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 723)
;;  succ:       57 (FALLTHRU)
;;              58
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56 (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 717 716 718 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 718 717 719 57 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:270 89 {*movdi_internal}
     (nil))
(call_insn 719 718 720 57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:270 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 720 719 721 57 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:271 90 {*movsi_internal}
     (nil))
(call_insn 721 720 722 57 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:271 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 722 721 723)
;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 149 150 294 295 296 297 298
(code_label 723 722 724 58 31 "" [1 uses])
(note 724 723 725 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 725 724 726 58 (parallel [
            (set (reg:DI 294)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:275 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 726 725 727 58 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:275 89 {*movdi_internal}
     (nil))
(insn 727 726 728 58 (set (reg:DI 5 di)
        (reg:DI 294)) read_procpar.cpp:275 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 294)
        (nil)))
(call_insn 728 727 729 58 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:275 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 729 728 730 58 (set (reg:DI 295)
        (reg:DI 0 ax)) read_procpar.cpp:275 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 730 729 731 58 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 295)) read_procpar.cpp:275 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 295)
        (nil)))
(insn 731 730 732 58 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:276 89 {*movdi_internal}
     (nil))
(insn 732 731 733 58 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:276 89 {*movdi_internal}
     (nil))
(call_insn 733 732 734 58 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:276 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 734 733 735 58 (set (reg:DI 296)
        (reg:DI 0 ax)) read_procpar.cpp:276 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 735 734 736 58 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 296)) read_procpar.cpp:276 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 296)
        (nil)))
(insn 736 735 737 58 (set (reg:DI 297)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:277 89 {*movdi_internal}
     (nil))
(insn 737 736 738 58 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:277 89 {*movdi_internal}
     (nil))
(insn 738 737 739 58 (set (reg:DI 5 di)
        (reg:DI 297)) read_procpar.cpp:277 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 297)
        (nil)))
(call_insn 739 738 740 58 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:277 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 740 739 741 58 (set (reg:DF 149 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:277 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 741 740 742 58 (set (reg:SF 150 [ D.5604 ])
        (float_truncate:SF (reg:DF 149 [ D.5603 ]))) read_procpar.cpp:277 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 149 [ D.5603 ])
        (nil)))
(insn 742 741 743 58 (set (reg/f:DI 298)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:277 89 {*movdi_internal}
     (nil))
(insn 743 742 1047 58 (set (mem/j:SF (plus:DI (reg/f:DI 298)
                (const_int 340 [0x154])) [0 procpar_info_23(D)->pos3+0 S4 A32])
        (reg:SF 150 [ D.5604 ])) read_procpar.cpp:277 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 298)
        (expr_list:REG_DEAD (reg:SF 150 [ D.5604 ])
            (nil))))
(jump_insn 1047 743 1048 58 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1048 1047 746)
;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 151 299
(code_label 746 1048 747 59 30 "" [1 uses])
(note 747 746 748 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 748 747 749 59 (set (reg:DI 299)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:279 89 {*movdi_internal}
     (nil))
(insn 749 748 750 59 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x2b04d6425260 *.LC20>)) read_procpar.cpp:279 89 {*movdi_internal}
     (nil))
(insn 750 749 751 59 (set (reg:DI 5 di)
        (reg:DI 299)) read_procpar.cpp:279 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 299)
        (nil)))
(call_insn/i 751 750 752 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:279 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 752 751 753 59 (set (reg:SI 151 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:279 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 753 752 754 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 151 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:279 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 151 [ D.5601 ])
        (nil)))
(jump_insn 754 753 755 59 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 799)
            (pc))) read_procpar.cpp:279 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 799)
;;  succ:       60 (FALLTHRU)
;;              63
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59 (FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 152 153 300 301 302
(note 755 754 756 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 756 755 757 60 (set (reg:DI 300)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:281 89 {*movdi_internal}
     (nil))
(insn 757 756 758 60 (parallel [
            (set (reg:DI 301)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:281 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 758 757 759 60 (set (reg:DI 1 dx)
        (reg:DI 300)) read_procpar.cpp:281 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 300)
        (nil)))
(insn 759 758 760 60 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:281 90 {*movsi_internal}
     (nil))
(insn 760 759 761 60 (set (reg:DI 5 di)
        (reg:DI 301)) read_procpar.cpp:281 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 301)
        (nil)))
(call_insn 761 760 762 60 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:281 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 762 761 763 60 (set (reg:DI 302)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:282 89 {*movdi_internal}
     (nil))
(insn 763 762 764 60 (set (reg:DI 5 di)
        (reg:DI 302)) read_procpar.cpp:282 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 302)
        (nil)))
(call_insn 764 763 765 60 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:282 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 765 764 766 60 (set (reg:SI 152 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:282 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 766 765 767 60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 152 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:282 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 152 [ D.5601 ])
        (nil)))
(insn 767 766 768 60 (set (reg:QI 153 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:282 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 768 767 769 60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 153 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:282 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 153 [ D.5602 ])
        (nil)))
(jump_insn 769 768 770 60 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 776)
            (pc))) read_procpar.cpp:282 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 776)
;;  succ:       61 (FALLTHRU)
;;              62
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 770 769 771 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 771 770 772 61 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:283 89 {*movdi_internal}
     (nil))
(call_insn 772 771 773 61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:283 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 773 772 774 61 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:284 90 {*movsi_internal}
     (nil))
(call_insn 774 773 775 61 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:284 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 775 774 776)
;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 154 155 303 304 305 306 307
(code_label 776 775 777 62 33 "" [1 uses])
(note 777 776 778 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 778 777 779 62 (parallel [
            (set (reg:DI 303)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:288 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 779 778 780 62 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:288 89 {*movdi_internal}
     (nil))
(insn 780 779 781 62 (set (reg:DI 5 di)
        (reg:DI 303)) read_procpar.cpp:288 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 303)
        (nil)))
(call_insn 781 780 782 62 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:288 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 782 781 783 62 (set (reg:DI 304)
        (reg:DI 0 ax)) read_procpar.cpp:288 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 783 782 784 62 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 304)) read_procpar.cpp:288 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 304)
        (nil)))
(insn 784 783 785 62 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:289 89 {*movdi_internal}
     (nil))
(insn 785 784 786 62 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:289 89 {*movdi_internal}
     (nil))
(call_insn 786 785 787 62 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:289 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 787 786 788 62 (set (reg:DI 305)
        (reg:DI 0 ax)) read_procpar.cpp:289 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 788 787 789 62 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 305)) read_procpar.cpp:289 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 305)
        (nil)))
(insn 789 788 790 62 (set (reg:DI 306)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:290 89 {*movdi_internal}
     (nil))
(insn 790 789 791 62 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:290 89 {*movdi_internal}
     (nil))
(insn 791 790 792 62 (set (reg:DI 5 di)
        (reg:DI 306)) read_procpar.cpp:290 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 306)
        (nil)))
(call_insn 792 791 793 62 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:290 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 793 792 794 62 (set (reg:DF 154 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:290 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 794 793 795 62 (set (reg:SF 155 [ D.5604 ])
        (float_truncate:SF (reg:DF 154 [ D.5603 ]))) read_procpar.cpp:290 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 154 [ D.5603 ])
        (nil)))
(insn 795 794 796 62 (set (reg/f:DI 307)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:290 89 {*movdi_internal}
     (nil))
(insn 796 795 1049 62 (set (mem/j:SF (plus:DI (reg/f:DI 307)
                (const_int 344 [0x158])) [0 procpar_info_23(D)->vox1+0 S4 A64])
        (reg:SF 155 [ D.5604 ])) read_procpar.cpp:290 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 307)
        (expr_list:REG_DEAD (reg:SF 155 [ D.5604 ])
            (nil))))
(jump_insn 1049 796 1050 62 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1050 1049 799)
;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 156 308
(code_label 799 1050 800 63 32 "" [1 uses])
(note 800 799 801 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 801 800 802 63 (set (reg:DI 308)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:292 89 {*movdi_internal}
     (nil))
(insn 802 801 803 63 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x2b04d64252f8 *.LC21>)) read_procpar.cpp:292 89 {*movdi_internal}
     (nil))
(insn 803 802 804 63 (set (reg:DI 5 di)
        (reg:DI 308)) read_procpar.cpp:292 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 308)
        (nil)))
(call_insn/i 804 803 805 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:292 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 805 804 806 63 (set (reg:SI 156 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:292 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 806 805 807 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 156 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:292 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 156 [ D.5601 ])
        (nil)))
(jump_insn 807 806 808 63 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 852)
            (pc))) read_procpar.cpp:292 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 852)
;;  succ:       64 (FALLTHRU)
;;              67
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 157 158 309 310 311
(note 808 807 809 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 809 808 810 64 (set (reg:DI 309)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:294 89 {*movdi_internal}
     (nil))
(insn 810 809 811 64 (parallel [
            (set (reg:DI 310)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:294 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 811 810 812 64 (set (reg:DI 1 dx)
        (reg:DI 309)) read_procpar.cpp:294 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 309)
        (nil)))
(insn 812 811 813 64 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:294 90 {*movsi_internal}
     (nil))
(insn 813 812 814 64 (set (reg:DI 5 di)
        (reg:DI 310)) read_procpar.cpp:294 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 310)
        (nil)))
(call_insn 814 813 815 64 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:294 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 815 814 816 64 (set (reg:DI 311)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:295 89 {*movdi_internal}
     (nil))
(insn 816 815 817 64 (set (reg:DI 5 di)
        (reg:DI 311)) read_procpar.cpp:295 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 311)
        (nil)))
(call_insn 817 816 818 64 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:295 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 818 817 819 64 (set (reg:SI 157 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:295 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 819 818 820 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 157 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:295 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 157 [ D.5601 ])
        (nil)))
(insn 820 819 821 64 (set (reg:QI 158 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:295 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 821 820 822 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 158 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:295 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 158 [ D.5602 ])
        (nil)))
(jump_insn 822 821 823 64 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 829)
            (pc))) read_procpar.cpp:295 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 829)
;;  succ:       65 (FALLTHRU)
;;              66
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64 (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 823 822 824 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 824 823 825 65 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:296 89 {*movdi_internal}
     (nil))
(call_insn 825 824 826 65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:296 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 826 825 827 65 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:297 90 {*movsi_internal}
     (nil))
(call_insn 827 826 828 65 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:297 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 828 827 829)
;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 159 160 312 313 314 315 316
(code_label 829 828 830 66 35 "" [1 uses])
(note 830 829 831 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 831 830 832 66 (parallel [
            (set (reg:DI 312)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:301 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 832 831 833 66 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:301 89 {*movdi_internal}
     (nil))
(insn 833 832 834 66 (set (reg:DI 5 di)
        (reg:DI 312)) read_procpar.cpp:301 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 312)
        (nil)))
(call_insn 834 833 835 66 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:301 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 835 834 836 66 (set (reg:DI 313)
        (reg:DI 0 ax)) read_procpar.cpp:301 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 836 835 837 66 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 313)) read_procpar.cpp:301 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 313)
        (nil)))
(insn 837 836 838 66 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:302 89 {*movdi_internal}
     (nil))
(insn 838 837 839 66 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:302 89 {*movdi_internal}
     (nil))
(call_insn 839 838 840 66 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:302 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 840 839 841 66 (set (reg:DI 314)
        (reg:DI 0 ax)) read_procpar.cpp:302 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 841 840 842 66 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 314)) read_procpar.cpp:302 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 314)
        (nil)))
(insn 842 841 843 66 (set (reg:DI 315)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:303 89 {*movdi_internal}
     (nil))
(insn 843 842 844 66 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:303 89 {*movdi_internal}
     (nil))
(insn 844 843 845 66 (set (reg:DI 5 di)
        (reg:DI 315)) read_procpar.cpp:303 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 315)
        (nil)))
(call_insn 845 844 846 66 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:303 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 846 845 847 66 (set (reg:DF 159 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:303 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 847 846 848 66 (set (reg:SF 160 [ D.5604 ])
        (float_truncate:SF (reg:DF 159 [ D.5603 ]))) read_procpar.cpp:303 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 159 [ D.5603 ])
        (nil)))
(insn 848 847 849 66 (set (reg/f:DI 316)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:303 89 {*movdi_internal}
     (nil))
(insn 849 848 1051 66 (set (mem/j:SF (plus:DI (reg/f:DI 316)
                (const_int 348 [0x15c])) [0 procpar_info_23(D)->vox2+0 S4 A32])
        (reg:SF 160 [ D.5604 ])) read_procpar.cpp:303 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 316)
        (expr_list:REG_DEAD (reg:SF 160 [ D.5604 ])
            (nil))))
(jump_insn 1051 849 1052 66 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1052 1051 852)
;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 161 317
(code_label 852 1052 853 67 34 "" [1 uses])
(note 853 852 854 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 854 853 855 67 (set (reg:DI 317)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:305 89 {*movdi_internal}
     (nil))
(insn 855 854 856 67 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2b04d6425390 *.LC22>)) read_procpar.cpp:305 89 {*movdi_internal}
     (nil))
(insn 856 855 857 67 (set (reg:DI 5 di)
        (reg:DI 317)) read_procpar.cpp:305 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 317)
        (nil)))
(call_insn/i 857 856 858 67 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:305 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 858 857 859 67 (set (reg:SI 161 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:305 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 859 858 860 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 161 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:305 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 161 [ D.5601 ])
        (nil)))
(jump_insn 860 859 861 67 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 905)
            (pc))) read_procpar.cpp:305 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 905)
;;  succ:       68 (FALLTHRU)
;;              71
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 (FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 162 163 318 319 320
(note 861 860 862 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 862 861 863 68 (set (reg:DI 318)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:307 89 {*movdi_internal}
     (nil))
(insn 863 862 864 68 (parallel [
            (set (reg:DI 319)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:307 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 864 863 865 68 (set (reg:DI 1 dx)
        (reg:DI 318)) read_procpar.cpp:307 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 318)
        (nil)))
(insn 865 864 866 68 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:307 90 {*movsi_internal}
     (nil))
(insn 866 865 867 68 (set (reg:DI 5 di)
        (reg:DI 319)) read_procpar.cpp:307 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 319)
        (nil)))
(call_insn 867 866 868 68 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:307 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 868 867 869 68 (set (reg:DI 320)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:308 89 {*movdi_internal}
     (nil))
(insn 869 868 870 68 (set (reg:DI 5 di)
        (reg:DI 320)) read_procpar.cpp:308 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 320)
        (nil)))
(call_insn 870 869 871 68 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:308 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 871 870 872 68 (set (reg:SI 162 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:308 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 872 871 873 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 162 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:308 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 162 [ D.5601 ])
        (nil)))
(insn 873 872 874 68 (set (reg:QI 163 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:308 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 874 873 875 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 163 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:308 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 163 [ D.5602 ])
        (nil)))
(jump_insn 875 874 876 68 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 882)
            (pc))) read_procpar.cpp:308 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 882)
;;  succ:       69 (FALLTHRU)
;;              70
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 876 875 877 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 877 876 878 69 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:309 89 {*movdi_internal}
     (nil))
(call_insn 878 877 879 69 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:309 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 879 878 880 69 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:310 90 {*movsi_internal}
     (nil))
(call_insn 880 879 881 69 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:310 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 881 880 882)
;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 164 165 321 322 323 324 325
(code_label 882 881 883 70 37 "" [1 uses])
(note 883 882 884 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 884 883 885 70 (parallel [
            (set (reg:DI 321)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:314 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 885 884 886 70 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:314 89 {*movdi_internal}
     (nil))
(insn 886 885 887 70 (set (reg:DI 5 di)
        (reg:DI 321)) read_procpar.cpp:314 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 321)
        (nil)))
(call_insn 887 886 888 70 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:314 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 888 887 889 70 (set (reg:DI 322)
        (reg:DI 0 ax)) read_procpar.cpp:314 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 889 888 890 70 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 322)) read_procpar.cpp:314 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 322)
        (nil)))
(insn 890 889 891 70 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:315 89 {*movdi_internal}
     (nil))
(insn 891 890 892 70 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:315 89 {*movdi_internal}
     (nil))
(call_insn 892 891 893 70 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:315 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 893 892 894 70 (set (reg:DI 323)
        (reg:DI 0 ax)) read_procpar.cpp:315 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 894 893 895 70 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 323)) read_procpar.cpp:315 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 323)
        (nil)))
(insn 895 894 896 70 (set (reg:DI 324)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:316 89 {*movdi_internal}
     (nil))
(insn 896 895 897 70 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:316 89 {*movdi_internal}
     (nil))
(insn 897 896 898 70 (set (reg:DI 5 di)
        (reg:DI 324)) read_procpar.cpp:316 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 324)
        (nil)))
(call_insn 898 897 899 70 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:316 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 899 898 900 70 (set (reg:DF 164 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:316 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 900 899 901 70 (set (reg:SF 165 [ D.5604 ])
        (float_truncate:SF (reg:DF 164 [ D.5603 ]))) read_procpar.cpp:316 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 164 [ D.5603 ])
        (nil)))
(insn 901 900 902 70 (set (reg/f:DI 325)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:316 89 {*movdi_internal}
     (nil))
(insn 902 901 1053 70 (set (mem/j:SF (plus:DI (reg/f:DI 325)
                (const_int 352 [0x160])) [0 procpar_info_23(D)->vox3+0 S4 A64])
        (reg:SF 165 [ D.5604 ])) read_procpar.cpp:316 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 325)
        (expr_list:REG_DEAD (reg:SF 165 [ D.5604 ])
            (nil))))
(jump_insn 1053 902 1054 70 (set (pc)
        (label_ref 956)) 636 {jump}
     (nil)
 -> 956)
;;  succ:       75 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1054 1053 905)
;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 166 326
(code_label 905 1054 906 71 36 "" [1 uses])
(note 906 905 907 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 907 906 908 71 (set (reg:DI 326)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:318 89 {*movdi_internal}
     (nil))
(insn 908 907 909 71 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x2b04d6425428 *.LC23>)) read_procpar.cpp:318 89 {*movdi_internal}
     (nil))
(insn 909 908 910 71 (set (reg:DI 5 di)
        (reg:DI 326)) read_procpar.cpp:318 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 326)
        (nil)))
(call_insn/i 910 909 911 71 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b04d60bd300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:318 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 911 910 912 71 (set (reg:SI 166 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:318 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 912 911 913 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 166 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:318 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 166 [ D.5601 ])
        (nil)))
(jump_insn 913 912 914 71 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 956)
            (pc))) read_procpar.cpp:318 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 956)
;;  succ:       72 (FALLTHRU)
;;              75
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 167 168 327 328 329
(note 914 913 915 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 915 914 916 72 (set (reg:DI 327)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:320 89 {*movdi_internal}
     (nil))
(insn 916 915 917 72 (parallel [
            (set (reg:DI 328)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:320 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 917 916 918 72 (set (reg:DI 1 dx)
        (reg:DI 327)) read_procpar.cpp:320 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 327)
        (nil)))
(insn 918 917 919 72 (set (reg:SI 4 si)
        (const_int 255 [0xff])) read_procpar.cpp:320 90 {*movsi_internal}
     (nil))
(insn 919 918 920 72 (set (reg:DI 5 di)
        (reg:DI 328)) read_procpar.cpp:320 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 328)
        (nil)))
(call_insn 920 919 921 72 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:320 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 921 920 922 72 (set (reg:DI 329)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:321 89 {*movdi_internal}
     (nil))
(insn 922 921 923 72 (set (reg:DI 5 di)
        (reg:DI 329)) read_procpar.cpp:321 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 329)
        (nil)))
(call_insn 923 922 924 72 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:321 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 924 923 925 72 (set (reg:SI 167 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:321 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 925 924 926 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 167 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:321 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 167 [ D.5601 ])
        (nil)))
(insn 926 925 927 72 (set (reg:QI 168 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:321 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 927 926 928 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 168 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:321 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 168 [ D.5602 ])
        (nil)))
(jump_insn 928 927 929 72 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 935)
            (pc))) read_procpar.cpp:321 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 935)
;;  succ:       73 (FALLTHRU)
;;              74
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 929 928 930 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 930 929 931 73 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:322 89 {*movdi_internal}
     (nil))
(call_insn 931 930 932 73 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:322 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 932 931 933 73 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:323 90 {*movsi_internal}
     (nil))
(call_insn 933 932 934 73 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:323 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 934 933 935)
;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 169 170 330 331 332 333 334
(code_label 935 934 936 74 38 "" [1 uses])
(note 936 935 937 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 937 936 938 74 (parallel [
            (set (reg:DI 330)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:327 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 938 937 939 74 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:327 89 {*movdi_internal}
     (nil))
(insn 939 938 940 74 (set (reg:DI 5 di)
        (reg:DI 330)) read_procpar.cpp:327 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 330)
        (nil)))
(call_insn 940 939 941 74 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:327 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 941 940 942 74 (set (reg:DI 331)
        (reg:DI 0 ax)) read_procpar.cpp:327 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 942 941 943 74 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 331)) read_procpar.cpp:327 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 331)
        (nil)))
(insn 943 942 944 74 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b04d640a8e8 *.LC5>)) read_procpar.cpp:328 89 {*movdi_internal}
     (nil))
(insn 944 943 945 74 (set (reg:DI 5 di)
        (const_int 0 [0])) read_procpar.cpp:328 89 {*movdi_internal}
     (nil))
(call_insn 945 944 946 74 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b04d62faa00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:328 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 946 945 947 74 (set (reg:DI 332)
        (reg:DI 0 ax)) read_procpar.cpp:328 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 947 946 948 74 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])
        (reg:DI 332)) read_procpar.cpp:328 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 332)
        (nil)))
(insn 948 947 949 74 (set (reg:DI 333)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50024 [0xffffffffffff3c98])) [0 token+0 S8 A64])) read_procpar.cpp:329 89 {*movdi_internal}
     (nil))
(insn 949 948 950 74 (set (reg:DI 4 si)
        (const_int 0 [0])) read_procpar.cpp:329 89 {*movdi_internal}
     (nil))
(insn 950 949 951 74 (set (reg:DI 5 di)
        (reg:DI 333)) read_procpar.cpp:329 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 333)
        (nil)))
(call_insn 951 950 952 74 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b04d634d000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:329 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 952 951 953 74 (set (reg:DF 169 [ D.5603 ])
        (reg:DF 21 xmm0)) read_procpar.cpp:329 128 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 21 xmm0)
        (nil)))
(insn 953 952 954 74 (set (reg:SF 170 [ D.5604 ])
        (float_truncate:SF (reg:DF 169 [ D.5603 ]))) read_procpar.cpp:329 157 {*truncdfsf_fast_sse}
     (expr_list:REG_DEAD (reg:DF 169 [ D.5603 ])
        (nil)))
(insn 954 953 955 74 (set (reg/f:DI 334)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50056 [0xffffffffffff3c78])) [0 procpar_info+0 S8 A64])) read_procpar.cpp:329 89 {*movdi_internal}
     (nil))
(insn 955 954 956 74 (set (mem/j:SF (plus:DI (reg/f:DI 334)
                (const_int 368 [0x170])) [0 procpar_info_23(D)->vtheta+0 S4 A64])
        (reg:SF 170 [ D.5604 ])) read_procpar.cpp:329 129 {*movsf_internal}
     (expr_list:REG_DEAD (reg/f:DI 334)
        (expr_list:REG_DEAD (reg:SF 170 [ D.5604 ])
            (nil))))
;;  succ:       75 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       74 (FALLTHRU)
;;              10 [100.0%] 
;;              14 [100.0%] 
;;              18 [100.0%] 
;;              22 [100.0%] 
;;              26 [100.0%] 
;;              30 [100.0%] 
;;              34 [100.0%] 
;;              38 [100.0%] 
;;              42 [100.0%] 
;;              46 [100.0%] 
;;              50 [100.0%] 
;;              54 [100.0%] 
;;              58 [100.0%] 
;;              62 [100.0%] 
;;              66 [100.0%] 
;;              71
;;              70 [100.0%] 
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 335 336
(code_label 956 955 957 75 7 "" [17 uses])
(note 957 956 958 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 958 957 959 75 (set (reg:DI 335)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:339 89 {*movdi_internal}
     (nil))
(insn 959 958 960 75 (parallel [
            (set (reg:DI 336)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -50016 [0xffffffffffff3ca0])))
            (clobber (reg:CC 17 flags))
        ]) read_procpar.cpp:339 221 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 960 959 961 75 (set (reg:DI 1 dx)
        (reg:DI 335)) read_procpar.cpp:339 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 335)
        (nil)))
(insn 961 960 962 75 (set (reg:SI 4 si)
        (const_int 5000 [0x1388])) read_procpar.cpp:339 90 {*movsi_internal}
     (nil))
(insn 962 961 963 75 (set (reg:DI 5 di)
        (reg:DI 336)) read_procpar.cpp:339 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 336)
        (nil)))
(call_insn 963 962 964 75 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b04d628bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:339 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:DI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       76 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 171 172 337
(note 964 963 965 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 965 964 966 76 (set (reg:DI 337)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:341 89 {*movdi_internal}
     (nil))
(insn 966 965 967 76 (set (reg:DI 5 di)
        (reg:DI 337)) read_procpar.cpp:341 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 337)
        (nil)))
(call_insn 967 966 968 76 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b04d6292c00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:341 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 968 967 969 76 (set (reg:SI 171 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:341 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 969 968 970 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 171 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:341 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 171 [ D.5601 ])
        (nil)))
(insn 970 969 971 76 (set (reg:QI 172 [ D.5602 ])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:341 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 971 970 972 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 172 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:341 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 172 [ D.5602 ])
        (nil)))
(jump_insn 972 971 973 76 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 979)
            (pc))) read_procpar.cpp:341 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 979)
;;  succ:       77 (FALLTHRU)
;;              78 (DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 (FALLTHRU)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 973 972 974 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 974 973 975 77 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b04d640a720 *.LC2>)) read_procpar.cpp:342 89 {*movdi_internal}
     (nil))
(call_insn 975 974 976 77 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:342 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 976 975 977 77 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_procpar.cpp:343 90 {*movsi_internal}
     (nil))
(call_insn 977 976 978 77 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b04d60e5900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_procpar.cpp:343 642 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 978 977 979)
;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 (DFS_BACK)
;;              6 [100.0%] 
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 87 88 338
(code_label 979 978 980 78 4 "" [2 uses])
(note 980 979 981 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 981 980 982 78 (set (reg:DI 338)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:51 89 {*movdi_internal}
     (nil))
(insn 982 981 983 78 (set (reg:DI 5 di)
        (reg:DI 338)) read_procpar.cpp:51 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 338)
        (nil)))
(call_insn 983 982 984 78 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("feof") [flags 0x41]  <function_decl 0x2b04d6292b00 feof>) [0 feof S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:51 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 984 983 985 78 (set (reg:SI 87 [ D.5601 ])
        (reg:SI 0 ax)) read_procpar.cpp:51 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 985 984 986 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ D.5601 ])
            (const_int 0 [0]))) read_procpar.cpp:51 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 87 [ D.5601 ])
        (nil)))
(insn 986 985 988 78 (set (reg:QI 88 [ D.5602 ])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) read_procpar.cpp:51 592 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(insn 988 986 989 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 88 [ D.5602 ])
            (const_int 0 [0]))) read_procpar.cpp:51 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 88 [ D.5602 ])
        (nil)))
(jump_insn 989 988 990 78 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 987)
            (pc))) read_procpar.cpp:51 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 987)
;;  succ:       7
;;              79 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 990 989 991 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 991 990 992 79 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])
            (const_int 0 [0]))) read_procpar.cpp:354 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 992 991 993 79 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1002)
            (pc))) read_procpar.cpp:354 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 1002)
;;  succ:       80 (FALLTHRU)
;;              81
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79 (FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 173 339
(note 993 992 994 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 994 993 995 80 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b04d64254c0 *.LC24>)) read_procpar.cpp:356 89 {*movdi_internal}
     (nil))
(call_insn 995 994 996 80 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b04d60ca900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:356 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 996 995 997 80 (set (reg/f:DI 173 [ D.5607 ])
        (mem/f/c:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x2b04d627c098 stdout>) [0 stdout+0 S8 A64])) read_procpar.cpp:357 89 {*movdi_internal}
     (nil))
(insn 997 996 998 80 (set (reg:DI 5 di)
        (reg/f:DI 173 [ D.5607 ])) read_procpar.cpp:357 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 173 [ D.5607 ])
        (nil)))
(call_insn 998 997 999 80 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fflush") [flags 0x41]  <function_decl 0x2b04d627ba00 fflush>) [0 fflush S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:357 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 999 998 1000 80 (set (reg:DI 339)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -50032 [0xffffffffffff3c90])) [0 in_file+0 S8 A64])) read_procpar.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1000 999 1001 80 (set (reg:DI 5 di)
        (reg:DI 339)) read_procpar.cpp:358 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 339)
        (nil)))
(call_insn 1001 1000 1002 80 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b04d627b900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) read_procpar.cpp:358 649 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       81 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79
;;              80 (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 174 175
(code_label 1002 1001 1003 81 40 "" [1 uses])
(note 1003 1002 1004 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 1004 1003 1007 81 (set (reg:SI 174 [ D.5601 ])
        (const_int 2 [0x2])) read_procpar.cpp:364 90 {*movsi_internal}
     (nil))
(insn 1007 1004 1011 81 (set (reg:SI 175 [ <retval> ])
        (reg:SI 174 [ D.5601 ])) read_procpar.cpp:364 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 174 [ D.5601 ])
        (nil)))
(insn 1011 1007 1012 81 (set (reg/i:SI 0 ax)
        (reg:SI 175 [ <retval> ])) read_procpar.cpp:365 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 175 [ <retval> ])
        (nil)))
(insn 1012 1011 1013 81 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.5608+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) read_procpar.cpp:365 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 1013 1012 1019 81 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1016)
            (pc))) read_procpar.cpp:365 596 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 1016)
;;  succ:       83
;;              82 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81 (FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 1019 1013 1014 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(call_insn 1014 1019 1015 82 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2b04d63c1800 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) read_procpar.cpp:365 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1015 1014 1016)
;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1016 1015 1020 83 42 "" [1 uses])
(note 1020 1016 1017 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1017 1020 0 83 (use (reg/i:SI 0 ax)) read_procpar.cpp:365 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

