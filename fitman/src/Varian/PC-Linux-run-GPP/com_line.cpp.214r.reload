
;; Function int command_line(Preprocess*, IOFiles*, Procpar_info*, int, char**, int*) (_Z12command_lineP10PreprocessP7IOFilesP12Procpar_infoiPPcPi, funcdef_no=2, decl_uid=5281, symbol_order=2)

      Creating newreg=1000
Removing SCRATCH in insn #9 (nop 2)
rescanning insn with uid = 9.
      Creating newreg=1001
Removing SCRATCH in insn #1890 (nop 3)
rescanning insn with uid = 1890.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=5120, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=5088, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r1000
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 82
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 138
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 149
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 162:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 172
	 Choosing alt 0 in insn 172:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 173:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 183
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 194
	 Choosing alt 0 in insn 194:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 205
	 Choosing alt 0 in insn 205:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 208:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 216
	 Choosing alt 0 in insn 216:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 217:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 218:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 226:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 228:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 235:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 240:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 242:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 250:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 256:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 271:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 272
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 273:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 286:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 287:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 291:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 292:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 296:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 305:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1002 from oldreg=653, assigning class CREG to r1002
      Creating newreg=1003 from oldreg=655, assigning class DIREG to r1003
  305: {r1002:DI=unspec[[r1003:DI],r657:QI,0x1,r1002:DI] 23;clobber r1003:DI;clobber flags:CC;}
      REG_DEAD r657:QI
      REG_DEAD r656:DI
      REG_DEAD r655:DI
      REG_UNUSED r655:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1974: r1002:DI=r656:DI
 1976: r1003:DI=r655:DI
    Inserting insn reload after:
 1975: r653:DI=r1002:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 309
	 Choosing alt 0 in insn 309:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 310:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 311:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 314:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 315:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 319:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 320:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 323:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 324:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 333:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 334:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 336:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 337:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1004 from oldreg=661, assigning class CREG to r1004
      Creating newreg=1005 from oldreg=663, assigning class DIREG to r1005
  337: {r1004:DI=unspec[[r1005:DI],r665:QI,0x1,r1004:DI] 23;clobber r1005:DI;clobber flags:CC;}
      REG_DEAD r665:QI
      REG_DEAD r664:DI
      REG_DEAD r663:DI
      REG_UNUSED r663:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1977: r1004:DI=r664:DI
 1979: r1005:DI=r663:DI
    Inserting insn reload after:
 1978: r661:DI=r1004:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 339:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 341
	 Choosing alt 0 in insn 341:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 342:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1006, assigning class GENERAL_REGS to r1006
  342: r1006:DI=0x7478742e6469662f
    Inserting insn reload after:
 1980: [r166:DI]=r1006:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1980:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 343:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 347:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 351:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 352:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 355:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 367:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 369:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 373:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 379:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 380:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 381
	 Choosing alt 0 in insn 381:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 382:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 383:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 392:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 394
	 Choosing alt 0 in insn 394:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 395:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 396:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 405:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 406:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 407
	 Choosing alt 0 in insn 407:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 409:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 424:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 425:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 426:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 430:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 431:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 438:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 439:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 440:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 444:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 445:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 452:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 453:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 454:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 458:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 459:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 466:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 467:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 468:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 472:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 473:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 480:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 481:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 482:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 486:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 487:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 494:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 495:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 496:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 500:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 501:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 508:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 509:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 510:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 514:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 515:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 522:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 523:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 524:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 528:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 529:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 534:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 537:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 538:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 539:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 541:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 542:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1007 from oldreg=694, assigning class CREG to r1007
      Creating newreg=1008 from oldreg=696, assigning class DIREG to r1008
  542: {r1007:DI=unspec[[r1008:DI],r698:QI,0x1,r1007:DI] 23;clobber r1008:DI;clobber flags:CC;}
      REG_DEAD r698:QI
      REG_DEAD r697:DI
      REG_DEAD r696:DI
      REG_UNUSED r696:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1981: r1007:DI=r697:DI
 1983: r1008:DI=r696:DI
    Inserting insn reload after:
 1982: r694:DI=r1007:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 544:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 546
	 Choosing alt 0 in insn 546:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 547:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 548:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 549:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 554:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 555:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 556:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 557:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 560:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 565:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 568:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 569:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 570:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 574:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 575:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 580:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 581:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 583:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 584:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 586:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 587:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 588:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 589:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 590:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 592:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 593:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 595:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 597:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 598:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 600:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (1) rzw {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 602:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 606:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) qm  (1) qn {*cmpqi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 611:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 612:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 613:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 615:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 620:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 621:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 623:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 624:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 626:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 627:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 628:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 629:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 630:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 632:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 636:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 638:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 641:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 642:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 643:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 644:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 645:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 649:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 650:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 651:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 653:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 654:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1009 from oldreg=711, assigning class CREG to r1009
      Creating newreg=1010 from oldreg=713, assigning class DIREG to r1010
  654: {r1009:DI=unspec[[r1010:DI],r715:QI,0x1,r1009:DI] 23;clobber r1010:DI;clobber flags:CC;}
      REG_DEAD r715:QI
      REG_DEAD r714:DI
      REG_DEAD r713:DI
      REG_UNUSED r713:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1984: r1009:DI=r714:DI
 1986: r1010:DI=r713:DI
    Inserting insn reload after:
 1985: r711:DI=r1009:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 655:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 656:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 658
	 Choosing alt 0 in insn 658:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 659:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1011, assigning class GENERAL_REGS to r1011
  659: r1011:DI=0x726170636f72702f
    Inserting insn reload after:
 1987: [r211:DI]=r1011:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1987:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 660:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 661:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 663:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 664:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 668:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 669:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 670:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 672:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 673:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 674:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 675:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 678:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 681:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 685:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 690:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 691:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 692:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 696:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 698:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 699:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 700:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 701
	 Choosing alt 0 in insn 701:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 702:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 703:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 705:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 707:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 710:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 711:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 712:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 713:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 714
	 Choosing alt 0 in insn 714:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 715:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 716:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 720:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 723:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 725:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 726:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 727
	 Choosing alt 0 in insn 727:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 728:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 729:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 731:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 733:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 737:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 738:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 739:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 740:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 741
	 Choosing alt 0 in insn 741:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 742:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 743:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 745:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 747:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 750:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 751:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 752:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 755:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 756:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 759:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 760
	 Choosing alt 0 in insn 760:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 761:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 762:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 763:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 764:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 765:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 767:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 768:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 769:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 772:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 773:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 774:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 775:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 776:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 777:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 778:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 779:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 780:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 782:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 783:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 784:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 787:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 788:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 789:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 790:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 791:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 792:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 793:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 795:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 796:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 797:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 800:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 801
	 Choosing alt 0 in insn 801:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 802:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 803:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 804:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 805:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 806:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 807
	 Choosing alt 0 in insn 807:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 808:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 809:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 810:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 813:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 814:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 815:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 816:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 819:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 820:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 821:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 823:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 824:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1012 from oldreg=753, assigning class CREG to r1012
      Creating newreg=1013 from oldreg=755, assigning class DIREG to r1013
  824: {r1012:DI=unspec[[r1013:DI],r757:QI,0x1,r1012:DI] 23;clobber r1013:DI;clobber flags:CC;}
      REG_DEAD r757:QI
      REG_DEAD r756:DI
      REG_DEAD r755:DI
      REG_UNUSED r755:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1988: r1012:DI=r756:DI
 1990: r1013:DI=r755:DI
    Inserting insn reload after:
 1989: r753:DI=r1012:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 825:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 826:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 828
	 Choosing alt 0 in insn 828:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 829:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 830:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 833:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 834:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 835:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 836:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 837
	 Choosing alt 0 in insn 837:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 838:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 839:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 841:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 843:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 846:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 847:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 848:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 850:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 851:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 852:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 855:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 856
	 Choosing alt 0 in insn 856:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 857:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 858:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 859:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 860:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 861:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 863:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 864:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 865:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 868:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 869:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 870:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 871:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 872:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 873:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 874
	 Choosing alt 0 in insn 874:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 875:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 877:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 879:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=1014 from oldreg=430, assigning class SSE_REGS to r1014
  879: r1014:SF=float_trunc(r429:DF)
      REG_DEAD r429:DF
    Inserting insn reload after:
 1991: r430:SF=r1014:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1991:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 880:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 881:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 882:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 883:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 885:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 886:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 887:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 890:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 891
	 Choosing alt 0 in insn 891:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 892:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 893:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 894:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 895:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 896:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 897:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 898:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 899:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 901:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 902:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 903:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 906:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 907:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 908:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 909:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 910:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 911:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 912
	 Choosing alt 0 in insn 912:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 913:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 915:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 917:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=1015 from oldreg=445, assigning class SSE_REGS to r1015
  917: r1015:SF=float_trunc(r444:DF)
      REG_DEAD r444:DF
    Inserting insn reload after:
 1992: r445:SF=r1015:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1992:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 918:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 919:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 920:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 921:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 922:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 924:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 925:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 926:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 929:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 930:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 931:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 932:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 933:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 934:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 935:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 937:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 938:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 939:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 942:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 943
	 Choosing alt 0 in insn 943:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 944:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 945:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 946:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 947:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 948:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 949
	 Choosing alt 0 in insn 949:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 950:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 951:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 952:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 955:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 956:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 957:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 958:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 961:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 962:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 963:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 965:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 966:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1016 from oldreg=797, assigning class CREG to r1016
      Creating newreg=1017 from oldreg=799, assigning class DIREG to r1017
  966: {r1016:DI=unspec[[r1017:DI],r801:QI,0x1,r1016:DI] 23;clobber r1017:DI;clobber flags:CC;}
      REG_DEAD r801:QI
      REG_DEAD r800:DI
      REG_DEAD r799:DI
      REG_UNUSED r799:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1993: r1016:DI=r800:DI
 1995: r1017:DI=r799:DI
    Inserting insn reload after:
 1994: r797:DI=r1016:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 967:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 968:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 970
	 Choosing alt 0 in insn 970:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 971:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 972:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 975:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 976:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 977:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 978:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 979
	 Choosing alt 0 in insn 979:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 980:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 981:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 983:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 985:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 988:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 989:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 990:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 992:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 993:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 994:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 997:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 998
	 Choosing alt 0 in insn 998:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 999:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1000:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1001:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1002:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1003:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1005:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1006:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1007:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1010:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1011:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1012:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1013:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1014:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1015:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1016
	 Choosing alt 0 in insn 1016:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1017:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1019:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1021:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1022:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1023:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1024:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1025:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1027:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1028:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1029:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1032:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1033:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1034:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1035:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1036:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1037:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1038
	 Choosing alt 0 in insn 1038:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1039:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1041:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 1043:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=1018 from oldreg=490, assigning class SSE_REGS to r1018
 1043: r1018:SF=float_trunc(r489:DF)
      REG_DEAD r489:DF
    Inserting insn reload after:
 1996: r490:SF=r1018:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1996:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1044:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1045:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1046:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1047:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1049:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1050:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1051:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1054:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1055
	 Choosing alt 0 in insn 1055:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1056:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1057:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1058:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1059:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1060:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1061:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1062:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1063:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1065:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1066:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1067:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1070:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1071
	 Choosing alt 0 in insn 1071:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1072:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1073:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1074:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1075:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1077:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1078:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1079:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1082:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1083:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1084:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1085:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1086:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1087:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1088:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1089:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1091:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1092:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1093:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1096:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1097:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1098:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1099:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1100:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1102
	 Choosing alt 0 in insn 1102:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1105:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 1107:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=1019 from oldreg=514, assigning class SSE_REGS to r1019
 1107: r1019:SF=float_trunc(r513:DF)
      REG_DEAD r513:DF
    Inserting insn reload after:
 1997: r514:SF=r1019:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1997:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1108:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1109:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1111:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1112:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1114:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1115:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1116:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1120:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1121:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1122:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1123:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1124:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1125:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1127
	 Choosing alt 0 in insn 1127:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1128:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1129:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1130:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1133:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1135:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1136:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1139:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1140:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1141:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1143:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 1144:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1020 from oldreg=852, assigning class CREG to r1020
      Creating newreg=1021 from oldreg=854, assigning class DIREG to r1021
 1144: {r1020:DI=unspec[[r1021:DI],r856:QI,0x1,r1020:DI] 23;clobber r1021:DI;clobber flags:CC;}
      REG_DEAD r856:QI
      REG_DEAD r855:DI
      REG_DEAD r854:DI
      REG_UNUSED r854:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1998: r1020:DI=r855:DI
 2000: r1021:DI=r854:DI
    Inserting insn reload after:
 1999: r852:DI=r1020:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1145:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1146:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1148
	 Choosing alt 0 in insn 1148:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 1149:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1022, assigning class GENERAL_REGS to r1022
 1149: r1022:DI=0x7478742e6469662f
    Inserting insn reload after:
 2001: [r527:DI]=r1022:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2001:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1150:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1153:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1154:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1155:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1157:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1159:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1160:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1163:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1164:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1166:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1170:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1172:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1174:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1175:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1178:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1179:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1180:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1181:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1182
	 Choosing alt 0 in insn 1182:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1183:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1184:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1185:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1188:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1189:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1190:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1191:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1193:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 1194:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1023 from oldreg=865, assigning class CREG to r1023
      Creating newreg=1024 from oldreg=867, assigning class DIREG to r1024
 1194: {r1023:DI=unspec[[r1024:DI],r869:QI,0x1,r1023:DI] 23;clobber r1024:DI;clobber flags:CC;}
      REG_DEAD r869:QI
      REG_DEAD r868:DI
      REG_DEAD r867:DI
      REG_UNUSED r867:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2002: r1023:DI=r868:DI
 2004: r1024:DI=r867:DI
    Inserting insn reload after:
 2003: r865:DI=r1023:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1195:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1196:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1198
	 Choosing alt 0 in insn 1198:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 1199:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1025, assigning class GENERAL_REGS to r1025
 1199: r1025:DI=0x726170636f72702f
    Inserting insn reload after:
 2005: [r538:DI]=r1025:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2005:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1200:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1201:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1202:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1203:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1205:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1207:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1208:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1211:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1212:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1213:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1214:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1218:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1220:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1221:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1222:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1223:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1224:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1225
	 Choosing alt 0 in insn 1225:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1226:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1228:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1229:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1232:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1235:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1236:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1237:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1238:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1239:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1242:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1243:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1244:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1245:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1251:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1252:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1253:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1255:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1257:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1258:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1266:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1267:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1269:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1271:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1272:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1279:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1280:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1281:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1283:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1285:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1286:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1293:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1294:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1295:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1297:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1299:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1300:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1307:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1308:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1309:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1311:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1313:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1314:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1321:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1322:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1323:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1325:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1327:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1328:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1335:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1336:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1337:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1339:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1341:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1342:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1349:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1350:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1351:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1353:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1355:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1356:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1361:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1364:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1365:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1366:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1368:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 1369:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1026 from oldreg=896, assigning class CREG to r1026
      Creating newreg=1027 from oldreg=898, assigning class DIREG to r1027
 1369: {r1026:DI=unspec[[r1027:DI],r900:QI,0x1,r1026:DI] 23;clobber r1027:DI;clobber flags:CC;}
      REG_DEAD r900:QI
      REG_DEAD r899:DI
      REG_DEAD r898:DI
      REG_UNUSED r898:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2006: r1026:DI=r899:DI
 2008: r1027:DI=r898:DI
    Inserting insn reload after:
 2007: r896:DI=r1026:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1370:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1371:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1373
	 Choosing alt 0 in insn 1373:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 1374:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1028, assigning class GENERAL_REGS to r1028
 1374: r1028:DI=0x7461642e736e755f
    Inserting insn reload after:
 2009: [r560:DI]=r1028:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2009:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1375:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1380:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 1381:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1029, assigning class GENERAL_REGS to r1029
 1381: r1029:DI=0x7461642e736e755f
    Inserting insn reload after:
 2010: [r901:DI]=r1029:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2010:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1382:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1389:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1390:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1391:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1392:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1393
	 Choosing alt 0 in insn 1393:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1394:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1395:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1397:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1399:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1402:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1403:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1404:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1406:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1407:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1408:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1411:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1412
	 Choosing alt 0 in insn 1412:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1413:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1414:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1417:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1418:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1419:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1421:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1422:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1423:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1426:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1427
	 Choosing alt 0 in insn 1427:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1428:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1429:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1430:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1431:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1433:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1434:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1435:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1438:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1439:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1440:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1441:  (0) ?m  (1) rF {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1446:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1447:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1448:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1449:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1453:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1454:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1455:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1456:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1457
	 Choosing alt 0 in insn 1457:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1458:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1459:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1461:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1463:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1466:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1467:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1468:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1470:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1471:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1472:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1475:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1476
	 Choosing alt 0 in insn 1476:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1477:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1478:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1481:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1482:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1483:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1485:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1486:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1487:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1490:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1491
	 Choosing alt 0 in insn 1491:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1492:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1493:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1494:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1495:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1496:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1498:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1499:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1500:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1503:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1504
	 Choosing alt 0 in insn 1504:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1505:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1506:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1507:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1508:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1509:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1510
	 Choosing alt 0 in insn 1510:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1511:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1513:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1515:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1516:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1521:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1522:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1523:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1524:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1528:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1529:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1530:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1531:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1532
	 Choosing alt 0 in insn 1532:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1533:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1534:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1536:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1538:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1541:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1542:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1543:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1545:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1546:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1547:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1550:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1551
	 Choosing alt 0 in insn 1551:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1552:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1557:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1558:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1559:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1560:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1561
	 Choosing alt 0 in insn 1561:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1562:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1563:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1565:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1567:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1570:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1571:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1572:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1574:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1575:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1576:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1579:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1580
	 Choosing alt 0 in insn 1580:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1581:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1586:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1587:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1588:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1589:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1590
	 Choosing alt 0 in insn 1590:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1591:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1592:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1594:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1596:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1599:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1600:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1601:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1602:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1604:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1605:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1606:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1609:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1610
	 Choosing alt 0 in insn 1610:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1611:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1612:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1613:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1614:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1615:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1616
	 Choosing alt 0 in insn 1616:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1617:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1619:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1621:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1622:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1627:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1628:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1629:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1630:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1631
	 Choosing alt 0 in insn 1631:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1632:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1633:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1635:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1637:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1640:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1641:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1642:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1644:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1645:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1646:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1649:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1650
	 Choosing alt 0 in insn 1650:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1651:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1656:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1657:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1658:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1659:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1660
	 Choosing alt 0 in insn 1660:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1661:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1662:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1664:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1666:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1669:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1670:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1671:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1673:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1674:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1675:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1678:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1679
	 Choosing alt 0 in insn 1679:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1680:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1685:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1686:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1687:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1688:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1689
	 Choosing alt 0 in insn 1689:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1690:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1691:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1693:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1695:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1698:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1699:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1700:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1702:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1703:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1704:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1707:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1708
	 Choosing alt 0 in insn 1708:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1709:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1714:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1715:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1716:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1717:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1718
	 Choosing alt 0 in insn 1718:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1719:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1720:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1722:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1724:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1727:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1728:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1729:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1731:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1732:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1733:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1736:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1737
	 Choosing alt 0 in insn 1737:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1738:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1743:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1744:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1745:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1746:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1747
	 Choosing alt 0 in insn 1747:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1748:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1749:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1751:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1753:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1756:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1757:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1758:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1759:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1760:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1761:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1762:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1763
	 Choosing alt 0 in insn 1763:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1764:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1766:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1768:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1769:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1770:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1771:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1772:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1773:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1774:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1775:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1776:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1777
	 Choosing alt 0 in insn 1777:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1778:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1780:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1782:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1783:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1784:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1785:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1786:  (0) r  (1) l  (2) M {*ashlsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1787:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1788:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1789:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1790:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1791:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1792:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1793:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1794:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1795:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1800:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1801:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1802:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1803:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1804
	 Choosing alt 0 in insn 1804:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1805:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1806:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1808:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1810:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1813:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1814:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1819:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1820:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1821:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1822:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1823
	 Choosing alt 0 in insn 1823:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1824:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1825:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1827:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1829:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1832:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1833:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1838:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1839:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1840:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1841:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1842
	 Choosing alt 0 in insn 1842:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1843:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1844:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1846:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1848:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1851:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1852:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1853:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1854:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1855:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1856:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1857:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1858
	 Choosing alt 0 in insn 1858:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1859:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1860:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1861:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1864:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1869:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1870:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1871:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1872:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1876:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1877:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1879:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1882:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1890:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r1001
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1892:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 128
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 129
EBB 89
EBB 90
EBB 91
EBB 92
EBB 93
EBB 94
EBB 95
EBB 96
EBB 97
EBB 98
EBB 99
EBB 100
EBB 101
EBB 102
EBB 103
EBB 104
EBB 105
EBB 106
EBB 107
EBB 108
EBB 109
EBB 110
EBB 111
EBB 112
EBB 113
EBB 114
EBB 115
EBB 116
EBB 117
EBB 118
EBB 119
EBB 120
EBB 121
EBB 122
EBB 123
EBB 124
EBB 125
EBB 126
EBB 127

********** Pseudo live ranges #1: **********

  BB 17
   Insn 358: point = 0
   Insn 357: point = 0
   Insn 356: point = 0
   Insn 355: point = 0
  BB 48
   Insn 632: point = 0
   Insn 631: point = 0
   Insn 630: point = 0
   Insn 629: point = 0
   Insn 628: point = 0
   Insn 627: point = 0
   Insn 626: point = 0
   Insn 625: point = 0
   Insn 624: point = 1
   Insn 623: point = 3
   Insn 622: point = 4
   Insn 621: point = 4
   Insn 620: point = 4
  BB 51
   Insn 681: point = 4
   Insn 680: point = 4
   Insn 679: point = 4
   Insn 678: point = 4
  BB 67
   Insn 1166: point = 4
   Insn 1165: point = 4
   Insn 1164: point = 4
   Insn 1163: point = 4
  BB 70
   Insn 1214: point = 4
   Insn 1213: point = 4
   Insn 1212: point = 4
   Insn 1211: point = 4
  BB 96
   Insn 1449: point = 4
   Insn 1448: point = 4
   Insn 1447: point = 4
   Insn 1446: point = 4
  BB 100
   Insn 1524: point = 4
   Insn 1523: point = 4
   Insn 1522: point = 4
   Insn 1521: point = 4
  BB 123
   Insn 1872: point = 4
   Insn 1871: point = 4
   Insn 1870: point = 4
   Insn 1869: point = 4
  BB 126
   Insn 1892: point = 4
  BB 127
   Insn 1895: point = 4
  BB 125
   Insn 1891: point = 4
   Insn 1890: point = 4
   Insn 1889: point = 5
   Insn 1885: point = 6
   Insn 1882: point = 8
  BB 124
   Insn 1880: point = 9
   Insn 1879: point = 9
   Insn 1877: point = 10
   Insn 1876: point = 12
  BB 122
   Insn 1967: point = 13
   Insn 1864: point = 13
   Insn 1863: point = 13
   Insn 1862: point = 14
   Insn 1861: point = 15
   Insn 1860: point = 17
   Insn 1859: point = 18
   Insn 1858: point = 20
   Insn 1857: point = 22
   Insn 1856: point = 23
   Insn 1855: point = 25
   Insn 1854: point = 27
   Insn 1853: point = 28
   Insn 1852: point = 28
   Insn 1851: point = 28
  BB 121
   Insn 1849: point = 28
   Insn 1848: point = 28
   Insn 1847: point = 29
   Insn 1846: point = 30
   Insn 1845: point = 30
   Insn 1844: point = 31
   Insn 1843: point = 31
   Insn 1842: point = 33
   Insn 1841: point = 35
   Insn 1840: point = 36
   Insn 1839: point = 38
   Insn 1838: point = 40
  BB 118
   Insn 1963: point = 41
   Insn 1814: point = 41
   Insn 1813: point = 41
  BB 116
   Insn 1961: point = 41
   Insn 1795: point = 41
   Insn 1794: point = 42
   Insn 1793: point = 44
   Insn 1792: point = 46
   Insn 1791: point = 48
   Insn 1790: point = 49
   Insn 1789: point = 51
   Insn 1788: point = 52
   Insn 1787: point = 53
   Insn 1786: point = 54
   Insn 1785: point = 56
   Insn 1784: point = 58
   Insn 1783: point = 59
   Insn 1782: point = 59
   Insn 1781: point = 59
   Insn 1780: point = 60
   Insn 1779: point = 60
   Insn 1778: point = 61
   Insn 1777: point = 63
   Insn 1776: point = 65
   Insn 1775: point = 66
   Insn 1774: point = 68
   Insn 1773: point = 70
   Insn 1772: point = 71
   Insn 1771: point = 73
   Insn 1770: point = 75
   Insn 1769: point = 76
   Insn 1768: point = 76
   Insn 1767: point = 76
   Insn 1766: point = 77
   Insn 1765: point = 77
   Insn 1764: point = 78
   Insn 1763: point = 80
   Insn 1762: point = 82
   Insn 1761: point = 83
   Insn 1760: point = 85
   Insn 1759: point = 87
   Insn 1758: point = 88
   Insn 1757: point = 90
   Insn 1756: point = 91
  BB 114
   Insn 1959: point = 91
   Insn 1738: point = 91
   Insn 1737: point = 92
   Insn 1736: point = 94
   Insn 1735: point = 95
   Insn 1734: point = 97
   Insn 1733: point = 99
   Insn 1732: point = 101
   Insn 1731: point = 102
   Insn 1730: point = 102
   Insn 1729: point = 103
   Insn 1728: point = 105
   Insn 1727: point = 107
  BB 112
   Insn 1957: point = 108
   Insn 1709: point = 108
   Insn 1708: point = 109
   Insn 1707: point = 111
   Insn 1706: point = 112
   Insn 1705: point = 114
   Insn 1704: point = 116
   Insn 1703: point = 118
   Insn 1702: point = 119
   Insn 1701: point = 119
   Insn 1700: point = 120
   Insn 1699: point = 122
   Insn 1698: point = 124
  BB 110
   Insn 1955: point = 125
   Insn 1680: point = 125
   Insn 1679: point = 126
   Insn 1678: point = 128
   Insn 1677: point = 129
   Insn 1676: point = 131
   Insn 1675: point = 133
   Insn 1674: point = 135
   Insn 1673: point = 136
   Insn 1672: point = 136
   Insn 1671: point = 137
   Insn 1670: point = 139
   Insn 1669: point = 141
  BB 108
   Insn 1953: point = 142
   Insn 1651: point = 142
   Insn 1650: point = 143
   Insn 1649: point = 145
   Insn 1648: point = 146
   Insn 1647: point = 148
   Insn 1646: point = 150
   Insn 1645: point = 152
   Insn 1644: point = 153
   Insn 1643: point = 153
   Insn 1642: point = 154
   Insn 1641: point = 156
   Insn 1640: point = 158
  BB 106
   Insn 1951: point = 159
   Insn 1622: point = 159
   Insn 1621: point = 159
   Insn 1620: point = 159
   Insn 1619: point = 160
   Insn 1618: point = 160
   Insn 1617: point = 161
   Insn 1616: point = 163
   Insn 1615: point = 165
   Insn 1614: point = 166
   Insn 1613: point = 168
   Insn 1612: point = 170
   Insn 1611: point = 171
   Insn 1610: point = 173
   Insn 1609: point = 175
   Insn 1608: point = 176
   Insn 1607: point = 178
   Insn 1606: point = 180
   Insn 1605: point = 182
   Insn 1604: point = 183
   Insn 1603: point = 183
   Insn 1602: point = 184
   Insn 1601: point = 186
   Insn 1600: point = 188
   Insn 1599: point = 189
  BB 104
   Insn 1949: point = 189
   Insn 1581: point = 189
   Insn 1580: point = 190
   Insn 1579: point = 192
   Insn 1578: point = 193
   Insn 1577: point = 195
   Insn 1576: point = 197
   Insn 1575: point = 199
   Insn 1574: point = 200
   Insn 1573: point = 200
   Insn 1572: point = 201
   Insn 1571: point = 203
   Insn 1570: point = 205
  BB 102
   Insn 1947: point = 206
   Insn 1552: point = 206
   Insn 1551: point = 207
   Insn 1550: point = 209
   Insn 1549: point = 210
   Insn 1548: point = 212
   Insn 1547: point = 214
   Insn 1546: point = 216
   Insn 1545: point = 217
   Insn 1544: point = 217
   Insn 1543: point = 218
   Insn 1542: point = 220
   Insn 1541: point = 222
  BB 99
   Insn 1945: point = 223
   Insn 1516: point = 223
   Insn 1515: point = 223
   Insn 1514: point = 223
   Insn 1513: point = 224
   Insn 1512: point = 224
   Insn 1511: point = 225
   Insn 1510: point = 227
   Insn 1509: point = 229
   Insn 1508: point = 230
   Insn 1507: point = 232
   Insn 1506: point = 234
   Insn 1505: point = 235
   Insn 1504: point = 237
   Insn 1503: point = 239
   Insn 1502: point = 240
   Insn 1501: point = 242
   Insn 1500: point = 244
   Insn 1499: point = 246
   Insn 1498: point = 247
   Insn 1497: point = 247
   Insn 1496: point = 248
   Insn 1495: point = 250
   Insn 1494: point = 252
   Insn 1493: point = 253
   Insn 1492: point = 253
   Insn 1491: point = 254
   Insn 1490: point = 256
   Insn 1489: point = 257
   Insn 1488: point = 259
   Insn 1487: point = 261
   Insn 1486: point = 263
   Insn 1485: point = 264
   Insn 1484: point = 264
   Insn 1483: point = 265
   Insn 1482: point = 267
   Insn 1481: point = 269
  BB 98
   Insn 1479: point = 270
   Insn 1478: point = 270
   Insn 1477: point = 271
   Insn 1476: point = 273
   Insn 1475: point = 275
   Insn 1474: point = 276
   Insn 1473: point = 278
   Insn 1472: point = 280
   Insn 1471: point = 282
   Insn 1470: point = 283
   Insn 1469: point = 283
   Insn 1468: point = 284
   Insn 1467: point = 286
   Insn 1466: point = 288
  BB 95
   Insn 1943: point = 289
   Insn 1441: point = 289
   Insn 1440: point = 290
   Insn 1439: point = 291
   Insn 1438: point = 293
   Insn 1437: point = 294
   Insn 1436: point = 296
   Insn 1435: point = 298
   Insn 1434: point = 300
   Insn 1433: point = 301
   Insn 1432: point = 301
   Insn 1431: point = 302
   Insn 1430: point = 304
   Insn 1429: point = 306
   Insn 1428: point = 307
   Insn 1427: point = 308
   Insn 1426: point = 310
   Insn 1425: point = 311
   Insn 1424: point = 313
   Insn 1423: point = 315
   Insn 1422: point = 317
   Insn 1421: point = 318
   Insn 1420: point = 318
   Insn 1419: point = 319
   Insn 1418: point = 321
   Insn 1417: point = 323
  BB 94
   Insn 1415: point = 324
   Insn 1414: point = 324
   Insn 1413: point = 325
   Insn 1412: point = 327
   Insn 1411: point = 329
   Insn 1410: point = 330
   Insn 1409: point = 332
   Insn 1408: point = 334
   Insn 1407: point = 336
   Insn 1406: point = 337
   Insn 1405: point = 337
   Insn 1404: point = 338
   Insn 1403: point = 340
   Insn 1402: point = 342
  BB 92
   Insn 1941: point = 343
  BB 90
   Insn 1939: point = 343
   Insn 1375: point = 343
   Insn 2009: point = 344
   Insn 1374: point = 345
   Insn 1373: point = 346
   Insn 1371: point = 348
   Insn 1370: point = 350
   Insn 2007: point = 352
	Hard reg 0 is preferable by r1026 with profit 1
   Insn 1369: point = 354
   Insn 2008: point = 356
	Hard reg 4 is preferable by r1027 with profit 1
   Insn 2006: point = 358
	Hard reg 0 is preferable by r1026 with profit 1
	Hard reg 2 is preferable by r1026 with profit 1
   Insn 1368: point = 360
   Insn 1367: point = 361
   Insn 1366: point = 363
   Insn 1372: point = 364
   Insn 1365: point = 365
   Insn 1364: point = 367
  BB 91
   Insn 1382: point = 368
   Insn 2010: point = 369
   Insn 1381: point = 370
   Insn 1380: point = 371
  BB 89
   Insn 1362: point = 372
   Insn 1361: point = 372
  BB 86
   Insn 1937: point = 372
  BB 84
   Insn 1935: point = 372
  BB 82
   Insn 1933: point = 372
  BB 80
   Insn 1931: point = 372
  BB 78
   Insn 1929: point = 372
  BB 76
   Insn 1927: point = 372
  BB 74
   Insn 1925: point = 372
  BB 129
   Insn 1972: point = 372
  BB 88
  BB 87
   Insn 1357: point = 372
   Insn 1356: point = 372
   Insn 1355: point = 372
   Insn 1354: point = 373
   Insn 1353: point = 374
   Insn 1352: point = 374
   Insn 1351: point = 375
   Insn 1350: point = 375
   Insn 1349: point = 377
  BB 85
   Insn 1343: point = 378
   Insn 1342: point = 378
   Insn 1341: point = 378
   Insn 1340: point = 379
   Insn 1339: point = 380
   Insn 1338: point = 380
   Insn 1337: point = 381
   Insn 1336: point = 381
   Insn 1335: point = 383
  BB 83
   Insn 1329: point = 384
   Insn 1328: point = 384
   Insn 1327: point = 384
   Insn 1326: point = 385
   Insn 1325: point = 386
   Insn 1324: point = 386
   Insn 1323: point = 387
   Insn 1322: point = 387
   Insn 1321: point = 389
  BB 81
   Insn 1315: point = 390
   Insn 1314: point = 390
   Insn 1313: point = 390
   Insn 1312: point = 391
   Insn 1311: point = 392
   Insn 1310: point = 392
   Insn 1309: point = 393
   Insn 1308: point = 393
   Insn 1307: point = 395
  BB 79
   Insn 1301: point = 396
   Insn 1300: point = 396
   Insn 1299: point = 396
   Insn 1298: point = 397
   Insn 1297: point = 398
   Insn 1296: point = 398
   Insn 1295: point = 399
   Insn 1294: point = 399
   Insn 1293: point = 401
  BB 77
   Insn 1287: point = 402
   Insn 1286: point = 402
   Insn 1285: point = 402
   Insn 1284: point = 403
   Insn 1283: point = 404
   Insn 1282: point = 404
   Insn 1281: point = 405
   Insn 1280: point = 405
   Insn 1279: point = 407
  BB 75
   Insn 1273: point = 408
   Insn 1272: point = 408
   Insn 1271: point = 408
   Insn 1270: point = 409
   Insn 1269: point = 410
   Insn 1268: point = 410
   Insn 1267: point = 411
   Insn 1266: point = 411
   Insn 1265: point = 413
  BB 73
   Insn 1259: point = 414
   Insn 1258: point = 414
   Insn 1257: point = 414
   Insn 1256: point = 415
   Insn 1255: point = 416
   Insn 1254: point = 416
   Insn 1253: point = 417
   Insn 1252: point = 417
   Insn 1251: point = 419
  BB 72
   Insn 1246: point = 420
   Insn 1245: point = 420
   Insn 1244: point = 421
   Insn 1243: point = 422
   Insn 1242: point = 422
   Insn 1241: point = 422
   Insn 1240: point = 423
   Insn 1239: point = 424
   Insn 1238: point = 426
   Insn 1237: point = 427
   Insn 1236: point = 429
   Insn 1235: point = 431
  BB 71
   Insn 1232: point = 432
   Insn 1231: point = 432
   Insn 1230: point = 433
   Insn 1229: point = 434
   Insn 1228: point = 436
   Insn 1227: point = 438
   Insn 1226: point = 439
   Insn 1225: point = 441
   Insn 1224: point = 443
   Insn 1223: point = 444
   Insn 1222: point = 446
   Insn 1221: point = 448
   Insn 1220: point = 449
   Insn 1219: point = 449
   Insn 1218: point = 450
  BB 69
   Insn 1209: point = 451
   Insn 1208: point = 451
   Insn 1207: point = 451
   Insn 1206: point = 452
   Insn 1205: point = 453
   Insn 1204: point = 453
   Insn 1203: point = 454
   Insn 1202: point = 454
   Insn 1201: point = 456
   Insn 1200: point = 457
   Insn 2005: point = 458
   Insn 1199: point = 459
   Insn 1198: point = 460
   Insn 1196: point = 462
   Insn 1195: point = 464
   Insn 2003: point = 466
	Hard reg 0 is preferable by r1023 with profit 1
   Insn 1194: point = 468
   Insn 2004: point = 470
	Hard reg 4 is preferable by r1024 with profit 1
   Insn 2002: point = 472
	Hard reg 0 is preferable by r1023 with profit 1
	Hard reg 2 is preferable by r1023 with profit 1
   Insn 1193: point = 474
   Insn 1192: point = 475
   Insn 1191: point = 477
   Insn 1197: point = 478
   Insn 1190: point = 479
   Insn 1189: point = 481
   Insn 1188: point = 482
   Insn 1187: point = 482
   Insn 1186: point = 483
   Insn 1185: point = 484
   Insn 1184: point = 486
   Insn 1183: point = 487
   Insn 1182: point = 489
   Insn 1181: point = 491
   Insn 1180: point = 492
   Insn 1179: point = 494
   Insn 1178: point = 496
  BB 68
   Insn 1176: point = 497
   Insn 1175: point = 497
   Insn 1174: point = 498
   Insn 1173: point = 500
   Insn 1172: point = 501
   Insn 1171: point = 501
   Insn 1170: point = 502
  BB 66
   Insn 1161: point = 503
   Insn 1160: point = 503
   Insn 1159: point = 503
   Insn 1158: point = 504
   Insn 1157: point = 505
   Insn 1156: point = 505
   Insn 1155: point = 506
   Insn 1154: point = 506
   Insn 1153: point = 508
  BB 65
   Insn 1150: point = 509
   Insn 2001: point = 510
   Insn 1149: point = 511
   Insn 1148: point = 512
   Insn 1146: point = 514
   Insn 1145: point = 516
   Insn 1999: point = 518
	Hard reg 0 is preferable by r1020 with profit 1
   Insn 1144: point = 520
   Insn 2000: point = 522
	Hard reg 4 is preferable by r1021 with profit 1
   Insn 1998: point = 524
	Hard reg 0 is preferable by r1020 with profit 1
	Hard reg 2 is preferable by r1020 with profit 1
   Insn 1143: point = 526
   Insn 1142: point = 527
   Insn 1141: point = 529
   Insn 1147: point = 530
   Insn 1140: point = 531
   Insn 1139: point = 533
  BB 64
   Insn 1137: point = 534
   Insn 1136: point = 534
   Insn 1135: point = 535
   Insn 1134: point = 537
   Insn 1133: point = 538
   Insn 1132: point = 538
   Insn 1131: point = 539
   Insn 1130: point = 540
   Insn 1129: point = 542
   Insn 1128: point = 543
   Insn 1127: point = 545
   Insn 1126: point = 547
   Insn 1125: point = 548
   Insn 1124: point = 550
   Insn 1123: point = 552
   Insn 1122: point = 553
   Insn 1121: point = 554
   Insn 1120: point = 555
   Insn 1119: point = 557
   Insn 1118: point = 558
   Insn 1117: point = 560
   Insn 1116: point = 562
   Insn 1115: point = 564
   Insn 1114: point = 565
   Insn 1113: point = 565
   Insn 1112: point = 566
   Insn 1111: point = 568
   Insn 1110: point = 570
   Insn 1109: point = 571
   Insn 1108: point = 571
   Insn 1997: point = 572
	Hard reg 0 is preferable by r1019 with profit 1
   Insn 1107: point = 574
   Insn 1106: point = 576
   Insn 1105: point = 577
   Insn 1104: point = 577
   Insn 1103: point = 578
   Insn 1102: point = 580
   Insn 1101: point = 582
   Insn 1100: point = 583
   Insn 1099: point = 585
   Insn 1098: point = 587
   Insn 1097: point = 588
   Insn 1096: point = 590
   Insn 1095: point = 591
   Insn 1094: point = 593
   Insn 1093: point = 595
   Insn 1092: point = 597
   Insn 1091: point = 598
   Insn 1090: point = 598
   Insn 1089: point = 599
   Insn 1088: point = 601
   Insn 1087: point = 603
   Insn 1086: point = 604
   Insn 1085: point = 605
   Insn 1084: point = 607
   Insn 1083: point = 608
   Insn 1082: point = 610
   Insn 1081: point = 611
   Insn 1080: point = 613
   Insn 1079: point = 615
   Insn 1078: point = 617
   Insn 1077: point = 618
   Insn 1076: point = 618
   Insn 1075: point = 619
   Insn 1074: point = 621
   Insn 1073: point = 623
   Insn 1072: point = 624
   Insn 1071: point = 625
   Insn 1070: point = 627
   Insn 1069: point = 628
   Insn 1068: point = 630
   Insn 1067: point = 632
   Insn 1066: point = 634
   Insn 1065: point = 635
   Insn 1064: point = 635
   Insn 1063: point = 636
   Insn 1062: point = 638
   Insn 1061: point = 640
   Insn 1060: point = 641
   Insn 1059: point = 642
   Insn 1058: point = 643
   Insn 1057: point = 644
   Insn 1056: point = 646
   Insn 1055: point = 647
   Insn 1054: point = 649
   Insn 1053: point = 650
   Insn 1052: point = 652
   Insn 1051: point = 654
   Insn 1050: point = 656
   Insn 1049: point = 657
   Insn 1048: point = 657
   Insn 1047: point = 658
   Insn 1046: point = 660
   Insn 1045: point = 662
   Insn 1044: point = 663
   Insn 1996: point = 664
	Hard reg 0 is preferable by r1018 with profit 1
   Insn 1043: point = 666
   Insn 1042: point = 668
   Insn 1041: point = 669
   Insn 1040: point = 669
   Insn 1039: point = 670
   Insn 1038: point = 672
   Insn 1037: point = 674
   Insn 1036: point = 675
   Insn 1035: point = 677
   Insn 1034: point = 679
   Insn 1033: point = 680
   Insn 1032: point = 682
   Insn 1031: point = 683
   Insn 1030: point = 685
   Insn 1029: point = 687
   Insn 1028: point = 689
   Insn 1027: point = 690
   Insn 1026: point = 690
   Insn 1025: point = 691
   Insn 1024: point = 693
   Insn 1023: point = 695
   Insn 1022: point = 696
   Insn 1021: point = 696
   Insn 1020: point = 697
   Insn 1019: point = 698
   Insn 1018: point = 698
   Insn 1017: point = 699
   Insn 1016: point = 701
   Insn 1015: point = 703
   Insn 1014: point = 704
   Insn 1013: point = 706
   Insn 1012: point = 708
   Insn 1011: point = 709
   Insn 1010: point = 711
   Insn 1009: point = 712
   Insn 1008: point = 714
   Insn 1007: point = 716
   Insn 1006: point = 718
   Insn 1005: point = 719
   Insn 1004: point = 719
   Insn 1003: point = 720
   Insn 1002: point = 722
   Insn 1001: point = 724
   Insn 1000: point = 725
   Insn 999: point = 725
   Insn 998: point = 726
   Insn 997: point = 728
   Insn 996: point = 729
   Insn 995: point = 731
   Insn 994: point = 733
   Insn 993: point = 735
   Insn 992: point = 736
   Insn 991: point = 736
   Insn 990: point = 737
   Insn 989: point = 739
   Insn 988: point = 741
  BB 63
   Insn 986: point = 742
   Insn 985: point = 742
   Insn 984: point = 743
   Insn 983: point = 744
   Insn 982: point = 744
   Insn 981: point = 745
   Insn 980: point = 745
   Insn 979: point = 747
   Insn 978: point = 749
   Insn 977: point = 750
   Insn 976: point = 752
   Insn 975: point = 754
  BB 62
   Insn 972: point = 755
   Insn 971: point = 756
   Insn 970: point = 756
   Insn 968: point = 758
   Insn 967: point = 760
   Insn 1994: point = 762
	Hard reg 0 is preferable by r1016 with profit 1
   Insn 966: point = 764
   Insn 1995: point = 766
	Hard reg 4 is preferable by r1017 with profit 1
   Insn 1993: point = 768
	Hard reg 0 is preferable by r1016 with profit 1
	Hard reg 2 is preferable by r1016 with profit 1
   Insn 965: point = 770
   Insn 964: point = 771
   Insn 963: point = 773
   Insn 969: point = 774
   Insn 962: point = 775
   Insn 961: point = 777
  BB 61
   Insn 959: point = 778
   Insn 958: point = 778
   Insn 957: point = 779
   Insn 956: point = 781
   Insn 955: point = 782
   Insn 954: point = 782
   Insn 953: point = 783
   Insn 952: point = 784
   Insn 951: point = 786
   Insn 950: point = 787
   Insn 949: point = 789
   Insn 948: point = 791
   Insn 947: point = 792
   Insn 946: point = 794
   Insn 945: point = 796
   Insn 944: point = 797
   Insn 943: point = 798
   Insn 942: point = 800
   Insn 941: point = 801
   Insn 940: point = 803
   Insn 939: point = 805
   Insn 938: point = 807
   Insn 937: point = 808
   Insn 936: point = 808
   Insn 935: point = 809
   Insn 934: point = 811
   Insn 933: point = 813
   Insn 932: point = 814
   Insn 931: point = 815
   Insn 930: point = 816
   Insn 929: point = 818
   Insn 928: point = 819
   Insn 927: point = 821
   Insn 926: point = 823
   Insn 925: point = 825
   Insn 924: point = 826
   Insn 923: point = 826
   Insn 922: point = 827
   Insn 921: point = 829
   Insn 920: point = 831
   Insn 919: point = 832
   Insn 918: point = 832
   Insn 1992: point = 833
	Hard reg 0 is preferable by r1015 with profit 1
   Insn 917: point = 835
   Insn 916: point = 837
   Insn 915: point = 838
   Insn 914: point = 838
   Insn 913: point = 839
   Insn 912: point = 841
   Insn 911: point = 843
   Insn 910: point = 844
   Insn 909: point = 846
   Insn 908: point = 848
   Insn 907: point = 849
   Insn 906: point = 851
   Insn 905: point = 852
   Insn 904: point = 854
   Insn 903: point = 856
   Insn 902: point = 858
   Insn 901: point = 859
   Insn 900: point = 859
   Insn 899: point = 860
   Insn 898: point = 862
   Insn 897: point = 864
   Insn 896: point = 865
   Insn 895: point = 866
   Insn 894: point = 867
   Insn 893: point = 868
   Insn 892: point = 870
   Insn 891: point = 871
   Insn 890: point = 873
   Insn 889: point = 874
   Insn 888: point = 876
   Insn 887: point = 878
   Insn 886: point = 880
   Insn 885: point = 881
   Insn 884: point = 881
   Insn 883: point = 882
   Insn 882: point = 884
   Insn 881: point = 886
   Insn 880: point = 887
   Insn 1991: point = 888
	Hard reg 0 is preferable by r1014 with profit 1
   Insn 879: point = 890
   Insn 878: point = 892
   Insn 877: point = 893
   Insn 876: point = 893
   Insn 875: point = 894
   Insn 874: point = 896
   Insn 873: point = 898
   Insn 872: point = 899
   Insn 871: point = 901
   Insn 870: point = 903
   Insn 869: point = 904
   Insn 868: point = 906
   Insn 867: point = 907
   Insn 866: point = 909
   Insn 865: point = 911
   Insn 864: point = 913
   Insn 863: point = 914
   Insn 862: point = 914
   Insn 861: point = 915
   Insn 860: point = 917
   Insn 859: point = 919
   Insn 858: point = 920
   Insn 857: point = 920
   Insn 856: point = 921
   Insn 855: point = 923
   Insn 854: point = 924
   Insn 853: point = 926
   Insn 852: point = 928
   Insn 851: point = 930
   Insn 850: point = 931
   Insn 849: point = 931
   Insn 848: point = 932
   Insn 847: point = 934
   Insn 846: point = 936
  BB 60
   Insn 844: point = 937
   Insn 843: point = 937
   Insn 842: point = 938
   Insn 841: point = 939
   Insn 840: point = 939
   Insn 839: point = 940
   Insn 838: point = 940
   Insn 837: point = 942
   Insn 836: point = 944
   Insn 835: point = 945
   Insn 834: point = 947
   Insn 833: point = 949
  BB 59
   Insn 830: point = 950
   Insn 829: point = 951
   Insn 828: point = 951
   Insn 826: point = 953
   Insn 825: point = 955
   Insn 1989: point = 957
	Hard reg 0 is preferable by r1012 with profit 1
   Insn 824: point = 959
   Insn 1990: point = 961
	Hard reg 4 is preferable by r1013 with profit 1
   Insn 1988: point = 963
	Hard reg 0 is preferable by r1012 with profit 1
	Hard reg 2 is preferable by r1012 with profit 1
   Insn 823: point = 965
   Insn 822: point = 966
   Insn 821: point = 968
   Insn 827: point = 969
   Insn 820: point = 970
   Insn 819: point = 972
  BB 58
   Insn 817: point = 973
   Insn 816: point = 973
   Insn 815: point = 974
   Insn 814: point = 976
   Insn 813: point = 977
   Insn 812: point = 977
   Insn 811: point = 978
   Insn 810: point = 979
   Insn 809: point = 981
   Insn 808: point = 982
   Insn 807: point = 984
   Insn 806: point = 986
   Insn 805: point = 987
   Insn 804: point = 989
   Insn 803: point = 991
   Insn 802: point = 992
   Insn 801: point = 993
   Insn 800: point = 995
   Insn 799: point = 996
   Insn 798: point = 998
   Insn 797: point = 1000
   Insn 796: point = 1002
   Insn 795: point = 1003
   Insn 794: point = 1003
   Insn 793: point = 1004
   Insn 792: point = 1006
   Insn 791: point = 1008
   Insn 790: point = 1009
   Insn 789: point = 1010
   Insn 788: point = 1011
   Insn 787: point = 1013
   Insn 786: point = 1014
   Insn 785: point = 1016
   Insn 784: point = 1018
   Insn 783: point = 1020
   Insn 782: point = 1021
   Insn 781: point = 1021
   Insn 780: point = 1022
   Insn 779: point = 1024
   Insn 778: point = 1026
   Insn 777: point = 1027
   Insn 776: point = 1028
   Insn 775: point = 1029
   Insn 774: point = 1030
   Insn 773: point = 1031
   Insn 772: point = 1033
   Insn 771: point = 1034
   Insn 770: point = 1036
   Insn 769: point = 1038
   Insn 768: point = 1040
   Insn 767: point = 1041
   Insn 766: point = 1041
   Insn 765: point = 1042
   Insn 764: point = 1044
   Insn 763: point = 1046
   Insn 762: point = 1047
   Insn 761: point = 1047
   Insn 760: point = 1048
   Insn 759: point = 1050
   Insn 758: point = 1051
   Insn 757: point = 1053
   Insn 756: point = 1055
   Insn 755: point = 1057
   Insn 754: point = 1058
   Insn 753: point = 1058
   Insn 752: point = 1059
   Insn 751: point = 1061
   Insn 750: point = 1063
  BB 57
   Insn 748: point = 1064
   Insn 747: point = 1064
   Insn 746: point = 1065
   Insn 745: point = 1066
   Insn 744: point = 1066
   Insn 743: point = 1067
   Insn 742: point = 1067
   Insn 741: point = 1069
   Insn 740: point = 1071
   Insn 739: point = 1072
   Insn 738: point = 1074
   Insn 737: point = 1076
  BB 53
   Insn 1923: point = 1077
   Insn 692: point = 1077
   Insn 691: point = 1078
   Insn 690: point = 1079
  BB 52
   Insn 687: point = 1079
   Insn 686: point = 1079
   Insn 685: point = 1080
  BB 50
   Insn 676: point = 1081
   Insn 675: point = 1081
   Insn 674: point = 1081
   Insn 673: point = 1081
   Insn 672: point = 1081
   Insn 671: point = 1081
   Insn 670: point = 1082
   Insn 669: point = 1084
   Insn 668: point = 1085
   Insn 667: point = 1086
   Insn 666: point = 1087
   Insn 665: point = 1087
   Insn 664: point = 1088
   Insn 663: point = 1088
   Insn 662: point = 1090
   Insn 661: point = 1091
   Insn 660: point = 1092
   Insn 1987: point = 1092
   Insn 659: point = 1093
   Insn 658: point = 1094
   Insn 656: point = 1096
   Insn 655: point = 1098
   Insn 1985: point = 1100
	Hard reg 0 is preferable by r1009 with profit 1
   Insn 654: point = 1102
   Insn 1986: point = 1104
	Hard reg 4 is preferable by r1010 with profit 1
   Insn 1984: point = 1106
	Hard reg 0 is preferable by r1009 with profit 1
	Hard reg 2 is preferable by r1009 with profit 1
   Insn 653: point = 1108
   Insn 652: point = 1109
   Insn 651: point = 1111
   Insn 657: point = 1112
   Insn 650: point = 1113
   Insn 649: point = 1115
   Insn 648: point = 1116
   Insn 647: point = 1116
   Insn 646: point = 1117
   Insn 645: point = 1118
   Insn 644: point = 1120
   Insn 643: point = 1121
   Insn 642: point = 1123
   Insn 641: point = 1125
  BB 49
   Insn 639: point = 1126
   Insn 638: point = 1126
   Insn 637: point = 1127
   Insn 636: point = 1129
  BB 47
   Insn 1921: point = 1130
   Insn 615: point = 1130
   Insn 614: point = 1130
   Insn 613: point = 1131
   Insn 612: point = 1132
   Insn 611: point = 1132
  BB 46
   Insn 608: point = 1132
   Insn 607: point = 1132
   Insn 606: point = 1133
  BB 45
   Insn 604: point = 1134
   Insn 603: point = 1134
   Insn 602: point = 1135
   Insn 601: point = 1136
   Insn 600: point = 1136
   Insn 599: point = 1136
   Insn 598: point = 1136
   Insn 597: point = 1136
   Insn 596: point = 1136
   Insn 595: point = 1137
   Insn 594: point = 1138
   Insn 593: point = 1138
   Insn 592: point = 1138
   Insn 591: point = 1138
   Insn 590: point = 1138
   Insn 589: point = 1138
   Insn 588: point = 1138
   Insn 587: point = 1138
   Insn 586: point = 1138
   Insn 585: point = 1138
   Insn 584: point = 1139
   Insn 583: point = 1141
   Insn 582: point = 1142
   Insn 581: point = 1142
   Insn 580: point = 1142
  BB 44
   Insn 578: point = 1142
   Insn 577: point = 1142
   Insn 576: point = 1143
   Insn 575: point = 1144
   Insn 574: point = 1144
   Insn 573: point = 1145
   Insn 572: point = 1146
   Insn 571: point = 1146
   Insn 570: point = 1147
   Insn 569: point = 1147
   Insn 568: point = 1149
  BB 43
   Insn 566: point = 1150
   Insn 565: point = 1150
   Insn 564: point = 1151
  BB 18
   Insn 1903: point = 1152
   Insn 373: point = 1152
   Insn 372: point = 1152
   Insn 371: point = 1152
   Insn 370: point = 1153
   Insn 369: point = 1154
   Insn 368: point = 1156
   Insn 367: point = 1157
   Insn 366: point = 1159
   Insn 365: point = 1161
   Insn 364: point = 1162
   Insn 363: point = 1162
   Insn 362: point = 1163
  BB 16
   Insn 353: point = 1164
   Insn 352: point = 1164
   Insn 351: point = 1164
   Insn 350: point = 1165
   Insn 349: point = 1166
   Insn 348: point = 1166
   Insn 347: point = 1167
   Insn 346: point = 1167
  BB 15
   Insn 343: point = 1168
   Insn 1980: point = 1169
   Insn 342: point = 1170
   Insn 341: point = 1171
   Insn 339: point = 1173
   Insn 338: point = 1175
   Insn 1978: point = 1177
	Hard reg 0 is preferable by r1004 with profit 1
   Insn 337: point = 1179
   Insn 1979: point = 1181
	Hard reg 4 is preferable by r1005 with profit 1
   Insn 1977: point = 1183
	Hard reg 0 is preferable by r1004 with profit 1
	Hard reg 2 is preferable by r1004 with profit 1
   Insn 336: point = 1185
   Insn 335: point = 1186
   Insn 334: point = 1188
   Insn 340: point = 1189
   Insn 333: point = 1190
  BB 14
   Insn 331: point = 1191
   Insn 330: point = 1191
   Insn 329: point = 1192
   Insn 328: point = 1194
   Insn 327: point = 1195
   Insn 326: point = 1195
   Insn 325: point = 1196
   Insn 324: point = 1197
   Insn 323: point = 1198
  BB 13
   Insn 321: point = 1199
   Insn 320: point = 1199
   Insn 319: point = 1199
   Insn 318: point = 1200
   Insn 317: point = 1201
   Insn 316: point = 1201
   Insn 315: point = 1202
   Insn 314: point = 1202
  BB 12
   Insn 311: point = 1203
   Insn 310: point = 1204
   Insn 309: point = 1204
   Insn 307: point = 1206
   Insn 306: point = 1208
   Insn 1975: point = 1210
	Hard reg 0 is preferable by r1002 with profit 1
   Insn 305: point = 1212
   Insn 1976: point = 1214
	Hard reg 4 is preferable by r1003 with profit 1
   Insn 1974: point = 1216
	Hard reg 0 is preferable by r1002 with profit 1
	Hard reg 2 is preferable by r1002 with profit 1
   Insn 304: point = 1218
   Insn 303: point = 1219
   Insn 302: point = 1221
   Insn 308: point = 1222
   Insn 301: point = 1223
  BB 11
   Insn 299: point = 1224
   Insn 298: point = 1224
   Insn 297: point = 1225
   Insn 296: point = 1227
   Insn 295: point = 1228
   Insn 294: point = 1228
   Insn 293: point = 1229
   Insn 292: point = 1230
   Insn 291: point = 1231
   Insn 290: point = 1232
   Insn 289: point = 1232
   Insn 288: point = 1233
   Insn 287: point = 1234
   Insn 286: point = 1236
   Insn 285: point = 1237
   Insn 284: point = 1239
   Insn 283: point = 1241
   Insn 282: point = 1242
   Insn 281: point = 1242
   Insn 280: point = 1243
   Insn 279: point = 1244
   Insn 278: point = 1245
   Insn 277: point = 1247
   Insn 276: point = 1249
  BB 10
   Insn 273: point = 1250
   Insn 272: point = 1251
   Insn 271: point = 1253
   Insn 270: point = 1254
   Insn 269: point = 1256
   Insn 268: point = 1258
   Insn 267: point = 1260
   Insn 266: point = 1261
   Insn 265: point = 1261
   Insn 264: point = 1262
   Insn 263: point = 1264
  BB 9
   Insn 261: point = 1265
   Insn 260: point = 1265
   Insn 259: point = 1266
   Insn 258: point = 1267
   Insn 257: point = 1267
   Insn 256: point = 1268
   Insn 255: point = 1268
   Insn 254: point = 1270
   Insn 253: point = 1272
  BB 8
   Insn 250: point = 1273
   Insn 249: point = 1274
  BB 7
   Insn 247: point = 1275
   Insn 246: point = 1275
   Insn 245: point = 1276
   Insn 244: point = 1277
   Insn 243: point = 1277
   Insn 242: point = 1278
   Insn 241: point = 1278
   Insn 240: point = 1280
   Insn 239: point = 1282
  BB 6
   Insn 236: point = 1283
   Insn 235: point = 1284
  BB 5
   Insn 233: point = 1285
   Insn 232: point = 1285
   Insn 231: point = 1286
   Insn 230: point = 1287
   Insn 229: point = 1287
   Insn 228: point = 1288
   Insn 227: point = 1288
   Insn 226: point = 1290
   Insn 225: point = 1292
  BB 4
   Insn 223: point = 1293
   Insn 222: point = 1293
  BB 2
   Insn 1901: point = 1293
   Insn 13: point = 1293
   Insn 12: point = 1293
   Insn 9: point = 1293
   Insn 7: point = 1295
   Insn 6: point = 1295
   Insn 5: point = 1295
   Insn 4: point = 1295
   Insn 3: point = 1295
   Insn 2: point = 1295
  BB 3
   Insn 218: point = 1295
   Insn 217: point = 1295
   Insn 216: point = 1296
   Insn 215: point = 1298
   Insn 214: point = 1299
   Insn 213: point = 1301
   Insn 212: point = 1303
   Insn 211: point = 1305
   Insn 210: point = 1306
   Insn 209: point = 1306
   Insn 208: point = 1307
   Insn 207: point = 1309
   Insn 206: point = 1310
   Insn 205: point = 1311
   Insn 204: point = 1313
   Insn 203: point = 1314
   Insn 202: point = 1316
   Insn 201: point = 1318
   Insn 200: point = 1320
   Insn 199: point = 1321
   Insn 198: point = 1321
   Insn 197: point = 1322
   Insn 196: point = 1324
   Insn 195: point = 1325
   Insn 194: point = 1326
   Insn 193: point = 1328
   Insn 192: point = 1329
   Insn 191: point = 1331
   Insn 190: point = 1333
   Insn 189: point = 1335
   Insn 188: point = 1336
   Insn 187: point = 1336
   Insn 186: point = 1337
   Insn 185: point = 1339
   Insn 184: point = 1340
   Insn 183: point = 1341
   Insn 182: point = 1343
   Insn 181: point = 1344
   Insn 180: point = 1346
   Insn 179: point = 1348
   Insn 178: point = 1350
   Insn 177: point = 1351
   Insn 176: point = 1351
   Insn 175: point = 1352
   Insn 174: point = 1354
   Insn 173: point = 1355
   Insn 172: point = 1356
   Insn 171: point = 1358
   Insn 170: point = 1359
   Insn 169: point = 1361
   Insn 168: point = 1363
   Insn 167: point = 1365
   Insn 166: point = 1366
   Insn 165: point = 1366
   Insn 164: point = 1367
   Insn 163: point = 1369
   Insn 162: point = 1370
   Insn 161: point = 1371
   Insn 160: point = 1372
   Insn 159: point = 1374
   Insn 158: point = 1375
   Insn 157: point = 1377
   Insn 156: point = 1379
   Insn 155: point = 1381
   Insn 154: point = 1382
   Insn 153: point = 1382
   Insn 152: point = 1383
   Insn 151: point = 1385
   Insn 150: point = 1386
   Insn 149: point = 1387
   Insn 148: point = 1389
   Insn 147: point = 1390
   Insn 146: point = 1392
   Insn 145: point = 1394
   Insn 144: point = 1396
   Insn 143: point = 1397
   Insn 142: point = 1397
   Insn 141: point = 1398
   Insn 140: point = 1400
   Insn 139: point = 1401
   Insn 138: point = 1402
   Insn 137: point = 1404
   Insn 136: point = 1405
   Insn 135: point = 1407
   Insn 134: point = 1409
   Insn 133: point = 1411
   Insn 132: point = 1412
   Insn 131: point = 1412
   Insn 130: point = 1413
   Insn 129: point = 1415
   Insn 128: point = 1416
   Insn 127: point = 1417
   Insn 126: point = 1419
   Insn 125: point = 1420
   Insn 124: point = 1422
   Insn 123: point = 1424
   Insn 122: point = 1426
   Insn 121: point = 1427
   Insn 120: point = 1427
   Insn 119: point = 1428
   Insn 118: point = 1430
   Insn 117: point = 1431
   Insn 116: point = 1432
   Insn 115: point = 1434
   Insn 114: point = 1435
   Insn 113: point = 1437
   Insn 112: point = 1439
   Insn 111: point = 1441
   Insn 110: point = 1442
   Insn 109: point = 1442
   Insn 108: point = 1443
   Insn 107: point = 1445
   Insn 106: point = 1446
   Insn 105: point = 1447
   Insn 104: point = 1448
   Insn 103: point = 1450
   Insn 102: point = 1451
   Insn 101: point = 1453
   Insn 100: point = 1455
   Insn 99: point = 1457
   Insn 98: point = 1458
   Insn 97: point = 1458
   Insn 96: point = 1459
   Insn 95: point = 1461
   Insn 94: point = 1462
   Insn 93: point = 1463
   Insn 92: point = 1465
   Insn 91: point = 1466
   Insn 90: point = 1468
   Insn 89: point = 1470
   Insn 88: point = 1472
   Insn 87: point = 1473
   Insn 86: point = 1473
   Insn 85: point = 1474
   Insn 84: point = 1476
   Insn 83: point = 1477
   Insn 82: point = 1478
   Insn 81: point = 1480
   Insn 80: point = 1481
   Insn 79: point = 1483
   Insn 78: point = 1485
   Insn 77: point = 1487
   Insn 76: point = 1488
   Insn 75: point = 1488
   Insn 74: point = 1489
   Insn 73: point = 1491
   Insn 72: point = 1492
   Insn 71: point = 1493
   Insn 70: point = 1495
   Insn 69: point = 1496
   Insn 68: point = 1498
   Insn 67: point = 1500
   Insn 66: point = 1502
   Insn 65: point = 1503
   Insn 64: point = 1503
   Insn 63: point = 1504
   Insn 62: point = 1506
   Insn 61: point = 1507
   Insn 60: point = 1508
   Insn 59: point = 1510
   Insn 58: point = 1511
   Insn 57: point = 1513
   Insn 56: point = 1515
   Insn 55: point = 1517
   Insn 54: point = 1518
   Insn 53: point = 1518
   Insn 52: point = 1519
   Insn 51: point = 1521
   Insn 50: point = 1522
   Insn 49: point = 1523
   Insn 48: point = 1524
   Insn 47: point = 1526
   Insn 46: point = 1527
   Insn 45: point = 1529
   Insn 44: point = 1531
   Insn 43: point = 1533
   Insn 42: point = 1534
   Insn 41: point = 1534
   Insn 40: point = 1535
   Insn 39: point = 1537
   Insn 38: point = 1538
   Insn 37: point = 1539
   Insn 36: point = 1541
   Insn 35: point = 1542
   Insn 34: point = 1544
   Insn 33: point = 1546
   Insn 32: point = 1548
   Insn 31: point = 1549
   Insn 30: point = 1549
   Insn 29: point = 1550
   Insn 28: point = 1552
   Insn 27: point = 1553
   Insn 26: point = 1554
   Insn 25: point = 1556
   Insn 24: point = 1557
   Insn 23: point = 1559
   Insn 22: point = 1561
   Insn 21: point = 1563
   Insn 20: point = 1564
   Insn 19: point = 1564
   Insn 18: point = 1565
   Insn 17: point = 1567
  BB 42
   Insn 560: point = 1568
  BB 40
   Insn 1919: point = 1568
   Insn 549: point = 1568
   Insn 548: point = 1569
   Insn 547: point = 1569
   Insn 546: point = 1569
   Insn 544: point = 1571
   Insn 543: point = 1573
   Insn 1982: point = 1575
	Hard reg 0 is preferable by r1007 with profit 1
   Insn 542: point = 1577
   Insn 1983: point = 1579
	Hard reg 4 is preferable by r1008 with profit 1
   Insn 1981: point = 1581
	Hard reg 0 is preferable by r1007 with profit 1
	Hard reg 2 is preferable by r1007 with profit 1
   Insn 541: point = 1583
   Insn 540: point = 1584
   Insn 539: point = 1586
   Insn 545: point = 1587
   Insn 538: point = 1588
   Insn 537: point = 1590
  BB 41
   Insn 557: point = 1591
   Insn 556: point = 1592
   Insn 555: point = 1592
   Insn 554: point = 1592
  BB 39
   Insn 535: point = 1593
   Insn 534: point = 1593
  BB 36
   Insn 1917: point = 1593
  BB 34
   Insn 1915: point = 1593
  BB 32
   Insn 1913: point = 1593
  BB 30
   Insn 1911: point = 1593
  BB 28
   Insn 1909: point = 1593
  BB 26
   Insn 1907: point = 1593
  BB 24
   Insn 1905: point = 1593
  BB 128
   Insn 1970: point = 1593
  BB 38
  BB 37
   Insn 530: point = 1593
   Insn 529: point = 1593
   Insn 528: point = 1593
   Insn 527: point = 1594
   Insn 526: point = 1595
   Insn 525: point = 1595
   Insn 524: point = 1596
   Insn 523: point = 1596
   Insn 522: point = 1598
  BB 35
   Insn 516: point = 1599
   Insn 515: point = 1599
   Insn 514: point = 1599
   Insn 513: point = 1600
   Insn 512: point = 1601
   Insn 511: point = 1601
   Insn 510: point = 1602
   Insn 509: point = 1602
   Insn 508: point = 1604
  BB 33
   Insn 502: point = 1605
   Insn 501: point = 1605
   Insn 500: point = 1605
   Insn 499: point = 1606
   Insn 498: point = 1607
   Insn 497: point = 1607
   Insn 496: point = 1608
   Insn 495: point = 1608
   Insn 494: point = 1610
  BB 31
   Insn 488: point = 1611
   Insn 487: point = 1611
   Insn 486: point = 1611
   Insn 485: point = 1612
   Insn 484: point = 1613
   Insn 483: point = 1613
   Insn 482: point = 1614
   Insn 481: point = 1614
   Insn 480: point = 1616
  BB 29
   Insn 474: point = 1617
   Insn 473: point = 1617
   Insn 472: point = 1617
   Insn 471: point = 1618
   Insn 470: point = 1619
   Insn 469: point = 1619
   Insn 468: point = 1620
   Insn 467: point = 1620
   Insn 466: point = 1622
  BB 27
   Insn 460: point = 1623
   Insn 459: point = 1623
   Insn 458: point = 1623
   Insn 457: point = 1624
   Insn 456: point = 1625
   Insn 455: point = 1625
   Insn 454: point = 1626
   Insn 453: point = 1626
   Insn 452: point = 1628
  BB 25
   Insn 446: point = 1629
   Insn 445: point = 1629
   Insn 444: point = 1629
   Insn 443: point = 1630
   Insn 442: point = 1631
   Insn 441: point = 1631
   Insn 440: point = 1632
   Insn 439: point = 1632
   Insn 438: point = 1634
  BB 23
   Insn 432: point = 1635
   Insn 431: point = 1635
   Insn 430: point = 1635
   Insn 429: point = 1636
   Insn 428: point = 1637
   Insn 427: point = 1637
   Insn 426: point = 1638
   Insn 425: point = 1638
   Insn 424: point = 1640
  BB 22
   Insn 419: point = 1641
   Insn 418: point = 1641
   Insn 417: point = 1642
  BB 21
   Insn 414: point = 1643
   Insn 413: point = 1643
   Insn 412: point = 1644
   Insn 411: point = 1645
   Insn 410: point = 1645
   Insn 409: point = 1646
   Insn 408: point = 1646
   Insn 407: point = 1648
   Insn 406: point = 1650
   Insn 405: point = 1651
   Insn 404: point = 1653
   Insn 403: point = 1655
  BB 20
   Insn 401: point = 1656
   Insn 400: point = 1656
   Insn 399: point = 1657
   Insn 398: point = 1658
   Insn 397: point = 1658
   Insn 396: point = 1659
   Insn 395: point = 1659
   Insn 394: point = 1661
   Insn 393: point = 1663
   Insn 392: point = 1664
   Insn 391: point = 1666
   Insn 390: point = 1668
  BB 19
   Insn 388: point = 1669
   Insn 387: point = 1669
   Insn 386: point = 1670
   Insn 385: point = 1671
   Insn 384: point = 1671
   Insn 383: point = 1672
   Insn 382: point = 1672
   Insn 381: point = 1674
   Insn 380: point = 1676
   Insn 379: point = 1677
   Insn 378: point = 1679
   Insn 377: point = 1681
  BB 120
   Insn 1965: point = 1682
   Insn 1833: point = 1682
   Insn 1832: point = 1682
  BB 119
   Insn 1830: point = 1682
   Insn 1829: point = 1682
   Insn 1828: point = 1683
   Insn 1827: point = 1684
   Insn 1826: point = 1684
   Insn 1825: point = 1685
   Insn 1824: point = 1685
   Insn 1823: point = 1687
   Insn 1822: point = 1689
   Insn 1821: point = 1690
   Insn 1820: point = 1692
   Insn 1819: point = 1694
  BB 117
   Insn 1811: point = 1695
   Insn 1810: point = 1695
   Insn 1809: point = 1696
   Insn 1808: point = 1697
   Insn 1807: point = 1697
   Insn 1806: point = 1698
   Insn 1805: point = 1698
   Insn 1804: point = 1700
   Insn 1803: point = 1702
   Insn 1802: point = 1703
   Insn 1801: point = 1705
   Insn 1800: point = 1707
  BB 115
   Insn 1754: point = 1708
   Insn 1753: point = 1708
   Insn 1752: point = 1709
   Insn 1751: point = 1710
   Insn 1750: point = 1710
   Insn 1749: point = 1711
   Insn 1748: point = 1711
   Insn 1747: point = 1713
   Insn 1746: point = 1715
   Insn 1745: point = 1716
   Insn 1744: point = 1718
   Insn 1743: point = 1720
  BB 113
   Insn 1725: point = 1721
   Insn 1724: point = 1721
   Insn 1723: point = 1722
   Insn 1722: point = 1723
   Insn 1721: point = 1723
   Insn 1720: point = 1724
   Insn 1719: point = 1724
   Insn 1718: point = 1726
   Insn 1717: point = 1728
   Insn 1716: point = 1729
   Insn 1715: point = 1731
   Insn 1714: point = 1733
  BB 111
   Insn 1696: point = 1734
   Insn 1695: point = 1734
   Insn 1694: point = 1735
   Insn 1693: point = 1736
   Insn 1692: point = 1736
   Insn 1691: point = 1737
   Insn 1690: point = 1737
   Insn 1689: point = 1739
   Insn 1688: point = 1741
   Insn 1687: point = 1742
   Insn 1686: point = 1744
   Insn 1685: point = 1746
  BB 109
   Insn 1667: point = 1747
   Insn 1666: point = 1747
   Insn 1665: point = 1748
   Insn 1664: point = 1749
   Insn 1663: point = 1749
   Insn 1662: point = 1750
   Insn 1661: point = 1750
   Insn 1660: point = 1752
   Insn 1659: point = 1754
   Insn 1658: point = 1755
   Insn 1657: point = 1757
   Insn 1656: point = 1759
  BB 107
   Insn 1638: point = 1760
   Insn 1637: point = 1760
   Insn 1636: point = 1761
   Insn 1635: point = 1762
   Insn 1634: point = 1762
   Insn 1633: point = 1763
   Insn 1632: point = 1763
   Insn 1631: point = 1765
   Insn 1630: point = 1767
   Insn 1629: point = 1768
   Insn 1628: point = 1770
   Insn 1627: point = 1772
  BB 105
   Insn 1597: point = 1773
   Insn 1596: point = 1773
   Insn 1595: point = 1774
   Insn 1594: point = 1775
   Insn 1593: point = 1775
   Insn 1592: point = 1776
   Insn 1591: point = 1776
   Insn 1590: point = 1778
   Insn 1589: point = 1780
   Insn 1588: point = 1781
   Insn 1587: point = 1783
   Insn 1586: point = 1785
  BB 103
   Insn 1568: point = 1786
   Insn 1567: point = 1786
   Insn 1566: point = 1787
   Insn 1565: point = 1788
   Insn 1564: point = 1788
   Insn 1563: point = 1789
   Insn 1562: point = 1789
   Insn 1561: point = 1791
   Insn 1560: point = 1793
   Insn 1559: point = 1794
   Insn 1558: point = 1796
   Insn 1557: point = 1798
  BB 101
   Insn 1539: point = 1799
   Insn 1538: point = 1799
   Insn 1537: point = 1800
   Insn 1536: point = 1801
   Insn 1535: point = 1801
   Insn 1534: point = 1802
   Insn 1533: point = 1802
   Insn 1532: point = 1804
   Insn 1531: point = 1806
   Insn 1530: point = 1807
   Insn 1529: point = 1809
   Insn 1528: point = 1811
  BB 97
   Insn 1464: point = 1812
   Insn 1463: point = 1812
   Insn 1462: point = 1813
   Insn 1461: point = 1814
   Insn 1460: point = 1814
   Insn 1459: point = 1815
   Insn 1458: point = 1815
   Insn 1457: point = 1817
   Insn 1456: point = 1819
   Insn 1455: point = 1820
   Insn 1454: point = 1822
   Insn 1453: point = 1824
  BB 93
   Insn 1400: point = 1825
   Insn 1399: point = 1825
   Insn 1398: point = 1826
   Insn 1397: point = 1827
   Insn 1396: point = 1827
   Insn 1395: point = 1828
   Insn 1394: point = 1828
   Insn 1393: point = 1830
   Insn 1392: point = 1832
   Insn 1391: point = 1833
   Insn 1390: point = 1835
   Insn 1389: point = 1837
  BB 56
   Insn 734: point = 1838
   Insn 733: point = 1838
   Insn 732: point = 1839
   Insn 731: point = 1840
   Insn 730: point = 1840
   Insn 729: point = 1841
   Insn 728: point = 1841
   Insn 727: point = 1843
   Insn 726: point = 1845
   Insn 725: point = 1846
   Insn 724: point = 1848
   Insn 723: point = 1850
  BB 55
   Insn 721: point = 1851
   Insn 720: point = 1851
   Insn 719: point = 1852
   Insn 718: point = 1853
   Insn 717: point = 1853
   Insn 716: point = 1854
   Insn 715: point = 1854
   Insn 714: point = 1856
   Insn 713: point = 1858
   Insn 712: point = 1859
   Insn 711: point = 1861
   Insn 710: point = 1863
  BB 54
   Insn 708: point = 1864
   Insn 707: point = 1864
   Insn 706: point = 1865
   Insn 705: point = 1866
   Insn 704: point = 1866
   Insn 703: point = 1867
   Insn 702: point = 1867
   Insn 701: point = 1869
   Insn 700: point = 1871
   Insn 699: point = 1872
   Insn 698: point = 1874
   Insn 697: point = 1876
   Insn 696: point = 1877
 r83: [1563..1565]
 r84: [1555..1557]
 r85: [1553..1554]
 r86: [1548..1550]
 r87: [1540..1542]
 r88: [1538..1539]
 r89: [1533..1535]
 r90: [1525..1527]
 r91: [1522..1524]
 r92: [1517..1519]
 r93: [1509..1511]
 r94: [1507..1508]
 r95: [1502..1504]
 r96: [1494..1496]
 r97: [1492..1493]
 r98: [1487..1489]
 r99: [1479..1481]
 r100: [1477..1478]
 r101: [1472..1474]
 r102: [1464..1466]
 r103: [1462..1463]
 r104: [1457..1459]
 r105: [1449..1451]
 r106: [1446..1448]
 r107: [1441..1443]
 r108: [1433..1435]
 r109: [1431..1432]
 r110: [1426..1428]
 r111: [1418..1420]
 r112: [1416..1417]
 r113: [1411..1413]
 r114: [1403..1405]
 r115: [1401..1402]
 r116: [1396..1398]
 r117: [1388..1390]
 r118: [1386..1387]
 r119: [1381..1383]
 r120: [1373..1375]
 r121: [1370..1372]
 r122: [1365..1367]
 r123: [1357..1359]
 r124: [1355..1356]
 r125: [1350..1352]
 r126: [1342..1344]
 r127: [1340..1341]
 r128: [1335..1337]
 r129: [1327..1329]
 r130: [1325..1326]
 r131: [1320..1322]
 r132: [1312..1314]
 r133: [1310..1311]
 r134: [1305..1307]
 r135: [1297..1299]
 r136: [1295..1296]
 r137: [1289..1290]
 r138: [1287..1288]
 r139: [1285..1286]
 r140: [1279..1280]
 r141: [1277..1278]
 r142: [1275..1276]
 r143: [1269..1270]
 r144: [1267..1268]
 r145: [1265..1266]
 r146: [1260..1262]
 r147: [1252..1254]
 r148: [1250..1251]
 r149: [1246..1247]
 r150: [1243..1245]
 r151: [1242..1244]
 r152: [1238..1239]
 r153: [1233..1237]
 r154: [1232..1234]
 r155: [1229..1231]
 r156: [1224..1225]
 r157: [1205..1223]
 r158: [1205..1206]
 r159: [1203..1204]
 r160: [1201..1202]
 r161: [1199..1200]
 r162: [1195..1198]
 r163: [1191..1192]
 r164: [1172..1190]
 r165: [1172..1173]
 r166: [1168..1171]
 r167: [1166..1167]
 r168: [1164..1165]
 r169: [1158..1159]
 r170: [1153..1157]
 r171: [1152..1154]
 r172: [1678..1679]
 r173: [1675..1677]
 r174: [1673..1674]
 r175: [1671..1672]
 r176: [1669..1670]
 r177: [1665..1666]
 r178: [1662..1664]
 r179: [1660..1661]
 r180: [1658..1659]
 r181: [1656..1657]
 r182: [1652..1653]
 r183: [1649..1651]
 r184: [1647..1648]
 r185: [1645..1646]
 r186: [1643..1644]
 r187: [1637..1638]
 r188: [1631..1632]
 r189: [1625..1626]
 r190: [1619..1620]
 r191: [1613..1614]
 r192: [1607..1608]
 r193: [1601..1602]
 r194: [1595..1596]
 r195: [1570..1588]
 r196: [1570..1571]
 r197: [1568..1569]
 r198: [1146..1147]
 r199: [1144..1145]
 r200: [1142..1143]
 r201: [1138..1139]
 r202: [1134..1135]
 r203: [1132..1133]
 r204: [0..1]
 r205: [1126..1127]
 r206: [1122..1123]
 r207: [1117..1121]
 r208: [1116..1118]
 r209: [1095..1113]
 r210: [1095..1096]
 r211: [1091..1094]
 r212: [1087..1088]
 r213: [1085..1086]
 r214: [1081..1082]
 r215: [9..10]
 r216: [1873..1874]
 r217: [1870..1872]
 r218: [1868..1869]
 r219: [1866..1867]
 r220: [1864..1865]
 r221: [1860..1861]
 r222: [1857..1859]
 r223: [1855..1856]
 r224: [1853..1854]
 r225: [1851..1852]
 r226: [1847..1848]
 r227: [1844..1846]
 r228: [1842..1843]
 r229: [1840..1841]
 r230: [1838..1839]
 r231: [1834..1835]
 r232: [1831..1833]
 r233: [1829..1830]
 r234: [1827..1828]
 r235: [1825..1826]
 r236: [339..340]
 r237: [336..338]
 r238: [328..330]
 r239: [326..327]
 r240: [324..325]
 r241: [320..321]
 r242: [317..319]
 r243: [309..311]
 r244: [307..308]
 r245: [303..304]
 r246: [300..302]
 r247: [292..294]
 r248: [289..291]
 r249: [1821..1822]
 r250: [1818..1820]
 r251: [1816..1817]
 r252: [1814..1815]
 r253: [1812..1813]
 r254: [285..286]
 r255: [282..284]
 r256: [274..276]
 r257: [272..273]
 r258: [270..271]
 r259: [266..267]
 r260: [263..265]
 r261: [255..257]
 r262: [253..254]
 r263: [249..250]
 r264: [246..248]
 r265: [238..240]
 r266: [236..237]
 r267: [224..235]
 r268: [231..232]
 r269: [228..230]
 r270: [226..227]
 r271: [223..225]
 r272: [1808..1809]
 r273: [1805..1807]
 r274: [1803..1804]
 r275: [1801..1802]
 r276: [1799..1800]
 r277: [219..220]
 r278: [216..218]
 r279: [208..210]
 r280: [206..207]
 r281: [1795..1796]
 r282: [1792..1794]
 r283: [1790..1791]
 r284: [1788..1789]
 r285: [1786..1787]
 r286: [202..203]
 r287: [199..201]
 r288: [191..193]
 r289: [189..190]
 r290: [1782..1783]
 r291: [1779..1781]
 r292: [1777..1778]
 r293: [1775..1776]
 r294: [1773..1774]
 r295: [185..186]
 r296: [182..184]
 r297: [174..176]
 r298: [172..173]
 r299: [160..171]
 r300: [167..168]
 r301: [164..166]
 r302: [162..163]
 r303: [159..161]
 r304: [1769..1770]
 r305: [1766..1768]
 r306: [1764..1765]
 r307: [1762..1763]
 r308: [1760..1761]
 r309: [155..156]
 r310: [152..154]
 r311: [144..146]
 r312: [142..143]
 r313: [1756..1757]
 r314: [1753..1755]
 r315: [1751..1752]
 r316: [1749..1750]
 r317: [1747..1748]
 r318: [138..139]
 r319: [135..137]
 r320: [127..129]
 r321: [125..126]
 r322: [1743..1744]
 r323: [1740..1742]
 r324: [1738..1739]
 r325: [1736..1737]
 r326: [1734..1735]
 r327: [121..122]
 r328: [118..120]
 r329: [110..112]
 r330: [108..109]
 r331: [1730..1731]
 r332: [1727..1729]
 r333: [1725..1726]
 r334: [1723..1724]
 r335: [1721..1722]
 r336: [104..105]
 r337: [101..103]
 r338: [93..95]
 r339: [91..92]
 r340: [1717..1718]
 r341: [1714..1716]
 r342: [1712..1713]
 r343: [1710..1711]
 r344: [1708..1709]
 r345: [77..88]
 r346: [84..85]
 r347: [81..83]
 r348: [79..80]
 r349: [76..78]
 r350: [72..73]
 r351: [60..71]
 r352: [67..68]
 r353: [64..66]
 r354: [62..63]
 r355: [59..61]
 r356: [55..56]
 r357: [52..54]
 r358: [41..49]
 r359: [45..46]
 r360: [43..44]
 r361: [41..42]
 r362: [1704..1705]
 r363: [1701..1703]
 r364: [1699..1700]
 r365: [1697..1698]
 r366: [1695..1696]
 r367: [1691..1692]
 r368: [1688..1690]
 r369: [1686..1687]
 r370: [1684..1685]
 r371: [1682..1683]
 r372: [37..38]
 r373: [34..36]
 r374: [32..33]
 r375: [30..31]
 r376: [28..29]
 r377: [24..25]
 r378: [21..23]
 r379: [19..20]
 r380: [14..18]
 r381: [13..15]
 r382: [1073..1074]
 r383: [1070..1072]
 r384: [1068..1069]
 r385: [1066..1067]
 r386: [1064..1065]
 r387: [1060..1061]
 r388: [1057..1059]
 r389: [1049..1051]
 r390: [1047..1048]
 r391: [1043..1044]
 r392: [1040..1042]
 r393: [1032..1034]
 r394: [1029..1031]
 r395: [1023..1024]
 r396: [1020..1022]
 r397: [1012..1014]
 r398: [1009..1011]
 r399: [1005..1006]
 r400: [1002..1004]
 r401: [994..996]
 r402: [992..993]
 r403: [988..989]
 r404: [985..987]
 r405: [983..984]
 r406: [978..982]
 r407: [977..979]
 r408: [973..974]
 r409: [952..970]
 r410: [952..953]
 r411: [950..951]
 r412: [946..947]
 r413: [943..945]
 r414: [941..942]
 r415: [939..940]
 r416: [937..938]
 r417: [933..934]
 r418: [930..932]
 r419: [922..924]
 r420: [920..921]
 r421: [916..917]
 r422: [913..915]
 r423: [905..907]
 r424: [887..904]
 r425: [900..901]
 r426: [897..899]
 r427: [895..896]
 r428: [893..894]
 r429: [891..892]
 r430: [887..888]
 r431: [883..884]
 r432: [880..882]
 r433: [872..874]
 r434: [867..871]
 r435: [867..868]
 r436: [861..862]
 r437: [858..860]
 r438: [850..852]
 r439: [832..849]
 r440: [845..846]
 r441: [842..844]
 r442: [840..841]
 r443: [838..839]
 r444: [836..837]
 r445: [832..833]
 r446: [828..829]
 r447: [825..827]
 r448: [817..819]
 r449: [814..816]
 r450: [810..811]
 r451: [807..809]
 r452: [799..801]
 r453: [797..798]
 r454: [793..794]
 r455: [790..792]
 r456: [788..789]
 r457: [783..787]
 r458: [782..784]
 r459: [778..779]
 r460: [757..775]
 r461: [757..758]
 r462: [755..756]
 r463: [751..752]
 r464: [748..750]
 r465: [746..747]
 r466: [744..745]
 r467: [742..743]
 r468: [738..739]
 r469: [735..737]
 r470: [727..729]
 r471: [725..726]
 r472: [721..722]
 r473: [718..720]
 r474: [710..712]
 r475: [696..709]
 r476: [705..706]
 r477: [702..704]
 r478: [700..701]
 r479: [698..699]
 r480: [696..697]
 r481: [692..693]
 r482: [689..691]
 r483: [681..683]
 r484: [663..680]
 r485: [676..677]
 r486: [673..675]
 r487: [671..672]
 r488: [669..670]
 r489: [667..668]
 r490: [663..664]
 r491: [659..660]
 r492: [656..658]
 r493: [648..650]
 r494: [643..647]
 r495: [643..644]
 r496: [637..638]
 r497: [634..636]
 r498: [626..628]
 r499: [624..625]
 r500: [620..621]
 r501: [617..619]
 r502: [609..611]
 r503: [604..608]
 r504: [604..605]
 r505: [600..601]
 r506: [597..599]
 r507: [589..591]
 r508: [571..588]
 r509: [584..585]
 r510: [581..583]
 r511: [579..580]
 r512: [577..578]
 r513: [575..576]
 r514: [571..572]
 r515: [567..568]
 r516: [564..566]
 r517: [556..558]
 r518: [553..555]
 r519: [549..550]
 r520: [546..548]
 r521: [544..545]
 r522: [539..543]
 r523: [538..540]
 r524: [534..535]
 r525: [513..531]
 r526: [513..514]
 r527: [509..512]
 r528: [505..506]
 r529: [503..504]
 r530: [497..498]
 r531: [493..494]
 r532: [490..492]
 r533: [488..489]
 r534: [483..487]
 r535: [482..484]
 r536: [461..479]
 r537: [461..462]
 r538: [457..460]
 r539: [453..454]
 r540: [451..452]
 r541: [445..446]
 r542: [442..444]
 r543: [440..441]
 r544: [433..439]
 r545: [435..436]
 r546: [432..434]
 r547: [428..429]
 r548: [423..427]
 r549: [422..424]
 r550: [416..417]
 r551: [410..411]
 r552: [404..405]
 r553: [398..399]
 r554: [392..393]
 r555: [386..387]
 r556: [380..381]
 r557: [374..375]
 r558: [347..365]
 r559: [347..348]
 r560: [343..346]
 r561: [7..8]
 r562: [5..6]
 r563: [1566..1567]
 r564: [1562..1564] [1558..1559]
 r565: [1560..1561]
 r566: [1555..1556]
 r567: [1551..1552]
 r568: [1547..1549] [1543..1544]
 r569: [1545..1546]
 r570: [1540..1541]
 r571: [1536..1537]
 r572: [1532..1534] [1528..1529]
 r573: [1530..1531]
 r574: [1525..1526]
 r575: [1522..1523]
 r576: [1520..1521]
 r577: [1516..1518] [1512..1513]
 r578: [1514..1515]
 r579: [1509..1510]
 r580: [1505..1506]
 r581: [1501..1503] [1497..1498]
 r582: [1499..1500]
 r583: [1494..1495]
 r584: [1490..1491]
 r585: [1486..1488] [1482..1483]
 r586: [1484..1485]
 r587: [1479..1480]
 r588: [1475..1476]
 r589: [1471..1473] [1467..1468]
 r590: [1469..1470]
 r591: [1464..1465]
 r592: [1460..1461]
 r593: [1456..1458] [1452..1453]
 r594: [1454..1455]
 r595: [1449..1450]
 r596: [1446..1447]
 r597: [1444..1445]
 r598: [1440..1442] [1436..1437]
 r599: [1438..1439]
 r600: [1433..1434]
 r601: [1429..1430]
 r602: [1425..1427] [1421..1422]
 r603: [1423..1424]
 r604: [1418..1419]
 r605: [1414..1415]
 r606: [1410..1412] [1406..1407]
 r607: [1408..1409]
 r608: [1403..1404]
 r609: [1399..1400]
 r610: [1395..1397] [1391..1392]
 r611: [1393..1394]
 r612: [1388..1389]
 r613: [1384..1385]
 r614: [1380..1382] [1376..1377]
 r615: [1378..1379]
 r616: [1373..1374]
 r617: [1370..1371]
 r618: [1368..1369]
 r619: [1364..1366] [1360..1361]
 r620: [1362..1363]
 r621: [1357..1358]
 r622: [1353..1354]
 r623: [1349..1351] [1345..1346]
 r624: [1347..1348]
 r625: [1342..1343]
 r626: [1338..1339]
 r627: [1334..1336] [1330..1331]
 r628: [1332..1333]
 r629: [1327..1328]
 r630: [1323..1324]
 r631: [1319..1321] [1315..1316]
 r632: [1317..1318]
 r633: [1312..1313]
 r634: [1308..1309]
 r635: [1304..1306] [1300..1301]
 r636: [1302..1303]
 r637: [1297..1298]
 r638: [1291..1292]
 r639: [1283..1284]
 r640: [1281..1282]
 r641: [1273..1274]
 r642: [1271..1272]
 r643: [1263..1264]
 r644: [1259..1261] [1255..1256]
 r645: [1257..1258]
 r646: [1252..1253]
 r647: [1248..1249]
 r648: [1240..1241]
 r649: [1235..1236]
 r650: [1228..1230]
 r651: [1226..1227]
 r652: [1220..1222]
 r653: [1209..1210]
 r654: [1207..1208]
 r655: [1215..1219]
 r656: [1217..1221]
 r657: [1213..1218]
 r658: [1196..1197]
 r659: [1193..1194]
 r660: [1187..1189]
 r661: [1176..1177]
 r662: [1174..1175]
 r663: [1182..1186]
 r664: [1184..1188]
 r665: [1180..1185]
 r666: [1162..1163]
 r667: [1160..1161]
 r668: [1155..1156]
 r669: [1680..1681]
 r670: [1675..1676]
 r671: [1667..1668]
 r672: [1662..1663]
 r673: [1654..1655]
 r674: [1649..1650]
 r675: [1641..1642]
 r676: [1639..1640]
 r677: [1635..1636]
 r678: [1633..1634]
 r679: [1629..1630]
 r680: [1627..1628]
 r681: [1623..1624]
 r682: [1621..1622]
 r683: [1617..1618]
 r684: [1615..1616]
 r685: [1611..1612]
 r686: [1609..1610]
 r687: [1605..1606]
 r688: [1603..1604]
 r689: [1599..1600]
 r690: [1597..1598]
 r691: [1593..1594]
 r692: [1589..1590]
 r693: [1585..1587]
 r694: [1574..1575]
 r695: [1572..1573]
 r696: [1580..1584]
 r697: [1582..1586]
 r698: [1578..1583]
 r699: [1591..1592]
 r700: [1150..1151]
 r701: [1148..1149]
 r702: [1140..1141]
 r703: [1136..1137]
 r704: [1130..1131]
 r705: [2..3]
 r706: [1128..1129]
 r707: [1124..1125]
 r708: [1119..1120]
 r709: [1114..1115]
 r710: [1110..1112]
 r711: [1099..1100]
 r712: [1097..1098]
 r713: [1105..1109]
 r714: [1107..1111]
 r715: [1103..1108]
 r716: [1089..1090]
 r717: [1083..1084]
 r718: [1079..1080]
 r719: [1077..1078]
 r720: [1875..1876]
 r721: [1870..1871]
 r722: [1862..1863]
 r723: [1857..1858]
 r724: [1849..1850]
 r725: [1844..1845]
 r726: [1075..1076]
 r727: [1070..1071]
 r728: [1062..1063]
 r729: [1056..1058] [1052..1053]
 r730: [1054..1055]
 r731: [1049..1050]
 r732: [1045..1046]
 r733: [1039..1041] [1035..1036]
 r734: [1037..1038]
 r735: [1032..1033]
 r736: [1029..1030]
 r737: [1027..1028]
 r738: [1025..1026]
 r739: [1019..1021] [1015..1016]
 r740: [1017..1018]
 r741: [1012..1013]
 r742: [1009..1010]
 r743: [1007..1008]
 r744: [1001..1003] [997..998]
 r745: [999..1000]
 r746: [994..995]
 r747: [990..991]
 r748: [985..986]
 r749: [980..981]
 r750: [975..976]
 r751: [971..972]
 r752: [967..969]
 r753: [956..957]
 r754: [954..955]
 r755: [962..966]
 r756: [964..968]
 r757: [960..965]
 r758: [948..949]
 r759: [943..944]
 r760: [935..936]
 r761: [929..931] [925..926]
 r762: [927..928]
 r763: [922..923]
 r764: [918..919]
 r765: [912..914] [908..909]
 r766: [910..911]
 r767: [905..906]
 r768: [902..903]
 r769: [897..898]
 r770: [885..886]
 r771: [879..881] [875..876]
 r772: [877..878]
 r773: [872..873]
 r774: [869..870]
 r775: [865..866]
 r776: [863..864]
 r777: [857..859] [853..854]
 r778: [855..856]
 r779: [850..851]
 r780: [847..848]
 r781: [842..843]
 r782: [830..831]
 r783: [824..826] [820..821]
 r784: [822..823]
 r785: [817..818]
 r786: [814..815]
 r787: [812..813]
 r788: [806..808] [802..803]
 r789: [804..805]
 r790: [799..800]
 r791: [795..796]
 r792: [790..791]
 r793: [785..786]
 r794: [780..781]
 r795: [776..777]
 r796: [772..774]
 r797: [761..762]
 r798: [759..760]
 r799: [767..771]
 r800: [769..773]
 r801: [765..770]
 r802: [753..754]
 r803: [748..749]
 r804: [740..741]
 r805: [734..736] [730..731]
 r806: [732..733]
 r807: [727..728]
 r808: [723..724]
 r809: [717..719] [713..714]
 r810: [715..716]
 r811: [710..711]
 r812: [707..708]
 r813: [702..703]
 r814: [694..695]
 r815: [688..690] [684..685]
 r816: [686..687]
 r817: [681..682]
 r818: [678..679]
 r819: [673..674]
 r820: [661..662]
 r821: [655..657] [651..652]
 r822: [653..654]
 r823: [648..649]
 r824: [645..646]
 r825: [641..642]
 r826: [639..640]
 r827: [633..635] [629..630]
 r828: [631..632]
 r829: [626..627]
 r830: [622..623]
 r831: [616..618] [612..613]
 r832: [614..615]
 r833: [609..610]
 r834: [606..607]
 r835: [602..603]
 r836: [596..598] [592..593]
 r837: [594..595]
 r838: [589..590]
 r839: [586..587]
 r840: [581..582]
 r841: [569..570]
 r842: [563..565] [559..560]
 r843: [561..562]
 r844: [556..557]
 r845: [553..554]
 r846: [551..552]
 r847: [546..547]
 r848: [541..542]
 r849: [536..537]
 r850: [532..533]
 r851: [528..530]
 r852: [517..518]
 r853: [515..516]
 r854: [523..527]
 r855: [525..529]
 r856: [521..526]
 r857: [507..508]
 r858: [501..502]
 r859: [499..500]
 r860: [495..496]
 r861: [490..491]
 r862: [485..486]
 r863: [480..481]
 r864: [476..478]
 r865: [465..466]
 r866: [463..464]
 r867: [471..475]
 r868: [473..477]
 r869: [469..474]
 r870: [455..456]
 r871: [449..450]
 r872: [447..448]
 r873: [442..443]
 r874: [437..438]
 r875: [430..431]
 r876: [425..426]
 r877: [420..421]
 r878: [418..419]
 r879: [414..415]
 r880: [412..413]
 r881: [408..409]
 r882: [406..407]
 r883: [402..403]
 r884: [400..401]
 r885: [396..397]
 r886: [394..395]
 r887: [390..391]
 r888: [388..389]
 r889: [384..385]
 r890: [382..383]
 r891: [378..379]
 r892: [376..377]
 r893: [372..373]
 r894: [366..367]
 r895: [362..364]
 r896: [351..352]
 r897: [349..350]
 r898: [357..361]
 r899: [359..363]
 r900: [355..360]
 r901: [368..371]
 r902: [1836..1837]
 r903: [1831..1832]
 r904: [341..342]
 r905: [335..337] [331..332]
 r906: [333..334]
 r907: [328..329]
 r908: [322..323]
 r909: [316..318] [312..313]
 r910: [314..315]
 r911: [309..310]
 r912: [305..306]
 r913: [299..301] [295..296]
 r914: [297..298]
 r915: [292..293]
 r916: [289..290]
 r917: [1823..1824]
 r918: [1818..1819]
 r919: [287..288]
 r920: [281..283] [277..278]
 r921: [279..280]
 r922: [274..275]
 r923: [268..269]
 r924: [262..264] [258..259]
 r925: [260..261]
 r926: [255..256]
 r927: [251..252]
 r928: [245..247] [241..242]
 r929: [243..244]
 r930: [238..239]
 r931: [233..234]
 r932: [228..229]
 r933: [1810..1811]
 r934: [1805..1806]
 r935: [221..222]
 r936: [215..217] [211..212]
 r937: [213..214]
 r938: [208..209]
 r939: [1797..1798]
 r940: [1792..1793]
 r941: [204..205]
 r942: [198..200] [194..195]
 r943: [196..197]
 r944: [191..192]
 r945: [1784..1785]
 r946: [1779..1780]
 r947: [187..188]
 r948: [181..183] [177..178]
 r949: [179..180]
 r950: [174..175]
 r951: [169..170]
 r952: [164..165]
 r953: [1771..1772]
 r954: [1766..1767]
 r955: [157..158]
 r956: [151..153] [147..148]
 r957: [149..150]
 r958: [144..145]
 r959: [1758..1759]
 r960: [1753..1754]
 r961: [140..141]
 r962: [134..136] [130..131]
 r963: [132..133]
 r964: [127..128]
 r965: [1745..1746]
 r966: [1740..1741]
 r967: [123..124]
 r968: [117..119] [113..114]
 r969: [115..116]
 r970: [110..111]
 r971: [1732..1733]
 r972: [1727..1728]
 r973: [106..107]
 r974: [100..102] [96..97]
 r975: [98..99]
 r976: [93..94]
 r977: [1719..1720]
 r978: [1714..1715]
 r979: [89..90]
 r980: [86..87]
 r981: [81..82]
 r982: [74..75]
 r983: [69..70]
 r984: [64..65]
 r985: [57..58]
 r986: [52..53]
 r987: [50..51]
 r988: [47..48]
 r989: [1706..1707]
 r990: [1701..1702]
 r991: [1693..1694]
 r992: [1688..1689]
 r993: [39..40]
 r994: [34..35]
 r995: [26..27]
 r996: [21..22]
 r997: [16..17]
 r998: [11..12]
 r1000: [1293..1294]
 r1001: [4..4]
 r1002: [1211..1216]
 r1003: [1212..1214]
 r1004: [1178..1183]
 r1005: [1179..1181]
 r1006: [1169..1170]
 r1007: [1576..1581]
 r1008: [1577..1579]
 r1009: [1101..1106]
 r1010: [1102..1104]
 r1011: [1092..1093]
 r1012: [958..963]
 r1013: [959..961]
 r1014: [889..890]
 r1015: [834..835]
 r1016: [763..768]
 r1017: [764..766]
 r1018: [665..666]
 r1019: [573..574]
 r1020: [519..524]
 r1021: [520..522]
 r1022: [510..511]
 r1023: [467..472]
 r1024: [468..470]
 r1025: [458..459]
 r1026: [353..358]
 r1027: [354..356]
 r1028: [344..345]
 r1029: [369..370]
Compressing live ranges: from 1877 to 1581 - 84%
Ranges after the compression:
 r83: [1291..1292]
 r84: [1285..1286]
 r85: [1283..1284]
 r86: [1279..1280]
 r87: [1273..1274]
 r88: [1271..1272]
 r89: [1267..1268]
 r90: [1261..1262]
 r91: [1259..1260]
 r92: [1255..1256]
 r93: [1249..1250]
 r94: [1247..1248]
 r95: [1243..1244]
 r96: [1237..1238]
 r97: [1235..1236]
 r98: [1231..1232]
 r99: [1225..1226]
 r100: [1223..1224]
 r101: [1219..1220]
 r102: [1213..1214]
 r103: [1211..1212]
 r104: [1207..1208]
 r105: [1201..1202]
 r106: [1199..1200]
 r107: [1195..1196]
 r108: [1189..1190]
 r109: [1187..1188]
 r110: [1183..1184]
 r111: [1177..1178]
 r112: [1175..1176]
 r113: [1171..1172]
 r114: [1165..1166]
 r115: [1163..1164]
 r116: [1159..1160]
 r117: [1153..1154]
 r118: [1151..1152]
 r119: [1147..1148]
 r120: [1141..1142]
 r121: [1139..1140]
 r122: [1135..1136]
 r123: [1129..1130]
 r124: [1127..1128]
 r125: [1123..1124]
 r126: [1117..1118]
 r127: [1115..1116]
 r128: [1111..1112]
 r129: [1105..1106]
 r130: [1103..1104]
 r131: [1099..1100]
 r132: [1093..1094]
 r133: [1091..1092]
 r134: [1087..1088]
 r135: [1081..1082]
 r136: [1079..1080]
 r137: [1073..1074]
 r138: [1071..1072]
 r139: [1069..1070]
 r140: [1063..1064]
 r141: [1061..1062]
 r142: [1059..1060]
 r143: [1053..1054]
 r144: [1051..1052]
 r145: [1049..1050]
 r146: [1045..1046]
 r147: [1039..1040]
 r148: [1037..1038]
 r149: [1033..1034]
 r150: [1031..1032]
 r151: [1031..1032]
 r152: [1027..1028]
 r153: [1023..1026]
 r154: [1023..1024]
 r155: [1021..1022]
 r156: [1017..1018]
 r157: [1003..1016]
 r158: [1003..1004]
 r159: [1001..1002]
 r160: [999..1000]
 r161: [997..998]
 r162: [995..996]
 r163: [991..992]
 r164: [977..990]
 r165: [977..978]
 r166: [975..976]
 r167: [973..974]
 r168: [971..972]
 r169: [965..966]
 r170: [961..964]
 r171: [961..962]
 r172: [1397..1398]
 r173: [1395..1396]
 r174: [1393..1394]
 r175: [1391..1392]
 r176: [1389..1390]
 r177: [1385..1386]
 r178: [1383..1384]
 r179: [1381..1382]
 r180: [1379..1380]
 r181: [1377..1378]
 r182: [1373..1374]
 r183: [1371..1372]
 r184: [1369..1370]
 r185: [1367..1368]
 r186: [1365..1366]
 r187: [1359..1360]
 r188: [1353..1354]
 r189: [1347..1348]
 r190: [1341..1342]
 r191: [1335..1336]
 r192: [1329..1330]
 r193: [1323..1324]
 r194: [1317..1318]
 r195: [1297..1310]
 r196: [1297..1298]
 r197: [1295..1296]
 r198: [955..956]
 r199: [953..954]
 r200: [951..952]
 r201: [947..948]
 r202: [943..944]
 r203: [941..942]
 r204: [0..1]
 r205: [935..936]
 r206: [931..932]
 r207: [927..930]
 r208: [927..928]
 r209: [911..924]
 r210: [911..912]
 r211: [909..910]
 r212: [905..906]
 r213: [903..904]
 r214: [899..900]
 r215: [9..10]
 r216: [1577..1578]
 r217: [1575..1576]
 r218: [1573..1574]
 r219: [1571..1572]
 r220: [1569..1570]
 r221: [1565..1566]
 r222: [1563..1564]
 r223: [1561..1562]
 r224: [1559..1560]
 r225: [1557..1558]
 r226: [1553..1554]
 r227: [1551..1552]
 r228: [1549..1550]
 r229: [1547..1548]
 r230: [1545..1546]
 r231: [1541..1542]
 r232: [1539..1540]
 r233: [1537..1538]
 r234: [1535..1536]
 r235: [1533..1534]
 r236: [281..282]
 r237: [279..280]
 r238: [273..274]
 r239: [271..272]
 r240: [269..270]
 r241: [265..266]
 r242: [263..264]
 r243: [257..258]
 r244: [255..256]
 r245: [251..252]
 r246: [249..250]
 r247: [243..244]
 r248: [241..242]
 r249: [1529..1530]
 r250: [1527..1528]
 r251: [1525..1526]
 r252: [1523..1524]
 r253: [1521..1522]
 r254: [237..238]
 r255: [235..236]
 r256: [229..230]
 r257: [227..228]
 r258: [225..226]
 r259: [221..222]
 r260: [219..220]
 r261: [213..214]
 r262: [211..212]
 r263: [207..208]
 r264: [205..206]
 r265: [199..200]
 r266: [197..198]
 r267: [187..196]
 r268: [193..194]
 r269: [191..192]
 r270: [189..190]
 r271: [187..188]
 r272: [1517..1518]
 r273: [1515..1516]
 r274: [1513..1514]
 r275: [1511..1512]
 r276: [1509..1510]
 r277: [183..184]
 r278: [181..182]
 r279: [175..176]
 r280: [173..174]
 r281: [1505..1506]
 r282: [1503..1504]
 r283: [1501..1502]
 r284: [1499..1500]
 r285: [1497..1498]
 r286: [169..170]
 r287: [167..168]
 r288: [161..162]
 r289: [159..160]
 r290: [1493..1494]
 r291: [1491..1492]
 r292: [1489..1490]
 r293: [1487..1488]
 r294: [1485..1486]
 r295: [155..156]
 r296: [153..154]
 r297: [147..148]
 r298: [145..146]
 r299: [135..144]
 r300: [141..142]
 r301: [139..140]
 r302: [137..138]
 r303: [135..136]
 r304: [1481..1482]
 r305: [1479..1480]
 r306: [1477..1478]
 r307: [1475..1476]
 r308: [1473..1474]
 r309: [131..132]
 r310: [129..130]
 r311: [123..124]
 r312: [121..122]
 r313: [1469..1470]
 r314: [1467..1468]
 r315: [1465..1466]
 r316: [1463..1464]
 r317: [1461..1462]
 r318: [117..118]
 r319: [115..116]
 r320: [109..110]
 r321: [107..108]
 r322: [1457..1458]
 r323: [1455..1456]
 r324: [1453..1454]
 r325: [1451..1452]
 r326: [1449..1450]
 r327: [103..104]
 r328: [101..102]
 r329: [95..96]
 r330: [93..94]
 r331: [1445..1446]
 r332: [1443..1444]
 r333: [1441..1442]
 r334: [1439..1440]
 r335: [1437..1438]
 r336: [89..90]
 r337: [87..88]
 r338: [81..82]
 r339: [79..80]
 r340: [1433..1434]
 r341: [1431..1432]
 r342: [1429..1430]
 r343: [1427..1428]
 r344: [1425..1426]
 r345: [67..76]
 r346: [73..74]
 r347: [71..72]
 r348: [69..70]
 r349: [67..68]
 r350: [63..64]
 r351: [53..62]
 r352: [59..60]
 r353: [57..58]
 r354: [55..56]
 r355: [53..54]
 r356: [49..50]
 r357: [47..48]
 r358: [37..44]
 r359: [41..42]
 r360: [39..40]
 r361: [37..38]
 r362: [1421..1422]
 r363: [1419..1420]
 r364: [1417..1418]
 r365: [1415..1416]
 r366: [1413..1414]
 r367: [1409..1410]
 r368: [1407..1408]
 r369: [1405..1406]
 r370: [1403..1404]
 r371: [1401..1402]
 r372: [33..34]
 r373: [31..32]
 r374: [29..30]
 r375: [27..28]
 r376: [25..26]
 r377: [21..22]
 r378: [19..20]
 r379: [17..18]
 r380: [13..16]
 r381: [13..14]
 r382: [891..892]
 r383: [889..890]
 r384: [887..888]
 r385: [885..886]
 r386: [883..884]
 r387: [879..880]
 r388: [877..878]
 r389: [871..872]
 r390: [869..870]
 r391: [865..866]
 r392: [863..864]
 r393: [857..858]
 r394: [855..856]
 r395: [849..850]
 r396: [847..848]
 r397: [841..842]
 r398: [839..840]
 r399: [835..836]
 r400: [833..834]
 r401: [827..828]
 r402: [825..826]
 r403: [821..822]
 r404: [819..820]
 r405: [817..818]
 r406: [813..816]
 r407: [813..814]
 r408: [809..810]
 r409: [793..806]
 r410: [793..794]
 r411: [791..792]
 r412: [787..788]
 r413: [785..786]
 r414: [783..784]
 r415: [781..782]
 r416: [779..780]
 r417: [775..776]
 r418: [773..774]
 r419: [767..768]
 r420: [765..766]
 r421: [761..762]
 r422: [759..760]
 r423: [753..754]
 r424: [737..752]
 r425: [749..750]
 r426: [747..748]
 r427: [745..746]
 r428: [743..744]
 r429: [741..742]
 r430: [737..738]
 r431: [733..734]
 r432: [731..732]
 r433: [725..726]
 r434: [721..724]
 r435: [721..722]
 r436: [715..716]
 r437: [713..714]
 r438: [707..708]
 r439: [691..706]
 r440: [703..704]
 r441: [701..702]
 r442: [699..700]
 r443: [697..698]
 r444: [695..696]
 r445: [691..692]
 r446: [687..688]
 r447: [685..686]
 r448: [679..680]
 r449: [677..678]
 r450: [673..674]
 r451: [671..672]
 r452: [665..666]
 r453: [663..664]
 r454: [659..660]
 r455: [657..658]
 r456: [655..656]
 r457: [651..654]
 r458: [651..652]
 r459: [647..648]
 r460: [631..644]
 r461: [631..632]
 r462: [629..630]
 r463: [625..626]
 r464: [623..624]
 r465: [621..622]
 r466: [619..620]
 r467: [617..618]
 r468: [613..614]
 r469: [611..612]
 r470: [605..606]
 r471: [603..604]
 r472: [599..600]
 r473: [597..598]
 r474: [591..592]
 r475: [579..590]
 r476: [587..588]
 r477: [585..586]
 r478: [583..584]
 r479: [581..582]
 r480: [579..580]
 r481: [575..576]
 r482: [573..574]
 r483: [567..568]
 r484: [551..566]
 r485: [563..564]
 r486: [561..562]
 r487: [559..560]
 r488: [557..558]
 r489: [555..556]
 r490: [551..552]
 r491: [547..548]
 r492: [545..546]
 r493: [539..540]
 r494: [535..538]
 r495: [535..536]
 r496: [529..530]
 r497: [527..528]
 r498: [521..522]
 r499: [519..520]
 r500: [515..516]
 r501: [513..514]
 r502: [507..508]
 r503: [503..506]
 r504: [503..504]
 r505: [499..500]
 r506: [497..498]
 r507: [491..492]
 r508: [475..490]
 r509: [487..488]
 r510: [485..486]
 r511: [483..484]
 r512: [481..482]
 r513: [479..480]
 r514: [475..476]
 r515: [471..472]
 r516: [469..470]
 r517: [463..464]
 r518: [461..462]
 r519: [457..458]
 r520: [455..456]
 r521: [453..454]
 r522: [449..452]
 r523: [449..450]
 r524: [445..446]
 r525: [429..442]
 r526: [429..430]
 r527: [427..428]
 r528: [423..424]
 r529: [421..422]
 r530: [415..416]
 r531: [411..412]
 r532: [409..410]
 r533: [407..408]
 r534: [403..406]
 r535: [403..404]
 r536: [387..400]
 r537: [387..388]
 r538: [385..386]
 r539: [381..382]
 r540: [379..380]
 r541: [373..374]
 r542: [371..372]
 r543: [369..370]
 r544: [363..368]
 r545: [365..366]
 r546: [363..364]
 r547: [359..360]
 r548: [355..358]
 r549: [355..356]
 r550: [349..350]
 r551: [343..344]
 r552: [337..338]
 r553: [331..332]
 r554: [325..326]
 r555: [319..320]
 r556: [313..314]
 r557: [307..308]
 r558: [287..300]
 r559: [287..288]
 r560: [285..286]
 r561: [7..8]
 r562: [5..6]
 r563: [1293..1294]
 r564: [1291..1292] [1287..1288]
 r565: [1289..1290]
 r566: [1285..1286]
 r567: [1281..1282]
 r568: [1279..1280] [1275..1276]
 r569: [1277..1278]
 r570: [1273..1274]
 r571: [1269..1270]
 r572: [1267..1268] [1263..1264]
 r573: [1265..1266]
 r574: [1261..1262]
 r575: [1259..1260]
 r576: [1257..1258]
 r577: [1255..1256] [1251..1252]
 r578: [1253..1254]
 r579: [1249..1250]
 r580: [1245..1246]
 r581: [1243..1244] [1239..1240]
 r582: [1241..1242]
 r583: [1237..1238]
 r584: [1233..1234]
 r585: [1231..1232] [1227..1228]
 r586: [1229..1230]
 r587: [1225..1226]
 r588: [1221..1222]
 r589: [1219..1220] [1215..1216]
 r590: [1217..1218]
 r591: [1213..1214]
 r592: [1209..1210]
 r593: [1207..1208] [1203..1204]
 r594: [1205..1206]
 r595: [1201..1202]
 r596: [1199..1200]
 r597: [1197..1198]
 r598: [1195..1196] [1191..1192]
 r599: [1193..1194]
 r600: [1189..1190]
 r601: [1185..1186]
 r602: [1183..1184] [1179..1180]
 r603: [1181..1182]
 r604: [1177..1178]
 r605: [1173..1174]
 r606: [1171..1172] [1167..1168]
 r607: [1169..1170]
 r608: [1165..1166]
 r609: [1161..1162]
 r610: [1159..1160] [1155..1156]
 r611: [1157..1158]
 r612: [1153..1154]
 r613: [1149..1150]
 r614: [1147..1148] [1143..1144]
 r615: [1145..1146]
 r616: [1141..1142]
 r617: [1139..1140]
 r618: [1137..1138]
 r619: [1135..1136] [1131..1132]
 r620: [1133..1134]
 r621: [1129..1130]
 r622: [1125..1126]
 r623: [1123..1124] [1119..1120]
 r624: [1121..1122]
 r625: [1117..1118]
 r626: [1113..1114]
 r627: [1111..1112] [1107..1108]
 r628: [1109..1110]
 r629: [1105..1106]
 r630: [1101..1102]
 r631: [1099..1100] [1095..1096]
 r632: [1097..1098]
 r633: [1093..1094]
 r634: [1089..1090]
 r635: [1087..1088] [1083..1084]
 r636: [1085..1086]
 r637: [1081..1082]
 r638: [1075..1076]
 r639: [1067..1068]
 r640: [1065..1066]
 r641: [1057..1058]
 r642: [1055..1056]
 r643: [1047..1048]
 r644: [1045..1046] [1041..1042]
 r645: [1043..1044]
 r646: [1039..1040]
 r647: [1035..1036]
 r648: [1029..1030]
 r649: [1025..1026]
 r650: [1021..1022]
 r651: [1019..1020]
 r652: [1015..1016]
 r653: [1007..1008]
 r654: [1005..1006]
 r655: [1011..1014]
 r656: [1013..1016]
 r657: [1009..1014]
 r658: [995..996]
 r659: [993..994]
 r660: [989..990]
 r661: [981..982]
 r662: [979..980]
 r663: [985..988]
 r664: [987..990]
 r665: [983..988]
 r666: [969..970]
 r667: [967..968]
 r668: [963..964]
 r669: [1399..1400]
 r670: [1395..1396]
 r671: [1387..1388]
 r672: [1383..1384]
 r673: [1375..1376]
 r674: [1371..1372]
 r675: [1363..1364]
 r676: [1361..1362]
 r677: [1357..1358]
 r678: [1355..1356]
 r679: [1351..1352]
 r680: [1349..1350]
 r681: [1345..1346]
 r682: [1343..1344]
 r683: [1339..1340]
 r684: [1337..1338]
 r685: [1333..1334]
 r686: [1331..1332]
 r687: [1327..1328]
 r688: [1325..1326]
 r689: [1321..1322]
 r690: [1319..1320]
 r691: [1315..1316]
 r692: [1311..1312]
 r693: [1309..1310]
 r694: [1301..1302]
 r695: [1299..1300]
 r696: [1305..1308]
 r697: [1307..1310]
 r698: [1303..1308]
 r699: [1313..1314]
 r700: [959..960]
 r701: [957..958]
 r702: [949..950]
 r703: [945..946]
 r704: [939..940]
 r705: [2..3]
 r706: [937..938]
 r707: [933..934]
 r708: [929..930]
 r709: [925..926]
 r710: [923..924]
 r711: [915..916]
 r712: [913..914]
 r713: [919..922]
 r714: [921..924]
 r715: [917..922]
 r716: [907..908]
 r717: [901..902]
 r718: [897..898]
 r719: [895..896]
 r720: [1579..1580]
 r721: [1575..1576]
 r722: [1567..1568]
 r723: [1563..1564]
 r724: [1555..1556]
 r725: [1551..1552]
 r726: [893..894]
 r727: [889..890]
 r728: [881..882]
 r729: [877..878] [873..874]
 r730: [875..876]
 r731: [871..872]
 r732: [867..868]
 r733: [863..864] [859..860]
 r734: [861..862]
 r735: [857..858]
 r736: [855..856]
 r737: [853..854]
 r738: [851..852]
 r739: [847..848] [843..844]
 r740: [845..846]
 r741: [841..842]
 r742: [839..840]
 r743: [837..838]
 r744: [833..834] [829..830]
 r745: [831..832]
 r746: [827..828]
 r747: [823..824]
 r748: [819..820]
 r749: [815..816]
 r750: [811..812]
 r751: [807..808]
 r752: [805..806]
 r753: [797..798]
 r754: [795..796]
 r755: [801..804]
 r756: [803..806]
 r757: [799..804]
 r758: [789..790]
 r759: [785..786]
 r760: [777..778]
 r761: [773..774] [769..770]
 r762: [771..772]
 r763: [767..768]
 r764: [763..764]
 r765: [759..760] [755..756]
 r766: [757..758]
 r767: [753..754]
 r768: [751..752]
 r769: [747..748]
 r770: [735..736]
 r771: [731..732] [727..728]
 r772: [729..730]
 r773: [725..726]
 r774: [723..724]
 r775: [719..720]
 r776: [717..718]
 r777: [713..714] [709..710]
 r778: [711..712]
 r779: [707..708]
 r780: [705..706]
 r781: [701..702]
 r782: [689..690]
 r783: [685..686] [681..682]
 r784: [683..684]
 r785: [679..680]
 r786: [677..678]
 r787: [675..676]
 r788: [671..672] [667..668]
 r789: [669..670]
 r790: [665..666]
 r791: [661..662]
 r792: [657..658]
 r793: [653..654]
 r794: [649..650]
 r795: [645..646]
 r796: [643..644]
 r797: [635..636]
 r798: [633..634]
 r799: [639..642]
 r800: [641..644]
 r801: [637..642]
 r802: [627..628]
 r803: [623..624]
 r804: [615..616]
 r805: [611..612] [607..608]
 r806: [609..610]
 r807: [605..606]
 r808: [601..602]
 r809: [597..598] [593..594]
 r810: [595..596]
 r811: [591..592]
 r812: [589..590]
 r813: [585..586]
 r814: [577..578]
 r815: [573..574] [569..570]
 r816: [571..572]
 r817: [567..568]
 r818: [565..566]
 r819: [561..562]
 r820: [549..550]
 r821: [545..546] [541..542]
 r822: [543..544]
 r823: [539..540]
 r824: [537..538]
 r825: [533..534]
 r826: [531..532]
 r827: [527..528] [523..524]
 r828: [525..526]
 r829: [521..522]
 r830: [517..518]
 r831: [513..514] [509..510]
 r832: [511..512]
 r833: [507..508]
 r834: [505..506]
 r835: [501..502]
 r836: [497..498] [493..494]
 r837: [495..496]
 r838: [491..492]
 r839: [489..490]
 r840: [485..486]
 r841: [473..474]
 r842: [469..470] [465..466]
 r843: [467..468]
 r844: [463..464]
 r845: [461..462]
 r846: [459..460]
 r847: [455..456]
 r848: [451..452]
 r849: [447..448]
 r850: [443..444]
 r851: [441..442]
 r852: [433..434]
 r853: [431..432]
 r854: [437..440]
 r855: [439..442]
 r856: [435..440]
 r857: [425..426]
 r858: [419..420]
 r859: [417..418]
 r860: [413..414]
 r861: [409..410]
 r862: [405..406]
 r863: [401..402]
 r864: [399..400]
 r865: [391..392]
 r866: [389..390]
 r867: [395..398]
 r868: [397..400]
 r869: [393..398]
 r870: [383..384]
 r871: [377..378]
 r872: [375..376]
 r873: [371..372]
 r874: [367..368]
 r875: [361..362]
 r876: [357..358]
 r877: [353..354]
 r878: [351..352]
 r879: [347..348]
 r880: [345..346]
 r881: [341..342]
 r882: [339..340]
 r883: [335..336]
 r884: [333..334]
 r885: [329..330]
 r886: [327..328]
 r887: [323..324]
 r888: [321..322]
 r889: [317..318]
 r890: [315..316]
 r891: [311..312]
 r892: [309..310]
 r893: [305..306]
 r894: [301..302]
 r895: [299..300]
 r896: [291..292]
 r897: [289..290]
 r898: [295..298]
 r899: [297..300]
 r900: [293..298]
 r901: [303..304]
 r902: [1543..1544]
 r903: [1539..1540]
 r904: [283..284]
 r905: [279..280] [275..276]
 r906: [277..278]
 r907: [273..274]
 r908: [267..268]
 r909: [263..264] [259..260]
 r910: [261..262]
 r911: [257..258]
 r912: [253..254]
 r913: [249..250] [245..246]
 r914: [247..248]
 r915: [243..244]
 r916: [241..242]
 r917: [1531..1532]
 r918: [1527..1528]
 r919: [239..240]
 r920: [235..236] [231..232]
 r921: [233..234]
 r922: [229..230]
 r923: [223..224]
 r924: [219..220] [215..216]
 r925: [217..218]
 r926: [213..214]
 r927: [209..210]
 r928: [205..206] [201..202]
 r929: [203..204]
 r930: [199..200]
 r931: [195..196]
 r932: [191..192]
 r933: [1519..1520]
 r934: [1515..1516]
 r935: [185..186]
 r936: [181..182] [177..178]
 r937: [179..180]
 r938: [175..176]
 r939: [1507..1508]
 r940: [1503..1504]
 r941: [171..172]
 r942: [167..168] [163..164]
 r943: [165..166]
 r944: [161..162]
 r945: [1495..1496]
 r946: [1491..1492]
 r947: [157..158]
 r948: [153..154] [149..150]
 r949: [151..152]
 r950: [147..148]
 r951: [143..144]
 r952: [139..140]
 r953: [1483..1484]
 r954: [1479..1480]
 r955: [133..134]
 r956: [129..130] [125..126]
 r957: [127..128]
 r958: [123..124]
 r959: [1471..1472]
 r960: [1467..1468]
 r961: [119..120]
 r962: [115..116] [111..112]
 r963: [113..114]
 r964: [109..110]
 r965: [1459..1460]
 r966: [1455..1456]
 r967: [105..106]
 r968: [101..102] [97..98]
 r969: [99..100]
 r970: [95..96]
 r971: [1447..1448]
 r972: [1443..1444]
 r973: [91..92]
 r974: [87..88] [83..84]
 r975: [85..86]
 r976: [81..82]
 r977: [1435..1436]
 r978: [1431..1432]
 r979: [77..78]
 r980: [75..76]
 r981: [71..72]
 r982: [65..66]
 r983: [61..62]
 r984: [57..58]
 r985: [51..52]
 r986: [47..48]
 r987: [45..46]
 r988: [43..44]
 r989: [1423..1424]
 r990: [1419..1420]
 r991: [1411..1412]
 r992: [1407..1408]
 r993: [35..36]
 r994: [31..32]
 r995: [23..24]
 r996: [19..20]
 r997: [15..16]
 r998: [11..12]
 r1000: [1077..1078]
 r1001: [4..4]
 r1002: [1009..1012]
 r1003: [1009..1010]
 r1004: [983..986]
 r1005: [983..984]
 r1006: [975..976]
 r1007: [1303..1306]
 r1008: [1303..1304]
 r1009: [917..920]
 r1010: [917..918]
 r1011: [909..910]
 r1012: [799..802]
 r1013: [799..800]
 r1014: [739..740]
 r1015: [693..694]
 r1016: [637..640]
 r1017: [637..638]
 r1018: [553..554]
 r1019: [477..478]
 r1020: [435..438]
 r1021: [435..436]
 r1022: [427..428]
 r1023: [393..396]
 r1024: [393..394]
 r1025: [385..386]
 r1026: [293..296]
 r1027: [293..294]
 r1028: [285..286]
 r1029: [303..304]

********** Assignment #1: **********

	 Assigning to 1002 (cl=CREG, orig=653, freq=3, tfirst=1002, tfreq=3)...
	   Assign 2 to reload r1002 (freq=3)
	 Assigning to 1004 (cl=CREG, orig=661, freq=3, tfirst=1004, tfreq=3)...
	   Assign 2 to reload r1004 (freq=3)
	 Assigning to 1007 (cl=CREG, orig=694, freq=3, tfirst=1007, tfreq=3)...
	   Assign 2 to reload r1007 (freq=3)
	 Assigning to 1009 (cl=CREG, orig=711, freq=3, tfirst=1009, tfreq=3)...
	   Assign 2 to reload r1009 (freq=3)
	 Assigning to 1012 (cl=CREG, orig=753, freq=3, tfirst=1012, tfreq=3)...
	   Assign 2 to reload r1012 (freq=3)
	 Assigning to 1016 (cl=CREG, orig=797, freq=3, tfirst=1016, tfreq=3)...
	   Assign 2 to reload r1016 (freq=3)
	 Assigning to 1020 (cl=CREG, orig=852, freq=3, tfirst=1020, tfreq=3)...
	   Assign 2 to reload r1020 (freq=3)
	 Assigning to 1023 (cl=CREG, orig=865, freq=3, tfirst=1023, tfreq=3)...
	   Assign 2 to reload r1023 (freq=3)
	 Assigning to 1026 (cl=CREG, orig=896, freq=3, tfirst=1026, tfreq=3)...
	   Assign 2 to reload r1026 (freq=3)
	 Assigning to 1003 (cl=DIREG, orig=655, freq=2, tfirst=1003, tfreq=2)...
	   Assign 5 to reload r1003 (freq=2)
	 Assigning to 1005 (cl=DIREG, orig=663, freq=2, tfirst=1005, tfreq=2)...
	   Assign 5 to reload r1005 (freq=2)
	 Assigning to 1008 (cl=DIREG, orig=696, freq=2, tfirst=1008, tfreq=2)...
	   Assign 5 to reload r1008 (freq=2)
	 Assigning to 1010 (cl=DIREG, orig=713, freq=2, tfirst=1010, tfreq=2)...
	   Assign 5 to reload r1010 (freq=2)
	 Assigning to 1013 (cl=DIREG, orig=755, freq=2, tfirst=1013, tfreq=2)...
	   Assign 5 to reload r1013 (freq=2)
	 Assigning to 1017 (cl=DIREG, orig=799, freq=2, tfirst=1017, tfreq=2)...
	   Assign 5 to reload r1017 (freq=2)
	 Assigning to 1021 (cl=DIREG, orig=854, freq=2, tfirst=1021, tfreq=2)...
	   Assign 5 to reload r1021 (freq=2)
	 Assigning to 1024 (cl=DIREG, orig=867, freq=2, tfirst=1024, tfreq=2)...
	   Assign 5 to reload r1024 (freq=2)
	 Assigning to 1027 (cl=DIREG, orig=898, freq=2, tfirst=1027, tfreq=2)...
	   Assign 5 to reload r1027 (freq=2)
	 Assigning to 1006 (cl=GENERAL_REGS, orig=1006, freq=2, tfirst=1006, tfreq=2)...
	   Assign 3 to reload r1006 (freq=2)
	 Assigning to 1011 (cl=GENERAL_REGS, orig=1011, freq=2, tfirst=1011, tfreq=2)...
	   Assign 3 to reload r1011 (freq=2)
	 Assigning to 1022 (cl=GENERAL_REGS, orig=1022, freq=2, tfirst=1022, tfreq=2)...
	   Assign 3 to reload r1022 (freq=2)
	 Assigning to 1025 (cl=GENERAL_REGS, orig=1025, freq=2, tfirst=1025, tfreq=2)...
	   Assign 3 to reload r1025 (freq=2)
	 Assigning to 1028 (cl=GENERAL_REGS, orig=1028, freq=2, tfirst=1028, tfreq=2)...
	   Assign 3 to reload r1028 (freq=2)
	 Assigning to 1029 (cl=GENERAL_REGS, orig=1029, freq=2, tfirst=1029, tfreq=2)...
	   Assign 3 to reload r1029 (freq=2)
	 Assigning to 1000 (cl=INDEX_REGS, orig=1000, freq=1, tfirst=1000, tfreq=1)...
	   Assign 0 to reload r1000 (freq=1)
	 Assigning to 1001 (cl=INDEX_REGS, orig=1001, freq=1, tfirst=1001, tfreq=1)...
	   Assign 3 to reload r1001 (freq=1)
	 Assigning to 1014 (cl=SSE_REGS, orig=430, freq=2, tfirst=1014, tfreq=2)...
	   Assign 22 to reload r1014 (freq=2)
	 Assigning to 1015 (cl=SSE_REGS, orig=445, freq=2, tfirst=1015, tfreq=2)...
	   Assign 23 to reload r1015 (freq=2)
	 Assigning to 1018 (cl=SSE_REGS, orig=490, freq=2, tfirst=1018, tfreq=2)...
	   Assign 24 to reload r1018 (freq=2)
	 Assigning to 1019 (cl=SSE_REGS, orig=514, freq=2, tfirst=1019, tfreq=2)...
	   Assign 25 to reload r1019 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=5120, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=5088, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 18
changing reg in insn 21
changing reg in insn 19
changing reg in insn 21
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 32
changing reg in insn 30
changing reg in insn 32
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 43
changing reg in insn 41
changing reg in insn 43
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 52
changing reg in insn 55
changing reg in insn 53
changing reg in insn 55
changing reg in insn 58
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 66
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 77
changing reg in insn 75
changing reg in insn 77
changing reg in insn 80
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 88
changing reg in insn 86
changing reg in insn 88
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 96
changing reg in insn 99
changing reg in insn 97
changing reg in insn 99
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 104
changing reg in insn 106
changing reg in insn 108
changing reg in insn 111
changing reg in insn 109
changing reg in insn 111
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 119
changing reg in insn 122
changing reg in insn 120
changing reg in insn 122
changing reg in insn 125
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 133
changing reg in insn 131
changing reg in insn 133
changing reg in insn 136
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 141
changing reg in insn 144
changing reg in insn 142
changing reg in insn 144
changing reg in insn 147
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 155
changing reg in insn 153
changing reg in insn 155
changing reg in insn 158
changing reg in insn 160
changing reg in insn 160
changing reg in insn 160
changing reg in insn 162
changing reg in insn 164
changing reg in insn 167
changing reg in insn 165
changing reg in insn 167
changing reg in insn 170
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 178
changing reg in insn 176
changing reg in insn 178
changing reg in insn 181
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 189
changing reg in insn 187
changing reg in insn 189
changing reg in insn 192
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 197
changing reg in insn 200
changing reg in insn 198
changing reg in insn 200
changing reg in insn 203
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 208
changing reg in insn 211
changing reg in insn 209
changing reg in insn 211
changing reg in insn 214
changing reg in insn 216
changing reg in insn 216
changing reg in insn 217
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 243
changing reg in insn 245
changing reg in insn 246
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 264
changing reg in insn 267
changing reg in insn 265
changing reg in insn 267
changing reg in insn 270
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 280
changing reg in insn 279
changing reg in insn 281
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 288
changing reg in insn 287
changing reg in insn 289
changing reg in insn 291
changing reg in insn 293
changing reg in insn 297
changing reg in insn 298
changing reg in insn 301
changing reg in insn 308
changing reg in insn 307
changing reg in insn 309
changing reg in insn 311
changing reg in insn 310
changing reg in insn 314
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 323
changing reg in insn 326
changing reg in insn 329
changing reg in insn 330
changing reg in insn 333
changing reg in insn 340
changing reg in insn 339
changing reg in insn 341
changing reg in insn 343
changing reg in insn 342
changing reg in insn 346
changing reg in insn 348
changing reg in insn 350
changing reg in insn 351
changing reg in insn 366
changing reg in insn 367
changing reg in insn 367
changing reg in insn 370
changing reg in insn 369
changing reg in insn 371
changing reg in insn 378
changing reg in insn 379
changing reg in insn 379
changing reg in insn 381
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 384
changing reg in insn 386
changing reg in insn 387
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 394
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 397
changing reg in insn 399
changing reg in insn 400
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 407
changing reg in insn 407
changing reg in insn 408
changing reg in insn 408
changing reg in insn 410
changing reg in insn 412
changing reg in insn 413
changing reg in insn 425
changing reg in insn 427
changing reg in insn 439
changing reg in insn 441
changing reg in insn 453
changing reg in insn 455
changing reg in insn 467
changing reg in insn 469
changing reg in insn 481
changing reg in insn 483
changing reg in insn 495
changing reg in insn 497
changing reg in insn 509
changing reg in insn 511
changing reg in insn 523
changing reg in insn 525
changing reg in insn 538
changing reg in insn 545
changing reg in insn 544
changing reg in insn 546
changing reg in insn 549
changing reg in insn 548
changing reg in insn 547
changing reg in insn 569
changing reg in insn 571
changing reg in insn 573
changing reg in insn 574
changing reg in insn 576
changing reg in insn 577
changing reg in insn 584
changing reg in insn 585
changing reg in insn 602
changing reg in insn 603
changing reg in insn 606
changing reg in insn 607
changing reg in insn 624
changing reg in insn 625
changing reg in insn 637
changing reg in insn 638
changing reg in insn 642
changing reg in insn 643
changing reg in insn 643
changing reg in insn 646
changing reg in insn 645
changing reg in insn 647
changing reg in insn 650
changing reg in insn 657
changing reg in insn 656
changing reg in insn 658
changing reg in insn 661
changing reg in insn 660
changing reg in insn 659
changing reg in insn 663
changing reg in insn 665
changing reg in insn 667
changing reg in insn 668
changing reg in insn 670
changing reg in insn 671
changing reg in insn 1877
changing reg in insn 1879
changing reg in insn 698
changing reg in insn 699
changing reg in insn 699
changing reg in insn 701
changing reg in insn 701
changing reg in insn 702
changing reg in insn 702
changing reg in insn 704
changing reg in insn 706
changing reg in insn 707
changing reg in insn 711
changing reg in insn 712
changing reg in insn 712
changing reg in insn 714
changing reg in insn 714
changing reg in insn 715
changing reg in insn 715
changing reg in insn 717
changing reg in insn 719
changing reg in insn 720
changing reg in insn 724
changing reg in insn 725
changing reg in insn 725
changing reg in insn 727
changing reg in insn 727
changing reg in insn 728
changing reg in insn 728
changing reg in insn 730
changing reg in insn 732
changing reg in insn 733
changing reg in insn 1390
changing reg in insn 1391
changing reg in insn 1391
changing reg in insn 1393
changing reg in insn 1393
changing reg in insn 1394
changing reg in insn 1394
changing reg in insn 1396
changing reg in insn 1398
changing reg in insn 1399
changing reg in insn 1403
changing reg in insn 1404
changing reg in insn 1404
changing reg in insn 1407
changing reg in insn 1405
changing reg in insn 1407
changing reg in insn 1410
changing reg in insn 1412
changing reg in insn 1412
changing reg in insn 1413
changing reg in insn 1413
changing reg in insn 1414
changing reg in insn 1418
changing reg in insn 1419
changing reg in insn 1419
changing reg in insn 1422
changing reg in insn 1420
changing reg in insn 1422
changing reg in insn 1425
changing reg in insn 1427
changing reg in insn 1427
changing reg in insn 1428
changing reg in insn 1430
changing reg in insn 1431
changing reg in insn 1431
changing reg in insn 1434
changing reg in insn 1432
changing reg in insn 1434
changing reg in insn 1437
changing reg in insn 1439
changing reg in insn 1439
changing reg in insn 1439
changing reg in insn 1441
changing reg in insn 1454
changing reg in insn 1455
changing reg in insn 1455
changing reg in insn 1457
changing reg in insn 1457
changing reg in insn 1458
changing reg in insn 1458
changing reg in insn 1460
changing reg in insn 1462
changing reg in insn 1463
changing reg in insn 1467
changing reg in insn 1468
changing reg in insn 1468
changing reg in insn 1471
changing reg in insn 1469
changing reg in insn 1471
changing reg in insn 1474
changing reg in insn 1476
changing reg in insn 1476
changing reg in insn 1477
changing reg in insn 1477
changing reg in insn 1478
changing reg in insn 1482
changing reg in insn 1483
changing reg in insn 1483
changing reg in insn 1486
changing reg in insn 1484
changing reg in insn 1486
changing reg in insn 1489
changing reg in insn 1491
changing reg in insn 1491
changing reg in insn 1492
changing reg in insn 1495
changing reg in insn 1496
changing reg in insn 1496
changing reg in insn 1499
changing reg in insn 1497
changing reg in insn 1499
changing reg in insn 1502
changing reg in insn 1504
changing reg in insn 1504
changing reg in insn 1505
changing reg in insn 1505
changing reg in insn 1512
changing reg in insn 1507
changing reg in insn 1508
changing reg in insn 1508
changing reg in insn 1510
changing reg in insn 1510
changing reg in insn 1511
changing reg in insn 1511
changing reg in insn 1514
changing reg in insn 1529
changing reg in insn 1530
changing reg in insn 1530
changing reg in insn 1532
changing reg in insn 1532
changing reg in insn 1533
changing reg in insn 1533
changing reg in insn 1535
changing reg in insn 1537
changing reg in insn 1538
changing reg in insn 1542
changing reg in insn 1543
changing reg in insn 1543
changing reg in insn 1546
changing reg in insn 1544
changing reg in insn 1546
changing reg in insn 1549
changing reg in insn 1551
changing reg in insn 1551
changing reg in insn 1552
changing reg in insn 1558
changing reg in insn 1559
changing reg in insn 1559
changing reg in insn 1561
changing reg in insn 1561
changing reg in insn 1562
changing reg in insn 1562
changing reg in insn 1564
changing reg in insn 1566
changing reg in insn 1567
changing reg in insn 1571
changing reg in insn 1572
changing reg in insn 1572
changing reg in insn 1575
changing reg in insn 1573
changing reg in insn 1575
changing reg in insn 1578
changing reg in insn 1580
changing reg in insn 1580
changing reg in insn 1581
changing reg in insn 1587
changing reg in insn 1588
changing reg in insn 1588
changing reg in insn 1590
changing reg in insn 1590
changing reg in insn 1591
changing reg in insn 1591
changing reg in insn 1593
changing reg in insn 1595
changing reg in insn 1596
changing reg in insn 1601
changing reg in insn 1602
changing reg in insn 1602
changing reg in insn 1605
changing reg in insn 1603
changing reg in insn 1605
changing reg in insn 1608
changing reg in insn 1610
changing reg in insn 1610
changing reg in insn 1611
changing reg in insn 1611
changing reg in insn 1618
changing reg in insn 1613
changing reg in insn 1614
changing reg in insn 1614
changing reg in insn 1616
changing reg in insn 1616
changing reg in insn 1617
changing reg in insn 1617
changing reg in insn 1620
changing reg in insn 1628
changing reg in insn 1629
changing reg in insn 1629
changing reg in insn 1631
changing reg in insn 1631
changing reg in insn 1632
changing reg in insn 1632
changing reg in insn 1634
changing reg in insn 1636
changing reg in insn 1637
changing reg in insn 1641
changing reg in insn 1642
changing reg in insn 1642
changing reg in insn 1645
changing reg in insn 1643
changing reg in insn 1645
changing reg in insn 1648
changing reg in insn 1650
changing reg in insn 1650
changing reg in insn 1651
changing reg in insn 1657
changing reg in insn 1658
changing reg in insn 1658
changing reg in insn 1660
changing reg in insn 1660
changing reg in insn 1661
changing reg in insn 1661
changing reg in insn 1663
changing reg in insn 1665
changing reg in insn 1666
changing reg in insn 1670
changing reg in insn 1671
changing reg in insn 1671
changing reg in insn 1674
changing reg in insn 1672
changing reg in insn 1674
changing reg in insn 1677
changing reg in insn 1679
changing reg in insn 1679
changing reg in insn 1680
changing reg in insn 1686
changing reg in insn 1687
changing reg in insn 1687
changing reg in insn 1689
changing reg in insn 1689
changing reg in insn 1690
changing reg in insn 1690
changing reg in insn 1692
changing reg in insn 1694
changing reg in insn 1695
changing reg in insn 1699
changing reg in insn 1700
changing reg in insn 1700
changing reg in insn 1703
changing reg in insn 1701
changing reg in insn 1703
changing reg in insn 1706
changing reg in insn 1708
changing reg in insn 1708
changing reg in insn 1709
changing reg in insn 1715
changing reg in insn 1716
changing reg in insn 1716
changing reg in insn 1718
changing reg in insn 1718
changing reg in insn 1719
changing reg in insn 1719
changing reg in insn 1721
changing reg in insn 1723
changing reg in insn 1724
changing reg in insn 1728
changing reg in insn 1729
changing reg in insn 1729
changing reg in insn 1732
changing reg in insn 1730
changing reg in insn 1732
changing reg in insn 1735
changing reg in insn 1737
changing reg in insn 1737
changing reg in insn 1738
changing reg in insn 1744
changing reg in insn 1745
changing reg in insn 1745
changing reg in insn 1747
changing reg in insn 1747
changing reg in insn 1748
changing reg in insn 1748
changing reg in insn 1750
changing reg in insn 1752
changing reg in insn 1753
changing reg in insn 1758
changing reg in insn 1765
changing reg in insn 1760
changing reg in insn 1761
changing reg in insn 1761
changing reg in insn 1763
changing reg in insn 1763
changing reg in insn 1764
changing reg in insn 1764
changing reg in insn 1767
changing reg in insn 1771
changing reg in insn 1772
changing reg in insn 1772
changing reg in insn 1779
changing reg in insn 1774
changing reg in insn 1775
changing reg in insn 1775
changing reg in insn 1777
changing reg in insn 1777
changing reg in insn 1778
changing reg in insn 1778
changing reg in insn 1781
changing reg in insn 1785
changing reg in insn 1786
changing reg in insn 1786
changing reg in insn 1788
changing reg in insn 1790
changing reg in insn 1795
changing reg in insn 1792
changing reg in insn 1793
changing reg in insn 1793
changing reg in insn 1794
changing reg in insn 1794
changing reg in insn 1795
changing reg in insn 1801
changing reg in insn 1802
changing reg in insn 1802
changing reg in insn 1804
changing reg in insn 1804
changing reg in insn 1805
changing reg in insn 1805
changing reg in insn 1807
changing reg in insn 1809
changing reg in insn 1810
changing reg in insn 1820
changing reg in insn 1821
changing reg in insn 1821
changing reg in insn 1823
changing reg in insn 1823
changing reg in insn 1824
changing reg in insn 1824
changing reg in insn 1826
changing reg in insn 1828
changing reg in insn 1829
changing reg in insn 1839
changing reg in insn 1840
changing reg in insn 1840
changing reg in insn 1842
changing reg in insn 1842
changing reg in insn 1843
changing reg in insn 1843
changing reg in insn 1845
changing reg in insn 1847
changing reg in insn 1848
changing reg in insn 1855
changing reg in insn 1856
changing reg in insn 1856
changing reg in insn 1858
changing reg in insn 1858
changing reg in insn 1859
changing reg in insn 1859
changing reg in insn 1862
changing reg in insn 1861
changing reg in insn 1863
changing reg in insn 738
changing reg in insn 739
changing reg in insn 739
changing reg in insn 741
changing reg in insn 741
changing reg in insn 742
changing reg in insn 742
changing reg in insn 744
changing reg in insn 746
changing reg in insn 747
changing reg in insn 751
changing reg in insn 752
changing reg in insn 752
changing reg in insn 755
changing reg in insn 753
changing reg in insn 755
changing reg in insn 758
changing reg in insn 760
changing reg in insn 760
changing reg in insn 761
changing reg in insn 764
changing reg in insn 765
changing reg in insn 765
changing reg in insn 768
changing reg in insn 766
changing reg in insn 768
changing reg in insn 771
changing reg in insn 773
changing reg in insn 773
changing reg in insn 773
changing reg in insn 775
changing reg in insn 779
changing reg in insn 780
changing reg in insn 780
changing reg in insn 783
changing reg in insn 781
changing reg in insn 783
changing reg in insn 786
changing reg in insn 788
changing reg in insn 788
changing reg in insn 788
changing reg in insn 790
changing reg in insn 792
changing reg in insn 793
changing reg in insn 793
changing reg in insn 796
changing reg in insn 794
changing reg in insn 796
changing reg in insn 799
changing reg in insn 801
changing reg in insn 801
changing reg in insn 802
changing reg in insn 804
changing reg in insn 805
changing reg in insn 805
changing reg in insn 807
changing reg in insn 807
changing reg in insn 808
changing reg in insn 808
changing reg in insn 811
changing reg in insn 810
changing reg in insn 812
changing reg in insn 815
changing reg in insn 816
changing reg in insn 820
changing reg in insn 827
changing reg in insn 826
changing reg in insn 828
changing reg in insn 830
changing reg in insn 829
changing reg in insn 834
changing reg in insn 835
changing reg in insn 835
changing reg in insn 837
changing reg in insn 837
changing reg in insn 838
changing reg in insn 838
changing reg in insn 840
changing reg in insn 842
changing reg in insn 843
changing reg in insn 847
changing reg in insn 848
changing reg in insn 848
changing reg in insn 851
changing reg in insn 849
changing reg in insn 851
changing reg in insn 854
changing reg in insn 856
changing reg in insn 856
changing reg in insn 857
changing reg in insn 860
changing reg in insn 861
changing reg in insn 861
changing reg in insn 864
changing reg in insn 862
changing reg in insn 864
changing reg in insn 867
changing reg in insn 869
changing reg in insn 869
changing reg in insn 869
changing reg in insn 880
changing reg in insn 871
changing reg in insn 872
changing reg in insn 872
changing reg in insn 874
changing reg in insn 874
changing reg in insn 875
changing reg in insn 875
changing reg in insn 876
changing reg in insn 878
changing reg in insn 879
changing reg in insn 880
changing reg in insn 882
changing reg in insn 883
changing reg in insn 883
changing reg in insn 886
changing reg in insn 884
changing reg in insn 886
changing reg in insn 889
changing reg in insn 891
changing reg in insn 891
changing reg in insn 894
changing reg in insn 893
changing reg in insn 894
changing reg in insn 898
changing reg in insn 899
changing reg in insn 899
changing reg in insn 902
changing reg in insn 900
changing reg in insn 902
changing reg in insn 905
changing reg in insn 907
changing reg in insn 907
changing reg in insn 907
changing reg in insn 918
changing reg in insn 909
changing reg in insn 910
changing reg in insn 910
changing reg in insn 912
changing reg in insn 912
changing reg in insn 913
changing reg in insn 913
changing reg in insn 914
changing reg in insn 916
changing reg in insn 917
changing reg in insn 918
changing reg in insn 921
changing reg in insn 922
changing reg in insn 922
changing reg in insn 925
changing reg in insn 923
changing reg in insn 925
changing reg in insn 928
changing reg in insn 930
changing reg in insn 930
changing reg in insn 930
changing reg in insn 932
changing reg in insn 934
changing reg in insn 935
changing reg in insn 935
changing reg in insn 938
changing reg in insn 936
changing reg in insn 938
changing reg in insn 941
changing reg in insn 943
changing reg in insn 943
changing reg in insn 944
changing reg in insn 946
changing reg in insn 947
changing reg in insn 947
changing reg in insn 949
changing reg in insn 949
changing reg in insn 950
changing reg in insn 950
changing reg in insn 953
changing reg in insn 952
changing reg in insn 954
changing reg in insn 957
changing reg in insn 958
changing reg in insn 962
changing reg in insn 969
changing reg in insn 968
changing reg in insn 970
changing reg in insn 972
changing reg in insn 971
changing reg in insn 976
changing reg in insn 977
changing reg in insn 977
changing reg in insn 979
changing reg in insn 979
changing reg in insn 980
changing reg in insn 980
changing reg in insn 982
changing reg in insn 984
changing reg in insn 985
changing reg in insn 989
changing reg in insn 990
changing reg in insn 990
changing reg in insn 993
changing reg in insn 991
changing reg in insn 993
changing reg in insn 996
changing reg in insn 998
changing reg in insn 998
changing reg in insn 999
changing reg in insn 1002
changing reg in insn 1003
changing reg in insn 1003
changing reg in insn 1006
changing reg in insn 1004
changing reg in insn 1006
changing reg in insn 1009
changing reg in insn 1011
changing reg in insn 1011
changing reg in insn 1011
changing reg in insn 1021
changing reg in insn 1013
changing reg in insn 1014
changing reg in insn 1014
changing reg in insn 1016
changing reg in insn 1016
changing reg in insn 1017
changing reg in insn 1017
changing reg in insn 1018
changing reg in insn 1020
changing reg in insn 1021
changing reg in insn 1024
changing reg in insn 1025
changing reg in insn 1025
changing reg in insn 1028
changing reg in insn 1026
changing reg in insn 1028
changing reg in insn 1031
changing reg in insn 1033
changing reg in insn 1033
changing reg in insn 1033
changing reg in insn 1044
changing reg in insn 1035
changing reg in insn 1036
changing reg in insn 1036
changing reg in insn 1038
changing reg in insn 1038
changing reg in insn 1039
changing reg in insn 1039
changing reg in insn 1040
changing reg in insn 1042
changing reg in insn 1043
changing reg in insn 1044
changing reg in insn 1046
changing reg in insn 1047
changing reg in insn 1047
changing reg in insn 1050
changing reg in insn 1048
changing reg in insn 1050
changing reg in insn 1053
changing reg in insn 1055
changing reg in insn 1055
changing reg in insn 1058
changing reg in insn 1057
changing reg in insn 1058
changing reg in insn 1062
changing reg in insn 1063
changing reg in insn 1063
changing reg in insn 1066
changing reg in insn 1064
changing reg in insn 1066
changing reg in insn 1069
changing reg in insn 1071
changing reg in insn 1071
changing reg in insn 1072
changing reg in insn 1074
changing reg in insn 1075
changing reg in insn 1075
changing reg in insn 1078
changing reg in insn 1076
changing reg in insn 1078
changing reg in insn 1081
changing reg in insn 1083
changing reg in insn 1083
changing reg in insn 1083
changing reg in insn 1086
changing reg in insn 1085
changing reg in insn 1086
changing reg in insn 1088
changing reg in insn 1089
changing reg in insn 1089
changing reg in insn 1092
changing reg in insn 1090
changing reg in insn 1092
changing reg in insn 1095
changing reg in insn 1097
changing reg in insn 1097
changing reg in insn 1097
changing reg in insn 1108
changing reg in insn 1099
changing reg in insn 1100
changing reg in insn 1100
changing reg in insn 1102
changing reg in insn 1102
changing reg in insn 1103
changing reg in insn 1103
changing reg in insn 1104
changing reg in insn 1106
changing reg in insn 1107
changing reg in insn 1108
changing reg in insn 1111
changing reg in insn 1112
changing reg in insn 1112
changing reg in insn 1115
changing reg in insn 1113
changing reg in insn 1115
changing reg in insn 1118
changing reg in insn 1120
changing reg in insn 1120
changing reg in insn 1120
changing reg in insn 1122
changing reg in insn 1124
changing reg in insn 1125
changing reg in insn 1125
changing reg in insn 1127
changing reg in insn 1127
changing reg in insn 1128
changing reg in insn 1128
changing reg in insn 1131
changing reg in insn 1130
changing reg in insn 1132
changing reg in insn 1135
changing reg in insn 1136
changing reg in insn 1140
changing reg in insn 1147
changing reg in insn 1146
changing reg in insn 1148
changing reg in insn 1150
changing reg in insn 1149
changing reg in insn 1154
changing reg in insn 1156
changing reg in insn 1158
changing reg in insn 1159
changing reg in insn 1174
changing reg in insn 1175
changing reg in insn 1179
changing reg in insn 1180
changing reg in insn 1180
changing reg in insn 1182
changing reg in insn 1182
changing reg in insn 1183
changing reg in insn 1183
changing reg in insn 1186
changing reg in insn 1185
changing reg in insn 1187
changing reg in insn 1190
changing reg in insn 1197
changing reg in insn 1196
changing reg in insn 1198
changing reg in insn 1200
changing reg in insn 1199
changing reg in insn 1202
changing reg in insn 1204
changing reg in insn 1206
changing reg in insn 1207
changing reg in insn 1222
changing reg in insn 1223
changing reg in insn 1223
changing reg in insn 1225
changing reg in insn 1225
changing reg in insn 1226
changing reg in insn 1226
changing reg in insn 1230
changing reg in insn 1228
changing reg in insn 1229
changing reg in insn 1229
changing reg in insn 1231
changing reg in insn 1236
changing reg in insn 1237
changing reg in insn 1237
changing reg in insn 1240
changing reg in insn 1239
changing reg in insn 1241
changing reg in insn 1252
changing reg in insn 1254
changing reg in insn 1266
changing reg in insn 1268
changing reg in insn 1280
changing reg in insn 1282
changing reg in insn 1294
changing reg in insn 1296
changing reg in insn 1308
changing reg in insn 1310
changing reg in insn 1322
changing reg in insn 1324
changing reg in insn 1336
changing reg in insn 1338
changing reg in insn 1350
changing reg in insn 1352
changing reg in insn 1365
changing reg in insn 1372
changing reg in insn 1371
changing reg in insn 1373
changing reg in insn 1375
changing reg in insn 1374
changing reg in insn 1882
changing reg in insn 1885
changing reg in insn 1885
changing reg in insn 1889
changing reg in insn 17
changing reg in insn 18
changing reg in insn 23
changing reg in insn 21
changing reg in insn 20
changing reg in insn 19
changing reg in insn 24
changing reg in insn 22
changing reg in insn 21
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 34
changing reg in insn 32
changing reg in insn 31
changing reg in insn 30
changing reg in insn 35
changing reg in insn 33
changing reg in insn 32
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 45
changing reg in insn 43
changing reg in insn 42
changing reg in insn 41
changing reg in insn 46
changing reg in insn 44
changing reg in insn 43
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 57
changing reg in insn 55
changing reg in insn 54
changing reg in insn 53
changing reg in insn 58
changing reg in insn 56
changing reg in insn 55
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 66
changing reg in insn 65
changing reg in insn 64
changing reg in insn 69
changing reg in insn 67
changing reg in insn 66
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 79
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 80
changing reg in insn 78
changing reg in insn 77
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 88
changing reg in insn 87
changing reg in insn 86
changing reg in insn 91
changing reg in insn 89
changing reg in insn 88
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 99
changing reg in insn 98
changing reg in insn 97
changing reg in insn 102
changing reg in insn 100
changing reg in insn 99
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 113
changing reg in insn 111
changing reg in insn 110
changing reg in insn 109
changing reg in insn 114
changing reg in insn 112
changing reg in insn 111
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
changing reg in insn 115
changing reg in insn 118
changing reg in insn 119
changing reg in insn 124
changing reg in insn 122
changing reg in insn 121
changing reg in insn 120
changing reg in insn 125
changing reg in insn 123
changing reg in insn 122
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 129
changing reg in insn 130
changing reg in insn 135
changing reg in insn 133
changing reg in insn 132
changing reg in insn 131
changing reg in insn 136
changing reg in insn 134
changing reg in insn 133
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 140
changing reg in insn 141
changing reg in insn 146
changing reg in insn 144
changing reg in insn 143
changing reg in insn 142
changing reg in insn 147
changing reg in insn 145
changing reg in insn 144
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 151
changing reg in insn 152
changing reg in insn 157
changing reg in insn 155
changing reg in insn 154
changing reg in insn 153
changing reg in insn 158
changing reg in insn 156
changing reg in insn 155
changing reg in insn 154
changing reg in insn 156
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 169
changing reg in insn 167
changing reg in insn 166
changing reg in insn 165
changing reg in insn 170
changing reg in insn 168
changing reg in insn 167
changing reg in insn 166
changing reg in insn 168
changing reg in insn 169
changing reg in insn 171
changing reg in insn 174
changing reg in insn 175
changing reg in insn 180
changing reg in insn 178
changing reg in insn 177
changing reg in insn 176
changing reg in insn 181
changing reg in insn 179
changing reg in insn 178
changing reg in insn 177
changing reg in insn 179
changing reg in insn 180
changing reg in insn 182
changing reg in insn 185
changing reg in insn 186
changing reg in insn 191
changing reg in insn 189
changing reg in insn 188
changing reg in insn 187
changing reg in insn 192
changing reg in insn 190
changing reg in insn 189
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 196
changing reg in insn 197
changing reg in insn 202
changing reg in insn 200
changing reg in insn 199
changing reg in insn 198
changing reg in insn 203
changing reg in insn 201
changing reg in insn 200
changing reg in insn 199
changing reg in insn 201
changing reg in insn 202
changing reg in insn 204
changing reg in insn 207
changing reg in insn 208
changing reg in insn 213
changing reg in insn 211
changing reg in insn 210
changing reg in insn 209
changing reg in insn 214
changing reg in insn 212
changing reg in insn 211
changing reg in insn 210
changing reg in insn 212
changing reg in insn 213
changing reg in insn 215
changing reg in insn 225
changing reg in insn 226
changing reg in insn 235
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 249
changing reg in insn 250
changing reg in insn 253
changing reg in insn 254
changing reg in insn 263
changing reg in insn 264
changing reg in insn 269
changing reg in insn 267
changing reg in insn 266
changing reg in insn 265
changing reg in insn 270
changing reg in insn 268
changing reg in insn 267
changing reg in insn 266
changing reg in insn 268
changing reg in insn 269
changing reg in insn 271
changing reg in insn 276
changing reg in insn 277
changing reg in insn 283
changing reg in insn 284
changing reg in insn 286
changing reg in insn 287
changing reg in insn 292
changing reg in insn 294
changing reg in insn 296
changing reg in insn 297
changing reg in insn 308
changing reg in insn 303
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 303
changing reg in insn 302
changing reg in insn 304
changing reg in insn 305
changing reg in insn 324
changing reg in insn 325
changing reg in insn 328
changing reg in insn 329
changing reg in insn 340
changing reg in insn 335
changing reg in insn 338
changing reg in insn 338
changing reg in insn 339
changing reg in insn 335
changing reg in insn 334
changing reg in insn 336
changing reg in insn 337
changing reg in insn 362
changing reg in insn 363
changing reg in insn 365
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 377
changing reg in insn 378
changing reg in insn 380
changing reg in insn 390
changing reg in insn 391
changing reg in insn 393
changing reg in insn 403
changing reg in insn 404
changing reg in insn 406
changing reg in insn 417
changing reg in insn 418
changing reg in insn 424
changing reg in insn 425
changing reg in insn 429
changing reg in insn 430
changing reg in insn 438
changing reg in insn 439
changing reg in insn 443
changing reg in insn 444
changing reg in insn 452
changing reg in insn 453
changing reg in insn 457
changing reg in insn 458
changing reg in insn 466
changing reg in insn 467
changing reg in insn 471
changing reg in insn 472
changing reg in insn 480
changing reg in insn 481
changing reg in insn 485
changing reg in insn 486
changing reg in insn 494
changing reg in insn 495
changing reg in insn 499
changing reg in insn 500
changing reg in insn 508
changing reg in insn 509
changing reg in insn 513
changing reg in insn 514
changing reg in insn 522
changing reg in insn 523
changing reg in insn 527
changing reg in insn 528
changing reg in insn 537
changing reg in insn 538
changing reg in insn 545
changing reg in insn 540
changing reg in insn 543
changing reg in insn 543
changing reg in insn 544
changing reg in insn 540
changing reg in insn 539
changing reg in insn 541
changing reg in insn 542
changing reg in insn 554
changing reg in insn 557
changing reg in insn 556
changing reg in insn 555
changing reg in insn 564
changing reg in insn 565
changing reg in insn 568
changing reg in insn 569
changing reg in insn 583
changing reg in insn 584
changing reg in insn 595
changing reg in insn 596
changing reg in insn 613
changing reg in insn 614
changing reg in insn 623
changing reg in insn 624
changing reg in insn 636
changing reg in insn 637
changing reg in insn 641
changing reg in insn 642
changing reg in insn 644
changing reg in insn 645
changing reg in insn 649
changing reg in insn 650
changing reg in insn 657
changing reg in insn 652
changing reg in insn 655
changing reg in insn 655
changing reg in insn 656
changing reg in insn 652
changing reg in insn 651
changing reg in insn 653
changing reg in insn 654
changing reg in insn 662
changing reg in insn 663
changing reg in insn 669
changing reg in insn 670
changing reg in insn 685
changing reg in insn 686
changing reg in insn 691
changing reg in insn 692
changing reg in insn 697
changing reg in insn 698
changing reg in insn 700
changing reg in insn 710
changing reg in insn 711
changing reg in insn 713
changing reg in insn 723
changing reg in insn 724
changing reg in insn 726
changing reg in insn 737
changing reg in insn 738
changing reg in insn 740
changing reg in insn 750
changing reg in insn 751
changing reg in insn 757
changing reg in insn 755
changing reg in insn 754
changing reg in insn 753
changing reg in insn 758
changing reg in insn 756
changing reg in insn 755
changing reg in insn 754
changing reg in insn 756
changing reg in insn 757
changing reg in insn 759
changing reg in insn 763
changing reg in insn 764
changing reg in insn 770
changing reg in insn 768
changing reg in insn 767
changing reg in insn 766
changing reg in insn 771
changing reg in insn 769
changing reg in insn 768
changing reg in insn 767
changing reg in insn 769
changing reg in insn 770
changing reg in insn 772
changing reg in insn 773
changing reg in insn 774
changing reg in insn 775
changing reg in insn 776
changing reg in insn 777
changing reg in insn 778
changing reg in insn 779
changing reg in insn 785
changing reg in insn 783
changing reg in insn 782
changing reg in insn 781
changing reg in insn 786
changing reg in insn 784
changing reg in insn 783
changing reg in insn 782
changing reg in insn 784
changing reg in insn 785
changing reg in insn 787
changing reg in insn 788
changing reg in insn 789
changing reg in insn 790
changing reg in insn 791
changing reg in insn 792
changing reg in insn 798
changing reg in insn 796
changing reg in insn 795
changing reg in insn 794
changing reg in insn 799
changing reg in insn 797
changing reg in insn 796
changing reg in insn 795
changing reg in insn 797
changing reg in insn 798
changing reg in insn 800
changing reg in insn 803
changing reg in insn 804
changing reg in insn 806
changing reg in insn 809
changing reg in insn 810
changing reg in insn 814
changing reg in insn 815
changing reg in insn 819
changing reg in insn 820
changing reg in insn 827
changing reg in insn 822
changing reg in insn 825
changing reg in insn 825
changing reg in insn 826
changing reg in insn 822
changing reg in insn 821
changing reg in insn 823
changing reg in insn 824
changing reg in insn 833
changing reg in insn 834
changing reg in insn 836
changing reg in insn 846
changing reg in insn 847
changing reg in insn 853
changing reg in insn 851
changing reg in insn 850
changing reg in insn 849
changing reg in insn 854
changing reg in insn 852
changing reg in insn 851
changing reg in insn 850
changing reg in insn 852
changing reg in insn 853
changing reg in insn 855
changing reg in insn 859
changing reg in insn 860
changing reg in insn 866
changing reg in insn 864
changing reg in insn 863
changing reg in insn 862
changing reg in insn 867
changing reg in insn 865
changing reg in insn 864
changing reg in insn 863
changing reg in insn 865
changing reg in insn 866
changing reg in insn 868
changing reg in insn 869
changing reg in insn 870
changing reg in insn 871
changing reg in insn 873
changing reg in insn 881
changing reg in insn 882
changing reg in insn 888
changing reg in insn 886
changing reg in insn 885
changing reg in insn 884
changing reg in insn 889
changing reg in insn 887
changing reg in insn 886
changing reg in insn 885
changing reg in insn 887
changing reg in insn 888
changing reg in insn 890
changing reg in insn 892
changing reg in insn 893
changing reg in insn 895
changing reg in insn 896
changing reg in insn 897
changing reg in insn 898
changing reg in insn 904
changing reg in insn 902
changing reg in insn 901
changing reg in insn 900
changing reg in insn 905
changing reg in insn 903
changing reg in insn 902
changing reg in insn 901
changing reg in insn 903
changing reg in insn 904
changing reg in insn 906
changing reg in insn 907
changing reg in insn 908
changing reg in insn 909
changing reg in insn 911
changing reg in insn 920
changing reg in insn 921
changing reg in insn 927
changing reg in insn 925
changing reg in insn 924
changing reg in insn 923
changing reg in insn 928
changing reg in insn 926
changing reg in insn 925
changing reg in insn 924
changing reg in insn 926
changing reg in insn 927
changing reg in insn 929
changing reg in insn 930
changing reg in insn 931
changing reg in insn 932
changing reg in insn 933
changing reg in insn 934
changing reg in insn 940
changing reg in insn 938
changing reg in insn 937
changing reg in insn 936
changing reg in insn 941
changing reg in insn 939
changing reg in insn 938
changing reg in insn 937
changing reg in insn 939
changing reg in insn 940
changing reg in insn 942
changing reg in insn 945
changing reg in insn 946
changing reg in insn 948
changing reg in insn 951
changing reg in insn 952
changing reg in insn 956
changing reg in insn 957
changing reg in insn 961
changing reg in insn 962
changing reg in insn 969
changing reg in insn 964
changing reg in insn 967
changing reg in insn 967
changing reg in insn 968
changing reg in insn 964
changing reg in insn 963
changing reg in insn 965
changing reg in insn 966
changing reg in insn 975
changing reg in insn 976
changing reg in insn 978
changing reg in insn 988
changing reg in insn 989
changing reg in insn 995
changing reg in insn 993
changing reg in insn 992
changing reg in insn 991
changing reg in insn 996
changing reg in insn 994
changing reg in insn 993
changing reg in insn 992
changing reg in insn 994
changing reg in insn 995
changing reg in insn 997
changing reg in insn 1001
changing reg in insn 1002
changing reg in insn 1008
changing reg in insn 1006
changing reg in insn 1005
changing reg in insn 1004
changing reg in insn 1009
changing reg in insn 1007
changing reg in insn 1006
changing reg in insn 1005
changing reg in insn 1007
changing reg in insn 1008
changing reg in insn 1010
changing reg in insn 1011
changing reg in insn 1012
changing reg in insn 1013
changing reg in insn 1015
changing reg in insn 1023
changing reg in insn 1024
changing reg in insn 1030
changing reg in insn 1028
changing reg in insn 1027
changing reg in insn 1026
changing reg in insn 1031
changing reg in insn 1029
changing reg in insn 1028
changing reg in insn 1027
changing reg in insn 1029
changing reg in insn 1030
changing reg in insn 1032
changing reg in insn 1033
changing reg in insn 1034
changing reg in insn 1035
changing reg in insn 1037
changing reg in insn 1045
changing reg in insn 1046
changing reg in insn 1052
changing reg in insn 1050
changing reg in insn 1049
changing reg in insn 1048
changing reg in insn 1053
changing reg in insn 1051
changing reg in insn 1050
changing reg in insn 1049
changing reg in insn 1051
changing reg in insn 1052
changing reg in insn 1054
changing reg in insn 1056
changing reg in insn 1057
changing reg in insn 1059
changing reg in insn 1060
changing reg in insn 1061
changing reg in insn 1062
changing reg in insn 1068
changing reg in insn 1066
changing reg in insn 1065
changing reg in insn 1064
changing reg in insn 1069
changing reg in insn 1067
changing reg in insn 1066
changing reg in insn 1065
changing reg in insn 1067
changing reg in insn 1068
changing reg in insn 1070
changing reg in insn 1073
changing reg in insn 1074
changing reg in insn 1080
changing reg in insn 1078
changing reg in insn 1077
changing reg in insn 1076
changing reg in insn 1081
changing reg in insn 1079
changing reg in insn 1078
changing reg in insn 1077
changing reg in insn 1079
changing reg in insn 1080
changing reg in insn 1082
changing reg in insn 1083
changing reg in insn 1084
changing reg in insn 1085
changing reg in insn 1087
changing reg in insn 1088
changing reg in insn 1094
changing reg in insn 1092
changing reg in insn 1091
changing reg in insn 1090
changing reg in insn 1095
changing reg in insn 1093
changing reg in insn 1092
changing reg in insn 1091
changing reg in insn 1093
changing reg in insn 1094
changing reg in insn 1096
changing reg in insn 1097
changing reg in insn 1098
changing reg in insn 1099
changing reg in insn 1101
changing reg in insn 1110
changing reg in insn 1111
changing reg in insn 1117
changing reg in insn 1115
changing reg in insn 1114
changing reg in insn 1113
changing reg in insn 1118
changing reg in insn 1116
changing reg in insn 1115
changing reg in insn 1114
changing reg in insn 1116
changing reg in insn 1117
changing reg in insn 1119
changing reg in insn 1120
changing reg in insn 1121
changing reg in insn 1122
changing reg in insn 1123
changing reg in insn 1124
changing reg in insn 1126
changing reg in insn 1129
changing reg in insn 1130
changing reg in insn 1134
changing reg in insn 1135
changing reg in insn 1139
changing reg in insn 1140
changing reg in insn 1147
changing reg in insn 1142
changing reg in insn 1145
changing reg in insn 1145
changing reg in insn 1146
changing reg in insn 1142
changing reg in insn 1141
changing reg in insn 1143
changing reg in insn 1144
changing reg in insn 1153
changing reg in insn 1154
changing reg in insn 1170
changing reg in insn 1171
changing reg in insn 1173
changing reg in insn 1174
changing reg in insn 1178
changing reg in insn 1179
changing reg in insn 1181
changing reg in insn 1184
changing reg in insn 1185
changing reg in insn 1189
changing reg in insn 1190
changing reg in insn 1197
changing reg in insn 1192
changing reg in insn 1195
changing reg in insn 1195
changing reg in insn 1196
changing reg in insn 1192
changing reg in insn 1191
changing reg in insn 1193
changing reg in insn 1194
changing reg in insn 1201
changing reg in insn 1202
changing reg in insn 1218
changing reg in insn 1219
changing reg in insn 1221
changing reg in insn 1222
changing reg in insn 1224
changing reg in insn 1227
changing reg in insn 1228
changing reg in insn 1235
changing reg in insn 1236
changing reg in insn 1238
changing reg in insn 1239
changing reg in insn 1244
changing reg in insn 1245
changing reg in insn 1251
changing reg in insn 1252
changing reg in insn 1256
changing reg in insn 1257
changing reg in insn 1265
changing reg in insn 1266
changing reg in insn 1270
changing reg in insn 1271
changing reg in insn 1279
changing reg in insn 1280
changing reg in insn 1284
changing reg in insn 1285
changing reg in insn 1293
changing reg in insn 1294
changing reg in insn 1298
changing reg in insn 1299
changing reg in insn 1307
changing reg in insn 1308
changing reg in insn 1312
changing reg in insn 1313
changing reg in insn 1321
changing reg in insn 1322
changing reg in insn 1326
changing reg in insn 1327
changing reg in insn 1335
changing reg in insn 1336
changing reg in insn 1340
changing reg in insn 1341
changing reg in insn 1349
changing reg in insn 1350
changing reg in insn 1354
changing reg in insn 1355
changing reg in insn 1364
changing reg in insn 1365
changing reg in insn 1372
changing reg in insn 1367
changing reg in insn 1370
changing reg in insn 1370
changing reg in insn 1371
changing reg in insn 1367
changing reg in insn 1366
changing reg in insn 1368
changing reg in insn 1369
changing reg in insn 1380
changing reg in insn 1382
changing reg in insn 1381
changing reg in insn 1389
changing reg in insn 1390
changing reg in insn 1392
changing reg in insn 1402
changing reg in insn 1403
changing reg in insn 1409
changing reg in insn 1407
changing reg in insn 1406
changing reg in insn 1405
changing reg in insn 1410
changing reg in insn 1408
changing reg in insn 1407
changing reg in insn 1406
changing reg in insn 1408
changing reg in insn 1409
changing reg in insn 1411
changing reg in insn 1417
changing reg in insn 1418
changing reg in insn 1424
changing reg in insn 1422
changing reg in insn 1421
changing reg in insn 1420
changing reg in insn 1425
changing reg in insn 1423
changing reg in insn 1422
changing reg in insn 1421
changing reg in insn 1423
changing reg in insn 1424
changing reg in insn 1426
changing reg in insn 1429
changing reg in insn 1430
changing reg in insn 1436
changing reg in insn 1434
changing reg in insn 1433
changing reg in insn 1432
changing reg in insn 1437
changing reg in insn 1435
changing reg in insn 1434
changing reg in insn 1433
changing reg in insn 1435
changing reg in insn 1436
changing reg in insn 1438
changing reg in insn 1439
changing reg in insn 1440
changing reg in insn 1441
changing reg in insn 1453
changing reg in insn 1454
changing reg in insn 1456
changing reg in insn 1466
changing reg in insn 1467
changing reg in insn 1473
changing reg in insn 1471
changing reg in insn 1470
changing reg in insn 1469
changing reg in insn 1474
changing reg in insn 1472
changing reg in insn 1471
changing reg in insn 1470
changing reg in insn 1472
changing reg in insn 1473
changing reg in insn 1475
changing reg in insn 1481
changing reg in insn 1482
changing reg in insn 1488
changing reg in insn 1486
changing reg in insn 1485
changing reg in insn 1484
changing reg in insn 1489
changing reg in insn 1487
changing reg in insn 1486
changing reg in insn 1485
changing reg in insn 1487
changing reg in insn 1488
changing reg in insn 1490
changing reg in insn 1494
changing reg in insn 1495
changing reg in insn 1501
changing reg in insn 1499
changing reg in insn 1498
changing reg in insn 1497
changing reg in insn 1502
changing reg in insn 1500
changing reg in insn 1499
changing reg in insn 1498
changing reg in insn 1500
changing reg in insn 1501
changing reg in insn 1503
changing reg in insn 1506
changing reg in insn 1507
changing reg in insn 1509
changing reg in insn 1528
changing reg in insn 1529
changing reg in insn 1531
changing reg in insn 1541
changing reg in insn 1542
changing reg in insn 1548
changing reg in insn 1546
changing reg in insn 1545
changing reg in insn 1544
changing reg in insn 1549
changing reg in insn 1547
changing reg in insn 1546
changing reg in insn 1545
changing reg in insn 1547
changing reg in insn 1548
changing reg in insn 1550
changing reg in insn 1557
changing reg in insn 1558
changing reg in insn 1560
changing reg in insn 1570
changing reg in insn 1571
changing reg in insn 1577
changing reg in insn 1575
changing reg in insn 1574
changing reg in insn 1573
changing reg in insn 1578
changing reg in insn 1576
changing reg in insn 1575
changing reg in insn 1574
changing reg in insn 1576
changing reg in insn 1577
changing reg in insn 1579
changing reg in insn 1586
changing reg in insn 1587
changing reg in insn 1589
changing reg in insn 1600
changing reg in insn 1601
changing reg in insn 1607
changing reg in insn 1605
changing reg in insn 1604
changing reg in insn 1603
changing reg in insn 1608
changing reg in insn 1606
changing reg in insn 1605
changing reg in insn 1604
changing reg in insn 1606
changing reg in insn 1607
changing reg in insn 1609
changing reg in insn 1612
changing reg in insn 1613
changing reg in insn 1615
changing reg in insn 1627
changing reg in insn 1628
changing reg in insn 1630
changing reg in insn 1640
changing reg in insn 1641
changing reg in insn 1647
changing reg in insn 1645
changing reg in insn 1644
changing reg in insn 1643
changing reg in insn 1648
changing reg in insn 1646
changing reg in insn 1645
changing reg in insn 1644
changing reg in insn 1646
changing reg in insn 1647
changing reg in insn 1649
changing reg in insn 1656
changing reg in insn 1657
changing reg in insn 1659
changing reg in insn 1669
changing reg in insn 1670
changing reg in insn 1676
changing reg in insn 1674
changing reg in insn 1673
changing reg in insn 1672
changing reg in insn 1677
changing reg in insn 1675
changing reg in insn 1674
changing reg in insn 1673
changing reg in insn 1675
changing reg in insn 1676
changing reg in insn 1678
changing reg in insn 1685
changing reg in insn 1686
changing reg in insn 1688
changing reg in insn 1698
changing reg in insn 1699
changing reg in insn 1705
changing reg in insn 1703
changing reg in insn 1702
changing reg in insn 1701
changing reg in insn 1706
changing reg in insn 1704
changing reg in insn 1703
changing reg in insn 1702
changing reg in insn 1704
changing reg in insn 1705
changing reg in insn 1707
changing reg in insn 1714
changing reg in insn 1715
changing reg in insn 1717
changing reg in insn 1727
changing reg in insn 1728
changing reg in insn 1734
changing reg in insn 1732
changing reg in insn 1731
changing reg in insn 1730
changing reg in insn 1735
changing reg in insn 1733
changing reg in insn 1732
changing reg in insn 1731
changing reg in insn 1733
changing reg in insn 1734
changing reg in insn 1736
changing reg in insn 1743
changing reg in insn 1744
changing reg in insn 1746
changing reg in insn 1757
changing reg in insn 1758
changing reg in insn 1759
changing reg in insn 1760
changing reg in insn 1762
changing reg in insn 1770
changing reg in insn 1771
changing reg in insn 1773
changing reg in insn 1774
changing reg in insn 1776
changing reg in insn 1784
changing reg in insn 1785
changing reg in insn 1787
changing reg in insn 1788
changing reg in insn 1789
changing reg in insn 1790
changing reg in insn 1791
changing reg in insn 1792
changing reg in insn 1800
changing reg in insn 1801
changing reg in insn 1803
changing reg in insn 1819
changing reg in insn 1820
changing reg in insn 1822
changing reg in insn 1838
changing reg in insn 1839
changing reg in insn 1841
changing reg in insn 1854
changing reg in insn 1855
changing reg in insn 1857
changing reg in insn 1860
changing reg in insn 1861
changing reg in insn 1876
changing reg in insn 1877
changing reg in insn 9
changing reg in insn 1890
deleting insn with uid = 1974.
deleting insn with uid = 1977.
deleting insn with uid = 1981.
deleting insn with uid = 1984.
deleting insn with uid = 1988.
deleting insn with uid = 878.
deleting insn with uid = 916.
deleting insn with uid = 1993.
deleting insn with uid = 1042.
deleting insn with uid = 1106.
deleting insn with uid = 1998.
deleting insn with uid = 2002.
deleting insn with uid = 2006.
deleting insn with uid = 1512.
deleting insn with uid = 1618.
deleting insn with uid = 1765.
deleting insn with uid = 1779.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 230.
verify found no changes in insn with uid = 244.
verify found no changes in insn with uid = 258.
verify found no changes in insn with uid = 282.
verify found no changes in insn with uid = 290.
verify found no changes in insn with uid = 295.
verify found no changes in insn with uid = 317.
verify found no changes in insn with uid = 327.
verify found no changes in insn with uid = 349.
verify found no changes in insn with uid = 356.
verify found no changes in insn with uid = 358.
verify found no changes in insn with uid = 364.
verify found no changes in insn with uid = 372.
verify found no changes in insn with uid = 385.
verify found no changes in insn with uid = 398.
verify found no changes in insn with uid = 411.
verify found no changes in insn with uid = 428.
verify found no changes in insn with uid = 442.
verify found no changes in insn with uid = 456.
verify found no changes in insn with uid = 470.
verify found no changes in insn with uid = 484.
verify found no changes in insn with uid = 498.
verify found no changes in insn with uid = 512.
verify found no changes in insn with uid = 526.
verify found no changes in insn with uid = 572.
verify found no changes in insn with uid = 582.
verify found no changes in insn with uid = 588.
verify found no changes in insn with uid = 591.
verify found no changes in insn with uid = 594.
verify found no changes in insn with uid = 599.
verify found no changes in insn with uid = 601.
verify found no changes in insn with uid = 612.
verify found no changes in insn with uid = 615.
verify found no changes in insn with uid = 622.
verify found no changes in insn with uid = 628.
verify found no changes in insn with uid = 630.
verify found no changes in insn with uid = 632.
verify found no changes in insn with uid = 648.
verify found no changes in insn with uid = 666.
verify found no changes in insn with uid = 674.
verify found no changes in insn with uid = 679.
verify found no changes in insn with uid = 681.
verify found no changes in insn with uid = 687.
verify found no changes in insn with uid = 705.
verify found no changes in insn with uid = 718.
verify found no changes in insn with uid = 731.
verify found no changes in insn with uid = 745.
verify found no changes in insn with uid = 813.
verify found no changes in insn with uid = 841.
verify found no changes in insn with uid = 877.
verify found no changes in insn with uid = 915.
verify found no changes in insn with uid = 955.
verify found no changes in insn with uid = 983.
verify found no changes in insn with uid = 1019.
verify found no changes in insn with uid = 1041.
verify found no changes in insn with uid = 1105.
verify found no changes in insn with uid = 1133.
verify found no changes in insn with uid = 1157.
verify found no changes in insn with uid = 1164.
verify found no changes in insn with uid = 1166.
verify found no changes in insn with uid = 1172.
verify found no changes in insn with uid = 1188.
verify found no changes in insn with uid = 1205.
verify found no changes in insn with uid = 1212.
verify found no changes in insn with uid = 1214.
verify found no changes in insn with uid = 1220.
verify found no changes in insn with uid = 1232.
verify found no changes in insn with uid = 1242.
verify found no changes in insn with uid = 1255.
verify found no changes in insn with uid = 1269.
verify found no changes in insn with uid = 1283.
verify found no changes in insn with uid = 1297.
verify found no changes in insn with uid = 1311.
verify found no changes in insn with uid = 1325.
verify found no changes in insn with uid = 1339.
verify found no changes in insn with uid = 1353.
verify found no changes in insn with uid = 1397.
verify found no changes in insn with uid = 1447.
verify found no changes in insn with uid = 1449.
verify found no changes in insn with uid = 1461.
verify found no changes in insn with uid = 1516.
verify found no changes in insn with uid = 1522.
verify found no changes in insn with uid = 1524.
verify found no changes in insn with uid = 1536.
verify found no changes in insn with uid = 1565.
verify found no changes in insn with uid = 1594.
verify found no changes in insn with uid = 1622.
verify found no changes in insn with uid = 1635.
verify found no changes in insn with uid = 1664.
verify found no changes in insn with uid = 1693.
verify found no changes in insn with uid = 1722.
verify found no changes in insn with uid = 1751.
verify found no changes in insn with uid = 1769.
verify found no changes in insn with uid = 1783.
verify found no changes in insn with uid = 1808.
verify found no changes in insn with uid = 1814.
verify found no changes in insn with uid = 1827.
verify found no changes in insn with uid = 1833.
verify found no changes in insn with uid = 1846.
verify found no changes in insn with uid = 1852.
verify found no changes in insn with uid = 1864.
verify found no changes in insn with uid = 1870.
verify found no changes in insn with uid = 1872.
verify found no changes in insn with uid = 1892.


int command_line(Preprocess*, IOFiles*, Procpar_info*, int, char**, int*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 37[r8] 38[r9]
;;  ref usage 	r0={966d,923u} r1={293d,248u,133e} r2={127d,23u,4e} r3={12d,11u} r4={182d,78u} r5={226d,113u} r6={1d,488u} r7={1d,233u} r8={104d} r9={104d} r10={104d} r11={104d} r12={104d} r13={104d} r14={104d} r15={104d} r17={550d,67u} r18={104d} r19={104d} r20={1d,1u,142e} r21={105d,4u} r22={106d,1u} r23={106d,1u} r24={106d,1u} r25={106d,1u} r26={105d} r27={105d} r28={105d} r29={104d} r30={104d} r31={104d} r32={104d} r33={104d} r34={104d} r35={104d} r36={104d} r37={105d,1u} r38={105d,1u} r39={104d} r40={104d} r45={104d} r46={104d} r47={104d} r48={104d} r49={104d} r50={104d} r51={104d} r52={104d} r53={104d} r54={104d} r55={104d} r56={104d} r57={104d} r58={104d} r59={104d} r60={104d} r61={104d} r62={104d} r63={104d} r64={104d} r65={104d} r66={104d} r67={104d} r68={104d} r69={104d} r70={104d} r71={104d} r72={104d} r73={104d} r74={104d} r75={104d} r76={104d} 
;;    total ref usage 11295{8821d,2195u,279e} in 1674{1570 regular + 104 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags]
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])
        (reg:DI 5 di [ preprocess ])) com_line.cpp:23 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])
        (reg:DI 4 si [ file ])) com_line.cpp:23 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5080 [0xffffffffffffec28])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) com_line.cpp:23 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5084 [0xffffffffffffec24])) [0 argc+0 S4 A32])
        (reg:SI 2 cx [ argc ])) com_line.cpp:23 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])
        (reg:DI 37 r8 [ argv ])) com_line.cpp:23 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])
        (reg:DI 38 r9 [ fid ])) com_line.cpp:23 89 {*movdi_internal}
     (nil))
(note 8 7 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 8 12 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.6076+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [1000])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:23 964 {stack_tls_protect_set_di}
     (nil))
(insn 12 9 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5044 [0xffffffffffffec4c])) [0 found_extension+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:26 90 {*movsi_internal}
     (nil))
(insn 13 12 1901 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:33 90 {*movsi_internal}
     (nil))
(jump_insn 1901 13 1902 2 (set (pc)
        (label_ref 219)) com_line.cpp:33 636 {jump}
     (nil)
 -> 219)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1902 1901 221)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637
(code_label 221 1902 16 3 3 "" [1 uses])
(note 16 221 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:SI 0 ax [563])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:34 90 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:DI 1 dx [orig:83 D.6062 ] [83])
        (sign_extend:DI (reg:SI 0 ax [563]))) com_line.cpp:34 142 {*extendsidi2_rex64}
     (nil))
(insn 19 18 20 3 (set (reg:DI 0 ax [564])
        (reg:DI 1 dx [orig:83 D.6062 ] [83])) com_line.cpp:34 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (parallel [
            (set (reg:DI 0 ax [564])
                (ashift:DI (reg:DI 0 ax [564])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:34 497 {*ashldi3_1}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 0 ax [564])
                (plus:DI (reg:DI 0 ax [564])
                    (reg:DI 1 dx [orig:83 D.6062 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:34 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:83 D.6062 ] [83])
            (const_int 9 [0x9]))
        (nil)))
(insn 22 21 23 3 (parallel [
            (set (reg:DI 0 ax [565])
                (ashift:DI (reg:DI 0 ax [564])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:34 497 {*ashldi3_1}
     (nil))
(insn 23 22 24 3 (set (reg:DI 0 ax [564])
        (reg:DI 0 ax [565])) com_line.cpp:34 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 1 dx [orig:84 D.6062 ] [84])
        (reg:DI 0 ax [564])) com_line.cpp:34 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg/f:DI 0 ax [566])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:34 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.6063 ] [85])
                (plus:DI (reg/f:DI 0 ax [566])
                    (reg:DI 1 dx [orig:84 D.6062 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:34 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.6062 ] [84]))
        (nil)))
(insn 27 26 28 3 (set (mem/j:SI (reg/f:DI 0 ax [orig:85 D.6063 ] [85]) [0 _17->fid_scale+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:34 90 {*movsi_internal}
     (nil))
(insn 28 27 29 3 (set (reg:SI 0 ax [567])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:35 90 {*movsi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:DI 1 dx [orig:86 D.6062 ] [86])
        (sign_extend:DI (reg:SI 0 ax [567]))) com_line.cpp:35 142 {*extendsidi2_rex64}
     (nil))
(insn 30 29 31 3 (set (reg:DI 0 ax [568])
        (reg:DI 1 dx [orig:86 D.6062 ] [86])) com_line.cpp:35 89 {*movdi_internal}
     (nil))
(insn 31 30 32 3 (parallel [
            (set (reg:DI 0 ax [568])
                (ashift:DI (reg:DI 0 ax [568])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:35 497 {*ashldi3_1}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (reg:DI 0 ax [568])
                (plus:DI (reg:DI 0 ax [568])
                    (reg:DI 1 dx [orig:86 D.6062 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:35 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:86 D.6062 ] [86])
            (const_int 9 [0x9]))
        (nil)))
(insn 33 32 34 3 (parallel [
            (set (reg:DI 0 ax [569])
                (ashift:DI (reg:DI 0 ax [568])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:35 497 {*ashldi3_1}
     (nil))
(insn 34 33 35 3 (set (reg:DI 0 ax [568])
        (reg:DI 0 ax [569])) com_line.cpp:35 89 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (set (reg:DI 1 dx [orig:87 D.6062 ] [87])
        (reg:DI 0 ax [568])) com_line.cpp:35 89 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg/f:DI 0 ax [570])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:35 89 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.6063 ] [88])
                (plus:DI (reg/f:DI 0 ax [570])
                    (reg:DI 1 dx [orig:87 D.6062 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:35 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:87 D.6062 ] [87]))
        (nil)))
(insn 38 37 39 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:88 D.6063 ] [88])
                (const_int 8 [0x8])) [0 _20->scaleby+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:35 90 {*movsi_internal}
     (nil))
(insn 39 38 40 3 (set (reg:SI 0 ax [571])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:36 90 {*movsi_internal}
     (nil))
(insn 40 39 41 3 (set (reg:DI 1 dx [orig:89 D.6062 ] [89])
        (sign_extend:DI (reg:SI 0 ax [571]))) com_line.cpp:36 142 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 3 (set (reg:DI 0 ax [572])
        (reg:DI 1 dx [orig:89 D.6062 ] [89])) com_line.cpp:36 89 {*movdi_internal}
     (nil))
(insn 42 41 43 3 (parallel [
            (set (reg:DI 0 ax [572])
                (ashift:DI (reg:DI 0 ax [572])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:36 497 {*ashldi3_1}
     (nil))
(insn 43 42 44 3 (parallel [
            (set (reg:DI 0 ax [572])
                (plus:DI (reg:DI 0 ax [572])
                    (reg:DI 1 dx [orig:89 D.6062 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:36 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:89 D.6062 ] [89])
            (const_int 9 [0x9]))
        (nil)))
(insn 44 43 45 3 (parallel [
            (set (reg:DI 0 ax [573])
                (ashift:DI (reg:DI 0 ax [572])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:36 497 {*ashldi3_1}
     (nil))
(insn 45 44 46 3 (set (reg:DI 0 ax [572])
        (reg:DI 0 ax [573])) com_line.cpp:36 89 {*movdi_internal}
     (nil))
(insn 46 45 47 3 (set (reg:DI 1 dx [orig:90 D.6062 ] [90])
        (reg:DI 0 ax [572])) com_line.cpp:36 89 {*movdi_internal}
     (nil))
(insn 47 46 48 3 (set (reg/f:DI 0 ax [574])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:36 89 {*movdi_internal}
     (nil))
(insn 48 47 49 3 (parallel [
            (set (reg/f:DI 1 dx [orig:91 D.6063 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 D.6062 ] [90])
                    (reg/f:DI 0 ax [574])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:36 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.6062 ] [90]))
        (nil)))
(insn 49 48 50 3 (set (reg:SF 0 ax [575])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) com_line.cpp:36 129 {*movsf_internal}
     (nil))
(insn 50 49 51 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:91 D.6063 ] [91])
                (const_int 4 [0x4])) [0 _23->scale_factor+0 S4 A32])
        (reg:SF 0 ax [575])) com_line.cpp:36 129 {*movsf_internal}
     (nil))
(insn 51 50 52 3 (set (reg:SI 0 ax [576])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:37 90 {*movsi_internal}
     (nil))
(insn 52 51 53 3 (set (reg:DI 1 dx [orig:92 D.6062 ] [92])
        (sign_extend:DI (reg:SI 0 ax [576]))) com_line.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 53 52 54 3 (set (reg:DI 0 ax [577])
        (reg:DI 1 dx [orig:92 D.6062 ] [92])) com_line.cpp:37 89 {*movdi_internal}
     (nil))
(insn 54 53 55 3 (parallel [
            (set (reg:DI 0 ax [577])
                (ashift:DI (reg:DI 0 ax [577])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:37 497 {*ashldi3_1}
     (nil))
(insn 55 54 56 3 (parallel [
            (set (reg:DI 0 ax [577])
                (plus:DI (reg:DI 0 ax [577])
                    (reg:DI 1 dx [orig:92 D.6062 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:37 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:92 D.6062 ] [92])
            (const_int 9 [0x9]))
        (nil)))
(insn 56 55 57 3 (parallel [
            (set (reg:DI 0 ax [578])
                (ashift:DI (reg:DI 0 ax [577])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:37 497 {*ashldi3_1}
     (nil))
(insn 57 56 58 3 (set (reg:DI 0 ax [577])
        (reg:DI 0 ax [578])) com_line.cpp:37 89 {*movdi_internal}
     (nil))
(insn 58 57 59 3 (set (reg:DI 1 dx [orig:93 D.6062 ] [93])
        (reg:DI 0 ax [577])) com_line.cpp:37 89 {*movdi_internal}
     (nil))
(insn 59 58 60 3 (set (reg/f:DI 0 ax [579])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:37 89 {*movdi_internal}
     (nil))
(insn 60 59 61 3 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.6063 ] [94])
                (plus:DI (reg/f:DI 0 ax [579])
                    (reg:DI 1 dx [orig:93 D.6062 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:37 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.6062 ] [93]))
        (nil)))
(insn 61 60 62 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:94 D.6063 ] [94])
                (const_int 12 [0xc])) [0 _26->pre_ecc+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:37 90 {*movsi_internal}
     (nil))
(insn 62 61 63 3 (set (reg:SI 0 ax [580])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:38 90 {*movsi_internal}
     (nil))
(insn 63 62 64 3 (set (reg:DI 1 dx [orig:95 D.6062 ] [95])
        (sign_extend:DI (reg:SI 0 ax [580]))) com_line.cpp:38 142 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 3 (set (reg:DI 0 ax [581])
        (reg:DI 1 dx [orig:95 D.6062 ] [95])) com_line.cpp:38 89 {*movdi_internal}
     (nil))
(insn 65 64 66 3 (parallel [
            (set (reg:DI 0 ax [581])
                (ashift:DI (reg:DI 0 ax [581])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:38 497 {*ashldi3_1}
     (nil))
(insn 66 65 67 3 (parallel [
            (set (reg:DI 0 ax [581])
                (plus:DI (reg:DI 0 ax [581])
                    (reg:DI 1 dx [orig:95 D.6062 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:38 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:95 D.6062 ] [95])
            (const_int 9 [0x9]))
        (nil)))
(insn 67 66 68 3 (parallel [
            (set (reg:DI 0 ax [582])
                (ashift:DI (reg:DI 0 ax [581])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:38 497 {*ashldi3_1}
     (nil))
(insn 68 67 69 3 (set (reg:DI 0 ax [581])
        (reg:DI 0 ax [582])) com_line.cpp:38 89 {*movdi_internal}
     (nil))
(insn 69 68 70 3 (set (reg:DI 1 dx [orig:96 D.6062 ] [96])
        (reg:DI 0 ax [581])) com_line.cpp:38 89 {*movdi_internal}
     (nil))
(insn 70 69 71 3 (set (reg/f:DI 0 ax [583])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:38 89 {*movdi_internal}
     (nil))
(insn 71 70 72 3 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.6063 ] [97])
                (plus:DI (reg/f:DI 0 ax [583])
                    (reg:DI 1 dx [orig:96 D.6062 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:38 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.6062 ] [96]))
        (nil)))
(insn 72 71 73 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:97 D.6063 ] [97])
                (const_int 16 [0x10])) [0 _29->bc+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:38 90 {*movsi_internal}
     (nil))
(insn 73 72 74 3 (set (reg:SI 0 ax [584])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:39 90 {*movsi_internal}
     (nil))
(insn 74 73 75 3 (set (reg:DI 1 dx [orig:98 D.6062 ] [98])
        (sign_extend:DI (reg:SI 0 ax [584]))) com_line.cpp:39 142 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 3 (set (reg:DI 0 ax [585])
        (reg:DI 1 dx [orig:98 D.6062 ] [98])) com_line.cpp:39 89 {*movdi_internal}
     (nil))
(insn 76 75 77 3 (parallel [
            (set (reg:DI 0 ax [585])
                (ashift:DI (reg:DI 0 ax [585])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:39 497 {*ashldi3_1}
     (nil))
(insn 77 76 78 3 (parallel [
            (set (reg:DI 0 ax [585])
                (plus:DI (reg:DI 0 ax [585])
                    (reg:DI 1 dx [orig:98 D.6062 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:39 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:98 D.6062 ] [98])
            (const_int 9 [0x9]))
        (nil)))
(insn 78 77 79 3 (parallel [
            (set (reg:DI 0 ax [586])
                (ashift:DI (reg:DI 0 ax [585])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:39 497 {*ashldi3_1}
     (nil))
(insn 79 78 80 3 (set (reg:DI 0 ax [585])
        (reg:DI 0 ax [586])) com_line.cpp:39 89 {*movdi_internal}
     (nil))
(insn 80 79 81 3 (set (reg:DI 1 dx [orig:99 D.6062 ] [99])
        (reg:DI 0 ax [585])) com_line.cpp:39 89 {*movdi_internal}
     (nil))
(insn 81 80 82 3 (set (reg/f:DI 0 ax [587])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:39 89 {*movdi_internal}
     (nil))
(insn 82 81 83 3 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.6063 ] [100])
                (plus:DI (reg/f:DI 0 ax [587])
                    (reg:DI 1 dx [orig:99 D.6062 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:39 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.6062 ] [99]))
        (nil)))
(insn 83 82 84 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:100 D.6063 ] [100])
                (const_int 20 [0x14])) [0 _32->file_type+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:39 90 {*movsi_internal}
     (nil))
(insn 84 83 85 3 (set (reg:SI 0 ax [588])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:40 90 {*movsi_internal}
     (nil))
(insn 85 84 86 3 (set (reg:DI 1 dx [orig:101 D.6062 ] [101])
        (sign_extend:DI (reg:SI 0 ax [588]))) com_line.cpp:40 142 {*extendsidi2_rex64}
     (nil))
(insn 86 85 87 3 (set (reg:DI 0 ax [589])
        (reg:DI 1 dx [orig:101 D.6062 ] [101])) com_line.cpp:40 89 {*movdi_internal}
     (nil))
(insn 87 86 88 3 (parallel [
            (set (reg:DI 0 ax [589])
                (ashift:DI (reg:DI 0 ax [589])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:40 497 {*ashldi3_1}
     (nil))
(insn 88 87 89 3 (parallel [
            (set (reg:DI 0 ax [589])
                (plus:DI (reg:DI 0 ax [589])
                    (reg:DI 1 dx [orig:101 D.6062 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:40 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:101 D.6062 ] [101])
            (const_int 9 [0x9]))
        (nil)))
(insn 89 88 90 3 (parallel [
            (set (reg:DI 0 ax [590])
                (ashift:DI (reg:DI 0 ax [589])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:40 497 {*ashldi3_1}
     (nil))
(insn 90 89 91 3 (set (reg:DI 0 ax [589])
        (reg:DI 0 ax [590])) com_line.cpp:40 89 {*movdi_internal}
     (nil))
(insn 91 90 92 3 (set (reg:DI 1 dx [orig:102 D.6062 ] [102])
        (reg:DI 0 ax [589])) com_line.cpp:40 89 {*movdi_internal}
     (nil))
(insn 92 91 93 3 (set (reg/f:DI 0 ax [591])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:40 89 {*movdi_internal}
     (nil))
(insn 93 92 94 3 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.6063 ] [103])
                (plus:DI (reg/f:DI 0 ax [591])
                    (reg:DI 1 dx [orig:102 D.6062 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:40 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.6062 ] [102]))
        (nil)))
(insn 94 93 95 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:103 D.6063 ] [103])
                (const_int 24 [0x18])) [0 _35->data_zero_fill+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:40 90 {*movsi_internal}
     (nil))
(insn 95 94 96 3 (set (reg:SI 0 ax [592])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:41 90 {*movsi_internal}
     (nil))
(insn 96 95 97 3 (set (reg:DI 1 dx [orig:104 D.6062 ] [104])
        (sign_extend:DI (reg:SI 0 ax [592]))) com_line.cpp:41 142 {*extendsidi2_rex64}
     (nil))
(insn 97 96 98 3 (set (reg:DI 0 ax [593])
        (reg:DI 1 dx [orig:104 D.6062 ] [104])) com_line.cpp:41 89 {*movdi_internal}
     (nil))
(insn 98 97 99 3 (parallel [
            (set (reg:DI 0 ax [593])
                (ashift:DI (reg:DI 0 ax [593])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:41 497 {*ashldi3_1}
     (nil))
(insn 99 98 100 3 (parallel [
            (set (reg:DI 0 ax [593])
                (plus:DI (reg:DI 0 ax [593])
                    (reg:DI 1 dx [orig:104 D.6062 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:41 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:104 D.6062 ] [104])
            (const_int 9 [0x9]))
        (nil)))
(insn 100 99 101 3 (parallel [
            (set (reg:DI 0 ax [594])
                (ashift:DI (reg:DI 0 ax [593])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:41 497 {*ashldi3_1}
     (nil))
(insn 101 100 102 3 (set (reg:DI 0 ax [593])
        (reg:DI 0 ax [594])) com_line.cpp:41 89 {*movdi_internal}
     (nil))
(insn 102 101 103 3 (set (reg:DI 1 dx [orig:105 D.6062 ] [105])
        (reg:DI 0 ax [593])) com_line.cpp:41 89 {*movdi_internal}
     (nil))
(insn 103 102 104 3 (set (reg/f:DI 0 ax [595])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:41 89 {*movdi_internal}
     (nil))
(insn 104 103 105 3 (parallel [
            (set (reg/f:DI 1 dx [orig:106 D.6063 ] [106])
                (plus:DI (reg:DI 1 dx [orig:105 D.6062 ] [105])
                    (reg/f:DI 0 ax [595])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:41 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:105 D.6062 ] [105]))
        (nil)))
(insn 105 104 106 3 (set (reg:SF 0 ax [596])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) com_line.cpp:41 129 {*movsf_internal}
     (nil))
(insn 106 105 107 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:106 D.6063 ] [106])
                (const_int 28 [0x1c])) [0 _38->comp_filter+0 S4 A32])
        (reg:SF 0 ax [596])) com_line.cpp:41 129 {*movsf_internal}
     (nil))
(insn 107 106 108 3 (set (reg:SI 0 ax [597])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:42 90 {*movsi_internal}
     (nil))
(insn 108 107 109 3 (set (reg:DI 1 dx [orig:107 D.6062 ] [107])
        (sign_extend:DI (reg:SI 0 ax [597]))) com_line.cpp:42 142 {*extendsidi2_rex64}
     (nil))
(insn 109 108 110 3 (set (reg:DI 0 ax [598])
        (reg:DI 1 dx [orig:107 D.6062 ] [107])) com_line.cpp:42 89 {*movdi_internal}
     (nil))
(insn 110 109 111 3 (parallel [
            (set (reg:DI 0 ax [598])
                (ashift:DI (reg:DI 0 ax [598])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:42 497 {*ashldi3_1}
     (nil))
(insn 111 110 112 3 (parallel [
            (set (reg:DI 0 ax [598])
                (plus:DI (reg:DI 0 ax [598])
                    (reg:DI 1 dx [orig:107 D.6062 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:42 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:107 D.6062 ] [107])
            (const_int 9 [0x9]))
        (nil)))
(insn 112 111 113 3 (parallel [
            (set (reg:DI 0 ax [599])
                (ashift:DI (reg:DI 0 ax [598])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:42 497 {*ashldi3_1}
     (nil))
(insn 113 112 114 3 (set (reg:DI 0 ax [598])
        (reg:DI 0 ax [599])) com_line.cpp:42 89 {*movdi_internal}
     (nil))
(insn 114 113 115 3 (set (reg:DI 1 dx [orig:108 D.6062 ] [108])
        (reg:DI 0 ax [598])) com_line.cpp:42 89 {*movdi_internal}
     (nil))
(insn 115 114 116 3 (set (reg/f:DI 0 ax [600])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:42 89 {*movdi_internal}
     (nil))
(insn 116 115 117 3 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.6063 ] [109])
                (plus:DI (reg/f:DI 0 ax [600])
                    (reg:DI 1 dx [orig:108 D.6062 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:42 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.6062 ] [108]))
        (nil)))
(insn 117 116 118 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:109 D.6063 ] [109])
                (const_int 32 [0x20])) [0 _41->max_normalize+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:42 90 {*movsi_internal}
     (nil))
(insn 118 117 119 3 (set (reg:SI 0 ax [601])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:43 90 {*movsi_internal}
     (nil))
(insn 119 118 120 3 (set (reg:DI 1 dx [orig:110 D.6062 ] [110])
        (sign_extend:DI (reg:SI 0 ax [601]))) com_line.cpp:43 142 {*extendsidi2_rex64}
     (nil))
(insn 120 119 121 3 (set (reg:DI 0 ax [602])
        (reg:DI 1 dx [orig:110 D.6062 ] [110])) com_line.cpp:43 89 {*movdi_internal}
     (nil))
(insn 121 120 122 3 (parallel [
            (set (reg:DI 0 ax [602])
                (ashift:DI (reg:DI 0 ax [602])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:43 497 {*ashldi3_1}
     (nil))
(insn 122 121 123 3 (parallel [
            (set (reg:DI 0 ax [602])
                (plus:DI (reg:DI 0 ax [602])
                    (reg:DI 1 dx [orig:110 D.6062 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:43 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:110 D.6062 ] [110])
            (const_int 9 [0x9]))
        (nil)))
(insn 123 122 124 3 (parallel [
            (set (reg:DI 0 ax [603])
                (ashift:DI (reg:DI 0 ax [602])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:43 497 {*ashldi3_1}
     (nil))
(insn 124 123 125 3 (set (reg:DI 0 ax [602])
        (reg:DI 0 ax [603])) com_line.cpp:43 89 {*movdi_internal}
     (nil))
(insn 125 124 126 3 (set (reg:DI 1 dx [orig:111 D.6062 ] [111])
        (reg:DI 0 ax [602])) com_line.cpp:43 89 {*movdi_internal}
     (nil))
(insn 126 125 127 3 (set (reg/f:DI 0 ax [604])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:43 89 {*movdi_internal}
     (nil))
(insn 127 126 128 3 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.6063 ] [112])
                (plus:DI (reg/f:DI 0 ax [604])
                    (reg:DI 1 dx [orig:111 D.6062 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:43 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.6062 ] [111]))
        (nil)))
(insn 128 127 129 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:112 D.6063 ] [112])
                (const_int 36 [0x24])) [0 _44->pre_quality+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:43 90 {*movsi_internal}
     (nil))
(insn 129 128 130 3 (set (reg:SI 0 ax [605])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:44 90 {*movsi_internal}
     (nil))
(insn 130 129 131 3 (set (reg:DI 1 dx [orig:113 D.6062 ] [113])
        (sign_extend:DI (reg:SI 0 ax [605]))) com_line.cpp:44 142 {*extendsidi2_rex64}
     (nil))
(insn 131 130 132 3 (set (reg:DI 0 ax [606])
        (reg:DI 1 dx [orig:113 D.6062 ] [113])) com_line.cpp:44 89 {*movdi_internal}
     (nil))
(insn 132 131 133 3 (parallel [
            (set (reg:DI 0 ax [606])
                (ashift:DI (reg:DI 0 ax [606])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:44 497 {*ashldi3_1}
     (nil))
(insn 133 132 134 3 (parallel [
            (set (reg:DI 0 ax [606])
                (plus:DI (reg:DI 0 ax [606])
                    (reg:DI 1 dx [orig:113 D.6062 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:44 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:113 D.6062 ] [113])
            (const_int 9 [0x9]))
        (nil)))
(insn 134 133 135 3 (parallel [
            (set (reg:DI 0 ax [607])
                (ashift:DI (reg:DI 0 ax [606])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:44 497 {*ashldi3_1}
     (nil))
(insn 135 134 136 3 (set (reg:DI 0 ax [606])
        (reg:DI 0 ax [607])) com_line.cpp:44 89 {*movdi_internal}
     (nil))
(insn 136 135 137 3 (set (reg:DI 1 dx [orig:114 D.6062 ] [114])
        (reg:DI 0 ax [606])) com_line.cpp:44 89 {*movdi_internal}
     (nil))
(insn 137 136 138 3 (set (reg/f:DI 0 ax [608])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:44 89 {*movdi_internal}
     (nil))
(insn 138 137 139 3 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.6063 ] [115])
                (plus:DI (reg/f:DI 0 ax [608])
                    (reg:DI 1 dx [orig:114 D.6062 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:44 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.6062 ] [114]))
        (nil)))
(insn 139 138 140 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:115 D.6063 ] [115])
                (const_int 40 [0x28])) [0 _47->pre_quecc+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:44 90 {*movsi_internal}
     (nil))
(insn 140 139 141 3 (set (reg:SI 0 ax [609])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:45 90 {*movsi_internal}
     (nil))
(insn 141 140 142 3 (set (reg:DI 1 dx [orig:116 D.6062 ] [116])
        (sign_extend:DI (reg:SI 0 ax [609]))) com_line.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 142 141 143 3 (set (reg:DI 0 ax [610])
        (reg:DI 1 dx [orig:116 D.6062 ] [116])) com_line.cpp:45 89 {*movdi_internal}
     (nil))
(insn 143 142 144 3 (parallel [
            (set (reg:DI 0 ax [610])
                (ashift:DI (reg:DI 0 ax [610])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:45 497 {*ashldi3_1}
     (nil))
(insn 144 143 145 3 (parallel [
            (set (reg:DI 0 ax [610])
                (plus:DI (reg:DI 0 ax [610])
                    (reg:DI 1 dx [orig:116 D.6062 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:45 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:116 D.6062 ] [116])
            (const_int 9 [0x9]))
        (nil)))
(insn 145 144 146 3 (parallel [
            (set (reg:DI 0 ax [611])
                (ashift:DI (reg:DI 0 ax [610])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:45 497 {*ashldi3_1}
     (nil))
(insn 146 145 147 3 (set (reg:DI 0 ax [610])
        (reg:DI 0 ax [611])) com_line.cpp:45 89 {*movdi_internal}
     (nil))
(insn 147 146 148 3 (set (reg:DI 1 dx [orig:117 D.6062 ] [117])
        (reg:DI 0 ax [610])) com_line.cpp:45 89 {*movdi_internal}
     (nil))
(insn 148 147 149 3 (set (reg/f:DI 0 ax [612])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:45 89 {*movdi_internal}
     (nil))
(insn 149 148 150 3 (parallel [
            (set (reg/f:DI 0 ax [orig:118 D.6063 ] [118])
                (plus:DI (reg/f:DI 0 ax [612])
                    (reg:DI 1 dx [orig:117 D.6062 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:45 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:117 D.6062 ] [117]))
        (nil)))
(insn 150 149 151 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:118 D.6063 ] [118])
                (const_int 44 [0x2c])) [0 _50->pre_quecc_points+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:45 90 {*movsi_internal}
     (nil))
(insn 151 150 152 3 (set (reg:SI 0 ax [613])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:46 90 {*movsi_internal}
     (nil))
(insn 152 151 153 3 (set (reg:DI 1 dx [orig:119 D.6062 ] [119])
        (sign_extend:DI (reg:SI 0 ax [613]))) com_line.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 153 152 154 3 (set (reg:DI 0 ax [614])
        (reg:DI 1 dx [orig:119 D.6062 ] [119])) com_line.cpp:46 89 {*movdi_internal}
     (nil))
(insn 154 153 155 3 (parallel [
            (set (reg:DI 0 ax [614])
                (ashift:DI (reg:DI 0 ax [614])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:46 497 {*ashldi3_1}
     (nil))
(insn 155 154 156 3 (parallel [
            (set (reg:DI 0 ax [614])
                (plus:DI (reg:DI 0 ax [614])
                    (reg:DI 1 dx [orig:119 D.6062 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:46 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:119 D.6062 ] [119])
            (const_int 9 [0x9]))
        (nil)))
(insn 156 155 157 3 (parallel [
            (set (reg:DI 0 ax [615])
                (ashift:DI (reg:DI 0 ax [614])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:46 497 {*ashldi3_1}
     (nil))
(insn 157 156 158 3 (set (reg:DI 0 ax [614])
        (reg:DI 0 ax [615])) com_line.cpp:46 89 {*movdi_internal}
     (nil))
(insn 158 157 159 3 (set (reg:DI 1 dx [orig:120 D.6062 ] [120])
        (reg:DI 0 ax [614])) com_line.cpp:46 89 {*movdi_internal}
     (nil))
(insn 159 158 160 3 (set (reg/f:DI 0 ax [616])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:46 89 {*movdi_internal}
     (nil))
(insn 160 159 161 3 (parallel [
            (set (reg/f:DI 1 dx [orig:121 D.6063 ] [121])
                (plus:DI (reg:DI 1 dx [orig:120 D.6062 ] [120])
                    (reg/f:DI 0 ax [616])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:46 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.6062 ] [120]))
        (nil)))
(insn 161 160 162 3 (set (reg:SF 0 ax [617])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) com_line.cpp:46 129 {*movsf_internal}
     (nil))
(insn 162 161 163 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:121 D.6063 ] [121])
                (const_int 48 [0x30])) [0 _53->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [617])) com_line.cpp:46 129 {*movsf_internal}
     (nil))
(insn 163 162 164 3 (set (reg:SI 0 ax [618])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:47 90 {*movsi_internal}
     (nil))
(insn 164 163 165 3 (set (reg:DI 1 dx [orig:122 D.6062 ] [122])
        (sign_extend:DI (reg:SI 0 ax [618]))) com_line.cpp:47 142 {*extendsidi2_rex64}
     (nil))
(insn 165 164 166 3 (set (reg:DI 0 ax [619])
        (reg:DI 1 dx [orig:122 D.6062 ] [122])) com_line.cpp:47 89 {*movdi_internal}
     (nil))
(insn 166 165 167 3 (parallel [
            (set (reg:DI 0 ax [619])
                (ashift:DI (reg:DI 0 ax [619])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:47 497 {*ashldi3_1}
     (nil))
(insn 167 166 168 3 (parallel [
            (set (reg:DI 0 ax [619])
                (plus:DI (reg:DI 0 ax [619])
                    (reg:DI 1 dx [orig:122 D.6062 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:47 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:122 D.6062 ] [122])
            (const_int 9 [0x9]))
        (nil)))
(insn 168 167 169 3 (parallel [
            (set (reg:DI 0 ax [620])
                (ashift:DI (reg:DI 0 ax [619])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:47 497 {*ashldi3_1}
     (nil))
(insn 169 168 170 3 (set (reg:DI 0 ax [619])
        (reg:DI 0 ax [620])) com_line.cpp:47 89 {*movdi_internal}
     (nil))
(insn 170 169 171 3 (set (reg:DI 1 dx [orig:123 D.6062 ] [123])
        (reg:DI 0 ax [619])) com_line.cpp:47 89 {*movdi_internal}
     (nil))
(insn 171 170 172 3 (set (reg/f:DI 0 ax [621])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:47 89 {*movdi_internal}
     (nil))
(insn 172 171 173 3 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.6063 ] [124])
                (plus:DI (reg/f:DI 0 ax [621])
                    (reg:DI 1 dx [orig:123 D.6062 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:47 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.6062 ] [123]))
        (nil)))
(insn 173 172 174 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:124 D.6063 ] [124])
                (const_int 52 [0x34])) [0 _56->pre_quecc_if+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:47 90 {*movsi_internal}
     (nil))
(insn 174 173 175 3 (set (reg:SI 0 ax [622])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:48 90 {*movsi_internal}
     (nil))
(insn 175 174 176 3 (set (reg:DI 1 dx [orig:125 D.6062 ] [125])
        (sign_extend:DI (reg:SI 0 ax [622]))) com_line.cpp:48 142 {*extendsidi2_rex64}
     (nil))
(insn 176 175 177 3 (set (reg:DI 0 ax [623])
        (reg:DI 1 dx [orig:125 D.6062 ] [125])) com_line.cpp:48 89 {*movdi_internal}
     (nil))
(insn 177 176 178 3 (parallel [
            (set (reg:DI 0 ax [623])
                (ashift:DI (reg:DI 0 ax [623])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:48 497 {*ashldi3_1}
     (nil))
(insn 178 177 179 3 (parallel [
            (set (reg:DI 0 ax [623])
                (plus:DI (reg:DI 0 ax [623])
                    (reg:DI 1 dx [orig:125 D.6062 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:48 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:125 D.6062 ] [125])
            (const_int 9 [0x9]))
        (nil)))
(insn 179 178 180 3 (parallel [
            (set (reg:DI 0 ax [624])
                (ashift:DI (reg:DI 0 ax [623])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:48 497 {*ashldi3_1}
     (nil))
(insn 180 179 181 3 (set (reg:DI 0 ax [623])
        (reg:DI 0 ax [624])) com_line.cpp:48 89 {*movdi_internal}
     (nil))
(insn 181 180 182 3 (set (reg:DI 1 dx [orig:126 D.6062 ] [126])
        (reg:DI 0 ax [623])) com_line.cpp:48 89 {*movdi_internal}
     (nil))
(insn 182 181 183 3 (set (reg/f:DI 0 ax [625])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:48 89 {*movdi_internal}
     (nil))
(insn 183 182 184 3 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.6063 ] [127])
                (plus:DI (reg/f:DI 0 ax [625])
                    (reg:DI 1 dx [orig:126 D.6062 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:48 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.6062 ] [126]))
        (nil)))
(insn 184 183 185 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:127 D.6063 ] [127])
                (const_int 56 [0x38])) [0 _59->input_file_type+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:48 90 {*movsi_internal}
     (nil))
(insn 185 184 186 3 (set (reg:SI 0 ax [626])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:49 90 {*movsi_internal}
     (nil))
(insn 186 185 187 3 (set (reg:DI 1 dx [orig:128 D.6062 ] [128])
        (sign_extend:DI (reg:SI 0 ax [626]))) com_line.cpp:49 142 {*extendsidi2_rex64}
     (nil))
(insn 187 186 188 3 (set (reg:DI 0 ax [627])
        (reg:DI 1 dx [orig:128 D.6062 ] [128])) com_line.cpp:49 89 {*movdi_internal}
     (nil))
(insn 188 187 189 3 (parallel [
            (set (reg:DI 0 ax [627])
                (ashift:DI (reg:DI 0 ax [627])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:49 497 {*ashldi3_1}
     (nil))
(insn 189 188 190 3 (parallel [
            (set (reg:DI 0 ax [627])
                (plus:DI (reg:DI 0 ax [627])
                    (reg:DI 1 dx [orig:128 D.6062 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:49 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:128 D.6062 ] [128])
            (const_int 9 [0x9]))
        (nil)))
(insn 190 189 191 3 (parallel [
            (set (reg:DI 0 ax [628])
                (ashift:DI (reg:DI 0 ax [627])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:49 497 {*ashldi3_1}
     (nil))
(insn 191 190 192 3 (set (reg:DI 0 ax [627])
        (reg:DI 0 ax [628])) com_line.cpp:49 89 {*movdi_internal}
     (nil))
(insn 192 191 193 3 (set (reg:DI 1 dx [orig:129 D.6062 ] [129])
        (reg:DI 0 ax [627])) com_line.cpp:49 89 {*movdi_internal}
     (nil))
(insn 193 192 194 3 (set (reg/f:DI 0 ax [629])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:49 89 {*movdi_internal}
     (nil))
(insn 194 193 195 3 (parallel [
            (set (reg/f:DI 0 ax [orig:130 D.6063 ] [130])
                (plus:DI (reg/f:DI 0 ax [629])
                    (reg:DI 1 dx [orig:129 D.6062 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:49 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:129 D.6062 ] [129]))
        (nil)))
(insn 195 194 196 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:130 D.6063 ] [130])
                (const_int 60 [0x3c])) [0 _62->ref_file_argument+0 S4 A32])
        (const_int 5 [0x5])) com_line.cpp:49 90 {*movsi_internal}
     (nil))
(insn 196 195 197 3 (set (reg:SI 0 ax [630])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:50 90 {*movsi_internal}
     (nil))
(insn 197 196 198 3 (set (reg:DI 1 dx [orig:131 D.6062 ] [131])
        (sign_extend:DI (reg:SI 0 ax [630]))) com_line.cpp:50 142 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 3 (set (reg:DI 0 ax [631])
        (reg:DI 1 dx [orig:131 D.6062 ] [131])) com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 199 198 200 3 (parallel [
            (set (reg:DI 0 ax [631])
                (ashift:DI (reg:DI 0 ax [631])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:50 497 {*ashldi3_1}
     (nil))
(insn 200 199 201 3 (parallel [
            (set (reg:DI 0 ax [631])
                (plus:DI (reg:DI 0 ax [631])
                    (reg:DI 1 dx [orig:131 D.6062 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:50 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:131 D.6062 ] [131])
            (const_int 9 [0x9]))
        (nil)))
(insn 201 200 202 3 (parallel [
            (set (reg:DI 0 ax [632])
                (ashift:DI (reg:DI 0 ax [631])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:50 497 {*ashldi3_1}
     (nil))
(insn 202 201 203 3 (set (reg:DI 0 ax [631])
        (reg:DI 0 ax [632])) com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 203 202 204 3 (set (reg:DI 1 dx [orig:132 D.6062 ] [132])
        (reg:DI 0 ax [631])) com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 204 203 205 3 (set (reg/f:DI 0 ax [633])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 205 204 206 3 (parallel [
            (set (reg/f:DI 0 ax [orig:133 D.6063 ] [133])
                (plus:DI (reg/f:DI 0 ax [633])
                    (reg:DI 1 dx [orig:132 D.6062 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:50 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:132 D.6062 ] [132]))
        (nil)))
(insn 206 205 207 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:133 D.6063 ] [133])
                (const_int 64 [0x40])) [0 _65->csi_reorder+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:50 90 {*movsi_internal}
     (nil))
(insn 207 206 208 3 (set (reg:SI 0 ax [634])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:51 90 {*movsi_internal}
     (nil))
(insn 208 207 209 3 (set (reg:DI 1 dx [orig:134 D.6062 ] [134])
        (sign_extend:DI (reg:SI 0 ax [634]))) com_line.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 209 208 210 3 (set (reg:DI 0 ax [635])
        (reg:DI 1 dx [orig:134 D.6062 ] [134])) com_line.cpp:51 89 {*movdi_internal}
     (nil))
(insn 210 209 211 3 (parallel [
            (set (reg:DI 0 ax [635])
                (ashift:DI (reg:DI 0 ax [635])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:51 497 {*ashldi3_1}
     (nil))
(insn 211 210 212 3 (parallel [
            (set (reg:DI 0 ax [635])
                (plus:DI (reg:DI 0 ax [635])
                    (reg:DI 1 dx [orig:134 D.6062 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:51 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:134 D.6062 ] [134])
            (const_int 9 [0x9]))
        (nil)))
(insn 212 211 213 3 (parallel [
            (set (reg:DI 0 ax [636])
                (ashift:DI (reg:DI 0 ax [635])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:51 497 {*ashldi3_1}
     (nil))
(insn 213 212 214 3 (set (reg:DI 0 ax [635])
        (reg:DI 0 ax [636])) com_line.cpp:51 89 {*movdi_internal}
     (nil))
(insn 214 213 215 3 (set (reg:DI 1 dx [orig:135 D.6062 ] [135])
        (reg:DI 0 ax [635])) com_line.cpp:51 89 {*movdi_internal}
     (nil))
(insn 215 214 216 3 (set (reg/f:DI 0 ax [637])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:51 89 {*movdi_internal}
     (nil))
(insn 216 215 217 3 (parallel [
            (set (reg/f:DI 0 ax [orig:136 D.6063 ] [136])
                (plus:DI (reg/f:DI 0 ax [637])
                    (reg:DI 1 dx [orig:135 D.6062 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:51 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:135 D.6062 ] [135]))
        (nil)))
(insn 217 216 218 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:136 D.6063 ] [136])
                (const_int 68 [0x44])) [0 _68->tilt+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:51 90 {*movsi_internal}
     (nil))
(insn 218 217 219 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:33 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 219 218 220 4 2 "" [1 uses])
(note 220 219 222 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 222 220 223 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) com_line.cpp:33 7 {*cmpsi_1}
     (nil))
(jump_insn 223 222 224 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 221)
            (pc))) com_line.cpp:33 596 {*jcc_1}
     (nil)
 -> 221)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 137 138 139 638
(note 224 223 225 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 226 5 (set (reg/f:DI 0 ax [638])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:54 89 {*movdi_internal}
     (nil))
(insn 226 225 227 5 (parallel [
            (set (reg/f:DI 0 ax [orig:137 D.6064 ] [137])
                (plus:DI (reg/f:DI 0 ax [638])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:54 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 227 226 228 5 (set (reg/f:DI 0 ax [orig:138 D.6065 ] [138])
        (mem/f:DI (reg/f:DI 0 ax [orig:137 D.6064 ] [137]) [0 *_71+0 S8 A64])) com_line.cpp:54 89 {*movdi_internal}
     (nil))
(insn 228 227 229 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b4a3dfc28e8 *.LC2>)) com_line.cpp:54 89 {*movdi_internal}
     (nil))
(insn 229 228 230 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:138 D.6065 ] [138])) com_line.cpp:54 89 {*movdi_internal}
     (nil))
(call_insn/i 230 229 231 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:54 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 231 230 232 5 (set (reg:SI 0 ax [orig:139 D.6066 ] [139])
        (reg:SI 0 ax)) com_line.cpp:54 90 {*movsi_internal}
     (nil))
(insn 232 231 233 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:139 D.6066 ] [139])
            (const_int 0 [0]))) com_line.cpp:54 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 233 232 234 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 237)
            (pc))) com_line.cpp:54 596 {*jcc_1}
     (nil)
 -> 237)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 639
(note 234 233 235 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 236 6 (set (reg/f:DI 0 ax [639])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:55 89 {*movdi_internal}
     (nil))
(insn 236 235 237 6 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [639])
                (const_int 56 [0x38])) [0 preprocess_16(D)->input_file_type+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:55 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 140 141 142 640
(code_label 237 236 238 7 4 "" [1 uses])
(note 238 237 239 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 240 7 (set (reg/f:DI 0 ax [640])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:58 89 {*movdi_internal}
     (nil))
(insn 240 239 241 7 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.6064 ] [140])
                (plus:DI (reg/f:DI 0 ax [640])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:58 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 241 240 242 7 (set (reg/f:DI 0 ax [orig:141 D.6065 ] [141])
        (mem/f:DI (reg/f:DI 0 ax [orig:140 D.6064 ] [140]) [0 *_74+0 S8 A64])) com_line.cpp:58 89 {*movdi_internal}
     (nil))
(insn 242 241 243 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b4a3dfc2980 *.LC3>)) com_line.cpp:58 89 {*movdi_internal}
     (nil))
(insn 243 242 244 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:141 D.6065 ] [141])) com_line.cpp:58 89 {*movdi_internal}
     (nil))
(call_insn/i 244 243 245 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:58 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 245 244 246 7 (set (reg:SI 0 ax [orig:142 D.6066 ] [142])
        (reg:SI 0 ax)) com_line.cpp:58 90 {*movsi_internal}
     (nil))
(insn 246 245 247 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:142 D.6066 ] [142])
            (const_int 0 [0]))) com_line.cpp:58 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 247 246 248 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 251)
            (pc))) com_line.cpp:58 596 {*jcc_1}
     (nil)
 -> 251)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 641
(note 248 247 249 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 249 248 250 8 (set (reg/f:DI 0 ax [641])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:59 89 {*movdi_internal}
     (nil))
(insn 250 249 251 8 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [641])
                (const_int 56 [0x38])) [0 preprocess_16(D)->input_file_type+0 S4 A32])
        (const_int 2 [0x2])) com_line.cpp:59 90 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 143 144 145 642
(code_label 251 250 252 9 5 "" [1 uses])
(note 252 251 253 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 9 (set (reg/f:DI 0 ax [642])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:62 89 {*movdi_internal}
     (nil))
(insn 254 253 255 9 (parallel [
            (set (reg/f:DI 0 ax [orig:143 D.6064 ] [143])
                (plus:DI (reg/f:DI 0 ax [642])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:62 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 255 254 256 9 (set (reg/f:DI 0 ax [orig:144 D.6065 ] [144])
        (mem/f:DI (reg/f:DI 0 ax [orig:143 D.6064 ] [143]) [0 *_77+0 S8 A64])) com_line.cpp:62 89 {*movdi_internal}
     (nil))
(insn 256 255 257 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b4a3dfc2a18 *.LC4>)) com_line.cpp:62 89 {*movdi_internal}
     (nil))
(insn 257 256 258 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:144 D.6065 ] [144])) com_line.cpp:62 89 {*movdi_internal}
     (nil))
(call_insn/i 258 257 259 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:62 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 259 258 260 9 (set (reg:SI 0 ax [orig:145 D.6066 ] [145])
        (reg:SI 0 ax)) com_line.cpp:62 90 {*movsi_internal}
     (nil))
(insn 260 259 261 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:145 D.6066 ] [145])
            (const_int 0 [0]))) com_line.cpp:62 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 261 260 262 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 274)
            (pc))) com_line.cpp:62 596 {*jcc_1}
     (nil)
 -> 274)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 148 643 644 645 646
(note 262 261 263 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 263 262 264 10 (set (reg:SI 0 ax [643])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:63 90 {*movsi_internal}
     (nil))
(insn 264 263 265 10 (set (reg:DI 1 dx [orig:146 D.6062 ] [146])
        (sign_extend:DI (reg:SI 0 ax [643]))) com_line.cpp:63 142 {*extendsidi2_rex64}
     (nil))
(insn 265 264 266 10 (set (reg:DI 0 ax [644])
        (reg:DI 1 dx [orig:146 D.6062 ] [146])) com_line.cpp:63 89 {*movdi_internal}
     (nil))
(insn 266 265 267 10 (parallel [
            (set (reg:DI 0 ax [644])
                (ashift:DI (reg:DI 0 ax [644])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:63 497 {*ashldi3_1}
     (nil))
(insn 267 266 268 10 (parallel [
            (set (reg:DI 0 ax [644])
                (plus:DI (reg:DI 0 ax [644])
                    (reg:DI 1 dx [orig:146 D.6062 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:63 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:146 D.6062 ] [146])
            (const_int 9 [0x9]))
        (nil)))
(insn 268 267 269 10 (parallel [
            (set (reg:DI 0 ax [645])
                (ashift:DI (reg:DI 0 ax [644])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:63 497 {*ashldi3_1}
     (nil))
(insn 269 268 270 10 (set (reg:DI 0 ax [644])
        (reg:DI 0 ax [645])) com_line.cpp:63 89 {*movdi_internal}
     (nil))
(insn 270 269 271 10 (set (reg:DI 1 dx [orig:147 D.6062 ] [147])
        (reg:DI 0 ax [644])) com_line.cpp:63 89 {*movdi_internal}
     (nil))
(insn 271 270 272 10 (set (reg/f:DI 0 ax [646])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:63 89 {*movdi_internal}
     (nil))
(insn 272 271 273 10 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.6063 ] [148])
                (plus:DI (reg/f:DI 0 ax [646])
                    (reg:DI 1 dx [orig:147 D.6062 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:63 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:147 D.6062 ] [147]))
        (nil)))
(insn 273 272 274 10 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:148 D.6063 ] [148])
                (const_int 64 [0x40])) [0 _82->csi_reorder+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:63 90 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 149 150 151 152 153 154 155 156 647 648 649 650 651
(code_label 274 273 275 11 6 "" [1 uses])
(note 275 274 276 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 11 (set (reg/f:DI 0 ax [647])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:66 89 {*movdi_internal}
     (nil))
(insn 277 276 278 11 (parallel [
            (set (reg/f:DI 0 ax [orig:149 D.6064 ] [149])
                (plus:DI (reg/f:DI 0 ax [647])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:66 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 278 277 279 11 (set (reg/f:DI 1 dx [orig:150 D.6065 ] [150])
        (mem/f:DI (reg/f:DI 0 ax [orig:149 D.6064 ] [149]) [0 *_83+0 S8 A64])) com_line.cpp:66 89 {*movdi_internal}
     (nil))
(insn 279 278 280 11 (set (reg/f:DI 0 ax [orig:151 D.6067 ] [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:66 89 {*movdi_internal}
     (nil))
(insn 280 279 281 11 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:150 D.6065 ] [150])) com_line.cpp:66 89 {*movdi_internal}
     (nil))
(insn 281 280 282 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:151 D.6067 ] [151])) com_line.cpp:66 89 {*movdi_internal}
     (nil))
(call_insn 282 281 283 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:66 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 283 282 284 11 (set (reg/f:DI 0 ax [648])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:67 89 {*movdi_internal}
     (nil))
(insn 284 283 285 11 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.6064 ] [152])
                (plus:DI (reg/f:DI 0 ax [648])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:67 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 285 284 286 11 (set (reg/f:DI 0 ax [orig:153 D.6065 ] [153])
        (mem/f:DI (reg/f:DI 0 ax [orig:152 D.6064 ] [152]) [0 *_87+0 S8 A64])) com_line.cpp:67 89 {*movdi_internal}
     (nil))
(insn 286 285 287 11 (set (reg/f:DI 1 dx [649])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5080 [0xffffffffffffec28])) [0 procpar_info+0 S8 A64])) com_line.cpp:67 89 {*movdi_internal}
     (nil))
(insn 287 286 288 11 (parallel [
            (set (reg/f:DI 1 dx [orig:154 D.6067 ] [154])
                (plus:DI (reg/f:DI 1 dx [649])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:67 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5064 [0xffffffffffffec38])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 288 287 289 11 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:153 D.6065 ] [153])) com_line.cpp:67 89 {*movdi_internal}
     (nil))
(insn 289 288 290 11 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:154 D.6067 ] [154])) com_line.cpp:67 89 {*movdi_internal}
     (nil))
(call_insn 290 289 291 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:67 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 291 290 292 11 (set (reg/f:DI 1 dx [orig:155 D.6067 ] [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 292 291 293 11 (parallel [
            (set (reg:DI 0 ax [650])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -5024 [0xffffffffffffec60])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:72 221 {*adddi_1}
     (nil))
(insn 293 292 294 11 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:155 D.6067 ] [155])) com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 294 293 295 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [650])) com_line.cpp:72 89 {*movdi_internal}
     (nil))
(call_insn 295 294 296 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:72 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 296 295 297 11 (set (reg/f:DI 0 ax [651])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 297 296 298 11 (set (reg:SI 0 ax [orig:156 D.6066 ] [156])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [651])
                (const_int 56 [0x38])) [0 preprocess_16(D)->input_file_type+0 S4 A32])) com_line.cpp:76 90 {*movsi_internal}
     (nil))
(insn 298 297 299 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:156 D.6066 ] [156])
            (const_int 0 [0]))) com_line.cpp:76 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 299 298 300 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 312)
            (pc))) com_line.cpp:76 596 {*jcc_1}
     (nil)
 -> 312)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158 159 652 653 654 655 656 657
(note 300 299 301 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 301 300 308 12 (set (reg/f:DI 1 dx [orig:157 D.6067 ] [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 308 301 302 12 (set (reg:DI 0 ax [652])
        (reg/f:DI 1 dx [orig:157 D.6067 ] [157])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 302 308 303 12 (set (reg:DI 2 cx [656])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 303 302 304 12 (set (reg:DI 4 si [655])
        (reg:DI 0 ax [652])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 304 303 1976 12 (set (reg:QI 0 ax [657])
        (const_int 0 [0])) com_line.cpp:76 93 {*movqi_internal}
     (nil))
(insn 1976 304 305 12 (set (reg:DI 5 di [655])
        (reg:DI 4 si [655])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 305 1976 1975 12 (parallel [
            (set (reg:DI 2 cx [653])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [655]) [0  A8])
                        (reg:QI 0 ax [657])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [653])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [655]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:76 923 {*strlenqi_1}
     (nil))
(insn 1975 305 306 12 (set (reg:DI 0 ax [653])
        (reg:DI 2 cx [653])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 306 1975 307 12 (set (reg:DI 0 ax [654])
        (not:DI (reg:DI 0 ax [653]))) com_line.cpp:76 479 {*one_cmpldi2_1}
     (nil))
(insn 307 306 309 12 (parallel [
            (set (reg:DI 0 ax [orig:158 D.6062 ] [158])
                (plus:DI (reg:DI 0 ax [654])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:76 221 {*adddi_1}
     (nil))
(insn 309 307 310 12 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.6065 ] [159])
                (plus:DI (reg:DI 0 ax [orig:158 D.6062 ] [158])
                    (reg/f:DI 1 dx [orig:157 D.6067 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:76 221 {*adddi_1}
     (nil))
(insn 310 309 311 12 (set (mem:SI (reg/f:DI 0 ax [orig:159 D.6065 ] [159]) [0 MEM[(void *)_95]+0 S4 A8])
        (const_int 1684629039 [0x6469662f])) com_line.cpp:76 90 {*movsi_internal}
     (nil))
(insn 311 310 312 12 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:159 D.6065 ] [159])
                (const_int 4 [0x4])) [0 MEM[(void *)_95]+4 S1 A8])
        (const_int 0 [0])) com_line.cpp:76 93 {*movqi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 160 161
(code_label 312 311 313 13 7 "" [1 uses])
(note 313 312 314 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 314 313 315 13 (set (reg/f:DI 0 ax [orig:160 D.6067 ] [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 315 314 316 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b4a3dfc2ab0 *.LC5>)) com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 316 315 317 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:160 D.6067 ] [160])) com_line.cpp:81 89 {*movdi_internal}
     (nil))
(call_insn 317 316 318 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b4a3ddf7d00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:81 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 318 317 319 13 (set (reg/f:DI 0 ax [orig:161 D.6068 ] [161])
        (reg:DI 0 ax)) com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 319 318 320 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:161 D.6068 ] [161])) com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 320 319 321 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:83 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 321 320 322 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 360)
            (pc))) com_line.cpp:83 596 {*jcc_1}
     (nil)
 -> 360)
;;  succ:       14 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 162 163 658 659
(note 322 321 323 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 323 322 324 14 (set (reg/f:DI 0 ax [orig:162 D.6067 ] [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 324 323 325 14 (parallel [
            (set (reg:DI 1 dx [658])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -5024 [0xffffffffffffec60])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:87 221 {*adddi_1}
     (nil))
(insn 325 324 326 14 (set (reg:DI 4 si)
        (reg:DI 1 dx [658])) com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 326 325 327 14 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:162 D.6067 ] [162])) com_line.cpp:87 89 {*movdi_internal}
     (nil))
(call_insn 327 326 328 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:87 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 328 327 329 14 (set (reg/f:DI 0 ax [659])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 329 328 330 14 (set (reg:SI 0 ax [orig:163 D.6066 ] [163])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [659])
                (const_int 56 [0x38])) [0 preprocess_16(D)->input_file_type+0 S4 A32])) com_line.cpp:89 90 {*movsi_internal}
     (nil))
(insn 330 329 331 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:163 D.6066 ] [163])
            (const_int 0 [0]))) com_line.cpp:89 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 331 330 332 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 344)
            (pc))) com_line.cpp:89 596 {*jcc_1}
     (nil)
 -> 344)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 164 165 166 660 661 662 663 664 665
(note 332 331 333 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 333 332 340 15 (set (reg/f:DI 1 dx [orig:164 D.6067 ] [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 340 333 334 15 (set (reg:DI 0 ax [660])
        (reg/f:DI 1 dx [orig:164 D.6067 ] [164])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 334 340 335 15 (set (reg:DI 2 cx [664])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 335 334 336 15 (set (reg:DI 4 si [663])
        (reg:DI 0 ax [660])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 336 335 1979 15 (set (reg:QI 0 ax [665])
        (const_int 0 [0])) com_line.cpp:89 93 {*movqi_internal}
     (nil))
(insn 1979 336 337 15 (set (reg:DI 5 di [663])
        (reg:DI 4 si [663])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 337 1979 1978 15 (parallel [
            (set (reg:DI 2 cx [661])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [663]) [0  A8])
                        (reg:QI 0 ax [665])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [661])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [663]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:89 923 {*strlenqi_1}
     (nil))
(insn 1978 337 338 15 (set (reg:DI 0 ax [661])
        (reg:DI 2 cx [661])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 338 1978 339 15 (set (reg:DI 0 ax [662])
        (not:DI (reg:DI 0 ax [661]))) com_line.cpp:89 479 {*one_cmpldi2_1}
     (nil))
(insn 339 338 341 15 (parallel [
            (set (reg:DI 0 ax [orig:165 D.6062 ] [165])
                (plus:DI (reg:DI 0 ax [662])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:89 221 {*adddi_1}
     (nil))
(insn 341 339 342 15 (parallel [
            (set (reg/f:DI 0 ax [orig:166 D.6065 ] [166])
                (plus:DI (reg:DI 0 ax [orig:165 D.6062 ] [165])
                    (reg/f:DI 1 dx [orig:164 D.6067 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:89 221 {*adddi_1}
     (nil))
(insn 342 341 1980 15 (set (reg:DI 3 bx [1006])
        (const_int 8392585648206865967 [0x7478742e6469662f])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 1980 342 343 15 (set (mem:DI (reg/f:DI 0 ax [orig:166 D.6065 ] [166]) [0 MEM[(void *)_103]+0 S8 A8])
        (reg:DI 3 bx [1006])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 343 1980 344 15 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:166 D.6065 ] [166])
                (const_int 8 [0x8])) [0 MEM[(void *)_103]+8 S1 A8])
        (const_int 0 [0])) com_line.cpp:89 93 {*movqi_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 167 168
(code_label 344 343 345 16 9 "" [1 uses])
(note 345 344 346 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 346 345 347 16 (set (reg/f:DI 0 ax [orig:167 D.6067 ] [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 347 346 348 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b4a3dfc2ab0 *.LC5>)) com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 348 347 349 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:167 D.6067 ] [167])) com_line.cpp:91 89 {*movdi_internal}
     (nil))
(call_insn 349 348 350 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b4a3ddf7d00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:91 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 350 349 351 16 (set (reg/f:DI 0 ax [orig:168 D.6068 ] [168])
        (reg:DI 0 ax)) com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 351 350 352 16 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:168 D.6068 ] [168])) com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 352 351 353 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:94 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 353 352 354 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 360)
            (pc))) com_line.cpp:94 596 {*jcc_1}
     (nil)
 -> 360)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 354 353 355 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 355 354 356 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b4a3dfc2b48 *.LC6>)) com_line.cpp:96 89 {*movdi_internal}
     (nil))
(call_insn 356 355 357 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:96 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 357 356 358 17 (set (reg:SI 5 di)
        (const_int 3 [0x3])) com_line.cpp:98 90 {*movsi_internal}
     (nil))
(call_insn 358 357 359 17 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4a3dc61900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:98 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 359 358 360)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 169 170 171 666 667 668
(code_label 360 359 361 18 8 "" [2 uses])
(note 361 360 362 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 362 361 363 18 (set (reg:DI 0 ax [666])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])) com_line.cpp:100 89 {*movdi_internal}
     (nil))
(insn 363 362 364 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [666])) com_line.cpp:100 89 {*movdi_internal}
     (nil))
(call_insn 364 363 365 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b4a3ddf7900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) com_line.cpp:100 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 365 364 366 18 (set (reg/f:DI 0 ax [667])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:102 89 {*movdi_internal}
     (nil))
(insn 366 365 367 18 (parallel [
            (set (reg/f:DI 0 ax [orig:169 D.6064 ] [169])
                (plus:DI (reg/f:DI 0 ax [667])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:102 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 367 366 368 18 (set (reg/f:DI 0 ax [orig:170 D.6065 ] [170])
        (mem/f:DI (reg/f:DI 0 ax [orig:169 D.6064 ] [169]) [0 *_107+0 S8 A64])) com_line.cpp:102 89 {*movdi_internal}
     (nil))
(insn 368 367 369 18 (set (reg/f:DI 1 dx [668])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:102 89 {*movdi_internal}
     (nil))
(insn 369 368 370 18 (parallel [
            (set (reg/f:DI 1 dx [orig:171 D.6067 ] [171])
                (plus:DI (reg/f:DI 1 dx [668])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:102 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 370 369 371 18 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:170 D.6065 ] [170])) com_line.cpp:102 89 {*movdi_internal}
     (nil))
(insn 371 370 372 18 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:171 D.6067 ] [171])) com_line.cpp:102 89 {*movdi_internal}
     (nil))
(call_insn 372 371 373 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:102 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 373 372 1903 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:105 90 {*movsi_internal}
     (nil))
(jump_insn 1903 373 1904 18 (set (pc)
        (label_ref 561)) com_line.cpp:105 636 {jump}
     (nil)
 -> 561)
;;  succ:       43 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1904 1903 563)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 172 173 174 175 176 669 670
(code_label 563 1904 376 19 23 "" [1 uses])
(note 376 563 377 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 378 19 (set (reg:SI 0 ax [669])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 378 377 379 19 (set (reg:DI 0 ax [orig:172 D.6062 ] [172])
        (sign_extend:DI (reg:SI 0 ax [669]))) com_line.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 379 378 380 19 (parallel [
            (set (reg:DI 1 dx [orig:173 D.6062 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:172 D.6062 ] [172])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 497 {*ashldi3_1}
     (nil))
(insn 380 379 381 19 (set (reg/f:DI 0 ax [670])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 381 380 382 19 (parallel [
            (set (reg/f:DI 0 ax [orig:174 D.6064 ] [174])
                (plus:DI (reg/f:DI 0 ax [670])
                    (reg:DI 1 dx [orig:173 D.6062 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:173 D.6062 ] [173]))
        (nil)))
(insn 382 381 383 19 (set (reg/f:DI 0 ax [orig:175 D.6065 ] [175])
        (mem/f:DI (reg/f:DI 0 ax [orig:174 D.6064 ] [174]) [0 *_115+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 383 382 384 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b4a3dfc2be0 *.LC7>)) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 384 383 385 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:175 D.6065 ] [175])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn/i 385 384 386 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:106 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 386 385 387 19 (set (reg:SI 0 ax [orig:176 D.6066 ] [176])
        (reg:SI 0 ax)) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 387 386 388 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:176 D.6066 ] [176])
            (const_int 0 [0]))) com_line.cpp:106 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 388 387 389 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 415)
            (pc))) com_line.cpp:106 596 {*jcc_1}
     (nil)
 -> 415)
;;  succ:       22
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 177 178 179 180 181 671 672
(note 389 388 390 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 390 389 391 20 (set (reg:SI 0 ax [671])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 391 390 392 20 (set (reg:DI 0 ax [orig:177 D.6062 ] [177])
        (sign_extend:DI (reg:SI 0 ax [671]))) com_line.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 392 391 393 20 (parallel [
            (set (reg:DI 1 dx [orig:178 D.6062 ] [178])
                (ashift:DI (reg:DI 0 ax [orig:177 D.6062 ] [177])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 497 {*ashldi3_1}
     (nil))
(insn 393 392 394 20 (set (reg/f:DI 0 ax [672])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 394 393 395 20 (parallel [
            (set (reg/f:DI 0 ax [orig:179 D.6064 ] [179])
                (plus:DI (reg/f:DI 0 ax [672])
                    (reg:DI 1 dx [orig:178 D.6062 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:178 D.6062 ] [178]))
        (nil)))
(insn 395 394 396 20 (set (reg/f:DI 0 ax [orig:180 D.6065 ] [180])
        (mem/f:DI (reg/f:DI 0 ax [orig:179 D.6064 ] [179]) [0 *_120+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 396 395 397 20 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b4a3dfc2c78 *.LC8>)) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 397 396 398 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:180 D.6065 ] [180])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn/i 398 397 399 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:106 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 399 398 400 20 (set (reg:SI 0 ax [orig:181 D.6066 ] [181])
        (reg:SI 0 ax)) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 400 399 401 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:181 D.6066 ] [181])
            (const_int 0 [0]))) com_line.cpp:106 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 401 400 402 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 415)
            (pc))) com_line.cpp:106 596 {*jcc_1}
     (nil)
 -> 415)
;;  succ:       22
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 182 183 184 185 186 673 674
(note 402 401 403 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 403 402 404 21 (set (reg:SI 0 ax [673])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 404 403 405 21 (set (reg:DI 0 ax [orig:182 D.6062 ] [182])
        (sign_extend:DI (reg:SI 0 ax [673]))) com_line.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 405 404 406 21 (parallel [
            (set (reg:DI 1 dx [orig:183 D.6062 ] [183])
                (ashift:DI (reg:DI 0 ax [orig:182 D.6062 ] [182])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 497 {*ashldi3_1}
     (nil))
(insn 406 405 407 21 (set (reg/f:DI 0 ax [674])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 407 406 408 21 (parallel [
            (set (reg/f:DI 0 ax [orig:184 D.6064 ] [184])
                (plus:DI (reg/f:DI 0 ax [674])
                    (reg:DI 1 dx [orig:183 D.6062 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:183 D.6062 ] [183]))
        (nil)))
(insn 408 407 409 21 (set (reg/f:DI 0 ax [orig:185 D.6065 ] [185])
        (mem/f:DI (reg/f:DI 0 ax [orig:184 D.6064 ] [184]) [0 *_125+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 409 408 410 21 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b4a3dfc2d10 *.LC9>)) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 410 409 411 21 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:185 D.6065 ] [185])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn/i 411 410 412 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:106 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 412 411 413 21 (set (reg:SI 0 ax [orig:186 D.6066 ] [186])
        (reg:SI 0 ax)) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 413 412 414 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:186 D.6066 ] [186])
            (const_int 0 [0]))) com_line.cpp:106 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 414 413 415 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 558)
            (pc))) com_line.cpp:106 596 {*jcc_1}
     (nil)
 -> 558)
;;  succ:       22 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;;              20
;;              21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 675
(code_label 415 414 416 22 11 "" [2 uses])
(note 416 415 417 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 417 416 418 22 (set (reg:SI 0 ax [orig:675 found_extension ] [675])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5044 [0xffffffffffffec4c])) [0 found_extension+0 S4 A32])) com_line.cpp:110 90 {*movsi_internal}
     (nil))
(insn 418 417 419 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:675 found_extension ] [675])
            (const_int 0 [0]))) com_line.cpp:110 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 419 418 423 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 532)
            (pc))) com_line.cpp:110 596 {*jcc_1}
     (nil)
 -> 532)
;;  succ:       23 (FALLTHRU)
;;              39
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 187 676 677
(note 423 419 424 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 424 423 425 23 (set (reg/f:DI 0 ax [676])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:112 89 {*movdi_internal}
     (nil))
(insn 425 424 426 23 (parallel [
            (set (reg/f:DI 0 ax [orig:187 D.6067 ] [187])
                (plus:DI (reg/f:DI 0 ax [676])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:112 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 426 425 427 23 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b4a3dfc2da8 *.LC10>)) com_line.cpp:112 89 {*movdi_internal}
     (nil))
(insn 427 426 428 23 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:187 D.6067 ] [187])) com_line.cpp:112 89 {*movdi_internal}
     (nil))
(call_insn/i 428 427 429 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:112 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 429 428 430 23 (set (reg:DI 0 ax [677])
        (reg:DI 0 ax)) com_line.cpp:112 89 {*movdi_internal}
     (nil))
(insn 430 429 431 23 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [677])) com_line.cpp:112 89 {*movdi_internal}
     (nil))
(insn 431 430 432 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:113 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 432 431 433 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 436)
            (pc))) com_line.cpp:113 596 {*jcc_1}
     (nil)
 -> 436)
;;  succ:       24 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 433 432 1905 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1905 433 1906 24 (set (pc)
        (label_ref 532)) com_line.cpp:113 636 {jump}
     (nil)
 -> 532)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1906 1905 436)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 188 678 679
(code_label 436 1906 437 25 15 "" [1 uses])
(note 437 436 438 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 438 437 439 25 (set (reg/f:DI 0 ax [678])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:114 89 {*movdi_internal}
     (nil))
(insn 439 438 440 25 (parallel [
            (set (reg/f:DI 0 ax [orig:188 D.6067 ] [188])
                (plus:DI (reg/f:DI 0 ax [678])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:114 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 440 439 441 25 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b4a3dfc2e40 *.LC11>)) com_line.cpp:114 89 {*movdi_internal}
     (nil))
(insn 441 440 442 25 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:188 D.6067 ] [188])) com_line.cpp:114 89 {*movdi_internal}
     (nil))
(call_insn/i 442 441 443 25 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:114 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 443 442 444 25 (set (reg:DI 0 ax [679])
        (reg:DI 0 ax)) com_line.cpp:114 89 {*movdi_internal}
     (nil))
(insn 444 443 445 25 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [679])) com_line.cpp:114 89 {*movdi_internal}
     (nil))
(insn 445 444 446 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:115 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 446 445 447 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 450)
            (pc))) com_line.cpp:115 596 {*jcc_1}
     (nil)
 -> 450)
;;  succ:       26 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 447 446 1907 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1907 447 1908 26 (set (pc)
        (label_ref 532)) com_line.cpp:115 636 {jump}
     (nil)
 -> 532)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1908 1907 450)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 189 680 681
(code_label 450 1908 451 27 16 "" [1 uses])
(note 451 450 452 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 452 451 453 27 (set (reg/f:DI 0 ax [680])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:116 89 {*movdi_internal}
     (nil))
(insn 453 452 454 27 (parallel [
            (set (reg/f:DI 0 ax [orig:189 D.6067 ] [189])
                (plus:DI (reg/f:DI 0 ax [680])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:116 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 454 453 455 27 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b4a3dfc2ed8 *.LC12>)) com_line.cpp:116 89 {*movdi_internal}
     (nil))
(insn 455 454 456 27 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:189 D.6067 ] [189])) com_line.cpp:116 89 {*movdi_internal}
     (nil))
(call_insn/i 456 455 457 27 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:116 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 457 456 458 27 (set (reg:DI 0 ax [681])
        (reg:DI 0 ax)) com_line.cpp:116 89 {*movdi_internal}
     (nil))
(insn 458 457 459 27 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [681])) com_line.cpp:116 89 {*movdi_internal}
     (nil))
(insn 459 458 460 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:117 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 460 459 461 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 464)
            (pc))) com_line.cpp:117 596 {*jcc_1}
     (nil)
 -> 464)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 461 460 1909 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1909 461 1910 28 (set (pc)
        (label_ref 532)) com_line.cpp:117 636 {jump}
     (nil)
 -> 532)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1910 1909 464)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 190 682 683
(code_label 464 1910 465 29 17 "" [1 uses])
(note 465 464 466 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 466 465 467 29 (set (reg/f:DI 0 ax [682])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 467 466 468 29 (parallel [
            (set (reg/f:DI 0 ax [orig:190 D.6067 ] [190])
                (plus:DI (reg/f:DI 0 ax [682])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:118 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 468 467 469 29 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b4a3dfdf000 *.LC13>)) com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 469 468 470 29 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:190 D.6067 ] [190])) com_line.cpp:118 89 {*movdi_internal}
     (nil))
(call_insn/i 470 469 471 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:118 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 471 470 472 29 (set (reg:DI 0 ax [683])
        (reg:DI 0 ax)) com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 472 471 473 29 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [683])) com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 473 472 474 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:119 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 474 473 475 29 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 478)
            (pc))) com_line.cpp:119 596 {*jcc_1}
     (nil)
 -> 478)
;;  succ:       30 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 475 474 1911 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1911 475 1912 30 (set (pc)
        (label_ref 532)) com_line.cpp:119 636 {jump}
     (nil)
 -> 532)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1912 1911 478)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 191 684 685
(code_label 478 1912 479 31 18 "" [1 uses])
(note 479 478 480 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 480 479 481 31 (set (reg/f:DI 0 ax [684])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:120 89 {*movdi_internal}
     (nil))
(insn 481 480 482 31 (parallel [
            (set (reg/f:DI 0 ax [orig:191 D.6067 ] [191])
                (plus:DI (reg/f:DI 0 ax [684])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:120 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 482 481 483 31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x2b4a3dfdf098 *.LC14>)) com_line.cpp:120 89 {*movdi_internal}
     (nil))
(insn 483 482 484 31 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:191 D.6067 ] [191])) com_line.cpp:120 89 {*movdi_internal}
     (nil))
(call_insn/i 484 483 485 31 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:120 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 485 484 486 31 (set (reg:DI 0 ax [685])
        (reg:DI 0 ax)) com_line.cpp:120 89 {*movdi_internal}
     (nil))
(insn 486 485 487 31 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [685])) com_line.cpp:120 89 {*movdi_internal}
     (nil))
(insn 487 486 488 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:121 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 488 487 489 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 492)
            (pc))) com_line.cpp:121 596 {*jcc_1}
     (nil)
 -> 492)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 489 488 1913 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1913 489 1914 32 (set (pc)
        (label_ref 532)) com_line.cpp:121 636 {jump}
     (nil)
 -> 532)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1914 1913 492)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 192 686 687
(code_label 492 1914 493 33 19 "" [1 uses])
(note 493 492 494 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 494 493 495 33 (set (reg/f:DI 0 ax [686])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:122 89 {*movdi_internal}
     (nil))
(insn 495 494 496 33 (parallel [
            (set (reg/f:DI 0 ax [orig:192 D.6067 ] [192])
                (plus:DI (reg/f:DI 0 ax [686])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:122 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 496 495 497 33 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2b4a3dfdf130 *.LC15>)) com_line.cpp:122 89 {*movdi_internal}
     (nil))
(insn 497 496 498 33 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:192 D.6067 ] [192])) com_line.cpp:122 89 {*movdi_internal}
     (nil))
(call_insn/i 498 497 499 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:122 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 499 498 500 33 (set (reg:DI 0 ax [687])
        (reg:DI 0 ax)) com_line.cpp:122 89 {*movdi_internal}
     (nil))
(insn 500 499 501 33 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [687])) com_line.cpp:122 89 {*movdi_internal}
     (nil))
(insn 501 500 502 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:123 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 502 501 503 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 506)
            (pc))) com_line.cpp:123 596 {*jcc_1}
     (nil)
 -> 506)
;;  succ:       34 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 503 502 1915 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1915 503 1916 34 (set (pc)
        (label_ref 532)) com_line.cpp:123 636 {jump}
     (nil)
 -> 532)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1916 1915 506)
;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 193 688 689
(code_label 506 1916 507 35 20 "" [1 uses])
(note 507 506 508 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 508 507 509 35 (set (reg/f:DI 0 ax [688])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:124 89 {*movdi_internal}
     (nil))
(insn 509 508 510 35 (parallel [
            (set (reg/f:DI 0 ax [orig:193 D.6067 ] [193])
                (plus:DI (reg/f:DI 0 ax [688])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:124 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 510 509 511 35 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b4a3dfdf1c8 *.LC16>)) com_line.cpp:124 89 {*movdi_internal}
     (nil))
(insn 511 510 512 35 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:193 D.6067 ] [193])) com_line.cpp:124 89 {*movdi_internal}
     (nil))
(call_insn/i 512 511 513 35 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:124 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 513 512 514 35 (set (reg:DI 0 ax [689])
        (reg:DI 0 ax)) com_line.cpp:124 89 {*movdi_internal}
     (nil))
(insn 514 513 515 35 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [689])) com_line.cpp:124 89 {*movdi_internal}
     (nil))
(insn 515 514 516 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:125 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 516 515 517 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 520)
            (pc))) com_line.cpp:125 596 {*jcc_1}
     (nil)
 -> 520)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 517 516 1917 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1917 517 1918 36 (set (pc)
        (label_ref 532)) com_line.cpp:125 636 {jump}
     (nil)
 -> 532)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1918 1917 520)
;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 194 690 691
(code_label 520 1918 521 37 21 "" [1 uses])
(note 521 520 522 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 522 521 523 37 (set (reg/f:DI 0 ax [690])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:126 89 {*movdi_internal}
     (nil))
(insn 523 522 524 37 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.6067 ] [194])
                (plus:DI (reg/f:DI 0 ax [690])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:126 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 524 523 525 37 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b4a3dfdf260 *.LC17>)) com_line.cpp:126 89 {*movdi_internal}
     (nil))
(insn 525 524 526 37 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:194 D.6067 ] [194])) com_line.cpp:126 89 {*movdi_internal}
     (nil))
(call_insn/i 526 525 527 37 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:126 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 527 526 528 37 (set (reg:DI 0 ax [691])
        (reg:DI 0 ax)) com_line.cpp:126 89 {*movdi_internal}
     (nil))
(insn 528 527 529 37 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [691])) com_line.cpp:126 89 {*movdi_internal}
     (nil))
(insn 529 528 530 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:127 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 530 529 531 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 532)
            (pc))) com_line.cpp:127 596 {*jcc_1}
     (nil)
 -> 532)
;;  succ:       38 (FALLTHRU)
;;              39
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 128, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 531 530 1969 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
;;  succ:       128 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 128, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 39, flags: (NEW, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1969 531 1970 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(insn 1970 1969 532 128 (const_int 0 [0]) com_line.cpp:127 662 {nop}
     (nil))
;;  succ:       39 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 128, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;;              128 [100.0%]  (FALLTHRU)
;;              24 [100.0%] 
;;              26 [100.0%] 
;;              28 [100.0%] 
;;              30 [100.0%] 
;;              32 [100.0%] 
;;              34 [100.0%] 
;;              37
;;              36 [100.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 532 1970 533 39 13 "" [9 uses])
(note 533 532 534 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 534 533 535 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:129 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 535 534 536 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 552)
            (pc))) com_line.cpp:129 596 {*jcc_1}
     (nil)
 -> 552)
;;  succ:       40 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 195 196 197 692 693 694 695 696 697 698
(note 536 535 537 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 537 536 538 40 (set (reg/f:DI 0 ax [692])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 538 537 545 40 (parallel [
            (set (reg/f:DI 1 dx [orig:195 D.6067 ] [195])
                (plus:DI (reg/f:DI 0 ax [692])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:130 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 545 538 539 40 (set (reg:DI 0 ax [693])
        (reg/f:DI 1 dx [orig:195 D.6067 ] [195])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 539 545 540 40 (set (reg:DI 2 cx [697])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 540 539 541 40 (set (reg:DI 4 si [696])
        (reg:DI 0 ax [693])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 541 540 1983 40 (set (reg:QI 0 ax [698])
        (const_int 0 [0])) com_line.cpp:130 93 {*movqi_internal}
     (nil))
(insn 1983 541 542 40 (set (reg:DI 5 di [696])
        (reg:DI 4 si [696])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 542 1983 1982 40 (parallel [
            (set (reg:DI 2 cx [694])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [696]) [0  A8])
                        (reg:QI 0 ax [698])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [694])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [696]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:130 923 {*strlenqi_1}
     (nil))
(insn 1982 542 543 40 (set (reg:DI 0 ax [694])
        (reg:DI 2 cx [694])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 543 1982 544 40 (set (reg:DI 0 ax [695])
        (not:DI (reg:DI 0 ax [694]))) com_line.cpp:130 479 {*one_cmpldi2_1}
     (nil))
(insn 544 543 546 40 (parallel [
            (set (reg:DI 0 ax [orig:196 D.6062 ] [196])
                (plus:DI (reg:DI 0 ax [695])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:130 221 {*adddi_1}
     (nil))
(insn 546 544 547 40 (parallel [
            (set (reg/f:DI 0 ax [orig:197 D.6065 ] [197])
                (plus:DI (reg:DI 0 ax [orig:196 D.6062 ] [196])
                    (reg/f:DI 1 dx [orig:195 D.6067 ] [195])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:130 221 {*adddi_1}
     (nil))
(insn 547 546 548 40 (set (mem:SI (reg/f:DI 0 ax [orig:197 D.6065 ] [197]) [0 MEM[(void *)_146]+0 S4 A8])
        (const_int 1680765791 [0x642e735f])) com_line.cpp:130 90 {*movsi_internal}
     (nil))
(insn 548 547 549 40 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:197 D.6065 ] [197])
                (const_int 4 [0x4])) [0 MEM[(void *)_146]+4 S2 A8])
        (const_int 29793 [0x7461])) com_line.cpp:130 92 {*movhi_internal}
     (nil))
(insn 549 548 1919 40 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:197 D.6065 ] [197])
                (const_int 6 [0x6])) [0 MEM[(void *)_146]+6 S1 A8])
        (const_int 0 [0])) com_line.cpp:130 93 {*movqi_internal}
     (nil))
(jump_insn 1919 549 1920 40 (set (pc)
        (label_ref 558)) 636 {jump}
     (nil)
 -> 558)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1920 1919 552)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 699
(code_label 552 1920 553 41 22 "" [1 uses])
(note 553 552 554 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 554 553 555 41 (set (reg/f:DI 0 ax [699])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])) com_line.cpp:133 89 {*movdi_internal}
     (nil))
(insn 555 554 556 41 (set (mem:SI (reg/f:DI 0 ax [699]) [0 MEM[(void *)temp_extension_8]+0 S4 A8])
        (const_int 1680765791 [0x642e735f])) com_line.cpp:133 90 {*movsi_internal}
     (nil))
(insn 556 555 557 41 (set (mem:HI (plus:DI (reg/f:DI 0 ax [699])
                (const_int 4 [0x4])) [0 MEM[(void *)temp_extension_8]+4 S2 A8])
        (const_int 29793 [0x7461])) com_line.cpp:133 92 {*movhi_internal}
     (nil))
(insn 557 556 558 41 (set (mem:QI (plus:DI (reg/f:DI 0 ax [699])
                (const_int 6 [0x6])) [0 MEM[(void *)temp_extension_8]+6 S1 A8])
        (const_int 0 [0])) com_line.cpp:133 93 {*movqi_internal}
     (nil))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              41 (FALLTHRU)
;;              40 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 558 557 559 42 12 "" [2 uses])
(note 559 558 560 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 560 559 561 42 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:105 220 {*addsi_1}
     (nil))
;;  succ:       43 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU,DFS_BACK)
;;              18 [100.0%] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 700
(code_label 561 560 562 43 10 "" [1 uses])
(note 562 561 564 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 564 562 565 43 (set (reg:SI 0 ax [700])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:105 90 {*movsi_internal}
     (nil))
(insn 565 564 566 43 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [700])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5084 [0xffffffffffffec24])) [0 argc+0 S4 A32]))) com_line.cpp:105 7 {*cmpsi_1}
     (nil))
(jump_insn 566 565 567 43 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 563)
            (pc))) com_line.cpp:105 596 {*jcc_1}
     (nil)
 -> 563)
;;  succ:       19
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 198 199 200 701
(note 567 566 568 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 568 567 569 44 (set (reg/f:DI 0 ax [701])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:139 89 {*movdi_internal}
     (nil))
(insn 569 568 570 44 (parallel [
            (set (reg/f:DI 0 ax [orig:198 D.6067 ] [198])
                (plus:DI (reg/f:DI 0 ax [701])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:139 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 570 569 571 44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b4a3dfdf2f8 *.LC18>)) com_line.cpp:139 89 {*movdi_internal}
     (nil))
(insn 571 570 572 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:198 D.6067 ] [198])) com_line.cpp:139 89 {*movdi_internal}
     (nil))
(call_insn 572 571 573 44 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b4a3ddf7d00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:139 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 573 572 574 44 (set (reg/f:DI 0 ax [orig:199 D.6068 ] [199])
        (reg:DI 0 ax)) com_line.cpp:139 89 {*movdi_internal}
     (nil))
(insn 574 573 575 44 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:199 D.6068 ] [199])) com_line.cpp:139 89 {*movdi_internal}
     (nil))
(insn 575 574 576 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:139 4 {*cmpdi_ccno_1}
     (nil))
(insn 576 575 577 44 (set (reg:QI 0 ax [orig:200 D.6069 ] [200])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) com_line.cpp:139 592 {*setcc_qi}
     (nil))
(insn 577 576 578 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:200 D.6069 ] [200])
            (const_int 0 [0]))) com_line.cpp:139 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 578 577 579 44 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 634)
            (pc))) com_line.cpp:139 596 {*jcc_1}
     (nil)
 -> 634)
;;  succ:       45 (FALLTHRU)
;;              49
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 201 202 702 703
(note 579 578 580 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 581 45 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x2b4a3dfdf390 *.LC19>)) com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 581 580 582 45 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:141 93 {*movqi_internal}
     (nil))
(call_insn 582 581 583 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b4a3dc43e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:141 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 583 582 584 45 (set (reg/f:DI 0 ax [702])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:142 89 {*movdi_internal}
     (nil))
(insn 584 583 585 45 (parallel [
            (set (reg/f:DI 0 ax [orig:201 D.6067 ] [201])
                (plus:DI (reg/f:DI 0 ax [702])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:142 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 585 584 586 45 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:201 D.6067 ] [201])) com_line.cpp:142 89 {*movdi_internal}
     (nil))
(insn 586 585 587 45 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x2b4a3dfdf428 *.LC20>)) com_line.cpp:142 89 {*movdi_internal}
     (nil))
(insn 587 586 588 45 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:142 93 {*movqi_internal}
     (nil))
(call_insn 588 587 589 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b4a3dc43e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:142 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 589 588 590 45 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x2b4a3dfdf4c0 *.LC21>)) com_line.cpp:143 89 {*movdi_internal}
     (nil))
(insn 590 589 591 45 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:143 93 {*movqi_internal}
     (nil))
(call_insn 591 590 592 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b4a3dc43e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:143 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 592 591 593 45 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2b4a3dfdf558 *.LC22>)) com_line.cpp:144 89 {*movdi_internal}
     (nil))
(insn 593 592 594 45 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:144 93 {*movqi_internal}
     (nil))
(call_insn 594 593 595 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b4a3dc43e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:144 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 595 594 596 45 (parallel [
            (set (reg:DI 0 ax [703])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -5053 [0xffffffffffffec43])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:145 221 {*adddi_1}
     (nil))
(insn 596 595 597 45 (set (reg:DI 4 si)
        (reg:DI 0 ax [703])) com_line.cpp:145 89 {*movdi_internal}
     (nil))
(insn 597 596 598 45 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x2b4a3dfdf5f0 *.LC23>)) com_line.cpp:145 89 {*movdi_internal}
     (nil))
(insn 598 597 599 45 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:145 93 {*movqi_internal}
     (nil))
(call_insn 599 598 600 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("scanf") [flags 0x41]  <function_decl 0x2b4a3dc48000 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) com_line.cpp:145 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 600 599 601 45 (set (reg:DI 5 di)
        (const_int 0 [0])) com_line.cpp:146 89 {*movdi_internal}
     (nil))
(call_insn 601 600 602 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fflush") [flags 0x41]  <function_decl 0x2b4a3ddf7a00 fflush>) [0 fflush S1 A8])
            (const_int 0 [0]))) com_line.cpp:146 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 602 601 603 45 (set (reg:QI 0 ax [orig:202 D.6070 ] [202])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -5053 [0xffffffffffffec43])) [0 prompt+0 S1 A8])) com_line.cpp:147 93 {*movqi_internal}
     (nil))
(insn 603 602 604 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:202 D.6070 ] [202])
            (const_int 121 [0x79]))) com_line.cpp:147 5 {*cmpqi_1}
     (nil))
(jump_insn 604 603 605 45 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 609)
            (pc))) com_line.cpp:147 596 {*jcc_1}
     (nil)
 -> 609)
;;  succ:       47
;;              46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 203
(note 605 604 606 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 606 605 607 46 (set (reg:QI 0 ax [orig:203 D.6070 ] [203])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -5053 [0xffffffffffffec43])) [0 prompt+0 S1 A8])) com_line.cpp:147 93 {*movqi_internal}
     (nil))
(insn 607 606 608 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:203 D.6070 ] [203])
            (const_int 89 [0x59]))) com_line.cpp:147 5 {*cmpqi_1}
     (nil))
(jump_insn 608 607 609 46 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 618)
            (pc))) com_line.cpp:147 596 {*jcc_1}
     (nil)
 -> 618)
;;  succ:       47 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45
;;              46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 704
(code_label 609 608 610 47 25 "" [1 uses])
(note 610 609 611 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 611 610 612 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b4a3dfdf688 *.LC24>)) com_line.cpp:148 89 {*movdi_internal}
     (nil))
(call_insn 612 611 613 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:148 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 613 612 614 47 (set (reg:DI 0 ax [704])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])) com_line.cpp:155 89 {*movdi_internal}
     (nil))
(insn 614 613 615 47 (set (reg:DI 5 di)
        (reg:DI 0 ax [704])) com_line.cpp:155 89 {*movdi_internal}
     (nil))
(call_insn 615 614 1921 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b4a3ddf7900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) com_line.cpp:155 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1921 615 1922 47 (set (pc)
        (label_ref 634)) 636 {jump}
     (nil)
 -> 634)
;;  succ:       49 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1922 1921 618)
;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 204 705
(code_label 618 1922 619 48 26 "" [1 uses])
(note 619 618 620 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 620 619 621 48 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b4a3dfdf720 *.LC25>)) com_line.cpp:150 89 {*movdi_internal}
     (nil))
(insn 621 620 622 48 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:150 93 {*movqi_internal}
     (nil))
(call_insn 622 621 623 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b4a3dc43e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:150 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 623 622 624 48 (set (reg/f:DI 0 ax [705])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:151 89 {*movdi_internal}
     (nil))
(insn 624 623 625 48 (parallel [
            (set (reg/f:DI 0 ax [orig:204 D.6067 ] [204])
                (plus:DI (reg/f:DI 0 ax [705])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:151 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 625 624 626 48 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:204 D.6067 ] [204])) com_line.cpp:151 89 {*movdi_internal}
     (nil))
(insn 626 625 627 48 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x2b4a3dfdf7b8 *.LC26>)) com_line.cpp:151 89 {*movdi_internal}
     (nil))
(insn 627 626 628 48 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:151 93 {*movqi_internal}
     (nil))
(call_insn 628 627 629 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b4a3dc43e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:151 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 629 628 630 48 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2b4a3dfdf850 *.LC27>)) com_line.cpp:152 89 {*movdi_internal}
     (nil))
(call_insn 630 629 631 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:152 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 631 630 632 48 (set (reg:SI 5 di)
        (const_int 3 [0x3])) com_line.cpp:153 90 {*movsi_internal}
     (nil))
(call_insn 632 631 633 48 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4a3dc61900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:153 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 633 632 634)
;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;;              47 [100.0%] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 205 706
(code_label 634 633 635 49 24 "" [2 uses])
(note 635 634 636 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 636 635 637 49 (set (reg/f:DI 0 ax [706])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 637 636 638 49 (set (reg:SI 0 ax [orig:205 D.6066 ] [205])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [706])
                (const_int 56 [0x38])) [0 preprocess_16(D)->input_file_type+0 S4 A32])) com_line.cpp:160 90 {*movsi_internal}
     (nil))
(insn 638 637 639 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:205 D.6066 ] [205])
            (const_int 0 [0]))) com_line.cpp:160 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 639 638 640 49 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 688)
            (pc))) com_line.cpp:160 596 {*jcc_1}
     (nil)
 -> 688)
;;  succ:       50 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 206 207 208 209 210 211 212 213 214 707 708 709 710 711 712 713 714 715 716 717
(note 640 639 641 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 641 640 642 50 (set (reg/f:DI 0 ax [707])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 642 641 643 50 (parallel [
            (set (reg/f:DI 0 ax [orig:206 D.6064 ] [206])
                (plus:DI (reg/f:DI 0 ax [707])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:161 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 643 642 644 50 (set (reg/f:DI 0 ax [orig:207 D.6065 ] [207])
        (mem/f:DI (reg/f:DI 0 ax [orig:206 D.6064 ] [206]) [0 *_157+0 S8 A64])) com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 644 643 645 50 (set (reg/f:DI 1 dx [708])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 645 644 646 50 (parallel [
            (set (reg/f:DI 1 dx [orig:208 D.6067 ] [208])
                (plus:DI (reg/f:DI 1 dx [708])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:161 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 646 645 647 50 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:207 D.6065 ] [207])) com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 647 646 648 50 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:208 D.6067 ] [208])) com_line.cpp:161 89 {*movdi_internal}
     (nil))
(call_insn 648 647 649 50 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:161 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 649 648 650 50 (set (reg/f:DI 0 ax [709])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 650 649 657 50 (parallel [
            (set (reg/f:DI 1 dx [orig:209 D.6067 ] [209])
                (plus:DI (reg/f:DI 0 ax [709])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:165 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 657 650 651 50 (set (reg:DI 0 ax [710])
        (reg/f:DI 1 dx [orig:209 D.6067 ] [209])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 651 657 652 50 (set (reg:DI 2 cx [714])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 652 651 653 50 (set (reg:DI 4 si [713])
        (reg:DI 0 ax [710])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 653 652 1986 50 (set (reg:QI 0 ax [715])
        (const_int 0 [0])) com_line.cpp:165 93 {*movqi_internal}
     (nil))
(insn 1986 653 654 50 (set (reg:DI 5 di [713])
        (reg:DI 4 si [713])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 654 1986 1985 50 (parallel [
            (set (reg:DI 2 cx [711])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [713]) [0  A8])
                        (reg:QI 0 ax [715])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [711])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [713]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:165 923 {*strlenqi_1}
     (nil))
(insn 1985 654 655 50 (set (reg:DI 0 ax [711])
        (reg:DI 2 cx [711])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 655 1985 656 50 (set (reg:DI 0 ax [712])
        (not:DI (reg:DI 0 ax [711]))) com_line.cpp:165 479 {*one_cmpldi2_1}
     (nil))
(insn 656 655 658 50 (parallel [
            (set (reg:DI 0 ax [orig:210 D.6062 ] [210])
                (plus:DI (reg:DI 0 ax [712])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:165 221 {*adddi_1}
     (nil))
(insn 658 656 659 50 (parallel [
            (set (reg/f:DI 0 ax [orig:211 D.6065 ] [211])
                (plus:DI (reg:DI 0 ax [orig:210 D.6062 ] [210])
                    (reg/f:DI 1 dx [orig:209 D.6067 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:165 221 {*adddi_1}
     (nil))
(insn 659 658 1987 50 (set (reg:DI 3 bx [1011])
        (const_int 8241992365438562351 [0x726170636f72702f])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 1987 659 660 50 (set (mem:DI (reg/f:DI 0 ax [orig:211 D.6065 ] [211]) [0 MEM[(void *)_162]+0 S8 A8])
        (reg:DI 3 bx [1011])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 660 1987 661 50 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:211 D.6065 ] [211])
                (const_int 8 [0x8])) [0 MEM[(void *)_162]+8 S4 A8])
        (const_int 1954051118 [0x7478742e])) com_line.cpp:165 90 {*movsi_internal}
     (nil))
(insn 661 660 662 50 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:211 D.6065 ] [211])
                (const_int 12 [0xc])) [0 MEM[(void *)_162]+12 S1 A8])
        (const_int 0 [0])) com_line.cpp:165 93 {*movqi_internal}
     (nil))
(insn 662 661 663 50 (set (reg/f:DI 0 ax [716])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:168 89 {*movdi_internal}
     (nil))
(insn 663 662 664 50 (parallel [
            (set (reg/f:DI 0 ax [orig:212 D.6067 ] [212])
                (plus:DI (reg/f:DI 0 ax [716])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:168 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 664 663 665 50 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b4a3dfdf2f8 *.LC18>)) com_line.cpp:168 89 {*movdi_internal}
     (nil))
(insn 665 664 666 50 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:212 D.6067 ] [212])) com_line.cpp:168 89 {*movdi_internal}
     (nil))
(call_insn 666 665 667 50 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b4a3ddf7d00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:168 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 667 666 668 50 (set (reg/f:DI 0 ax [orig:213 D.6068 ] [213])
        (reg:DI 0 ax)) com_line.cpp:168 89 {*movdi_internal}
     (nil))
(insn 668 667 669 50 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:213 D.6068 ] [213])) com_line.cpp:168 89 {*movdi_internal}
     (nil))
(insn 669 668 670 50 (set (reg/f:DI 0 ax [717])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:171 89 {*movdi_internal}
     (nil))
(insn 670 669 671 50 (parallel [
            (set (reg/f:DI 0 ax [orig:214 D.6067 ] [214])
                (plus:DI (reg/f:DI 0 ax [717])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:171 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 671 670 672 50 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:214 D.6067 ] [214])) com_line.cpp:171 89 {*movdi_internal}
     (nil))
(insn 672 671 673 50 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x2b4a3dfdf8e8 *.LC28>)) com_line.cpp:171 89 {*movdi_internal}
     (nil))
(insn 673 672 674 50 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:171 93 {*movqi_internal}
     (nil))
(call_insn 674 673 675 50 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b4a3dc43e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:171 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 675 674 676 50 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:173 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 676 675 677 50 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 683)
            (pc))) com_line.cpp:173 596 {*jcc_1}
     (nil)
 -> 683)
;;  succ:       51 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 677 676 678 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 678 677 679 51 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x2b4a3dfdf980 *.LC29>)) com_line.cpp:174 89 {*movdi_internal}
     (nil))
(call_insn 679 678 680 51 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:174 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 680 679 681 51 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:175 90 {*movsi_internal}
     (nil))
(call_insn 681 680 682 51 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4a3dc61900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:175 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 682 681 683)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 718
(code_label 683 682 684 52 28 "" [1 uses])
(note 684 683 685 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 685 684 686 52 (set (reg:DI 0 ax [718])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])) com_line.cpp:177 89 {*movdi_internal}
     (nil))
(insn 686 685 687 52 (set (reg:DI 5 di)
        (reg:DI 0 ax [718])) com_line.cpp:177 89 {*movdi_internal}
     (nil))
(call_insn 687 686 688 52 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b4a3ddf7900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) com_line.cpp:177 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       53 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;;              52 (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 719
(code_label 688 687 689 53 27 "" [1 uses])
(note 689 688 690 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 690 689 691 53 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
        (const_int 2 [0x2])) com_line.cpp:182 90 {*movsi_internal}
     (nil))
(insn 691 690 692 53 (set (reg/f:DI 0 ax [719])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:183 89 {*movdi_internal}
     (nil))
(insn 692 691 1923 53 (set (mem:SI (reg/f:DI 0 ax [719]) [0 *fid_168(D)+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:183 90 {*movsi_internal}
     (nil))
(jump_insn 1923 692 1924 53 (set (pc)
        (label_ref 1874)) com_line.cpp:185 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1924 1923 1878)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       124
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 216 217 218 219 220 720 721
(code_label 1878 1924 695 54 64 "" [1 uses])
(note 695 1878 696 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 696 695 697 54 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:187 220 {*addsi_1}
     (nil))
(insn 697 696 698 54 (set (reg:SI 0 ax [720])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:189 90 {*movsi_internal}
     (nil))
(insn 698 697 699 54 (set (reg:DI 0 ax [orig:216 D.6062 ] [216])
        (sign_extend:DI (reg:SI 0 ax [720]))) com_line.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 699 698 700 54 (parallel [
            (set (reg:DI 1 dx [orig:217 D.6062 ] [217])
                (ashift:DI (reg:DI 0 ax [orig:216 D.6062 ] [216])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:189 497 {*ashldi3_1}
     (nil))
(insn 700 699 701 54 (set (reg/f:DI 0 ax [721])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:189 89 {*movdi_internal}
     (nil))
(insn 701 700 702 54 (parallel [
            (set (reg/f:DI 0 ax [orig:218 D.6064 ] [218])
                (plus:DI (reg/f:DI 0 ax [721])
                    (reg:DI 1 dx [orig:217 D.6062 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:189 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:217 D.6062 ] [217]))
        (nil)))
(insn 702 701 703 54 (set (reg/f:DI 0 ax [orig:219 D.6065 ] [219])
        (mem/f:DI (reg/f:DI 0 ax [orig:218 D.6064 ] [218]) [0 *_173+0 S8 A64])) com_line.cpp:189 89 {*movdi_internal}
     (nil))
(insn 703 702 704 54 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b4a3dfc2be0 *.LC7>)) com_line.cpp:189 89 {*movdi_internal}
     (nil))
(insn 704 703 705 54 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:219 D.6065 ] [219])) com_line.cpp:189 89 {*movdi_internal}
     (nil))
(call_insn/i 705 704 706 54 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:189 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 706 705 707 54 (set (reg:SI 0 ax [orig:220 D.6066 ] [220])
        (reg:SI 0 ax)) com_line.cpp:189 90 {*movsi_internal}
     (nil))
(insn 707 706 708 54 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:220 D.6066 ] [220])
            (const_int 0 [0]))) com_line.cpp:189 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 708 707 709 54 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 735)
            (pc))) com_line.cpp:189 596 {*jcc_1}
     (nil)
 -> 735)
;;  succ:       57
;;              55 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 221 222 223 224 225 722 723
(note 709 708 710 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 710 709 711 55 (set (reg:SI 0 ax [722])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:190 90 {*movsi_internal}
     (nil))
(insn 711 710 712 55 (set (reg:DI 0 ax [orig:221 D.6062 ] [221])
        (sign_extend:DI (reg:SI 0 ax [722]))) com_line.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 712 711 713 55 (parallel [
            (set (reg:DI 1 dx [orig:222 D.6062 ] [222])
                (ashift:DI (reg:DI 0 ax [orig:221 D.6062 ] [221])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:190 497 {*ashldi3_1}
     (nil))
(insn 713 712 714 55 (set (reg/f:DI 0 ax [723])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:190 89 {*movdi_internal}
     (nil))
(insn 714 713 715 55 (parallel [
            (set (reg/f:DI 0 ax [orig:223 D.6064 ] [223])
                (plus:DI (reg/f:DI 0 ax [723])
                    (reg:DI 1 dx [orig:222 D.6062 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:190 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:222 D.6062 ] [222]))
        (nil)))
(insn 715 714 716 55 (set (reg/f:DI 0 ax [orig:224 D.6065 ] [224])
        (mem/f:DI (reg/f:DI 0 ax [orig:223 D.6064 ] [223]) [0 *_178+0 S8 A64])) com_line.cpp:190 89 {*movdi_internal}
     (nil))
(insn 716 715 717 55 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b4a3dfc2c78 *.LC8>)) com_line.cpp:190 89 {*movdi_internal}
     (nil))
(insn 717 716 718 55 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:224 D.6065 ] [224])) com_line.cpp:190 89 {*movdi_internal}
     (nil))
(call_insn/i 718 717 719 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:190 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 719 718 720 55 (set (reg:SI 0 ax [orig:225 D.6066 ] [225])
        (reg:SI 0 ax)) com_line.cpp:190 90 {*movsi_internal}
     (nil))
(insn 720 719 721 55 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:225 D.6066 ] [225])
            (const_int 0 [0]))) com_line.cpp:189 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 721 720 722 55 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 735)
            (pc))) com_line.cpp:189 596 {*jcc_1}
     (nil)
 -> 735)
;;  succ:       57
;;              56 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55 (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 226 227 228 229 230 724 725
(note 722 721 723 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 723 722 724 56 (set (reg:SI 0 ax [724])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:191 90 {*movsi_internal}
     (nil))
(insn 724 723 725 56 (set (reg:DI 0 ax [orig:226 D.6062 ] [226])
        (sign_extend:DI (reg:SI 0 ax [724]))) com_line.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 725 724 726 56 (parallel [
            (set (reg:DI 1 dx [orig:227 D.6062 ] [227])
                (ashift:DI (reg:DI 0 ax [orig:226 D.6062 ] [226])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:191 497 {*ashldi3_1}
     (nil))
(insn 726 725 727 56 (set (reg/f:DI 0 ax [725])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:191 89 {*movdi_internal}
     (nil))
(insn 727 726 728 56 (parallel [
            (set (reg/f:DI 0 ax [orig:228 D.6064 ] [228])
                (plus:DI (reg/f:DI 0 ax [725])
                    (reg:DI 1 dx [orig:227 D.6062 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:191 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:227 D.6062 ] [227]))
        (nil)))
(insn 728 727 729 56 (set (reg/f:DI 0 ax [orig:229 D.6065 ] [229])
        (mem/f:DI (reg/f:DI 0 ax [orig:228 D.6064 ] [228]) [0 *_183+0 S8 A64])) com_line.cpp:191 89 {*movdi_internal}
     (nil))
(insn 729 728 730 56 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b4a3dfc2d10 *.LC9>)) com_line.cpp:191 89 {*movdi_internal}
     (nil))
(insn 730 729 731 56 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:229 D.6065 ] [229])) com_line.cpp:191 89 {*movdi_internal}
     (nil))
(call_insn/i 731 730 732 56 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:191 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 732 731 733 56 (set (reg:SI 0 ax [orig:230 D.6066 ] [230])
        (reg:SI 0 ax)) com_line.cpp:191 90 {*movsi_internal}
     (nil))
(insn 733 732 734 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:230 D.6066 ] [230])
            (const_int 0 [0]))) com_line.cpp:190 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 734 733 735 56 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1387)
            (pc))) com_line.cpp:190 596 {*jcc_1}
     (nil)
 -> 1387)
;;  succ:       57 (FALLTHRU)
;;              93
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54
;;              55
;;              56 (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 382 383 384 385 386 726 727
(code_label 735 734 736 57 30 "" [2 uses])
(note 736 735 737 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 737 736 738 57 (set (reg:SI 0 ax [726])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:193 90 {*movsi_internal}
     (nil))
(insn 738 737 739 57 (set (reg:DI 0 ax [orig:382 D.6062 ] [382])
        (sign_extend:DI (reg:SI 0 ax [726]))) com_line.cpp:193 142 {*extendsidi2_rex64}
     (nil))
(insn 739 738 740 57 (parallel [
            (set (reg:DI 1 dx [orig:383 D.6062 ] [383])
                (ashift:DI (reg:DI 0 ax [orig:382 D.6062 ] [382])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:193 497 {*ashldi3_1}
     (nil))
(insn 740 739 741 57 (set (reg/f:DI 0 ax [727])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:193 89 {*movdi_internal}
     (nil))
(insn 741 740 742 57 (parallel [
            (set (reg/f:DI 0 ax [orig:384 D.6064 ] [384])
                (plus:DI (reg/f:DI 0 ax [727])
                    (reg:DI 1 dx [orig:383 D.6062 ] [383])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:193 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:383 D.6062 ] [383]))
        (nil)))
(insn 742 741 743 57 (set (reg/f:DI 0 ax [orig:385 D.6065 ] [385])
        (mem/f:DI (reg/f:DI 0 ax [orig:384 D.6064 ] [384]) [0 *_343+0 S8 A64])) com_line.cpp:193 89 {*movdi_internal}
     (nil))
(insn 743 742 744 57 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b4a3dfc2be0 *.LC7>)) com_line.cpp:193 89 {*movdi_internal}
     (nil))
(insn 744 743 745 57 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:385 D.6065 ] [385])) com_line.cpp:193 89 {*movdi_internal}
     (nil))
(call_insn/i 745 744 746 57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:193 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 746 745 747 57 (set (reg:SI 0 ax [orig:386 D.6066 ] [386])
        (reg:SI 0 ax)) com_line.cpp:193 90 {*movsi_internal}
     (nil))
(insn 747 746 748 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:386 D.6066 ] [386])
            (const_int 0 [0]))) com_line.cpp:193 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 748 747 749 57 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 831)
            (pc))) com_line.cpp:193 596 {*jcc_1}
     (nil)
 -> 831)
;;  succ:       58 (FALLTHRU)
;;              60
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750
(note 749 748 750 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 750 749 751 58 (set (reg/f:DI 0 ax [728])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 751 750 752 58 (set (reg:SI 0 ax [orig:387 D.6066 ] [387])
        (mem:SI (reg/f:DI 0 ax [728]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:194 90 {*movsi_internal}
     (nil))
(insn 752 751 753 58 (set (reg:DI 1 dx [orig:388 D.6062 ] [388])
        (sign_extend:DI (reg:SI 0 ax [orig:387 D.6066 ] [387]))) com_line.cpp:194 142 {*extendsidi2_rex64}
     (nil))
(insn 753 752 754 58 (set (reg:DI 0 ax [729])
        (reg:DI 1 dx [orig:388 D.6062 ] [388])) com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 754 753 755 58 (parallel [
            (set (reg:DI 0 ax [729])
                (ashift:DI (reg:DI 0 ax [729])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:194 497 {*ashldi3_1}
     (nil))
(insn 755 754 756 58 (parallel [
            (set (reg:DI 0 ax [729])
                (plus:DI (reg:DI 0 ax [729])
                    (reg:DI 1 dx [orig:388 D.6062 ] [388])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:194 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:388 D.6062 ] [388])
            (const_int 9 [0x9]))
        (nil)))
(insn 756 755 757 58 (parallel [
            (set (reg:DI 0 ax [730])
                (ashift:DI (reg:DI 0 ax [729])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:194 497 {*ashldi3_1}
     (nil))
(insn 757 756 758 58 (set (reg:DI 0 ax [729])
        (reg:DI 0 ax [730])) com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 758 757 759 58 (set (reg:DI 1 dx [orig:389 D.6062 ] [389])
        (reg:DI 0 ax [729])) com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 759 758 760 58 (set (reg/f:DI 0 ax [731])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 760 759 761 58 (parallel [
            (set (reg/f:DI 0 ax [orig:390 D.6063 ] [390])
                (plus:DI (reg/f:DI 0 ax [731])
                    (reg:DI 1 dx [orig:389 D.6062 ] [389])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:194 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:389 D.6062 ] [389]))
        (nil)))
(insn 761 760 762 58 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:390 D.6063 ] [390])
                (const_int 12 [0xc])) [0 _349->pre_ecc+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:194 90 {*movsi_internal}
     (nil))
(insn 762 761 763 58 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:195 220 {*addsi_1}
     (nil))
(insn 763 762 764 58 (set (reg/f:DI 0 ax [732])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:196 89 {*movdi_internal}
     (nil))
(insn 764 763 765 58 (set (reg:SI 0 ax [orig:391 D.6066 ] [391])
        (mem:SI (reg/f:DI 0 ax [732]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:196 90 {*movsi_internal}
     (nil))
(insn 765 764 766 58 (set (reg:DI 1 dx [orig:392 D.6062 ] [392])
        (sign_extend:DI (reg:SI 0 ax [orig:391 D.6066 ] [391]))) com_line.cpp:196 142 {*extendsidi2_rex64}
     (nil))
(insn 766 765 767 58 (set (reg:DI 0 ax [733])
        (reg:DI 1 dx [orig:392 D.6062 ] [392])) com_line.cpp:196 89 {*movdi_internal}
     (nil))
(insn 767 766 768 58 (parallel [
            (set (reg:DI 0 ax [733])
                (ashift:DI (reg:DI 0 ax [733])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:196 497 {*ashldi3_1}
     (nil))
(insn 768 767 769 58 (parallel [
            (set (reg:DI 0 ax [733])
                (plus:DI (reg:DI 0 ax [733])
                    (reg:DI 1 dx [orig:392 D.6062 ] [392])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:196 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:392 D.6062 ] [392])
            (const_int 9 [0x9]))
        (nil)))
(insn 769 768 770 58 (parallel [
            (set (reg:DI 0 ax [734])
                (ashift:DI (reg:DI 0 ax [733])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:196 497 {*ashldi3_1}
     (nil))
(insn 770 769 771 58 (set (reg:DI 0 ax [733])
        (reg:DI 0 ax [734])) com_line.cpp:196 89 {*movdi_internal}
     (nil))
(insn 771 770 772 58 (set (reg:DI 1 dx [orig:393 D.6062 ] [393])
        (reg:DI 0 ax [733])) com_line.cpp:196 89 {*movdi_internal}
     (nil))
(insn 772 771 773 58 (set (reg/f:DI 0 ax [735])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:196 89 {*movdi_internal}
     (nil))
(insn 773 772 774 58 (parallel [
            (set (reg/f:DI 1 dx [orig:394 D.6063 ] [394])
                (plus:DI (reg:DI 1 dx [orig:393 D.6062 ] [393])
                    (reg/f:DI 0 ax [735])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:196 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:393 D.6062 ] [393]))
        (nil)))
(insn 774 773 775 58 (set (reg:SI 0 ax [736])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:196 90 {*movsi_internal}
     (nil))
(insn 775 774 776 58 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:394 D.6063 ] [394])
                (const_int 60 [0x3c])) [0 _354->ref_file_argument+0 S4 A32])
        (reg:SI 0 ax [736])) com_line.cpp:196 90 {*movsi_internal}
     (nil))
(insn 776 775 777 58 (set (reg/f:DI 0 ax [737])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:197 89 {*movdi_internal}
     (nil))
(insn 777 776 778 58 (set (mem:SI (reg/f:DI 0 ax [737]) [0 *fid_168(D)+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:197 90 {*movsi_internal}
     (nil))
(insn 778 777 779 58 (set (reg/f:DI 0 ax [738])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:198 89 {*movdi_internal}
     (nil))
(insn 779 778 780 58 (set (reg:SI 0 ax [orig:395 D.6066 ] [395])
        (mem:SI (reg/f:DI 0 ax [738]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:198 90 {*movsi_internal}
     (nil))
(insn 780 779 781 58 (set (reg:DI 1 dx [orig:396 D.6062 ] [396])
        (sign_extend:DI (reg:SI 0 ax [orig:395 D.6066 ] [395]))) com_line.cpp:198 142 {*extendsidi2_rex64}
     (nil))
(insn 781 780 782 58 (set (reg:DI 0 ax [739])
        (reg:DI 1 dx [orig:396 D.6062 ] [396])) com_line.cpp:198 89 {*movdi_internal}
     (nil))
(insn 782 781 783 58 (parallel [
            (set (reg:DI 0 ax [739])
                (ashift:DI (reg:DI 0 ax [739])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:198 497 {*ashldi3_1}
     (nil))
(insn 783 782 784 58 (parallel [
            (set (reg:DI 0 ax [739])
                (plus:DI (reg:DI 0 ax [739])
                    (reg:DI 1 dx [orig:396 D.6062 ] [396])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:198 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:396 D.6062 ] [396])
            (const_int 9 [0x9]))
        (nil)))
(insn 784 783 785 58 (parallel [
            (set (reg:DI 0 ax [740])
                (ashift:DI (reg:DI 0 ax [739])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:198 497 {*ashldi3_1}
     (nil))
(insn 785 784 786 58 (set (reg:DI 0 ax [739])
        (reg:DI 0 ax [740])) com_line.cpp:198 89 {*movdi_internal}
     (nil))
(insn 786 785 787 58 (set (reg:DI 1 dx [orig:397 D.6062 ] [397])
        (reg:DI 0 ax [739])) com_line.cpp:198 89 {*movdi_internal}
     (nil))
(insn 787 786 788 58 (set (reg/f:DI 0 ax [741])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:198 89 {*movdi_internal}
     (nil))
(insn 788 787 789 58 (parallel [
            (set (reg/f:DI 1 dx [orig:398 D.6063 ] [398])
                (plus:DI (reg:DI 1 dx [orig:397 D.6062 ] [397])
                    (reg/f:DI 0 ax [741])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:198 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:397 D.6062 ] [397]))
        (nil)))
(insn 789 788 790 58 (set (reg:SI 0 ax [742])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:198 90 {*movsi_internal}
     (nil))
(insn 790 789 791 58 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:398 D.6063 ] [398])
                (const_int 60 [0x3c])) [0 _358->ref_file_argument+0 S4 A32])
        (reg:SI 0 ax [742])) com_line.cpp:198 90 {*movsi_internal}
     (nil))
(insn 791 790 792 58 (set (reg/f:DI 0 ax [743])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 792 791 793 58 (set (reg:SI 0 ax [orig:399 D.6066 ] [399])
        (mem:SI (reg/f:DI 0 ax [743]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:199 90 {*movsi_internal}
     (nil))
(insn 793 792 794 58 (set (reg:DI 1 dx [orig:400 D.6062 ] [400])
        (sign_extend:DI (reg:SI 0 ax [orig:399 D.6066 ] [399]))) com_line.cpp:199 142 {*extendsidi2_rex64}
     (nil))
(insn 794 793 795 58 (set (reg:DI 0 ax [744])
        (reg:DI 1 dx [orig:400 D.6062 ] [400])) com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 795 794 796 58 (parallel [
            (set (reg:DI 0 ax [744])
                (ashift:DI (reg:DI 0 ax [744])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:199 497 {*ashldi3_1}
     (nil))
(insn 796 795 797 58 (parallel [
            (set (reg:DI 0 ax [744])
                (plus:DI (reg:DI 0 ax [744])
                    (reg:DI 1 dx [orig:400 D.6062 ] [400])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:199 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:400 D.6062 ] [400])
            (const_int 9 [0x9]))
        (nil)))
(insn 797 796 798 58 (parallel [
            (set (reg:DI 0 ax [745])
                (ashift:DI (reg:DI 0 ax [744])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:199 497 {*ashldi3_1}
     (nil))
(insn 798 797 799 58 (set (reg:DI 0 ax [744])
        (reg:DI 0 ax [745])) com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 799 798 800 58 (set (reg:DI 1 dx [orig:401 D.6062 ] [401])
        (reg:DI 0 ax [744])) com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 800 799 801 58 (set (reg/f:DI 0 ax [746])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 801 800 802 58 (parallel [
            (set (reg/f:DI 0 ax [orig:402 D.6063 ] [402])
                (plus:DI (reg/f:DI 0 ax [746])
                    (reg:DI 1 dx [orig:401 D.6062 ] [401])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:199 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:401 D.6062 ] [401]))
        (nil)))
(insn 802 801 803 58 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:402 D.6063 ] [402])
                (const_int 12 [0xc])) [0 _362->pre_ecc+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:199 90 {*movsi_internal}
     (nil))
(insn 803 802 804 58 (set (reg:SI 0 ax [747])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:200 90 {*movsi_internal}
     (nil))
(insn 804 803 805 58 (set (reg:DI 0 ax [orig:403 D.6062 ] [403])
        (sign_extend:DI (reg:SI 0 ax [747]))) com_line.cpp:200 142 {*extendsidi2_rex64}
     (nil))
(insn 805 804 806 58 (parallel [
            (set (reg:DI 1 dx [orig:404 D.6062 ] [404])
                (ashift:DI (reg:DI 0 ax [orig:403 D.6062 ] [403])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:200 497 {*ashldi3_1}
     (nil))
(insn 806 805 807 58 (set (reg/f:DI 0 ax [748])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:200 89 {*movdi_internal}
     (nil))
(insn 807 806 808 58 (parallel [
            (set (reg/f:DI 0 ax [orig:405 D.6064 ] [405])
                (plus:DI (reg/f:DI 0 ax [748])
                    (reg:DI 1 dx [orig:404 D.6062 ] [404])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:200 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:404 D.6062 ] [404]))
        (nil)))
(insn 808 807 809 58 (set (reg/f:DI 0 ax [orig:406 D.6065 ] [406])
        (mem/f:DI (reg/f:DI 0 ax [orig:405 D.6064 ] [405]) [0 *_365+0 S8 A64])) com_line.cpp:200 89 {*movdi_internal}
     (nil))
(insn 809 808 810 58 (set (reg/f:DI 1 dx [749])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:200 89 {*movdi_internal}
     (nil))
(insn 810 809 811 58 (parallel [
            (set (reg/f:DI 1 dx [orig:407 D.6067 ] [407])
                (plus:DI (reg/f:DI 1 dx [749])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:200 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 811 810 812 58 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:406 D.6065 ] [406])) com_line.cpp:200 89 {*movdi_internal}
     (nil))
(insn 812 811 813 58 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:407 D.6067 ] [407])) com_line.cpp:200 89 {*movdi_internal}
     (nil))
(call_insn 813 812 814 58 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:200 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 814 813 815 58 (set (reg/f:DI 0 ax [750])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:201 89 {*movdi_internal}
     (nil))
(insn 815 814 816 58 (set (reg:SI 0 ax [orig:408 D.6066 ] [408])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [750])
                (const_int 56 [0x38])) [0 preprocess_16(D)->input_file_type+0 S4 A32])) com_line.cpp:201 90 {*movsi_internal}
     (nil))
(insn 816 815 817 58 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:408 D.6066 ] [408])
            (const_int 0 [0]))) com_line.cpp:201 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 817 816 818 58 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 831)
            (pc))) com_line.cpp:201 596 {*jcc_1}
     (nil)
 -> 831)
;;  succ:       59 (FALLTHRU)
;;              60
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       58 (FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 409 410 411 751 752 753 754 755 756 757
(note 818 817 819 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 819 818 820 59 (set (reg/f:DI 0 ax [751])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 820 819 827 59 (parallel [
            (set (reg/f:DI 1 dx [orig:409 D.6067 ] [409])
                (plus:DI (reg/f:DI 0 ax [751])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:202 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 827 820 821 59 (set (reg:DI 0 ax [752])
        (reg/f:DI 1 dx [orig:409 D.6067 ] [409])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 821 827 822 59 (set (reg:DI 2 cx [756])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 822 821 823 59 (set (reg:DI 4 si [755])
        (reg:DI 0 ax [752])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 823 822 1990 59 (set (reg:QI 0 ax [757])
        (const_int 0 [0])) com_line.cpp:202 93 {*movqi_internal}
     (nil))
(insn 1990 823 824 59 (set (reg:DI 5 di [755])
        (reg:DI 4 si [755])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 824 1990 1989 59 (parallel [
            (set (reg:DI 2 cx [753])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [755]) [0  A8])
                        (reg:QI 0 ax [757])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [753])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [755]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:202 923 {*strlenqi_1}
     (nil))
(insn 1989 824 825 59 (set (reg:DI 0 ax [753])
        (reg:DI 2 cx [753])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 825 1989 826 59 (set (reg:DI 0 ax [754])
        (not:DI (reg:DI 0 ax [753]))) com_line.cpp:202 479 {*one_cmpldi2_1}
     (nil))
(insn 826 825 828 59 (parallel [
            (set (reg:DI 0 ax [orig:410 D.6062 ] [410])
                (plus:DI (reg:DI 0 ax [754])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:202 221 {*adddi_1}
     (nil))
(insn 828 826 829 59 (parallel [
            (set (reg/f:DI 0 ax [orig:411 D.6065 ] [411])
                (plus:DI (reg:DI 0 ax [orig:410 D.6062 ] [410])
                    (reg/f:DI 1 dx [orig:409 D.6067 ] [409])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:202 221 {*adddi_1}
     (nil))
(insn 829 828 830 59 (set (mem:SI (reg/f:DI 0 ax [orig:411 D.6065 ] [411]) [0 MEM[(void *)_371]+0 S4 A8])
        (const_int 1684629039 [0x6469662f])) com_line.cpp:202 90 {*movsi_internal}
     (nil))
(insn 830 829 831 59 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:411 D.6065 ] [411])
                (const_int 4 [0x4])) [0 MEM[(void *)_371]+4 S1 A8])
        (const_int 0 [0])) com_line.cpp:202 93 {*movqi_internal}
     (nil))
;;  succ:       60 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57
;;              59 (FALLTHRU)
;;              58
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 412 413 414 415 416 758 759
(code_label 831 830 832 60 32 "" [2 uses])
(note 832 831 833 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 833 832 834 60 (set (reg:SI 0 ax [758])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:205 90 {*movsi_internal}
     (nil))
(insn 834 833 835 60 (set (reg:DI 0 ax [orig:412 D.6062 ] [412])
        (sign_extend:DI (reg:SI 0 ax [758]))) com_line.cpp:205 142 {*extendsidi2_rex64}
     (nil))
(insn 835 834 836 60 (parallel [
            (set (reg:DI 1 dx [orig:413 D.6062 ] [413])
                (ashift:DI (reg:DI 0 ax [orig:412 D.6062 ] [412])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:205 497 {*ashldi3_1}
     (nil))
(insn 836 835 837 60 (set (reg/f:DI 0 ax [759])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:205 89 {*movdi_internal}
     (nil))
(insn 837 836 838 60 (parallel [
            (set (reg/f:DI 0 ax [orig:414 D.6064 ] [414])
                (plus:DI (reg/f:DI 0 ax [759])
                    (reg:DI 1 dx [orig:413 D.6062 ] [413])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:205 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:413 D.6062 ] [413]))
        (nil)))
(insn 838 837 839 60 (set (reg/f:DI 0 ax [orig:415 D.6065 ] [415])
        (mem/f:DI (reg/f:DI 0 ax [orig:414 D.6064 ] [414]) [0 *_374+0 S8 A64])) com_line.cpp:205 89 {*movdi_internal}
     (nil))
(insn 839 838 840 60 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b4a3dfc2c78 *.LC8>)) com_line.cpp:205 89 {*movdi_internal}
     (nil))
(insn 840 839 841 60 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:415 D.6065 ] [415])) com_line.cpp:205 89 {*movdi_internal}
     (nil))
(call_insn/i 841 840 842 60 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:205 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 842 841 843 60 (set (reg:SI 0 ax [orig:416 D.6066 ] [416])
        (reg:SI 0 ax)) com_line.cpp:205 90 {*movsi_internal}
     (nil))
(insn 843 842 844 60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:416 D.6066 ] [416])
            (const_int 0 [0]))) com_line.cpp:205 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 844 843 845 60 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 973)
            (pc))) com_line.cpp:205 596 {*jcc_1}
     (nil)
 -> 973)
;;  succ:       61 (FALLTHRU)
;;              63
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794
(note 845 844 846 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 846 845 847 61 (set (reg/f:DI 0 ax [760])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:206 89 {*movdi_internal}
     (nil))
(insn 847 846 848 61 (set (reg:SI 0 ax [orig:417 D.6066 ] [417])
        (mem:SI (reg/f:DI 0 ax [760]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:206 90 {*movsi_internal}
     (nil))
(insn 848 847 849 61 (set (reg:DI 1 dx [orig:418 D.6062 ] [418])
        (sign_extend:DI (reg:SI 0 ax [orig:417 D.6066 ] [417]))) com_line.cpp:206 142 {*extendsidi2_rex64}
     (nil))
(insn 849 848 850 61 (set (reg:DI 0 ax [761])
        (reg:DI 1 dx [orig:418 D.6062 ] [418])) com_line.cpp:206 89 {*movdi_internal}
     (nil))
(insn 850 849 851 61 (parallel [
            (set (reg:DI 0 ax [761])
                (ashift:DI (reg:DI 0 ax [761])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:206 497 {*ashldi3_1}
     (nil))
(insn 851 850 852 61 (parallel [
            (set (reg:DI 0 ax [761])
                (plus:DI (reg:DI 0 ax [761])
                    (reg:DI 1 dx [orig:418 D.6062 ] [418])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:206 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:418 D.6062 ] [418])
            (const_int 9 [0x9]))
        (nil)))
(insn 852 851 853 61 (parallel [
            (set (reg:DI 0 ax [762])
                (ashift:DI (reg:DI 0 ax [761])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:206 497 {*ashldi3_1}
     (nil))
(insn 853 852 854 61 (set (reg:DI 0 ax [761])
        (reg:DI 0 ax [762])) com_line.cpp:206 89 {*movdi_internal}
     (nil))
(insn 854 853 855 61 (set (reg:DI 1 dx [orig:419 D.6062 ] [419])
        (reg:DI 0 ax [761])) com_line.cpp:206 89 {*movdi_internal}
     (nil))
(insn 855 854 856 61 (set (reg/f:DI 0 ax [763])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:206 89 {*movdi_internal}
     (nil))
(insn 856 855 857 61 (parallel [
            (set (reg/f:DI 0 ax [orig:420 D.6063 ] [420])
                (plus:DI (reg/f:DI 0 ax [763])
                    (reg:DI 1 dx [orig:419 D.6062 ] [419])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:206 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:419 D.6062 ] [419]))
        (nil)))
(insn 857 856 858 61 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:420 D.6063 ] [420])
                (const_int 36 [0x24])) [0 _380->pre_quality+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:206 90 {*movsi_internal}
     (nil))
(insn 858 857 859 61 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:207 220 {*addsi_1}
     (nil))
(insn 859 858 860 61 (set (reg/f:DI 0 ax [764])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 860 859 861 61 (set (reg:SI 0 ax [orig:421 D.6066 ] [421])
        (mem:SI (reg/f:DI 0 ax [764]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:208 90 {*movsi_internal}
     (nil))
(insn 861 860 862 61 (set (reg:DI 1 dx [orig:422 D.6062 ] [422])
        (sign_extend:DI (reg:SI 0 ax [orig:421 D.6066 ] [421]))) com_line.cpp:208 142 {*extendsidi2_rex64}
     (nil))
(insn 862 861 863 61 (set (reg:DI 0 ax [765])
        (reg:DI 1 dx [orig:422 D.6062 ] [422])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 863 862 864 61 (parallel [
            (set (reg:DI 0 ax [765])
                (ashift:DI (reg:DI 0 ax [765])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 497 {*ashldi3_1}
     (nil))
(insn 864 863 865 61 (parallel [
            (set (reg:DI 0 ax [765])
                (plus:DI (reg:DI 0 ax [765])
                    (reg:DI 1 dx [orig:422 D.6062 ] [422])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:422 D.6062 ] [422])
            (const_int 9 [0x9]))
        (nil)))
(insn 865 864 866 61 (parallel [
            (set (reg:DI 0 ax [766])
                (ashift:DI (reg:DI 0 ax [765])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 497 {*ashldi3_1}
     (nil))
(insn 866 865 867 61 (set (reg:DI 0 ax [765])
        (reg:DI 0 ax [766])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 867 866 868 61 (set (reg:DI 1 dx [orig:423 D.6062 ] [423])
        (reg:DI 0 ax [765])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 868 867 869 61 (set (reg/f:DI 0 ax [767])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 869 868 870 61 (parallel [
            (set (reg/f:DI 3 bx [orig:424 D.6063 ] [424])
                (plus:DI (reg:DI 1 dx [orig:423 D.6062 ] [423])
                    (reg/f:DI 0 ax [767])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:423 D.6062 ] [423]))
        (nil)))
(insn 870 869 871 61 (set (reg:SI 0 ax [768])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:208 90 {*movsi_internal}
     (nil))
(insn 871 870 872 61 (set (reg:DI 0 ax [orig:425 D.6062 ] [425])
        (sign_extend:DI (reg:SI 0 ax [768]))) com_line.cpp:208 142 {*extendsidi2_rex64}
     (nil))
(insn 872 871 873 61 (parallel [
            (set (reg:DI 1 dx [orig:426 D.6062 ] [426])
                (ashift:DI (reg:DI 0 ax [orig:425 D.6062 ] [425])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 497 {*ashldi3_1}
     (nil))
(insn 873 872 874 61 (set (reg/f:DI 0 ax [769])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 874 873 875 61 (parallel [
            (set (reg/f:DI 0 ax [orig:427 D.6064 ] [427])
                (plus:DI (reg/f:DI 0 ax [769])
                    (reg:DI 1 dx [orig:426 D.6062 ] [426])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:426 D.6062 ] [426]))
        (nil)))
(insn 875 874 876 61 (set (reg/f:DI 0 ax [orig:428 D.6065 ] [428])
        (mem/f:DI (reg/f:DI 0 ax [orig:427 D.6064 ] [427]) [0 *_388+0 S8 A64])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 876 875 877 61 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:428 D.6065 ] [428])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(call_insn/i 877 876 879 61 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x2b4a3debdc00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) com_line.cpp:208 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 879 877 1991 61 (set (reg:SF 22 xmm1 [orig:430 D.6074 ] [430])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:429 D.6073 ] [429]))) com_line.cpp:208 157 {*truncdfsf_fast_sse}
     (nil))
(insn 1991 879 880 61 (set (reg:SF 0 ax [orig:430 D.6074 ] [430])
        (reg:SF 22 xmm1 [orig:430 D.6074 ] [430])) com_line.cpp:208 129 {*movsf_internal}
     (nil))
(insn 880 1991 881 61 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:424 D.6063 ] [424])
                (const_int 48 [0x30])) [0 _385->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [orig:430 D.6074 ] [430])) com_line.cpp:208 129 {*movsf_internal}
     (nil))
(insn 881 880 882 61 (set (reg/f:DI 0 ax [770])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:209 89 {*movdi_internal}
     (nil))
(insn 882 881 883 61 (set (reg:SI 0 ax [orig:431 D.6066 ] [431])
        (mem:SI (reg/f:DI 0 ax [770]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:209 90 {*movsi_internal}
     (nil))
(insn 883 882 884 61 (set (reg:DI 1 dx [orig:432 D.6062 ] [432])
        (sign_extend:DI (reg:SI 0 ax [orig:431 D.6066 ] [431]))) com_line.cpp:209 142 {*extendsidi2_rex64}
     (nil))
(insn 884 883 885 61 (set (reg:DI 0 ax [771])
        (reg:DI 1 dx [orig:432 D.6062 ] [432])) com_line.cpp:209 89 {*movdi_internal}
     (nil))
(insn 885 884 886 61 (parallel [
            (set (reg:DI 0 ax [771])
                (ashift:DI (reg:DI 0 ax [771])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:209 497 {*ashldi3_1}
     (nil))
(insn 886 885 887 61 (parallel [
            (set (reg:DI 0 ax [771])
                (plus:DI (reg:DI 0 ax [771])
                    (reg:DI 1 dx [orig:432 D.6062 ] [432])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:209 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:432 D.6062 ] [432])
            (const_int 9 [0x9]))
        (nil)))
(insn 887 886 888 61 (parallel [
            (set (reg:DI 0 ax [772])
                (ashift:DI (reg:DI 0 ax [771])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:209 497 {*ashldi3_1}
     (nil))
(insn 888 887 889 61 (set (reg:DI 0 ax [771])
        (reg:DI 0 ax [772])) com_line.cpp:209 89 {*movdi_internal}
     (nil))
(insn 889 888 890 61 (set (reg:DI 1 dx [orig:433 D.6062 ] [433])
        (reg:DI 0 ax [771])) com_line.cpp:209 89 {*movdi_internal}
     (nil))
(insn 890 889 891 61 (set (reg/f:DI 0 ax [773])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:209 89 {*movdi_internal}
     (nil))
(insn 891 890 892 61 (parallel [
            (set (reg/f:DI 0 ax [orig:434 D.6063 ] [434])
                (plus:DI (reg/f:DI 0 ax [773])
                    (reg:DI 1 dx [orig:433 D.6062 ] [433])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:209 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:433 D.6062 ] [433]))
        (nil)))
(insn 892 891 893 61 (set (reg:SI 1 dx [774])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:209 90 {*movsi_internal}
     (nil))
(insn 893 892 894 61 (parallel [
            (set (reg:SI 1 dx [orig:435 D.6066 ] [435])
                (plus:SI (reg:SI 1 dx [774])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:209 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5032 [0xffffffffffffec58])) [0 argc_counter+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 894 893 895 61 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:434 D.6063 ] [434])
                (const_int 60 [0x3c])) [0 _395->ref_file_argument+0 S4 A32])
        (reg:SI 1 dx [orig:435 D.6066 ] [435])) com_line.cpp:209 90 {*movsi_internal}
     (nil))
(insn 895 894 896 61 (set (reg/f:DI 0 ax [775])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:210 89 {*movdi_internal}
     (nil))
(insn 896 895 897 61 (set (mem:SI (reg/f:DI 0 ax [775]) [0 *fid_168(D)+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:210 90 {*movsi_internal}
     (nil))
(insn 897 896 898 61 (set (reg/f:DI 0 ax [776])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 898 897 899 61 (set (reg:SI 0 ax [orig:436 D.6066 ] [436])
        (mem:SI (reg/f:DI 0 ax [776]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:211 90 {*movsi_internal}
     (nil))
(insn 899 898 900 61 (set (reg:DI 1 dx [orig:437 D.6062 ] [437])
        (sign_extend:DI (reg:SI 0 ax [orig:436 D.6066 ] [436]))) com_line.cpp:211 142 {*extendsidi2_rex64}
     (nil))
(insn 900 899 901 61 (set (reg:DI 0 ax [777])
        (reg:DI 1 dx [orig:437 D.6062 ] [437])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 901 900 902 61 (parallel [
            (set (reg:DI 0 ax [777])
                (ashift:DI (reg:DI 0 ax [777])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 497 {*ashldi3_1}
     (nil))
(insn 902 901 903 61 (parallel [
            (set (reg:DI 0 ax [777])
                (plus:DI (reg:DI 0 ax [777])
                    (reg:DI 1 dx [orig:437 D.6062 ] [437])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:437 D.6062 ] [437])
            (const_int 9 [0x9]))
        (nil)))
(insn 903 902 904 61 (parallel [
            (set (reg:DI 0 ax [778])
                (ashift:DI (reg:DI 0 ax [777])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 497 {*ashldi3_1}
     (nil))
(insn 904 903 905 61 (set (reg:DI 0 ax [777])
        (reg:DI 0 ax [778])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 905 904 906 61 (set (reg:DI 1 dx [orig:438 D.6062 ] [438])
        (reg:DI 0 ax [777])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 906 905 907 61 (set (reg/f:DI 0 ax [779])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 907 906 908 61 (parallel [
            (set (reg/f:DI 3 bx [orig:439 D.6063 ] [439])
                (plus:DI (reg:DI 1 dx [orig:438 D.6062 ] [438])
                    (reg/f:DI 0 ax [779])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:438 D.6062 ] [438]))
        (nil)))
(insn 908 907 909 61 (set (reg:SI 0 ax [780])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:211 90 {*movsi_internal}
     (nil))
(insn 909 908 910 61 (set (reg:DI 0 ax [orig:440 D.6062 ] [440])
        (sign_extend:DI (reg:SI 0 ax [780]))) com_line.cpp:211 142 {*extendsidi2_rex64}
     (nil))
(insn 910 909 911 61 (parallel [
            (set (reg:DI 1 dx [orig:441 D.6062 ] [441])
                (ashift:DI (reg:DI 0 ax [orig:440 D.6062 ] [440])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 497 {*ashldi3_1}
     (nil))
(insn 911 910 912 61 (set (reg/f:DI 0 ax [781])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 912 911 913 61 (parallel [
            (set (reg/f:DI 0 ax [orig:442 D.6064 ] [442])
                (plus:DI (reg/f:DI 0 ax [781])
                    (reg:DI 1 dx [orig:441 D.6062 ] [441])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:441 D.6062 ] [441]))
        (nil)))
(insn 913 912 914 61 (set (reg/f:DI 0 ax [orig:443 D.6065 ] [443])
        (mem/f:DI (reg/f:DI 0 ax [orig:442 D.6064 ] [442]) [0 *_403+0 S8 A64])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 914 913 915 61 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:443 D.6065 ] [443])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(call_insn/i 915 914 917 61 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x2b4a3debdc00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) com_line.cpp:211 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 917 915 1992 61 (set (reg:SF 23 xmm2 [orig:445 D.6074 ] [445])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:444 D.6073 ] [444]))) com_line.cpp:211 157 {*truncdfsf_fast_sse}
     (nil))
(insn 1992 917 918 61 (set (reg:SF 0 ax [orig:445 D.6074 ] [445])
        (reg:SF 23 xmm2 [orig:445 D.6074 ] [445])) com_line.cpp:211 129 {*movsf_internal}
     (nil))
(insn 918 1992 919 61 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:439 D.6063 ] [439])
                (const_int 48 [0x30])) [0 _400->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [orig:445 D.6074 ] [445])) com_line.cpp:211 129 {*movsf_internal}
     (nil))
(insn 919 918 920 61 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:212 220 {*addsi_1}
     (nil))
(insn 920 919 921 61 (set (reg/f:DI 0 ax [782])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 921 920 922 61 (set (reg:SI 0 ax [orig:446 D.6066 ] [446])
        (mem:SI (reg/f:DI 0 ax [782]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:213 90 {*movsi_internal}
     (nil))
(insn 922 921 923 61 (set (reg:DI 1 dx [orig:447 D.6062 ] [447])
        (sign_extend:DI (reg:SI 0 ax [orig:446 D.6066 ] [446]))) com_line.cpp:213 142 {*extendsidi2_rex64}
     (nil))
(insn 923 922 924 61 (set (reg:DI 0 ax [783])
        (reg:DI 1 dx [orig:447 D.6062 ] [447])) com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 924 923 925 61 (parallel [
            (set (reg:DI 0 ax [783])
                (ashift:DI (reg:DI 0 ax [783])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:213 497 {*ashldi3_1}
     (nil))
(insn 925 924 926 61 (parallel [
            (set (reg:DI 0 ax [783])
                (plus:DI (reg:DI 0 ax [783])
                    (reg:DI 1 dx [orig:447 D.6062 ] [447])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:213 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:447 D.6062 ] [447])
            (const_int 9 [0x9]))
        (nil)))
(insn 926 925 927 61 (parallel [
            (set (reg:DI 0 ax [784])
                (ashift:DI (reg:DI 0 ax [783])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:213 497 {*ashldi3_1}
     (nil))
(insn 927 926 928 61 (set (reg:DI 0 ax [783])
        (reg:DI 0 ax [784])) com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 928 927 929 61 (set (reg:DI 1 dx [orig:448 D.6062 ] [448])
        (reg:DI 0 ax [783])) com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 929 928 930 61 (set (reg/f:DI 0 ax [785])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 930 929 931 61 (parallel [
            (set (reg/f:DI 1 dx [orig:449 D.6063 ] [449])
                (plus:DI (reg:DI 1 dx [orig:448 D.6062 ] [448])
                    (reg/f:DI 0 ax [785])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:213 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:448 D.6062 ] [448]))
        (nil)))
(insn 931 930 932 61 (set (reg:SI 0 ax [786])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:213 90 {*movsi_internal}
     (nil))
(insn 932 931 933 61 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:449 D.6063 ] [449])
                (const_int 60 [0x3c])) [0 _411->ref_file_argument+0 S4 A32])
        (reg:SI 0 ax [786])) com_line.cpp:213 90 {*movsi_internal}
     (nil))
(insn 933 932 934 61 (set (reg/f:DI 0 ax [787])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 934 933 935 61 (set (reg:SI 0 ax [orig:450 D.6066 ] [450])
        (mem:SI (reg/f:DI 0 ax [787]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:214 90 {*movsi_internal}
     (nil))
(insn 935 934 936 61 (set (reg:DI 1 dx [orig:451 D.6062 ] [451])
        (sign_extend:DI (reg:SI 0 ax [orig:450 D.6066 ] [450]))) com_line.cpp:214 142 {*extendsidi2_rex64}
     (nil))
(insn 936 935 937 61 (set (reg:DI 0 ax [788])
        (reg:DI 1 dx [orig:451 D.6062 ] [451])) com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 937 936 938 61 (parallel [
            (set (reg:DI 0 ax [788])
                (ashift:DI (reg:DI 0 ax [788])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:214 497 {*ashldi3_1}
     (nil))
(insn 938 937 939 61 (parallel [
            (set (reg:DI 0 ax [788])
                (plus:DI (reg:DI 0 ax [788])
                    (reg:DI 1 dx [orig:451 D.6062 ] [451])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:214 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:451 D.6062 ] [451])
            (const_int 9 [0x9]))
        (nil)))
(insn 939 938 940 61 (parallel [
            (set (reg:DI 0 ax [789])
                (ashift:DI (reg:DI 0 ax [788])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:214 497 {*ashldi3_1}
     (nil))
(insn 940 939 941 61 (set (reg:DI 0 ax [788])
        (reg:DI 0 ax [789])) com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 941 940 942 61 (set (reg:DI 1 dx [orig:452 D.6062 ] [452])
        (reg:DI 0 ax [788])) com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 942 941 943 61 (set (reg/f:DI 0 ax [790])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 943 942 944 61 (parallel [
            (set (reg/f:DI 0 ax [orig:453 D.6063 ] [453])
                (plus:DI (reg/f:DI 0 ax [790])
                    (reg:DI 1 dx [orig:452 D.6062 ] [452])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:214 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:452 D.6062 ] [452]))
        (nil)))
(insn 944 943 945 61 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:453 D.6063 ] [453])
                (const_int 36 [0x24])) [0 _415->pre_quality+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:214 90 {*movsi_internal}
     (nil))
(insn 945 944 946 61 (set (reg:SI 0 ax [791])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:215 90 {*movsi_internal}
     (nil))
(insn 946 945 947 61 (set (reg:DI 0 ax [orig:454 D.6062 ] [454])
        (sign_extend:DI (reg:SI 0 ax [791]))) com_line.cpp:215 142 {*extendsidi2_rex64}
     (nil))
(insn 947 946 948 61 (parallel [
            (set (reg:DI 1 dx [orig:455 D.6062 ] [455])
                (ashift:DI (reg:DI 0 ax [orig:454 D.6062 ] [454])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:215 497 {*ashldi3_1}
     (nil))
(insn 948 947 949 61 (set (reg/f:DI 0 ax [792])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:215 89 {*movdi_internal}
     (nil))
(insn 949 948 950 61 (parallel [
            (set (reg/f:DI 0 ax [orig:456 D.6064 ] [456])
                (plus:DI (reg/f:DI 0 ax [792])
                    (reg:DI 1 dx [orig:455 D.6062 ] [455])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:215 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:455 D.6062 ] [455]))
        (nil)))
(insn 950 949 951 61 (set (reg/f:DI 0 ax [orig:457 D.6065 ] [457])
        (mem/f:DI (reg/f:DI 0 ax [orig:456 D.6064 ] [456]) [0 *_418+0 S8 A64])) com_line.cpp:215 89 {*movdi_internal}
     (nil))
(insn 951 950 952 61 (set (reg/f:DI 1 dx [793])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:215 89 {*movdi_internal}
     (nil))
(insn 952 951 953 61 (parallel [
            (set (reg/f:DI 1 dx [orig:458 D.6067 ] [458])
                (plus:DI (reg/f:DI 1 dx [793])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:215 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 953 952 954 61 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:457 D.6065 ] [457])) com_line.cpp:215 89 {*movdi_internal}
     (nil))
(insn 954 953 955 61 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:458 D.6067 ] [458])) com_line.cpp:215 89 {*movdi_internal}
     (nil))
(call_insn 955 954 956 61 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:215 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 956 955 957 61 (set (reg/f:DI 0 ax [794])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:216 89 {*movdi_internal}
     (nil))
(insn 957 956 958 61 (set (reg:SI 0 ax [orig:459 D.6066 ] [459])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [794])
                (const_int 56 [0x38])) [0 preprocess_16(D)->input_file_type+0 S4 A32])) com_line.cpp:216 90 {*movsi_internal}
     (nil))
(insn 958 957 959 61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:459 D.6066 ] [459])
            (const_int 0 [0]))) com_line.cpp:216 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 959 958 960 61 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 973)
            (pc))) com_line.cpp:216 596 {*jcc_1}
     (nil)
 -> 973)
;;  succ:       62 (FALLTHRU)
;;              63
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61 (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 460 461 462 795 796 797 798 799 800 801
(note 960 959 961 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 961 960 962 62 (set (reg/f:DI 0 ax [795])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 962 961 969 62 (parallel [
            (set (reg/f:DI 1 dx [orig:460 D.6067 ] [460])
                (plus:DI (reg/f:DI 0 ax [795])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:217 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 969 962 963 62 (set (reg:DI 0 ax [796])
        (reg/f:DI 1 dx [orig:460 D.6067 ] [460])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 963 969 964 62 (set (reg:DI 2 cx [800])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 964 963 965 62 (set (reg:DI 4 si [799])
        (reg:DI 0 ax [796])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 965 964 1995 62 (set (reg:QI 0 ax [801])
        (const_int 0 [0])) com_line.cpp:217 93 {*movqi_internal}
     (nil))
(insn 1995 965 966 62 (set (reg:DI 5 di [799])
        (reg:DI 4 si [799])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 966 1995 1994 62 (parallel [
            (set (reg:DI 2 cx [797])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [799]) [0  A8])
                        (reg:QI 0 ax [801])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [797])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [799]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:217 923 {*strlenqi_1}
     (nil))
(insn 1994 966 967 62 (set (reg:DI 0 ax [797])
        (reg:DI 2 cx [797])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 967 1994 968 62 (set (reg:DI 0 ax [798])
        (not:DI (reg:DI 0 ax [797]))) com_line.cpp:217 479 {*one_cmpldi2_1}
     (nil))
(insn 968 967 970 62 (parallel [
            (set (reg:DI 0 ax [orig:461 D.6062 ] [461])
                (plus:DI (reg:DI 0 ax [798])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:217 221 {*adddi_1}
     (nil))
(insn 970 968 971 62 (parallel [
            (set (reg/f:DI 0 ax [orig:462 D.6065 ] [462])
                (plus:DI (reg:DI 0 ax [orig:461 D.6062 ] [461])
                    (reg/f:DI 1 dx [orig:460 D.6067 ] [460])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:217 221 {*adddi_1}
     (nil))
(insn 971 970 972 62 (set (mem:SI (reg/f:DI 0 ax [orig:462 D.6065 ] [462]) [0 MEM[(void *)_424]+0 S4 A8])
        (const_int 1684629039 [0x6469662f])) com_line.cpp:217 90 {*movsi_internal}
     (nil))
(insn 972 971 973 62 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:462 D.6065 ] [462])
                (const_int 4 [0x4])) [0 MEM[(void *)_424]+4 S1 A8])
        (const_int 0 [0])) com_line.cpp:217 93 {*movqi_internal}
     (nil))
;;  succ:       63 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60
;;              62 (FALLTHRU)
;;              61
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 463 464 465 466 467 802 803
(code_label 973 972 974 63 33 "" [2 uses])
(note 974 973 975 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 975 974 976 63 (set (reg:SI 0 ax [802])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:220 90 {*movsi_internal}
     (nil))
(insn 976 975 977 63 (set (reg:DI 0 ax [orig:463 D.6062 ] [463])
        (sign_extend:DI (reg:SI 0 ax [802]))) com_line.cpp:220 142 {*extendsidi2_rex64}
     (nil))
(insn 977 976 978 63 (parallel [
            (set (reg:DI 1 dx [orig:464 D.6062 ] [464])
                (ashift:DI (reg:DI 0 ax [orig:463 D.6062 ] [463])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:220 497 {*ashldi3_1}
     (nil))
(insn 978 977 979 63 (set (reg/f:DI 0 ax [803])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:220 89 {*movdi_internal}
     (nil))
(insn 979 978 980 63 (parallel [
            (set (reg/f:DI 0 ax [orig:465 D.6064 ] [465])
                (plus:DI (reg/f:DI 0 ax [803])
                    (reg:DI 1 dx [orig:464 D.6062 ] [464])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:220 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:464 D.6062 ] [464]))
        (nil)))
(insn 980 979 981 63 (set (reg/f:DI 0 ax [orig:466 D.6065 ] [466])
        (mem/f:DI (reg/f:DI 0 ax [orig:465 D.6064 ] [465]) [0 *_427+0 S8 A64])) com_line.cpp:220 89 {*movdi_internal}
     (nil))
(insn 981 980 982 63 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b4a3dfc2d10 *.LC9>)) com_line.cpp:220 89 {*movdi_internal}
     (nil))
(insn 982 981 983 63 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:466 D.6065 ] [466])) com_line.cpp:220 89 {*movdi_internal}
     (nil))
(call_insn/i 983 982 984 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:220 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 984 983 985 63 (set (reg:SI 0 ax [orig:467 D.6066 ] [467])
        (reg:SI 0 ax)) com_line.cpp:220 90 {*movsi_internal}
     (nil))
(insn 985 984 986 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:467 D.6066 ] [467])
            (const_int 0 [0]))) com_line.cpp:220 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 986 985 987 63 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1151)
            (pc))) com_line.cpp:220 596 {*jcc_1}
     (nil)
 -> 1151)
;;  succ:       64 (FALLTHRU)
;;              66
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849
(note 987 986 988 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 988 987 989 64 (set (reg/f:DI 0 ax [804])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:221 89 {*movdi_internal}
     (nil))
(insn 989 988 990 64 (set (reg:SI 0 ax [orig:468 D.6066 ] [468])
        (mem:SI (reg/f:DI 0 ax [804]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:221 90 {*movsi_internal}
     (nil))
(insn 990 989 991 64 (set (reg:DI 1 dx [orig:469 D.6062 ] [469])
        (sign_extend:DI (reg:SI 0 ax [orig:468 D.6066 ] [468]))) com_line.cpp:221 142 {*extendsidi2_rex64}
     (nil))
(insn 991 990 992 64 (set (reg:DI 0 ax [805])
        (reg:DI 1 dx [orig:469 D.6062 ] [469])) com_line.cpp:221 89 {*movdi_internal}
     (nil))
(insn 992 991 993 64 (parallel [
            (set (reg:DI 0 ax [805])
                (ashift:DI (reg:DI 0 ax [805])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:221 497 {*ashldi3_1}
     (nil))
(insn 993 992 994 64 (parallel [
            (set (reg:DI 0 ax [805])
                (plus:DI (reg:DI 0 ax [805])
                    (reg:DI 1 dx [orig:469 D.6062 ] [469])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:221 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:469 D.6062 ] [469])
            (const_int 9 [0x9]))
        (nil)))
(insn 994 993 995 64 (parallel [
            (set (reg:DI 0 ax [806])
                (ashift:DI (reg:DI 0 ax [805])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:221 497 {*ashldi3_1}
     (nil))
(insn 995 994 996 64 (set (reg:DI 0 ax [805])
        (reg:DI 0 ax [806])) com_line.cpp:221 89 {*movdi_internal}
     (nil))
(insn 996 995 997 64 (set (reg:DI 1 dx [orig:470 D.6062 ] [470])
        (reg:DI 0 ax [805])) com_line.cpp:221 89 {*movdi_internal}
     (nil))
(insn 997 996 998 64 (set (reg/f:DI 0 ax [807])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:221 89 {*movdi_internal}
     (nil))
(insn 998 997 999 64 (parallel [
            (set (reg/f:DI 0 ax [orig:471 D.6063 ] [471])
                (plus:DI (reg/f:DI 0 ax [807])
                    (reg:DI 1 dx [orig:470 D.6062 ] [470])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:221 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:470 D.6062 ] [470]))
        (nil)))
(insn 999 998 1000 64 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:471 D.6063 ] [471])
                (const_int 40 [0x28])) [0 _433->pre_quecc+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:221 90 {*movsi_internal}
     (nil))
(insn 1000 999 1001 64 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:222 220 {*addsi_1}
     (nil))
(insn 1001 1000 1002 64 (set (reg/f:DI 0 ax [808])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1002 1001 1003 64 (set (reg:SI 0 ax [orig:472 D.6066 ] [472])
        (mem:SI (reg/f:DI 0 ax [808]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:223 90 {*movsi_internal}
     (nil))
(insn 1003 1002 1004 64 (set (reg:DI 1 dx [orig:473 D.6062 ] [473])
        (sign_extend:DI (reg:SI 0 ax [orig:472 D.6066 ] [472]))) com_line.cpp:223 142 {*extendsidi2_rex64}
     (nil))
(insn 1004 1003 1005 64 (set (reg:DI 0 ax [809])
        (reg:DI 1 dx [orig:473 D.6062 ] [473])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1005 1004 1006 64 (parallel [
            (set (reg:DI 0 ax [809])
                (ashift:DI (reg:DI 0 ax [809])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 497 {*ashldi3_1}
     (nil))
(insn 1006 1005 1007 64 (parallel [
            (set (reg:DI 0 ax [809])
                (plus:DI (reg:DI 0 ax [809])
                    (reg:DI 1 dx [orig:473 D.6062 ] [473])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:473 D.6062 ] [473])
            (const_int 9 [0x9]))
        (nil)))
(insn 1007 1006 1008 64 (parallel [
            (set (reg:DI 0 ax [810])
                (ashift:DI (reg:DI 0 ax [809])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 497 {*ashldi3_1}
     (nil))
(insn 1008 1007 1009 64 (set (reg:DI 0 ax [809])
        (reg:DI 0 ax [810])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1009 1008 1010 64 (set (reg:DI 1 dx [orig:474 D.6062 ] [474])
        (reg:DI 0 ax [809])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1010 1009 1011 64 (set (reg/f:DI 0 ax [811])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1011 1010 1012 64 (parallel [
            (set (reg/f:DI 3 bx [orig:475 D.6063 ] [475])
                (plus:DI (reg:DI 1 dx [orig:474 D.6062 ] [474])
                    (reg/f:DI 0 ax [811])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:474 D.6062 ] [474]))
        (nil)))
(insn 1012 1011 1013 64 (set (reg:SI 0 ax [812])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:223 90 {*movsi_internal}
     (nil))
(insn 1013 1012 1014 64 (set (reg:DI 0 ax [orig:476 D.6062 ] [476])
        (sign_extend:DI (reg:SI 0 ax [812]))) com_line.cpp:223 142 {*extendsidi2_rex64}
     (nil))
(insn 1014 1013 1015 64 (parallel [
            (set (reg:DI 1 dx [orig:477 D.6062 ] [477])
                (ashift:DI (reg:DI 0 ax [orig:476 D.6062 ] [476])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 497 {*ashldi3_1}
     (nil))
(insn 1015 1014 1016 64 (set (reg/f:DI 0 ax [813])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1016 1015 1017 64 (parallel [
            (set (reg/f:DI 0 ax [orig:478 D.6064 ] [478])
                (plus:DI (reg/f:DI 0 ax [813])
                    (reg:DI 1 dx [orig:477 D.6062 ] [477])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:477 D.6062 ] [477]))
        (nil)))
(insn 1017 1016 1018 64 (set (reg/f:DI 0 ax [orig:479 D.6065 ] [479])
        (mem/f:DI (reg/f:DI 0 ax [orig:478 D.6064 ] [478]) [0 *_441+0 S8 A64])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1018 1017 1019 64 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:479 D.6065 ] [479])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(call_insn/i 1019 1018 1020 64 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x2b4a3debdd00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) com_line.cpp:223 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1020 1019 1021 64 (set (reg:SI 0 ax [orig:480 D.6066 ] [480])
        (reg:SI 0 ax)) com_line.cpp:223 90 {*movsi_internal}
     (nil))
(insn 1021 1020 1022 64 (set (mem/j:SI (plus:DI (reg/f:DI 3 bx [orig:475 D.6063 ] [475])
                (const_int 44 [0x2c])) [0 _438->pre_quecc_points+0 S4 A32])
        (reg:SI 0 ax [orig:480 D.6066 ] [480])) com_line.cpp:223 90 {*movsi_internal}
     (nil))
(insn 1022 1021 1023 64 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:224 220 {*addsi_1}
     (nil))
(insn 1023 1022 1024 64 (set (reg/f:DI 0 ax [814])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1024 1023 1025 64 (set (reg:SI 0 ax [orig:481 D.6066 ] [481])
        (mem:SI (reg/f:DI 0 ax [814]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:225 90 {*movsi_internal}
     (nil))
(insn 1025 1024 1026 64 (set (reg:DI 1 dx [orig:482 D.6062 ] [482])
        (sign_extend:DI (reg:SI 0 ax [orig:481 D.6066 ] [481]))) com_line.cpp:225 142 {*extendsidi2_rex64}
     (nil))
(insn 1026 1025 1027 64 (set (reg:DI 0 ax [815])
        (reg:DI 1 dx [orig:482 D.6062 ] [482])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1027 1026 1028 64 (parallel [
            (set (reg:DI 0 ax [815])
                (ashift:DI (reg:DI 0 ax [815])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 497 {*ashldi3_1}
     (nil))
(insn 1028 1027 1029 64 (parallel [
            (set (reg:DI 0 ax [815])
                (plus:DI (reg:DI 0 ax [815])
                    (reg:DI 1 dx [orig:482 D.6062 ] [482])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:482 D.6062 ] [482])
            (const_int 9 [0x9]))
        (nil)))
(insn 1029 1028 1030 64 (parallel [
            (set (reg:DI 0 ax [816])
                (ashift:DI (reg:DI 0 ax [815])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 497 {*ashldi3_1}
     (nil))
(insn 1030 1029 1031 64 (set (reg:DI 0 ax [815])
        (reg:DI 0 ax [816])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1031 1030 1032 64 (set (reg:DI 1 dx [orig:483 D.6062 ] [483])
        (reg:DI 0 ax [815])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1032 1031 1033 64 (set (reg/f:DI 0 ax [817])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1033 1032 1034 64 (parallel [
            (set (reg/f:DI 3 bx [orig:484 D.6063 ] [484])
                (plus:DI (reg:DI 1 dx [orig:483 D.6062 ] [483])
                    (reg/f:DI 0 ax [817])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:483 D.6062 ] [483]))
        (nil)))
(insn 1034 1033 1035 64 (set (reg:SI 0 ax [818])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:225 90 {*movsi_internal}
     (nil))
(insn 1035 1034 1036 64 (set (reg:DI 0 ax [orig:485 D.6062 ] [485])
        (sign_extend:DI (reg:SI 0 ax [818]))) com_line.cpp:225 142 {*extendsidi2_rex64}
     (nil))
(insn 1036 1035 1037 64 (parallel [
            (set (reg:DI 1 dx [orig:486 D.6062 ] [486])
                (ashift:DI (reg:DI 0 ax [orig:485 D.6062 ] [485])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 497 {*ashldi3_1}
     (nil))
(insn 1037 1036 1038 64 (set (reg/f:DI 0 ax [819])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1038 1037 1039 64 (parallel [
            (set (reg/f:DI 0 ax [orig:487 D.6064 ] [487])
                (plus:DI (reg/f:DI 0 ax [819])
                    (reg:DI 1 dx [orig:486 D.6062 ] [486])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:486 D.6062 ] [486]))
        (nil)))
(insn 1039 1038 1040 64 (set (reg/f:DI 0 ax [orig:488 D.6065 ] [488])
        (mem/f:DI (reg/f:DI 0 ax [orig:487 D.6064 ] [487]) [0 *_451+0 S8 A64])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1040 1039 1041 64 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:488 D.6065 ] [488])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(call_insn/i 1041 1040 1043 64 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x2b4a3debdc00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) com_line.cpp:225 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1043 1041 1996 64 (set (reg:SF 24 xmm3 [orig:490 D.6074 ] [490])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:489 D.6073 ] [489]))) com_line.cpp:225 157 {*truncdfsf_fast_sse}
     (nil))
(insn 1996 1043 1044 64 (set (reg:SF 0 ax [orig:490 D.6074 ] [490])
        (reg:SF 24 xmm3 [orig:490 D.6074 ] [490])) com_line.cpp:225 129 {*movsf_internal}
     (nil))
(insn 1044 1996 1045 64 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:484 D.6063 ] [484])
                (const_int 48 [0x30])) [0 _448->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [orig:490 D.6074 ] [490])) com_line.cpp:225 129 {*movsf_internal}
     (nil))
(insn 1045 1044 1046 64 (set (reg/f:DI 0 ax [820])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:226 89 {*movdi_internal}
     (nil))
(insn 1046 1045 1047 64 (set (reg:SI 0 ax [orig:491 D.6066 ] [491])
        (mem:SI (reg/f:DI 0 ax [820]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:226 90 {*movsi_internal}
     (nil))
(insn 1047 1046 1048 64 (set (reg:DI 1 dx [orig:492 D.6062 ] [492])
        (sign_extend:DI (reg:SI 0 ax [orig:491 D.6066 ] [491]))) com_line.cpp:226 142 {*extendsidi2_rex64}
     (nil))
(insn 1048 1047 1049 64 (set (reg:DI 0 ax [821])
        (reg:DI 1 dx [orig:492 D.6062 ] [492])) com_line.cpp:226 89 {*movdi_internal}
     (nil))
(insn 1049 1048 1050 64 (parallel [
            (set (reg:DI 0 ax [821])
                (ashift:DI (reg:DI 0 ax [821])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:226 497 {*ashldi3_1}
     (nil))
(insn 1050 1049 1051 64 (parallel [
            (set (reg:DI 0 ax [821])
                (plus:DI (reg:DI 0 ax [821])
                    (reg:DI 1 dx [orig:492 D.6062 ] [492])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:226 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:492 D.6062 ] [492])
            (const_int 9 [0x9]))
        (nil)))
(insn 1051 1050 1052 64 (parallel [
            (set (reg:DI 0 ax [822])
                (ashift:DI (reg:DI 0 ax [821])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:226 497 {*ashldi3_1}
     (nil))
(insn 1052 1051 1053 64 (set (reg:DI 0 ax [821])
        (reg:DI 0 ax [822])) com_line.cpp:226 89 {*movdi_internal}
     (nil))
(insn 1053 1052 1054 64 (set (reg:DI 1 dx [orig:493 D.6062 ] [493])
        (reg:DI 0 ax [821])) com_line.cpp:226 89 {*movdi_internal}
     (nil))
(insn 1054 1053 1055 64 (set (reg/f:DI 0 ax [823])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:226 89 {*movdi_internal}
     (nil))
(insn 1055 1054 1056 64 (parallel [
            (set (reg/f:DI 0 ax [orig:494 D.6063 ] [494])
                (plus:DI (reg/f:DI 0 ax [823])
                    (reg:DI 1 dx [orig:493 D.6062 ] [493])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:226 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:493 D.6062 ] [493]))
        (nil)))
(insn 1056 1055 1057 64 (set (reg:SI 1 dx [824])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:226 90 {*movsi_internal}
     (nil))
(insn 1057 1056 1058 64 (parallel [
            (set (reg:SI 1 dx [orig:495 D.6066 ] [495])
                (plus:SI (reg:SI 1 dx [824])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:226 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5032 [0xffffffffffffec58])) [0 argc_counter+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1058 1057 1059 64 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:494 D.6063 ] [494])
                (const_int 60 [0x3c])) [0 _458->ref_file_argument+0 S4 A32])
        (reg:SI 1 dx [orig:495 D.6066 ] [495])) com_line.cpp:226 90 {*movsi_internal}
     (nil))
(insn 1059 1058 1060 64 (set (reg/f:DI 0 ax [825])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:227 89 {*movdi_internal}
     (nil))
(insn 1060 1059 1061 64 (set (mem:SI (reg/f:DI 0 ax [825]) [0 *fid_168(D)+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:227 90 {*movsi_internal}
     (nil))
(insn 1061 1060 1062 64 (set (reg/f:DI 0 ax [826])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:228 89 {*movdi_internal}
     (nil))
(insn 1062 1061 1063 64 (set (reg:SI 0 ax [orig:496 D.6066 ] [496])
        (mem:SI (reg/f:DI 0 ax [826]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:228 90 {*movsi_internal}
     (nil))
(insn 1063 1062 1064 64 (set (reg:DI 1 dx [orig:497 D.6062 ] [497])
        (sign_extend:DI (reg:SI 0 ax [orig:496 D.6066 ] [496]))) com_line.cpp:228 142 {*extendsidi2_rex64}
     (nil))
(insn 1064 1063 1065 64 (set (reg:DI 0 ax [827])
        (reg:DI 1 dx [orig:497 D.6062 ] [497])) com_line.cpp:228 89 {*movdi_internal}
     (nil))
(insn 1065 1064 1066 64 (parallel [
            (set (reg:DI 0 ax [827])
                (ashift:DI (reg:DI 0 ax [827])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:228 497 {*ashldi3_1}
     (nil))
(insn 1066 1065 1067 64 (parallel [
            (set (reg:DI 0 ax [827])
                (plus:DI (reg:DI 0 ax [827])
                    (reg:DI 1 dx [orig:497 D.6062 ] [497])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:228 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:497 D.6062 ] [497])
            (const_int 9 [0x9]))
        (nil)))
(insn 1067 1066 1068 64 (parallel [
            (set (reg:DI 0 ax [828])
                (ashift:DI (reg:DI 0 ax [827])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:228 497 {*ashldi3_1}
     (nil))
(insn 1068 1067 1069 64 (set (reg:DI 0 ax [827])
        (reg:DI 0 ax [828])) com_line.cpp:228 89 {*movdi_internal}
     (nil))
(insn 1069 1068 1070 64 (set (reg:DI 1 dx [orig:498 D.6062 ] [498])
        (reg:DI 0 ax [827])) com_line.cpp:228 89 {*movdi_internal}
     (nil))
(insn 1070 1069 1071 64 (set (reg/f:DI 0 ax [829])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:228 89 {*movdi_internal}
     (nil))
(insn 1071 1070 1072 64 (parallel [
            (set (reg/f:DI 0 ax [orig:499 D.6063 ] [499])
                (plus:DI (reg/f:DI 0 ax [829])
                    (reg:DI 1 dx [orig:498 D.6062 ] [498])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:228 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:498 D.6062 ] [498]))
        (nil)))
(insn 1072 1071 1073 64 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:499 D.6063 ] [499])
                (const_int 40 [0x28])) [0 _463->pre_quecc+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:228 90 {*movsi_internal}
     (nil))
(insn 1073 1072 1074 64 (set (reg/f:DI 0 ax [830])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1074 1073 1075 64 (set (reg:SI 0 ax [orig:500 D.6066 ] [500])
        (mem:SI (reg/f:DI 0 ax [830]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:229 90 {*movsi_internal}
     (nil))
(insn 1075 1074 1076 64 (set (reg:DI 1 dx [orig:501 D.6062 ] [501])
        (sign_extend:DI (reg:SI 0 ax [orig:500 D.6066 ] [500]))) com_line.cpp:229 142 {*extendsidi2_rex64}
     (nil))
(insn 1076 1075 1077 64 (set (reg:DI 0 ax [831])
        (reg:DI 1 dx [orig:501 D.6062 ] [501])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1077 1076 1078 64 (parallel [
            (set (reg:DI 0 ax [831])
                (ashift:DI (reg:DI 0 ax [831])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:229 497 {*ashldi3_1}
     (nil))
(insn 1078 1077 1079 64 (parallel [
            (set (reg:DI 0 ax [831])
                (plus:DI (reg:DI 0 ax [831])
                    (reg:DI 1 dx [orig:501 D.6062 ] [501])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:229 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:501 D.6062 ] [501])
            (const_int 9 [0x9]))
        (nil)))
(insn 1079 1078 1080 64 (parallel [
            (set (reg:DI 0 ax [832])
                (ashift:DI (reg:DI 0 ax [831])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:229 497 {*ashldi3_1}
     (nil))
(insn 1080 1079 1081 64 (set (reg:DI 0 ax [831])
        (reg:DI 0 ax [832])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1081 1080 1082 64 (set (reg:DI 1 dx [orig:502 D.6062 ] [502])
        (reg:DI 0 ax [831])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1082 1081 1083 64 (set (reg/f:DI 0 ax [833])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1083 1082 1084 64 (parallel [
            (set (reg/f:DI 1 dx [orig:503 D.6063 ] [503])
                (plus:DI (reg:DI 1 dx [orig:502 D.6062 ] [502])
                    (reg/f:DI 0 ax [833])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:229 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:502 D.6062 ] [502]))
        (nil)))
(insn 1084 1083 1085 64 (set (reg/f:DI 0 ax [834])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1085 1084 1086 64 (set (reg:SI 0 ax [orig:504 D.6066 ] [504])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [834])
                (const_int 44 [0x2c])) [0 preprocess_16(D)->pre_quecc_points+0 S4 A32])) com_line.cpp:229 90 {*movsi_internal}
     (nil))
(insn 1086 1085 1087 64 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:503 D.6063 ] [503])
                (const_int 44 [0x2c])) [0 _467->pre_quecc_points+0 S4 A32])
        (reg:SI 0 ax [orig:504 D.6066 ] [504])) com_line.cpp:229 90 {*movsi_internal}
     (nil))
(insn 1087 1086 1088 64 (set (reg/f:DI 0 ax [835])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1088 1087 1089 64 (set (reg:SI 0 ax [orig:505 D.6066 ] [505])
        (mem:SI (reg/f:DI 0 ax [835]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:230 90 {*movsi_internal}
     (nil))
(insn 1089 1088 1090 64 (set (reg:DI 1 dx [orig:506 D.6062 ] [506])
        (sign_extend:DI (reg:SI 0 ax [orig:505 D.6066 ] [505]))) com_line.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 1090 1089 1091 64 (set (reg:DI 0 ax [836])
        (reg:DI 1 dx [orig:506 D.6062 ] [506])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1091 1090 1092 64 (parallel [
            (set (reg:DI 0 ax [836])
                (ashift:DI (reg:DI 0 ax [836])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 497 {*ashldi3_1}
     (nil))
(insn 1092 1091 1093 64 (parallel [
            (set (reg:DI 0 ax [836])
                (plus:DI (reg:DI 0 ax [836])
                    (reg:DI 1 dx [orig:506 D.6062 ] [506])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:506 D.6062 ] [506])
            (const_int 9 [0x9]))
        (nil)))
(insn 1093 1092 1094 64 (parallel [
            (set (reg:DI 0 ax [837])
                (ashift:DI (reg:DI 0 ax [836])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 497 {*ashldi3_1}
     (nil))
(insn 1094 1093 1095 64 (set (reg:DI 0 ax [836])
        (reg:DI 0 ax [837])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1095 1094 1096 64 (set (reg:DI 1 dx [orig:507 D.6062 ] [507])
        (reg:DI 0 ax [836])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1096 1095 1097 64 (set (reg/f:DI 0 ax [838])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1097 1096 1098 64 (parallel [
            (set (reg/f:DI 3 bx [orig:508 D.6063 ] [508])
                (plus:DI (reg:DI 1 dx [orig:507 D.6062 ] [507])
                    (reg/f:DI 0 ax [838])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:507 D.6062 ] [507]))
        (nil)))
(insn 1098 1097 1099 64 (set (reg:SI 0 ax [839])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:230 90 {*movsi_internal}
     (nil))
(insn 1099 1098 1100 64 (set (reg:DI 0 ax [orig:509 D.6062 ] [509])
        (sign_extend:DI (reg:SI 0 ax [839]))) com_line.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 1100 1099 1101 64 (parallel [
            (set (reg:DI 1 dx [orig:510 D.6062 ] [510])
                (ashift:DI (reg:DI 0 ax [orig:509 D.6062 ] [509])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 497 {*ashldi3_1}
     (nil))
(insn 1101 1100 1102 64 (set (reg/f:DI 0 ax [840])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1102 1101 1103 64 (parallel [
            (set (reg/f:DI 0 ax [orig:511 D.6064 ] [511])
                (plus:DI (reg/f:DI 0 ax [840])
                    (reg:DI 1 dx [orig:510 D.6062 ] [510])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:510 D.6062 ] [510]))
        (nil)))
(insn 1103 1102 1104 64 (set (reg/f:DI 0 ax [orig:512 D.6065 ] [512])
        (mem/f:DI (reg/f:DI 0 ax [orig:511 D.6064 ] [511]) [0 *_475+0 S8 A64])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1104 1103 1105 64 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:512 D.6065 ] [512])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(call_insn/i 1105 1104 1107 64 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x2b4a3debdc00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) com_line.cpp:230 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1107 1105 1997 64 (set (reg:SF 25 xmm4 [orig:514 D.6074 ] [514])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:513 D.6073 ] [513]))) com_line.cpp:230 157 {*truncdfsf_fast_sse}
     (nil))
(insn 1997 1107 1108 64 (set (reg:SF 0 ax [orig:514 D.6074 ] [514])
        (reg:SF 25 xmm4 [orig:514 D.6074 ] [514])) com_line.cpp:230 129 {*movsf_internal}
     (nil))
(insn 1108 1997 1109 64 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:508 D.6063 ] [508])
                (const_int 48 [0x30])) [0 _472->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [orig:514 D.6074 ] [514])) com_line.cpp:230 129 {*movsf_internal}
     (nil))
(insn 1109 1108 1110 64 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:231 220 {*addsi_1}
     (nil))
(insn 1110 1109 1111 64 (set (reg/f:DI 0 ax [841])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 1111 1110 1112 64 (set (reg:SI 0 ax [orig:515 D.6066 ] [515])
        (mem:SI (reg/f:DI 0 ax [841]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:232 90 {*movsi_internal}
     (nil))
(insn 1112 1111 1113 64 (set (reg:DI 1 dx [orig:516 D.6062 ] [516])
        (sign_extend:DI (reg:SI 0 ax [orig:515 D.6066 ] [515]))) com_line.cpp:232 142 {*extendsidi2_rex64}
     (nil))
(insn 1113 1112 1114 64 (set (reg:DI 0 ax [842])
        (reg:DI 1 dx [orig:516 D.6062 ] [516])) com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 1114 1113 1115 64 (parallel [
            (set (reg:DI 0 ax [842])
                (ashift:DI (reg:DI 0 ax [842])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:232 497 {*ashldi3_1}
     (nil))
(insn 1115 1114 1116 64 (parallel [
            (set (reg:DI 0 ax [842])
                (plus:DI (reg:DI 0 ax [842])
                    (reg:DI 1 dx [orig:516 D.6062 ] [516])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:232 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:516 D.6062 ] [516])
            (const_int 9 [0x9]))
        (nil)))
(insn 1116 1115 1117 64 (parallel [
            (set (reg:DI 0 ax [843])
                (ashift:DI (reg:DI 0 ax [842])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:232 497 {*ashldi3_1}
     (nil))
(insn 1117 1116 1118 64 (set (reg:DI 0 ax [842])
        (reg:DI 0 ax [843])) com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 1118 1117 1119 64 (set (reg:DI 1 dx [orig:517 D.6062 ] [517])
        (reg:DI 0 ax [842])) com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 1119 1118 1120 64 (set (reg/f:DI 0 ax [844])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 1120 1119 1121 64 (parallel [
            (set (reg/f:DI 1 dx [orig:518 D.6063 ] [518])
                (plus:DI (reg:DI 1 dx [orig:517 D.6062 ] [517])
                    (reg/f:DI 0 ax [844])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:232 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:517 D.6062 ] [517]))
        (nil)))
(insn 1121 1120 1122 64 (set (reg:SI 0 ax [845])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:232 90 {*movsi_internal}
     (nil))
(insn 1122 1121 1123 64 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:518 D.6063 ] [518])
                (const_int 60 [0x3c])) [0 _483->ref_file_argument+0 S4 A32])
        (reg:SI 0 ax [845])) com_line.cpp:232 90 {*movsi_internal}
     (nil))
(insn 1123 1122 1124 64 (set (reg:SI 0 ax [846])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:233 90 {*movsi_internal}
     (nil))
(insn 1124 1123 1125 64 (set (reg:DI 0 ax [orig:519 D.6062 ] [519])
        (sign_extend:DI (reg:SI 0 ax [846]))) com_line.cpp:233 142 {*extendsidi2_rex64}
     (nil))
(insn 1125 1124 1126 64 (parallel [
            (set (reg:DI 1 dx [orig:520 D.6062 ] [520])
                (ashift:DI (reg:DI 0 ax [orig:519 D.6062 ] [519])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:233 497 {*ashldi3_1}
     (nil))
(insn 1126 1125 1127 64 (set (reg/f:DI 0 ax [847])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:233 89 {*movdi_internal}
     (nil))
(insn 1127 1126 1128 64 (parallel [
            (set (reg/f:DI 0 ax [orig:521 D.6064 ] [521])
                (plus:DI (reg/f:DI 0 ax [847])
                    (reg:DI 1 dx [orig:520 D.6062 ] [520])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:233 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:520 D.6062 ] [520]))
        (nil)))
(insn 1128 1127 1129 64 (set (reg/f:DI 0 ax [orig:522 D.6065 ] [522])
        (mem/f:DI (reg/f:DI 0 ax [orig:521 D.6064 ] [521]) [0 *_486+0 S8 A64])) com_line.cpp:233 89 {*movdi_internal}
     (nil))
(insn 1129 1128 1130 64 (set (reg/f:DI 1 dx [848])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:233 89 {*movdi_internal}
     (nil))
(insn 1130 1129 1131 64 (parallel [
            (set (reg/f:DI 1 dx [orig:523 D.6067 ] [523])
                (plus:DI (reg/f:DI 1 dx [848])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:233 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 1131 1130 1132 64 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:522 D.6065 ] [522])) com_line.cpp:233 89 {*movdi_internal}
     (nil))
(insn 1132 1131 1133 64 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:523 D.6067 ] [523])) com_line.cpp:233 89 {*movdi_internal}
     (nil))
(call_insn 1133 1132 1134 64 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:233 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1134 1133 1135 64 (set (reg/f:DI 0 ax [849])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:239 89 {*movdi_internal}
     (nil))
(insn 1135 1134 1136 64 (set (reg:SI 0 ax [orig:524 D.6066 ] [524])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [849])
                (const_int 56 [0x38])) [0 preprocess_16(D)->input_file_type+0 S4 A32])) com_line.cpp:239 90 {*movsi_internal}
     (nil))
(insn 1136 1135 1137 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:524 D.6066 ] [524])
            (const_int 0 [0]))) com_line.cpp:239 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1137 1136 1138 64 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1151)
            (pc))) com_line.cpp:239 596 {*jcc_1}
     (nil)
 -> 1151)
;;  succ:       65 (FALLTHRU)
;;              66
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64 (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 525 526 527 850 851 852 853 854 855 856
(note 1138 1137 1139 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 1139 1138 1140 65 (set (reg/f:DI 0 ax [850])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1140 1139 1147 65 (parallel [
            (set (reg/f:DI 1 dx [orig:525 D.6067 ] [525])
                (plus:DI (reg/f:DI 0 ax [850])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:240 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 1147 1140 1141 65 (set (reg:DI 0 ax [851])
        (reg/f:DI 1 dx [orig:525 D.6067 ] [525])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1141 1147 1142 65 (set (reg:DI 2 cx [855])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1142 1141 1143 65 (set (reg:DI 4 si [854])
        (reg:DI 0 ax [851])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1143 1142 2000 65 (set (reg:QI 0 ax [856])
        (const_int 0 [0])) com_line.cpp:240 93 {*movqi_internal}
     (nil))
(insn 2000 1143 1144 65 (set (reg:DI 5 di [854])
        (reg:DI 4 si [854])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1144 2000 1999 65 (parallel [
            (set (reg:DI 2 cx [852])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [854]) [0  A8])
                        (reg:QI 0 ax [856])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [852])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [854]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:240 923 {*strlenqi_1}
     (nil))
(insn 1999 1144 1145 65 (set (reg:DI 0 ax [852])
        (reg:DI 2 cx [852])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1145 1999 1146 65 (set (reg:DI 0 ax [853])
        (not:DI (reg:DI 0 ax [852]))) com_line.cpp:240 479 {*one_cmpldi2_1}
     (nil))
(insn 1146 1145 1148 65 (parallel [
            (set (reg:DI 0 ax [orig:526 D.6062 ] [526])
                (plus:DI (reg:DI 0 ax [853])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:240 221 {*adddi_1}
     (nil))
(insn 1148 1146 1149 65 (parallel [
            (set (reg/f:DI 0 ax [orig:527 D.6065 ] [527])
                (plus:DI (reg:DI 0 ax [orig:526 D.6062 ] [526])
                    (reg/f:DI 1 dx [orig:525 D.6067 ] [525])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:240 221 {*adddi_1}
     (nil))
(insn 1149 1148 2001 65 (set (reg:DI 3 bx [1022])
        (const_int 8392585648206865967 [0x7478742e6469662f])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 2001 1149 1150 65 (set (mem:DI (reg/f:DI 0 ax [orig:527 D.6065 ] [527]) [0 MEM[(void *)_492]+0 S8 A8])
        (reg:DI 3 bx [1022])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1150 2001 1151 65 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:527 D.6065 ] [527])
                (const_int 8 [0x8])) [0 MEM[(void *)_492]+8 S1 A8])
        (const_int 0 [0])) com_line.cpp:240 93 {*movqi_internal}
     (nil))
;;  succ:       66 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63
;;              65 (FALLTHRU)
;;              64
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 528 529 857
(code_label 1151 1150 1152 66 34 "" [2 uses])
(note 1152 1151 1153 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 1153 1152 1154 66 (set (reg/f:DI 0 ax [857])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:246 89 {*movdi_internal}
     (nil))
(insn 1154 1153 1155 66 (parallel [
            (set (reg/f:DI 0 ax [orig:528 D.6067 ] [528])
                (plus:DI (reg/f:DI 0 ax [857])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:246 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 1155 1154 1156 66 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b4a3dfc2ab0 *.LC5>)) com_line.cpp:246 89 {*movdi_internal}
     (nil))
(insn 1156 1155 1157 66 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:528 D.6067 ] [528])) com_line.cpp:246 89 {*movdi_internal}
     (nil))
(call_insn 1157 1156 1158 66 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b4a3ddf7d00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:246 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1158 1157 1159 66 (set (reg/f:DI 0 ax [orig:529 D.6068 ] [529])
        (reg:DI 0 ax)) com_line.cpp:246 89 {*movdi_internal}
     (nil))
(insn 1159 1158 1160 66 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:529 D.6068 ] [529])) com_line.cpp:246 89 {*movdi_internal}
     (nil))
(insn 1160 1159 1161 66 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:247 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1161 1160 1162 66 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1168)
            (pc))) com_line.cpp:247 596 {*jcc_1}
     (nil)
 -> 1168)
;;  succ:       67 (FALLTHRU)
;;              68
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       66 (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 1162 1161 1163 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 1163 1162 1164 67 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x2b4a3dfdfa18 *.LC30>)) com_line.cpp:248 89 {*movdi_internal}
     (nil))
(call_insn 1164 1163 1165 67 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:248 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1165 1164 1166 67 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:249 90 {*movsi_internal}
     (nil))
(call_insn 1166 1165 1167 67 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4a3dc61900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:249 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1167 1166 1168)
;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       66
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 530 858 859
(code_label 1168 1167 1169 68 35 "" [1 uses])
(note 1169 1168 1170 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 1170 1169 1171 68 (set (reg:DI 0 ax [858])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])) com_line.cpp:251 89 {*movdi_internal}
     (nil))
(insn 1171 1170 1172 68 (set (reg:DI 5 di)
        (reg:DI 0 ax [858])) com_line.cpp:251 89 {*movdi_internal}
     (nil))
(call_insn 1172 1171 1173 68 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b4a3ddf7900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) com_line.cpp:251 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1173 1172 1174 68 (set (reg/f:DI 0 ax [859])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:254 89 {*movdi_internal}
     (nil))
(insn 1174 1173 1175 68 (set (reg:SI 0 ax [orig:530 D.6066 ] [530])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [859])
                (const_int 56 [0x38])) [0 preprocess_16(D)->input_file_type+0 S4 A32])) com_line.cpp:254 90 {*movsi_internal}
     (nil))
(insn 1175 1174 1176 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:530 D.6066 ] [530])
            (const_int 0 [0]))) com_line.cpp:254 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1176 1175 1177 68 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1233)
            (pc))) com_line.cpp:254 596 {*jcc_1}
     (nil)
 -> 1233)
;;  succ:       69 (FALLTHRU)
;;              72
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 531 532 533 534 535 536 537 538 539 540 860 861 862 863 864 865 866 867 868 869 870
(note 1177 1176 1178 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 1178 1177 1179 69 (set (reg:SI 0 ax [860])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:255 90 {*movsi_internal}
     (nil))
(insn 1179 1178 1180 69 (set (reg:DI 0 ax [orig:531 D.6062 ] [531])
        (sign_extend:DI (reg:SI 0 ax [860]))) com_line.cpp:255 142 {*extendsidi2_rex64}
     (nil))
(insn 1180 1179 1181 69 (parallel [
            (set (reg:DI 1 dx [orig:532 D.6062 ] [532])
                (ashift:DI (reg:DI 0 ax [orig:531 D.6062 ] [531])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:255 497 {*ashldi3_1}
     (nil))
(insn 1181 1180 1182 69 (set (reg/f:DI 0 ax [861])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:255 89 {*movdi_internal}
     (nil))
(insn 1182 1181 1183 69 (parallel [
            (set (reg/f:DI 0 ax [orig:533 D.6064 ] [533])
                (plus:DI (reg/f:DI 0 ax [861])
                    (reg:DI 1 dx [orig:532 D.6062 ] [532])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:255 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:532 D.6062 ] [532]))
        (nil)))
(insn 1183 1182 1184 69 (set (reg/f:DI 0 ax [orig:534 D.6065 ] [534])
        (mem/f:DI (reg/f:DI 0 ax [orig:533 D.6064 ] [533]) [0 *_499+0 S8 A64])) com_line.cpp:255 89 {*movdi_internal}
     (nil))
(insn 1184 1183 1185 69 (set (reg/f:DI 1 dx [862])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:255 89 {*movdi_internal}
     (nil))
(insn 1185 1184 1186 69 (parallel [
            (set (reg/f:DI 1 dx [orig:535 D.6067 ] [535])
                (plus:DI (reg/f:DI 1 dx [862])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:255 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 1186 1185 1187 69 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:534 D.6065 ] [534])) com_line.cpp:255 89 {*movdi_internal}
     (nil))
(insn 1187 1186 1188 69 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:535 D.6067 ] [535])) com_line.cpp:255 89 {*movdi_internal}
     (nil))
(call_insn 1188 1187 1189 69 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:255 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1189 1188 1190 69 (set (reg/f:DI 0 ax [863])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1190 1189 1197 69 (parallel [
            (set (reg/f:DI 1 dx [orig:536 D.6067 ] [536])
                (plus:DI (reg/f:DI 0 ax [863])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:256 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 1197 1190 1191 69 (set (reg:DI 0 ax [864])
        (reg/f:DI 1 dx [orig:536 D.6067 ] [536])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1191 1197 1192 69 (set (reg:DI 2 cx [868])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1192 1191 1193 69 (set (reg:DI 4 si [867])
        (reg:DI 0 ax [864])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1193 1192 2004 69 (set (reg:QI 0 ax [869])
        (const_int 0 [0])) com_line.cpp:256 93 {*movqi_internal}
     (nil))
(insn 2004 1193 1194 69 (set (reg:DI 5 di [867])
        (reg:DI 4 si [867])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1194 2004 2003 69 (parallel [
            (set (reg:DI 2 cx [865])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [867]) [0  A8])
                        (reg:QI 0 ax [869])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [865])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [867]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:256 923 {*strlenqi_1}
     (nil))
(insn 2003 1194 1195 69 (set (reg:DI 0 ax [865])
        (reg:DI 2 cx [865])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1195 2003 1196 69 (set (reg:DI 0 ax [866])
        (not:DI (reg:DI 0 ax [865]))) com_line.cpp:256 479 {*one_cmpldi2_1}
     (nil))
(insn 1196 1195 1198 69 (parallel [
            (set (reg:DI 0 ax [orig:537 D.6062 ] [537])
                (plus:DI (reg:DI 0 ax [866])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:256 221 {*adddi_1}
     (nil))
(insn 1198 1196 1199 69 (parallel [
            (set (reg/f:DI 0 ax [orig:538 D.6065 ] [538])
                (plus:DI (reg:DI 0 ax [orig:537 D.6062 ] [537])
                    (reg/f:DI 1 dx [orig:536 D.6067 ] [536])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:256 221 {*adddi_1}
     (nil))
(insn 1199 1198 2005 69 (set (reg:DI 3 bx [1025])
        (const_int 8241992365438562351 [0x726170636f72702f])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 2005 1199 1200 69 (set (mem:DI (reg/f:DI 0 ax [orig:538 D.6065 ] [538]) [0 MEM[(void *)_504]+0 S8 A8])
        (reg:DI 3 bx [1025])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1200 2005 1201 69 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:538 D.6065 ] [538])
                (const_int 8 [0x8])) [0 MEM[(void *)_504]+8 S1 A8])
        (const_int 0 [0])) com_line.cpp:256 93 {*movqi_internal}
     (nil))
(insn 1201 1200 1202 69 (set (reg/f:DI 0 ax [870])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:260 89 {*movdi_internal}
     (nil))
(insn 1202 1201 1203 69 (parallel [
            (set (reg/f:DI 0 ax [orig:539 D.6067 ] [539])
                (plus:DI (reg/f:DI 0 ax [870])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:260 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 1203 1202 1204 69 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b4a3dfdf2f8 *.LC18>)) com_line.cpp:260 89 {*movdi_internal}
     (nil))
(insn 1204 1203 1205 69 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:539 D.6067 ] [539])) com_line.cpp:260 89 {*movdi_internal}
     (nil))
(call_insn 1205 1204 1206 69 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b4a3ddf7d00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:260 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1206 1205 1207 69 (set (reg/f:DI 0 ax [orig:540 D.6068 ] [540])
        (reg:DI 0 ax)) com_line.cpp:260 89 {*movdi_internal}
     (nil))
(insn 1207 1206 1208 69 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:540 D.6068 ] [540])) com_line.cpp:260 89 {*movdi_internal}
     (nil))
(insn 1208 1207 1209 69 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:261 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1209 1208 1210 69 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1216)
            (pc))) com_line.cpp:261 596 {*jcc_1}
     (nil)
 -> 1216)
;;  succ:       70 (FALLTHRU)
;;              71
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69 (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 1210 1209 1211 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 1211 1210 1212 70 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x2b4a3dfdfab0 *.LC31>)) com_line.cpp:262 89 {*movdi_internal}
     (nil))
(call_insn 1212 1211 1213 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:262 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1213 1212 1214 70 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:263 90 {*movsi_internal}
     (nil))
(call_insn 1214 1213 1215 70 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4a3dc61900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:263 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1215 1214 1216)
;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 541 542 543 544 545 546 871 872 873 874
(code_label 1216 1215 1217 71 37 "" [1 uses])
(note 1217 1216 1218 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 1218 1217 1219 71 (set (reg:DI 0 ax [871])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])) com_line.cpp:265 89 {*movdi_internal}
     (nil))
(insn 1219 1218 1220 71 (set (reg:DI 5 di)
        (reg:DI 0 ax [871])) com_line.cpp:265 89 {*movdi_internal}
     (nil))
(call_insn 1220 1219 1221 71 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b4a3ddf7900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) com_line.cpp:265 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1221 1220 1222 71 (set (reg:SI 0 ax [872])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:268 90 {*movsi_internal}
     (nil))
(insn 1222 1221 1223 71 (set (reg:DI 0 ax [orig:541 D.6062 ] [541])
        (sign_extend:DI (reg:SI 0 ax [872]))) com_line.cpp:268 142 {*extendsidi2_rex64}
     (nil))
(insn 1223 1222 1224 71 (parallel [
            (set (reg:DI 1 dx [orig:542 D.6062 ] [542])
                (ashift:DI (reg:DI 0 ax [orig:541 D.6062 ] [541])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:268 497 {*ashldi3_1}
     (nil))
(insn 1224 1223 1225 71 (set (reg/f:DI 0 ax [873])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:268 89 {*movdi_internal}
     (nil))
(insn 1225 1224 1226 71 (parallel [
            (set (reg/f:DI 0 ax [orig:543 D.6064 ] [543])
                (plus:DI (reg/f:DI 0 ax [873])
                    (reg:DI 1 dx [orig:542 D.6062 ] [542])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:268 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:542 D.6062 ] [542]))
        (nil)))
(insn 1226 1225 1227 71 (set (reg/f:DI 0 ax [orig:544 D.6065 ] [544])
        (mem/f:DI (reg/f:DI 0 ax [orig:543 D.6064 ] [543]) [0 *_510+0 S8 A64])) com_line.cpp:268 89 {*movdi_internal}
     (nil))
(insn 1227 1226 1228 71 (set (reg/f:DI 1 dx [874])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5080 [0xffffffffffffec28])) [0 procpar_info+0 S8 A64])) com_line.cpp:268 89 {*movdi_internal}
     (nil))
(insn 1228 1227 1229 71 (parallel [
            (set (reg/f:DI 1 dx [orig:545 D.6075 ] [545])
                (plus:DI (reg/f:DI 1 dx [874])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:268 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5064 [0xffffffffffffec38])) [0 procpar_info+0 S8 A64])
            (const_int 376 [0x178]))
        (nil)))
(insn 1229 1228 1230 71 (parallel [
            (set (reg/f:DI 1 dx [orig:546 D.6067 ] [546])
                (plus:DI (reg/f:DI 1 dx [orig:545 D.6075 ] [545])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:268 221 {*adddi_1}
     (nil))
(insn 1230 1229 1231 71 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:544 D.6065 ] [544])) com_line.cpp:268 89 {*movdi_internal}
     (nil))
(insn 1231 1230 1232 71 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:546 D.6067 ] [546])) com_line.cpp:268 89 {*movdi_internal}
     (nil))
(call_insn 1232 1231 1233 71 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:268 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
;;  succ:       72 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68
;;              71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 547 548 549 875 876 877
(code_label 1233 1232 1234 72 36 "" [1 uses])
(note 1234 1233 1235 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 1235 1234 1236 72 (set (reg/f:DI 0 ax [875])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:271 89 {*movdi_internal}
     (nil))
(insn 1236 1235 1237 72 (parallel [
            (set (reg/f:DI 0 ax [orig:547 D.6064 ] [547])
                (plus:DI (reg/f:DI 0 ax [875])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:271 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 1237 1236 1238 72 (set (reg/f:DI 0 ax [orig:548 D.6065 ] [548])
        (mem/f:DI (reg/f:DI 0 ax [orig:547 D.6064 ] [547]) [0 *_514+0 S8 A64])) com_line.cpp:271 89 {*movdi_internal}
     (nil))
(insn 1238 1237 1239 72 (set (reg/f:DI 1 dx [876])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:271 89 {*movdi_internal}
     (nil))
(insn 1239 1238 1240 72 (parallel [
            (set (reg/f:DI 1 dx [orig:549 D.6067 ] [549])
                (plus:DI (reg/f:DI 1 dx [876])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:271 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1240 1239 1241 72 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:548 D.6065 ] [548])) com_line.cpp:271 89 {*movdi_internal}
     (nil))
(insn 1241 1240 1242 72 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:549 D.6067 ] [549])) com_line.cpp:271 89 {*movdi_internal}
     (nil))
(call_insn 1242 1241 1243 72 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:271 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1243 1242 1244 72 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (const_int 0 [0])) com_line.cpp:272 89 {*movdi_internal}
     (nil))
(insn 1244 1243 1245 72 (set (reg:SI 0 ax [orig:877 found_extension ] [877])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5044 [0xffffffffffffec4c])) [0 found_extension+0 S4 A32])) com_line.cpp:276 90 {*movsi_internal}
     (nil))
(insn 1245 1244 1246 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:877 found_extension ] [877])
            (const_int 0 [0]))) com_line.cpp:276 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1246 1245 1250 72 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1359)
            (pc))) com_line.cpp:276 596 {*jcc_1}
     (nil)
 -> 1359)
;;  succ:       73 (FALLTHRU)
;;              89
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 550 878 879
(note 1250 1246 1251 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 1251 1250 1252 73 (set (reg/f:DI 0 ax [878])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:278 89 {*movdi_internal}
     (nil))
(insn 1252 1251 1253 73 (parallel [
            (set (reg/f:DI 0 ax [orig:550 D.6067 ] [550])
                (plus:DI (reg/f:DI 0 ax [878])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:278 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1253 1252 1254 73 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b4a3dfc2da8 *.LC10>)) com_line.cpp:278 89 {*movdi_internal}
     (nil))
(insn 1254 1253 1255 73 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:550 D.6067 ] [550])) com_line.cpp:278 89 {*movdi_internal}
     (nil))
(call_insn/i 1255 1254 1256 73 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:278 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1256 1255 1257 73 (set (reg:DI 0 ax [879])
        (reg:DI 0 ax)) com_line.cpp:278 89 {*movdi_internal}
     (nil))
(insn 1257 1256 1258 73 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [879])) com_line.cpp:278 89 {*movdi_internal}
     (nil))
(insn 1258 1257 1259 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:279 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1259 1258 1260 73 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1263)
            (pc))) com_line.cpp:279 596 {*jcc_1}
     (nil)
 -> 1263)
;;  succ:       74 (FALLTHRU)
;;              75
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73 (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1260 1259 1925 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1925 1260 1926 74 (set (pc)
        (label_ref 1359)) com_line.cpp:279 636 {jump}
     (nil)
 -> 1359)
;;  succ:       89 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1926 1925 1263)
;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 551 880 881
(code_label 1263 1926 1264 75 40 "" [1 uses])
(note 1264 1263 1265 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 1265 1264 1266 75 (set (reg/f:DI 0 ax [880])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:280 89 {*movdi_internal}
     (nil))
(insn 1266 1265 1267 75 (parallel [
            (set (reg/f:DI 0 ax [orig:551 D.6067 ] [551])
                (plus:DI (reg/f:DI 0 ax [880])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:280 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1267 1266 1268 75 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b4a3dfc2e40 *.LC11>)) com_line.cpp:280 89 {*movdi_internal}
     (nil))
(insn 1268 1267 1269 75 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:551 D.6067 ] [551])) com_line.cpp:280 89 {*movdi_internal}
     (nil))
(call_insn/i 1269 1268 1270 75 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:280 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1270 1269 1271 75 (set (reg:DI 0 ax [881])
        (reg:DI 0 ax)) com_line.cpp:280 89 {*movdi_internal}
     (nil))
(insn 1271 1270 1272 75 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [881])) com_line.cpp:280 89 {*movdi_internal}
     (nil))
(insn 1272 1271 1273 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:281 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1273 1272 1274 75 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1277)
            (pc))) com_line.cpp:281 596 {*jcc_1}
     (nil)
 -> 1277)
;;  succ:       76 (FALLTHRU)
;;              77
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1274 1273 1927 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1927 1274 1928 76 (set (pc)
        (label_ref 1359)) com_line.cpp:281 636 {jump}
     (nil)
 -> 1359)
;;  succ:       89 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1928 1927 1277)
;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 552 882 883
(code_label 1277 1928 1278 77 41 "" [1 uses])
(note 1278 1277 1279 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 1279 1278 1280 77 (set (reg/f:DI 0 ax [882])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:282 89 {*movdi_internal}
     (nil))
(insn 1280 1279 1281 77 (parallel [
            (set (reg/f:DI 0 ax [orig:552 D.6067 ] [552])
                (plus:DI (reg/f:DI 0 ax [882])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:282 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1281 1280 1282 77 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b4a3dfc2ed8 *.LC12>)) com_line.cpp:282 89 {*movdi_internal}
     (nil))
(insn 1282 1281 1283 77 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:552 D.6067 ] [552])) com_line.cpp:282 89 {*movdi_internal}
     (nil))
(call_insn/i 1283 1282 1284 77 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:282 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1284 1283 1285 77 (set (reg:DI 0 ax [883])
        (reg:DI 0 ax)) com_line.cpp:282 89 {*movdi_internal}
     (nil))
(insn 1285 1284 1286 77 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [883])) com_line.cpp:282 89 {*movdi_internal}
     (nil))
(insn 1286 1285 1287 77 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:283 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1287 1286 1288 77 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1291)
            (pc))) com_line.cpp:283 596 {*jcc_1}
     (nil)
 -> 1291)
;;  succ:       78 (FALLTHRU)
;;              79
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       77 (FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1288 1287 1929 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1929 1288 1930 78 (set (pc)
        (label_ref 1359)) com_line.cpp:283 636 {jump}
     (nil)
 -> 1359)
;;  succ:       89 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1930 1929 1291)
;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       77
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 553 884 885
(code_label 1291 1930 1292 79 42 "" [1 uses])
(note 1292 1291 1293 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 1293 1292 1294 79 (set (reg/f:DI 0 ax [884])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1294 1293 1295 79 (parallel [
            (set (reg/f:DI 0 ax [orig:553 D.6067 ] [553])
                (plus:DI (reg/f:DI 0 ax [884])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:284 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1295 1294 1296 79 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b4a3dfdf000 *.LC13>)) com_line.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1296 1295 1297 79 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:553 D.6067 ] [553])) com_line.cpp:284 89 {*movdi_internal}
     (nil))
(call_insn/i 1297 1296 1298 79 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:284 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1298 1297 1299 79 (set (reg:DI 0 ax [885])
        (reg:DI 0 ax)) com_line.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1299 1298 1300 79 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [885])) com_line.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1300 1299 1301 79 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:285 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1301 1300 1302 79 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1305)
            (pc))) com_line.cpp:285 596 {*jcc_1}
     (nil)
 -> 1305)
;;  succ:       80 (FALLTHRU)
;;              81
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79 (FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1302 1301 1931 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1931 1302 1932 80 (set (pc)
        (label_ref 1359)) com_line.cpp:285 636 {jump}
     (nil)
 -> 1359)
;;  succ:       89 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1932 1931 1305)
;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 554 886 887
(code_label 1305 1932 1306 81 43 "" [1 uses])
(note 1306 1305 1307 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 1307 1306 1308 81 (set (reg/f:DI 0 ax [886])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:286 89 {*movdi_internal}
     (nil))
(insn 1308 1307 1309 81 (parallel [
            (set (reg/f:DI 0 ax [orig:554 D.6067 ] [554])
                (plus:DI (reg/f:DI 0 ax [886])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:286 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1309 1308 1310 81 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x2b4a3dfdf098 *.LC14>)) com_line.cpp:286 89 {*movdi_internal}
     (nil))
(insn 1310 1309 1311 81 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:554 D.6067 ] [554])) com_line.cpp:286 89 {*movdi_internal}
     (nil))
(call_insn/i 1311 1310 1312 81 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:286 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1312 1311 1313 81 (set (reg:DI 0 ax [887])
        (reg:DI 0 ax)) com_line.cpp:286 89 {*movdi_internal}
     (nil))
(insn 1313 1312 1314 81 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [887])) com_line.cpp:286 89 {*movdi_internal}
     (nil))
(insn 1314 1313 1315 81 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:287 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1315 1314 1316 81 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1319)
            (pc))) com_line.cpp:287 596 {*jcc_1}
     (nil)
 -> 1319)
;;  succ:       82 (FALLTHRU)
;;              83
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81 (FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1316 1315 1933 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1933 1316 1934 82 (set (pc)
        (label_ref 1359)) com_line.cpp:287 636 {jump}
     (nil)
 -> 1359)
;;  succ:       89 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1934 1933 1319)
;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 555 888 889
(code_label 1319 1934 1320 83 44 "" [1 uses])
(note 1320 1319 1321 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1321 1320 1322 83 (set (reg/f:DI 0 ax [888])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:288 89 {*movdi_internal}
     (nil))
(insn 1322 1321 1323 83 (parallel [
            (set (reg/f:DI 0 ax [orig:555 D.6067 ] [555])
                (plus:DI (reg/f:DI 0 ax [888])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:288 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1323 1322 1324 83 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2b4a3dfdf130 *.LC15>)) com_line.cpp:288 89 {*movdi_internal}
     (nil))
(insn 1324 1323 1325 83 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:555 D.6067 ] [555])) com_line.cpp:288 89 {*movdi_internal}
     (nil))
(call_insn/i 1325 1324 1326 83 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:288 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1326 1325 1327 83 (set (reg:DI 0 ax [889])
        (reg:DI 0 ax)) com_line.cpp:288 89 {*movdi_internal}
     (nil))
(insn 1327 1326 1328 83 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [889])) com_line.cpp:288 89 {*movdi_internal}
     (nil))
(insn 1328 1327 1329 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:289 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1329 1328 1330 83 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1333)
            (pc))) com_line.cpp:289 596 {*jcc_1}
     (nil)
 -> 1333)
;;  succ:       84 (FALLTHRU)
;;              85
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 84, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83 (FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1330 1329 1935 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1935 1330 1936 84 (set (pc)
        (label_ref 1359)) com_line.cpp:289 636 {jump}
     (nil)
 -> 1359)
;;  succ:       89 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1936 1935 1333)
;; basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 556 890 891
(code_label 1333 1936 1334 85 45 "" [1 uses])
(note 1334 1333 1335 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 1335 1334 1336 85 (set (reg/f:DI 0 ax [890])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:290 89 {*movdi_internal}
     (nil))
(insn 1336 1335 1337 85 (parallel [
            (set (reg/f:DI 0 ax [orig:556 D.6067 ] [556])
                (plus:DI (reg/f:DI 0 ax [890])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:290 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1337 1336 1338 85 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b4a3dfdf1c8 *.LC16>)) com_line.cpp:290 89 {*movdi_internal}
     (nil))
(insn 1338 1337 1339 85 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:556 D.6067 ] [556])) com_line.cpp:290 89 {*movdi_internal}
     (nil))
(call_insn/i 1339 1338 1340 85 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:290 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1340 1339 1341 85 (set (reg:DI 0 ax [891])
        (reg:DI 0 ax)) com_line.cpp:290 89 {*movdi_internal}
     (nil))
(insn 1341 1340 1342 85 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [891])) com_line.cpp:290 89 {*movdi_internal}
     (nil))
(insn 1342 1341 1343 85 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:291 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1343 1342 1344 85 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1347)
            (pc))) com_line.cpp:291 596 {*jcc_1}
     (nil)
 -> 1347)
;;  succ:       86 (FALLTHRU)
;;              87
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       85 (FALLTHRU)
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1344 1343 1937 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1937 1344 1938 86 (set (pc)
        (label_ref 1359)) com_line.cpp:291 636 {jump}
     (nil)
 -> 1359)
;;  succ:       89 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1938 1937 1347)
;; basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       85
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 557 892 893
(code_label 1347 1938 1348 87 46 "" [1 uses])
(note 1348 1347 1349 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 1349 1348 1350 87 (set (reg/f:DI 0 ax [892])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:292 89 {*movdi_internal}
     (nil))
(insn 1350 1349 1351 87 (parallel [
            (set (reg/f:DI 0 ax [orig:557 D.6067 ] [557])
                (plus:DI (reg/f:DI 0 ax [892])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:292 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1351 1350 1352 87 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b4a3dfdf260 *.LC17>)) com_line.cpp:292 89 {*movdi_internal}
     (nil))
(insn 1352 1351 1353 87 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:557 D.6067 ] [557])) com_line.cpp:292 89 {*movdi_internal}
     (nil))
(call_insn/i 1353 1352 1354 87 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x2b4a3dc3ea00 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:292 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1354 1353 1355 87 (set (reg:DI 0 ax [893])
        (reg:DI 0 ax)) com_line.cpp:292 89 {*movdi_internal}
     (nil))
(insn 1355 1354 1356 87 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [893])) com_line.cpp:292 89 {*movdi_internal}
     (nil))
(insn 1356 1355 1357 87 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:293 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1357 1356 1358 87 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1359)
            (pc))) com_line.cpp:293 596 {*jcc_1}
     (nil)
 -> 1359)
;;  succ:       88 (FALLTHRU)
;;              89
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 129, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       87 (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1358 1357 1971 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
;;  succ:       129 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 129, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 88, next block 89, flags: (NEW, RTL, MODIFIED)
;;  pred:       88 (FALLTHRU)
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1971 1358 1972 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(insn 1972 1971 1359 129 (const_int 0 [0]) com_line.cpp:293 662 {nop}
     (nil))
;;  succ:       89 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 129, next block 90, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72
;;              129 [100.0%]  (FALLTHRU)
;;              74 [100.0%] 
;;              76 [100.0%] 
;;              78 [100.0%] 
;;              80 [100.0%] 
;;              82 [100.0%] 
;;              84 [100.0%] 
;;              87
;;              86 [100.0%] 
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1359 1972 1360 89 38 "" [9 uses])
(note 1360 1359 1361 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 1361 1360 1362 89 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1362 1361 1363 89 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1378)
            (pc))) com_line.cpp:295 596 {*jcc_1}
     (nil)
 -> 1378)
;;  succ:       90 (FALLTHRU)
;;              91
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 90, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 89, next block 91, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       89 (FALLTHRU)
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 558 559 560 894 895 896 897 898 899 900
(note 1363 1362 1364 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 1364 1363 1365 90 (set (reg/f:DI 0 ax [894])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1365 1364 1372 90 (parallel [
            (set (reg/f:DI 1 dx [orig:558 D.6067 ] [558])
                (plus:DI (reg/f:DI 0 ax [894])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:296 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1372 1365 1366 90 (set (reg:DI 0 ax [895])
        (reg/f:DI 1 dx [orig:558 D.6067 ] [558])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1366 1372 1367 90 (set (reg:DI 2 cx [899])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1367 1366 1368 90 (set (reg:DI 4 si [898])
        (reg:DI 0 ax [895])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1368 1367 2008 90 (set (reg:QI 0 ax [900])
        (const_int 0 [0])) com_line.cpp:296 93 {*movqi_internal}
     (nil))
(insn 2008 1368 1369 90 (set (reg:DI 5 di [898])
        (reg:DI 4 si [898])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1369 2008 2007 90 (parallel [
            (set (reg:DI 2 cx [896])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [898]) [0  A8])
                        (reg:QI 0 ax [900])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [896])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [898]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:296 923 {*strlenqi_1}
     (nil))
(insn 2007 1369 1370 90 (set (reg:DI 0 ax [896])
        (reg:DI 2 cx [896])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1370 2007 1371 90 (set (reg:DI 0 ax [897])
        (not:DI (reg:DI 0 ax [896]))) com_line.cpp:296 479 {*one_cmpldi2_1}
     (nil))
(insn 1371 1370 1373 90 (parallel [
            (set (reg:DI 0 ax [orig:559 D.6062 ] [559])
                (plus:DI (reg:DI 0 ax [897])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:296 221 {*adddi_1}
     (nil))
(insn 1373 1371 1374 90 (parallel [
            (set (reg/f:DI 0 ax [orig:560 D.6065 ] [560])
                (plus:DI (reg:DI 0 ax [orig:559 D.6062 ] [559])
                    (reg/f:DI 1 dx [orig:558 D.6067 ] [558])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:296 221 {*adddi_1}
     (nil))
(insn 1374 1373 2009 90 (set (reg:DI 3 bx [1028])
        (const_int 8386094131808466271 [0x7461642e736e755f])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 2009 1374 1375 90 (set (mem:DI (reg/f:DI 0 ax [orig:560 D.6065 ] [560]) [0 MEM[(void *)_536]+0 S8 A8])
        (reg:DI 3 bx [1028])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1375 2009 1939 90 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:560 D.6065 ] [560])
                (const_int 8 [0x8])) [0 MEM[(void *)_536]+8 S1 A8])
        (const_int 0 [0])) com_line.cpp:296 93 {*movqi_internal}
     (nil))
(jump_insn 1939 1375 1940 90 (set (pc)
        (label_ref 1383)) 636 {jump}
     (nil)
 -> 1383)
;;  succ:       92 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1940 1939 1378)
;; basic block 91, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 90, next block 92, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       89
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 901
(code_label 1378 1940 1379 91 47 "" [1 uses])
(note 1379 1378 1380 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 1380 1379 1381 91 (set (reg/f:DI 0 ax [901])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])) com_line.cpp:299 89 {*movdi_internal}
     (nil))
(insn 1381 1380 2010 91 (set (reg:DI 3 bx [1029])
        (const_int 8386094131808466271 [0x7461642e736e755f])) com_line.cpp:299 89 {*movdi_internal}
     (nil))
(insn 2010 1381 1382 91 (set (mem:DI (reg/f:DI 0 ax [901]) [0 MEM[(void *)temp_extension_11]+0 S8 A8])
        (reg:DI 3 bx [1029])) com_line.cpp:299 89 {*movdi_internal}
     (nil))
(insn 1382 2010 1383 91 (set (mem:QI (plus:DI (reg/f:DI 0 ax [901])
                (const_int 8 [0x8])) [0 MEM[(void *)temp_extension_11]+8 S1 A8])
        (const_int 0 [0])) com_line.cpp:299 93 {*movqi_internal}
     (nil))
;;  succ:       92 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 92, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 91, next block 93, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91 (FALLTHRU)
;;              90 [100.0%] 
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1383 1382 1384 92 48 "" [1 uses])
(note 1384 1383 1941 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1941 1384 1942 92 (set (pc)
        (label_ref 1874)) com_line.cpp:295 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1942 1941 1387)
;; basic block 93, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 92, next block 94, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 231 232 233 234 235 902 903
(code_label 1387 1942 1388 93 31 "" [1 uses])
(note 1388 1387 1389 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 1389 1388 1390 93 (set (reg:SI 0 ax [902])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:326 90 {*movsi_internal}
     (nil))
(insn 1390 1389 1391 93 (set (reg:DI 0 ax [orig:231 D.6062 ] [231])
        (sign_extend:DI (reg:SI 0 ax [902]))) com_line.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 1391 1390 1392 93 (parallel [
            (set (reg:DI 1 dx [orig:232 D.6062 ] [232])
                (ashift:DI (reg:DI 0 ax [orig:231 D.6062 ] [231])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:326 497 {*ashldi3_1}
     (nil))
(insn 1392 1391 1393 93 (set (reg/f:DI 0 ax [903])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:326 89 {*movdi_internal}
     (nil))
(insn 1393 1392 1394 93 (parallel [
            (set (reg/f:DI 0 ax [orig:233 D.6064 ] [233])
                (plus:DI (reg/f:DI 0 ax [903])
                    (reg:DI 1 dx [orig:232 D.6062 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:326 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:232 D.6062 ] [232]))
        (nil)))
(insn 1394 1393 1395 93 (set (reg/f:DI 0 ax [orig:234 D.6065 ] [234])
        (mem/f:DI (reg/f:DI 0 ax [orig:233 D.6064 ] [233]) [0 *_188+0 S8 A64])) com_line.cpp:326 89 {*movdi_internal}
     (nil))
(insn 1395 1394 1396 93 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x2b4a3dfdfb48 *.LC32>)) com_line.cpp:326 89 {*movdi_internal}
     (nil))
(insn 1396 1395 1397 93 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:234 D.6065 ] [234])) com_line.cpp:326 89 {*movdi_internal}
     (nil))
(call_insn/i 1397 1396 1398 93 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:326 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1398 1397 1399 93 (set (reg:SI 0 ax [orig:235 D.6066 ] [235])
        (reg:SI 0 ax)) com_line.cpp:326 90 {*movsi_internal}
     (nil))
(insn 1399 1398 1400 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:235 D.6066 ] [235])
            (const_int 0 [0]))) com_line.cpp:326 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1400 1399 1401 93 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1451)
            (pc))) com_line.cpp:326 596 {*jcc_1}
     (nil)
 -> 1451)
;;  succ:       94 (FALLTHRU)
;;              97
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 94, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 93, next block 95, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93 (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 236 237 238 239 240 904 905 906 907
(note 1401 1400 1402 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 1402 1401 1403 94 (set (reg/f:DI 0 ax [904])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1403 1402 1404 94 (set (reg:SI 0 ax [orig:236 D.6066 ] [236])
        (mem:SI (reg/f:DI 0 ax [904]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:328 90 {*movsi_internal}
     (nil))
(insn 1404 1403 1405 94 (set (reg:DI 1 dx [orig:237 D.6062 ] [237])
        (sign_extend:DI (reg:SI 0 ax [orig:236 D.6066 ] [236]))) com_line.cpp:328 142 {*extendsidi2_rex64}
     (nil))
(insn 1405 1404 1406 94 (set (reg:DI 0 ax [905])
        (reg:DI 1 dx [orig:237 D.6062 ] [237])) com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1406 1405 1407 94 (parallel [
            (set (reg:DI 0 ax [905])
                (ashift:DI (reg:DI 0 ax [905])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:328 497 {*ashldi3_1}
     (nil))
(insn 1407 1406 1408 94 (parallel [
            (set (reg:DI 0 ax [905])
                (plus:DI (reg:DI 0 ax [905])
                    (reg:DI 1 dx [orig:237 D.6062 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:328 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:237 D.6062 ] [237])
            (const_int 9 [0x9]))
        (nil)))
(insn 1408 1407 1409 94 (parallel [
            (set (reg:DI 0 ax [906])
                (ashift:DI (reg:DI 0 ax [905])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:328 497 {*ashldi3_1}
     (nil))
(insn 1409 1408 1410 94 (set (reg:DI 0 ax [905])
        (reg:DI 0 ax [906])) com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1410 1409 1411 94 (set (reg:DI 1 dx [orig:238 D.6062 ] [238])
        (reg:DI 0 ax [905])) com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1411 1410 1412 94 (set (reg/f:DI 0 ax [907])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1412 1411 1413 94 (parallel [
            (set (reg/f:DI 0 ax [orig:239 D.6063 ] [239])
                (plus:DI (reg/f:DI 0 ax [907])
                    (reg:DI 1 dx [orig:238 D.6062 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:328 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:238 D.6062 ] [238]))
        (nil)))
(insn 1413 1412 1414 94 (set (reg:SI 0 ax [orig:240 D.6066 ] [240])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:239 D.6063 ] [239])
                (const_int 8 [0x8])) [0 _194->scaleby+0 S4 A32])) com_line.cpp:328 90 {*movsi_internal}
     (nil))
(insn 1414 1413 1415 94 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:240 D.6066 ] [240])
            (const_int 0 [0]))) com_line.cpp:328 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1415 1414 1416 94 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1444)
            (pc))) com_line.cpp:328 596 {*jcc_1}
     (nil)
 -> 1444)
;;  succ:       95 (FALLTHRU)
;;              96
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 95, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 94, next block 96, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       94 (FALLTHRU)
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 241 242 243 244 245 246 247 248 908 909 910 911 912 913 914 915 916
(note 1416 1415 1417 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 1417 1416 1418 95 (set (reg/f:DI 0 ax [908])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:329 89 {*movdi_internal}
     (nil))
(insn 1418 1417 1419 95 (set (reg:SI 0 ax [orig:241 D.6066 ] [241])
        (mem:SI (reg/f:DI 0 ax [908]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:329 90 {*movsi_internal}
     (nil))
(insn 1419 1418 1420 95 (set (reg:DI 1 dx [orig:242 D.6062 ] [242])
        (sign_extend:DI (reg:SI 0 ax [orig:241 D.6066 ] [241]))) com_line.cpp:329 142 {*extendsidi2_rex64}
     (nil))
(insn 1420 1419 1421 95 (set (reg:DI 0 ax [909])
        (reg:DI 1 dx [orig:242 D.6062 ] [242])) com_line.cpp:329 89 {*movdi_internal}
     (nil))
(insn 1421 1420 1422 95 (parallel [
            (set (reg:DI 0 ax [909])
                (ashift:DI (reg:DI 0 ax [909])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:329 497 {*ashldi3_1}
     (nil))
(insn 1422 1421 1423 95 (parallel [
            (set (reg:DI 0 ax [909])
                (plus:DI (reg:DI 0 ax [909])
                    (reg:DI 1 dx [orig:242 D.6062 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:329 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:242 D.6062 ] [242])
            (const_int 9 [0x9]))
        (nil)))
(insn 1423 1422 1424 95 (parallel [
            (set (reg:DI 0 ax [910])
                (ashift:DI (reg:DI 0 ax [909])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:329 497 {*ashldi3_1}
     (nil))
(insn 1424 1423 1425 95 (set (reg:DI 0 ax [909])
        (reg:DI 0 ax [910])) com_line.cpp:329 89 {*movdi_internal}
     (nil))
(insn 1425 1424 1426 95 (set (reg:DI 1 dx [orig:243 D.6062 ] [243])
        (reg:DI 0 ax [909])) com_line.cpp:329 89 {*movdi_internal}
     (nil))
(insn 1426 1425 1427 95 (set (reg/f:DI 0 ax [911])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:329 89 {*movdi_internal}
     (nil))
(insn 1427 1426 1428 95 (parallel [
            (set (reg/f:DI 0 ax [orig:244 D.6063 ] [244])
                (plus:DI (reg/f:DI 0 ax [911])
                    (reg:DI 1 dx [orig:243 D.6062 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:329 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:243 D.6062 ] [243]))
        (nil)))
(insn 1428 1427 1429 95 (set (mem/j:SI (reg/f:DI 0 ax [orig:244 D.6063 ] [244]) [0 _199->fid_scale+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:329 90 {*movsi_internal}
     (nil))
(insn 1429 1428 1430 95 (set (reg/f:DI 0 ax [912])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:330 89 {*movdi_internal}
     (nil))
(insn 1430 1429 1431 95 (set (reg:SI 0 ax [orig:245 D.6066 ] [245])
        (mem:SI (reg/f:DI 0 ax [912]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:330 90 {*movsi_internal}
     (nil))
(insn 1431 1430 1432 95 (set (reg:DI 1 dx [orig:246 D.6062 ] [246])
        (sign_extend:DI (reg:SI 0 ax [orig:245 D.6066 ] [245]))) com_line.cpp:330 142 {*extendsidi2_rex64}
     (nil))
(insn 1432 1431 1433 95 (set (reg:DI 0 ax [913])
        (reg:DI 1 dx [orig:246 D.6062 ] [246])) com_line.cpp:330 89 {*movdi_internal}
     (nil))
(insn 1433 1432 1434 95 (parallel [
            (set (reg:DI 0 ax [913])
                (ashift:DI (reg:DI 0 ax [913])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:330 497 {*ashldi3_1}
     (nil))
(insn 1434 1433 1435 95 (parallel [
            (set (reg:DI 0 ax [913])
                (plus:DI (reg:DI 0 ax [913])
                    (reg:DI 1 dx [orig:246 D.6062 ] [246])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:330 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:246 D.6062 ] [246])
            (const_int 9 [0x9]))
        (nil)))
(insn 1435 1434 1436 95 (parallel [
            (set (reg:DI 0 ax [914])
                (ashift:DI (reg:DI 0 ax [913])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:330 497 {*ashldi3_1}
     (nil))
(insn 1436 1435 1437 95 (set (reg:DI 0 ax [913])
        (reg:DI 0 ax [914])) com_line.cpp:330 89 {*movdi_internal}
     (nil))
(insn 1437 1436 1438 95 (set (reg:DI 1 dx [orig:247 D.6062 ] [247])
        (reg:DI 0 ax [913])) com_line.cpp:330 89 {*movdi_internal}
     (nil))
(insn 1438 1437 1439 95 (set (reg/f:DI 0 ax [915])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:330 89 {*movdi_internal}
     (nil))
(insn 1439 1438 1440 95 (parallel [
            (set (reg/f:DI 1 dx [orig:248 D.6063 ] [248])
                (plus:DI (reg:DI 1 dx [orig:247 D.6062 ] [247])
                    (reg/f:DI 0 ax [915])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:330 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:247 D.6062 ] [247]))
        (nil)))
(insn 1440 1439 1441 95 (set (reg:SF 0 ax [916])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) com_line.cpp:330 129 {*movsf_internal}
     (nil))
(insn 1441 1440 1943 95 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:248 D.6063 ] [248])
                (const_int 4 [0x4])) [0 _203->scale_factor+0 S4 A32])
        (reg:SF 0 ax [916])) com_line.cpp:330 129 {*movsf_internal}
     (nil))
(jump_insn 1943 1441 1944 95 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1944 1943 1444)
;; basic block 96, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 95, next block 97, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       94
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 1444 1944 1445 96 50 "" [1 uses])
(note 1445 1444 1446 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 1446 1445 1447 96 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x2b4a3dfdfbe0 *.LC33>)) com_line.cpp:332 89 {*movdi_internal}
     (nil))
(call_insn 1447 1446 1448 96 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:332 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1448 1447 1449 96 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:333 90 {*movsi_internal}
     (nil))
(call_insn 1449 1448 1450 96 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4a3dc61900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:333 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1450 1449 1451)
;; basic block 97, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 96, next block 98, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 249 250 251 252 253 917 918
(code_label 1451 1450 1452 97 49 "" [1 uses])
(note 1452 1451 1453 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 1453 1452 1454 97 (set (reg:SI 0 ax [917])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:336 90 {*movsi_internal}
     (nil))
(insn 1454 1453 1455 97 (set (reg:DI 0 ax [orig:249 D.6062 ] [249])
        (sign_extend:DI (reg:SI 0 ax [917]))) com_line.cpp:336 142 {*extendsidi2_rex64}
     (nil))
(insn 1455 1454 1456 97 (parallel [
            (set (reg:DI 1 dx [orig:250 D.6062 ] [250])
                (ashift:DI (reg:DI 0 ax [orig:249 D.6062 ] [249])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:336 497 {*ashldi3_1}
     (nil))
(insn 1456 1455 1457 97 (set (reg/f:DI 0 ax [918])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:336 89 {*movdi_internal}
     (nil))
(insn 1457 1456 1458 97 (parallel [
            (set (reg/f:DI 0 ax [orig:251 D.6064 ] [251])
                (plus:DI (reg/f:DI 0 ax [918])
                    (reg:DI 1 dx [orig:250 D.6062 ] [250])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:336 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:250 D.6062 ] [250]))
        (nil)))
(insn 1458 1457 1459 97 (set (reg/f:DI 0 ax [orig:252 D.6065 ] [252])
        (mem/f:DI (reg/f:DI 0 ax [orig:251 D.6064 ] [251]) [0 *_206+0 S8 A64])) com_line.cpp:336 89 {*movdi_internal}
     (nil))
(insn 1459 1458 1460 97 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x2b4a3dfdfc78 *.LC34>)) com_line.cpp:336 89 {*movdi_internal}
     (nil))
(insn 1460 1459 1461 97 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:252 D.6065 ] [252])) com_line.cpp:336 89 {*movdi_internal}
     (nil))
(call_insn/i 1461 1460 1462 97 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:336 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1462 1461 1463 97 (set (reg:SI 0 ax [orig:253 D.6066 ] [253])
        (reg:SI 0 ax)) com_line.cpp:336 90 {*movsi_internal}
     (nil))
(insn 1463 1462 1464 97 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:253 D.6066 ] [253])
            (const_int 0 [0]))) com_line.cpp:336 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1464 1463 1465 97 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1526)
            (pc))) com_line.cpp:336 596 {*jcc_1}
     (nil)
 -> 1526)
;;  succ:       98 (FALLTHRU)
;;              101
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 98, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 97, next block 99, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       97 (FALLTHRU)
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 254 255 256 257 258 919 920 921 922
(note 1465 1464 1466 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 1466 1465 1467 98 (set (reg/f:DI 0 ax [919])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:338 89 {*movdi_internal}
     (nil))
(insn 1467 1466 1468 98 (set (reg:SI 0 ax [orig:254 D.6066 ] [254])
        (mem:SI (reg/f:DI 0 ax [919]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:338 90 {*movsi_internal}
     (nil))
(insn 1468 1467 1469 98 (set (reg:DI 1 dx [orig:255 D.6062 ] [255])
        (sign_extend:DI (reg:SI 0 ax [orig:254 D.6066 ] [254]))) com_line.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 1469 1468 1470 98 (set (reg:DI 0 ax [920])
        (reg:DI 1 dx [orig:255 D.6062 ] [255])) com_line.cpp:338 89 {*movdi_internal}
     (nil))
(insn 1470 1469 1471 98 (parallel [
            (set (reg:DI 0 ax [920])
                (ashift:DI (reg:DI 0 ax [920])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:338 497 {*ashldi3_1}
     (nil))
(insn 1471 1470 1472 98 (parallel [
            (set (reg:DI 0 ax [920])
                (plus:DI (reg:DI 0 ax [920])
                    (reg:DI 1 dx [orig:255 D.6062 ] [255])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:338 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:255 D.6062 ] [255])
            (const_int 9 [0x9]))
        (nil)))
(insn 1472 1471 1473 98 (parallel [
            (set (reg:DI 0 ax [921])
                (ashift:DI (reg:DI 0 ax [920])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:338 497 {*ashldi3_1}
     (nil))
(insn 1473 1472 1474 98 (set (reg:DI 0 ax [920])
        (reg:DI 0 ax [921])) com_line.cpp:338 89 {*movdi_internal}
     (nil))
(insn 1474 1473 1475 98 (set (reg:DI 1 dx [orig:256 D.6062 ] [256])
        (reg:DI 0 ax [920])) com_line.cpp:338 89 {*movdi_internal}
     (nil))
(insn 1475 1474 1476 98 (set (reg/f:DI 0 ax [922])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:338 89 {*movdi_internal}
     (nil))
(insn 1476 1475 1477 98 (parallel [
            (set (reg/f:DI 0 ax [orig:257 D.6063 ] [257])
                (plus:DI (reg/f:DI 0 ax [922])
                    (reg:DI 1 dx [orig:256 D.6062 ] [256])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:338 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:256 D.6062 ] [256]))
        (nil)))
(insn 1477 1476 1478 98 (set (reg:SI 0 ax [orig:258 D.6066 ] [258])
        (mem/j:SI (reg/f:DI 0 ax [orig:257 D.6063 ] [257]) [0 _212->fid_scale+0 S4 A32])) com_line.cpp:338 90 {*movsi_internal}
     (nil))
(insn 1478 1477 1479 98 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:258 D.6066 ] [258])
            (const_int 0 [0]))) com_line.cpp:338 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1479 1478 1480 98 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1519)
            (pc))) com_line.cpp:338 596 {*jcc_1}
     (nil)
 -> 1519)
;;  succ:       99 (FALLTHRU)
;;              100
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 99, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 98, next block 100, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       98 (FALLTHRU)
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 259 260 261 262 263 264 265 266 267 268 269 270 271 923 924 925 926 927 928 929 930 931 932
(note 1480 1479 1481 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 1481 1480 1482 99 (set (reg/f:DI 0 ax [923])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1482 1481 1483 99 (set (reg:SI 0 ax [orig:259 D.6066 ] [259])
        (mem:SI (reg/f:DI 0 ax [923]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:339 90 {*movsi_internal}
     (nil))
(insn 1483 1482 1484 99 (set (reg:DI 1 dx [orig:260 D.6062 ] [260])
        (sign_extend:DI (reg:SI 0 ax [orig:259 D.6066 ] [259]))) com_line.cpp:339 142 {*extendsidi2_rex64}
     (nil))
(insn 1484 1483 1485 99 (set (reg:DI 0 ax [924])
        (reg:DI 1 dx [orig:260 D.6062 ] [260])) com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1485 1484 1486 99 (parallel [
            (set (reg:DI 0 ax [924])
                (ashift:DI (reg:DI 0 ax [924])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:339 497 {*ashldi3_1}
     (nil))
(insn 1486 1485 1487 99 (parallel [
            (set (reg:DI 0 ax [924])
                (plus:DI (reg:DI 0 ax [924])
                    (reg:DI 1 dx [orig:260 D.6062 ] [260])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:339 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:260 D.6062 ] [260])
            (const_int 9 [0x9]))
        (nil)))
(insn 1487 1486 1488 99 (parallel [
            (set (reg:DI 0 ax [925])
                (ashift:DI (reg:DI 0 ax [924])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:339 497 {*ashldi3_1}
     (nil))
(insn 1488 1487 1489 99 (set (reg:DI 0 ax [924])
        (reg:DI 0 ax [925])) com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1489 1488 1490 99 (set (reg:DI 1 dx [orig:261 D.6062 ] [261])
        (reg:DI 0 ax [924])) com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1490 1489 1491 99 (set (reg/f:DI 0 ax [926])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1491 1490 1492 99 (parallel [
            (set (reg/f:DI 0 ax [orig:262 D.6063 ] [262])
                (plus:DI (reg/f:DI 0 ax [926])
                    (reg:DI 1 dx [orig:261 D.6062 ] [261])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:339 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:261 D.6062 ] [261]))
        (nil)))
(insn 1492 1491 1493 99 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:262 D.6063 ] [262])
                (const_int 8 [0x8])) [0 _217->scaleby+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:339 90 {*movsi_internal}
     (nil))
(insn 1493 1492 1494 99 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:340 220 {*addsi_1}
     (nil))
(insn 1494 1493 1495 99 (set (reg/f:DI 0 ax [927])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1495 1494 1496 99 (set (reg:SI 0 ax [orig:263 D.6066 ] [263])
        (mem:SI (reg/f:DI 0 ax [927]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:341 90 {*movsi_internal}
     (nil))
(insn 1496 1495 1497 99 (set (reg:DI 1 dx [orig:264 D.6062 ] [264])
        (sign_extend:DI (reg:SI 0 ax [orig:263 D.6066 ] [263]))) com_line.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 1497 1496 1498 99 (set (reg:DI 0 ax [928])
        (reg:DI 1 dx [orig:264 D.6062 ] [264])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1498 1497 1499 99 (parallel [
            (set (reg:DI 0 ax [928])
                (ashift:DI (reg:DI 0 ax [928])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 497 {*ashldi3_1}
     (nil))
(insn 1499 1498 1500 99 (parallel [
            (set (reg:DI 0 ax [928])
                (plus:DI (reg:DI 0 ax [928])
                    (reg:DI 1 dx [orig:264 D.6062 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:264 D.6062 ] [264])
            (const_int 9 [0x9]))
        (nil)))
(insn 1500 1499 1501 99 (parallel [
            (set (reg:DI 0 ax [929])
                (ashift:DI (reg:DI 0 ax [928])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 497 {*ashldi3_1}
     (nil))
(insn 1501 1500 1502 99 (set (reg:DI 0 ax [928])
        (reg:DI 0 ax [929])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1502 1501 1503 99 (set (reg:DI 1 dx [orig:265 D.6062 ] [265])
        (reg:DI 0 ax [928])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1503 1502 1504 99 (set (reg/f:DI 0 ax [930])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1504 1503 1505 99 (parallel [
            (set (reg/f:DI 0 ax [orig:266 D.6063 ] [266])
                (plus:DI (reg/f:DI 0 ax [930])
                    (reg:DI 1 dx [orig:265 D.6062 ] [265])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:265 D.6062 ] [265]))
        (nil)))
(insn 1505 1504 1506 99 (parallel [
            (set (reg/f:DI 1 dx [orig:267 D.6071 ] [267])
                (plus:DI (reg/f:DI 0 ax [orig:266 D.6063 ] [266])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 221 {*adddi_1}
     (nil))
(insn 1506 1505 1507 99 (set (reg:SI 0 ax [931])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:341 90 {*movsi_internal}
     (nil))
(insn 1507 1506 1508 99 (set (reg:DI 0 ax [orig:268 D.6062 ] [268])
        (sign_extend:DI (reg:SI 0 ax [931]))) com_line.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 1508 1507 1509 99 (parallel [
            (set (reg:DI 2 cx [orig:269 D.6062 ] [269])
                (ashift:DI (reg:DI 0 ax [orig:268 D.6062 ] [268])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 497 {*ashldi3_1}
     (nil))
(insn 1509 1508 1510 99 (set (reg/f:DI 0 ax [932])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1510 1509 1511 99 (parallel [
            (set (reg/f:DI 0 ax [orig:270 D.6064 ] [270])
                (plus:DI (reg/f:DI 0 ax [932])
                    (reg:DI 2 cx [orig:269 D.6062 ] [269])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:269 D.6062 ] [269]))
        (nil)))
(insn 1511 1510 1513 99 (set (reg/f:DI 0 ax [orig:271 D.6065 ] [271])
        (mem/f:DI (reg/f:DI 0 ax [orig:270 D.6064 ] [270]) [0 *_226+0 S8 A64])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1513 1511 1514 99 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x2b4a3dfdfd10 *.LC35>)) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1514 1513 1515 99 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:271 D.6065 ] [271])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1515 1514 1516 99 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:341 93 {*movqi_internal}
     (nil))
(call_insn 1516 1515 1945 99 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b4a3dc48900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) com_line.cpp:341 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1945 1516 1946 99 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1946 1945 1519)
;; basic block 100, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 99, next block 101, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       98
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 1519 1946 1520 100 52 "" [1 uses])
(note 1520 1519 1521 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 1521 1520 1522 100 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x2b4a3dfdfbe0 *.LC33>)) com_line.cpp:343 89 {*movdi_internal}
     (nil))
(call_insn 1522 1521 1523 100 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:343 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1523 1522 1524 100 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:344 90 {*movsi_internal}
     (nil))
(call_insn 1524 1523 1525 100 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4a3dc61900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:344 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1525 1524 1526)
;; basic block 101, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 100, next block 102, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       97
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 272 273 274 275 276 933 934
(code_label 1526 1525 1527 101 51 "" [1 uses])
(note 1527 1526 1528 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 1528 1527 1529 101 (set (reg:SI 0 ax [933])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:347 90 {*movsi_internal}
     (nil))
(insn 1529 1528 1530 101 (set (reg:DI 0 ax [orig:272 D.6062 ] [272])
        (sign_extend:DI (reg:SI 0 ax [933]))) com_line.cpp:347 142 {*extendsidi2_rex64}
     (nil))
(insn 1530 1529 1531 101 (parallel [
            (set (reg:DI 1 dx [orig:273 D.6062 ] [273])
                (ashift:DI (reg:DI 0 ax [orig:272 D.6062 ] [272])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:347 497 {*ashldi3_1}
     (nil))
(insn 1531 1530 1532 101 (set (reg/f:DI 0 ax [934])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:347 89 {*movdi_internal}
     (nil))
(insn 1532 1531 1533 101 (parallel [
            (set (reg/f:DI 0 ax [orig:274 D.6064 ] [274])
                (plus:DI (reg/f:DI 0 ax [934])
                    (reg:DI 1 dx [orig:273 D.6062 ] [273])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:347 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:273 D.6062 ] [273]))
        (nil)))
(insn 1533 1532 1534 101 (set (reg/f:DI 0 ax [orig:275 D.6065 ] [275])
        (mem/f:DI (reg/f:DI 0 ax [orig:274 D.6064 ] [274]) [0 *_230+0 S8 A64])) com_line.cpp:347 89 {*movdi_internal}
     (nil))
(insn 1534 1533 1535 101 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x2b4a3dfdfda8 *.LC36>)) com_line.cpp:347 89 {*movdi_internal}
     (nil))
(insn 1535 1534 1536 101 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:275 D.6065 ] [275])) com_line.cpp:347 89 {*movdi_internal}
     (nil))
(call_insn/i 1536 1535 1537 101 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:347 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1537 1536 1538 101 (set (reg:SI 0 ax [orig:276 D.6066 ] [276])
        (reg:SI 0 ax)) com_line.cpp:347 90 {*movsi_internal}
     (nil))
(insn 1538 1537 1539 101 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:276 D.6066 ] [276])
            (const_int 0 [0]))) com_line.cpp:347 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1539 1538 1540 101 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1555)
            (pc))) com_line.cpp:347 596 {*jcc_1}
     (nil)
 -> 1555)
;;  succ:       102 (FALLTHRU)
;;              103
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 102, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 101, next block 103, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       101 (FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 277 278 279 280 935 936 937 938
(note 1540 1539 1541 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 1541 1540 1542 102 (set (reg/f:DI 0 ax [935])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:349 89 {*movdi_internal}
     (nil))
(insn 1542 1541 1543 102 (set (reg:SI 0 ax [orig:277 D.6066 ] [277])
        (mem:SI (reg/f:DI 0 ax [935]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:349 90 {*movsi_internal}
     (nil))
(insn 1543 1542 1544 102 (set (reg:DI 1 dx [orig:278 D.6062 ] [278])
        (sign_extend:DI (reg:SI 0 ax [orig:277 D.6066 ] [277]))) com_line.cpp:349 142 {*extendsidi2_rex64}
     (nil))
(insn 1544 1543 1545 102 (set (reg:DI 0 ax [936])
        (reg:DI 1 dx [orig:278 D.6062 ] [278])) com_line.cpp:349 89 {*movdi_internal}
     (nil))
(insn 1545 1544 1546 102 (parallel [
            (set (reg:DI 0 ax [936])
                (ashift:DI (reg:DI 0 ax [936])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:349 497 {*ashldi3_1}
     (nil))
(insn 1546 1545 1547 102 (parallel [
            (set (reg:DI 0 ax [936])
                (plus:DI (reg:DI 0 ax [936])
                    (reg:DI 1 dx [orig:278 D.6062 ] [278])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:349 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:278 D.6062 ] [278])
            (const_int 9 [0x9]))
        (nil)))
(insn 1547 1546 1548 102 (parallel [
            (set (reg:DI 0 ax [937])
                (ashift:DI (reg:DI 0 ax [936])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:349 497 {*ashldi3_1}
     (nil))
(insn 1548 1547 1549 102 (set (reg:DI 0 ax [936])
        (reg:DI 0 ax [937])) com_line.cpp:349 89 {*movdi_internal}
     (nil))
(insn 1549 1548 1550 102 (set (reg:DI 1 dx [orig:279 D.6062 ] [279])
        (reg:DI 0 ax [936])) com_line.cpp:349 89 {*movdi_internal}
     (nil))
(insn 1550 1549 1551 102 (set (reg/f:DI 0 ax [938])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:349 89 {*movdi_internal}
     (nil))
(insn 1551 1550 1552 102 (parallel [
            (set (reg/f:DI 0 ax [orig:280 D.6063 ] [280])
                (plus:DI (reg/f:DI 0 ax [938])
                    (reg:DI 1 dx [orig:279 D.6062 ] [279])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:349 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:279 D.6062 ] [279]))
        (nil)))
(insn 1552 1551 1947 102 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:280 D.6063 ] [280])
                (const_int 32 [0x20])) [0 _236->max_normalize+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:349 90 {*movsi_internal}
     (nil))
(jump_insn 1947 1552 1948 102 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1948 1947 1555)
;; basic block 103, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 102, next block 104, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       101
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 281 282 283 284 285 939 940
(code_label 1555 1948 1556 103 53 "" [1 uses])
(note 1556 1555 1557 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 1557 1556 1558 103 (set (reg:SI 0 ax [939])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:351 90 {*movsi_internal}
     (nil))
(insn 1558 1557 1559 103 (set (reg:DI 0 ax [orig:281 D.6062 ] [281])
        (sign_extend:DI (reg:SI 0 ax [939]))) com_line.cpp:351 142 {*extendsidi2_rex64}
     (nil))
(insn 1559 1558 1560 103 (parallel [
            (set (reg:DI 1 dx [orig:282 D.6062 ] [282])
                (ashift:DI (reg:DI 0 ax [orig:281 D.6062 ] [281])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:351 497 {*ashldi3_1}
     (nil))
(insn 1560 1559 1561 103 (set (reg/f:DI 0 ax [940])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:351 89 {*movdi_internal}
     (nil))
(insn 1561 1560 1562 103 (parallel [
            (set (reg/f:DI 0 ax [orig:283 D.6064 ] [283])
                (plus:DI (reg/f:DI 0 ax [940])
                    (reg:DI 1 dx [orig:282 D.6062 ] [282])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:351 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:282 D.6062 ] [282]))
        (nil)))
(insn 1562 1561 1563 103 (set (reg/f:DI 0 ax [orig:284 D.6065 ] [284])
        (mem/f:DI (reg/f:DI 0 ax [orig:283 D.6064 ] [283]) [0 *_239+0 S8 A64])) com_line.cpp:351 89 {*movdi_internal}
     (nil))
(insn 1563 1562 1564 103 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x2b4a3dfdfe40 *.LC37>)) com_line.cpp:351 89 {*movdi_internal}
     (nil))
(insn 1564 1563 1565 103 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:284 D.6065 ] [284])) com_line.cpp:351 89 {*movdi_internal}
     (nil))
(call_insn/i 1565 1564 1566 103 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:351 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1566 1565 1567 103 (set (reg:SI 0 ax [orig:285 D.6066 ] [285])
        (reg:SI 0 ax)) com_line.cpp:351 90 {*movsi_internal}
     (nil))
(insn 1567 1566 1568 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:285 D.6066 ] [285])
            (const_int 0 [0]))) com_line.cpp:351 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1568 1567 1569 103 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1584)
            (pc))) com_line.cpp:351 596 {*jcc_1}
     (nil)
 -> 1584)
;;  succ:       104 (FALLTHRU)
;;              105
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 104, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 103, next block 105, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       103 (FALLTHRU)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 286 287 288 289 941 942 943 944
(note 1569 1568 1570 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn 1570 1569 1571 104 (set (reg/f:DI 0 ax [941])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:353 89 {*movdi_internal}
     (nil))
(insn 1571 1570 1572 104 (set (reg:SI 0 ax [orig:286 D.6066 ] [286])
        (mem:SI (reg/f:DI 0 ax [941]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:353 90 {*movsi_internal}
     (nil))
(insn 1572 1571 1573 104 (set (reg:DI 1 dx [orig:287 D.6062 ] [287])
        (sign_extend:DI (reg:SI 0 ax [orig:286 D.6066 ] [286]))) com_line.cpp:353 142 {*extendsidi2_rex64}
     (nil))
(insn 1573 1572 1574 104 (set (reg:DI 0 ax [942])
        (reg:DI 1 dx [orig:287 D.6062 ] [287])) com_line.cpp:353 89 {*movdi_internal}
     (nil))
(insn 1574 1573 1575 104 (parallel [
            (set (reg:DI 0 ax [942])
                (ashift:DI (reg:DI 0 ax [942])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:353 497 {*ashldi3_1}
     (nil))
(insn 1575 1574 1576 104 (parallel [
            (set (reg:DI 0 ax [942])
                (plus:DI (reg:DI 0 ax [942])
                    (reg:DI 1 dx [orig:287 D.6062 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:353 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:287 D.6062 ] [287])
            (const_int 9 [0x9]))
        (nil)))
(insn 1576 1575 1577 104 (parallel [
            (set (reg:DI 0 ax [943])
                (ashift:DI (reg:DI 0 ax [942])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:353 497 {*ashldi3_1}
     (nil))
(insn 1577 1576 1578 104 (set (reg:DI 0 ax [942])
        (reg:DI 0 ax [943])) com_line.cpp:353 89 {*movdi_internal}
     (nil))
(insn 1578 1577 1579 104 (set (reg:DI 1 dx [orig:288 D.6062 ] [288])
        (reg:DI 0 ax [942])) com_line.cpp:353 89 {*movdi_internal}
     (nil))
(insn 1579 1578 1580 104 (set (reg/f:DI 0 ax [944])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:353 89 {*movdi_internal}
     (nil))
(insn 1580 1579 1581 104 (parallel [
            (set (reg/f:DI 0 ax [orig:289 D.6063 ] [289])
                (plus:DI (reg/f:DI 0 ax [944])
                    (reg:DI 1 dx [orig:288 D.6062 ] [288])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:353 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:288 D.6062 ] [288]))
        (nil)))
(insn 1581 1580 1949 104 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:289 D.6063 ] [289])
                (const_int 52 [0x34])) [0 _245->pre_quecc_if+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:353 90 {*movsi_internal}
     (nil))
(jump_insn 1949 1581 1950 104 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1950 1949 1584)
;; basic block 105, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 104, next block 106, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       103
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 290 291 292 293 294 945 946
(code_label 1584 1950 1585 105 54 "" [1 uses])
(note 1585 1584 1586 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 1586 1585 1587 105 (set (reg:SI 0 ax [945])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:355 90 {*movsi_internal}
     (nil))
(insn 1587 1586 1588 105 (set (reg:DI 0 ax [orig:290 D.6062 ] [290])
        (sign_extend:DI (reg:SI 0 ax [945]))) com_line.cpp:355 142 {*extendsidi2_rex64}
     (nil))
(insn 1588 1587 1589 105 (parallel [
            (set (reg:DI 1 dx [orig:291 D.6062 ] [291])
                (ashift:DI (reg:DI 0 ax [orig:290 D.6062 ] [290])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:355 497 {*ashldi3_1}
     (nil))
(insn 1589 1588 1590 105 (set (reg/f:DI 0 ax [946])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:355 89 {*movdi_internal}
     (nil))
(insn 1590 1589 1591 105 (parallel [
            (set (reg/f:DI 0 ax [orig:292 D.6064 ] [292])
                (plus:DI (reg/f:DI 0 ax [946])
                    (reg:DI 1 dx [orig:291 D.6062 ] [291])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:355 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:291 D.6062 ] [291]))
        (nil)))
(insn 1591 1590 1592 105 (set (reg/f:DI 0 ax [orig:293 D.6065 ] [293])
        (mem/f:DI (reg/f:DI 0 ax [orig:292 D.6064 ] [292]) [0 *_248+0 S8 A64])) com_line.cpp:355 89 {*movdi_internal}
     (nil))
(insn 1592 1591 1593 105 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x2b4a3dfdfed8 *.LC38>)) com_line.cpp:355 89 {*movdi_internal}
     (nil))
(insn 1593 1592 1594 105 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:293 D.6065 ] [293])) com_line.cpp:355 89 {*movdi_internal}
     (nil))
(call_insn/i 1594 1593 1595 105 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:355 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1595 1594 1596 105 (set (reg:SI 0 ax [orig:294 D.6066 ] [294])
        (reg:SI 0 ax)) com_line.cpp:355 90 {*movsi_internal}
     (nil))
(insn 1596 1595 1597 105 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:294 D.6066 ] [294])
            (const_int 0 [0]))) com_line.cpp:355 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1597 1596 1598 105 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1625)
            (pc))) com_line.cpp:355 596 {*jcc_1}
     (nil)
 -> 1625)
;;  succ:       106 (FALLTHRU)
;;              107
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 106, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 105, next block 107, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       105 (FALLTHRU)
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 295 296 297 298 299 300 301 302 303 947 948 949 950 951 952
(note 1598 1597 1599 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(insn 1599 1598 1600 106 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:357 220 {*addsi_1}
     (nil))
(insn 1600 1599 1601 106 (set (reg/f:DI 0 ax [947])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1601 1600 1602 106 (set (reg:SI 0 ax [orig:295 D.6066 ] [295])
        (mem:SI (reg/f:DI 0 ax [947]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:358 90 {*movsi_internal}
     (nil))
(insn 1602 1601 1603 106 (set (reg:DI 1 dx [orig:296 D.6062 ] [296])
        (sign_extend:DI (reg:SI 0 ax [orig:295 D.6066 ] [295]))) com_line.cpp:358 142 {*extendsidi2_rex64}
     (nil))
(insn 1603 1602 1604 106 (set (reg:DI 0 ax [948])
        (reg:DI 1 dx [orig:296 D.6062 ] [296])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1604 1603 1605 106 (parallel [
            (set (reg:DI 0 ax [948])
                (ashift:DI (reg:DI 0 ax [948])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 497 {*ashldi3_1}
     (nil))
(insn 1605 1604 1606 106 (parallel [
            (set (reg:DI 0 ax [948])
                (plus:DI (reg:DI 0 ax [948])
                    (reg:DI 1 dx [orig:296 D.6062 ] [296])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:296 D.6062 ] [296])
            (const_int 9 [0x9]))
        (nil)))
(insn 1606 1605 1607 106 (parallel [
            (set (reg:DI 0 ax [949])
                (ashift:DI (reg:DI 0 ax [948])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 497 {*ashldi3_1}
     (nil))
(insn 1607 1606 1608 106 (set (reg:DI 0 ax [948])
        (reg:DI 0 ax [949])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1608 1607 1609 106 (set (reg:DI 1 dx [orig:297 D.6062 ] [297])
        (reg:DI 0 ax [948])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1609 1608 1610 106 (set (reg/f:DI 0 ax [950])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1610 1609 1611 106 (parallel [
            (set (reg/f:DI 0 ax [orig:298 D.6063 ] [298])
                (plus:DI (reg/f:DI 0 ax [950])
                    (reg:DI 1 dx [orig:297 D.6062 ] [297])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:297 D.6062 ] [297]))
        (nil)))
(insn 1611 1610 1612 106 (parallel [
            (set (reg/f:DI 1 dx [orig:299 D.6071 ] [299])
                (plus:DI (reg/f:DI 0 ax [orig:298 D.6063 ] [298])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 221 {*adddi_1}
     (nil))
(insn 1612 1611 1613 106 (set (reg:SI 0 ax [951])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:358 90 {*movsi_internal}
     (nil))
(insn 1613 1612 1614 106 (set (reg:DI 0 ax [orig:300 D.6062 ] [300])
        (sign_extend:DI (reg:SI 0 ax [951]))) com_line.cpp:358 142 {*extendsidi2_rex64}
     (nil))
(insn 1614 1613 1615 106 (parallel [
            (set (reg:DI 2 cx [orig:301 D.6062 ] [301])
                (ashift:DI (reg:DI 0 ax [orig:300 D.6062 ] [300])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 497 {*ashldi3_1}
     (nil))
(insn 1615 1614 1616 106 (set (reg/f:DI 0 ax [952])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1616 1615 1617 106 (parallel [
            (set (reg/f:DI 0 ax [orig:302 D.6064 ] [302])
                (plus:DI (reg/f:DI 0 ax [952])
                    (reg:DI 2 cx [orig:301 D.6062 ] [301])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:301 D.6062 ] [301]))
        (nil)))
(insn 1617 1616 1619 106 (set (reg/f:DI 0 ax [orig:303 D.6065 ] [303])
        (mem/f:DI (reg/f:DI 0 ax [orig:302 D.6064 ] [302]) [0 *_259+0 S8 A64])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1619 1617 1620 106 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x2b4a3dfdfd10 *.LC35>)) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1620 1619 1621 106 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:303 D.6065 ] [303])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1621 1620 1622 106 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:358 93 {*movqi_internal}
     (nil))
(call_insn 1622 1621 1951 106 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b4a3dc48900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) com_line.cpp:358 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1951 1622 1952 106 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1952 1951 1625)
;; basic block 107, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 106, next block 108, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       105
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 304 305 306 307 308 953 954
(code_label 1625 1952 1626 107 55 "" [1 uses])
(note 1626 1625 1627 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 1627 1626 1628 107 (set (reg:SI 0 ax [953])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:360 90 {*movsi_internal}
     (nil))
(insn 1628 1627 1629 107 (set (reg:DI 0 ax [orig:304 D.6062 ] [304])
        (sign_extend:DI (reg:SI 0 ax [953]))) com_line.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 1629 1628 1630 107 (parallel [
            (set (reg:DI 1 dx [orig:305 D.6062 ] [305])
                (ashift:DI (reg:DI 0 ax [orig:304 D.6062 ] [304])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:360 497 {*ashldi3_1}
     (nil))
(insn 1630 1629 1631 107 (set (reg/f:DI 0 ax [954])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:360 89 {*movdi_internal}
     (nil))
(insn 1631 1630 1632 107 (parallel [
            (set (reg/f:DI 0 ax [orig:306 D.6064 ] [306])
                (plus:DI (reg/f:DI 0 ax [954])
                    (reg:DI 1 dx [orig:305 D.6062 ] [305])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:360 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:305 D.6062 ] [305]))
        (nil)))
(insn 1632 1631 1633 107 (set (reg/f:DI 0 ax [orig:307 D.6065 ] [307])
        (mem/f:DI (reg/f:DI 0 ax [orig:306 D.6064 ] [306]) [0 *_263+0 S8 A64])) com_line.cpp:360 89 {*movdi_internal}
     (nil))
(insn 1633 1632 1634 107 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x2b4a3e019000 *.LC39>)) com_line.cpp:360 89 {*movdi_internal}
     (nil))
(insn 1634 1633 1635 107 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:307 D.6065 ] [307])) com_line.cpp:360 89 {*movdi_internal}
     (nil))
(call_insn/i 1635 1634 1636 107 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:360 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1636 1635 1637 107 (set (reg:SI 0 ax [orig:308 D.6066 ] [308])
        (reg:SI 0 ax)) com_line.cpp:360 90 {*movsi_internal}
     (nil))
(insn 1637 1636 1638 107 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:308 D.6066 ] [308])
            (const_int 0 [0]))) com_line.cpp:360 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1638 1637 1639 107 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1654)
            (pc))) com_line.cpp:360 596 {*jcc_1}
     (nil)
 -> 1654)
;;  succ:       108 (FALLTHRU)
;;              109
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 108, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 107, next block 109, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       107 (FALLTHRU)
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 309 310 311 312 955 956 957 958
(note 1639 1638 1640 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(insn 1640 1639 1641 108 (set (reg/f:DI 0 ax [955])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:362 89 {*movdi_internal}
     (nil))
(insn 1641 1640 1642 108 (set (reg:SI 0 ax [orig:309 D.6066 ] [309])
        (mem:SI (reg/f:DI 0 ax [955]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:362 90 {*movsi_internal}
     (nil))
(insn 1642 1641 1643 108 (set (reg:DI 1 dx [orig:310 D.6062 ] [310])
        (sign_extend:DI (reg:SI 0 ax [orig:309 D.6066 ] [309]))) com_line.cpp:362 142 {*extendsidi2_rex64}
     (nil))
(insn 1643 1642 1644 108 (set (reg:DI 0 ax [956])
        (reg:DI 1 dx [orig:310 D.6062 ] [310])) com_line.cpp:362 89 {*movdi_internal}
     (nil))
(insn 1644 1643 1645 108 (parallel [
            (set (reg:DI 0 ax [956])
                (ashift:DI (reg:DI 0 ax [956])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:362 497 {*ashldi3_1}
     (nil))
(insn 1645 1644 1646 108 (parallel [
            (set (reg:DI 0 ax [956])
                (plus:DI (reg:DI 0 ax [956])
                    (reg:DI 1 dx [orig:310 D.6062 ] [310])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:362 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:310 D.6062 ] [310])
            (const_int 9 [0x9]))
        (nil)))
(insn 1646 1645 1647 108 (parallel [
            (set (reg:DI 0 ax [957])
                (ashift:DI (reg:DI 0 ax [956])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:362 497 {*ashldi3_1}
     (nil))
(insn 1647 1646 1648 108 (set (reg:DI 0 ax [956])
        (reg:DI 0 ax [957])) com_line.cpp:362 89 {*movdi_internal}
     (nil))
(insn 1648 1647 1649 108 (set (reg:DI 1 dx [orig:311 D.6062 ] [311])
        (reg:DI 0 ax [956])) com_line.cpp:362 89 {*movdi_internal}
     (nil))
(insn 1649 1648 1650 108 (set (reg/f:DI 0 ax [958])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:362 89 {*movdi_internal}
     (nil))
(insn 1650 1649 1651 108 (parallel [
            (set (reg/f:DI 0 ax [orig:312 D.6063 ] [312])
                (plus:DI (reg/f:DI 0 ax [958])
                    (reg:DI 1 dx [orig:311 D.6062 ] [311])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:362 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:311 D.6062 ] [311]))
        (nil)))
(insn 1651 1650 1953 108 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:312 D.6063 ] [312])
                (const_int 16 [0x10])) [0 _269->bc+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:362 90 {*movsi_internal}
     (nil))
(jump_insn 1953 1651 1954 108 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1954 1953 1654)
;; basic block 109, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 108, next block 110, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       107
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 313 314 315 316 317 959 960
(code_label 1654 1954 1655 109 56 "" [1 uses])
(note 1655 1654 1656 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(insn 1656 1655 1657 109 (set (reg:SI 0 ax [959])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:364 90 {*movsi_internal}
     (nil))
(insn 1657 1656 1658 109 (set (reg:DI 0 ax [orig:313 D.6062 ] [313])
        (sign_extend:DI (reg:SI 0 ax [959]))) com_line.cpp:364 142 {*extendsidi2_rex64}
     (nil))
(insn 1658 1657 1659 109 (parallel [
            (set (reg:DI 1 dx [orig:314 D.6062 ] [314])
                (ashift:DI (reg:DI 0 ax [orig:313 D.6062 ] [313])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:364 497 {*ashldi3_1}
     (nil))
(insn 1659 1658 1660 109 (set (reg/f:DI 0 ax [960])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:364 89 {*movdi_internal}
     (nil))
(insn 1660 1659 1661 109 (parallel [
            (set (reg/f:DI 0 ax [orig:315 D.6064 ] [315])
                (plus:DI (reg/f:DI 0 ax [960])
                    (reg:DI 1 dx [orig:314 D.6062 ] [314])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:364 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:314 D.6062 ] [314]))
        (nil)))
(insn 1661 1660 1662 109 (set (reg/f:DI 0 ax [orig:316 D.6065 ] [316])
        (mem/f:DI (reg/f:DI 0 ax [orig:315 D.6064 ] [315]) [0 *_272+0 S8 A64])) com_line.cpp:364 89 {*movdi_internal}
     (nil))
(insn 1662 1661 1663 109 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x2b4a3e019098 *.LC40>)) com_line.cpp:364 89 {*movdi_internal}
     (nil))
(insn 1663 1662 1664 109 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:316 D.6065 ] [316])) com_line.cpp:364 89 {*movdi_internal}
     (nil))
(call_insn/i 1664 1663 1665 109 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:364 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1665 1664 1666 109 (set (reg:SI 0 ax [orig:317 D.6066 ] [317])
        (reg:SI 0 ax)) com_line.cpp:364 90 {*movsi_internal}
     (nil))
(insn 1666 1665 1667 109 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:317 D.6066 ] [317])
            (const_int 0 [0]))) com_line.cpp:364 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1667 1666 1668 109 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1683)
            (pc))) com_line.cpp:364 596 {*jcc_1}
     (nil)
 -> 1683)
;;  succ:       110 (FALLTHRU)
;;              111
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 110, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 109, next block 111, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       109 (FALLTHRU)
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 318 319 320 321 961 962 963 964
(note 1668 1667 1669 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(insn 1669 1668 1670 110 (set (reg/f:DI 0 ax [961])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1670 1669 1671 110 (set (reg:SI 0 ax [orig:318 D.6066 ] [318])
        (mem:SI (reg/f:DI 0 ax [961]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:366 90 {*movsi_internal}
     (nil))
(insn 1671 1670 1672 110 (set (reg:DI 1 dx [orig:319 D.6062 ] [319])
        (sign_extend:DI (reg:SI 0 ax [orig:318 D.6066 ] [318]))) com_line.cpp:366 142 {*extendsidi2_rex64}
     (nil))
(insn 1672 1671 1673 110 (set (reg:DI 0 ax [962])
        (reg:DI 1 dx [orig:319 D.6062 ] [319])) com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1673 1672 1674 110 (parallel [
            (set (reg:DI 0 ax [962])
                (ashift:DI (reg:DI 0 ax [962])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:366 497 {*ashldi3_1}
     (nil))
(insn 1674 1673 1675 110 (parallel [
            (set (reg:DI 0 ax [962])
                (plus:DI (reg:DI 0 ax [962])
                    (reg:DI 1 dx [orig:319 D.6062 ] [319])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:366 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:319 D.6062 ] [319])
            (const_int 9 [0x9]))
        (nil)))
(insn 1675 1674 1676 110 (parallel [
            (set (reg:DI 0 ax [963])
                (ashift:DI (reg:DI 0 ax [962])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:366 497 {*ashldi3_1}
     (nil))
(insn 1676 1675 1677 110 (set (reg:DI 0 ax [962])
        (reg:DI 0 ax [963])) com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1677 1676 1678 110 (set (reg:DI 1 dx [orig:320 D.6062 ] [320])
        (reg:DI 0 ax [962])) com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1678 1677 1679 110 (set (reg/f:DI 0 ax [964])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1679 1678 1680 110 (parallel [
            (set (reg/f:DI 0 ax [orig:321 D.6063 ] [321])
                (plus:DI (reg/f:DI 0 ax [964])
                    (reg:DI 1 dx [orig:320 D.6062 ] [320])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:366 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:320 D.6062 ] [320]))
        (nil)))
(insn 1680 1679 1955 110 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:321 D.6063 ] [321])
                (const_int 68 [0x44])) [0 _278->tilt+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:366 90 {*movsi_internal}
     (nil))
(jump_insn 1955 1680 1956 110 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1956 1955 1683)
;; basic block 111, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 110, next block 112, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       109
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 322 323 324 325 326 965 966
(code_label 1683 1956 1684 111 57 "" [1 uses])
(note 1684 1683 1685 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(insn 1685 1684 1686 111 (set (reg:SI 0 ax [965])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:368 90 {*movsi_internal}
     (nil))
(insn 1686 1685 1687 111 (set (reg:DI 0 ax [orig:322 D.6062 ] [322])
        (sign_extend:DI (reg:SI 0 ax [965]))) com_line.cpp:368 142 {*extendsidi2_rex64}
     (nil))
(insn 1687 1686 1688 111 (parallel [
            (set (reg:DI 1 dx [orig:323 D.6062 ] [323])
                (ashift:DI (reg:DI 0 ax [orig:322 D.6062 ] [322])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:368 497 {*ashldi3_1}
     (nil))
(insn 1688 1687 1689 111 (set (reg/f:DI 0 ax [966])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:368 89 {*movdi_internal}
     (nil))
(insn 1689 1688 1690 111 (parallel [
            (set (reg/f:DI 0 ax [orig:324 D.6064 ] [324])
                (plus:DI (reg/f:DI 0 ax [966])
                    (reg:DI 1 dx [orig:323 D.6062 ] [323])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:368 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:323 D.6062 ] [323]))
        (nil)))
(insn 1690 1689 1691 111 (set (reg/f:DI 0 ax [orig:325 D.6065 ] [325])
        (mem/f:DI (reg/f:DI 0 ax [orig:324 D.6064 ] [324]) [0 *_281+0 S8 A64])) com_line.cpp:368 89 {*movdi_internal}
     (nil))
(insn 1691 1690 1692 111 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC41") [flags 0x2]  <var_decl 0x2b4a3e019130 *.LC41>)) com_line.cpp:368 89 {*movdi_internal}
     (nil))
(insn 1692 1691 1693 111 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:325 D.6065 ] [325])) com_line.cpp:368 89 {*movdi_internal}
     (nil))
(call_insn/i 1693 1692 1694 111 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:368 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1694 1693 1695 111 (set (reg:SI 0 ax [orig:326 D.6066 ] [326])
        (reg:SI 0 ax)) com_line.cpp:368 90 {*movsi_internal}
     (nil))
(insn 1695 1694 1696 111 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:326 D.6066 ] [326])
            (const_int 0 [0]))) com_line.cpp:368 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1696 1695 1697 111 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1712)
            (pc))) com_line.cpp:368 596 {*jcc_1}
     (nil)
 -> 1712)
;;  succ:       112 (FALLTHRU)
;;              113
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 112, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 111, next block 113, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       111 (FALLTHRU)
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 327 328 329 330 967 968 969 970
(note 1697 1696 1698 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(insn 1698 1697 1699 112 (set (reg/f:DI 0 ax [967])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1699 1698 1700 112 (set (reg:SI 0 ax [orig:327 D.6066 ] [327])
        (mem:SI (reg/f:DI 0 ax [967]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:370 90 {*movsi_internal}
     (nil))
(insn 1700 1699 1701 112 (set (reg:DI 1 dx [orig:328 D.6062 ] [328])
        (sign_extend:DI (reg:SI 0 ax [orig:327 D.6066 ] [327]))) com_line.cpp:370 142 {*extendsidi2_rex64}
     (nil))
(insn 1701 1700 1702 112 (set (reg:DI 0 ax [968])
        (reg:DI 1 dx [orig:328 D.6062 ] [328])) com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1702 1701 1703 112 (parallel [
            (set (reg:DI 0 ax [968])
                (ashift:DI (reg:DI 0 ax [968])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:370 497 {*ashldi3_1}
     (nil))
(insn 1703 1702 1704 112 (parallel [
            (set (reg:DI 0 ax [968])
                (plus:DI (reg:DI 0 ax [968])
                    (reg:DI 1 dx [orig:328 D.6062 ] [328])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:370 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:328 D.6062 ] [328])
            (const_int 9 [0x9]))
        (nil)))
(insn 1704 1703 1705 112 (parallel [
            (set (reg:DI 0 ax [969])
                (ashift:DI (reg:DI 0 ax [968])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:370 497 {*ashldi3_1}
     (nil))
(insn 1705 1704 1706 112 (set (reg:DI 0 ax [968])
        (reg:DI 0 ax [969])) com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1706 1705 1707 112 (set (reg:DI 1 dx [orig:329 D.6062 ] [329])
        (reg:DI 0 ax [968])) com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1707 1706 1708 112 (set (reg/f:DI 0 ax [970])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1708 1707 1709 112 (parallel [
            (set (reg/f:DI 0 ax [orig:330 D.6063 ] [330])
                (plus:DI (reg/f:DI 0 ax [970])
                    (reg:DI 1 dx [orig:329 D.6062 ] [329])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:370 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:329 D.6062 ] [329]))
        (nil)))
(insn 1709 1708 1957 112 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:330 D.6063 ] [330])
                (const_int 20 [0x14])) [0 _287->file_type+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:370 90 {*movsi_internal}
     (nil))
(jump_insn 1957 1709 1958 112 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1958 1957 1712)
;; basic block 113, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 112, next block 114, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       111
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 331 332 333 334 335 971 972
(code_label 1712 1958 1713 113 58 "" [1 uses])
(note 1713 1712 1714 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn 1714 1713 1715 113 (set (reg:SI 0 ax [971])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:372 90 {*movsi_internal}
     (nil))
(insn 1715 1714 1716 113 (set (reg:DI 0 ax [orig:331 D.6062 ] [331])
        (sign_extend:DI (reg:SI 0 ax [971]))) com_line.cpp:372 142 {*extendsidi2_rex64}
     (nil))
(insn 1716 1715 1717 113 (parallel [
            (set (reg:DI 1 dx [orig:332 D.6062 ] [332])
                (ashift:DI (reg:DI 0 ax [orig:331 D.6062 ] [331])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:372 497 {*ashldi3_1}
     (nil))
(insn 1717 1716 1718 113 (set (reg/f:DI 0 ax [972])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:372 89 {*movdi_internal}
     (nil))
(insn 1718 1717 1719 113 (parallel [
            (set (reg/f:DI 0 ax [orig:333 D.6064 ] [333])
                (plus:DI (reg/f:DI 0 ax [972])
                    (reg:DI 1 dx [orig:332 D.6062 ] [332])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:372 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:332 D.6062 ] [332]))
        (nil)))
(insn 1719 1718 1720 113 (set (reg/f:DI 0 ax [orig:334 D.6065 ] [334])
        (mem/f:DI (reg/f:DI 0 ax [orig:333 D.6064 ] [333]) [0 *_290+0 S8 A64])) com_line.cpp:372 89 {*movdi_internal}
     (nil))
(insn 1720 1719 1721 113 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC42") [flags 0x2]  <var_decl 0x2b4a3e0191c8 *.LC42>)) com_line.cpp:372 89 {*movdi_internal}
     (nil))
(insn 1721 1720 1722 113 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:334 D.6065 ] [334])) com_line.cpp:372 89 {*movdi_internal}
     (nil))
(call_insn/i 1722 1721 1723 113 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:372 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1723 1722 1724 113 (set (reg:SI 0 ax [orig:335 D.6066 ] [335])
        (reg:SI 0 ax)) com_line.cpp:372 90 {*movsi_internal}
     (nil))
(insn 1724 1723 1725 113 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:335 D.6066 ] [335])
            (const_int 0 [0]))) com_line.cpp:372 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1725 1724 1726 113 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1741)
            (pc))) com_line.cpp:372 596 {*jcc_1}
     (nil)
 -> 1741)
;;  succ:       114 (FALLTHRU)
;;              115
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 114, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 113, next block 115, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       113 (FALLTHRU)
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 336 337 338 339 973 974 975 976
(note 1726 1725 1727 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(insn 1727 1726 1728 114 (set (reg/f:DI 0 ax [973])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:374 89 {*movdi_internal}
     (nil))
(insn 1728 1727 1729 114 (set (reg:SI 0 ax [orig:336 D.6066 ] [336])
        (mem:SI (reg/f:DI 0 ax [973]) [0 *fid_168(D)+0 S4 A32])) com_line.cpp:374 90 {*movsi_internal}
     (nil))
(insn 1729 1728 1730 114 (set (reg:DI 1 dx [orig:337 D.6062 ] [337])
        (sign_extend:DI (reg:SI 0 ax [orig:336 D.6066 ] [336]))) com_line.cpp:374 142 {*extendsidi2_rex64}
     (nil))
(insn 1730 1729 1731 114 (set (reg:DI 0 ax [974])
        (reg:DI 1 dx [orig:337 D.6062 ] [337])) com_line.cpp:374 89 {*movdi_internal}
     (nil))
(insn 1731 1730 1732 114 (parallel [
            (set (reg:DI 0 ax [974])
                (ashift:DI (reg:DI 0 ax [974])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:374 497 {*ashldi3_1}
     (nil))
(insn 1732 1731 1733 114 (parallel [
            (set (reg:DI 0 ax [974])
                (plus:DI (reg:DI 0 ax [974])
                    (reg:DI 1 dx [orig:337 D.6062 ] [337])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:374 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:337 D.6062 ] [337])
            (const_int 9 [0x9]))
        (nil)))
(insn 1733 1732 1734 114 (parallel [
            (set (reg:DI 0 ax [975])
                (ashift:DI (reg:DI 0 ax [974])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:374 497 {*ashldi3_1}
     (nil))
(insn 1734 1733 1735 114 (set (reg:DI 0 ax [974])
        (reg:DI 0 ax [975])) com_line.cpp:374 89 {*movdi_internal}
     (nil))
(insn 1735 1734 1736 114 (set (reg:DI 1 dx [orig:338 D.6062 ] [338])
        (reg:DI 0 ax [974])) com_line.cpp:374 89 {*movdi_internal}
     (nil))
(insn 1736 1735 1737 114 (set (reg/f:DI 0 ax [976])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:374 89 {*movdi_internal}
     (nil))
(insn 1737 1736 1738 114 (parallel [
            (set (reg/f:DI 0 ax [orig:339 D.6063 ] [339])
                (plus:DI (reg/f:DI 0 ax [976])
                    (reg:DI 1 dx [orig:338 D.6062 ] [338])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:374 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:338 D.6062 ] [338]))
        (nil)))
(insn 1738 1737 1959 114 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:339 D.6063 ] [339])
                (const_int 20 [0x14])) [0 _296->file_type+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:374 90 {*movsi_internal}
     (nil))
(jump_insn 1959 1738 1960 114 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1960 1959 1741)
;; basic block 115, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 114, next block 116, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       113
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 340 341 342 343 344 977 978
(code_label 1741 1960 1742 115 59 "" [1 uses])
(note 1742 1741 1743 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(insn 1743 1742 1744 115 (set (reg:SI 0 ax [977])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:376 90 {*movsi_internal}
     (nil))
(insn 1744 1743 1745 115 (set (reg:DI 0 ax [orig:340 D.6062 ] [340])
        (sign_extend:DI (reg:SI 0 ax [977]))) com_line.cpp:376 142 {*extendsidi2_rex64}
     (nil))
(insn 1745 1744 1746 115 (parallel [
            (set (reg:DI 1 dx [orig:341 D.6062 ] [341])
                (ashift:DI (reg:DI 0 ax [orig:340 D.6062 ] [340])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:376 497 {*ashldi3_1}
     (nil))
(insn 1746 1745 1747 115 (set (reg/f:DI 0 ax [978])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:376 89 {*movdi_internal}
     (nil))
(insn 1747 1746 1748 115 (parallel [
            (set (reg/f:DI 0 ax [orig:342 D.6064 ] [342])
                (plus:DI (reg/f:DI 0 ax [978])
                    (reg:DI 1 dx [orig:341 D.6062 ] [341])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:376 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:341 D.6062 ] [341]))
        (nil)))
(insn 1748 1747 1749 115 (set (reg/f:DI 0 ax [orig:343 D.6065 ] [343])
        (mem/f:DI (reg/f:DI 0 ax [orig:342 D.6064 ] [342]) [0 *_299+0 S8 A64])) com_line.cpp:376 89 {*movdi_internal}
     (nil))
(insn 1749 1748 1750 115 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC43") [flags 0x2]  <var_decl 0x2b4a3e019260 *.LC43>)) com_line.cpp:376 89 {*movdi_internal}
     (nil))
(insn 1750 1749 1751 115 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:343 D.6065 ] [343])) com_line.cpp:376 89 {*movdi_internal}
     (nil))
(call_insn/i 1751 1750 1752 115 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:376 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1752 1751 1753 115 (set (reg:SI 0 ax [orig:344 D.6066 ] [344])
        (reg:SI 0 ax)) com_line.cpp:376 90 {*movsi_internal}
     (nil))
(insn 1753 1752 1754 115 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:344 D.6066 ] [344])
            (const_int 0 [0]))) com_line.cpp:376 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1754 1753 1755 115 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1798)
            (pc))) com_line.cpp:376 596 {*jcc_1}
     (nil)
 -> 1798)
;;  succ:       116 (FALLTHRU)
;;              117
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 116, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 115, next block 117, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       115 (FALLTHRU)
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 979 980 981 982 983 984 985 986 987 988
(note 1755 1754 1756 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn 1756 1755 1757 116 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:378 220 {*addsi_1}
     (nil))
(insn 1757 1756 1758 116 (set (reg/f:DI 0 ax [979])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1758 1757 1759 116 (parallel [
            (set (reg/f:DI 1 dx [orig:345 D.6072 ] [345])
                (plus:DI (reg/f:DI 0 ax [979])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:379 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 1759 1758 1760 116 (set (reg:SI 0 ax [980])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:379 90 {*movsi_internal}
     (nil))
(insn 1760 1759 1761 116 (set (reg:DI 0 ax [orig:346 D.6062 ] [346])
        (sign_extend:DI (reg:SI 0 ax [980]))) com_line.cpp:379 142 {*extendsidi2_rex64}
     (nil))
(insn 1761 1760 1762 116 (parallel [
            (set (reg:DI 2 cx [orig:347 D.6062 ] [347])
                (ashift:DI (reg:DI 0 ax [orig:346 D.6062 ] [346])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:379 497 {*ashldi3_1}
     (nil))
(insn 1762 1761 1763 116 (set (reg/f:DI 0 ax [981])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1763 1762 1764 116 (parallel [
            (set (reg/f:DI 0 ax [orig:348 D.6064 ] [348])
                (plus:DI (reg/f:DI 0 ax [981])
                    (reg:DI 2 cx [orig:347 D.6062 ] [347])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:379 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:347 D.6062 ] [347]))
        (nil)))
(insn 1764 1763 1766 116 (set (reg/f:DI 0 ax [orig:349 D.6065 ] [349])
        (mem/f:DI (reg/f:DI 0 ax [orig:348 D.6064 ] [348]) [0 *_306+0 S8 A64])) com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1766 1764 1767 116 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC44") [flags 0x2]  <var_decl 0x2b4a3e0192f8 *.LC44>)) com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1767 1766 1768 116 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:349 D.6065 ] [349])) com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1768 1767 1769 116 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:379 93 {*movqi_internal}
     (nil))
(call_insn 1769 1768 1770 116 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b4a3dc48900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) com_line.cpp:379 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 1770 1769 1771 116 (set (reg/f:DI 0 ax [982])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:380 89 {*movdi_internal}
     (nil))
(insn 1771 1770 1772 116 (parallel [
            (set (reg/f:DI 0 ax [orig:350 D.6063 ] [350])
                (plus:DI (reg/f:DI 0 ax [982])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:380 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 1772 1771 1773 116 (parallel [
            (set (reg/f:DI 1 dx [orig:351 D.6072 ] [351])
                (plus:DI (reg/f:DI 0 ax [orig:350 D.6063 ] [350])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:380 221 {*adddi_1}
     (nil))
(insn 1773 1772 1774 116 (set (reg:SI 0 ax [983])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:380 90 {*movsi_internal}
     (nil))
(insn 1774 1773 1775 116 (set (reg:DI 0 ax [orig:352 D.6062 ] [352])
        (sign_extend:DI (reg:SI 0 ax [983]))) com_line.cpp:380 142 {*extendsidi2_rex64}
     (nil))
(insn 1775 1774 1776 116 (parallel [
            (set (reg:DI 2 cx [orig:353 D.6062 ] [353])
                (ashift:DI (reg:DI 0 ax [orig:352 D.6062 ] [352])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:380 497 {*ashldi3_1}
     (nil))
(insn 1776 1775 1777 116 (set (reg/f:DI 0 ax [984])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:380 89 {*movdi_internal}
     (nil))
(insn 1777 1776 1778 116 (parallel [
            (set (reg/f:DI 0 ax [orig:354 D.6064 ] [354])
                (plus:DI (reg/f:DI 0 ax [984])
                    (reg:DI 2 cx [orig:353 D.6062 ] [353])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:380 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:353 D.6062 ] [353]))
        (nil)))
(insn 1778 1777 1780 116 (set (reg/f:DI 0 ax [orig:355 D.6065 ] [355])
        (mem/f:DI (reg/f:DI 0 ax [orig:354 D.6064 ] [354]) [0 *_312+0 S8 A64])) com_line.cpp:380 89 {*movdi_internal}
     (nil))
(insn 1780 1778 1781 116 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC44") [flags 0x2]  <var_decl 0x2b4a3e0192f8 *.LC44>)) com_line.cpp:380 89 {*movdi_internal}
     (nil))
(insn 1781 1780 1782 116 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:355 D.6065 ] [355])) com_line.cpp:380 89 {*movdi_internal}
     (nil))
(insn 1782 1781 1783 116 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:380 93 {*movqi_internal}
     (nil))
(call_insn 1783 1782 1784 116 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b4a3dc48900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) com_line.cpp:380 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 1784 1783 1785 116 (set (reg/f:DI 0 ax [985])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:381 89 {*movdi_internal}
     (nil))
(insn 1785 1784 1786 116 (set (reg:SI 0 ax [orig:356 D.6066 ] [356])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [985])
                (const_int 24 [0x18])) [0 preprocess_16(D)->data_zero_fill+0 S4 A32])) com_line.cpp:381 90 {*movsi_internal}
     (nil))
(insn 1786 1785 1787 116 (parallel [
            (set (reg:SI 1 dx [orig:357 D.6066 ] [357])
                (ashift:SI (reg:SI 0 ax [orig:356 D.6066 ] [356])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:381 496 {*ashlsi3_1}
     (nil))
(insn 1787 1786 1788 116 (set (reg/f:DI 0 ax [986])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:381 89 {*movdi_internal}
     (nil))
(insn 1788 1787 1789 116 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [986])
                (const_int 24 [0x18])) [0 preprocess_16(D)->data_zero_fill+0 S4 A32])
        (reg:SI 1 dx [orig:357 D.6066 ] [357])) com_line.cpp:381 90 {*movsi_internal}
     (nil))
(insn 1789 1788 1790 116 (set (reg/f:DI 0 ax [987])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:382 89 {*movdi_internal}
     (nil))
(insn 1790 1789 1791 116 (parallel [
            (set (reg/f:DI 0 ax [orig:358 D.6063 ] [358])
                (plus:DI (reg/f:DI 0 ax [987])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:382 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 1791 1790 1792 116 (set (reg/f:DI 1 dx [988])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:382 89 {*movdi_internal}
     (nil))
(insn 1792 1791 1793 116 (parallel [
            (set (reg/f:DI 1 dx [orig:359 D.6063 ] [359])
                (plus:DI (reg/f:DI 1 dx [988])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:382 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 1793 1792 1794 116 (set (reg:SI 1 dx [orig:360 D.6066 ] [360])
        (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:359 D.6063 ] [359])
                (const_int 24 [0x18])) [0 _317->data_zero_fill+0 S4 A32])) com_line.cpp:382 90 {*movsi_internal}
     (nil))
(insn 1794 1793 1795 116 (parallel [
            (set (reg:SI 1 dx [orig:361 D.6066 ] [361])
                (ashift:SI (reg:SI 1 dx [orig:360 D.6066 ] [360])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:382 496 {*ashlsi3_1}
     (nil))
(insn 1795 1794 1961 116 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:358 D.6063 ] [358])
                (const_int 24 [0x18])) [0 _316->data_zero_fill+0 S4 A32])
        (reg:SI 1 dx [orig:361 D.6066 ] [361])) com_line.cpp:382 90 {*movsi_internal}
     (nil))
(jump_insn 1961 1795 1962 116 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1962 1961 1798)
;; basic block 117, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 116, next block 118, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       115
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 362 363 364 365 366 989 990
(code_label 1798 1962 1799 117 60 "" [1 uses])
(note 1799 1798 1800 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(insn 1800 1799 1801 117 (set (reg:SI 0 ax [989])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:384 90 {*movsi_internal}
     (nil))
(insn 1801 1800 1802 117 (set (reg:DI 0 ax [orig:362 D.6062 ] [362])
        (sign_extend:DI (reg:SI 0 ax [989]))) com_line.cpp:384 142 {*extendsidi2_rex64}
     (nil))
(insn 1802 1801 1803 117 (parallel [
            (set (reg:DI 1 dx [orig:363 D.6062 ] [363])
                (ashift:DI (reg:DI 0 ax [orig:362 D.6062 ] [362])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:384 497 {*ashldi3_1}
     (nil))
(insn 1803 1802 1804 117 (set (reg/f:DI 0 ax [990])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:384 89 {*movdi_internal}
     (nil))
(insn 1804 1803 1805 117 (parallel [
            (set (reg/f:DI 0 ax [orig:364 D.6064 ] [364])
                (plus:DI (reg/f:DI 0 ax [990])
                    (reg:DI 1 dx [orig:363 D.6062 ] [363])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:384 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:363 D.6062 ] [363]))
        (nil)))
(insn 1805 1804 1806 117 (set (reg/f:DI 0 ax [orig:365 D.6065 ] [365])
        (mem/f:DI (reg/f:DI 0 ax [orig:364 D.6064 ] [364]) [0 *_322+0 S8 A64])) com_line.cpp:384 89 {*movdi_internal}
     (nil))
(insn 1806 1805 1807 117 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b4a3dfc28e8 *.LC2>)) com_line.cpp:384 89 {*movdi_internal}
     (nil))
(insn 1807 1806 1808 117 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:365 D.6065 ] [365])) com_line.cpp:384 89 {*movdi_internal}
     (nil))
(call_insn/i 1808 1807 1809 117 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:384 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1809 1808 1810 117 (set (reg:SI 0 ax [orig:366 D.6066 ] [366])
        (reg:SI 0 ax)) com_line.cpp:384 90 {*movsi_internal}
     (nil))
(insn 1810 1809 1811 117 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:366 D.6066 ] [366])
            (const_int 0 [0]))) com_line.cpp:384 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1811 1810 1812 117 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1817)
            (pc))) com_line.cpp:384 596 {*jcc_1}
     (nil)
 -> 1817)
;;  succ:       118 (FALLTHRU)
;;              119
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 118, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 117, next block 119, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       117 (FALLTHRU)
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 1812 1811 1813 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(insn 1813 1812 1814 118 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC45") [flags 0x2]  <var_decl 0x2b4a3e019390 *.LC45>)) com_line.cpp:385 89 {*movdi_internal}
     (nil))
(call_insn 1814 1813 1963 118 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:385 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1963 1814 1964 118 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1964 1963 1817)
;; basic block 119, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 118, next block 120, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       117
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 367 368 369 370 371 991 992
(code_label 1817 1964 1818 119 61 "" [1 uses])
(note 1818 1817 1819 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(insn 1819 1818 1820 119 (set (reg:SI 0 ax [991])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:387 90 {*movsi_internal}
     (nil))
(insn 1820 1819 1821 119 (set (reg:DI 0 ax [orig:367 D.6062 ] [367])
        (sign_extend:DI (reg:SI 0 ax [991]))) com_line.cpp:387 142 {*extendsidi2_rex64}
     (nil))
(insn 1821 1820 1822 119 (parallel [
            (set (reg:DI 1 dx [orig:368 D.6062 ] [368])
                (ashift:DI (reg:DI 0 ax [orig:367 D.6062 ] [367])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:387 497 {*ashldi3_1}
     (nil))
(insn 1822 1821 1823 119 (set (reg/f:DI 0 ax [992])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:387 89 {*movdi_internal}
     (nil))
(insn 1823 1822 1824 119 (parallel [
            (set (reg/f:DI 0 ax [orig:369 D.6064 ] [369])
                (plus:DI (reg/f:DI 0 ax [992])
                    (reg:DI 1 dx [orig:368 D.6062 ] [368])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:387 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:368 D.6062 ] [368]))
        (nil)))
(insn 1824 1823 1825 119 (set (reg/f:DI 0 ax [orig:370 D.6065 ] [370])
        (mem/f:DI (reg/f:DI 0 ax [orig:369 D.6064 ] [369]) [0 *_327+0 S8 A64])) com_line.cpp:387 89 {*movdi_internal}
     (nil))
(insn 1825 1824 1826 119 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b4a3dfc2980 *.LC3>)) com_line.cpp:387 89 {*movdi_internal}
     (nil))
(insn 1826 1825 1827 119 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:370 D.6065 ] [370])) com_line.cpp:387 89 {*movdi_internal}
     (nil))
(call_insn/i 1827 1826 1828 119 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:387 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1828 1827 1829 119 (set (reg:SI 0 ax [orig:371 D.6066 ] [371])
        (reg:SI 0 ax)) com_line.cpp:387 90 {*movsi_internal}
     (nil))
(insn 1829 1828 1830 119 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:371 D.6066 ] [371])
            (const_int 0 [0]))) com_line.cpp:387 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1830 1829 1831 119 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1836)
            (pc))) com_line.cpp:387 596 {*jcc_1}
     (nil)
 -> 1836)
;;  succ:       120 (FALLTHRU)
;;              121
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 120, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 119, next block 121, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       119 (FALLTHRU)
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 1831 1830 1832 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(insn 1832 1831 1833 120 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC46") [flags 0x2]  <var_decl 0x2b4a3e019428 *.LC46>)) com_line.cpp:388 89 {*movdi_internal}
     (nil))
(call_insn 1833 1832 1965 120 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:388 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1965 1833 1966 120 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1966 1965 1836)
;; basic block 121, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 120, next block 122, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       119
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 372 373 374 375 376 993 994
(code_label 1836 1966 1837 121 62 "" [1 uses])
(note 1837 1836 1838 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(insn 1838 1837 1839 121 (set (reg:SI 0 ax [993])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:390 90 {*movsi_internal}
     (nil))
(insn 1839 1838 1840 121 (set (reg:DI 0 ax [orig:372 D.6062 ] [372])
        (sign_extend:DI (reg:SI 0 ax [993]))) com_line.cpp:390 142 {*extendsidi2_rex64}
     (nil))
(insn 1840 1839 1841 121 (parallel [
            (set (reg:DI 1 dx [orig:373 D.6062 ] [373])
                (ashift:DI (reg:DI 0 ax [orig:372 D.6062 ] [372])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:390 497 {*ashldi3_1}
     (nil))
(insn 1841 1840 1842 121 (set (reg/f:DI 0 ax [994])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:390 89 {*movdi_internal}
     (nil))
(insn 1842 1841 1843 121 (parallel [
            (set (reg/f:DI 0 ax [orig:374 D.6064 ] [374])
                (plus:DI (reg/f:DI 0 ax [994])
                    (reg:DI 1 dx [orig:373 D.6062 ] [373])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:390 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:373 D.6062 ] [373]))
        (nil)))
(insn 1843 1842 1844 121 (set (reg/f:DI 0 ax [orig:375 D.6065 ] [375])
        (mem/f:DI (reg/f:DI 0 ax [orig:374 D.6064 ] [374]) [0 *_332+0 S8 A64])) com_line.cpp:390 89 {*movdi_internal}
     (nil))
(insn 1844 1843 1845 121 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b4a3dfc2a18 *.LC4>)) com_line.cpp:390 89 {*movdi_internal}
     (nil))
(insn 1845 1844 1846 121 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:375 D.6065 ] [375])) com_line.cpp:390 89 {*movdi_internal}
     (nil))
(call_insn/i 1846 1845 1847 121 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4a3dc39300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:390 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1847 1846 1848 121 (set (reg:SI 0 ax [orig:376 D.6066 ] [376])
        (reg:SI 0 ax)) com_line.cpp:390 90 {*movsi_internal}
     (nil))
(insn 1848 1847 1849 121 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:376 D.6066 ] [376])
            (const_int 0 [0]))) com_line.cpp:390 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1849 1848 1850 121 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1867)
            (pc))) com_line.cpp:390 596 {*jcc_1}
     (nil)
 -> 1867)
;;  succ:       122 (FALLTHRU)
;;              123
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 122, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 121, next block 123, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       121 (FALLTHRU)
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 377 378 379 380 381 995 996 997
(note 1850 1849 1851 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn 1851 1850 1852 122 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC47") [flags 0x2]  <var_decl 0x2b4a3e0194c0 *.LC47>)) com_line.cpp:391 89 {*movdi_internal}
     (nil))
(call_insn 1852 1851 1853 122 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:391 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1853 1852 1854 122 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:394 220 {*addsi_1}
     (nil))
(insn 1854 1853 1855 122 (set (reg:SI 0 ax [995])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:395 90 {*movsi_internal}
     (nil))
(insn 1855 1854 1856 122 (set (reg:DI 0 ax [orig:377 D.6062 ] [377])
        (sign_extend:DI (reg:SI 0 ax [995]))) com_line.cpp:395 142 {*extendsidi2_rex64}
     (nil))
(insn 1856 1855 1857 122 (parallel [
            (set (reg:DI 1 dx [orig:378 D.6062 ] [378])
                (ashift:DI (reg:DI 0 ax [orig:377 D.6062 ] [377])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:395 497 {*ashldi3_1}
     (nil))
(insn 1857 1856 1858 122 (set (reg/f:DI 0 ax [996])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:395 89 {*movdi_internal}
     (nil))
(insn 1858 1857 1859 122 (parallel [
            (set (reg/f:DI 0 ax [orig:379 D.6064 ] [379])
                (plus:DI (reg/f:DI 0 ax [996])
                    (reg:DI 1 dx [orig:378 D.6062 ] [378])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:395 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:378 D.6062 ] [378]))
        (nil)))
(insn 1859 1858 1860 122 (set (reg/f:DI 0 ax [orig:380 D.6065 ] [380])
        (mem/f:DI (reg/f:DI 0 ax [orig:379 D.6064 ] [379]) [0 *_338+0 S8 A64])) com_line.cpp:395 89 {*movdi_internal}
     (nil))
(insn 1860 1859 1861 122 (set (reg/f:DI 1 dx [997])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:395 89 {*movdi_internal}
     (nil))
(insn 1861 1860 1862 122 (parallel [
            (set (reg/f:DI 1 dx [orig:381 D.6067 ] [381])
                (plus:DI (reg/f:DI 1 dx [997])
                    (const_int 1536 [0x600])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:395 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1536 [0x600]))
        (nil)))
(insn 1862 1861 1863 122 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:380 D.6065 ] [380])) com_line.cpp:395 89 {*movdi_internal}
     (nil))
(insn 1863 1862 1864 122 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:381 D.6067 ] [381])) com_line.cpp:395 89 {*movdi_internal}
     (nil))
(call_insn 1864 1863 1967 122 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4a3dc39600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:395 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 1967 1864 1968 122 (set (pc)
        (label_ref 1874)) 636 {jump}
     (nil)
 -> 1874)
;;  succ:       124 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1968 1967 1867)
;; basic block 123, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 122, next block 124, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       121
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 1867 1968 1868 123 63 "" [1 uses])
(note 1868 1867 1869 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(insn 1869 1868 1870 123 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC48") [flags 0x2]  <var_decl 0x2b4a3e019558 *.LC48>)) com_line.cpp:398 89 {*movdi_internal}
     (nil))
(call_insn 1870 1869 1871 123 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4a3dc46900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:398 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1871 1870 1872 123 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:399 90 {*movsi_internal}
     (nil))
(call_insn 1872 1871 1873 123 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4a3dc61900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:399 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1873 1872 1874)
;; basic block 124, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 123, next block 125, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       120 [100.0%] 
;;              53 [100.0%] 
;;              92 [100.0%] 
;;              95 [100.0%] 
;;              99 [100.0%] 
;;              102 [100.0%] 
;;              104 [100.0%] 
;;              106 [100.0%] 
;;              108 [100.0%] 
;;              110 [100.0%] 
;;              112 [100.0%] 
;;              114 [100.0%] 
;;              116 [100.0%] 
;;              118 [100.0%] 
;;              122 [100.0%] 
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 215 998
(code_label 1874 1873 1875 124 29 "" [15 uses])
(note 1875 1874 1876 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(insn 1876 1875 1877 124 (set (reg:SI 0 ax [998])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5084 [0xffffffffffffec24])) [0 argc+0 S4 A32])) com_line.cpp:185 90 {*movsi_internal}
     (nil))
(insn 1877 1876 1879 124 (parallel [
            (set (reg:SI 0 ax [orig:215 D.6066 ] [215])
                (plus:SI (reg:SI 0 ax [998])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:185 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5068 [0xffffffffffffec34])) [0 argc+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 1879 1877 1880 124 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:215 D.6066 ] [215])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32]))) com_line.cpp:185 7 {*cmpsi_1}
     (nil))
(jump_insn 1880 1879 1881 124 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1878)
            (pc))) com_line.cpp:185 596 {*jcc_1}
     (nil)
 -> 1878)
;;  succ:       54
;;              125 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 125, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 124, next block 126, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       124 (FALLTHRU)
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 561 562
(note 1881 1880 1882 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(insn 1882 1881 1885 125 (set (reg:SI 0 ax [orig:561 D.6066 ] [561])
        (const_int 1 [0x1])) com_line.cpp:403 90 {*movsi_internal}
     (nil))
(insn 1885 1882 1889 125 (set (reg:SI 0 ax [orig:562 <retval> ] [562])
        (reg:SI 0 ax [orig:561 D.6066 ] [561])) com_line.cpp:403 90 {*movsi_internal}
     (nil))
(insn 1889 1885 1890 125 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:562 <retval> ] [562])) com_line.cpp:404 90 {*movsi_internal}
     (nil))
(insn 1890 1889 1891 125 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.6076+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [1001]))
        ]) com_line.cpp:404 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 1891 1890 1899 125 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1894)
            (pc))) com_line.cpp:404 596 {*jcc_1}
     (nil)
 -> 1894)
;;  succ:       127
;;              126 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 126, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 125, next block 127, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       125 (FALLTHRU)
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 1899 1891 1892 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(call_insn 1892 1899 1893 126 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2b4a3dfb5200 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) com_line.cpp:404 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1893 1892 1894)
;; basic block 127, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 126, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       125
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1894 1893 1900 127 66 "" [1 uses])
(note 1900 1894 1895 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn 1895 1900 1973 127 (use (reg/i:SI 0 ax)) com_line.cpp:404 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 1973 1895 0 NOTE_INSN_DELETED)
