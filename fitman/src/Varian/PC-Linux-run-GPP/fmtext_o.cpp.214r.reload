
;; Function void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*) (_Z10fwrite_ascPcPfP16Data_file_headerP17Data_block_headeriP12Procpar_infoP10Preprocess, funcdef_no=2, decl_uid=5333, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 26:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 44:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 48:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=210 from oldreg=152, assigning class GENERAL_REGS to r210
   51: {r210:SI=r210:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  309: r210:SI=r87:SI
    Inserting insn reload after:
  310: r152:SI=r210:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 52
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 56:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=211 from oldreg=90, assigning class SSE_REGS to r211
   56: r211:SF=r211:SF/r89:SF
      REG_DEAD r89:SF
      REG_DEAD r86:SF
    Inserting insn reload before:
  311: r211:SF=r86:SF
    Inserting insn reload after:
  312: r90:SF=r211:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 60:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 65:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 67:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 68:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 100:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 120
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 122:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 126:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 130:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 136:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 145:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 148:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 155:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 158:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 166:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 169:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 172:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 175:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 178:  (0) r  (1) rm {*movhi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 179:  (0) r  (1) rm {extendhisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 187:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 192:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 195:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 198:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 201:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 204:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 207:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 216:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 218:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 222:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 223:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 224:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 228:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 229:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 230:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 234:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 235:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 236:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 238:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 240:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 243:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 248:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 250:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 253:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 259:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 261
	 Choosing alt 0 in insn 261:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 262:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 264:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 266:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 268:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 273:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 275
	 Choosing alt 0 in insn 275:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 276:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 280:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 282:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 284:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 289:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 292:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 295:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (1) rzw {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17

********** Pseudo live ranges #1: **********

  BB 17
  BB 3
   Insn 302: point = 0
   Insn 28: point = 0
   Insn 27: point = 0
   Insn 26: point = 0
   Insn 25: point = 0
   Insn 24: point = 1
  BB 16
   Insn 297: point = 2
   Insn 296: point = 2
   Insn 295: point = 3
  BB 15
   Insn 293: point = 4
   Insn 292: point = 4
  BB 14
   Insn 290: point = 4
   Insn 289: point = 4
   Insn 288: point = 5
  BB 12
   Insn 306: point = 6
   Insn 253: point = 6
  BB 11
   Insn 250: point = 6
   Insn 249: point = 7
   Insn 248: point = 9
  BB 10
   Insn 246: point = 10
   Insn 245: point = 10
   Insn 244: point = 11
   Insn 243: point = 13
   Insn 242: point = 14
   Insn 241: point = 16
   Insn 240: point = 17
   Insn 239: point = 18
   Insn 238: point = 20
   Insn 237: point = 21
   Insn 236: point = 21
   Insn 235: point = 21
   Insn 234: point = 21
   Insn 233: point = 21
   Insn 232: point = 22
   Insn 231: point = 23
   Insn 230: point = 23
   Insn 229: point = 23
   Insn 228: point = 23
   Insn 227: point = 23
   Insn 226: point = 24
   Insn 225: point = 25
   Insn 224: point = 25
   Insn 223: point = 25
   Insn 222: point = 25
   Insn 221: point = 25
   Insn 220: point = 26
   Insn 219: point = 27
   Insn 218: point = 27
   Insn 217: point = 27
   Insn 216: point = 28
   Insn 215: point = 28
   Insn 214: point = 29
   Insn 213: point = 30
   Insn 212: point = 31
   Insn 211: point = 32
   Insn 210: point = 33
   Insn 209: point = 34
   Insn 208: point = 35
   Insn 207: point = 37
   Insn 206: point = 39
   Insn 205: point = 40
   Insn 204: point = 42
   Insn 203: point = 44
   Insn 202: point = 45
   Insn 201: point = 47
   Insn 200: point = 49
   Insn 199: point = 50
   Insn 198: point = 52
   Insn 197: point = 54
   Insn 196: point = 55
   Insn 195: point = 57
   Insn 194: point = 59
   Insn 193: point = 60
   Insn 192: point = 62
   Insn 191: point = 64
   Insn 190: point = 65
   Insn 189: point = 65
   Insn 188: point = 65
   Insn 187: point = 66
   Insn 186: point = 66
   Insn 185: point = 67
   Insn 184: point = 68
   Insn 183: point = 69
   Insn 182: point = 70
   Insn 181: point = 71
   Insn 180: point = 72
   Insn 179: point = 73
   Insn 178: point = 75
   Insn 177: point = 77
   Insn 176: point = 78
   Insn 175: point = 80
   Insn 174: point = 82
   Insn 173: point = 83
   Insn 172: point = 85
   Insn 171: point = 87
   Insn 170: point = 88
   Insn 169: point = 90
   Insn 168: point = 92
   Insn 167: point = 93
   Insn 166: point = 95
   Insn 165: point = 97
   Insn 164: point = 98
   Insn 163: point = 100
   Insn 162: point = 102
   Insn 161: point = 103
   Insn 160: point = 103
   Insn 159: point = 103
   Insn 158: point = 104
   Insn 157: point = 104
   Insn 156: point = 105
   Insn 155: point = 106
   Insn 154: point = 108
  BB 8
   Insn 304: point = 109
   Insn 139: point = 109
   Insn 138: point = 109
   Insn 137: point = 109
   Insn 136: point = 110
   Insn 135: point = 110
   Insn 134: point = 111
   Insn 133: point = 112
   Insn 132: point = 113
   Insn 131: point = 113
   Insn 130: point = 113
   Insn 129: point = 113
   Insn 128: point = 114
   Insn 127: point = 115
   Insn 126: point = 116
   Insn 125: point = 118
  BB 7
   Insn 122: point = 119
   Insn 121: point = 120
   Insn 120: point = 122
   Insn 119: point = 124
   Insn 118: point = 125
   Insn 117: point = 127
   Insn 116: point = 129
   Insn 115: point = 130
   Insn 114: point = 130
   Insn 113: point = 131
   Insn 112: point = 133
  BB 6
   Insn 109: point = 134
   Insn 108: point = 134
   Insn 107: point = 135
   Insn 106: point = 136
   Insn 105: point = 136
   Insn 104: point = 137
  BB 5
   Insn 102: point = 138
   Insn 101: point = 138
   Insn 100: point = 138
   Insn 99: point = 139
   Insn 98: point = 141
   Insn 97: point = 142
   Insn 96: point = 142
   Insn 95: point = 143
   Insn 94: point = 143
   Insn 93: point = 145
  BB 9
   Insn 151: point = 146
   Insn 150: point = 146
   Insn 149: point = 146
   Insn 148: point = 147
   Insn 147: point = 147
   Insn 146: point = 148
   Insn 145: point = 149
   Insn 144: point = 151
  BB 4
   Insn 91: point = 152
   Insn 90: point = 152
   Insn 89: point = 153
   Insn 88: point = 154
   Insn 87: point = 154
   Insn 86: point = 155
   Insn 85: point = 157
   Insn 84: point = 158
   Insn 83: point = 158
   Insn 82: point = 158
   Insn 81: point = 159
   Insn 80: point = 159
   Insn 79: point = 160
   Insn 78: point = 161
   Insn 77: point = 163
   Insn 76: point = 164
   Insn 75: point = 164
   Insn 74: point = 164
   Insn 73: point = 165
   Insn 72: point = 165
   Insn 71: point = 166
   Insn 70: point = 167
   Insn 69: point = 169
   Insn 68: point = 171
   Insn 67: point = 172
   Insn 66: point = 174
   Insn 65: point = 175
   Insn 64: point = 177
   Insn 63: point = 178
   Insn 62: point = 178
   Insn 61: point = 178
   Insn 60: point = 179
   Insn 59: point = 179
   Insn 58: point = 180
   Insn 57: point = 181
   Insn 312: point = 183
	Hard reg 21 is preferable by r211 with profit 1
   Insn 56: point = 185
   Insn 311: point = 186
	Hard reg 21 is preferable by r211 with profit 1
	Hard reg 22 is preferable by r211 with profit 1
   Insn 55: point = 188
   Insn 54: point = 190
   Insn 53: point = 192
   Insn 52: point = 194
   Insn 310: point = 196
	Hard reg 1 is preferable by r210 with profit 1
   Insn 51: point = 198
   Insn 309: point = 198
   Insn 50: point = 199
   Insn 49: point = 201
   Insn 48: point = 202
   Insn 47: point = 204
   Insn 46: point = 205
   Insn 45: point = 205
   Insn 44: point = 205
   Insn 43: point = 205
   Insn 42: point = 205
   Insn 41: point = 206
   Insn 40: point = 207
   Insn 39: point = 207
   Insn 38: point = 207
   Insn 37: point = 208
   Insn 36: point = 208
   Insn 35: point = 209
   Insn 34: point = 210
   Insn 33: point = 212
  BB 2
   Insn 22: point = 213
   Insn 21: point = 213
   Insn 20: point = 214
   Insn 19: point = 215
   Insn 18: point = 215
   Insn 17: point = 216
   Insn 16: point = 217
   Insn 15: point = 217
   Insn 14: point = 218
   Insn 13: point = 218
   Insn 12: point = 219
   Insn 11: point = 219
   Insn 7: point = 219
   Insn 6: point = 219
   Insn 5: point = 219
   Insn 4: point = 219
   Insn 3: point = 219
   Insn 2: point = 219
  BB 13
   Insn 284: point = 219
   Insn 283: point = 219
   Insn 282: point = 219
   Insn 281: point = 219
   Insn 280: point = 220
   Insn 279: point = 220
   Insn 278: point = 221
   Insn 277: point = 222
   Insn 276: point = 224
   Insn 275: point = 226
   Insn 274: point = 228
   Insn 273: point = 229
   Insn 272: point = 231
   Insn 271: point = 233
   Insn 270: point = 235
   Insn 269: point = 236
   Insn 268: point = 236
   Insn 267: point = 236
   Insn 266: point = 237
   Insn 265: point = 237
   Insn 264: point = 238
   Insn 263: point = 239
   Insn 262: point = 241
   Insn 261: point = 243
   Insn 260: point = 245
   Insn 259: point = 246
   Insn 258: point = 248
   Insn 257: point = 250
 r83: [215..216]
 r84: [213..214]
 r85: [208..210]
 r86: [187..202]
 r87: [195..199]
 r88: [189..190]
 r89: [185..188]
 r90: [182..183]
 r91: [179..181]
 r92: [168..175]
 r93: [170..172]
 r94: [168..169]
 r95: [165..167]
 r96: [159..161]
 r97: [154..155]
 r98: [152..153]
 r99: [142..143]
 r100: [140..141]
 r101: [134..135]
 r102: [130..131]
 r103: [128..129]
 r104: [126..127]
 r105: [113..116]
 r106: [147..149]
 r107: [104..106]
 r108: [99..100]
 r109: [71..98]
 r110: [94..95]
 r111: [70..93]
 r112: [89..90]
 r113: [69..88]
 r114: [84..85]
 r115: [68..83]
 r116: [79..80]
 r117: [67..78]
 r118: [74..75]
 r119: [66..73]
 r120: [61..62]
 r121: [33..60]
 r122: [56..57]
 r123: [32..55]
 r124: [51..52]
 r125: [31..50]
 r126: [46..47]
 r127: [30..45]
 r128: [41..42]
 r129: [29..40]
 r130: [36..37]
 r131: [28..35]
 r132: [10..14]
 r133: [10..11]
 r134: [247..248]
 r135: [244..246]
 r136: [242..243]
 r137: [240..241]
 r138: [237..239]
 r139: [232..233]
 r140: [230..231]
 r141: [227..229]
 r142: [225..226]
 r143: [223..224]
 r144: [220..222]
 r145: [217..218]
 r146: [0..1]
 r147: [211..212]
 r148: [207..209]
 r149: [205..206]
 r150: [203..204]
 r151: [200..201]
 r152: [195..196]
 r153: [193..194]
 r154: [191..192]
 r155: [178..180]
 r156: [176..177]
 r157: [173..174]
 r158: [170..171]
 r159: [164..166]
 r160: [162..163]
 r161: [158..160]
 r162: [156..157]
 r163: [144..145]
 r164: [138..139]
 r165: [136..137]
 r166: [132..133]
 r167: [123..125]
 r168: [121..122]
 r169: [123..124]
 r170: [119..120]
 r171: [117..118]
 r172: [114..115]
 r173: [110..112]
 r174: [109..111]
 r175: [150..151]
 r176: [146..148]
 r177: [107..108]
 r178: [103..105]
 r179: [101..102]
 r180: [96..97]
 r181: [91..92]
 r182: [86..87]
 r183: [81..82]
 r184: [76..77]
 r185: [65..72]
 r186: [63..64]
 r187: [58..59]
 r188: [53..54]
 r189: [48..49]
 r190: [43..44]
 r191: [38..39]
 r192: [27..34]
 r193: [25..26]
 r194: [23..24]
 r195: [21..22]
 r196: [19..20]
 r197: [17..18]
 r198: [15..16]
 r199: [12..13]
 r200: [8..9]
 r201: [6..7]
 r202: [249..250]
 r203: [244..245]
 r204: [236..238]
 r205: [234..235]
 r206: [227..228]
 r207: [219..221]
 r208: [4..5]
 r209: [2..3]
 r210: [197..198]
 r211: [184..186]
Compressing live ranges: from 251 to 198 - 78%
Ranges after the compression:
 r83: [168..169]
 r84: [166..167]
 r85: [162..163]
 r86: [144..157]
 r87: [152..155]
 r88: [146..147]
 r89: [142..145]
 r90: [140..141]
 r91: [138..139]
 r92: [130..135]
 r93: [132..133]
 r94: [130..131]
 r95: [128..129]
 r96: [124..125]
 r97: [120..121]
 r98: [118..119]
 r99: [110..111]
 r100: [108..109]
 r101: [102..103]
 r102: [98..99]
 r103: [96..97]
 r104: [94..95]
 r105: [84..85]
 r106: [114..115]
 r107: [78..79]
 r108: [74..75]
 r109: [52..73]
 r110: [70..71]
 r111: [52..69]
 r112: [66..67]
 r113: [52..65]
 r114: [62..63]
 r115: [52..61]
 r116: [58..59]
 r117: [52..57]
 r118: [54..55]
 r119: [52..53]
 r120: [48..49]
 r121: [26..47]
 r122: [44..45]
 r123: [26..43]
 r124: [40..41]
 r125: [26..39]
 r126: [36..37]
 r127: [26..35]
 r128: [32..33]
 r129: [26..31]
 r130: [28..29]
 r131: [26..27]
 r132: [10..13]
 r133: [10..11]
 r134: [194..195]
 r135: [192..193]
 r136: [190..191]
 r137: [188..189]
 r138: [186..187]
 r139: [182..183]
 r140: [180..181]
 r141: [178..179]
 r142: [176..177]
 r143: [174..175]
 r144: [172..173]
 r145: [170..171]
 r146: [0..1]
 r147: [164..165]
 r148: [162..163]
 r149: [160..161]
 r150: [158..159]
 r151: [156..157]
 r152: [152..153]
 r153: [150..151]
 r154: [148..149]
 r155: [138..139]
 r156: [136..137]
 r157: [134..135]
 r158: [132..133]
 r159: [128..129]
 r160: [126..127]
 r161: [124..125]
 r162: [122..123]
 r163: [112..113]
 r164: [106..107]
 r165: [104..105]
 r166: [100..101]
 r167: [92..93]
 r168: [90..91]
 r169: [92..93]
 r170: [88..89]
 r171: [86..87]
 r172: [84..85]
 r173: [82..83]
 r174: [82..83]
 r175: [116..117]
 r176: [114..115]
 r177: [80..81]
 r178: [78..79]
 r179: [76..77]
 r180: [72..73]
 r181: [68..69]
 r182: [64..65]
 r183: [60..61]
 r184: [56..57]
 r185: [52..53]
 r186: [50..51]
 r187: [46..47]
 r188: [42..43]
 r189: [38..39]
 r190: [34..35]
 r191: [30..31]
 r192: [26..27]
 r193: [24..25]
 r194: [22..23]
 r195: [20..21]
 r196: [18..19]
 r197: [16..17]
 r198: [14..15]
 r199: [12..13]
 r200: [8..9]
 r201: [6..7]
 r202: [196..197]
 r203: [192..193]
 r204: [186..187]
 r205: [184..185]
 r206: [178..179]
 r207: [172..173]
 r208: [4..5]
 r209: [2..3]
 r210: [154..155]
 r211: [142..143]

********** Assignment #1: **********

	 Assigning to 210 (cl=GENERAL_REGS, orig=152, freq=3, tfirst=210, tfreq=3)...
	   Assign 1 to reload r210 (freq=3)
	 Assigning to 211 (cl=SSE_REGS, orig=90, freq=3, tfirst=211, tfreq=3)...
	   Assign 22 to reload r211 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 34
changing reg in insn 36
changing reg in insn 48
changing reg in insn 50
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 65
changing reg in insn 67
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 78
changing reg in insn 80
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 94
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 107
changing reg in insn 108
changing reg in insn 113
changing reg in insn 114
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 126
changing reg in insn 129
changing reg in insn 145
changing reg in insn 147
changing reg in insn 155
changing reg in insn 157
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 181
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 182
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 183
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 184
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 185
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 186
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 210
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 211
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 212
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 213
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 214
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 215
changing reg in insn 242
changing reg in insn 245
changing reg in insn 244
changing reg in insn 245
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 265
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 275
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 279
changing reg in insn 13
changing reg in insn 15
changing reg in insn 24
changing reg in insn 25
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 61
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 93
changing reg in insn 94
changing reg in insn 99
changing reg in insn 100
changing reg in insn 104
changing reg in insn 105
changing reg in insn 112
changing reg in insn 113
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 119
changing reg in insn 121
changing reg in insn 122
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 133
changing reg in insn 135
changing reg in insn 134
changing reg in insn 137
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 149
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 159
changing reg in insn 162
changing reg in insn 163
changing reg in insn 165
changing reg in insn 166
changing reg in insn 168
changing reg in insn 169
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 180
changing reg in insn 188
changing reg in insn 191
changing reg in insn 192
changing reg in insn 194
changing reg in insn 195
changing reg in insn 197
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 206
changing reg in insn 207
changing reg in insn 209
changing reg in insn 217
changing reg in insn 220
changing reg in insn 221
changing reg in insn 226
changing reg in insn 227
changing reg in insn 232
changing reg in insn 233
changing reg in insn 238
changing reg in insn 239
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 244
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 250
changing reg in insn 257
changing reg in insn 258
changing reg in insn 260
changing reg in insn 264
changing reg in insn 267
changing reg in insn 270
changing reg in insn 271
changing reg in insn 274
changing reg in insn 278
changing reg in insn 281
changing reg in insn 288
changing reg in insn 289
changing reg in insn 295
changing reg in insn 296
deleting insn with uid = 17.
deleting insn with uid = 36.
deleting insn with uid = 310.
deleting insn with uid = 54.
deleting insn with uid = 311.
deleting insn with uid = 59.
deleting insn with uid = 72.
deleting insn with uid = 80.
deleting insn with uid = 89.
deleting insn with uid = 98.
deleting insn with uid = 107.
deleting insn with uid = 116.
deleting insn with uid = 135.
deleting insn with uid = 147.
deleting insn with uid = 157.
deleting insn with uid = 181.
deleting insn with uid = 182.
deleting insn with uid = 183.
deleting insn with uid = 184.
deleting insn with uid = 185.
deleting insn with uid = 186.
deleting insn with uid = 210.
deleting insn with uid = 211.
deleting insn with uid = 212.
deleting insn with uid = 213.
deleting insn with uid = 214.
deleting insn with uid = 215.
deleting insn with uid = 265.
deleting insn with uid = 279.
starting the processing of deferred insns
ending the processing of deferred insns


void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 37[r8] 38[r9]
;;  ref usage 	r0={111d,93u} r1={41d,18u,3e} r2={29d,6u} r4={43d,20u} r5={47d,24u} r6={1d,92u} r7={1d,40u} r8={23d} r9={23d} r10={23d} r11={23d} r12={23d} r13={23d} r14={23d} r15={23d} r17={51d,8u} r18={23d} r19={23d} r20={1d,1u,9e} r21={47d,23u} r22={29d,5u} r23={27d,3u} r24={26d,2u} r25={26d,2u} r26={25d,1u} r27={24d} r28={24d} r29={23d} r30={23d} r31={23d} r32={23d} r33={23d} r34={23d} r35={23d} r36={23d} r37={24d,1u} r38={24d,1u} r39={23d} r40={23d} r45={23d} r46={23d} r47={23d} r48={23d} r49={23d} r50={23d} r51={23d} r52={23d} r53={23d} r54={23d} r55={23d} r56={23d} r57={23d} r58={23d} r59={23d} r60={23d} r61={23d} r62={23d} r63={23d} r64={23d} r65={23d} r66={23d} r67={23d} r68={23d} r69={23d} r70={23d} r71={23d} r72={23d} r73={23d} r74={23d} r75={23d} r76={23d} 
;;    total ref usage 2149{1797d,340u,12e} in 243{220 regular + 23 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 145
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])
        (reg:DI 5 di [ outfile_name ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])
        (reg:DI 4 si [ data ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])
        (reg:DI 2 cx [ block_header ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 index1+0 S4 A32])
        (reg:SI 37 r8 [ index1 ])) fmtext_o.cpp:37 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
        (reg:DI 38 r9 [ procpar_info ])) fmtext_o.cpp:37 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:39 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:41 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:43 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b8e1bf4aa18 *.LC0>)) fmtext_o.cpp:43 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [145])) fmtext_o.cpp:43 89 {*movdi_internal}
     (nil))
(call_insn 16 15 18 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b8e1bc4bd00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:43 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 18 16 19 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (reg/f:DI 0 ax [orig:83 D.6547 ] [83])) fmtext_o.cpp:43 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:43 4 {*cmpdi_ccno_1}
     (nil))
(insn 20 19 21 2 (set (reg:QI 0 ax [orig:84 D.6548 ] [84])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:43 592 {*setcc_qi}
     (nil))
(insn 21 20 22 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 D.6548 ] [84])
            (const_int 0 [0]))) fmtext_o.cpp:43 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 22 21 23 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) fmtext_o.cpp:43 596 {*jcc_1}
     (nil)
 -> 31)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 146
(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:45 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 4 si)
        (reg:DI 0 ax [146])) fmtext_o.cpp:45 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b8e1bf4aab0 *.LC1>)) fmtext_o.cpp:45 89 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:45 93 {*movqi_internal}
     (nil))
(call_insn 28 27 302 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b8e1ba95e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:45 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 302 28 303 3 (set (pc)
        (label_ref 300)) 636 {jump}
     (nil)
 -> 300)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 303 302 31)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 87 88 89 90 91 92 93 94 95 96 97 98 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162
(code_label 31 303 32 4 2 "" [1 uses])
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:SI 1 dx [orig:85 D.6549 ] [85])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [147])
                (const_int 300 [0x12c])) [0 procpar_info_10(D)->num_points+0 S4 A32])) fmtext_o.cpp:48 90 {*movsi_internal}
     (nil))
(insn 35 34 37 4 (set (reg:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 37 35 38 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b8e1bf4ab48 *.LC2>)) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [148])) fmtext_o.cpp:48 89 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:48 93 {*movqi_internal}
     (nil))
(call_insn 40 39 41 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:48 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 41 40 42 4 (set (reg:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [149])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 1 dx)
        (const_int 2 [0x2])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b8e1bf4abe0 *.LC3>)) fmtext_o.cpp:49 89 {*movdi_internal}
     (nil))
(call_insn 46 45 47 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b8e1ba95700 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:49 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SF 22 xmm1 [orig:86 D.6550 ] [86])
        (mem/j:SF (reg/f:DI 0 ax [150]) [0 procpar_info_10(D)->acquision_time+0 S4 A64])) fmtext_o.cpp:50 129 {*movsf_internal}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 50 49 309 4 (set (reg:SI 0 ax [orig:87 D.6549 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [151])
                (const_int 300 [0x12c])) [0 procpar_info_10(D)->num_points+0 S4 A32])) fmtext_o.cpp:50 90 {*movsi_internal}
     (nil))
(insn 309 50 51 4 (set (reg:SI 1 dx [152])
        (reg:SI 0 ax [orig:87 D.6549 ] [87])) fmtext_o.cpp:50 90 {*movsi_internal}
     (nil))
(insn 51 309 52 4 (parallel [
            (set (reg:SI 1 dx [152])
                (lshiftrt:SI (reg:SI 1 dx [152])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:50 529 {*lshrsi3_1}
     (nil))
(insn 52 51 53 4 (parallel [
            (set (reg:SI 0 ax [153])
                (plus:SI (reg:SI 0 ax [orig:87 D.6549 ] [87])
                    (reg:SI 1 dx [152])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:50 220 {*addsi_1}
     (nil))
(insn 53 52 55 4 (parallel [
            (set (reg:SI 0 ax [154])
                (ashiftrt:SI (reg:SI 0 ax [153])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:50 530 {*ashrsi3_1}
     (nil))
(insn 55 53 56 4 (set (reg:SF 21 xmm0 [orig:89 D.6550 ] [89])
        (float:SF (reg:SI 0 ax [orig:88 D.6549 ] [88]))) fmtext_o.cpp:50 199 {*floatsisf2_sse}
     (nil))
(insn 56 55 312 4 (set (reg:SF 22 xmm1 [orig:90 D.6550 ] [90])
        (div:SF (reg:SF 22 xmm1 [orig:90 D.6550 ] [90])
            (reg:SF 21 xmm0 [orig:89 D.6550 ] [89]))) fmtext_o.cpp:50 782 {*fop_sf_1_sse}
     (nil))
(insn 312 56 57 4 (set (reg:SF 21 xmm0 [orig:90 D.6550 ] [90])
        (reg:SF 22 xmm1 [orig:90 D.6550 ] [90])) fmtext_o.cpp:50 129 {*movsf_internal}
     (nil))
(insn 57 312 58 4 (set (reg:DF 21 xmm0 [orig:91 D.6551 ] [91])
        (float_extend:DF (reg:SF 21 xmm0 [orig:90 D.6550 ] [90]))) fmtext_o.cpp:50 152 {*extendsfdf2_sse}
     (nil))
(insn 58 57 60 4 (set (reg:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 60 58 61 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b8e1bf4ac78 *.LC4>)) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [155])) fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:50 93 {*movqi_internal}
     (nil))
(call_insn 63 62 64 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:50 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 64 63 65 4 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg:DF 22 xmm1 [orig:92 D.6551 ] [92])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [156])
                (const_int 304 [0x130])) [0 procpar_info_10(D)->main_frequency+0 S8 A64])) fmtext_o.cpp:51 128 {*movdf_internal}
     (nil))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:DF 21 xmm0 [orig:93 D.6551 ] [93])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [157])
                (const_int 312 [0x138])) [0 procpar_info_10(D)->offset_frequency+0 S8 A64])) fmtext_o.cpp:51 128 {*movdf_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DF 23 xmm2 [158])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S8 A64])) fmtext_o.cpp:51 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 69 68 70 4 (set (reg:DF 21 xmm0 [orig:94 D.6551 ] [94])
        (div:DF (reg:DF 21 xmm0 [orig:93 D.6551 ] [93])
            (reg:DF 23 xmm2 [158]))) fmtext_o.cpp:51 783 {*fop_df_1_sse}
     (nil))
(insn 70 69 71 4 (set (reg:DF 21 xmm0 [orig:95 D.6551 ] [95])
        (plus:DF (reg:DF 21 xmm0 [orig:94 D.6551 ] [94])
            (reg:DF 22 xmm1 [orig:92 D.6551 ] [92]))) fmtext_o.cpp:51 776 {*fop_df_comm_sse}
     (nil))
(insn 71 70 73 4 (set (reg:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 73 71 74 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b8e1bf4ad10 *.LC6>)) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [159])) fmtext_o.cpp:51 89 {*movdi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:51 93 {*movqi_internal}
     (nil))
(call_insn 76 75 77 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:51 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 77 76 78 4 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:SI 1 dx [orig:96 D.6549 ] [96])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [160])
                (const_int 296 [0x128])) [0 procpar_info_10(D)->num_transients+0 S4 A64])) fmtext_o.cpp:52 90 {*movsi_internal}
     (nil))
(insn 79 78 81 4 (set (reg:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 81 79 82 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b8e1bf4ab48 *.LC2>)) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 82 81 83 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [161])) fmtext_o.cpp:52 89 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:52 93 {*movqi_internal}
     (nil))
(call_insn 84 83 85 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:52 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 85 84 86 4 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 86 85 87 4 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.6552 ] [97])
                (plus:DI (reg/f:DI 0 ax [162])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:58 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 87 86 88 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:97 D.6552 ] [97])) fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(call_insn/i 88 87 90 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x2b8e1ba8f200 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:58 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 90 88 91 4 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:98 D.6553 ] [98])
            (const_int 32 [0x20]))) fmtext_o.cpp:58 8 {*cmpdi_1}
     (nil))
(jump_insn 91 90 92 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) fmtext_o.cpp:58 596 {*jcc_1}
     (nil)
 -> 142)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 99 100 163 164
(note 92 91 93 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 5 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:62 89 {*movdi_internal}
     (nil))
(insn 94 93 95 5 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.6552 ] [99])
                (plus:DI (reg/f:DI 0 ax [163])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:62 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 95 94 96 5 (set (reg:SI 4 si)
        (const_int 47 [0x2f])) fmtext_o.cpp:62 90 {*movsi_internal}
     (nil))
(insn 96 95 97 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:99 D.6552 ] [99])) fmtext_o.cpp:62 89 {*movdi_internal}
     (nil))
(call_insn/i 97 96 99 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strrchr") [flags 0x41]  <function_decl 0x2b8e1ba90400 strrchr>) [0 strrchr S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:62 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 99 97 100 5 (parallel [
            (set (reg:DI 0 ax [164])
                (plus:DI (reg/f:DI 0 ax [orig:100 D.6554 ] [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:62 221 {*adddi_1}
     (nil))
(insn 100 99 101 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])
        (reg:DI 0 ax [164])) fmtext_o.cpp:62 89 {*movdi_internal}
     (nil))
(insn 101 100 102 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:63 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 102 101 103 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) fmtext_o.cpp:63 596 {*jcc_1}
     (nil)
 -> 110)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 101 165
(note 103 102 104 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 6 (set (reg:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])) fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(insn 105 104 106 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [165])) fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(call_insn/i 106 105 108 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x2b8e1ba8f200 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:63 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 108 106 109 6 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:101 D.6553 ] [101])
            (const_int 32 [0x20]))) fmtext_o.cpp:63 8 {*cmpdi_1}
     (nil))
(jump_insn 109 108 110 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 123)
            (pc))) fmtext_o.cpp:63 596 {*jcc_1}
     (nil)
 -> 123)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 102 103 104 166 167 168 169 170
(code_label 110 109 111 7 5 "" [1 uses])
(note 111 110 112 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 113 7 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 113 112 114 7 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.6552 ] [102])
                (plus:DI (reg/f:DI 0 ax [166])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 114 113 115 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:102 D.6552 ] [102])) fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(call_insn/i 115 114 117 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x2b8e1ba8f200 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:65 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 117 115 118 7 (parallel [
            (set (reg:DI 0 ax [orig:104 D.6555 ] [104])
                (plus:DI (reg:DI 0 ax [orig:103 D.6553 ] [103])
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 221 {*adddi_1}
     (nil))
(insn 118 117 119 7 (parallel [
            (set (reg:DI 1 dx [167])
                (plus:DI (reg:DI 0 ax [orig:104 D.6555 ] [104])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 221 {*adddi_1}
     (nil))
(insn 119 118 120 7 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 120 119 121 7 (parallel [
            (set (reg:DI 0 ax [168])
                (plus:DI (reg/f:DI 0 ax [169])
                    (reg:DI 1 dx [167])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [167]))
        (nil)))
(insn 121 120 122 7 (parallel [
            (set (reg:DI 0 ax [170])
                (plus:DI (reg:DI 0 ax [168])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:65 221 {*adddi_1}
     (nil))
(insn 122 121 123 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])
        (reg:DI 0 ax [170])) fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 105 171 172 173 174
(code_label 123 122 124 8 6 "" [1 uses])
(note 124 123 125 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 8 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 126 125 127 8 (parallel [
            (set (reg/f:DI 2 cx [orig:105 D.6552 ] [105])
                (plus:DI (reg/f:DI 0 ax [171])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:67 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 127 126 128 8 (set (reg:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 128 127 129 8 (set (reg:DI 1 dx)
        (reg:DI 0 ax [172])) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 129 128 130 8 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:105 D.6552 ] [105])) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 130 129 131 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b8e1bf4ada8 *.LC7>)) fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 131 130 132 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:67 93 {*movqi_internal}
     (nil))
(call_insn 132 131 133 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b8e1ba95e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:67 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 133 132 134 8 (set (reg:DI 1 dx [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 fnptr+0 S8 A64])) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 134 133 136 8 (set (reg:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 136 134 137 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b8e1bf4ae40 *.LC8>)) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 137 136 138 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [174])) fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 138 137 139 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:68 93 {*movqi_internal}
     (nil))
(call_insn 139 138 304 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:68 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 304 139 305 8 (set (pc)
        (label_ref 152)) 636 {jump}
     (nil)
 -> 152)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 305 304 142)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 106 175 176
(code_label 142 305 143 9 4 "" [1 uses])
(note 143 142 144 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 9 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 145 144 146 9 (parallel [
            (set (reg/f:DI 1 dx [orig:106 D.6552 ] [106])
                (plus:DI (reg/f:DI 0 ax [175])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:71 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 146 145 148 9 (set (reg:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 148 146 149 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b8e1bf4ae40 *.LC8>)) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 149 148 150 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [176])) fmtext_o.cpp:71 89 {*movdi_internal}
     (nil))
(insn 150 149 151 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:71 93 {*movqi_internal}
     (nil))
(call_insn 151 150 152 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:71 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199
(code_label 152 151 153 10 7 "" [1 uses])
(note 153 152 154 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 154 153 155 10 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 155 154 156 10 (parallel [
            (set (reg/f:DI 1 dx [orig:107 D.6556 ] [107])
                (plus:DI (reg/f:DI 0 ax [177])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:75 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 156 155 158 10 (set (reg:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 158 156 159 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b8e1bf4ae40 *.LC8>)) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 159 158 160 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [178])) fmtext_o.cpp:75 89 {*movdi_internal}
     (nil))
(insn 160 159 161 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:75 93 {*movqi_internal}
     (nil))
(call_insn 161 160 162 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:75 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 162 161 163 10 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 163 162 164 10 (set (reg:SF 21 xmm0 [orig:108 D.6550 ] [108])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [179])
                (const_int 368 [0x170])) [0 procpar_info_10(D)->vtheta+0 S4 A64])) fmtext_o.cpp:78 129 {*movsf_internal}
     (nil))
(insn 164 163 165 10 (set (reg:DF 25 xmm4 [orig:109 D.6551 ] [109])
        (float_extend:DF (reg:SF 21 xmm0 [orig:108 D.6550 ] [108]))) fmtext_o.cpp:78 152 {*extendsfdf2_sse}
     (nil))
(insn 165 164 166 10 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 166 165 167 10 (set (reg:SF 21 xmm0 [orig:110 D.6550 ] [110])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [180])
                (const_int 352 [0x160])) [0 procpar_info_10(D)->vox3+0 S4 A64])) fmtext_o.cpp:78 129 {*movsf_internal}
     (nil))
(insn 167 166 168 10 (set (reg:DF 24 xmm3 [orig:111 D.6551 ] [111])
        (float_extend:DF (reg:SF 21 xmm0 [orig:110 D.6550 ] [110]))) fmtext_o.cpp:78 152 {*extendsfdf2_sse}
     (nil))
(insn 168 167 169 10 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 169 168 170 10 (set (reg:SF 21 xmm0 [orig:112 D.6550 ] [112])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [181])
                (const_int 348 [0x15c])) [0 procpar_info_10(D)->vox2+0 S4 A32])) fmtext_o.cpp:78 129 {*movsf_internal}
     (nil))
(insn 170 169 171 10 (set (reg:DF 23 xmm2 [orig:113 D.6551 ] [113])
        (float_extend:DF (reg:SF 21 xmm0 [orig:112 D.6550 ] [112]))) fmtext_o.cpp:78 152 {*extendsfdf2_sse}
     (nil))
(insn 171 170 172 10 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 172 171 173 10 (set (reg:SF 21 xmm0 [orig:114 D.6550 ] [114])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [182])
                (const_int 344 [0x158])) [0 procpar_info_10(D)->vox1+0 S4 A64])) fmtext_o.cpp:78 129 {*movsf_internal}
     (nil))
(insn 173 172 174 10 (set (reg:DF 22 xmm1 [orig:115 D.6551 ] [115])
        (float_extend:DF (reg:SF 21 xmm0 [orig:114 D.6550 ] [114]))) fmtext_o.cpp:78 152 {*extendsfdf2_sse}
     (nil))
(insn 174 173 175 10 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 175 174 176 10 (set (reg:SF 21 xmm0 [orig:116 D.6550 ] [116])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [183])
                (const_int 4 [0x4])) [0 preprocess_44(D)->scale_factor+0 S4 A32])) fmtext_o.cpp:78 129 {*movsf_internal}
     (nil))
(insn 176 175 177 10 (set (reg:DF 21 xmm0 [orig:117 D.6551 ] [117])
        (float_extend:DF (reg:SF 21 xmm0 [orig:116 D.6550 ] [116]))) fmtext_o.cpp:78 152 {*extendsfdf2_sse}
     (nil))
(insn 177 176 178 10 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 178 177 179 10 (set (reg:HI 0 ax [orig:118 D.6557 ] [118])
        (mem/j:HI (reg/f:DI 0 ax [184]) [0 block_header_47(D)->scale.number+0 S2 A32])) fmtext_o.cpp:78 92 {*movhi_internal}
     (nil))
(insn 179 178 180 10 (set (reg:SI 1 dx [orig:119 D.6549 ] [119])
        (sign_extend:SI (reg:HI 0 ax [orig:118 D.6557 ] [118]))) fmtext_o.cpp:78 146 {extendhisi2}
     (nil))
(insn 180 179 187 10 (set (reg:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 187 180 188 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b8e1bf4aed8 *.LC9>)) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 188 187 189 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [185])) fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 189 188 190 10 (set (reg:QI 0 ax)
        (const_int 5 [0x5])) fmtext_o.cpp:78 93 {*movqi_internal}
     (nil))
(call_insn 190 189 191 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:78 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:DF (use (reg:DF 21 xmm0))
                        (expr_list:DF (use (reg:DF 22 xmm1))
                            (expr_list:DF (use (reg:DF 23 xmm2))
                                (expr_list:DF (use (reg:DF 24 xmm3))
                                    (expr_list:DF (use (reg:DF 25 xmm4))
                                        (nil)))))))))))
(insn 191 190 192 10 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 192 191 193 10 (set (reg:SF 21 xmm0 [orig:120 D.6550 ] [120])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [186])
                (const_int 328 [0x148])) [0 procpar_info_10(D)->gain+0 S4 A64])) fmtext_o.cpp:81 129 {*movsf_internal}
     (nil))
(insn 193 192 194 10 (set (reg:DF 26 xmm5 [orig:121 D.6551 ] [121])
        (float_extend:DF (reg:SF 21 xmm0 [orig:120 D.6550 ] [120]))) fmtext_o.cpp:81 152 {*extendsfdf2_sse}
     (nil))
(insn 194 193 195 10 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 195 194 196 10 (set (reg:SF 21 xmm0 [orig:122 D.6550 ] [122])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [187])
                (const_int 340 [0x154])) [0 procpar_info_10(D)->pos3+0 S4 A32])) fmtext_o.cpp:81 129 {*movsf_internal}
     (nil))
(insn 196 195 197 10 (set (reg:DF 25 xmm4 [orig:123 D.6551 ] [123])
        (float_extend:DF (reg:SF 21 xmm0 [orig:122 D.6550 ] [122]))) fmtext_o.cpp:81 152 {*extendsfdf2_sse}
     (nil))
(insn 197 196 198 10 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 198 197 199 10 (set (reg:SF 21 xmm0 [orig:124 D.6550 ] [124])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [188])
                (const_int 336 [0x150])) [0 procpar_info_10(D)->pos2+0 S4 A64])) fmtext_o.cpp:81 129 {*movsf_internal}
     (nil))
(insn 199 198 200 10 (set (reg:DF 24 xmm3 [orig:125 D.6551 ] [125])
        (float_extend:DF (reg:SF 21 xmm0 [orig:124 D.6550 ] [124]))) fmtext_o.cpp:81 152 {*extendsfdf2_sse}
     (nil))
(insn 200 199 201 10 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 201 200 202 10 (set (reg:SF 21 xmm0 [orig:126 D.6550 ] [126])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [189])
                (const_int 332 [0x14c])) [0 procpar_info_10(D)->pos1+0 S4 A32])) fmtext_o.cpp:81 129 {*movsf_internal}
     (nil))
(insn 202 201 203 10 (set (reg:DF 23 xmm2 [orig:127 D.6551 ] [127])
        (float_extend:DF (reg:SF 21 xmm0 [orig:126 D.6550 ] [126]))) fmtext_o.cpp:81 152 {*extendsfdf2_sse}
     (nil))
(insn 203 202 204 10 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 204 203 205 10 (set (reg:SF 21 xmm0 [orig:128 D.6550 ] [128])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [190])
                (const_int 324 [0x144])) [0 procpar_info_10(D)->tm+0 S4 A32])) fmtext_o.cpp:81 129 {*movsf_internal}
     (nil))
(insn 205 204 206 10 (set (reg:DF 22 xmm1 [orig:129 D.6551 ] [129])
        (float_extend:DF (reg:SF 21 xmm0 [orig:128 D.6550 ] [128]))) fmtext_o.cpp:81 152 {*extendsfdf2_sse}
     (nil))
(insn 206 205 207 10 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 procpar_info+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 207 206 208 10 (set (reg:SF 21 xmm0 [orig:130 D.6550 ] [130])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [191])
                (const_int 320 [0x140])) [0 procpar_info_10(D)->te+0 S4 A64])) fmtext_o.cpp:81 129 {*movsf_internal}
     (nil))
(insn 208 207 209 10 (set (reg:DF 21 xmm0 [orig:131 D.6551 ] [131])
        (float_extend:DF (reg:SF 21 xmm0 [orig:130 D.6550 ] [130]))) fmtext_o.cpp:81 152 {*extendsfdf2_sse}
     (nil))
(insn 209 208 216 10 (set (reg:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 216 209 217 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b8e1bf72000 *.LC10>)) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 217 216 218 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [192])) fmtext_o.cpp:81 89 {*movdi_internal}
     (nil))
(insn 218 217 219 10 (set (reg:QI 0 ax)
        (const_int 6 [0x6])) fmtext_o.cpp:81 93 {*movqi_internal}
     (nil))
(call_insn 219 218 220 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:81 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (expr_list:DF (use (reg:DF 22 xmm1))
                        (expr_list:DF (use (reg:DF 23 xmm2))
                            (expr_list:DF (use (reg:DF 24 xmm3))
                                (expr_list:DF (use (reg:DF 25 xmm4))
                                    (expr_list:DF (use (reg:DF 26 xmm5))
                                        (nil)))))))))))
(insn 220 219 221 10 (set (reg:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 221 220 222 10 (set (reg:DI 2 cx)
        (reg:DI 0 ax [193])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 222 221 223 10 (set (reg:DI 1 dx)
        (const_int 13 [0xd])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 223 222 224 10 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(insn 224 223 225 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b8e1bf72098 *.LC11>)) fmtext_o.cpp:82 89 {*movdi_internal}
     (nil))
(call_insn 225 224 226 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b8e1ba95700 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:82 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 226 225 227 10 (set (reg:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 227 226 228 10 (set (reg:DI 2 cx)
        (reg:DI 0 ax [194])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 228 227 229 10 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 229 228 230 10 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(insn 230 229 231 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b8e1bf72130 *.LC12>)) fmtext_o.cpp:83 89 {*movdi_internal}
     (nil))
(call_insn 231 230 232 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b8e1ba95700 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:83 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 232 231 233 10 (set (reg:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 233 232 234 10 (set (reg:DI 2 cx)
        (reg:DI 0 ax [195])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 234 233 235 10 (set (reg:DI 1 dx)
        (const_int 6 [0x6])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 235 234 236 10 (set (reg:DI 4 si)
        (const_int 1 [0x1])) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 236 235 237 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b8e1bf721c8 *.LC13>)) fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(call_insn 237 236 238 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b8e1ba95700 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:84 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 238 237 239 10 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:88 89 {*movdi_internal}
     (nil))
(insn 239 238 240 10 (set (reg:SI 0 ax [197])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [196])
                (const_int 8 [0x8])) [0 main_header_62(D)->np.number+0 S4 A32])) fmtext_o.cpp:88 90 {*movsi_internal}
     (nil))
(insn 240 239 241 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 number_output_points+0 S4 A32])
        (reg:SI 0 ax [197])) fmtext_o.cpp:88 90 {*movsi_internal}
     (nil))
(insn 241 240 242 10 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:89 89 {*movdi_internal}
     (nil))
(insn 242 241 243 10 (set (reg:SI 1 dx [orig:132 D.6549 ] [132])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [198])
                (const_int 24 [0x18])) [0 preprocess_44(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:89 90 {*movsi_internal}
     (nil))
(insn 243 242 244 10 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:89 89 {*movdi_internal}
     (nil))
(insn 244 243 245 10 (set (reg:SI 0 ax [orig:133 D.6549 ] [133])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [199])
                (const_int 8 [0x8])) [0 main_header_62(D)->np.number+0 S4 A32])) fmtext_o.cpp:89 90 {*movsi_internal}
     (nil))
(insn 245 244 246 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:132 D.6549 ] [132])
            (reg:SI 0 ax [orig:133 D.6549 ] [133]))) fmtext_o.cpp:89 7 {*cmpsi_1}
     (nil))
(jump_insn 246 245 247 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 251)
            (pc))) fmtext_o.cpp:89 596 {*jcc_1}
     (nil)
 -> 251)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 200 201
(note 247 246 248 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 248 247 249 11 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:90 89 {*movdi_internal}
     (nil))
(insn 249 248 250 11 (set (reg:SI 0 ax [201])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [200])
                (const_int 24 [0x18])) [0 preprocess_44(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:90 90 {*movsi_internal}
     (nil))
(insn 250 249 251 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 number_output_points+0 S4 A32])
        (reg:SI 0 ax [201])) fmtext_o.cpp:90 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 251 250 252 12 8 "" [1 uses])
(note 252 251 253 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 306 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:92 90 {*movsi_internal}
     (nil))
(jump_insn 306 253 307 12 (set (pc)
        (label_ref 285)) fmtext_o.cpp:92 636 {jump}
     (nil)
 -> 285)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 307 306 287)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 134 135 136 137 138 139 140 141 142 143 144 202 203 204 205 206 207
(code_label 287 307 256 13 10 "" [1 uses])
(note 256 287 257 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 257 256 258 13 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:93 90 {*movsi_internal}
     (nil))
(insn 258 257 259 13 (set (reg:DI 0 ax [orig:134 D.6553 ] [134])
        (sign_extend:DI (reg:SI 0 ax [202]))) fmtext_o.cpp:93 142 {*extendsidi2_rex64}
     (nil))
(insn 259 258 260 13 (parallel [
            (set (reg:DI 1 dx [orig:135 D.6553 ] [135])
                (ashift:DI (reg:DI 0 ax [orig:134 D.6553 ] [134])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:93 497 {*ashldi3_1}
     (nil))
(insn 260 259 261 13 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 261 260 262 13 (parallel [
            (set (reg/f:DI 0 ax [orig:136 D.6558 ] [136])
                (plus:DI (reg/f:DI 0 ax [203])
                    (reg:DI 1 dx [orig:135 D.6553 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:93 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:135 D.6553 ] [135]))
        (nil)))
(insn 262 261 263 13 (set (reg:SF 21 xmm0 [orig:137 D.6550 ] [137])
        (mem:SF (reg/f:DI 0 ax [orig:136 D.6558 ] [136]) [0 *_71+0 S4 A32])) fmtext_o.cpp:93 129 {*movsf_internal}
     (nil))
(insn 263 262 264 13 (set (reg:DF 21 xmm0 [orig:138 D.6551 ] [138])
        (float_extend:DF (reg:SF 21 xmm0 [orig:137 D.6550 ] [137]))) fmtext_o.cpp:93 152 {*extendsfdf2_sse}
     (nil))
(insn 264 263 266 13 (set (reg:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 266 264 267 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x2b8e1bf72260 *.LC14>)) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 267 266 268 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [204])) fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 268 267 269 13 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:93 93 {*movqi_internal}
     (nil))
(call_insn 269 268 270 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:93 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 270 269 271 13 (set (reg:SI 0 ax [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:94 90 {*movsi_internal}
     (nil))
(insn 271 270 272 13 (set (reg:DI 0 ax [orig:139 D.6555 ] [139])
        (sign_extend:DI (reg:SI 0 ax [205]))) fmtext_o.cpp:94 142 {*extendsidi2_rex64}
     (nil))
(insn 272 271 273 13 (parallel [
            (set (reg:DI 0 ax [orig:140 D.6555 ] [140])
                (plus:DI (reg:DI 0 ax [orig:139 D.6555 ] [139])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:94 221 {*adddi_1}
     (nil))
(insn 273 272 274 13 (parallel [
            (set (reg:DI 1 dx [orig:141 D.6555 ] [141])
                (ashift:DI (reg:DI 0 ax [orig:140 D.6555 ] [140])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:94 497 {*ashldi3_1}
     (nil))
(insn 274 273 275 13 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 275 274 276 13 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.6558 ] [142])
                (plus:DI (reg/f:DI 0 ax [206])
                    (reg:DI 1 dx [orig:141 D.6555 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:94 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:141 D.6555 ] [141]))
        (nil)))
(insn 276 275 277 13 (set (reg:SF 21 xmm0 [orig:143 D.6550 ] [143])
        (mem:SF (reg/f:DI 0 ax [orig:142 D.6558 ] [142]) [0 *_77+0 S4 A32])) fmtext_o.cpp:94 129 {*movsf_internal}
     (nil))
(insn 277 276 278 13 (set (reg:DF 21 xmm0 [orig:144 D.6551 ] [144])
        (float_extend:DF (reg:SF 21 xmm0 [orig:143 D.6550 ] [143]))) fmtext_o.cpp:94 152 {*extendsfdf2_sse}
     (nil))
(insn 278 277 280 13 (set (reg:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 280 278 281 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x2b8e1bf72260 *.LC14>)) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 281 280 282 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [207])) fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 282 281 283 13 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) fmtext_o.cpp:94 93 {*movqi_internal}
     (nil))
(call_insn 283 282 284 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b8e1ba90d00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:94 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 284 283 285 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:92 220 {*addsi_1}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 208
(code_label 285 284 286 14 9 "" [1 uses])
(note 286 285 288 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 288 286 289 14 (set (reg:SI 0 ax [208])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:92 90 {*movsi_internal}
     (nil))
(insn 289 288 290 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [208])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 number_output_points+0 S4 A32]))) fmtext_o.cpp:92 7 {*cmpsi_1}
     (nil))
(jump_insn 290 289 291 14 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 287)
            (pc))) fmtext_o.cpp:92 596 {*jcc_1}
     (nil)
 -> 287)
;;  succ:       13
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 291 290 292 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 292 291 293 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:98 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 293 292 294 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 300)
            (pc))) fmtext_o.cpp:98 596 {*jcc_1}
     (nil)
 -> 300)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 209
(note 294 293 295 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 295 294 296 16 (set (reg:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(insn 296 295 297 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [209])) fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(call_insn 297 296 300 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b8e1bc4b900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:99 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              15
;;              3 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 300 297 301 17 1 "" [2 uses])
(note 301 300 308 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 308 301 0 NOTE_INSN_DELETED)

;; Function int read_csi_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision3* (*)[100], Precision4* (*)[100], Precision4* (*)[32], int*, PE_info*) (_Z13read_csi_dataPiP10PreprocessP7IOFilesPP16Data_file_headerPP17Data_block_headerP10Precision2PP8_IO_FILEPA100_P10Precision3PA100_P10Precision4PA32_SK_S_P7PE_info, funcdef_no=3, decl_uid=5315, symbol_order=3)

      Creating newreg=702
Removing SCRATCH in insn #21 (nop 2)
rescanning insn with uid = 21.
      Creating newreg=703
Removing SCRATCH in insn #1124 (nop 3)
rescanning insn with uid = 1124.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r702
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=704 from oldreg=379, assigning class GENERAL_REGS to r704
   52: {r704:DI=r704:DI<<0x8;clobber flags:CC;}
      REG_DEAD r377:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1184: r704:DI=r377:DI
    Inserting insn reload after:
 1185: r379:DI=r704:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 64
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 85:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 94:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 115:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 123
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 125:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 151:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 173:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 180:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 205:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 211:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 227:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 230:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 237:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 240:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 243:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 247:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 250:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 256:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 259:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 260:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 269:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 275:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 277
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 279:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) rm  (1) rn {*cmphi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 284:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 286:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 289:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 292
	 Choosing alt 2 in insn 292:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 293:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 295:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 304:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 310:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 318:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 319:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 320:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) rm  (1) rn {*cmphi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 324:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 325:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 326:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 327:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 329:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 330:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 332
	 Choosing alt 2 in insn 332:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 333:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 335:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 339:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 344:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 350:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 358:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 365:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 369:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 372:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 375:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 378:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 379:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 382:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 385:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 389:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 393:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 398:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 402:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 407:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 411:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 413:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 417:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 422:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 426:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 429:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 432:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 434:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 438:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 443:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 449:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 455:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 460:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 464:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 466:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 468:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 469:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 470:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 472:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 476:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 481:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 485:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 487:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 489:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 493:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 498:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 502:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 504:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 506:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 507:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 508:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 510:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 514:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 519:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 523:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 525:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 527:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 531:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 536:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 540:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 542:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 544:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 545:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 546:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 547:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 550:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 551:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 552:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 556
	 Choosing alt 2 in insn 556:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 559:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 562:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 565:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 566:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 569:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 572:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 575:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 576:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 579:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 582:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 586:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 590:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 592:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 593:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 594
	 Choosing alt 0 in insn 594:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 596:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 597:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 599:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 603:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 608:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 609:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 610:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 611:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 612:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 613
	 Choosing alt 0 in insn 613:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 615:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 616:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 617:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 618:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 622:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 623:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 624:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 627:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 628:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 631:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 632:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 635:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 638:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 641:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 642:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 643:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 645:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 648:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 652:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 653:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 654:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 655:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 656
	 Choosing alt 0 in insn 656:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 657:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 658:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 661:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 662:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 663:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 664:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 665
	 Choosing alt 0 in insn 665:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 667:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 670:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 673:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 674:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 676:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=0,overall=12,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 680:  (0) rm  (1) 0 {ashrsi3_cvt}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=14,losers=2 -- refuse
	 Choosing alt 1 in insn 681:  (0) rm  (1) 0  (2) re {*xorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 682:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 683:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 684:  (0) r  (1) l  (2) M {*ashlsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 685:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 686:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 687:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 691:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 695:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 696:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 697:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=705 from oldreg=256, assigning class GENERAL_REGS to r705
  697: {r705:DI=r705:DI<<0x8;clobber flags:CC;}
      REG_DEAD r255:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1186: r705:DI=r255:DI
    Inserting insn reload after:
 1187: r256:DI=r705:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 698:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 699:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 701:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 704:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 707:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 708:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 709:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 710:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 713:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 716:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 719:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 722:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 723:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 725:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 728:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 732:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 736:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 740:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 741:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 742:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=706 from oldreg=266, assigning class GENERAL_REGS to r706
  742: {r706:DI=r706:DI<<0x8;clobber flags:CC;}
      REG_DEAD r265:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1188: r706:DI=r265:DI
    Inserting insn reload after:
 1189: r266:DI=r706:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 743:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 744:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 745:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 746:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 747:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 748:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 749:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 750:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 751
	 Choosing alt 0 in insn 751:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 752:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 753:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 754:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 757:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 758:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 761:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 764:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 767:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 768:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 770:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 773:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 776:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 777:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 779:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 782:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 786:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 790:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 794:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 795:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 796:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 797:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 799:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 800:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 801:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 802:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 803:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 805:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 806:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 807:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 808
	 Choosing alt 0 in insn 808:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 809:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 810:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=707 from oldreg=281, assigning class GENERAL_REGS to r707
  810: {r707:DI=r707:DI<<0x8;clobber flags:CC;}
      REG_DEAD r280:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1190: r707:DI=r280:DI
    Inserting insn reload after:
 1191: r281:DI=r707:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 811:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 812:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 813:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 814:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 815:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 816:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 818:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 819:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 820:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 821:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 822:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 824:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 825:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 826:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 827
	 Choosing alt 0 in insn 827:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 828:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 829:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 830:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 831:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 832:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 833:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 834:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 835:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 836:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 837:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 839:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 840:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 841:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 842:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 843:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 845:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 846:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 847:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 848
	 Choosing alt 0 in insn 848:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 849:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 850:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=708 from oldreg=292, assigning class GENERAL_REGS to r708
  850: {r708:DI=r708:DI<<0x8;clobber flags:CC;}
      REG_DEAD r291:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1192: r708:DI=r291:DI
    Inserting insn reload after:
 1193: r292:DI=r708:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 851:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 852:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 853:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 854:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 855:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 856:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 858:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 859:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 860:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 861:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 862:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 864:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 865:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 866:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 867
	 Choosing alt 0 in insn 867:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 868:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 869:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 870:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 871:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 872:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 873:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 874:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 875:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 876:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 878:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 879:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 880:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 881:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 882:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 885:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 886:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 887:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 888:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 889:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 890:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 891:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 892:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 893:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 894:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 895
	 Choosing alt 0 in insn 895:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 896:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 897:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 900:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 901:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 902:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 904:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 907:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 910:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 911:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 912:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 914:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 917:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 920:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 921:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 922:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 924:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 927:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 931:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 935:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 939:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 940:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 942:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 943:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 944:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 945:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 946:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 949:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 950:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 951:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 952:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 953:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 954:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 955:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 956:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=709 from oldreg=324, assigning class GENERAL_REGS to r709
  956: {r709:DI=r709:DI<<0x8;clobber flags:CC;}
      REG_DEAD r323:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1194: r709:DI=r323:DI
    Inserting insn reload after:
 1195: r324:DI=r709:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 957:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 958:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 959:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 960:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 961:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 962:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 963:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 964:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 965:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 966:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 967:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 968:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 969:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 971:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 972:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 973:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 974:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 975:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 978:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 979:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 980:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 981:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 982:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 983:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 984:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 985:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 986:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 987:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=710 from oldreg=334, assigning class GENERAL_REGS to r710
  987: {r710:DI=r710:DI<<0x8;clobber flags:CC;}
      REG_DEAD r333:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1196: r710:DI=r333:DI
    Inserting insn reload after:
 1197: r334:DI=r710:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 988:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 989:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 990:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 991:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 992:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 993:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 994:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 995:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 996:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 997:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 998:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 999:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1000:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1002:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1003:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1004:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1005:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1006:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1009:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1010:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1011:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1012:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1013:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1014:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1015:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1016:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1017:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1018:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=711 from oldreg=345, assigning class GENERAL_REGS to r711
 1018: {r711:DI=r711:DI<<0x8;clobber flags:CC;}
      REG_DEAD r344:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1198: r711:DI=r344:DI
    Inserting insn reload after:
 1199: r345:DI=r711:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1019:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1020:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1021:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1022:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1023:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1024:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1025:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1026:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1027:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1028:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1029:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1030:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1031:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1033:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1034:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1035:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1036:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1037:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1040:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1041:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1042:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1043:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1044:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1045:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1046:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1047:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1048:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1049:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=712 from oldreg=356, assigning class GENERAL_REGS to r712
 1049: {r712:DI=r712:DI<<0x8;clobber flags:CC;}
      REG_DEAD r355:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1200: r712:DI=r355:DI
    Inserting insn reload after:
 1201: r356:DI=r712:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1050:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1051:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1052:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1053:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1054:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1055:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1056:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1057:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1058:  (0) q  (1) qm {*movqi_internal}
            0 Costly set: reject++
            1 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1059:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1060:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1061:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1064:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1065:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1066:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1067:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1068:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1069:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1070
	 Choosing alt 2 in insn 1070:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1073:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1076:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1079:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1080:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1082:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1085:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1088:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1089:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1091:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1095:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1098:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1099:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1100:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1102:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1105:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1107:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1110:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1113:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1116:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1124:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r703
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1126:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 89
EBB 90

********** Pseudo live ranges #1: **********

  BB 5
   Insn 71: point = 0
   Insn 70: point = 0
   Insn 69: point = 0
   Insn 68: point = 0
  BB 7
   Insn 97: point = 0
   Insn 96: point = 0
   Insn 95: point = 0
   Insn 94: point = 0
  BB 26
   Insn 361: point = 0
   Insn 360: point = 0
   Insn 359: point = 0
   Insn 358: point = 0
  BB 89
   Insn 1126: point = 0
  BB 90
   Insn 1129: point = 0
  BB 88
   Insn 1125: point = 0
   Insn 1124: point = 0
   Insn 1123: point = 1
   Insn 1119: point = 2
   Insn 1116: point = 4
  BB 87
   Insn 1113: point = 5
   Insn 1112: point = 5
   Insn 1111: point = 6
   Insn 1110: point = 8
  BB 86
   Insn 1108: point = 9
   Insn 1107: point = 9
   Insn 1106: point = 10
   Insn 1105: point = 12
  BB 85
   Insn 1103: point = 13
   Insn 1102: point = 13
   Insn 1100: point = 14
   Insn 1099: point = 16
   Insn 1098: point = 18
  BB 2
   Insn 1133: point = 19
   Insn 27: point = 19
   Insn 26: point = 19
   Insn 25: point = 19
   Insn 24: point = 19
   Insn 21: point = 19
   Insn 19: point = 21
   Insn 18: point = 22
   Insn 17: point = 23
   Insn 16: point = 24
   Insn 15: point = 25
   Insn 14: point = 26
   Insn 13: point = 27
   Insn 12: point = 28
   Insn 11: point = 29
   Insn 10: point = 30
   Insn 9: point = 31
   Insn 8: point = 32
   Insn 7: point = 33
   Insn 6: point = 33
   Insn 5: point = 33
   Insn 4: point = 33
   Insn 3: point = 33
   Insn 2: point = 33
  BB 84
   Insn 1095: point = 33
  BB 83
   Insn 1092: point = 33
   Insn 1091: point = 33
   Insn 1089: point = 34
   Insn 1088: point = 36
  BB 75
   Insn 1177: point = 37
   Insn 927: point = 37
  BB 74
   Insn 925: point = 37
   Insn 924: point = 37
   Insn 922: point = 38
   Insn 921: point = 40
   Insn 920: point = 42
  BB 66
   Insn 1171: point = 43
   Insn 782: point = 43
  BB 65
   Insn 780: point = 43
   Insn 779: point = 43
   Insn 777: point = 44
   Insn 776: point = 46
  BB 57
   Insn 1165: point = 47
   Insn 728: point = 47
  BB 56
   Insn 726: point = 47
   Insn 725: point = 47
   Insn 723: point = 48
   Insn 722: point = 50
  BB 51
   Insn 1161: point = 51
   Insn 687: point = 51
   Insn 686: point = 51
   Insn 685: point = 52
   Insn 684: point = 53
   Insn 683: point = 55
   Insn 682: point = 56
   Insn 681: point = 57
   Insn 680: point = 57
   Insn 679: point = 59
  BB 50
   Insn 677: point = 60
   Insn 676: point = 60
   Insn 674: point = 61
   Insn 673: point = 63
  BB 46
   Insn 1159: point = 64
   Insn 648: point = 64
  BB 45
   Insn 646: point = 64
   Insn 645: point = 64
   Insn 643: point = 65
   Insn 642: point = 67
   Insn 641: point = 69
  BB 40
   Insn 1155: point = 70
   Insn 582: point = 70
  BB 39
   Insn 580: point = 70
   Insn 579: point = 70
   Insn 577: point = 71
   Insn 576: point = 73
   Insn 575: point = 75
  BB 31
   Insn 1149: point = 76
   Insn 385: point = 76
  BB 30
   Insn 383: point = 76
   Insn 382: point = 76
   Insn 380: point = 77
   Insn 379: point = 79
   Insn 378: point = 81
  BB 19
   Insn 1141: point = 82
   Insn 250: point = 82
  BB 18
   Insn 248: point = 82
   Insn 247: point = 82
   Insn 245: point = 83
   Insn 244: point = 85
   Insn 243: point = 87
  BB 8
   Insn 1135: point = 88
   Insn 105: point = 88
   Insn 104: point = 88
   Insn 103: point = 89
   Insn 102: point = 91
   Insn 101: point = 93
  BB 6
   Insn 92: point = 94
   Insn 91: point = 94
   Insn 90: point = 95
   Insn 89: point = 96
   Insn 88: point = 97
   Insn 87: point = 98
   Insn 86: point = 98
   Insn 85: point = 99
   Insn 84: point = 99
   Insn 83: point = 99
   Insn 82: point = 100
   Insn 81: point = 102
   Insn 80: point = 103
   Insn 79: point = 105
   Insn 78: point = 107
   Insn 77: point = 108
   Insn 76: point = 110
   Insn 75: point = 112
  BB 4
   Insn 66: point = 113
   Insn 65: point = 113
   Insn 64: point = 114
   Insn 63: point = 116
   Insn 62: point = 117
   Insn 61: point = 119
   Insn 60: point = 121
   Insn 59: point = 122
   Insn 58: point = 123
   Insn 57: point = 124
   Insn 56: point = 124
   Insn 55: point = 125
   Insn 54: point = 125
   Insn 53: point = 127
   Insn 1185: point = 128
	Hard reg 1 is preferable by r704 with profit 1
   Insn 52: point = 130
   Insn 1184: point = 130
	Hard reg 1 is preferable by r704 with profit 1
	Hard reg 0 is preferable by r704 with profit 1
   Insn 51: point = 132
   Insn 50: point = 134
   Insn 49: point = 135
   Insn 48: point = 137
   Insn 47: point = 138
   Insn 46: point = 140
   Insn 45: point = 142
  BB 17
   Insn 240: point = 143
  BB 16
   Insn 238: point = 143
   Insn 237: point = 143
   Insn 235: point = 144
   Insn 234: point = 146
   Insn 233: point = 148
  BB 9
   Insn 1137: point = 149
   Insn 109: point = 149
  BB 15
   Insn 230: point = 149
  BB 12
   Insn 1139: point = 149
   Insn 173: point = 149
   Insn 172: point = 150
   Insn 171: point = 152
   Insn 170: point = 153
   Insn 169: point = 155
   Insn 168: point = 156
   Insn 167: point = 156
   Insn 166: point = 157
   Insn 165: point = 159
   Insn 164: point = 161
   Insn 163: point = 162
   Insn 162: point = 164
   Insn 161: point = 165
   Insn 160: point = 167
   Insn 159: point = 169
   Insn 158: point = 171
   Insn 157: point = 172
   Insn 156: point = 173
   Insn 155: point = 174
   Insn 154: point = 174
   Insn 153: point = 175
   Insn 152: point = 177
   Insn 151: point = 178
   Insn 150: point = 179
   Insn 149: point = 181
   Insn 148: point = 182
   Insn 147: point = 184
   Insn 146: point = 185
   Insn 145: point = 185
   Insn 144: point = 186
   Insn 143: point = 188
   Insn 142: point = 190
   Insn 141: point = 191
   Insn 140: point = 193
   Insn 139: point = 194
   Insn 138: point = 196
   Insn 137: point = 198
   Insn 136: point = 200
   Insn 135: point = 201
   Insn 134: point = 202
   Insn 133: point = 203
   Insn 132: point = 203
   Insn 131: point = 204
   Insn 130: point = 206
  BB 14
   Insn 227: point = 207
   Insn 226: point = 208
   Insn 225: point = 210
   Insn 224: point = 211
   Insn 223: point = 213
   Insn 222: point = 214
   Insn 221: point = 214
   Insn 220: point = 215
   Insn 219: point = 217
   Insn 218: point = 219
   Insn 217: point = 220
   Insn 216: point = 222
   Insn 215: point = 223
   Insn 214: point = 225
   Insn 213: point = 227
   Insn 212: point = 229
   Insn 211: point = 230
   Insn 210: point = 231
   Insn 209: point = 232
   Insn 208: point = 232
   Insn 207: point = 233
   Insn 206: point = 235
   Insn 205: point = 236
   Insn 204: point = 237
   Insn 203: point = 239
   Insn 202: point = 240
   Insn 201: point = 242
   Insn 200: point = 243
   Insn 199: point = 243
   Insn 198: point = 244
   Insn 197: point = 246
   Insn 196: point = 248
   Insn 195: point = 249
   Insn 194: point = 251
   Insn 193: point = 252
   Insn 192: point = 254
   Insn 191: point = 256
   Insn 190: point = 258
   Insn 189: point = 259
   Insn 188: point = 260
   Insn 187: point = 261
   Insn 186: point = 261
   Insn 185: point = 262
   Insn 184: point = 264
  BB 13
   Insn 182: point = 265
   Insn 181: point = 265
   Insn 180: point = 266
   Insn 179: point = 268
   Insn 178: point = 270
  BB 11
   Insn 127: point = 271
   Insn 126: point = 271
   Insn 125: point = 272
   Insn 124: point = 274
   Insn 123: point = 276
   Insn 122: point = 278
   Insn 121: point = 279
   Insn 120: point = 281
   Insn 119: point = 283
  BB 10
   Insn 117: point = 284
   Insn 116: point = 284
   Insn 115: point = 285
   Insn 114: point = 287
   Insn 113: point = 289
  BB 29
   Insn 375: point = 290
  BB 28
   Insn 373: point = 290
   Insn 372: point = 290
   Insn 370: point = 291
   Insn 369: point = 293
   Insn 368: point = 295
  BB 20
   Insn 1143: point = 296
   Insn 263: point = 296
   Insn 262: point = 296
   Insn 261: point = 296
   Insn 260: point = 297
   Insn 259: point = 297
   Insn 258: point = 297
   Insn 257: point = 298
   Insn 256: point = 300
   Insn 255: point = 301
   Insn 254: point = 303
  BB 27
   Insn 365: point = 304
  BB 25
   Insn 1147: point = 304
   Insn 353: point = 304
   Insn 352: point = 304
   Insn 351: point = 305
   Insn 350: point = 306
   Insn 349: point = 306
   Insn 348: point = 307
   Insn 347: point = 309
   Insn 346: point = 311
   Insn 345: point = 312
   Insn 344: point = 314
   Insn 343: point = 315
   Insn 342: point = 317
   Insn 341: point = 319
   Insn 340: point = 321
   Insn 339: point = 322
   Insn 338: point = 323
   Insn 337: point = 324
   Insn 336: point = 324
   Insn 335: point = 325
   Insn 334: point = 327
   Insn 333: point = 328
   Insn 332: point = 330
   Insn 331: point = 332
   Insn 330: point = 334
   Insn 329: point = 336
   Insn 328: point = 337
   Insn 327: point = 339
   Insn 326: point = 341
   Insn 325: point = 342
   Insn 324: point = 344
  BB 24
   Insn 322: point = 345
   Insn 321: point = 345
   Insn 320: point = 346
   Insn 319: point = 348
   Insn 318: point = 350
  BB 23
   Insn 1145: point = 351
   Insn 313: point = 351
   Insn 312: point = 351
   Insn 311: point = 352
   Insn 310: point = 353
   Insn 309: point = 353
   Insn 308: point = 354
   Insn 307: point = 356
   Insn 306: point = 358
   Insn 305: point = 359
   Insn 304: point = 361
   Insn 303: point = 362
   Insn 302: point = 364
   Insn 301: point = 366
   Insn 300: point = 368
   Insn 299: point = 369
   Insn 298: point = 370
   Insn 297: point = 371
   Insn 296: point = 371
   Insn 295: point = 372
   Insn 294: point = 374
   Insn 293: point = 375
   Insn 292: point = 377
   Insn 291: point = 379
   Insn 290: point = 381
   Insn 289: point = 383
   Insn 288: point = 384
   Insn 287: point = 386
   Insn 286: point = 388
   Insn 285: point = 389
   Insn 284: point = 391
  BB 22
   Insn 281: point = 392
   Insn 280: point = 392
   Insn 279: point = 393
   Insn 278: point = 395
   Insn 277: point = 397
   Insn 276: point = 399
   Insn 275: point = 400
   Insn 274: point = 402
   Insn 273: point = 404
  BB 21
   Insn 271: point = 405
   Insn 270: point = 405
   Insn 269: point = 406
   Insn 268: point = 408
   Insn 267: point = 410
  BB 38
   Insn 572: point = 411
  BB 37
   Insn 570: point = 411
   Insn 569: point = 411
   Insn 567: point = 412
   Insn 566: point = 414
   Insn 565: point = 416
  BB 32
   Insn 1151: point = 417
   Insn 389: point = 417
  BB 36
   Insn 562: point = 417
  BB 35
   Insn 560: point = 417
   Insn 559: point = 417
   Insn 557: point = 418
   Insn 556: point = 420
   Insn 555: point = 422
   Insn 554: point = 423
   Insn 553: point = 425
   Insn 552: point = 427
   Insn 551: point = 429
   Insn 550: point = 431
  BB 33
   Insn 1153: point = 432
   Insn 393: point = 432
  BB 34
   Insn 547: point = 432
   Insn 546: point = 432
   Insn 545: point = 433
   Insn 544: point = 435
   Insn 543: point = 437
   Insn 542: point = 439
   Insn 541: point = 441
   Insn 540: point = 442
   Insn 539: point = 444
   Insn 538: point = 446
   Insn 537: point = 447
   Insn 536: point = 449
   Insn 535: point = 450
   Insn 534: point = 452
   Insn 533: point = 454
   Insn 532: point = 456
   Insn 531: point = 457
   Insn 530: point = 458
   Insn 529: point = 459
   Insn 528: point = 459
   Insn 527: point = 460
   Insn 526: point = 462
   Insn 525: point = 463
   Insn 524: point = 465
   Insn 523: point = 466
   Insn 522: point = 468
   Insn 521: point = 470
   Insn 520: point = 471
   Insn 519: point = 473
   Insn 518: point = 474
   Insn 517: point = 476
   Insn 516: point = 478
   Insn 515: point = 480
   Insn 514: point = 481
   Insn 513: point = 482
   Insn 512: point = 483
   Insn 511: point = 483
   Insn 510: point = 484
   Insn 509: point = 486
   Insn 508: point = 487
   Insn 507: point = 488
   Insn 506: point = 490
   Insn 505: point = 492
   Insn 504: point = 494
   Insn 503: point = 496
   Insn 502: point = 497
   Insn 501: point = 499
   Insn 500: point = 501
   Insn 499: point = 502
   Insn 498: point = 504
   Insn 497: point = 505
   Insn 496: point = 507
   Insn 495: point = 509
   Insn 494: point = 511
   Insn 493: point = 512
   Insn 492: point = 513
   Insn 491: point = 514
   Insn 490: point = 514
   Insn 489: point = 515
   Insn 488: point = 517
   Insn 487: point = 518
   Insn 486: point = 520
   Insn 485: point = 521
   Insn 484: point = 523
   Insn 483: point = 525
   Insn 482: point = 526
   Insn 481: point = 528
   Insn 480: point = 529
   Insn 479: point = 531
   Insn 478: point = 533
   Insn 477: point = 535
   Insn 476: point = 536
   Insn 475: point = 537
   Insn 474: point = 538
   Insn 473: point = 538
   Insn 472: point = 539
   Insn 471: point = 541
   Insn 470: point = 542
   Insn 469: point = 543
   Insn 468: point = 545
   Insn 467: point = 547
   Insn 466: point = 549
   Insn 465: point = 551
   Insn 464: point = 552
   Insn 463: point = 554
   Insn 462: point = 556
   Insn 461: point = 557
   Insn 460: point = 559
   Insn 459: point = 560
   Insn 458: point = 562
   Insn 457: point = 564
   Insn 456: point = 566
   Insn 455: point = 567
   Insn 454: point = 568
   Insn 453: point = 569
   Insn 452: point = 569
   Insn 451: point = 570
   Insn 450: point = 572
   Insn 449: point = 573
   Insn 448: point = 575
   Insn 447: point = 576
   Insn 446: point = 578
   Insn 445: point = 580
   Insn 444: point = 581
   Insn 443: point = 583
   Insn 442: point = 584
   Insn 441: point = 586
   Insn 440: point = 588
   Insn 439: point = 590
   Insn 438: point = 591
   Insn 437: point = 592
   Insn 436: point = 593
   Insn 435: point = 593
   Insn 434: point = 594
   Insn 433: point = 596
   Insn 432: point = 597
   Insn 431: point = 598
   Insn 430: point = 600
   Insn 429: point = 601
   Insn 428: point = 603
   Insn 427: point = 605
   Insn 426: point = 606
   Insn 425: point = 608
   Insn 424: point = 610
   Insn 423: point = 611
   Insn 422: point = 613
   Insn 421: point = 614
   Insn 420: point = 616
   Insn 419: point = 618
   Insn 418: point = 620
   Insn 417: point = 621
   Insn 416: point = 622
   Insn 415: point = 623
   Insn 414: point = 623
   Insn 413: point = 624
   Insn 412: point = 626
   Insn 411: point = 627
   Insn 410: point = 629
   Insn 409: point = 631
   Insn 408: point = 632
   Insn 407: point = 634
   Insn 406: point = 635
   Insn 405: point = 637
   Insn 404: point = 639
   Insn 403: point = 641
   Insn 402: point = 642
   Insn 401: point = 643
   Insn 400: point = 644
   Insn 399: point = 644
   Insn 398: point = 645
   Insn 397: point = 647
  BB 44
   Insn 638: point = 648
  BB 43
   Insn 636: point = 648
   Insn 635: point = 648
   Insn 633: point = 649
   Insn 632: point = 651
   Insn 631: point = 653
  BB 41
   Insn 1157: point = 654
   Insn 586: point = 654
  BB 42
   Insn 628: point = 654
   Insn 627: point = 654
   Insn 626: point = 655
   Insn 625: point = 657
   Insn 624: point = 659
   Insn 623: point = 661
   Insn 622: point = 662
   Insn 621: point = 663
   Insn 620: point = 664
   Insn 619: point = 664
   Insn 618: point = 665
   Insn 617: point = 667
   Insn 616: point = 668
   Insn 615: point = 670
   Insn 614: point = 671
   Insn 613: point = 673
   Insn 612: point = 675
   Insn 611: point = 676
   Insn 610: point = 678
   Insn 609: point = 680
   Insn 608: point = 681
   Insn 607: point = 682
   Insn 606: point = 684
   Insn 605: point = 686
   Insn 604: point = 688
   Insn 603: point = 689
   Insn 602: point = 690
   Insn 601: point = 691
   Insn 600: point = 691
   Insn 599: point = 692
   Insn 598: point = 694
   Insn 597: point = 695
   Insn 596: point = 697
   Insn 595: point = 698
   Insn 594: point = 700
   Insn 593: point = 702
   Insn 592: point = 703
   Insn 591: point = 705
   Insn 590: point = 707
  BB 49
   Insn 670: point = 708
  BB 48
   Insn 667: point = 708
   Insn 666: point = 709
   Insn 665: point = 711
   Insn 664: point = 713
   Insn 663: point = 714
   Insn 662: point = 716
   Insn 661: point = 718
  BB 47
   Insn 659: point = 719
   Insn 658: point = 719
   Insn 657: point = 720
   Insn 656: point = 722
   Insn 655: point = 724
   Insn 654: point = 725
   Insn 653: point = 727
   Insn 652: point = 729
  BB 55
   Insn 719: point = 730
  BB 54
   Insn 717: point = 730
   Insn 716: point = 730
   Insn 714: point = 731
   Insn 713: point = 733
  BB 52
   Insn 1163: point = 734
   Insn 691: point = 734
  BB 53
   Insn 710: point = 734
   Insn 709: point = 734
   Insn 708: point = 735
   Insn 707: point = 737
   Insn 706: point = 738
   Insn 705: point = 740
   Insn 704: point = 741
   Insn 703: point = 741
   Insn 702: point = 742
   Insn 701: point = 744
   Insn 700: point = 746
   Insn 699: point = 747
   Insn 698: point = 749
   Insn 1187: point = 750
	Hard reg 1 is preferable by r705 with profit 1
   Insn 697: point = 752
   Insn 1186: point = 752
	Hard reg 1 is preferable by r705 with profit 1
	Hard reg 0 is preferable by r705 with profit 1
   Insn 696: point = 754
   Insn 695: point = 756
  BB 64
   Insn 773: point = 757
  BB 63
   Insn 771: point = 757
   Insn 770: point = 757
   Insn 768: point = 758
   Insn 767: point = 760
  BB 58
   Insn 1167: point = 761
   Insn 732: point = 761
  BB 62
   Insn 764: point = 761
  BB 61
   Insn 762: point = 761
   Insn 761: point = 761
   Insn 759: point = 762
   Insn 758: point = 764
   Insn 757: point = 766
  BB 59
   Insn 1169: point = 767
   Insn 736: point = 767
  BB 60
   Insn 754: point = 767
   Insn 753: point = 767
   Insn 752: point = 768
   Insn 751: point = 769
   Insn 750: point = 771
   Insn 749: point = 773
   Insn 748: point = 775
   Insn 747: point = 776
   Insn 746: point = 778
   Insn 745: point = 780
   Insn 744: point = 781
   Insn 743: point = 783
   Insn 1189: point = 784
	Hard reg 1 is preferable by r706 with profit 1
   Insn 742: point = 786
   Insn 1188: point = 786
	Hard reg 1 is preferable by r706 with profit 1
	Hard reg 0 is preferable by r706 with profit 1
   Insn 741: point = 788
   Insn 740: point = 790
  BB 73
   Insn 917: point = 791
  BB 72
   Insn 915: point = 791
   Insn 914: point = 791
   Insn 912: point = 792
   Insn 911: point = 794
   Insn 910: point = 796
  BB 67
   Insn 1173: point = 797
   Insn 786: point = 797
  BB 71
   Insn 907: point = 797
  BB 70
   Insn 905: point = 797
   Insn 904: point = 797
   Insn 902: point = 798
   Insn 901: point = 800
   Insn 900: point = 802
  BB 68
   Insn 1175: point = 803
   Insn 790: point = 803
  BB 69
   Insn 897: point = 803
   Insn 896: point = 803
   Insn 895: point = 804
   Insn 894: point = 806
   Insn 893: point = 808
   Insn 892: point = 810
   Insn 891: point = 812
   Insn 890: point = 814
   Insn 889: point = 815
   Insn 888: point = 817
   Insn 887: point = 819
   Insn 886: point = 820
   Insn 885: point = 822
   Insn 884: point = 823
   Insn 883: point = 825
   Insn 882: point = 827
   Insn 881: point = 829
   Insn 880: point = 830
   Insn 879: point = 831
   Insn 878: point = 832
   Insn 877: point = 832
   Insn 876: point = 833
   Insn 875: point = 835
   Insn 874: point = 836
   Insn 873: point = 838
   Insn 872: point = 840
   Insn 871: point = 842
   Insn 870: point = 844
   Insn 869: point = 845
   Insn 868: point = 847
   Insn 867: point = 849
   Insn 866: point = 851
   Insn 865: point = 852
   Insn 864: point = 854
   Insn 863: point = 856
   Insn 862: point = 858
   Insn 861: point = 860
   Insn 860: point = 861
   Insn 859: point = 862
   Insn 858: point = 863
   Insn 857: point = 863
   Insn 856: point = 864
   Insn 855: point = 866
   Insn 854: point = 867
   Insn 853: point = 869
   Insn 852: point = 870
   Insn 851: point = 872
   Insn 1193: point = 873
	Hard reg 1 is preferable by r708 with profit 1
   Insn 850: point = 875
   Insn 1192: point = 875
	Hard reg 1 is preferable by r708 with profit 1
	Hard reg 0 is preferable by r708 with profit 1
   Insn 849: point = 877
   Insn 848: point = 879
   Insn 847: point = 881
   Insn 846: point = 882
   Insn 845: point = 884
   Insn 844: point = 886
   Insn 843: point = 888
   Insn 842: point = 890
   Insn 841: point = 891
   Insn 840: point = 892
   Insn 839: point = 893
   Insn 838: point = 893
   Insn 837: point = 894
   Insn 836: point = 896
   Insn 835: point = 897
   Insn 834: point = 899
   Insn 833: point = 900
   Insn 832: point = 902
   Insn 831: point = 904
   Insn 830: point = 906
   Insn 829: point = 907
   Insn 828: point = 909
   Insn 827: point = 911
   Insn 826: point = 913
   Insn 825: point = 914
   Insn 824: point = 916
   Insn 823: point = 918
   Insn 822: point = 920
   Insn 821: point = 922
   Insn 820: point = 923
   Insn 819: point = 924
   Insn 818: point = 925
   Insn 817: point = 925
   Insn 816: point = 926
   Insn 815: point = 928
   Insn 814: point = 929
   Insn 813: point = 931
   Insn 812: point = 932
   Insn 811: point = 934
   Insn 1191: point = 935
	Hard reg 1 is preferable by r707 with profit 1
   Insn 810: point = 937
   Insn 1190: point = 937
	Hard reg 1 is preferable by r707 with profit 1
	Hard reg 0 is preferable by r707 with profit 1
   Insn 809: point = 939
   Insn 808: point = 941
   Insn 807: point = 943
   Insn 806: point = 944
   Insn 805: point = 946
   Insn 804: point = 948
   Insn 803: point = 950
   Insn 802: point = 952
   Insn 801: point = 953
   Insn 800: point = 954
   Insn 799: point = 955
   Insn 798: point = 955
   Insn 797: point = 956
   Insn 796: point = 958
   Insn 795: point = 959
   Insn 794: point = 961
  BB 82
   Insn 1085: point = 962
  BB 81
   Insn 1083: point = 962
   Insn 1082: point = 962
   Insn 1080: point = 963
   Insn 1079: point = 965
  BB 76
   Insn 1179: point = 966
   Insn 931: point = 966
  BB 80
   Insn 1076: point = 966
  BB 79
   Insn 1074: point = 966
   Insn 1073: point = 966
   Insn 1071: point = 967
   Insn 1070: point = 969
   Insn 1069: point = 971
   Insn 1068: point = 972
   Insn 1067: point = 974
   Insn 1066: point = 976
   Insn 1065: point = 978
   Insn 1064: point = 980
  BB 77
   Insn 1181: point = 981
   Insn 935: point = 981
  BB 78
   Insn 1061: point = 981
   Insn 1060: point = 981
   Insn 1059: point = 982
   Insn 1058: point = 984
   Insn 1057: point = 986
   Insn 1056: point = 988
   Insn 1055: point = 990
   Insn 1054: point = 991
   Insn 1053: point = 993
   Insn 1052: point = 995
   Insn 1051: point = 996
   Insn 1050: point = 998
   Insn 1201: point = 999
	Hard reg 2 is preferable by r712 with profit 1
   Insn 1049: point = 1001
   Insn 1200: point = 1001
	Hard reg 2 is preferable by r712 with profit 1
	Hard reg 0 is preferable by r712 with profit 1
   Insn 1048: point = 1003
   Insn 1047: point = 1005
   Insn 1046: point = 1006
   Insn 1045: point = 1008
   Insn 1044: point = 1009
   Insn 1043: point = 1011
   Insn 1042: point = 1013
   Insn 1041: point = 1014
   Insn 1040: point = 1016
   Insn 1039: point = 1017
   Insn 1038: point = 1019
   Insn 1037: point = 1021
   Insn 1036: point = 1023
   Insn 1035: point = 1024
   Insn 1034: point = 1025
   Insn 1033: point = 1026
   Insn 1032: point = 1026
   Insn 1031: point = 1027
   Insn 1030: point = 1029
   Insn 1029: point = 1030
   Insn 1028: point = 1031
   Insn 1027: point = 1033
   Insn 1026: point = 1035
   Insn 1025: point = 1037
   Insn 1024: point = 1039
   Insn 1023: point = 1040
   Insn 1022: point = 1042
   Insn 1021: point = 1044
   Insn 1020: point = 1045
   Insn 1019: point = 1047
   Insn 1199: point = 1048
	Hard reg 2 is preferable by r711 with profit 1
   Insn 1018: point = 1050
   Insn 1198: point = 1050
	Hard reg 2 is preferable by r711 with profit 1
	Hard reg 0 is preferable by r711 with profit 1
   Insn 1017: point = 1052
   Insn 1016: point = 1054
   Insn 1015: point = 1055
   Insn 1014: point = 1057
   Insn 1013: point = 1058
   Insn 1012: point = 1060
   Insn 1011: point = 1062
   Insn 1010: point = 1063
   Insn 1009: point = 1065
   Insn 1008: point = 1066
   Insn 1007: point = 1068
   Insn 1006: point = 1070
   Insn 1005: point = 1072
   Insn 1004: point = 1073
   Insn 1003: point = 1074
   Insn 1002: point = 1075
   Insn 1001: point = 1075
   Insn 1000: point = 1076
   Insn 999: point = 1078
   Insn 998: point = 1079
   Insn 997: point = 1080
   Insn 996: point = 1082
   Insn 995: point = 1084
   Insn 994: point = 1086
   Insn 993: point = 1088
   Insn 992: point = 1089
   Insn 991: point = 1091
   Insn 990: point = 1093
   Insn 989: point = 1094
   Insn 988: point = 1096
   Insn 1197: point = 1097
	Hard reg 2 is preferable by r710 with profit 1
   Insn 987: point = 1099
   Insn 1196: point = 1099
	Hard reg 2 is preferable by r710 with profit 1
	Hard reg 0 is preferable by r710 with profit 1
   Insn 986: point = 1101
   Insn 985: point = 1103
   Insn 984: point = 1104
   Insn 983: point = 1106
   Insn 982: point = 1107
   Insn 981: point = 1109
   Insn 980: point = 1111
   Insn 979: point = 1112
   Insn 978: point = 1114
   Insn 977: point = 1115
   Insn 976: point = 1117
   Insn 975: point = 1119
   Insn 974: point = 1121
   Insn 973: point = 1122
   Insn 972: point = 1123
   Insn 971: point = 1124
   Insn 970: point = 1124
   Insn 969: point = 1125
   Insn 968: point = 1127
   Insn 967: point = 1128
   Insn 966: point = 1129
   Insn 965: point = 1131
   Insn 964: point = 1132
   Insn 963: point = 1134
   Insn 962: point = 1136
   Insn 961: point = 1137
   Insn 960: point = 1139
   Insn 959: point = 1141
   Insn 958: point = 1142
   Insn 957: point = 1144
   Insn 1195: point = 1145
	Hard reg 2 is preferable by r709 with profit 1
   Insn 956: point = 1147
   Insn 1194: point = 1147
	Hard reg 2 is preferable by r709 with profit 1
	Hard reg 0 is preferable by r709 with profit 1
   Insn 955: point = 1149
   Insn 954: point = 1151
   Insn 953: point = 1152
   Insn 952: point = 1154
   Insn 951: point = 1156
   Insn 950: point = 1157
   Insn 949: point = 1159
   Insn 948: point = 1160
   Insn 947: point = 1162
   Insn 946: point = 1164
   Insn 945: point = 1166
   Insn 944: point = 1167
   Insn 943: point = 1168
   Insn 942: point = 1169
   Insn 941: point = 1169
   Insn 940: point = 1170
   Insn 939: point = 1172
  BB 3
   Insn 43: point = 1173
   Insn 42: point = 1173
   Insn 41: point = 1174
   Insn 40: point = 1176
   Insn 39: point = 1178
   Insn 38: point = 1179
   Insn 37: point = 1181
   Insn 36: point = 1183
   Insn 35: point = 1185
   Insn 34: point = 1186
   Insn 33: point = 1186
   Insn 32: point = 1187
   Insn 31: point = 1189
 r83: [15..16]
 r84: [13..14]
 r85: [1185..1187]
 r86: [1177..1179]
 r87: [1175..1176]
 r88: [1173..1174]
 r89: [139..140]
 r90: [136..138]
 r91: [122..135]
 r92: [124..125]
 r93: [122..123]
 r94: [118..119]
 r95: [115..117]
 r96: [113..114]
 r97: [109..110]
 r98: [106..108]
 r99: [104..105]
 r100: [99..103]
 r101: [98..100]
 r102: [96..97]
 r103: [94..95]
 r104: [90..91]
 r105: [84..85]
 r106: [82..83]
 r107: [145..146]
 r108: [143..144]
 r109: [286..287]
 r110: [284..285]
 r111: [280..281]
 r112: [277..279]
 r113: [275..276]
 r114: [273..274]
 r115: [271..272]
 r116: [267..268]
 r117: [265..266]
 r118: [260..262]
 r119: [250..252]
 r120: [236..249]
 r121: [245..246]
 r122: [243..244]
 r123: [236..240]
 r124: [231..233]
 r125: [221..223]
 r126: [207..220]
 r127: [216..217]
 r128: [214..215]
 r129: [207..211]
 r130: [202..204]
 r131: [192..194]
 r132: [178..191]
 r133: [187..188]
 r134: [185..186]
 r135: [178..182]
 r136: [173..175]
 r137: [163..165]
 r138: [149..162]
 r139: [158..159]
 r140: [156..157]
 r141: [149..153]
 r142: [78..79]
 r143: [76..77]
 r144: [297..301]
 r145: [296..298]
 r146: [292..293]
 r147: [290..291]
 r148: [407..408]
 r149: [405..406]
 r150: [401..402]
 r151: [398..400]
 r152: [396..397]
 r153: [394..395]
 r154: [392..393]
 r155: [347..348]
 r156: [345..346]
 r157: [306..342]
 r158: [338..339]
 r159: [331..337]
 r160: [333..334]
 r161: [331..332]
 r162: [329..330]
 r163: [305..328]
 r164: [323..325]
 r165: [313..315]
 r166: [308..312]
 r167: [304..307]
 r168: [353..389]
 r169: [385..386]
 r170: [378..384]
 r171: [380..381]
 r172: [378..379]
 r173: [376..377]
 r174: [352..375]
 r175: [370..372]
 r176: [360..362]
 r177: [355..359]
 r178: [351..354]
 r179: [72..73]
 r180: [70..71]
 r181: [413..414]
 r182: [411..412]
 r183: [428..429]
 r184: [426..427]
 r185: [424..425]
 r186: [421..423]
 r187: [421..422]
 r188: [419..420]
 r189: [417..418]
 r190: [643..645]
 r191: [633..635]
 r192: [628..632]
 r193: [597..627]
 r194: [622..624]
 r195: [612..614]
 r196: [607..611]
 r197: [602..606]
 r198: [597..601]
 r199: [592..594]
 r200: [582..584]
 r201: [577..581]
 r202: [542..576]
 r203: [544..573]
 r204: [568..570]
 r205: [558..560]
 r206: [553..557]
 r207: [546..552]
 r208: [548..549]
 r209: [542..545]
 r210: [537..539]
 r211: [527..529]
 r212: [522..526]
 r213: [487..521]
 r214: [489..518]
 r215: [513..515]
 r216: [503..505]
 r217: [498..502]
 r218: [491..497]
 r219: [493..494]
 r220: [487..490]
 r221: [482..484]
 r222: [472..474]
 r223: [467..471]
 r224: [432..466]
 r225: [434..463]
 r226: [458..460]
 r227: [448..450]
 r228: [443..447]
 r229: [436..442]
 r230: [438..439]
 r231: [432..435]
 r232: [66..67]
 r233: [64..65]
 r234: [650..651]
 r235: [648..649]
 r236: [704..705]
 r237: [701..703]
 r238: [699..700]
 r239: [681..698]
 r240: [677..678]
 r241: [674..676]
 r242: [672..673]
 r243: [654..671]
 r244: [60..61]
 r245: [726..727]
 r246: [723..725]
 r247: [721..722]
 r248: [719..720]
 r249: [715..716]
 r250: [712..714]
 r251: [710..711]
 r252: [51..53]
 r253: [47..48]
 r254: [730..731]
 r255: [753..754]
 r256: [748..750]
 r257: [734..747]
 r258: [743..744]
 r259: [741..742]
 r260: [734..738]
 r261: [43..44]
 r262: [757..758]
 r263: [763..764]
 r264: [761..762]
 r265: [787..788]
 r266: [782..784]
 r267: [777..781]
 r268: [770..776]
 r269: [772..773]
 r270: [770..771]
 r271: [767..769]
 r272: [39..40]
 r273: [37..38]
 r274: [793..794]
 r275: [791..792]
 r276: [799..800]
 r277: [797..798]
 r278: [942..944]
 r279: [940..941]
 r280: [938..939]
 r281: [933..935]
 r282: [908..932]
 r283: [912..914]
 r284: [910..911]
 r285: [901..907]
 r286: [903..904]
 r287: [901..902]
 r288: [803..900]
 r289: [880..882]
 r290: [878..879]
 r291: [876..877]
 r292: [871..873]
 r293: [846..870]
 r294: [850..852]
 r295: [848..849]
 r296: [839..845]
 r297: [841..842]
 r298: [839..840]
 r299: [837..838]
 r300: [805..836]
 r301: [831..833]
 r302: [821..823]
 r303: [816..820]
 r304: [809..815]
 r305: [811..812]
 r306: [809..810]
 r307: [807..808]
 r308: [805..806]
 r309: [803..804]
 r310: [33..34]
 r311: [962..963]
 r312: [977..978]
 r313: [975..976]
 r314: [973..974]
 r315: [970..972]
 r316: [970..971]
 r317: [968..969]
 r318: [966..967]
 r319: [1168..1170]
 r320: [1158..1160]
 r321: [1153..1157]
 r322: [1128..1152]
 r323: [1148..1149]
 r324: [1143..1145]
 r325: [1138..1142]
 r326: [1133..1137]
 r327: [1128..1132]
 r328: [1123..1125]
 r329: [1113..1115]
 r330: [1108..1112]
 r331: [1079..1107]
 r332: [1081..1104]
 r333: [1100..1101]
 r334: [1095..1097]
 r335: [1090..1094]
 r336: [1083..1089]
 r337: [1085..1086]
 r338: [1079..1082]
 r339: [1074..1076]
 r340: [1064..1066]
 r341: [1059..1063]
 r342: [1030..1058]
 r343: [1032..1055]
 r344: [1051..1052]
 r345: [1046..1048]
 r346: [1041..1045]
 r347: [1034..1040]
 r348: [1036..1037]
 r349: [1030..1033]
 r350: [1025..1027]
 r351: [1015..1017]
 r352: [1010..1014]
 r353: [981..1009]
 r354: [983..1006]
 r355: [1002..1003]
 r356: [997..999]
 r357: [992..996]
 r358: [985..991]
 r359: [987..988]
 r360: [981..984]
 r361: [9..10]
 r362: [5..6]
 r363: [3..4]
 r364: [1..2]
 r365: [31..32]
 r366: [29..30]
 r367: [27..28]
 r368: [25..26]
 r369: [23..24]
 r370: [21..22]
 r371: [1188..1189]
 r372: [1184..1186] [1180..1181]
 r373: [1182..1183]
 r374: [1177..1178]
 r375: [141..142]
 r376: [136..137]
 r377: [131..132]
 r378: [133..134]
 r379: [126..128]
 r380: [126..127]
 r381: [120..121]
 r382: [115..116]
 r383: [111..112]
 r384: [106..107]
 r385: [101..102]
 r386: [92..93]
 r387: [88..89]
 r388: [288..289]
 r389: [282..283]
 r390: [277..278]
 r391: [205..206]
 r392: [199..203] [195..196]
 r393: [200..201]
 r394: [197..198]
 r395: [192..193]
 r396: [189..190]
 r397: [183..184]
 r398: [178..179]
 r399: [180..181]
 r400: [176..177]
 r401: [170..174] [166..167]
 r402: [171..172]
 r403: [168..169]
 r404: [163..164]
 r405: [160..161]
 r406: [154..155]
 r407: [149..150]
 r408: [151..152]
 r409: [269..270]
 r410: [263..264]
 r411: [257..261] [253..254]
 r412: [258..259]
 r413: [255..256]
 r414: [250..251]
 r415: [247..248]
 r416: [241..242]
 r417: [236..237]
 r418: [238..239]
 r419: [234..235]
 r420: [228..232] [224..225]
 r421: [229..230]
 r422: [226..227]
 r423: [221..222]
 r424: [218..219]
 r425: [212..213]
 r426: [207..208]
 r427: [209..210]
 r428: [147..148]
 r429: [86..87]
 r430: [302..303]
 r431: [299..300]
 r432: [409..410]
 r433: [403..404]
 r434: [398..399]
 r435: [390..391]
 r436: [387..388]
 r437: [382..383]
 r438: [373..374]
 r439: [367..371] [363..364]
 r440: [368..369]
 r441: [365..366]
 r442: [360..361]
 r443: [355..356]
 r444: [357..358]
 r445: [349..350]
 r446: [343..344]
 r447: [340..341]
 r448: [335..336]
 r449: [326..327]
 r450: [320..324] [316..317]
 r451: [321..322]
 r452: [318..319]
 r453: [313..314]
 r454: [308..309]
 r455: [310..311]
 r456: [294..295]
 r457: [80..81]
 r458: [646..647]
 r459: [640..644] [636..637]
 r460: [641..642]
 r461: [638..639]
 r462: [633..634]
 r463: [628..629]
 r464: [630..631]
 r465: [625..626]
 r466: [619..623] [615..616]
 r467: [620..621]
 r468: [617..618]
 r469: [612..613]
 r470: [607..608]
 r471: [609..610]
 r472: [602..603]
 r473: [604..605]
 r474: [597..598]
 r475: [599..600]
 r476: [595..596]
 r477: [589..593] [585..586]
 r478: [590..591]
 r479: [587..588]
 r480: [582..583]
 r481: [577..578]
 r482: [579..580]
 r483: [574..575]
 r484: [571..572]
 r485: [565..569] [561..562]
 r486: [566..567]
 r487: [563..564]
 r488: [558..559]
 r489: [553..554]
 r490: [555..556]
 r491: [550..551]
 r492: [546..547]
 r493: [542..543]
 r494: [540..541]
 r495: [534..538] [530..531]
 r496: [535..536]
 r497: [532..533]
 r498: [527..528]
 r499: [522..523]
 r500: [524..525]
 r501: [519..520]
 r502: [516..517]
 r503: [510..514] [506..507]
 r504: [511..512]
 r505: [508..509]
 r506: [503..504]
 r507: [498..499]
 r508: [500..501]
 r509: [495..496]
 r510: [491..492]
 r511: [487..488]
 r512: [485..486]
 r513: [479..483] [475..476]
 r514: [480..481]
 r515: [477..478]
 r516: [472..473]
 r517: [467..468]
 r518: [469..470]
 r519: [464..465]
 r520: [461..462]
 r521: [455..459] [451..452]
 r522: [456..457]
 r523: [453..454]
 r524: [448..449]
 r525: [443..444]
 r526: [445..446]
 r527: [440..441]
 r528: [436..437]
 r529: [432..433]
 r530: [430..431]
 r531: [415..416]
 r532: [74..75]
 r533: [706..707]
 r534: [701..702]
 r535: [683..695]
 r536: [696..697]
 r537: [690..692]
 r538: [693..694]
 r539: [687..691] [683..684]
 r540: [688..689]
 r541: [685..686]
 r542: [681..682]
 r543: [679..680]
 r544: [674..675]
 r545: [656..668]
 r546: [669..670]
 r547: [663..665]
 r548: [666..667]
 r549: [660..664] [656..657]
 r550: [661..662]
 r551: [658..659]
 r552: [654..655]
 r553: [652..653]
 r554: [68..69]
 r555: [728..729]
 r556: [723..724]
 r557: [717..718]
 r558: [712..713]
 r559: [708..709]
 r560: [62..63]
 r561: [56..57]
 r562: [58..59]
 r563: [54..55]
 r564: [51..52]
 r565: [755..756]
 r566: [748..749]
 r567: [745..746]
 r568: [739..740]
 r569: [734..735]
 r570: [736..737]
 r571: [732..733]
 r572: [49..50]
 r573: [789..790]
 r574: [782..783]
 r575: [777..778]
 r576: [779..780]
 r577: [774..775]
 r578: [767..768]
 r579: [765..766]
 r580: [759..760]
 r581: [45..46]
 r582: [947..959]
 r583: [960..961]
 r584: [954..956]
 r585: [957..958]
 r586: [951..955] [947..948]
 r587: [952..953]
 r588: [949..950]
 r589: [945..946]
 r590: [942..943]
 r591: [933..934]
 r592: [917..929]
 r593: [930..931]
 r594: [924..926]
 r595: [927..928]
 r596: [921..925] [917..918]
 r597: [922..923]
 r598: [919..920]
 r599: [915..916]
 r600: [912..913]
 r601: [908..909]
 r602: [905..906]
 r603: [885..897]
 r604: [898..899]
 r605: [892..894]
 r606: [895..896]
 r607: [889..893] [885..886]
 r608: [890..891]
 r609: [887..888]
 r610: [883..884]
 r611: [880..881]
 r612: [871..872]
 r613: [855..867]
 r614: [868..869]
 r615: [862..864]
 r616: [865..866]
 r617: [859..863] [855..856]
 r618: [860..861]
 r619: [857..858]
 r620: [853..854]
 r621: [850..851]
 r622: [846..847]
 r623: [843..844]
 r624: [834..835]
 r625: [828..832] [824..825]
 r626: [829..830]
 r627: [826..827]
 r628: [821..822]
 r629: [816..817]
 r630: [818..819]
 r631: [813..814]
 r632: [801..802]
 r633: [795..796]
 r634: [41..42]
 r635: [1171..1172]
 r636: [1165..1169] [1161..1162]
 r637: [1166..1167]
 r638: [1163..1164]
 r639: [1158..1159]
 r640: [1153..1154]
 r641: [1155..1156]
 r642: [1150..1151]
 r643: [1143..1144]
 r644: [1138..1139]
 r645: [1140..1141]
 r646: [1133..1134]
 r647: [1135..1136]
 r648: [1128..1129]
 r649: [1130..1131]
 r650: [1126..1127]
 r651: [1120..1124] [1116..1117]
 r652: [1121..1122]
 r653: [1118..1119]
 r654: [1113..1114]
 r655: [1108..1109]
 r656: [1110..1111]
 r657: [1105..1106]
 r658: [1102..1103]
 r659: [1095..1096]
 r660: [1090..1091]
 r661: [1092..1093]
 r662: [1087..1088]
 r663: [1083..1084]
 r664: [1079..1080]
 r665: [1077..1078]
 r666: [1071..1075] [1067..1068]
 r667: [1072..1073]
 r668: [1069..1070]
 r669: [1064..1065]
 r670: [1059..1060]
 r671: [1061..1062]
 r672: [1056..1057]
 r673: [1053..1054]
 r674: [1046..1047]
 r675: [1041..1042]
 r676: [1043..1044]
 r677: [1038..1039]
 r678: [1034..1035]
 r679: [1030..1031]
 r680: [1028..1029]
 r681: [1022..1026] [1018..1019]
 r682: [1023..1024]
 r683: [1020..1021]
 r684: [1015..1016]
 r685: [1010..1011]
 r686: [1012..1013]
 r687: [1007..1008]
 r688: [1004..1005]
 r689: [997..998]
 r690: [992..993]
 r691: [994..995]
 r692: [989..990]
 r693: [985..986]
 r694: [981..982]
 r695: [979..980]
 r696: [964..965]
 r697: [35..36]
 r698: [17..18]
 r699: [11..12]
 r700: [7..8]
 r702: [19..20]
 r703: [0..0]
 r704: [129..130]
 r705: [751..752]
 r706: [785..786]
 r707: [936..937]
 r708: [874..875]
 r709: [1146..1147]
 r710: [1098..1099]
 r711: [1049..1050]
 r712: [1000..1001]
Compressing live ranges: from 1190 to 1007 - 84%
Ranges after the compression:
 r83: [15..16]
 r84: [13..14]
 r85: [1003..1004]
 r86: [997..998]
 r87: [995..996]
 r88: [993..994]
 r89: [131..132]
 r90: [129..130]
 r91: [117..128]
 r92: [119..120]
 r93: [117..118]
 r94: [113..114]
 r95: [111..112]
 r96: [109..110]
 r97: [105..106]
 r98: [103..104]
 r99: [101..102]
 r100: [97..100]
 r101: [97..98]
 r102: [95..96]
 r103: [93..94]
 r104: [89..90]
 r105: [83..84]
 r106: [81..82]
 r107: [137..138]
 r108: [135..136]
 r109: [257..258]
 r110: [255..256]
 r111: [251..252]
 r112: [249..250]
 r113: [247..248]
 r114: [245..246]
 r115: [243..244]
 r116: [239..240]
 r117: [237..238]
 r118: [233..234]
 r119: [225..226]
 r120: [213..224]
 r121: [221..222]
 r122: [219..220]
 r123: [213..216]
 r124: [209..210]
 r125: [201..202]
 r126: [189..200]
 r127: [197..198]
 r128: [195..196]
 r129: [189..192]
 r130: [185..186]
 r131: [177..178]
 r132: [165..176]
 r133: [173..174]
 r134: [171..172]
 r135: [165..168]
 r136: [161..162]
 r137: [153..154]
 r138: [141..152]
 r139: [149..150]
 r140: [147..148]
 r141: [141..144]
 r142: [77..78]
 r143: [75..76]
 r144: [267..270]
 r145: [267..268]
 r146: [263..264]
 r147: [261..262]
 r148: [357..358]
 r149: [355..356]
 r150: [351..352]
 r151: [349..350]
 r152: [347..348]
 r153: [345..346]
 r154: [343..344]
 r155: [307..308]
 r156: [305..306]
 r157: [273..302]
 r158: [299..300]
 r159: [293..298]
 r160: [295..296]
 r161: [293..294]
 r162: [291..292]
 r163: [273..290]
 r164: [287..288]
 r165: [279..280]
 r166: [275..278]
 r167: [273..274]
 r168: [311..340]
 r169: [337..338]
 r170: [331..336]
 r171: [333..334]
 r172: [331..332]
 r173: [329..330]
 r174: [311..328]
 r175: [325..326]
 r176: [317..318]
 r177: [313..316]
 r178: [311..312]
 r179: [71..72]
 r180: [69..70]
 r181: [363..364]
 r182: [361..362]
 r183: [377..378]
 r184: [375..376]
 r185: [373..374]
 r186: [371..372]
 r187: [371..372]
 r188: [369..370]
 r189: [367..368]
 r190: [549..550]
 r191: [541..542]
 r192: [537..540]
 r193: [513..536]
 r194: [533..534]
 r195: [525..526]
 r196: [521..524]
 r197: [517..520]
 r198: [513..516]
 r199: [509..510]
 r200: [501..502]
 r201: [497..500]
 r202: [469..496]
 r203: [471..494]
 r204: [491..492]
 r205: [483..484]
 r206: [479..482]
 r207: [473..478]
 r208: [475..476]
 r209: [469..472]
 r210: [465..466]
 r211: [457..458]
 r212: [453..456]
 r213: [425..452]
 r214: [427..450]
 r215: [447..448]
 r216: [439..440]
 r217: [435..438]
 r218: [429..434]
 r219: [431..432]
 r220: [425..428]
 r221: [421..422]
 r222: [413..414]
 r223: [409..412]
 r224: [381..408]
 r225: [383..406]
 r226: [403..404]
 r227: [395..396]
 r228: [391..394]
 r229: [385..390]
 r230: [387..388]
 r231: [381..384]
 r232: [65..66]
 r233: [63..64]
 r234: [555..556]
 r235: [553..554]
 r236: [599..600]
 r237: [597..598]
 r238: [595..596]
 r239: [581..594]
 r240: [577..578]
 r241: [575..576]
 r242: [573..574]
 r243: [559..572]
 r244: [59..60]
 r245: [619..620]
 r246: [617..618]
 r247: [615..616]
 r248: [613..614]
 r249: [609..610]
 r250: [607..608]
 r251: [605..606]
 r252: [51..52]
 r253: [47..48]
 r254: [623..624]
 r255: [643..644]
 r256: [639..640]
 r257: [627..638]
 r258: [635..636]
 r259: [633..634]
 r260: [627..630]
 r261: [43..44]
 r262: [647..648]
 r263: [653..654]
 r264: [651..652]
 r265: [673..674]
 r266: [669..670]
 r267: [665..668]
 r268: [659..664]
 r269: [661..662]
 r270: [659..660]
 r271: [657..658]
 r272: [39..40]
 r273: [37..38]
 r274: [679..680]
 r275: [677..678]
 r276: [685..686]
 r277: [683..684]
 r278: [803..804]
 r279: [801..802]
 r280: [799..800]
 r281: [795..796]
 r282: [775..794]
 r283: [779..780]
 r284: [777..778]
 r285: [769..774]
 r286: [771..772]
 r287: [769..770]
 r288: [689..768]
 r289: [753..754]
 r290: [751..752]
 r291: [749..750]
 r292: [745..746]
 r293: [725..744]
 r294: [729..730]
 r295: [727..728]
 r296: [719..724]
 r297: [721..722]
 r298: [719..720]
 r299: [717..718]
 r300: [691..716]
 r301: [713..714]
 r302: [705..706]
 r303: [701..704]
 r304: [695..700]
 r305: [697..698]
 r306: [695..696]
 r307: [693..694]
 r308: [691..692]
 r309: [689..690]
 r310: [33..34]
 r311: [819..820]
 r312: [833..834]
 r313: [831..832]
 r314: [829..830]
 r315: [827..828]
 r316: [827..828]
 r317: [825..826]
 r318: [823..824]
 r319: [989..990]
 r320: [981..982]
 r321: [977..980]
 r322: [957..976]
 r323: [973..974]
 r324: [969..970]
 r325: [965..968]
 r326: [961..964]
 r327: [957..960]
 r328: [953..954]
 r329: [945..946]
 r330: [941..944]
 r331: [917..940]
 r332: [919..938]
 r333: [935..936]
 r334: [931..932]
 r335: [927..930]
 r336: [921..926]
 r337: [923..924]
 r338: [917..920]
 r339: [913..914]
 r340: [905..906]
 r341: [901..904]
 r342: [877..900]
 r343: [879..898]
 r344: [895..896]
 r345: [891..892]
 r346: [887..890]
 r347: [881..886]
 r348: [883..884]
 r349: [877..880]
 r350: [873..874]
 r351: [865..866]
 r352: [861..864]
 r353: [837..860]
 r354: [839..858]
 r355: [855..856]
 r356: [851..852]
 r357: [847..850]
 r358: [841..846]
 r359: [843..844]
 r360: [837..840]
 r361: [9..10]
 r362: [5..6]
 r363: [3..4]
 r364: [1..2]
 r365: [31..32]
 r366: [29..30]
 r367: [27..28]
 r368: [25..26]
 r369: [23..24]
 r370: [21..22]
 r371: [1005..1006]
 r372: [1003..1004] [999..1000]
 r373: [1001..1002]
 r374: [997..998]
 r375: [133..134]
 r376: [129..130]
 r377: [125..126]
 r378: [127..128]
 r379: [121..122]
 r380: [121..122]
 r381: [115..116]
 r382: [111..112]
 r383: [107..108]
 r384: [103..104]
 r385: [99..100]
 r386: [91..92]
 r387: [87..88]
 r388: [259..260]
 r389: [253..254]
 r390: [249..250]
 r391: [187..188]
 r392: [183..186] [179..180]
 r393: [183..184]
 r394: [181..182]
 r395: [177..178]
 r396: [175..176]
 r397: [169..170]
 r398: [165..166]
 r399: [167..168]
 r400: [163..164]
 r401: [159..162] [155..156]
 r402: [159..160]
 r403: [157..158]
 r404: [153..154]
 r405: [151..152]
 r406: [145..146]
 r407: [141..142]
 r408: [143..144]
 r409: [241..242]
 r410: [235..236]
 r411: [231..234] [227..228]
 r412: [231..232]
 r413: [229..230]
 r414: [225..226]
 r415: [223..224]
 r416: [217..218]
 r417: [213..214]
 r418: [215..216]
 r419: [211..212]
 r420: [207..210] [203..204]
 r421: [207..208]
 r422: [205..206]
 r423: [201..202]
 r424: [199..200]
 r425: [193..194]
 r426: [189..190]
 r427: [191..192]
 r428: [139..140]
 r429: [85..86]
 r430: [271..272]
 r431: [269..270]
 r432: [359..360]
 r433: [353..354]
 r434: [349..350]
 r435: [341..342]
 r436: [339..340]
 r437: [335..336]
 r438: [327..328]
 r439: [323..326] [319..320]
 r440: [323..324]
 r441: [321..322]
 r442: [317..318]
 r443: [313..314]
 r444: [315..316]
 r445: [309..310]
 r446: [303..304]
 r447: [301..302]
 r448: [297..298]
 r449: [289..290]
 r450: [285..288] [281..282]
 r451: [285..286]
 r452: [283..284]
 r453: [279..280]
 r454: [275..276]
 r455: [277..278]
 r456: [265..266]
 r457: [79..80]
 r458: [551..552]
 r459: [547..550] [543..544]
 r460: [547..548]
 r461: [545..546]
 r462: [541..542]
 r463: [537..538]
 r464: [539..540]
 r465: [535..536]
 r466: [531..534] [527..528]
 r467: [531..532]
 r468: [529..530]
 r469: [525..526]
 r470: [521..522]
 r471: [523..524]
 r472: [517..518]
 r473: [519..520]
 r474: [513..514]
 r475: [515..516]
 r476: [511..512]
 r477: [507..510] [503..504]
 r478: [507..508]
 r479: [505..506]
 r480: [501..502]
 r481: [497..498]
 r482: [499..500]
 r483: [495..496]
 r484: [493..494]
 r485: [489..492] [485..486]
 r486: [489..490]
 r487: [487..488]
 r488: [483..484]
 r489: [479..480]
 r490: [481..482]
 r491: [477..478]
 r492: [473..474]
 r493: [469..470]
 r494: [467..468]
 r495: [463..466] [459..460]
 r496: [463..464]
 r497: [461..462]
 r498: [457..458]
 r499: [453..454]
 r500: [455..456]
 r501: [451..452]
 r502: [449..450]
 r503: [445..448] [441..442]
 r504: [445..446]
 r505: [443..444]
 r506: [439..440]
 r507: [435..436]
 r508: [437..438]
 r509: [433..434]
 r510: [429..430]
 r511: [425..426]
 r512: [423..424]
 r513: [419..422] [415..416]
 r514: [419..420]
 r515: [417..418]
 r516: [413..414]
 r517: [409..410]
 r518: [411..412]
 r519: [407..408]
 r520: [405..406]
 r521: [401..404] [397..398]
 r522: [401..402]
 r523: [399..400]
 r524: [395..396]
 r525: [391..392]
 r526: [393..394]
 r527: [389..390]
 r528: [385..386]
 r529: [381..382]
 r530: [379..380]
 r531: [365..366]
 r532: [73..74]
 r533: [601..602]
 r534: [597..598]
 r535: [583..592]
 r536: [593..594]
 r537: [589..590]
 r538: [591..592]
 r539: [587..590] [583..584]
 r540: [587..588]
 r541: [585..586]
 r542: [581..582]
 r543: [579..580]
 r544: [575..576]
 r545: [561..570]
 r546: [571..572]
 r547: [567..568]
 r548: [569..570]
 r549: [565..568] [561..562]
 r550: [565..566]
 r551: [563..564]
 r552: [559..560]
 r553: [557..558]
 r554: [67..68]
 r555: [621..622]
 r556: [617..618]
 r557: [611..612]
 r558: [607..608]
 r559: [603..604]
 r560: [61..62]
 r561: [55..56]
 r562: [57..58]
 r563: [53..54]
 r564: [51..52]
 r565: [645..646]
 r566: [639..640]
 r567: [637..638]
 r568: [631..632]
 r569: [627..628]
 r570: [629..630]
 r571: [625..626]
 r572: [49..50]
 r573: [675..676]
 r574: [669..670]
 r575: [665..666]
 r576: [667..668]
 r577: [663..664]
 r578: [657..658]
 r579: [655..656]
 r580: [649..650]
 r581: [45..46]
 r582: [807..816]
 r583: [817..818]
 r584: [813..814]
 r585: [815..816]
 r586: [811..814] [807..808]
 r587: [811..812]
 r588: [809..810]
 r589: [805..806]
 r590: [803..804]
 r591: [795..796]
 r592: [783..792]
 r593: [793..794]
 r594: [789..790]
 r595: [791..792]
 r596: [787..790] [783..784]
 r597: [787..788]
 r598: [785..786]
 r599: [781..782]
 r600: [779..780]
 r601: [775..776]
 r602: [773..774]
 r603: [757..766]
 r604: [767..768]
 r605: [763..764]
 r606: [765..766]
 r607: [761..764] [757..758]
 r608: [761..762]
 r609: [759..760]
 r610: [755..756]
 r611: [753..754]
 r612: [745..746]
 r613: [733..742]
 r614: [743..744]
 r615: [739..740]
 r616: [741..742]
 r617: [737..740] [733..734]
 r618: [737..738]
 r619: [735..736]
 r620: [731..732]
 r621: [729..730]
 r622: [725..726]
 r623: [723..724]
 r624: [715..716]
 r625: [711..714] [707..708]
 r626: [711..712]
 r627: [709..710]
 r628: [705..706]
 r629: [701..702]
 r630: [703..704]
 r631: [699..700]
 r632: [687..688]
 r633: [681..682]
 r634: [41..42]
 r635: [991..992]
 r636: [987..990] [983..984]
 r637: [987..988]
 r638: [985..986]
 r639: [981..982]
 r640: [977..978]
 r641: [979..980]
 r642: [975..976]
 r643: [969..970]
 r644: [965..966]
 r645: [967..968]
 r646: [961..962]
 r647: [963..964]
 r648: [957..958]
 r649: [959..960]
 r650: [955..956]
 r651: [951..954] [947..948]
 r652: [951..952]
 r653: [949..950]
 r654: [945..946]
 r655: [941..942]
 r656: [943..944]
 r657: [939..940]
 r658: [937..938]
 r659: [931..932]
 r660: [927..928]
 r661: [929..930]
 r662: [925..926]
 r663: [921..922]
 r664: [917..918]
 r665: [915..916]
 r666: [911..914] [907..908]
 r667: [911..912]
 r668: [909..910]
 r669: [905..906]
 r670: [901..902]
 r671: [903..904]
 r672: [899..900]
 r673: [897..898]
 r674: [891..892]
 r675: [887..888]
 r676: [889..890]
 r677: [885..886]
 r678: [881..882]
 r679: [877..878]
 r680: [875..876]
 r681: [871..874] [867..868]
 r682: [871..872]
 r683: [869..870]
 r684: [865..866]
 r685: [861..862]
 r686: [863..864]
 r687: [859..860]
 r688: [857..858]
 r689: [851..852]
 r690: [847..848]
 r691: [849..850]
 r692: [845..846]
 r693: [841..842]
 r694: [837..838]
 r695: [835..836]
 r696: [821..822]
 r697: [35..36]
 r698: [17..18]
 r699: [11..12]
 r700: [7..8]
 r702: [19..20]
 r703: [0..0]
 r704: [123..124]
 r705: [641..642]
 r706: [671..672]
 r707: [797..798]
 r708: [747..748]
 r709: [971..972]
 r710: [933..934]
 r711: [893..894]
 r712: [853..854]

********** Assignment #1: **********

	 Assigning to 704 (cl=GENERAL_REGS, orig=379, freq=3, tfirst=704, tfreq=3)...
	   Assign 0 to reload r704 (freq=3)
	 Assigning to 705 (cl=GENERAL_REGS, orig=256, freq=3, tfirst=705, tfreq=3)...
	   Assign 0 to reload r705 (freq=3)
	 Assigning to 706 (cl=GENERAL_REGS, orig=266, freq=3, tfirst=706, tfreq=3)...
	   Assign 0 to reload r706 (freq=3)
	 Assigning to 707 (cl=GENERAL_REGS, orig=281, freq=3, tfirst=707, tfreq=3)...
	   Assign 0 to reload r707 (freq=3)
	 Assigning to 708 (cl=GENERAL_REGS, orig=292, freq=3, tfirst=708, tfreq=3)...
	   Assign 0 to reload r708 (freq=3)
	 Assigning to 709 (cl=GENERAL_REGS, orig=324, freq=3, tfirst=709, tfreq=3)...
	   Assign 0 to reload r709 (freq=3)
	 Assigning to 710 (cl=GENERAL_REGS, orig=334, freq=3, tfirst=710, tfreq=3)...
	   Assign 0 to reload r710 (freq=3)
	 Assigning to 711 (cl=GENERAL_REGS, orig=345, freq=3, tfirst=711, tfreq=3)...
	   Assign 0 to reload r711 (freq=3)
	 Assigning to 712 (cl=GENERAL_REGS, orig=356, freq=3, tfirst=712, tfreq=3)...
	   Assign 0 to reload r712 (freq=3)
	 Assigning to 702 (cl=INDEX_REGS, orig=702, freq=1, tfirst=702, tfreq=1)...
	   Assign 0 to reload r702 (freq=1)
	 Assigning to 703 (cl=INDEX_REGS, orig=703, freq=1, tfirst=703, tfreq=1)...
	   Assign 3 to reload r703 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 1099
changing reg in insn 1100
changing reg in insn 1100
changing reg in insn 1102
changing reg in insn 32
changing reg in insn 35
changing reg in insn 33
changing reg in insn 35
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 49
changing reg in insn 49
changing reg in insn 59
changing reg in insn 54
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 83
changing reg in insn 82
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 102
changing reg in insn 103
changing reg in insn 244
changing reg in insn 245
changing reg in insn 245
changing reg in insn 247
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 237
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 185
changing reg in insn 188
changing reg in insn 186
changing reg in insn 188
changing reg in insn 193
changing reg in insn 195
changing reg in insn 195
changing reg in insn 195
changing reg in insn 205
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 202
changing reg in insn 205
changing reg in insn 207
changing reg in insn 210
changing reg in insn 208
changing reg in insn 210
changing reg in insn 215
changing reg in insn 217
changing reg in insn 217
changing reg in insn 217
changing reg in insn 227
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 224
changing reg in insn 227
changing reg in insn 131
changing reg in insn 134
changing reg in insn 132
changing reg in insn 134
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 141
changing reg in insn 151
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 151
changing reg in insn 153
changing reg in insn 156
changing reg in insn 154
changing reg in insn 156
changing reg in insn 161
changing reg in insn 163
changing reg in insn 163
changing reg in insn 163
changing reg in insn 173
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 170
changing reg in insn 173
changing reg in insn 379
changing reg in insn 380
changing reg in insn 380
changing reg in insn 382
changing reg in insn 255
changing reg in insn 258
changing reg in insn 257
changing reg in insn 261
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 372
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 280
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 321
changing reg in insn 325
changing reg in insn 349
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 330
changing reg in insn 331
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 333
changing reg in insn 351
changing reg in insn 335
changing reg in insn 338
changing reg in insn 336
changing reg in insn 338
changing reg in insn 343
changing reg in insn 345
changing reg in insn 345
changing reg in insn 345
changing reg in insn 348
changing reg in insn 348
changing reg in insn 352
changing reg in insn 285
changing reg in insn 309
changing reg in insn 287
changing reg in insn 288
changing reg in insn 288
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 311
changing reg in insn 295
changing reg in insn 298
changing reg in insn 296
changing reg in insn 298
changing reg in insn 303
changing reg in insn 305
changing reg in insn 305
changing reg in insn 305
changing reg in insn 308
changing reg in insn 308
changing reg in insn 312
changing reg in insn 576
changing reg in insn 577
changing reg in insn 577
changing reg in insn 579
changing reg in insn 566
changing reg in insn 567
changing reg in insn 567
changing reg in insn 569
changing reg in insn 551
changing reg in insn 552
changing reg in insn 552
changing reg in insn 553
changing reg in insn 553
changing reg in insn 554
changing reg in insn 555
changing reg in insn 556
changing reg in insn 557
changing reg in insn 557
changing reg in insn 559
changing reg in insn 398
changing reg in insn 401
changing reg in insn 399
changing reg in insn 401
changing reg in insn 406
changing reg in insn 408
changing reg in insn 408
changing reg in insn 408
changing reg in insn 411
changing reg in insn 411
changing reg in insn 432
changing reg in insn 413
changing reg in insn 416
changing reg in insn 414
changing reg in insn 416
changing reg in insn 421
changing reg in insn 423
changing reg in insn 423
changing reg in insn 423
changing reg in insn 426
changing reg in insn 426
changing reg in insn 429
changing reg in insn 429
changing reg in insn 432
changing reg in insn 434
changing reg in insn 437
changing reg in insn 435
changing reg in insn 437
changing reg in insn 442
changing reg in insn 444
changing reg in insn 444
changing reg in insn 444
changing reg in insn 447
changing reg in insn 447
changing reg in insn 470
changing reg in insn 449
changing reg in insn 469
changing reg in insn 451
changing reg in insn 454
changing reg in insn 452
changing reg in insn 454
changing reg in insn 459
changing reg in insn 461
changing reg in insn 461
changing reg in insn 461
changing reg in insn 464
changing reg in insn 464
changing reg in insn 468
changing reg in insn 466
changing reg in insn 467
changing reg in insn 468
changing reg in insn 470
changing reg in insn 472
changing reg in insn 475
changing reg in insn 473
changing reg in insn 475
changing reg in insn 480
changing reg in insn 482
changing reg in insn 482
changing reg in insn 482
changing reg in insn 485
changing reg in insn 485
changing reg in insn 508
changing reg in insn 487
changing reg in insn 507
changing reg in insn 489
changing reg in insn 492
changing reg in insn 490
changing reg in insn 492
changing reg in insn 497
changing reg in insn 499
changing reg in insn 499
changing reg in insn 499
changing reg in insn 502
changing reg in insn 502
changing reg in insn 506
changing reg in insn 504
changing reg in insn 505
changing reg in insn 506
changing reg in insn 508
changing reg in insn 510
changing reg in insn 513
changing reg in insn 511
changing reg in insn 513
changing reg in insn 518
changing reg in insn 520
changing reg in insn 520
changing reg in insn 520
changing reg in insn 523
changing reg in insn 523
changing reg in insn 546
changing reg in insn 525
changing reg in insn 545
changing reg in insn 527
changing reg in insn 530
changing reg in insn 528
changing reg in insn 530
changing reg in insn 535
changing reg in insn 537
changing reg in insn 537
changing reg in insn 537
changing reg in insn 540
changing reg in insn 540
changing reg in insn 544
changing reg in insn 542
changing reg in insn 543
changing reg in insn 544
changing reg in insn 546
changing reg in insn 642
changing reg in insn 643
changing reg in insn 643
changing reg in insn 645
changing reg in insn 632
changing reg in insn 633
changing reg in insn 633
changing reg in insn 635
changing reg in insn 591
changing reg in insn 592
changing reg in insn 592
changing reg in insn 594
changing reg in insn 594
changing reg in insn 595
changing reg in insn 595
changing reg in insn 608
changing reg in insn 610
changing reg in insn 611
changing reg in insn 611
changing reg in insn 613
changing reg in insn 613
changing reg in insn 614
changing reg in insn 614
changing reg in insn 627
changing reg in insn 674
changing reg in insn 676
changing reg in insn 653
changing reg in insn 654
changing reg in insn 654
changing reg in insn 656
changing reg in insn 656
changing reg in insn 657
changing reg in insn 657
changing reg in insn 658
changing reg in insn 662
changing reg in insn 663
changing reg in insn 663
changing reg in insn 665
changing reg in insn 665
changing reg in insn 666
changing reg in insn 684
changing reg in insn 686
changing reg in insn 723
changing reg in insn 725
changing reg in insn 714
changing reg in insn 716
changing reg in insn 696
changing reg in insn 699
changing reg in insn 699
changing reg in insn 699
changing reg in insn 709
changing reg in insn 701
changing reg in insn 702
changing reg in insn 702
changing reg in insn 703
changing reg in insn 706
changing reg in insn 709
changing reg in insn 777
changing reg in insn 779
changing reg in insn 768
changing reg in insn 770
changing reg in insn 758
changing reg in insn 759
changing reg in insn 759
changing reg in insn 761
changing reg in insn 741
changing reg in insn 744
changing reg in insn 744
changing reg in insn 744
changing reg in insn 747
changing reg in insn 747
changing reg in insn 749
changing reg in insn 750
changing reg in insn 750
changing reg in insn 751
changing reg in insn 753
changing reg in insn 921
changing reg in insn 922
changing reg in insn 922
changing reg in insn 924
changing reg in insn 911
changing reg in insn 912
changing reg in insn 912
changing reg in insn 914
changing reg in insn 901
changing reg in insn 902
changing reg in insn 902
changing reg in insn 904
changing reg in insn 806
changing reg in insn 808
changing reg in insn 808
changing reg in insn 809
changing reg in insn 809
changing reg in insn 812
changing reg in insn 812
changing reg in insn 812
changing reg in insn 829
changing reg in insn 825
changing reg in insn 827
changing reg in insn 827
changing reg in insn 828
changing reg in insn 829
changing reg in insn 833
changing reg in insn 831
changing reg in insn 832
changing reg in insn 832
changing reg in insn 833
changing reg in insn 833
changing reg in insn 896
changing reg in insn 846
changing reg in insn 848
changing reg in insn 848
changing reg in insn 849
changing reg in insn 849
changing reg in insn 852
changing reg in insn 852
changing reg in insn 852
changing reg in insn 869
changing reg in insn 865
changing reg in insn 867
changing reg in insn 867
changing reg in insn 868
changing reg in insn 869
changing reg in insn 873
changing reg in insn 871
changing reg in insn 872
changing reg in insn 872
changing reg in insn 873
changing reg in insn 873
changing reg in insn 874
changing reg in insn 874
changing reg in insn 876
changing reg in insn 879
changing reg in insn 877
changing reg in insn 879
changing reg in insn 884
changing reg in insn 886
changing reg in insn 886
changing reg in insn 886
changing reg in insn 889
changing reg in insn 889
changing reg in insn 893
changing reg in insn 891
changing reg in insn 892
changing reg in insn 892
changing reg in insn 893
changing reg in insn 893
changing reg in insn 894
changing reg in insn 894
changing reg in insn 895
changing reg in insn 896
changing reg in insn 1089
changing reg in insn 1091
changing reg in insn 1080
changing reg in insn 1082
changing reg in insn 1065
changing reg in insn 1066
changing reg in insn 1066
changing reg in insn 1067
changing reg in insn 1067
changing reg in insn 1068
changing reg in insn 1069
changing reg in insn 1070
changing reg in insn 1071
changing reg in insn 1071
changing reg in insn 1073
changing reg in insn 940
changing reg in insn 943
changing reg in insn 941
changing reg in insn 943
changing reg in insn 948
changing reg in insn 950
changing reg in insn 950
changing reg in insn 950
changing reg in insn 953
changing reg in insn 953
changing reg in insn 967
changing reg in insn 955
changing reg in insn 958
changing reg in insn 958
changing reg in insn 958
changing reg in insn 961
changing reg in insn 961
changing reg in insn 964
changing reg in insn 964
changing reg in insn 967
changing reg in insn 969
changing reg in insn 972
changing reg in insn 970
changing reg in insn 972
changing reg in insn 977
changing reg in insn 979
changing reg in insn 979
changing reg in insn 979
changing reg in insn 982
changing reg in insn 982
changing reg in insn 998
changing reg in insn 984
changing reg in insn 997
changing reg in insn 986
changing reg in insn 989
changing reg in insn 989
changing reg in insn 989
changing reg in insn 992
changing reg in insn 992
changing reg in insn 996
changing reg in insn 994
changing reg in insn 995
changing reg in insn 996
changing reg in insn 998
changing reg in insn 1000
changing reg in insn 1003
changing reg in insn 1001
changing reg in insn 1003
changing reg in insn 1008
changing reg in insn 1010
changing reg in insn 1010
changing reg in insn 1010
changing reg in insn 1013
changing reg in insn 1013
changing reg in insn 1029
changing reg in insn 1015
changing reg in insn 1028
changing reg in insn 1017
changing reg in insn 1020
changing reg in insn 1020
changing reg in insn 1020
changing reg in insn 1023
changing reg in insn 1023
changing reg in insn 1027
changing reg in insn 1025
changing reg in insn 1026
changing reg in insn 1027
changing reg in insn 1029
changing reg in insn 1031
changing reg in insn 1034
changing reg in insn 1032
changing reg in insn 1034
changing reg in insn 1039
changing reg in insn 1041
changing reg in insn 1041
changing reg in insn 1041
changing reg in insn 1044
changing reg in insn 1044
changing reg in insn 1060
changing reg in insn 1046
changing reg in insn 1059
changing reg in insn 1048
changing reg in insn 1051
changing reg in insn 1051
changing reg in insn 1051
changing reg in insn 1054
changing reg in insn 1054
changing reg in insn 1058
changing reg in insn 1056
changing reg in insn 1057
changing reg in insn 1058
changing reg in insn 1060
changing reg in insn 1106
changing reg in insn 1107
changing reg in insn 1111
changing reg in insn 1112
changing reg in insn 1116
changing reg in insn 1119
changing reg in insn 1119
changing reg in insn 1123
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 31
changing reg in insn 32
changing reg in insn 37
changing reg in insn 35
changing reg in insn 34
changing reg in insn 33
changing reg in insn 38
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 50
changing reg in insn 51
changing reg in insn 54
changing reg in insn 53
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 81
changing reg in insn 82
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 113
changing reg in insn 114
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 130
changing reg in insn 131
changing reg in insn 138
changing reg in insn 136
changing reg in insn 134
changing reg in insn 133
changing reg in insn 132
changing reg in insn 139
changing reg in insn 137
changing reg in insn 136
changing reg in insn 135
changing reg in insn 134
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 147
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 160
changing reg in insn 158
changing reg in insn 156
changing reg in insn 155
changing reg in insn 154
changing reg in insn 161
changing reg in insn 159
changing reg in insn 158
changing reg in insn 157
changing reg in insn 156
changing reg in insn 155
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 171
changing reg in insn 172
changing reg in insn 178
changing reg in insn 179
changing reg in insn 184
changing reg in insn 185
changing reg in insn 192
changing reg in insn 190
changing reg in insn 188
changing reg in insn 187
changing reg in insn 186
changing reg in insn 193
changing reg in insn 191
changing reg in insn 190
changing reg in insn 189
changing reg in insn 188
changing reg in insn 187
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 201
changing reg in insn 202
changing reg in insn 204
changing reg in insn 205
changing reg in insn 203
changing reg in insn 204
changing reg in insn 206
changing reg in insn 207
changing reg in insn 214
changing reg in insn 212
changing reg in insn 210
changing reg in insn 209
changing reg in insn 208
changing reg in insn 215
changing reg in insn 213
changing reg in insn 212
changing reg in insn 211
changing reg in insn 210
changing reg in insn 209
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 223
changing reg in insn 224
changing reg in insn 226
changing reg in insn 227
changing reg in insn 225
changing reg in insn 226
changing reg in insn 233
changing reg in insn 234
changing reg in insn 243
changing reg in insn 244
changing reg in insn 254
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 267
changing reg in insn 268
changing reg in insn 273
changing reg in insn 274
changing reg in insn 276
changing reg in insn 284
changing reg in insn 285
changing reg in insn 286
changing reg in insn 287
changing reg in insn 289
changing reg in insn 290
changing reg in insn 294
changing reg in insn 295
changing reg in insn 302
changing reg in insn 300
changing reg in insn 298
changing reg in insn 297
changing reg in insn 296
changing reg in insn 303
changing reg in insn 301
changing reg in insn 300
changing reg in insn 299
changing reg in insn 298
changing reg in insn 297
changing reg in insn 299
changing reg in insn 300
changing reg in insn 301
changing reg in insn 302
changing reg in insn 304
changing reg in insn 305
changing reg in insn 307
changing reg in insn 308
changing reg in insn 306
changing reg in insn 307
changing reg in insn 318
changing reg in insn 319
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 327
changing reg in insn 329
changing reg in insn 330
changing reg in insn 334
changing reg in insn 335
changing reg in insn 342
changing reg in insn 340
changing reg in insn 338
changing reg in insn 337
changing reg in insn 336
changing reg in insn 343
changing reg in insn 341
changing reg in insn 340
changing reg in insn 339
changing reg in insn 338
changing reg in insn 337
changing reg in insn 339
changing reg in insn 340
changing reg in insn 341
changing reg in insn 342
changing reg in insn 344
changing reg in insn 345
changing reg in insn 347
changing reg in insn 348
changing reg in insn 346
changing reg in insn 347
changing reg in insn 368
changing reg in insn 369
changing reg in insn 378
changing reg in insn 379
changing reg in insn 397
changing reg in insn 398
changing reg in insn 405
changing reg in insn 403
changing reg in insn 401
changing reg in insn 400
changing reg in insn 399
changing reg in insn 406
changing reg in insn 404
changing reg in insn 403
changing reg in insn 402
changing reg in insn 401
changing reg in insn 400
changing reg in insn 402
changing reg in insn 403
changing reg in insn 404
changing reg in insn 405
changing reg in insn 407
changing reg in insn 408
changing reg in insn 410
changing reg in insn 411
changing reg in insn 409
changing reg in insn 410
changing reg in insn 412
changing reg in insn 413
changing reg in insn 420
changing reg in insn 418
changing reg in insn 416
changing reg in insn 415
changing reg in insn 414
changing reg in insn 421
changing reg in insn 419
changing reg in insn 418
changing reg in insn 417
changing reg in insn 416
changing reg in insn 415
changing reg in insn 417
changing reg in insn 418
changing reg in insn 419
changing reg in insn 420
changing reg in insn 422
changing reg in insn 423
changing reg in insn 425
changing reg in insn 426
changing reg in insn 424
changing reg in insn 425
changing reg in insn 428
changing reg in insn 429
changing reg in insn 427
changing reg in insn 428
changing reg in insn 431
changing reg in insn 432
changing reg in insn 430
changing reg in insn 431
changing reg in insn 433
changing reg in insn 434
changing reg in insn 441
changing reg in insn 439
changing reg in insn 437
changing reg in insn 436
changing reg in insn 435
changing reg in insn 442
changing reg in insn 440
changing reg in insn 439
changing reg in insn 438
changing reg in insn 437
changing reg in insn 436
changing reg in insn 438
changing reg in insn 439
changing reg in insn 440
changing reg in insn 441
changing reg in insn 443
changing reg in insn 444
changing reg in insn 446
changing reg in insn 447
changing reg in insn 445
changing reg in insn 446
changing reg in insn 448
changing reg in insn 449
changing reg in insn 450
changing reg in insn 451
changing reg in insn 458
changing reg in insn 456
changing reg in insn 454
changing reg in insn 453
changing reg in insn 452
changing reg in insn 459
changing reg in insn 457
changing reg in insn 456
changing reg in insn 455
changing reg in insn 454
changing reg in insn 453
changing reg in insn 455
changing reg in insn 456
changing reg in insn 457
changing reg in insn 458
changing reg in insn 460
changing reg in insn 461
changing reg in insn 463
changing reg in insn 464
changing reg in insn 462
changing reg in insn 463
changing reg in insn 465
changing reg in insn 466
changing reg in insn 467
changing reg in insn 468
changing reg in insn 469
changing reg in insn 470
changing reg in insn 471
changing reg in insn 472
changing reg in insn 479
changing reg in insn 477
changing reg in insn 475
changing reg in insn 474
changing reg in insn 473
changing reg in insn 480
changing reg in insn 478
changing reg in insn 477
changing reg in insn 476
changing reg in insn 475
changing reg in insn 474
changing reg in insn 476
changing reg in insn 477
changing reg in insn 478
changing reg in insn 479
changing reg in insn 481
changing reg in insn 482
changing reg in insn 484
changing reg in insn 485
changing reg in insn 483
changing reg in insn 484
changing reg in insn 486
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 496
changing reg in insn 494
changing reg in insn 492
changing reg in insn 491
changing reg in insn 490
changing reg in insn 497
changing reg in insn 495
changing reg in insn 494
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 493
changing reg in insn 494
changing reg in insn 495
changing reg in insn 496
changing reg in insn 498
changing reg in insn 499
changing reg in insn 501
changing reg in insn 502
changing reg in insn 500
changing reg in insn 501
changing reg in insn 503
changing reg in insn 504
changing reg in insn 505
changing reg in insn 506
changing reg in insn 507
changing reg in insn 508
changing reg in insn 509
changing reg in insn 510
changing reg in insn 517
changing reg in insn 515
changing reg in insn 513
changing reg in insn 512
changing reg in insn 511
changing reg in insn 518
changing reg in insn 516
changing reg in insn 515
changing reg in insn 514
changing reg in insn 513
changing reg in insn 512
changing reg in insn 514
changing reg in insn 515
changing reg in insn 516
changing reg in insn 517
changing reg in insn 519
changing reg in insn 520
changing reg in insn 522
changing reg in insn 523
changing reg in insn 521
changing reg in insn 522
changing reg in insn 524
changing reg in insn 525
changing reg in insn 526
changing reg in insn 527
changing reg in insn 534
changing reg in insn 532
changing reg in insn 530
changing reg in insn 529
changing reg in insn 528
changing reg in insn 535
changing reg in insn 533
changing reg in insn 532
changing reg in insn 531
changing reg in insn 530
changing reg in insn 529
changing reg in insn 531
changing reg in insn 532
changing reg in insn 533
changing reg in insn 534
changing reg in insn 536
changing reg in insn 537
changing reg in insn 539
changing reg in insn 540
changing reg in insn 538
changing reg in insn 539
changing reg in insn 541
changing reg in insn 542
changing reg in insn 543
changing reg in insn 544
changing reg in insn 545
changing reg in insn 546
changing reg in insn 550
changing reg in insn 551
changing reg in insn 565
changing reg in insn 566
changing reg in insn 575
changing reg in insn 576
changing reg in insn 590
changing reg in insn 591
changing reg in insn 593
changing reg in insn 597
changing reg in insn 607
changing reg in insn 596
changing reg in insn 597
changing reg in insn 599
changing reg in insn 602
changing reg in insn 600
changing reg in insn 602
changing reg in insn 598
changing reg in insn 599
changing reg in insn 606
changing reg in insn 604
changing reg in insn 602
changing reg in insn 601
changing reg in insn 600
changing reg in insn 607
changing reg in insn 605
changing reg in insn 604
changing reg in insn 603
changing reg in insn 602
changing reg in insn 601
changing reg in insn 603
changing reg in insn 604
changing reg in insn 605
changing reg in insn 606
changing reg in insn 607
changing reg in insn 608
changing reg in insn 609
changing reg in insn 610
changing reg in insn 612
changing reg in insn 616
changing reg in insn 626
changing reg in insn 615
changing reg in insn 616
changing reg in insn 618
changing reg in insn 621
changing reg in insn 619
changing reg in insn 621
changing reg in insn 617
changing reg in insn 618
changing reg in insn 625
changing reg in insn 623
changing reg in insn 621
changing reg in insn 620
changing reg in insn 619
changing reg in insn 626
changing reg in insn 624
changing reg in insn 623
changing reg in insn 622
changing reg in insn 621
changing reg in insn 620
changing reg in insn 622
changing reg in insn 623
changing reg in insn 624
changing reg in insn 625
changing reg in insn 626
changing reg in insn 627
changing reg in insn 631
changing reg in insn 632
changing reg in insn 641
changing reg in insn 642
changing reg in insn 652
changing reg in insn 653
changing reg in insn 655
changing reg in insn 661
changing reg in insn 662
changing reg in insn 664
changing reg in insn 666
changing reg in insn 667
changing reg in insn 673
changing reg in insn 674
changing reg in insn 680
changing reg in insn 682
changing reg in insn 681
changing reg in insn 679
changing reg in insn 680
changing reg in insn 683
changing reg in insn 684
changing reg in insn 685
changing reg in insn 686
changing reg in insn 695
changing reg in insn 696
changing reg in insn 698
changing reg in insn 699
changing reg in insn 700
changing reg in insn 701
changing reg in insn 705
changing reg in insn 706
changing reg in insn 708
changing reg in insn 709
changing reg in insn 707
changing reg in insn 708
changing reg in insn 713
changing reg in insn 714
changing reg in insn 722
changing reg in insn 723
changing reg in insn 740
changing reg in insn 741
changing reg in insn 743
changing reg in insn 744
changing reg in insn 746
changing reg in insn 747
changing reg in insn 745
changing reg in insn 746
changing reg in insn 748
changing reg in insn 749
changing reg in insn 752
changing reg in insn 753
changing reg in insn 757
changing reg in insn 758
changing reg in insn 767
changing reg in insn 768
changing reg in insn 776
changing reg in insn 777
changing reg in insn 795
changing reg in insn 805
changing reg in insn 794
changing reg in insn 795
changing reg in insn 797
changing reg in insn 800
changing reg in insn 798
changing reg in insn 800
changing reg in insn 796
changing reg in insn 797
changing reg in insn 804
changing reg in insn 802
changing reg in insn 800
changing reg in insn 799
changing reg in insn 798
changing reg in insn 805
changing reg in insn 803
changing reg in insn 802
changing reg in insn 801
changing reg in insn 800
changing reg in insn 799
changing reg in insn 801
changing reg in insn 802
changing reg in insn 803
changing reg in insn 804
changing reg in insn 805
changing reg in insn 806
changing reg in insn 807
changing reg in insn 811
changing reg in insn 812
changing reg in insn 814
changing reg in insn 824
changing reg in insn 813
changing reg in insn 814
changing reg in insn 816
changing reg in insn 819
changing reg in insn 817
changing reg in insn 819
changing reg in insn 815
changing reg in insn 816
changing reg in insn 823
changing reg in insn 821
changing reg in insn 819
changing reg in insn 818
changing reg in insn 817
changing reg in insn 824
changing reg in insn 822
changing reg in insn 821
changing reg in insn 820
changing reg in insn 819
changing reg in insn 818
changing reg in insn 820
changing reg in insn 821
changing reg in insn 822
changing reg in insn 823
changing reg in insn 824
changing reg in insn 825
changing reg in insn 826
changing reg in insn 828
changing reg in insn 829
changing reg in insn 830
changing reg in insn 831
changing reg in insn 835
changing reg in insn 845
changing reg in insn 834
changing reg in insn 835
changing reg in insn 837
changing reg in insn 840
changing reg in insn 838
changing reg in insn 840
changing reg in insn 836
changing reg in insn 837
changing reg in insn 844
changing reg in insn 842
changing reg in insn 840
changing reg in insn 839
changing reg in insn 838
changing reg in insn 845
changing reg in insn 843
changing reg in insn 842
changing reg in insn 841
changing reg in insn 840
changing reg in insn 839
changing reg in insn 841
changing reg in insn 842
changing reg in insn 843
changing reg in insn 844
changing reg in insn 845
changing reg in insn 846
changing reg in insn 847
changing reg in insn 851
changing reg in insn 852
changing reg in insn 854
changing reg in insn 864
changing reg in insn 853
changing reg in insn 854
changing reg in insn 856
changing reg in insn 859
changing reg in insn 857
changing reg in insn 859
changing reg in insn 855
changing reg in insn 856
changing reg in insn 863
changing reg in insn 861
changing reg in insn 859
changing reg in insn 858
changing reg in insn 857
changing reg in insn 864
changing reg in insn 862
changing reg in insn 861
changing reg in insn 860
changing reg in insn 859
changing reg in insn 858
changing reg in insn 860
changing reg in insn 861
changing reg in insn 862
changing reg in insn 863
changing reg in insn 864
changing reg in insn 865
changing reg in insn 866
changing reg in insn 868
changing reg in insn 869
changing reg in insn 870
changing reg in insn 871
changing reg in insn 875
changing reg in insn 876
changing reg in insn 883
changing reg in insn 881
changing reg in insn 879
changing reg in insn 878
changing reg in insn 877
changing reg in insn 884
changing reg in insn 882
changing reg in insn 881
changing reg in insn 880
changing reg in insn 879
changing reg in insn 878
changing reg in insn 880
changing reg in insn 881
changing reg in insn 882
changing reg in insn 883
changing reg in insn 885
changing reg in insn 886
changing reg in insn 888
changing reg in insn 889
changing reg in insn 887
changing reg in insn 888
changing reg in insn 890
changing reg in insn 891
changing reg in insn 900
changing reg in insn 901
changing reg in insn 910
changing reg in insn 911
changing reg in insn 920
changing reg in insn 921
changing reg in insn 939
changing reg in insn 940
changing reg in insn 947
changing reg in insn 945
changing reg in insn 943
changing reg in insn 942
changing reg in insn 941
changing reg in insn 948
changing reg in insn 946
changing reg in insn 945
changing reg in insn 944
changing reg in insn 943
changing reg in insn 942
changing reg in insn 944
changing reg in insn 945
changing reg in insn 946
changing reg in insn 947
changing reg in insn 949
changing reg in insn 950
changing reg in insn 952
changing reg in insn 953
changing reg in insn 951
changing reg in insn 952
changing reg in insn 954
changing reg in insn 955
changing reg in insn 957
changing reg in insn 958
changing reg in insn 960
changing reg in insn 961
changing reg in insn 959
changing reg in insn 960
changing reg in insn 963
changing reg in insn 964
changing reg in insn 962
changing reg in insn 963
changing reg in insn 966
changing reg in insn 967
changing reg in insn 965
changing reg in insn 966
changing reg in insn 968
changing reg in insn 969
changing reg in insn 976
changing reg in insn 974
changing reg in insn 972
changing reg in insn 971
changing reg in insn 970
changing reg in insn 977
changing reg in insn 975
changing reg in insn 974
changing reg in insn 973
changing reg in insn 972
changing reg in insn 971
changing reg in insn 973
changing reg in insn 974
changing reg in insn 975
changing reg in insn 976
changing reg in insn 978
changing reg in insn 979
changing reg in insn 981
changing reg in insn 982
changing reg in insn 980
changing reg in insn 981
changing reg in insn 983
changing reg in insn 984
changing reg in insn 985
changing reg in insn 986
changing reg in insn 988
changing reg in insn 989
changing reg in insn 991
changing reg in insn 992
changing reg in insn 990
changing reg in insn 991
changing reg in insn 993
changing reg in insn 994
changing reg in insn 995
changing reg in insn 996
changing reg in insn 997
changing reg in insn 998
changing reg in insn 999
changing reg in insn 1000
changing reg in insn 1007
changing reg in insn 1005
changing reg in insn 1003
changing reg in insn 1002
changing reg in insn 1001
changing reg in insn 1008
changing reg in insn 1006
changing reg in insn 1005
changing reg in insn 1004
changing reg in insn 1003
changing reg in insn 1002
changing reg in insn 1004
changing reg in insn 1005
changing reg in insn 1006
changing reg in insn 1007
changing reg in insn 1009
changing reg in insn 1010
changing reg in insn 1012
changing reg in insn 1013
changing reg in insn 1011
changing reg in insn 1012
changing reg in insn 1014
changing reg in insn 1015
changing reg in insn 1016
changing reg in insn 1017
changing reg in insn 1019
changing reg in insn 1020
changing reg in insn 1022
changing reg in insn 1023
changing reg in insn 1021
changing reg in insn 1022
changing reg in insn 1024
changing reg in insn 1025
changing reg in insn 1026
changing reg in insn 1027
changing reg in insn 1028
changing reg in insn 1029
changing reg in insn 1030
changing reg in insn 1031
changing reg in insn 1038
changing reg in insn 1036
changing reg in insn 1034
changing reg in insn 1033
changing reg in insn 1032
changing reg in insn 1039
changing reg in insn 1037
changing reg in insn 1036
changing reg in insn 1035
changing reg in insn 1034
changing reg in insn 1033
changing reg in insn 1035
changing reg in insn 1036
changing reg in insn 1037
changing reg in insn 1038
changing reg in insn 1040
changing reg in insn 1041
changing reg in insn 1043
changing reg in insn 1044
changing reg in insn 1042
changing reg in insn 1043
changing reg in insn 1045
changing reg in insn 1046
changing reg in insn 1047
changing reg in insn 1048
changing reg in insn 1050
changing reg in insn 1051
changing reg in insn 1053
changing reg in insn 1054
changing reg in insn 1052
changing reg in insn 1053
changing reg in insn 1055
changing reg in insn 1056
changing reg in insn 1057
changing reg in insn 1058
changing reg in insn 1059
changing reg in insn 1060
changing reg in insn 1064
changing reg in insn 1065
changing reg in insn 1079
changing reg in insn 1080
changing reg in insn 1088
changing reg in insn 1089
changing reg in insn 1098
changing reg in insn 1099
changing reg in insn 1105
changing reg in insn 1106
changing reg in insn 1110
changing reg in insn 1111
changing reg in insn 21
changing reg in insn 1124
deleting insn with uid = 309.
deleting insn with uid = 311.
deleting insn with uid = 349.
deleting insn with uid = 351.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 168.
verify found no changes in insn with uid = 200.
verify found no changes in insn with uid = 222.
verify found no changes in insn with uid = 262.
verify found no changes in insn with uid = 313.
verify found no changes in insn with uid = 353.
verify found no changes in insn with uid = 359.
verify found no changes in insn with uid = 361.
verify found no changes in insn with uid = 704.
verify found no changes in insn with uid = 1113.
verify found no changes in insn with uid = 1126.


int read_csi_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision3* (*)[100], Precision4* (*)[100], Precision4* (*)[32], int*, PE_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={570d,584u} r1={165d,173u,64e} r2={48d,30u,4e} r3={7d,6u} r4={36d,18u} r5={37d,19u} r6={1d,396u} r7={1d,108u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r17={305d,35u} r18={18d} r19={18d} r20={1d,1u,56e} r21={19d} r22={19d} r23={19d} r24={19d} r25={19d} r26={19d} r27={19d} r28={19d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={19d,1u} r38={19d,1u} r39={18d} r40={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} 
;;    total ref usage 3793{2297d,1372u,124e} in 962{944 regular + 18 call} insns.
(note 1 0 22 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 365 366 367 368 369 370
(note 22 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 22 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80080 [0xfffffffffffec730])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80088 [0xfffffffffffec728])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80104 [0xfffffffffffec718])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80112 [0xfffffffffffec710])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [365])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])
        (reg/f:DI 0 ax [365])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [366])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])
        (reg/f:DI 0 ax [366])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])
        (reg/f:DI 0 ax [367])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [368])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 final_data+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])
        (reg/f:DI 0 ax [368])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])
        (reg/f:DI 0 ax [369])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])
        (reg/f:DI 0 ax [370])) fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(note 20 19 21 2 NOTE_INSN_FUNCTION_BEG)
(insn 21 20 24 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.6594+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [702])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:112 964 {stack_tls_protect_set_di}
     (nil))
(insn 24 21 25 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:114 90 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80040 [0xfffffffffffec758])) [0 actual_number_pe+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:114 90 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 init_precision4.lo+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:118 89 {*movdi_internal}
     (nil))
(insn 27 26 1133 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:120 90 {*movsi_internal}
     (nil))
(jump_insn 1133 27 1134 2 (set (pc)
        (label_ref 1096)) fmtext_o.cpp:120 636 {jump}
     (nil)
 -> 1096)
;;  succ:       85 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1134 1133 1101)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       85
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 85 86 87 88 371 372 373 374
(code_label 1101 1134 30 3 66 "" [1 uses])
(note 30 1101 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 3 (set (reg:SI 0 ax [371])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:122 90 {*movsi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:DI 1 dx [orig:85 D.6574 ] [85])
        (sign_extend:DI (reg:SI 0 ax [371]))) fmtext_o.cpp:122 142 {*extendsidi2_rex64}
     (nil))
(insn 33 32 34 3 (set (reg:DI 0 ax [372])
        (reg:DI 1 dx [orig:85 D.6574 ] [85])) fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg:DI 0 ax [372])
                (ashift:DI (reg:DI 0 ax [372])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 497 {*ashldi3_1}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg:DI 0 ax [372])
                (plus:DI (reg:DI 0 ax [372])
                    (reg:DI 1 dx [orig:85 D.6574 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:85 D.6574 ] [85])
            (const_int 9 [0x9]))
        (nil)))
(insn 36 35 37 3 (parallel [
            (set (reg:DI 0 ax [373])
                (ashift:DI (reg:DI 0 ax [372])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 497 {*ashldi3_1}
     (nil))
(insn 37 36 38 3 (set (reg:DI 0 ax [372])
        (reg:DI 0 ax [373])) fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(insn 38 37 39 3 (set (reg:DI 1 dx [orig:86 D.6574 ] [86])
        (reg:DI 0 ax [372])) fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80080 [0xfffffffffffec730])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(insn 40 39 41 3 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.6575 ] [87])
                (plus:DI (reg/f:DI 0 ax [374])
                    (reg:DI 1 dx [orig:86 D.6574 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:122 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80064 [0xfffffffffffec740])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:86 D.6574 ] [86]))
        (nil)))
(insn 41 40 42 3 (set (reg:SI 0 ax [orig:88 D.6573 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:87 D.6575 ] [87])
                (const_int 20 [0x14])) [0 _37->file_type+0 S4 A32])) fmtext_o.cpp:122 90 {*movsi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.6573 ] [88])
            (const_int 0 [0]))) fmtext_o.cpp:122 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 43 42 44 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1093)
            (pc))) fmtext_o.cpp:122 596 {*jcc_1}
     (nil)
 -> 1093)
;;  succ:       4 (FALLTHRU)
;;              84
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 89 90 91 92 93 94 95 96 375 376 377 378 379 380 381 382
(note 44 43 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 4 (set (reg:SI 0 ax [375])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:DI 0 ax [orig:89 D.6574 ] [89])
        (sign_extend:DI (reg:SI 0 ax [375]))) fmtext_o.cpp:124 142 {*extendsidi2_rex64}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg:DI 1 dx [orig:90 D.6574 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.6574 ] [89])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 497 {*ashldi3_1}
     (nil))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg/f:DI 3 bx [orig:91 D.6576 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 D.6574 ] [90])
                    (reg/f:DI 0 ax [376])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80104 [0xfffffffffffec718])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.6574 ] [90]))
        (nil)))
(insn 50 49 51 4 (set (reg:SI 0 ax [378])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
(insn 51 50 1184 4 (set (reg:DI 0 ax [377])
        (sign_extend:DI (reg:SI 0 ax [378]))) fmtext_o.cpp:124 142 {*extendsidi2_rex64}
     (nil))
(insn 1184 51 52 4 (set (reg:DI 0 ax [379])
        (reg:DI 0 ax [377])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 52 1184 1185 4 (parallel [
            (set (reg:DI 0 ax [379])
                (ashift:DI (reg:DI 0 ax [379])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 497 {*ashldi3_1}
     (nil))
(insn 1185 52 53 4 (set (reg:DI 1 dx [379])
        (reg:DI 0 ax [379])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 53 1185 54 4 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80088 [0xfffffffffffec728])) [0 file+0 S8 A64])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.6577 ] [92])
                (plus:DI (reg/f:DI 0 ax [380])
                    (reg:DI 1 dx [379])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:124 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80072 [0xfffffffffffec738])) [0 file+0 S8 A64])
            (reg:DI 1 dx [379]))
        (nil)))
(insn 55 54 56 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2b8e1bf85098 *.LC15>)) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 56 55 57 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:92 D.6577 ] [92])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(call_insn 57 56 58 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b8e1bc4bd00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:124 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [orig:93 D.6578 ] [93])
        (reg:DI 0 ax)) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:91 D.6576 ] [91]) [0 *_42+0 S8 A64])
        (reg/f:DI 0 ax [orig:93 D.6578 ] [93])) fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 60 59 61 4 (set (reg:SI 0 ax [381])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:126 90 {*movsi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DI 0 ax [orig:94 D.6574 ] [94])
        (sign_extend:DI (reg:SI 0 ax [381]))) fmtext_o.cpp:126 142 {*extendsidi2_rex64}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg:DI 1 dx [orig:95 D.6574 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.6574 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:126 497 {*ashldi3_1}
     (nil))
(insn 63 62 64 4 (set (reg/f:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:126 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.6576 ] [96])
                (plus:DI (reg/f:DI 0 ax [382])
                    (reg:DI 1 dx [orig:95 D.6574 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:126 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80104 [0xfffffffffffec718])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.6574 ] [95]))
        (nil)))
(insn 65 64 66 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:96 D.6576 ] [96])
            (const_int 0 [0]))) fmtext_o.cpp:126 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 66 65 67 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) fmtext_o.cpp:126 596 {*jcc_1}
     (nil)
 -> 73)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 67 66 68 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b8e1bf85130 *.LC16>)) fmtext_o.cpp:127 89 {*movdi_internal}
     (nil))
(call_insn 69 68 70 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:127 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 70 69 71 5 (set (reg:SI 5 di)
        (const_int 4 [0x4])) fmtext_o.cpp:128 90 {*movsi_internal}
     (nil))
(call_insn 71 70 72 5 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b8e1bab3900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:128 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 72 71 73)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 97 98 99 100 101 102 103 383 384 385
(code_label 73 72 74 6 14 "" [1 uses])
(note 74 73 75 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 6 (set (reg:SI 0 ax [383])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:133 90 {*movsi_internal}
     (nil))
(insn 76 75 77 6 (set (reg:DI 0 ax [orig:97 D.6574 ] [97])
        (sign_extend:DI (reg:SI 0 ax [383]))) fmtext_o.cpp:133 142 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 6 (parallel [
            (set (reg:DI 1 dx [orig:98 D.6574 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.6574 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:133 497 {*ashldi3_1}
     (nil))
(insn 78 77 79 6 (set (reg/f:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 79 78 80 6 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.6576 ] [99])
                (plus:DI (reg/f:DI 0 ax [384])
                    (reg:DI 1 dx [orig:98 D.6574 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:133 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80104 [0xfffffffffffec718])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.6574 ] [98]))
        (nil)))
(insn 80 79 81 6 (set (reg/f:DI 1 dx [orig:100 D.6578 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 D.6576 ] [99]) [0 *_52+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 81 80 82 6 (set (reg/f:DI 0 ax [385])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 82 81 83 6 (set (reg/f:DI 0 ax [orig:101 D.6579 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [385]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 83 82 84 6 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:100 D.6578 ] [100])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 84 83 85 6 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 85 84 86 6 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 86 85 87 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:101 D.6579 ] [101])) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(call_insn 87 86 88 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b8e1bc5b900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:133 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 88 87 89 6 (set (reg:DI 0 ax [orig:102 D.6574 ] [102])
        (reg:DI 0 ax)) fmtext_o.cpp:133 89 {*movdi_internal}
     (nil))
(insn 89 88 90 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:102 D.6574 ] [102])
            (const_int 1 [0x1]))) fmtext_o.cpp:133 8 {*cmpdi_1}
     (nil))
(insn 90 89 91 6 (set (reg:QI 0 ax [orig:103 D.6580 ] [103])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:133 592 {*setcc_qi}
     (nil))
(insn 91 90 92 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:103 D.6580 ] [103])
            (const_int 0 [0]))) fmtext_o.cpp:133 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 92 91 93 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) fmtext_o.cpp:133 596 {*jcc_1}
     (nil)
 -> 99)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 93 92 94 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b8e1bf851c8 *.LC17>)) fmtext_o.cpp:134 89 {*movdi_internal}
     (nil))
(call_insn 95 94 96 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:134 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 96 95 97 7 (set (reg:SI 5 di)
        (const_int 5 [0x5])) fmtext_o.cpp:135 90 {*movsi_internal}
     (nil))
(call_insn 97 96 98 7 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b8e1bab3900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:135 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 98 97 99)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 104 386 387
(code_label 99 98 100 8 15 "" [1 uses])
(note 100 99 101 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 8 (set (reg/f:DI 0 ax [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:139 89 {*movdi_internal}
     (nil))
(insn 102 101 103 8 (set (reg/f:DI 0 ax [orig:104 D.6579 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [386]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:139 89 {*movdi_internal}
     (nil))
(insn 103 102 104 8 (set (reg:SI 0 ax [387])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:104 D.6579 ] [104])
                (const_int 8 [0x8])) [0 _59->np.number+0 S4 A32])) fmtext_o.cpp:139 90 {*movsi_internal}
     (nil))
(insn 104 103 105 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [387])) fmtext_o.cpp:139 90 {*movsi_internal}
     (nil))
(insn 105 104 1135 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:143 90 {*movsi_internal}
     (nil))
(jump_insn 1135 105 1136 8 (set (pc)
        (label_ref 241)) fmtext_o.cpp:143 636 {jump}
     (nil)
 -> 241)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1136 1135 246)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 246 1136 108 9 22 "" [1 uses])
(note 108 246 109 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 1137 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:145 90 {*movsi_internal}
     (nil))
(jump_insn 1137 109 1138 9 (set (pc)
        (label_ref 231)) fmtext_o.cpp:145 636 {jump}
     (nil)
 -> 231)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1138 1137 236)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 388
(code_label 236 1138 112 10 21 "" [1 uses])
(note 112 236 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 10 (set (reg/f:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (nil))
(insn 114 113 115 10 (set (reg/f:DI 0 ax [orig:109 D.6579 ] [109])
        (mem/f:DI (reg/f:DI 0 ax [388]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (nil))
(insn 115 114 116 10 (set (reg:HI 0 ax [orig:110 D.6581 ] [110])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:109 D.6579 ] [109])
                (const_int 26 [0x1a])) [0 _67->status.number+0 S2 A16])) fmtext_o.cpp:148 92 {*movhi_internal}
     (nil))
(insn 116 115 117 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:110 D.6581 ] [110])
            (const_int 69 [0x45]))) fmtext_o.cpp:148 6 {*cmphi_1}
     (nil))
(jump_insn 117 116 118 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 128)
            (pc))) fmtext_o.cpp:148 596 {*jcc_1}
     (nil)
 -> 128)
;;  succ:       12
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113 114 115 389 390
(note 118 117 119 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 11 (set (reg:SI 0 ax [389])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:148 90 {*movsi_internal}
     (nil))
(insn 120 119 121 11 (set (reg:DI 0 ax [orig:111 D.6574 ] [111])
        (sign_extend:DI (reg:SI 0 ax [389]))) fmtext_o.cpp:148 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 11 (parallel [
            (set (reg:DI 1 dx [orig:112 D.6574 ] [112])
                (ashift:DI (reg:DI 0 ax [orig:111 D.6574 ] [111])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:148 497 {*ashldi3_1}
     (nil))
(insn 122 121 123 11 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (nil))
(insn 123 122 124 11 (parallel [
            (set (reg/f:DI 0 ax [orig:113 D.6582 ] [113])
                (plus:DI (reg/f:DI 0 ax [390])
                    (reg:DI 1 dx [orig:112 D.6574 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:148 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80080 [0xfffffffffffec730])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:112 D.6574 ] [112]))
        (nil)))
(insn 124 123 125 11 (set (reg/f:DI 0 ax [orig:114 D.6579 ] [114])
        (mem/f:DI (reg/f:DI 0 ax [orig:113 D.6582 ] [113]) [0 *_71+0 S8 A64])) fmtext_o.cpp:148 89 {*movdi_internal}
     (nil))
(insn 125 124 126 11 (set (reg:HI 0 ax [orig:115 D.6581 ] [115])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:114 D.6579 ] [114])
                (const_int 26 [0x1a])) [0 _72->status.number+0 S2 A16])) fmtext_o.cpp:148 92 {*movhi_internal}
     (nil))
(insn 126 125 127 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:115 D.6581 ] [115])
            (const_int 2073 [0x819]))) fmtext_o.cpp:148 6 {*cmphi_1}
     (nil))
(jump_insn 127 126 128 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 176)
            (pc))) fmtext_o.cpp:148 596 {*jcc_1}
     (nil)
 -> 176)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 130 131 132 133 134 135 136 137 138 139 140 141 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408
(code_label 128 127 129 12 18 "" [1 uses])
(note 129 128 130 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 12 (set (reg:SI 0 ax [391])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:149 90 {*movsi_internal}
     (nil))
(insn 131 130 132 12 (set (reg:DI 1 dx [orig:130 D.6574 ] [130])
        (sign_extend:DI (reg:SI 0 ax [391]))) fmtext_o.cpp:149 142 {*extendsidi2_rex64}
     (nil))
(insn 132 131 133 12 (set (reg:DI 0 ax [392])
        (reg:DI 1 dx [orig:130 D.6574 ] [130])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 133 132 134 12 (parallel [
            (set (reg:DI 0 ax [392])
                (ashift:DI (reg:DI 0 ax [392])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 497 {*ashldi3_1}
     (nil))
(insn 134 133 135 12 (parallel [
            (set (reg:DI 0 ax [392])
                (plus:DI (reg:DI 0 ax [392])
                    (reg:DI 1 dx [orig:130 D.6574 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:130 D.6574 ] [130])
            (const_int 5 [0x5]))
        (nil)))
(insn 135 134 136 12 (parallel [
            (set (reg:DI 1 dx [393])
                (ashift:DI (reg:DI 0 ax [392])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 497 {*ashldi3_1}
     (nil))
(insn 136 135 137 12 (parallel [
            (set (reg:DI 0 ax [392])
                (plus:DI (reg:DI 0 ax [392])
                    (reg:DI 1 dx [393])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 221 {*adddi_1}
     (nil))
(insn 137 136 138 12 (parallel [
            (set (reg:DI 0 ax [394])
                (ashift:DI (reg:DI 0 ax [392])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 497 {*ashldi3_1}
     (nil))
(insn 138 137 139 12 (set (reg:DI 0 ax [392])
        (reg:DI 0 ax [394])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 139 138 140 12 (set (reg:DI 1 dx [orig:131 D.6574 ] [131])
        (reg:DI 0 ax [392])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 140 139 141 12 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 141 140 142 12 (parallel [
            (set (reg/f:DI 3 bx [orig:132 D.6583 ] [132])
                (plus:DI (reg:DI 1 dx [orig:131 D.6574 ] [131])
                    (reg/f:DI 0 ax [395])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80112 [0xfffffffffffec710])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:131 D.6574 ] [131]))
        (nil)))
(insn 142 141 143 12 (set (reg:SI 0 ax [396])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:149 90 {*movsi_internal}
     (nil))
(insn 143 142 144 12 (set (reg:DI 0 ax [orig:133 D.6574 ] [133])
        (sign_extend:DI (reg:SI 0 ax [396]))) fmtext_o.cpp:149 142 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 12 (parallel [
            (set (reg:DI 0 ax [orig:134 D.6574 ] [134])
                (ashift:DI (reg:DI 0 ax [orig:133 D.6574 ] [133])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:149 497 {*ashldi3_1}
     (nil))
(insn 145 144 146 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:134 D.6574 ] [134])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(call_insn 146 145 147 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:149 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 147 146 148 12 (set (reg/f:DI 0 ax [397])
        (reg:DI 0 ax)) fmtext_o.cpp:149 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [397])
        (nil)))
(insn 148 147 149 12 (set (reg/f:DI 1 dx [orig:135 D.6584 ] [135])
        (reg/f:DI 0 ax [397])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 149 148 150 12 (set (reg:SI 0 ax [399])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:149 90 {*movsi_internal}
     (nil))
(insn 150 149 151 12 (set (reg:DI 0 ax [398])
        (sign_extend:DI (reg:SI 0 ax [399]))) fmtext_o.cpp:149 142 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 12 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [398])
                    (const_int 8 [0x8]))
                (reg/f:DI 3 bx [orig:132 D.6583 ] [132])) [0 *_92 S8 A64])
        (reg/f:DI 1 dx [orig:135 D.6584 ] [135])) fmtext_o.cpp:149 89 {*movdi_internal}
     (nil))
(insn 152 151 153 12 (set (reg:SI 0 ax [400])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:150 90 {*movsi_internal}
     (nil))
(insn 153 152 154 12 (set (reg:DI 1 dx [orig:136 D.6574 ] [136])
        (sign_extend:DI (reg:SI 0 ax [400]))) fmtext_o.cpp:150 142 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 12 (set (reg:DI 0 ax [401])
        (reg:DI 1 dx [orig:136 D.6574 ] [136])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 155 154 156 12 (parallel [
            (set (reg:DI 0 ax [401])
                (ashift:DI (reg:DI 0 ax [401])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 497 {*ashldi3_1}
     (nil))
(insn 156 155 157 12 (parallel [
            (set (reg:DI 0 ax [401])
                (plus:DI (reg:DI 0 ax [401])
                    (reg:DI 1 dx [orig:136 D.6574 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:136 D.6574 ] [136])
            (const_int 5 [0x5]))
        (nil)))
(insn 157 156 158 12 (parallel [
            (set (reg:DI 1 dx [402])
                (ashift:DI (reg:DI 0 ax [401])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 497 {*ashldi3_1}
     (nil))
(insn 158 157 159 12 (parallel [
            (set (reg:DI 0 ax [401])
                (plus:DI (reg:DI 0 ax [401])
                    (reg:DI 1 dx [402])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 221 {*adddi_1}
     (nil))
(insn 159 158 160 12 (parallel [
            (set (reg:DI 0 ax [403])
                (ashift:DI (reg:DI 0 ax [401])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 497 {*ashldi3_1}
     (nil))
(insn 160 159 161 12 (set (reg:DI 0 ax [401])
        (reg:DI 0 ax [403])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 161 160 162 12 (set (reg:DI 1 dx [orig:137 D.6574 ] [137])
        (reg:DI 0 ax [401])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 162 161 163 12 (set (reg/f:DI 0 ax [404])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 163 162 164 12 (parallel [
            (set (reg/f:DI 3 bx [orig:138 D.6585 ] [138])
                (plus:DI (reg:DI 1 dx [orig:137 D.6574 ] [137])
                    (reg/f:DI 0 ax [404])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:137 D.6574 ] [137]))
        (nil)))
(insn 164 163 165 12 (set (reg:SI 0 ax [405])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:150 90 {*movsi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:DI 0 ax [orig:139 D.6574 ] [139])
        (sign_extend:DI (reg:SI 0 ax [405]))) fmtext_o.cpp:150 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 12 (parallel [
            (set (reg:DI 0 ax [orig:140 D.6574 ] [140])
                (ashift:DI (reg:DI 0 ax [orig:139 D.6574 ] [139])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:150 497 {*ashldi3_1}
     (nil))
(insn 167 166 168 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:140 D.6574 ] [140])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(call_insn 168 167 169 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:150 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 169 168 170 12 (set (reg/f:DI 0 ax [406])
        (reg:DI 0 ax)) fmtext_o.cpp:150 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [406])
        (nil)))
(insn 170 169 171 12 (set (reg/f:DI 1 dx [orig:141 D.6584 ] [141])
        (reg/f:DI 0 ax [406])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(insn 171 170 172 12 (set (reg:SI 0 ax [408])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:150 90 {*movsi_internal}
     (nil))
(insn 172 171 173 12 (set (reg:DI 0 ax [407])
        (sign_extend:DI (reg:SI 0 ax [408]))) fmtext_o.cpp:150 142 {*extendsidi2_rex64}
     (nil))
(insn 173 172 1139 12 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [407])
                    (const_int 8 [0x8]))
                (reg/f:DI 3 bx [orig:138 D.6585 ] [138])) [0 *_98 S8 A64])
        (reg/f:DI 1 dx [orig:141 D.6584 ] [141])) fmtext_o.cpp:150 89 {*movdi_internal}
     (nil))
(jump_insn 1139 173 1140 12 (set (pc)
        (label_ref 228)) fmtext_o.cpp:150 636 {jump}
     (nil)
 -> 228)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1140 1139 176)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 117 409
(code_label 176 1140 177 13 19 "" [1 uses])
(note 177 176 178 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 178 177 179 13 (set (reg/f:DI 0 ax [409])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:151 89 {*movdi_internal}
     (nil))
(insn 179 178 180 13 (set (reg/f:DI 0 ax [orig:116 D.6579 ] [116])
        (mem/f:DI (reg/f:DI 0 ax [409]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:151 89 {*movdi_internal}
     (nil))
(insn 180 179 181 13 (set (reg:HI 0 ax [orig:117 D.6581 ] [117])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:116 D.6579 ] [116])
                (const_int 26 [0x1a])) [0 _74->status.number+0 S2 A16])) fmtext_o.cpp:151 92 {*movhi_internal}
     (nil))
(insn 181 180 182 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:117 D.6581 ] [117])
            (const_int 73 [0x49]))) fmtext_o.cpp:151 6 {*cmphi_1}
     (nil))
(jump_insn 182 181 183 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 228)
            (pc))) fmtext_o.cpp:151 596 {*jcc_1}
     (nil)
 -> 228)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 118 119 120 121 122 123 124 125 126 127 128 129 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427
(note 183 182 184 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 184 183 185 14 (set (reg:SI 0 ax [410])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:152 90 {*movsi_internal}
     (nil))
(insn 185 184 186 14 (set (reg:DI 1 dx [orig:118 D.6574 ] [118])
        (sign_extend:DI (reg:SI 0 ax [410]))) fmtext_o.cpp:152 142 {*extendsidi2_rex64}
     (nil))
(insn 186 185 187 14 (set (reg:DI 0 ax [411])
        (reg:DI 1 dx [orig:118 D.6574 ] [118])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 187 186 188 14 (parallel [
            (set (reg:DI 0 ax [411])
                (ashift:DI (reg:DI 0 ax [411])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 497 {*ashldi3_1}
     (nil))
(insn 188 187 189 14 (parallel [
            (set (reg:DI 0 ax [411])
                (plus:DI (reg:DI 0 ax [411])
                    (reg:DI 1 dx [orig:118 D.6574 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:118 D.6574 ] [118])
            (const_int 5 [0x5]))
        (nil)))
(insn 189 188 190 14 (parallel [
            (set (reg:DI 1 dx [412])
                (ashift:DI (reg:DI 0 ax [411])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 497 {*ashldi3_1}
     (nil))
(insn 190 189 191 14 (parallel [
            (set (reg:DI 0 ax [411])
                (plus:DI (reg:DI 0 ax [411])
                    (reg:DI 1 dx [412])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 221 {*adddi_1}
     (nil))
(insn 191 190 192 14 (parallel [
            (set (reg:DI 0 ax [413])
                (ashift:DI (reg:DI 0 ax [411])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 497 {*ashldi3_1}
     (nil))
(insn 192 191 193 14 (set (reg:DI 0 ax [411])
        (reg:DI 0 ax [413])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 193 192 194 14 (set (reg:DI 1 dx [orig:119 D.6574 ] [119])
        (reg:DI 0 ax [411])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 194 193 195 14 (set (reg/f:DI 0 ax [414])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 195 194 196 14 (parallel [
            (set (reg/f:DI 3 bx [orig:120 D.6583 ] [120])
                (plus:DI (reg:DI 1 dx [orig:119 D.6574 ] [119])
                    (reg/f:DI 0 ax [414])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80112 [0xfffffffffffec710])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:119 D.6574 ] [119]))
        (nil)))
(insn 196 195 197 14 (set (reg:SI 0 ax [415])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:152 90 {*movsi_internal}
     (nil))
(insn 197 196 198 14 (set (reg:DI 0 ax [orig:121 D.6574 ] [121])
        (sign_extend:DI (reg:SI 0 ax [415]))) fmtext_o.cpp:152 142 {*extendsidi2_rex64}
     (nil))
(insn 198 197 199 14 (parallel [
            (set (reg:DI 0 ax [orig:122 D.6574 ] [122])
                (ashift:DI (reg:DI 0 ax [orig:121 D.6574 ] [121])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:152 497 {*ashldi3_1}
     (nil))
(insn 199 198 200 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:122 D.6574 ] [122])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(call_insn 200 199 201 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:152 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 201 200 202 14 (set (reg/f:DI 0 ax [416])
        (reg:DI 0 ax)) fmtext_o.cpp:152 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [416])
        (nil)))
(insn 202 201 203 14 (set (reg/f:DI 1 dx [orig:123 D.6584 ] [123])
        (reg/f:DI 0 ax [416])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 203 202 204 14 (set (reg:SI 0 ax [418])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:152 90 {*movsi_internal}
     (nil))
(insn 204 203 205 14 (set (reg:DI 0 ax [417])
        (sign_extend:DI (reg:SI 0 ax [418]))) fmtext_o.cpp:152 142 {*extendsidi2_rex64}
     (nil))
(insn 205 204 206 14 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [417])
                    (const_int 8 [0x8]))
                (reg/f:DI 3 bx [orig:120 D.6583 ] [120])) [0 *_79 S8 A64])
        (reg/f:DI 1 dx [orig:123 D.6584 ] [123])) fmtext_o.cpp:152 89 {*movdi_internal}
     (nil))
(insn 206 205 207 14 (set (reg:SI 0 ax [419])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:153 90 {*movsi_internal}
     (nil))
(insn 207 206 208 14 (set (reg:DI 1 dx [orig:124 D.6574 ] [124])
        (sign_extend:DI (reg:SI 0 ax [419]))) fmtext_o.cpp:153 142 {*extendsidi2_rex64}
     (nil))
(insn 208 207 209 14 (set (reg:DI 0 ax [420])
        (reg:DI 1 dx [orig:124 D.6574 ] [124])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 209 208 210 14 (parallel [
            (set (reg:DI 0 ax [420])
                (ashift:DI (reg:DI 0 ax [420])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 497 {*ashldi3_1}
     (nil))
(insn 210 209 211 14 (parallel [
            (set (reg:DI 0 ax [420])
                (plus:DI (reg:DI 0 ax [420])
                    (reg:DI 1 dx [orig:124 D.6574 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:124 D.6574 ] [124])
            (const_int 5 [0x5]))
        (nil)))
(insn 211 210 212 14 (parallel [
            (set (reg:DI 1 dx [421])
                (ashift:DI (reg:DI 0 ax [420])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 497 {*ashldi3_1}
     (nil))
(insn 212 211 213 14 (parallel [
            (set (reg:DI 0 ax [420])
                (plus:DI (reg:DI 0 ax [420])
                    (reg:DI 1 dx [421])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 221 {*adddi_1}
     (nil))
(insn 213 212 214 14 (parallel [
            (set (reg:DI 0 ax [422])
                (ashift:DI (reg:DI 0 ax [420])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 497 {*ashldi3_1}
     (nil))
(insn 214 213 215 14 (set (reg:DI 0 ax [420])
        (reg:DI 0 ax [422])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 215 214 216 14 (set (reg:DI 1 dx [orig:125 D.6574 ] [125])
        (reg:DI 0 ax [420])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 216 215 217 14 (set (reg/f:DI 0 ax [423])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 217 216 218 14 (parallel [
            (set (reg/f:DI 3 bx [orig:126 D.6585 ] [126])
                (plus:DI (reg:DI 1 dx [orig:125 D.6574 ] [125])
                    (reg/f:DI 0 ax [423])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:125 D.6574 ] [125]))
        (nil)))
(insn 218 217 219 14 (set (reg:SI 0 ax [424])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:153 90 {*movsi_internal}
     (nil))
(insn 219 218 220 14 (set (reg:DI 0 ax [orig:127 D.6574 ] [127])
        (sign_extend:DI (reg:SI 0 ax [424]))) fmtext_o.cpp:153 142 {*extendsidi2_rex64}
     (nil))
(insn 220 219 221 14 (parallel [
            (set (reg:DI 0 ax [orig:128 D.6574 ] [128])
                (ashift:DI (reg:DI 0 ax [orig:127 D.6574 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:153 497 {*ashldi3_1}
     (nil))
(insn 221 220 222 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:128 D.6574 ] [128])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(call_insn 222 221 223 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:153 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 223 222 224 14 (set (reg/f:DI 0 ax [425])
        (reg:DI 0 ax)) fmtext_o.cpp:153 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [425])
        (nil)))
(insn 224 223 225 14 (set (reg/f:DI 1 dx [orig:129 D.6584 ] [129])
        (reg/f:DI 0 ax [425])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
(insn 225 224 226 14 (set (reg:SI 0 ax [427])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:153 90 {*movsi_internal}
     (nil))
(insn 226 225 227 14 (set (reg:DI 0 ax [426])
        (sign_extend:DI (reg:SI 0 ax [427]))) fmtext_o.cpp:153 142 {*extendsidi2_rex64}
     (nil))
(insn 227 226 228 14 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [426])
                    (const_int 8 [0x8]))
                (reg/f:DI 3 bx [orig:126 D.6585 ] [126])) [0 *_86 S8 A64])
        (reg/f:DI 1 dx [orig:129 D.6584 ] [129])) fmtext_o.cpp:153 89 {*movdi_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;;              13
;;              12 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 228 227 229 15 20 "" [2 uses])
(note 229 228 230 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 230 229 231 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:145 220 {*addsi_1}
     (nil))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 428
(code_label 231 230 232 16 17 "" [1 uses])
(note 232 231 233 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 234 16 (set (reg/f:DI 0 ax [428])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:145 89 {*movdi_internal}
     (nil))
(insn 234 233 235 16 (set (reg/f:DI 0 ax [orig:107 D.6579 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [428]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:145 89 {*movdi_internal}
     (nil))
(insn 235 234 237 16 (set (reg:SI 0 ax [orig:108 D.6573 ] [108])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:107 D.6579 ] [107])
                (const_int 4 [0x4])) [0 _65->ntraces.number+0 S4 A32])) fmtext_o.cpp:145 90 {*movsi_internal}
     (nil))
(insn 237 235 238 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:108 D.6573 ] [108])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:145 7 {*cmpsi_1}
     (nil))
(jump_insn 238 237 239 16 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 236)
            (pc))) fmtext_o.cpp:145 596 {*jcc_1}
     (nil)
 -> 236)
;;  succ:       10
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 239 238 240 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 240 239 241 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:143 220 {*addsi_1}
     (nil))
;;  succ:       18 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU,DFS_BACK)
;;              8 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 106 429
(code_label 241 240 242 18 16 "" [1 uses])
(note 242 241 243 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 243 242 244 18 (set (reg/f:DI 0 ax [429])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(insn 244 243 245 18 (set (reg/f:DI 0 ax [orig:105 D.6579 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [429]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(insn 245 244 247 18 (set (reg:SI 0 ax [orig:106 D.6573 ] [106])
        (mem/j:SI (reg/f:DI 0 ax [orig:105 D.6579 ] [105]) [0 _62->nblocks.number+0 S4 A32])) fmtext_o.cpp:143 90 {*movsi_internal}
     (nil))
(insn 247 245 248 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:106 D.6573 ] [106])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:143 7 {*cmpsi_1}
     (nil))
(jump_insn 248 247 249 18 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 246)
            (pc))) fmtext_o.cpp:143 596 {*jcc_1}
     (nil)
 -> 246)
;;  succ:       9
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 249 248 250 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 1141 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:161 90 {*movsi_internal}
     (nil))
(jump_insn 1141 250 1142 19 (set (pc)
        (label_ref 376)) fmtext_o.cpp:161 636 {jump}
     (nil)
 -> 376)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1142 1141 381)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 144 145 430 431
(code_label 381 1142 253 20 30 "" [1 uses])
(note 253 381 254 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 20 (set (reg/f:DI 0 ax [430])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 255 254 256 20 (set (reg/f:DI 1 dx [orig:144 D.6578 ] [144])
        (mem/f:DI (reg/f:DI 0 ax [430]) [0 *in_file_41(D)+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 256 255 257 20 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80104 [0xfffffffffffec718])) [0 block_header+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 257 256 258 20 (set (reg/f:DI 0 ax [orig:145 D.6586 ] [145])
        (mem/f:DI (reg/f:DI 0 ax [431]) [0 *block_header_108(D)+0 S8 A64])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 258 257 259 20 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:144 D.6578 ] [144])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 259 258 260 20 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 260 259 261 20 (set (reg:DI 4 si)
        (const_int 28 [0x1c])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(insn 261 260 262 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:145 D.6586 ] [145])) fmtext_o.cpp:163 89 {*movdi_internal}
     (nil))
(call_insn 262 261 263 20 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b8e1bc5b900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:163 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 263 262 1143 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:166 90 {*movsi_internal}
     (nil))
(jump_insn 1143 263 1144 20 (set (pc)
        (label_ref 366)) fmtext_o.cpp:166 636 {jump}
     (nil)
 -> 366)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1144 1143 371)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 149 432
(code_label 371 1144 266 21 29 "" [1 uses])
(note 266 371 267 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 21 (set (reg/f:DI 0 ax [432])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 268 267 269 21 (set (reg/f:DI 0 ax [orig:148 D.6579 ] [148])
        (mem/f:DI (reg/f:DI 0 ax [432]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 269 268 270 21 (set (reg:HI 0 ax [orig:149 D.6581 ] [149])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:148 D.6579 ] [148])
                (const_int 26 [0x1a])) [0 _113->status.number+0 S2 A16])) fmtext_o.cpp:168 92 {*movhi_internal}
     (nil))
(insn 270 269 271 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:149 D.6581 ] [149])
            (const_int 69 [0x45]))) fmtext_o.cpp:168 6 {*cmphi_1}
     (nil))
(jump_insn 271 270 272 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) fmtext_o.cpp:168 596 {*jcc_1}
     (nil)
 -> 282)
;;  succ:       23
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 152 153 154 433 434
(note 272 271 273 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 273 272 274 22 (set (reg:SI 0 ax [433])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:168 90 {*movsi_internal}
     (nil))
(insn 274 273 275 22 (set (reg:DI 0 ax [orig:150 D.6574 ] [150])
        (sign_extend:DI (reg:SI 0 ax [433]))) fmtext_o.cpp:168 142 {*extendsidi2_rex64}
     (nil))
(insn 275 274 276 22 (parallel [
            (set (reg:DI 1 dx [orig:151 D.6574 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 D.6574 ] [150])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:168 497 {*ashldi3_1}
     (nil))
(insn 276 275 277 22 (set (reg/f:DI 0 ax [434])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 277 276 278 22 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.6582 ] [152])
                (plus:DI (reg/f:DI 0 ax [434])
                    (reg:DI 1 dx [orig:151 D.6574 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:168 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80080 [0xfffffffffffec730])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.6574 ] [151]))
        (nil)))
(insn 278 277 279 22 (set (reg/f:DI 0 ax [orig:153 D.6579 ] [153])
        (mem/f:DI (reg/f:DI 0 ax [orig:152 D.6582 ] [152]) [0 *_117+0 S8 A64])) fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 279 278 280 22 (set (reg:HI 0 ax [orig:154 D.6581 ] [154])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:153 D.6579 ] [153])
                (const_int 26 [0x1a])) [0 _118->status.number+0 S2 A16])) fmtext_o.cpp:168 92 {*movhi_internal}
     (nil))
(insn 280 279 281 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:154 D.6581 ] [154])
            (const_int 2073 [0x819]))) fmtext_o.cpp:168 6 {*cmphi_1}
     (nil))
(jump_insn 281 280 282 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 316)
            (pc))) fmtext_o.cpp:168 596 {*jcc_1}
     (nil)
 -> 316)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 168 169 170 171 172 173 174 175 176 177 178 435 436 437 438 439 440 441 442 443 444
(code_label 282 281 283 23 25 "" [1 uses])
(note 283 282 284 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 284 283 285 23 (set (reg/f:DI 0 ax [435])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(insn 285 284 286 23 (set (reg/f:DI 2 cx [orig:168 D.6578 ] [168])
        (mem/f:DI (reg/f:DI 0 ax [435]) [0 *in_file_41(D)+0 S8 A64])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(insn 286 285 287 23 (set (reg/f:DI 0 ax [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 287 286 288 23 (set (reg/f:DI 0 ax [orig:169 D.6579 ] [169])
        (mem/f:DI (reg/f:DI 0 ax [436]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 288 287 289 23 (set (reg:SI 1 dx [orig:170 D.6573 ] [170])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:169 D.6579 ] [169])
                (const_int 8 [0x8])) [0 _134->np.number+0 S4 A32])) fmtext_o.cpp:169 90 {*movsi_internal}
     (nil))
(insn 289 288 290 23 (set (reg/f:DI 0 ax [437])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(insn 290 289 291 23 (set (reg/f:DI 0 ax [orig:171 D.6579 ] [171])
        (mem/f:DI (reg/f:DI 0 ax [437]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(insn 291 290 292 23 (set (reg:SI 0 ax [orig:172 D.6573 ] [172])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:171 D.6579 ] [171])
                (const_int 12 [0xc])) [0 _136->ebytes.number+0 S4 A32])) fmtext_o.cpp:169 90 {*movsi_internal}
     (nil))
(insn 292 291 293 23 (parallel [
            (set (reg:SI 0 ax [orig:173 D.6573 ] [173])
                (mult:SI (reg:SI 0 ax [orig:172 D.6573 ] [172])
                    (reg:SI 1 dx [orig:170 D.6573 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 306 {*mulsi3_1}
     (nil))
(insn 293 292 294 23 (set (reg:DI 4 si [orig:174 D.6574 ] [174])
        (sign_extend:DI (reg:SI 0 ax [orig:173 D.6573 ] [173]))) fmtext_o.cpp:170 142 {*extendsidi2_rex64}
     (nil))
(insn 294 293 295 23 (set (reg:SI 0 ax [438])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:169 90 {*movsi_internal}
     (nil))
(insn 295 294 296 23 (set (reg:DI 1 dx [orig:175 D.6574 ] [175])
        (sign_extend:DI (reg:SI 0 ax [438]))) fmtext_o.cpp:169 142 {*extendsidi2_rex64}
     (nil))
(insn 296 295 297 23 (set (reg:DI 0 ax [439])
        (reg:DI 1 dx [orig:175 D.6574 ] [175])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 297 296 298 23 (parallel [
            (set (reg:DI 0 ax [439])
                (ashift:DI (reg:DI 0 ax [439])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 497 {*ashldi3_1}
     (nil))
(insn 298 297 299 23 (parallel [
            (set (reg:DI 0 ax [439])
                (plus:DI (reg:DI 0 ax [439])
                    (reg:DI 1 dx [orig:175 D.6574 ] [175])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:175 D.6574 ] [175])
            (const_int 5 [0x5]))
        (nil)))
(insn 299 298 300 23 (parallel [
            (set (reg:DI 1 dx [440])
                (ashift:DI (reg:DI 0 ax [439])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 497 {*ashldi3_1}
     (nil))
(insn 300 299 301 23 (parallel [
            (set (reg:DI 0 ax [439])
                (plus:DI (reg:DI 0 ax [439])
                    (reg:DI 1 dx [440])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 221 {*adddi_1}
     (nil))
(insn 301 300 302 23 (parallel [
            (set (reg:DI 0 ax [441])
                (ashift:DI (reg:DI 0 ax [439])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 497 {*ashldi3_1}
     (nil))
(insn 302 301 303 23 (set (reg:DI 0 ax [439])
        (reg:DI 0 ax [441])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 303 302 304 23 (set (reg:DI 1 dx [orig:176 D.6574 ] [176])
        (reg:DI 0 ax [439])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 304 303 305 23 (set (reg/f:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 305 304 306 23 (parallel [
            (set (reg/f:DI 1 dx [orig:177 D.6583 ] [177])
                (plus:DI (reg:DI 1 dx [orig:176 D.6574 ] [176])
                    (reg/f:DI 0 ax [442])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:169 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80112 [0xfffffffffffec710])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:176 D.6574 ] [176]))
        (nil)))
(insn 306 305 307 23 (set (reg:SI 0 ax [444])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:169 90 {*movsi_internal}
     (nil))
(insn 307 306 308 23 (set (reg:DI 0 ax [443])
        (sign_extend:DI (reg:SI 0 ax [444]))) fmtext_o.cpp:169 142 {*extendsidi2_rex64}
     (nil))
(insn 308 307 310 23 (set (reg/f:DI 0 ax [orig:178 D.6587 ] [178])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [443])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:177 D.6583 ] [177])) [0 *_142 S8 A64])) fmtext_o.cpp:169 89 {*movdi_internal}
     (nil))
(insn 310 308 312 23 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(insn 312 310 313 23 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:178 D.6587 ] [178])) fmtext_o.cpp:170 89 {*movdi_internal}
     (nil))
(call_insn 313 312 1145 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b8e1bc5b900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:170 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 1145 313 1146 23 (set (pc)
        (label_ref 363)) fmtext_o.cpp:170 636 {jump}
     (nil)
 -> 363)
;;  succ:       27 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1146 1145 316)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 155 156 445
(code_label 316 1146 317 24 26 "" [1 uses])
(note 317 316 318 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 318 317 319 24 (set (reg/f:DI 0 ax [445])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:171 89 {*movdi_internal}
     (nil))
(insn 319 318 320 24 (set (reg/f:DI 0 ax [orig:155 D.6579 ] [155])
        (mem/f:DI (reg/f:DI 0 ax [445]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:171 89 {*movdi_internal}
     (nil))
(insn 320 319 321 24 (set (reg:HI 0 ax [orig:156 D.6581 ] [156])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:155 D.6579 ] [155])
                (const_int 26 [0x1a])) [0 _120->status.number+0 S2 A16])) fmtext_o.cpp:171 92 {*movhi_internal}
     (nil))
(insn 321 320 322 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:156 D.6581 ] [156])
            (const_int 73 [0x49]))) fmtext_o.cpp:171 6 {*cmphi_1}
     (nil))
(jump_insn 322 321 323 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 356)
            (pc))) fmtext_o.cpp:171 596 {*jcc_1}
     (nil)
 -> 356)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 157 158 159 160 161 162 163 164 165 166 167 446 447 448 449 450 451 452 453 454 455
(note 323 322 324 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 324 323 325 25 (set (reg/f:DI 0 ax [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 325 324 326 25 (set (reg/f:DI 2 cx [orig:157 D.6578 ] [157])
        (mem/f:DI (reg/f:DI 0 ax [446]) [0 *in_file_41(D)+0 S8 A64])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 326 325 327 25 (set (reg/f:DI 0 ax [447])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 327 326 328 25 (set (reg/f:DI 0 ax [orig:158 D.6579 ] [158])
        (mem/f:DI (reg/f:DI 0 ax [447]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 328 327 329 25 (set (reg:SI 1 dx [orig:159 D.6573 ] [159])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:158 D.6579 ] [158])
                (const_int 8 [0x8])) [0 _123->np.number+0 S4 A32])) fmtext_o.cpp:172 90 {*movsi_internal}
     (nil))
(insn 329 328 330 25 (set (reg/f:DI 0 ax [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 330 329 331 25 (set (reg/f:DI 0 ax [orig:160 D.6579 ] [160])
        (mem/f:DI (reg/f:DI 0 ax [448]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 331 330 332 25 (set (reg:SI 0 ax [orig:161 D.6573 ] [161])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:160 D.6579 ] [160])
                (const_int 12 [0xc])) [0 _125->ebytes.number+0 S4 A32])) fmtext_o.cpp:172 90 {*movsi_internal}
     (nil))
(insn 332 331 333 25 (parallel [
            (set (reg:SI 0 ax [orig:162 D.6573 ] [162])
                (mult:SI (reg:SI 0 ax [orig:161 D.6573 ] [161])
                    (reg:SI 1 dx [orig:159 D.6573 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 306 {*mulsi3_1}
     (nil))
(insn 333 332 334 25 (set (reg:DI 4 si [orig:163 D.6574 ] [163])
        (sign_extend:DI (reg:SI 0 ax [orig:162 D.6573 ] [162]))) fmtext_o.cpp:173 142 {*extendsidi2_rex64}
     (nil))
(insn 334 333 335 25 (set (reg:SI 0 ax [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:172 90 {*movsi_internal}
     (nil))
(insn 335 334 336 25 (set (reg:DI 1 dx [orig:164 D.6574 ] [164])
        (sign_extend:DI (reg:SI 0 ax [449]))) fmtext_o.cpp:172 142 {*extendsidi2_rex64}
     (nil))
(insn 336 335 337 25 (set (reg:DI 0 ax [450])
        (reg:DI 1 dx [orig:164 D.6574 ] [164])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 337 336 338 25 (parallel [
            (set (reg:DI 0 ax [450])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 497 {*ashldi3_1}
     (nil))
(insn 338 337 339 25 (parallel [
            (set (reg:DI 0 ax [450])
                (plus:DI (reg:DI 0 ax [450])
                    (reg:DI 1 dx [orig:164 D.6574 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:164 D.6574 ] [164])
            (const_int 5 [0x5]))
        (nil)))
(insn 339 338 340 25 (parallel [
            (set (reg:DI 1 dx [451])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 497 {*ashldi3_1}
     (nil))
(insn 340 339 341 25 (parallel [
            (set (reg:DI 0 ax [450])
                (plus:DI (reg:DI 0 ax [450])
                    (reg:DI 1 dx [451])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 221 {*adddi_1}
     (nil))
(insn 341 340 342 25 (parallel [
            (set (reg:DI 0 ax [452])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 497 {*ashldi3_1}
     (nil))
(insn 342 341 343 25 (set (reg:DI 0 ax [450])
        (reg:DI 0 ax [452])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 343 342 344 25 (set (reg:DI 1 dx [orig:165 D.6574 ] [165])
        (reg:DI 0 ax [450])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 344 343 345 25 (set (reg/f:DI 0 ax [453])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 345 344 346 25 (parallel [
            (set (reg/f:DI 1 dx [orig:166 D.6583 ] [166])
                (plus:DI (reg:DI 1 dx [orig:165 D.6574 ] [165])
                    (reg/f:DI 0 ax [453])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:172 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80112 [0xfffffffffffec710])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:165 D.6574 ] [165]))
        (nil)))
(insn 346 345 347 25 (set (reg:SI 0 ax [455])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:172 90 {*movsi_internal}
     (nil))
(insn 347 346 348 25 (set (reg:DI 0 ax [454])
        (sign_extend:DI (reg:SI 0 ax [455]))) fmtext_o.cpp:172 142 {*extendsidi2_rex64}
     (nil))
(insn 348 347 350 25 (set (reg/f:DI 0 ax [orig:167 D.6587 ] [167])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [454])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:166 D.6583 ] [166])) [0 *_131 S8 A64])) fmtext_o.cpp:172 89 {*movdi_internal}
     (nil))
(insn 350 348 352 25 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 352 350 353 25 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:167 D.6587 ] [167])) fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(call_insn 353 352 1147 25 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b8e1bc5b900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:173 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 1147 353 1148 25 (set (pc)
        (label_ref 363)) 636 {jump}
     (nil)
 -> 363)
;;  succ:       27 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1148 1147 356)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 356 1148 357 26 28 "" [1 uses])
(note 357 356 358 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 358 357 359 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b8e1bf85260 *.LC18>)) fmtext_o.cpp:175 89 {*movdi_internal}
     (nil))
(call_insn 359 358 360 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:175 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 360 359 361 26 (set (reg:SI 5 di)
        (const_int 6 [0x6])) fmtext_o.cpp:176 90 {*movsi_internal}
     (nil))
(call_insn 361 360 362 26 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b8e1bab3900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:176 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 362 361 363)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 [100.0%] 
;;              25 [100.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 363 362 364 27 27 "" [2 uses])
(note 364 363 365 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 365 364 366 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:166 220 {*addsi_1}
     (nil))
;;  succ:       28 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU,DFS_BACK)
;;              20 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 456
(code_label 366 365 367 28 24 "" [1 uses])
(note 367 366 368 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 368 367 369 28 (set (reg/f:DI 0 ax [456])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:166 89 {*movdi_internal}
     (nil))
(insn 369 368 370 28 (set (reg/f:DI 0 ax [orig:146 D.6579 ] [146])
        (mem/f:DI (reg/f:DI 0 ax [456]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:166 89 {*movdi_internal}
     (nil))
(insn 370 369 372 28 (set (reg:SI 0 ax [orig:147 D.6573 ] [147])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:146 D.6579 ] [146])
                (const_int 4 [0x4])) [0 _111->ntraces.number+0 S4 A32])) fmtext_o.cpp:166 90 {*movsi_internal}
     (nil))
(insn 372 370 373 28 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:147 D.6573 ] [147])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:166 7 {*cmpsi_1}
     (nil))
(jump_insn 373 372 374 28 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 371)
            (pc))) fmtext_o.cpp:166 596 {*jcc_1}
     (nil)
 -> 371)
;;  succ:       21
;;              29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 374 373 375 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 375 374 376 29 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:161 220 {*addsi_1}
     (nil))
;;  succ:       30 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU,DFS_BACK)
;;              19 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 457
(code_label 376 375 377 30 23 "" [1 uses])
(note 377 376 378 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 378 377 379 30 (set (reg/f:DI 0 ax [457])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 379 378 380 30 (set (reg/f:DI 0 ax [orig:142 D.6579 ] [142])
        (mem/f:DI (reg/f:DI 0 ax [457]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 380 379 382 30 (set (reg:SI 0 ax [orig:143 D.6573 ] [143])
        (mem/j:SI (reg/f:DI 0 ax [orig:142 D.6579 ] [142]) [0 _105->nblocks.number+0 S4 A32])) fmtext_o.cpp:161 90 {*movsi_internal}
     (nil))
(insn 382 380 383 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:143 D.6573 ] [143])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:161 7 {*cmpsi_1}
     (nil))
(jump_insn 383 382 384 30 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 381)
            (pc))) fmtext_o.cpp:161 596 {*jcc_1}
     (nil)
 -> 381)
;;  succ:       20
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 384 383 385 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 385 384 1149 31 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:183 90 {*movsi_internal}
     (nil))
(jump_insn 1149 385 1150 31 (set (pc)
        (label_ref 573)) fmtext_o.cpp:183 636 {jump}
     (nil)
 -> 573)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1150 1149 578)
;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 578 1150 388 32 36 "" [1 uses])
(note 388 578 389 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 389 388 1151 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
(jump_insn 1151 389 1152 32 (set (pc)
        (label_ref 563)) fmtext_o.cpp:185 636 {jump}
     (nil)
 -> 563)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1152 1151 568)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 568 1152 392 33 35 "" [1 uses])
(note 392 568 393 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 393 392 1153 33 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
(jump_insn 1153 393 1154 33 (set (pc)
        (label_ref 548)) fmtext_o.cpp:187 636 {jump}
     (nil)
 -> 548)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1154 1153 558)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529
(code_label 558 1154 396 34 34 "" [1 uses])
(note 396 558 397 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 397 396 398 34 (set (reg:SI 0 ax [458])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 398 397 399 34 (set (reg:DI 1 dx [orig:190 D.6574 ] [190])
        (sign_extend:DI (reg:SI 0 ax [458]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 399 398 400 34 (set (reg:DI 0 ax [459])
        (reg:DI 1 dx [orig:190 D.6574 ] [190])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 400 399 401 34 (parallel [
            (set (reg:DI 0 ax [459])
                (ashift:DI (reg:DI 0 ax [459])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 497 {*ashldi3_1}
     (nil))
(insn 401 400 402 34 (parallel [
            (set (reg:DI 0 ax [459])
                (plus:DI (reg:DI 0 ax [459])
                    (reg:DI 1 dx [orig:190 D.6574 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:190 D.6574 ] [190])
            (const_int 5 [0x5]))
        (nil)))
(insn 402 401 403 34 (parallel [
            (set (reg:DI 1 dx [460])
                (ashift:DI (reg:DI 0 ax [459])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 497 {*ashldi3_1}
     (nil))
(insn 403 402 404 34 (parallel [
            (set (reg:DI 0 ax [459])
                (plus:DI (reg:DI 0 ax [459])
                    (reg:DI 1 dx [460])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 221 {*adddi_1}
     (nil))
(insn 404 403 405 34 (parallel [
            (set (reg:DI 0 ax [461])
                (ashift:DI (reg:DI 0 ax [459])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 497 {*ashldi3_1}
     (nil))
(insn 405 404 406 34 (set (reg:DI 0 ax [459])
        (reg:DI 0 ax [461])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 406 405 407 34 (set (reg:DI 1 dx [orig:191 D.6574 ] [191])
        (reg:DI 0 ax [459])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 407 406 408 34 (set (reg/f:DI 0 ax [462])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 408 407 409 34 (parallel [
            (set (reg/f:DI 1 dx [orig:192 D.6585 ] [192])
                (plus:DI (reg:DI 1 dx [orig:191 D.6574 ] [191])
                    (reg/f:DI 0 ax [462])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:191 D.6574 ] [191]))
        (nil)))
(insn 409 408 410 34 (set (reg:SI 0 ax [464])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 410 409 411 34 (set (reg:DI 0 ax [463])
        (sign_extend:DI (reg:SI 0 ax [464]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 411 410 412 34 (set (reg/f:DI 2 cx [orig:193 D.6589 ] [193])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [463])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:192 D.6585 ] [192])) [0 *_162 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 412 411 413 34 (set (reg:SI 0 ax [465])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 413 412 414 34 (set (reg:DI 1 dx [orig:194 D.6574 ] [194])
        (sign_extend:DI (reg:SI 0 ax [465]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 414 413 415 34 (set (reg:DI 0 ax [466])
        (reg:DI 1 dx [orig:194 D.6574 ] [194])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 415 414 416 34 (parallel [
            (set (reg:DI 0 ax [466])
                (ashift:DI (reg:DI 0 ax [466])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 497 {*ashldi3_1}
     (nil))
(insn 416 415 417 34 (parallel [
            (set (reg:DI 0 ax [466])
                (plus:DI (reg:DI 0 ax [466])
                    (reg:DI 1 dx [orig:194 D.6574 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:194 D.6574 ] [194])
            (const_int 5 [0x5]))
        (nil)))
(insn 417 416 418 34 (parallel [
            (set (reg:DI 1 dx [467])
                (ashift:DI (reg:DI 0 ax [466])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 497 {*ashldi3_1}
     (nil))
(insn 418 417 419 34 (parallel [
            (set (reg:DI 0 ax [466])
                (plus:DI (reg:DI 0 ax [466])
                    (reg:DI 1 dx [467])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 221 {*adddi_1}
     (nil))
(insn 419 418 420 34 (parallel [
            (set (reg:DI 0 ax [468])
                (ashift:DI (reg:DI 0 ax [466])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 497 {*ashldi3_1}
     (nil))
(insn 420 419 421 34 (set (reg:DI 0 ax [466])
        (reg:DI 0 ax [468])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 421 420 422 34 (set (reg:DI 1 dx [orig:195 D.6574 ] [195])
        (reg:DI 0 ax [466])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 422 421 423 34 (set (reg/f:DI 0 ax [469])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 423 422 424 34 (parallel [
            (set (reg/f:DI 1 dx [orig:196 D.6583 ] [196])
                (plus:DI (reg:DI 1 dx [orig:195 D.6574 ] [195])
                    (reg/f:DI 0 ax [469])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:189 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80112 [0xfffffffffffec710])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:195 D.6574 ] [195]))
        (nil)))
(insn 424 423 425 34 (set (reg:SI 0 ax [471])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 425 424 426 34 (set (reg:DI 0 ax [470])
        (sign_extend:DI (reg:SI 0 ax [471]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 426 425 427 34 (set (reg/f:DI 1 dx [orig:197 D.6587 ] [197])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [470])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:196 D.6583 ] [196])) [0 *_166 S8 A64])) fmtext_o.cpp:189 89 {*movdi_internal}
     (nil))
(insn 427 426 428 34 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 428 427 429 34 (set (reg:DI 0 ax [472])
        (sign_extend:DI (reg:SI 0 ax [473]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 429 428 430 34 (set (reg:QI 1 dx [orig:198 D.6590 ] [198])
        (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:197 D.6587 ] [197])
                (reg:DI 0 ax [472])) [0 _167->character S1 A8])) fmtext_o.cpp:189 93 {*movqi_internal}
     (nil))
(insn 430 429 431 34 (set (reg:SI 0 ax [475])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:189 90 {*movsi_internal}
     (nil))
(insn 431 430 432 34 (set (reg:DI 0 ax [474])
        (sign_extend:DI (reg:SI 0 ax [475]))) fmtext_o.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 432 431 433 34 (set (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:193 D.6589 ] [193])
                (reg:DI 0 ax [474])) [0 _163->character S1 A8])
        (reg:QI 1 dx [orig:198 D.6590 ] [198])) fmtext_o.cpp:189 93 {*movqi_internal}
     (nil))
(insn 433 432 434 34 (set (reg:SI 0 ax [476])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 434 433 435 34 (set (reg:DI 1 dx [orig:199 D.6574 ] [199])
        (sign_extend:DI (reg:SI 0 ax [476]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 435 434 436 34 (set (reg:DI 0 ax [477])
        (reg:DI 1 dx [orig:199 D.6574 ] [199])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 436 435 437 34 (parallel [
            (set (reg:DI 0 ax [477])
                (ashift:DI (reg:DI 0 ax [477])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 497 {*ashldi3_1}
     (nil))
(insn 437 436 438 34 (parallel [
            (set (reg:DI 0 ax [477])
                (plus:DI (reg:DI 0 ax [477])
                    (reg:DI 1 dx [orig:199 D.6574 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:199 D.6574 ] [199])
            (const_int 5 [0x5]))
        (nil)))
(insn 438 437 439 34 (parallel [
            (set (reg:DI 1 dx [478])
                (ashift:DI (reg:DI 0 ax [477])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 497 {*ashldi3_1}
     (nil))
(insn 439 438 440 34 (parallel [
            (set (reg:DI 0 ax [477])
                (plus:DI (reg:DI 0 ax [477])
                    (reg:DI 1 dx [478])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 221 {*adddi_1}
     (nil))
(insn 440 439 441 34 (parallel [
            (set (reg:DI 0 ax [479])
                (ashift:DI (reg:DI 0 ax [477])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 497 {*ashldi3_1}
     (nil))
(insn 441 440 442 34 (set (reg:DI 0 ax [477])
        (reg:DI 0 ax [479])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 442 441 443 34 (set (reg:DI 1 dx [orig:200 D.6574 ] [200])
        (reg:DI 0 ax [477])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 443 442 444 34 (set (reg/f:DI 0 ax [480])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 444 443 445 34 (parallel [
            (set (reg/f:DI 1 dx [orig:201 D.6585 ] [201])
                (plus:DI (reg:DI 1 dx [orig:200 D.6574 ] [200])
                    (reg/f:DI 0 ax [480])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:200 D.6574 ] [200]))
        (nil)))
(insn 445 444 446 34 (set (reg:SI 0 ax [482])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 446 445 447 34 (set (reg:DI 0 ax [481])
        (sign_extend:DI (reg:SI 0 ax [482]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 447 446 448 34 (set (reg/f:DI 2 cx [orig:202 D.6589 ] [202])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [481])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:201 D.6585 ] [201])) [0 *_171 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 448 447 449 34 (set (reg:SI 0 ax [483])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 449 448 450 34 (parallel [
            (set (reg:SI 4 si [orig:203 D.6573 ] [203])
                (plus:SI (reg:SI 0 ax [483])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 450 449 451 34 (set (reg:SI 0 ax [484])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 451 450 452 34 (set (reg:DI 1 dx [orig:204 D.6574 ] [204])
        (sign_extend:DI (reg:SI 0 ax [484]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 452 451 453 34 (set (reg:DI 0 ax [485])
        (reg:DI 1 dx [orig:204 D.6574 ] [204])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 453 452 454 34 (parallel [
            (set (reg:DI 0 ax [485])
                (ashift:DI (reg:DI 0 ax [485])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 497 {*ashldi3_1}
     (nil))
(insn 454 453 455 34 (parallel [
            (set (reg:DI 0 ax [485])
                (plus:DI (reg:DI 0 ax [485])
                    (reg:DI 1 dx [orig:204 D.6574 ] [204])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:204 D.6574 ] [204])
            (const_int 5 [0x5]))
        (nil)))
(insn 455 454 456 34 (parallel [
            (set (reg:DI 1 dx [486])
                (ashift:DI (reg:DI 0 ax [485])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 497 {*ashldi3_1}
     (nil))
(insn 456 455 457 34 (parallel [
            (set (reg:DI 0 ax [485])
                (plus:DI (reg:DI 0 ax [485])
                    (reg:DI 1 dx [486])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 221 {*adddi_1}
     (nil))
(insn 457 456 458 34 (parallel [
            (set (reg:DI 0 ax [487])
                (ashift:DI (reg:DI 0 ax [485])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 497 {*ashldi3_1}
     (nil))
(insn 458 457 459 34 (set (reg:DI 0 ax [485])
        (reg:DI 0 ax [487])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 459 458 460 34 (set (reg:DI 1 dx [orig:205 D.6574 ] [205])
        (reg:DI 0 ax [485])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 460 459 461 34 (set (reg/f:DI 0 ax [488])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 461 460 462 34 (parallel [
            (set (reg/f:DI 1 dx [orig:206 D.6583 ] [206])
                (plus:DI (reg:DI 1 dx [orig:205 D.6574 ] [205])
                    (reg/f:DI 0 ax [488])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80112 [0xfffffffffffec710])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:205 D.6574 ] [205]))
        (nil)))
(insn 462 461 463 34 (set (reg:SI 0 ax [490])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 463 462 464 34 (set (reg:DI 0 ax [489])
        (sign_extend:DI (reg:SI 0 ax [490]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 464 463 465 34 (set (reg/f:DI 1 dx [orig:207 D.6587 ] [207])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [489])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:206 D.6583 ] [206])) [0 *_176 S8 A64])) fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 465 464 466 34 (set (reg:SI 0 ax [491])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 466 465 467 34 (parallel [
            (set (reg:SI 0 ax [orig:208 D.6573 ] [208])
                (plus:SI (reg:SI 0 ax [491])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:190 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 467 466 468 34 (set (reg:DI 0 ax [492])
        (sign_extend:DI (reg:SI 0 ax [orig:208 D.6573 ] [208]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 468 467 469 34 (set (reg:QI 1 dx [orig:209 D.6590 ] [209])
        (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:207 D.6587 ] [207])
                (reg:DI 0 ax [492])) [0 _177->character S1 A8])) fmtext_o.cpp:190 93 {*movqi_internal}
     (nil))
(insn 469 468 470 34 (set (reg:DI 0 ax [493])
        (sign_extend:DI (reg:SI 4 si [orig:203 D.6573 ] [203]))) fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 470 469 471 34 (set (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:202 D.6589 ] [202])
                (reg:DI 0 ax [493])) [0 _172->character S1 A8])
        (reg:QI 1 dx [orig:209 D.6590 ] [209])) fmtext_o.cpp:190 93 {*movqi_internal}
     (nil))
(insn 471 470 472 34 (set (reg:SI 0 ax [494])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 472 471 473 34 (set (reg:DI 1 dx [orig:210 D.6574 ] [210])
        (sign_extend:DI (reg:SI 0 ax [494]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 473 472 474 34 (set (reg:DI 0 ax [495])
        (reg:DI 1 dx [orig:210 D.6574 ] [210])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 474 473 475 34 (parallel [
            (set (reg:DI 0 ax [495])
                (ashift:DI (reg:DI 0 ax [495])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 497 {*ashldi3_1}
     (nil))
(insn 475 474 476 34 (parallel [
            (set (reg:DI 0 ax [495])
                (plus:DI (reg:DI 0 ax [495])
                    (reg:DI 1 dx [orig:210 D.6574 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:210 D.6574 ] [210])
            (const_int 5 [0x5]))
        (nil)))
(insn 476 475 477 34 (parallel [
            (set (reg:DI 1 dx [496])
                (ashift:DI (reg:DI 0 ax [495])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 497 {*ashldi3_1}
     (nil))
(insn 477 476 478 34 (parallel [
            (set (reg:DI 0 ax [495])
                (plus:DI (reg:DI 0 ax [495])
                    (reg:DI 1 dx [496])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 221 {*adddi_1}
     (nil))
(insn 478 477 479 34 (parallel [
            (set (reg:DI 0 ax [497])
                (ashift:DI (reg:DI 0 ax [495])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 497 {*ashldi3_1}
     (nil))
(insn 479 478 480 34 (set (reg:DI 0 ax [495])
        (reg:DI 0 ax [497])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 480 479 481 34 (set (reg:DI 1 dx [orig:211 D.6574 ] [211])
        (reg:DI 0 ax [495])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 481 480 482 34 (set (reg/f:DI 0 ax [498])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 482 481 483 34 (parallel [
            (set (reg/f:DI 1 dx [orig:212 D.6585 ] [212])
                (plus:DI (reg:DI 1 dx [orig:211 D.6574 ] [211])
                    (reg/f:DI 0 ax [498])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:211 D.6574 ] [211]))
        (nil)))
(insn 483 482 484 34 (set (reg:SI 0 ax [500])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 484 483 485 34 (set (reg:DI 0 ax [499])
        (sign_extend:DI (reg:SI 0 ax [500]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 485 484 486 34 (set (reg/f:DI 2 cx [orig:213 D.6589 ] [213])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [499])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:212 D.6585 ] [212])) [0 *_182 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 486 485 487 34 (set (reg:SI 0 ax [501])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 487 486 488 34 (parallel [
            (set (reg:SI 4 si [orig:214 D.6573 ] [214])
                (plus:SI (reg:SI 0 ax [501])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 488 487 489 34 (set (reg:SI 0 ax [502])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 489 488 490 34 (set (reg:DI 1 dx [orig:215 D.6574 ] [215])
        (sign_extend:DI (reg:SI 0 ax [502]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 490 489 491 34 (set (reg:DI 0 ax [503])
        (reg:DI 1 dx [orig:215 D.6574 ] [215])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 491 490 492 34 (parallel [
            (set (reg:DI 0 ax [503])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 497 {*ashldi3_1}
     (nil))
(insn 492 491 493 34 (parallel [
            (set (reg:DI 0 ax [503])
                (plus:DI (reg:DI 0 ax [503])
                    (reg:DI 1 dx [orig:215 D.6574 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:215 D.6574 ] [215])
            (const_int 5 [0x5]))
        (nil)))
(insn 493 492 494 34 (parallel [
            (set (reg:DI 1 dx [504])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 497 {*ashldi3_1}
     (nil))
(insn 494 493 495 34 (parallel [
            (set (reg:DI 0 ax [503])
                (plus:DI (reg:DI 0 ax [503])
                    (reg:DI 1 dx [504])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 221 {*adddi_1}
     (nil))
(insn 495 494 496 34 (parallel [
            (set (reg:DI 0 ax [505])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 497 {*ashldi3_1}
     (nil))
(insn 496 495 497 34 (set (reg:DI 0 ax [503])
        (reg:DI 0 ax [505])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 497 496 498 34 (set (reg:DI 1 dx [orig:216 D.6574 ] [216])
        (reg:DI 0 ax [503])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 498 497 499 34 (set (reg/f:DI 0 ax [506])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 499 498 500 34 (parallel [
            (set (reg/f:DI 1 dx [orig:217 D.6583 ] [217])
                (plus:DI (reg:DI 1 dx [orig:216 D.6574 ] [216])
                    (reg/f:DI 0 ax [506])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80112 [0xfffffffffffec710])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:216 D.6574 ] [216]))
        (nil)))
(insn 500 499 501 34 (set (reg:SI 0 ax [508])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 501 500 502 34 (set (reg:DI 0 ax [507])
        (sign_extend:DI (reg:SI 0 ax [508]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 502 501 503 34 (set (reg/f:DI 1 dx [orig:218 D.6587 ] [218])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [507])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:217 D.6583 ] [217])) [0 *_187 S8 A64])) fmtext_o.cpp:191 89 {*movdi_internal}
     (nil))
(insn 503 502 504 34 (set (reg:SI 0 ax [509])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:191 90 {*movsi_internal}
     (nil))
(insn 504 503 505 34 (parallel [
            (set (reg:SI 0 ax [orig:219 D.6573 ] [219])
                (plus:SI (reg:SI 0 ax [509])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:191 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 505 504 506 34 (set (reg:DI 0 ax [510])
        (sign_extend:DI (reg:SI 0 ax [orig:219 D.6573 ] [219]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 506 505 507 34 (set (reg:QI 1 dx [orig:220 D.6590 ] [220])
        (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:218 D.6587 ] [218])
                (reg:DI 0 ax [510])) [0 _188->character S1 A8])) fmtext_o.cpp:191 93 {*movqi_internal}
     (nil))
(insn 507 506 508 34 (set (reg:DI 0 ax [511])
        (sign_extend:DI (reg:SI 4 si [orig:214 D.6573 ] [214]))) fmtext_o.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 508 507 509 34 (set (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:213 D.6589 ] [213])
                (reg:DI 0 ax [511])) [0 _183->character S1 A8])
        (reg:QI 1 dx [orig:220 D.6590 ] [220])) fmtext_o.cpp:191 93 {*movqi_internal}
     (nil))
(insn 509 508 510 34 (set (reg:SI 0 ax [512])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 510 509 511 34 (set (reg:DI 1 dx [orig:221 D.6574 ] [221])
        (sign_extend:DI (reg:SI 0 ax [512]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 511 510 512 34 (set (reg:DI 0 ax [513])
        (reg:DI 1 dx [orig:221 D.6574 ] [221])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 512 511 513 34 (parallel [
            (set (reg:DI 0 ax [513])
                (ashift:DI (reg:DI 0 ax [513])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 497 {*ashldi3_1}
     (nil))
(insn 513 512 514 34 (parallel [
            (set (reg:DI 0 ax [513])
                (plus:DI (reg:DI 0 ax [513])
                    (reg:DI 1 dx [orig:221 D.6574 ] [221])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:221 D.6574 ] [221])
            (const_int 5 [0x5]))
        (nil)))
(insn 514 513 515 34 (parallel [
            (set (reg:DI 1 dx [514])
                (ashift:DI (reg:DI 0 ax [513])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 497 {*ashldi3_1}
     (nil))
(insn 515 514 516 34 (parallel [
            (set (reg:DI 0 ax [513])
                (plus:DI (reg:DI 0 ax [513])
                    (reg:DI 1 dx [514])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 221 {*adddi_1}
     (nil))
(insn 516 515 517 34 (parallel [
            (set (reg:DI 0 ax [515])
                (ashift:DI (reg:DI 0 ax [513])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 497 {*ashldi3_1}
     (nil))
(insn 517 516 518 34 (set (reg:DI 0 ax [513])
        (reg:DI 0 ax [515])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 518 517 519 34 (set (reg:DI 1 dx [orig:222 D.6574 ] [222])
        (reg:DI 0 ax [513])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 519 518 520 34 (set (reg/f:DI 0 ax [516])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 520 519 521 34 (parallel [
            (set (reg/f:DI 1 dx [orig:223 D.6585 ] [223])
                (plus:DI (reg:DI 1 dx [orig:222 D.6574 ] [222])
                    (reg/f:DI 0 ax [516])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:222 D.6574 ] [222]))
        (nil)))
(insn 521 520 522 34 (set (reg:SI 0 ax [518])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 522 521 523 34 (set (reg:DI 0 ax [517])
        (sign_extend:DI (reg:SI 0 ax [518]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 523 522 524 34 (set (reg/f:DI 2 cx [orig:224 D.6589 ] [224])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [517])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:223 D.6585 ] [223])) [0 *_193 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 524 523 525 34 (set (reg:SI 0 ax [519])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 525 524 526 34 (parallel [
            (set (reg:SI 4 si [orig:225 D.6573 ] [225])
                (plus:SI (reg:SI 0 ax [519])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 526 525 527 34 (set (reg:SI 0 ax [520])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 527 526 528 34 (set (reg:DI 1 dx [orig:226 D.6574 ] [226])
        (sign_extend:DI (reg:SI 0 ax [520]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 528 527 529 34 (set (reg:DI 0 ax [521])
        (reg:DI 1 dx [orig:226 D.6574 ] [226])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 529 528 530 34 (parallel [
            (set (reg:DI 0 ax [521])
                (ashift:DI (reg:DI 0 ax [521])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 497 {*ashldi3_1}
     (nil))
(insn 530 529 531 34 (parallel [
            (set (reg:DI 0 ax [521])
                (plus:DI (reg:DI 0 ax [521])
                    (reg:DI 1 dx [orig:226 D.6574 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:226 D.6574 ] [226])
            (const_int 5 [0x5]))
        (nil)))
(insn 531 530 532 34 (parallel [
            (set (reg:DI 1 dx [522])
                (ashift:DI (reg:DI 0 ax [521])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 497 {*ashldi3_1}
     (nil))
(insn 532 531 533 34 (parallel [
            (set (reg:DI 0 ax [521])
                (plus:DI (reg:DI 0 ax [521])
                    (reg:DI 1 dx [522])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 221 {*adddi_1}
     (nil))
(insn 533 532 534 34 (parallel [
            (set (reg:DI 0 ax [523])
                (ashift:DI (reg:DI 0 ax [521])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 497 {*ashldi3_1}
     (nil))
(insn 534 533 535 34 (set (reg:DI 0 ax [521])
        (reg:DI 0 ax [523])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 535 534 536 34 (set (reg:DI 1 dx [orig:227 D.6574 ] [227])
        (reg:DI 0 ax [521])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 536 535 537 34 (set (reg/f:DI 0 ax [524])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80128 [0xfffffffffffec700])) [0 csi_orig+0 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 537 536 538 34 (parallel [
            (set (reg/f:DI 1 dx [orig:228 D.6583 ] [228])
                (plus:DI (reg:DI 1 dx [orig:227 D.6574 ] [227])
                    (reg/f:DI 0 ax [524])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80112 [0xfffffffffffec710])) [0 csi_orig+0 S8 A64])
            (reg:DI 1 dx [orig:227 D.6574 ] [227]))
        (nil)))
(insn 538 537 539 34 (set (reg:SI 0 ax [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 539 538 540 34 (set (reg:DI 0 ax [525])
        (sign_extend:DI (reg:SI 0 ax [526]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 540 539 541 34 (set (reg/f:DI 1 dx [orig:229 D.6587 ] [229])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [525])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:228 D.6583 ] [228])) [0 *_198 S8 A64])) fmtext_o.cpp:192 89 {*movdi_internal}
     (nil))
(insn 541 540 542 34 (set (reg:SI 0 ax [527])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:192 90 {*movsi_internal}
     (nil))
(insn 542 541 543 34 (parallel [
            (set (reg:SI 0 ax [orig:230 D.6573 ] [230])
                (plus:SI (reg:SI 0 ax [527])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:192 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 543 542 544 34 (set (reg:DI 0 ax [528])
        (sign_extend:DI (reg:SI 0 ax [orig:230 D.6573 ] [230]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 544 543 545 34 (set (reg:QI 1 dx [orig:231 D.6590 ] [231])
        (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:229 D.6587 ] [229])
                (reg:DI 0 ax [528])) [0 _199->character S1 A8])) fmtext_o.cpp:192 93 {*movqi_internal}
     (nil))
(insn 545 544 546 34 (set (reg:DI 0 ax [529])
        (sign_extend:DI (reg:SI 4 si [orig:225 D.6573 ] [225]))) fmtext_o.cpp:192 142 {*extendsidi2_rex64}
     (nil))
(insn 546 545 547 34 (set (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:224 D.6589 ] [224])
                (reg:DI 0 ax [529])) [0 _194->character S1 A8])
        (reg:QI 1 dx [orig:231 D.6590 ] [231])) fmtext_o.cpp:192 93 {*movqi_internal}
     (nil))
(insn 547 546 548 34 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:187 220 {*addsi_1}
     (nil))
;;  succ:       35 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU,DFS_BACK)
;;              33 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 183 184 185 186 187 188 189 530
(code_label 548 547 549 35 33 "" [1 uses])
(note 549 548 550 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 550 549 551 35 (set (reg/f:DI 0 ax [530])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:187 89 {*movdi_internal}
     (nil))
(insn 551 550 552 35 (set (reg/f:DI 0 ax [orig:183 D.6579 ] [183])
        (mem/f:DI (reg/f:DI 0 ax [530]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:187 89 {*movdi_internal}
     (nil))
(insn 552 551 553 35 (set (reg:SI 0 ax [orig:184 D.6573 ] [184])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:183 D.6579 ] [183])
                (const_int 8 [0x8])) [0 _153->np.number+0 S4 A32])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
(insn 553 552 554 35 (set (reg:DI 0 ax [orig:185 D.6574 ] [185])
        (sign_extend:DI (reg:SI 0 ax [orig:184 D.6573 ] [184]))) fmtext_o.cpp:187 142 {*extendsidi2_rex64}
     (nil))
(insn 554 553 555 35 (set (reg:SI 1 dx [orig:186 D.6588 ] [186])
        (reg:SI 0 ax [orig:185 D.6574 ] [185])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
(insn 555 554 556 35 (set (reg:SI 0 ax [orig:187 D.6588 ] [187])
        (const_int 8 [0x8])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
(insn 556 555 557 35 (parallel [
            (set (reg:SI 0 ax [orig:188 D.6588 ] [188])
                (mult:SI (reg:SI 0 ax [orig:187 D.6588 ] [187])
                    (reg:SI 1 dx [orig:186 D.6588 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:187 306 {*mulsi3_1}
     (nil))
(insn 557 556 559 35 (set (reg:SI 0 ax [orig:189 D.6573 ] [189])
        (reg:SI 0 ax [orig:188 D.6588 ] [188])) fmtext_o.cpp:187 90 {*movsi_internal}
     (nil))
(insn 559 557 560 35 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:189 D.6573 ] [189])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32]))) fmtext_o.cpp:187 7 {*cmpsi_1}
     (nil))
(jump_insn 560 559 561 35 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 558)
            (pc))) fmtext_o.cpp:187 596 {*jcc_1}
     (nil)
 -> 558)
;;  succ:       34
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 561 560 562 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 562 561 563 36 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:185 220 {*addsi_1}
     (nil))
;;  succ:       37 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU,DFS_BACK)
;;              32 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 181 182 531
(code_label 563 562 564 37 32 "" [1 uses])
(note 564 563 565 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 565 564 566 37 (set (reg/f:DI 0 ax [531])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 566 565 567 37 (set (reg/f:DI 0 ax [orig:181 D.6579 ] [181])
        (mem/f:DI (reg/f:DI 0 ax [531]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 567 566 569 37 (set (reg:SI 0 ax [orig:182 D.6573 ] [182])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:181 D.6579 ] [181])
                (const_int 4 [0x4])) [0 _150->ntraces.number+0 S4 A32])) fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
(insn 569 567 570 37 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:182 D.6573 ] [182])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:185 7 {*cmpsi_1}
     (nil))
(jump_insn 570 569 571 37 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 568)
            (pc))) fmtext_o.cpp:185 596 {*jcc_1}
     (nil)
 -> 568)
;;  succ:       33
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 571 570 572 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 572 571 573 38 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:183 220 {*addsi_1}
     (nil))
;;  succ:       39 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU,DFS_BACK)
;;              31 [100.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 179 180 532
(code_label 573 572 574 39 31 "" [1 uses])
(note 574 573 575 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 575 574 576 39 (set (reg/f:DI 0 ax [532])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:183 89 {*movdi_internal}
     (nil))
(insn 576 575 577 39 (set (reg/f:DI 0 ax [orig:179 D.6579 ] [179])
        (mem/f:DI (reg/f:DI 0 ax [532]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:183 89 {*movdi_internal}
     (nil))
(insn 577 576 579 39 (set (reg:SI 0 ax [orig:180 D.6573 ] [180])
        (mem/j:SI (reg/f:DI 0 ax [orig:179 D.6579 ] [179]) [0 _147->nblocks.number+0 S4 A32])) fmtext_o.cpp:183 90 {*movsi_internal}
     (nil))
(insn 579 577 580 39 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:180 D.6573 ] [180])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:183 7 {*cmpsi_1}
     (nil))
(jump_insn 580 579 581 39 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 578)
            (pc))) fmtext_o.cpp:183 596 {*jcc_1}
     (nil)
 -> 578)
;;  succ:       32
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 581 580 582 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 582 581 1155 40 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:202 90 {*movsi_internal}
     (nil))
(jump_insn 1155 582 1156 40 (set (pc)
        (label_ref 639)) fmtext_o.cpp:202 636 {jump}
     (nil)
 -> 639)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1156 1155 644)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 644 1156 585 41 40 "" [1 uses])
(note 585 644 586 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 586 585 1157 41 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:204 90 {*movsi_internal}
     (nil))
(jump_insn 1157 586 1158 41 (set (pc)
        (label_ref 629)) fmtext_o.cpp:204 636 {jump}
     (nil)
 -> 629)
;;  succ:       43 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1158 1157 634)
;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 236 237 238 239 240 241 242 243 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552
(code_label 634 1158 589 42 39 "" [1 uses])
(note 589 634 590 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 590 589 591 42 (set (reg:SI 0 ax [533])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 591 590 592 42 (set (reg:DI 0 ax [orig:236 D.6574 ] [236])
        (sign_extend:DI (reg:SI 0 ax [533]))) fmtext_o.cpp:206 142 {*extendsidi2_rex64}
     (nil))
(insn 592 591 593 42 (parallel [
            (set (reg:DI 1 dx [orig:237 D.6574 ] [237])
                (ashift:DI (reg:DI 0 ax [orig:236 D.6574 ] [236])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 497 {*ashldi3_1}
     (nil))
(insn 593 592 594 42 (set (reg/f:DI 0 ax [534])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:206 89 {*movdi_internal}
     (nil))
(insn 594 593 595 42 (parallel [
            (set (reg/f:DI 0 ax [orig:238 D.6591 ] [238])
                (plus:DI (reg/f:DI 0 ax [534])
                    (reg:DI 1 dx [orig:237 D.6574 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 pe_table+0 S8 A64])
            (reg:DI 1 dx [orig:237 D.6574 ] [237]))
        (nil)))
(insn 595 594 596 42 (set (reg:SI 2 cx [orig:239 D.6573 ] [239])
        (mem:SI (reg/f:DI 0 ax [orig:238 D.6591 ] [238]) [0 *_214+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 596 595 597 42 (set (reg:SI 0 ax [536])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 597 596 598 42 (set (reg:DI 4 si [535])
        (sign_extend:DI (reg:SI 0 ax [536]))) fmtext_o.cpp:206 142 {*extendsidi2_rex64}
     (nil))
(insn 598 597 599 42 (set (reg:SI 0 ax [538])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 599 598 600 42 (set (reg:DI 1 dx [537])
        (sign_extend:DI (reg:SI 0 ax [538]))) fmtext_o.cpp:206 142 {*extendsidi2_rex64}
     (nil))
(insn 600 599 601 42 (set (reg:DI 0 ax [539])
        (reg:DI 1 dx [537])) fmtext_o.cpp:206 89 {*movdi_internal}
     (nil))
(insn 601 600 602 42 (parallel [
            (set (reg:DI 0 ax [539])
                (ashift:DI (reg:DI 0 ax [539])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 497 {*ashldi3_1}
     (nil))
(insn 602 601 603 42 (parallel [
            (set (reg:DI 0 ax [539])
                (plus:DI (reg:DI 0 ax [539])
                    (reg:DI 1 dx [537])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [537])
            (const_int 5 [0x5]))
        (nil)))
(insn 603 602 604 42 (parallel [
            (set (reg:DI 1 dx [540])
                (ashift:DI (reg:DI 0 ax [539])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 497 {*ashldi3_1}
     (nil))
(insn 604 603 605 42 (parallel [
            (set (reg:DI 0 ax [539])
                (plus:DI (reg:DI 0 ax [539])
                    (reg:DI 1 dx [540])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 221 {*adddi_1}
     (nil))
(insn 605 604 606 42 (parallel [
            (set (reg:DI 0 ax [541])
                (ashift:DI (reg:DI 0 ax [539])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 497 {*ashldi3_1}
     (nil))
(insn 606 605 607 42 (set (reg:DI 0 ax [539])
        (reg:DI 0 ax [541])) fmtext_o.cpp:206 89 {*movdi_internal}
     (nil))
(insn 607 606 608 42 (parallel [
            (set (reg:DI 0 ax [542])
                (plus:DI (reg:DI 0 ax [539])
                    (reg:DI 4 si [535])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:206 221 {*adddi_1}
     (nil))
(insn 608 607 609 42 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [542])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80032 [0xfffffffffffec760])) [0 pe_index[i_4][j_15].index_r+0 S4 A64])
        (reg:SI 2 cx [orig:239 D.6573 ] [239])) fmtext_o.cpp:206 90 {*movsi_internal}
     (nil))
(insn 609 608 610 42 (set (reg:SI 0 ax [543])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 610 609 611 42 (set (reg:DI 0 ax [orig:240 D.6574 ] [240])
        (sign_extend:DI (reg:SI 0 ax [543]))) fmtext_o.cpp:207 142 {*extendsidi2_rex64}
     (nil))
(insn 611 610 612 42 (parallel [
            (set (reg:DI 1 dx [orig:241 D.6574 ] [241])
                (ashift:DI (reg:DI 0 ax [orig:240 D.6574 ] [240])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 497 {*ashldi3_1}
     (nil))
(insn 612 611 613 42 (set (reg/f:DI 0 ax [544])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:207 89 {*movdi_internal}
     (nil))
(insn 613 612 614 42 (parallel [
            (set (reg/f:DI 0 ax [orig:242 D.6591 ] [242])
                (plus:DI (reg/f:DI 0 ax [544])
                    (reg:DI 1 dx [orig:241 D.6574 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 pe_table+0 S8 A64])
            (reg:DI 1 dx [orig:241 D.6574 ] [241]))
        (nil)))
(insn 614 613 615 42 (set (reg:SI 2 cx [orig:243 D.6573 ] [243])
        (mem:SI (reg/f:DI 0 ax [orig:242 D.6591 ] [242]) [0 *_218+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 615 614 616 42 (set (reg:SI 0 ax [546])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 616 615 617 42 (set (reg:DI 4 si [545])
        (sign_extend:DI (reg:SI 0 ax [546]))) fmtext_o.cpp:207 142 {*extendsidi2_rex64}
     (nil))
(insn 617 616 618 42 (set (reg:SI 0 ax [548])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 618 617 619 42 (set (reg:DI 1 dx [547])
        (sign_extend:DI (reg:SI 0 ax [548]))) fmtext_o.cpp:207 142 {*extendsidi2_rex64}
     (nil))
(insn 619 618 620 42 (set (reg:DI 0 ax [549])
        (reg:DI 1 dx [547])) fmtext_o.cpp:207 89 {*movdi_internal}
     (nil))
(insn 620 619 621 42 (parallel [
            (set (reg:DI 0 ax [549])
                (ashift:DI (reg:DI 0 ax [549])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 497 {*ashldi3_1}
     (nil))
(insn 621 620 622 42 (parallel [
            (set (reg:DI 0 ax [549])
                (plus:DI (reg:DI 0 ax [549])
                    (reg:DI 1 dx [547])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [547])
            (const_int 5 [0x5]))
        (nil)))
(insn 622 621 623 42 (parallel [
            (set (reg:DI 1 dx [550])
                (ashift:DI (reg:DI 0 ax [549])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 497 {*ashldi3_1}
     (nil))
(insn 623 622 624 42 (parallel [
            (set (reg:DI 0 ax [549])
                (plus:DI (reg:DI 0 ax [549])
                    (reg:DI 1 dx [550])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 221 {*adddi_1}
     (nil))
(insn 624 623 625 42 (parallel [
            (set (reg:DI 0 ax [551])
                (ashift:DI (reg:DI 0 ax [549])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 497 {*ashldi3_1}
     (nil))
(insn 625 624 626 42 (set (reg:DI 0 ax [549])
        (reg:DI 0 ax [551])) fmtext_o.cpp:207 89 {*movdi_internal}
     (nil))
(insn 626 625 627 42 (parallel [
            (set (reg:DI 0 ax [552])
                (plus:DI (reg:DI 0 ax [549])
                    (reg:DI 4 si [545])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:207 221 {*adddi_1}
     (nil))
(insn 627 626 628 42 (set (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [552])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80028 [0xfffffffffffec764])) [0 pe_index[i_4][j_15].index_c+0 S4 A32])
        (reg:SI 2 cx [orig:243 D.6573 ] [243])) fmtext_o.cpp:207 90 {*movsi_internal}
     (nil))
(insn 628 627 629 42 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:204 220 {*addsi_1}
     (nil))
;;  succ:       43 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU,DFS_BACK)
;;              41 [100.0%] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 234 235 553
(code_label 629 628 630 43 38 "" [1 uses])
(note 630 629 631 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 631 630 632 43 (set (reg/f:DI 0 ax [553])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:204 89 {*movdi_internal}
     (nil))
(insn 632 631 633 43 (set (reg/f:DI 0 ax [orig:234 D.6579 ] [234])
        (mem/f:DI (reg/f:DI 0 ax [553]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:204 89 {*movdi_internal}
     (nil))
(insn 633 632 635 43 (set (reg:SI 0 ax [orig:235 D.6573 ] [235])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:234 D.6579 ] [234])
                (const_int 4 [0x4])) [0 _209->ntraces.number+0 S4 A32])) fmtext_o.cpp:204 90 {*movsi_internal}
     (nil))
(insn 635 633 636 43 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:235 D.6573 ] [235])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:204 7 {*cmpsi_1}
     (nil))
(jump_insn 636 635 637 43 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 634)
            (pc))) fmtext_o.cpp:204 596 {*jcc_1}
     (nil)
 -> 634)
;;  succ:       42
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 637 636 638 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 638 637 639 44 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:202 220 {*addsi_1}
     (nil))
;;  succ:       45 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU,DFS_BACK)
;;              40 [100.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 232 233 554
(code_label 639 638 640 45 37 "" [1 uses])
(note 640 639 641 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 641 640 642 45 (set (reg/f:DI 0 ax [554])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:202 89 {*movdi_internal}
     (nil))
(insn 642 641 643 45 (set (reg/f:DI 0 ax [orig:232 D.6579 ] [232])
        (mem/f:DI (reg/f:DI 0 ax [554]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:202 89 {*movdi_internal}
     (nil))
(insn 643 642 645 45 (set (reg:SI 0 ax [orig:233 D.6573 ] [233])
        (mem/j:SI (reg/f:DI 0 ax [orig:232 D.6579 ] [232]) [0 _206->nblocks.number+0 S4 A32])) fmtext_o.cpp:202 90 {*movsi_internal}
     (nil))
(insn 645 643 646 45 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:233 D.6573 ] [233])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:202 7 {*cmpsi_1}
     (nil))
(jump_insn 646 645 647 45 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 644)
            (pc))) fmtext_o.cpp:202 596 {*jcc_1}
     (nil)
 -> 644)
;;  succ:       41
;;              46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 647 646 648 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 648 647 1159 46 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:214 90 {*movsi_internal}
     (nil))
(jump_insn 1159 648 1160 46 (set (pc)
        (label_ref 671)) fmtext_o.cpp:214 636 {jump}
     (nil)
 -> 671)
;;  succ:       50 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1160 1159 675)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 246 247 248 555 556
(code_label 675 1160 651 47 43 "" [1 uses])
(note 651 675 652 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 652 651 653 47 (set (reg:SI 0 ax [555])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:216 90 {*movsi_internal}
     (nil))
(insn 653 652 654 47 (set (reg:DI 0 ax [orig:245 D.6574 ] [245])
        (sign_extend:DI (reg:SI 0 ax [555]))) fmtext_o.cpp:216 142 {*extendsidi2_rex64}
     (nil))
(insn 654 653 655 47 (parallel [
            (set (reg:DI 1 dx [orig:246 D.6574 ] [246])
                (ashift:DI (reg:DI 0 ax [orig:245 D.6574 ] [245])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:216 497 {*ashldi3_1}
     (nil))
(insn 655 654 656 47 (set (reg/f:DI 0 ax [556])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:216 89 {*movdi_internal}
     (nil))
(insn 656 655 657 47 (parallel [
            (set (reg/f:DI 0 ax [orig:247 D.6591 ] [247])
                (plus:DI (reg/f:DI 0 ax [556])
                    (reg:DI 1 dx [orig:246 D.6574 ] [246])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:216 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 pe_table+0 S8 A64])
            (reg:DI 1 dx [orig:246 D.6574 ] [246]))
        (nil)))
(insn 657 656 658 47 (set (reg:SI 0 ax [orig:248 D.6573 ] [248])
        (mem:SI (reg/f:DI 0 ax [orig:247 D.6591 ] [247]) [0 *_227+0 S4 A32])) fmtext_o.cpp:216 90 {*movsi_internal}
     (nil))
(insn 658 657 659 47 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:248 D.6573 ] [248])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32]))) fmtext_o.cpp:216 7 {*cmpsi_1}
     (nil))
(jump_insn 659 658 660 47 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 668)
            (pc))) fmtext_o.cpp:216 596 {*jcc_1}
     (nil)
 -> 668)
;;  succ:       48 (FALLTHRU)
;;              49
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 249 250 251 557 558 559
(note 660 659 661 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 661 660 662 48 (set (reg:SI 0 ax [557])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:217 90 {*movsi_internal}
     (nil))
(insn 662 661 663 48 (set (reg:DI 0 ax [orig:249 D.6574 ] [249])
        (sign_extend:DI (reg:SI 0 ax [557]))) fmtext_o.cpp:217 142 {*extendsidi2_rex64}
     (nil))
(insn 663 662 664 48 (parallel [
            (set (reg:DI 1 dx [orig:250 D.6574 ] [250])
                (ashift:DI (reg:DI 0 ax [orig:249 D.6574 ] [249])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:217 497 {*ashldi3_1}
     (nil))
(insn 664 663 665 48 (set (reg/f:DI 0 ax [558])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80152 [0xfffffffffffec6e8])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:217 89 {*movdi_internal}
     (nil))
(insn 665 664 666 48 (parallel [
            (set (reg/f:DI 0 ax [orig:251 D.6591 ] [251])
                (plus:DI (reg/f:DI 0 ax [558])
                    (reg:DI 1 dx [orig:250 D.6574 ] [250])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:217 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80136 [0xfffffffffffec6f8])) [0 pe_table+0 S8 A64])
            (reg:DI 1 dx [orig:250 D.6574 ] [250]))
        (nil)))
(insn 666 665 667 48 (set (reg:SI 0 ax [559])
        (mem:SI (reg/f:DI 0 ax [orig:251 D.6591 ] [251]) [0 *_231+0 S4 A32])) fmtext_o.cpp:217 90 {*movsi_internal}
     (nil))
(insn 667 666 668 48 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
        (reg:SI 0 ax [559])) fmtext_o.cpp:217 90 {*movsi_internal}
     (nil))
;;  succ:       49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47
;;              48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 668 667 669 49 42 "" [1 uses])
(note 669 668 670 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 670 669 671 49 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:214 220 {*addsi_1}
     (nil))
;;  succ:       50 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU,DFS_BACK)
;;              46 [100.0%] 
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 244 560
(code_label 671 670 672 50 41 "" [1 uses])
(note 672 671 673 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 673 672 674 50 (set (reg/f:DI 0 ax [560])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:214 89 {*movdi_internal}
     (nil))
(insn 674 673 676 50 (set (reg:SI 0 ax [orig:244 D.6573 ] [244])
        (mem/j:SI (reg/f:DI 0 ax [560]) [0 pe_info_223(D)->number_pe+0 S4 A32])) fmtext_o.cpp:214 90 {*movsi_internal}
     (nil))
(insn 676 674 677 50 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:244 D.6573 ] [244])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:214 7 {*cmpsi_1}
     (nil))
(jump_insn 677 676 678 50 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 675)
            (pc))) fmtext_o.cpp:214 596 {*jcc_1}
     (nil)
 -> 675)
;;  succ:       47
;;              51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 252 561 562 563 564
(note 678 677 679 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 679 678 680 51 (set (reg:SI 0 ax [562])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:221 90 {*movsi_internal}
     (nil))
(insn 680 679 681 51 (parallel [
            (set (reg:SI 0 ax [561])
                (ashiftrt:SI (reg:SI 0 ax [562])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:221 523 {ashrsi3_cvt}
     (expr_list:REG_EQUAL (ashiftrt:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80028 [0xfffffffffffec764])) [0 min_pe_table_value+0 S4 A32])
            (const_int 31 [0x1f]))
        (nil)))
(insn 681 680 682 51 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
                (xor:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
                    (reg:SI 0 ax [561])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:221 389 {*xorsi_1}
     (nil))
(insn 682 681 683 51 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
                (minus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])
                    (reg:SI 0 ax [561])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:221 263 {*subsi_1}
     (nil))
(insn 683 682 684 51 (set (reg:SI 0 ax [563])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:222 90 {*movsi_internal}
     (nil))
(insn 684 683 685 51 (parallel [
            (set (reg:SI 1 dx [orig:252 D.6573 ] [252])
                (ashift:SI (reg:SI 0 ax [563])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:222 496 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80028 [0xfffffffffffec764])) [0 min_pe_table_value+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 685 684 686 51 (set (reg/f:DI 0 ax [564])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:222 89 {*movdi_internal}
     (nil))
(insn 686 685 687 51 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [564])
                (const_int 8 [0x8])) [0 pe_info_223(D)->actual_number_pe+0 S4 A32])
        (reg:SI 1 dx [orig:252 D.6573 ] [252])) fmtext_o.cpp:222 90 {*movsi_internal}
     (nil))
(insn 687 686 1161 51 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:227 90 {*movsi_internal}
     (nil))
(jump_insn 1161 687 1162 51 (set (pc)
        (label_ref 720)) fmtext_o.cpp:227 636 {jump}
     (nil)
 -> 720)
;;  succ:       56 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1162 1161 724)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 724 1162 690 52 47 "" [1 uses])
(note 690 724 691 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 691 690 1163 52 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:229 90 {*movsi_internal}
     (nil))
(jump_insn 1163 691 1164 52 (set (pc)
        (label_ref 711)) fmtext_o.cpp:229 636 {jump}
     (nil)
 -> 711)
;;  succ:       54 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1164 1163 715)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 255 256 257 258 259 260 565 566 567 568 569 570
(code_label 715 1164 694 53 46 "" [1 uses])
(note 694 715 695 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 695 694 696 53 (set (reg:SI 0 ax [565])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:230 90 {*movsi_internal}
     (nil))
(insn 696 695 1186 53 (set (reg:DI 0 ax [orig:255 D.6574 ] [255])
        (sign_extend:DI (reg:SI 0 ax [565]))) fmtext_o.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 1186 696 697 53 (set (reg:DI 0 ax [orig:256 D.6574 ] [256])
        (reg:DI 0 ax [orig:255 D.6574 ] [255])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 697 1186 1187 53 (parallel [
            (set (reg:DI 0 ax [orig:256 D.6574 ] [256])
                (ashift:DI (reg:DI 0 ax [orig:256 D.6574 ] [256])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:230 497 {*ashldi3_1}
     (nil))
(insn 1187 697 698 53 (set (reg:DI 1 dx [orig:256 D.6574 ] [256])
        (reg:DI 0 ax [orig:256 D.6574 ] [256])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 698 1187 699 53 (set (reg/f:DI 0 ax [566])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 699 698 700 53 (parallel [
            (set (reg/f:DI 3 bx [orig:257 D.6592 ] [257])
                (plus:DI (reg:DI 1 dx [orig:256 D.6574 ] [256])
                    (reg/f:DI 0 ax [566])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:230 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 final_data+0 S8 A64])
            (reg:DI 1 dx [orig:256 D.6574 ] [256]))
        (nil)))
(insn 700 699 701 53 (set (reg:SI 0 ax [567])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80036 [0xfffffffffffec75c])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:230 90 {*movsi_internal}
     (nil))
(insn 701 700 702 53 (set (reg:DI 0 ax [orig:258 D.6574 ] [258])
        (sign_extend:DI (reg:SI 0 ax [567]))) fmtext_o.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 702 701 703 53 (parallel [
            (set (reg:DI 0 ax [orig:259 D.6574 ] [259])
                (ashift:DI (reg:DI 0 ax [orig:258 D.6574 ] [258])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:230 497 {*ashldi3_1}
     (nil))
(insn 703 702 704 53 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:259 D.6574 ] [259])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(call_insn 704 703 705 53 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:230 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 705 704 706 53 (set (reg/f:DI 0 ax [568])
        (reg:DI 0 ax)) fmtext_o.cpp:230 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [568])
        (nil)))
(insn 706 705 707 53 (set (reg/f:DI 1 dx [orig:260 D.6584 ] [260])
        (reg/f:DI 0 ax [568])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 707 706 708 53 (set (reg:SI 0 ax [570])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:230 90 {*movsi_internal}
     (nil))
(insn 708 707 709 53 (set (reg:DI 0 ax [569])
        (sign_extend:DI (reg:SI 0 ax [570]))) fmtext_o.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 709 708 710 53 (set (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [569])
                    (const_int 8 [0x8]))
                (reg/f:DI 3 bx [orig:257 D.6592 ] [257])) [0 *_243 S8 A64])
        (reg/f:DI 1 dx [orig:260 D.6584 ] [260])) fmtext_o.cpp:230 89 {*movdi_internal}
     (nil))
(insn 710 709 711 53 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:229 220 {*addsi_1}
     (nil))
;;  succ:       54 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU,DFS_BACK)
;;              52 [100.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 254 571
(code_label 711 710 712 54 45 "" [1 uses])
(note 712 711 713 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 713 712 714 54 (set (reg/f:DI 0 ax [571])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:229 89 {*movdi_internal}
     (nil))
(insn 714 713 716 54 (set (reg:SI 0 ax [orig:254 D.6573 ] [254])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [571])
                (const_int 8 [0x8])) [0 pe_info_223(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:229 90 {*movsi_internal}
     (nil))
(insn 716 714 717 54 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:254 D.6573 ] [254])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:229 7 {*cmpsi_1}
     (nil))
(jump_insn 717 716 718 54 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 715)
            (pc))) fmtext_o.cpp:229 596 {*jcc_1}
     (nil)
 -> 715)
;;  succ:       53
;;              55 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 718 717 719 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 719 718 720 55 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:227 220 {*addsi_1}
     (nil))
;;  succ:       56 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       55 (FALLTHRU,DFS_BACK)
;;              51 [100.0%] 
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 253 572
(code_label 720 719 721 56 44 "" [1 uses])
(note 721 720 722 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 722 721 723 56 (set (reg/f:DI 0 ax [572])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:227 89 {*movdi_internal}
     (nil))
(insn 723 722 725 56 (set (reg:SI 0 ax [orig:253 D.6573 ] [253])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [572])
                (const_int 8 [0x8])) [0 pe_info_223(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:227 90 {*movsi_internal}
     (nil))
(insn 725 723 726 56 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:253 D.6573 ] [253])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:227 7 {*cmpsi_1}
     (nil))
(jump_insn 726 725 727 56 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 724)
            (pc))) fmtext_o.cpp:227 596 {*jcc_1}
     (nil)
 -> 724)
;;  succ:       52
;;              57 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56 (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 727 726 728 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 728 727 1165 57 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:236 90 {*movsi_internal}
     (nil))
(jump_insn 1165 728 1166 57 (set (pc)
        (label_ref 774)) fmtext_o.cpp:236 636 {jump}
     (nil)
 -> 774)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1166 1165 778)
;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 778 1166 731 58 53 "" [1 uses])
(note 731 778 732 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 732 731 1167 58 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:238 90 {*movsi_internal}
     (nil))
(jump_insn 1167 732 1168 58 (set (pc)
        (label_ref 765)) fmtext_o.cpp:238 636 {jump}
     (nil)
 -> 765)
;;  succ:       63 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1168 1167 769)
;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 769 1168 735 59 52 "" [1 uses])
(note 735 769 736 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 736 735 1169 59 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:240 90 {*movsi_internal}
     (nil))
(jump_insn 1169 736 1170 59 (set (pc)
        (label_ref 755)) fmtext_o.cpp:240 636 {jump}
     (nil)
 -> 755)
;;  succ:       61 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1170 1169 760)
;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 265 266 267 268 269 270 271 573 574 575 576 577 578
(code_label 760 1170 739 60 51 "" [1 uses])
(note 739 760 740 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 740 739 741 60 (set (reg:SI 0 ax [573])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 741 740 1188 60 (set (reg:DI 0 ax [orig:265 D.6574 ] [265])
        (sign_extend:DI (reg:SI 0 ax [573]))) fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (nil))
(insn 1188 741 742 60 (set (reg:DI 0 ax [orig:266 D.6574 ] [266])
        (reg:DI 0 ax [orig:265 D.6574 ] [265])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 742 1188 1189 60 (parallel [
            (set (reg:DI 0 ax [orig:266 D.6574 ] [266])
                (ashift:DI (reg:DI 0 ax [orig:266 D.6574 ] [266])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 497 {*ashldi3_1}
     (nil))
(insn 1189 742 743 60 (set (reg:DI 1 dx [orig:266 D.6574 ] [266])
        (reg:DI 0 ax [orig:266 D.6574 ] [266])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 743 1189 744 60 (set (reg/f:DI 0 ax [574])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 744 743 745 60 (parallel [
            (set (reg/f:DI 1 dx [orig:267 D.6592 ] [267])
                (plus:DI (reg:DI 1 dx [orig:266 D.6574 ] [266])
                    (reg/f:DI 0 ax [574])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 final_data+0 S8 A64])
            (reg:DI 1 dx [orig:266 D.6574 ] [266]))
        (nil)))
(insn 745 744 746 60 (set (reg:SI 0 ax [576])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 746 745 747 60 (set (reg:DI 0 ax [575])
        (sign_extend:DI (reg:SI 0 ax [576]))) fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (nil))
(insn 747 746 748 60 (set (reg/f:DI 0 ax [orig:268 D.6589 ] [268])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [575])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:267 D.6592 ] [267])) [0 *_258 S8 A64])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 748 747 749 60 (set (reg:SI 1 dx [577])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 749 748 750 60 (set (reg:DI 1 dx [orig:269 D.6574 ] [269])
        (sign_extend:DI (reg:SI 1 dx [577]))) fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (nil))
(insn 750 749 751 60 (parallel [
            (set (reg:DI 1 dx [orig:270 D.6574 ] [270])
                (ashift:DI (reg:DI 1 dx [orig:269 D.6574 ] [269])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 497 {*ashldi3_1}
     (nil))
(insn 751 750 752 60 (parallel [
            (set (reg/f:DI 1 dx [orig:271 D.6589 ] [271])
                (plus:DI (reg:DI 1 dx [orig:270 D.6574 ] [270])
                    (reg/f:DI 0 ax [orig:268 D.6589 ] [268])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:242 221 {*adddi_1}
     (nil))
(insn 752 751 753 60 (set (reg:DI 0 ax [578])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 init_precision4+0 S8 A64])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 753 752 754 60 (set (mem:DI (reg/f:DI 1 dx [orig:271 D.6589 ] [271]) [0 *_262+0 S8 A64])
        (reg:DI 0 ax [578])) fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 754 753 755 60 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:240 220 {*addsi_1}
     (nil))
;;  succ:       61 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU,DFS_BACK)
;;              59 [100.0%] 
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 263 264 579
(code_label 755 754 756 61 50 "" [1 uses])
(note 756 755 757 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 757 756 758 61 (set (reg/f:DI 0 ax [579])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 758 757 759 61 (set (reg/f:DI 0 ax [orig:263 D.6579 ] [263])
        (mem/f:DI (reg/f:DI 0 ax [579]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 759 758 761 61 (set (reg:SI 0 ax [orig:264 D.6573 ] [264])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:263 D.6579 ] [263])
                (const_int 8 [0x8])) [0 _254->np.number+0 S4 A32])) fmtext_o.cpp:240 90 {*movsi_internal}
     (nil))
(insn 761 759 762 61 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:264 D.6573 ] [264])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32]))) fmtext_o.cpp:240 7 {*cmpsi_1}
     (nil))
(jump_insn 762 761 763 61 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 760)
            (pc))) fmtext_o.cpp:240 596 {*jcc_1}
     (nil)
 -> 760)
;;  succ:       60
;;              62 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61 (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 763 762 764 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 764 763 765 62 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:238 220 {*addsi_1}
     (nil))
;;  succ:       63 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       62 (FALLTHRU,DFS_BACK)
;;              58 [100.0%] 
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 262 580
(code_label 765 764 766 63 49 "" [1 uses])
(note 766 765 767 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 767 766 768 63 (set (reg/f:DI 0 ax [580])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:238 89 {*movdi_internal}
     (nil))
(insn 768 767 770 63 (set (reg:SI 0 ax [orig:262 D.6573 ] [262])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [580])
                (const_int 8 [0x8])) [0 pe_info_223(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:238 90 {*movsi_internal}
     (nil))
(insn 770 768 771 63 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:262 D.6573 ] [262])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:238 7 {*cmpsi_1}
     (nil))
(jump_insn 771 770 772 63 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 769)
            (pc))) fmtext_o.cpp:238 596 {*jcc_1}
     (nil)
 -> 769)
;;  succ:       59
;;              64 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 772 771 773 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 773 772 774 64 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:236 220 {*addsi_1}
     (nil))
;;  succ:       65 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64 (FALLTHRU,DFS_BACK)
;;              57 [100.0%] 
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 261 581
(code_label 774 773 775 65 48 "" [1 uses])
(note 775 774 776 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 776 775 777 65 (set (reg/f:DI 0 ax [581])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:236 89 {*movdi_internal}
     (nil))
(insn 777 776 779 65 (set (reg:SI 0 ax [orig:261 D.6573 ] [261])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [581])
                (const_int 8 [0x8])) [0 pe_info_223(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:236 90 {*movsi_internal}
     (nil))
(insn 779 777 780 65 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:261 D.6573 ] [261])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:236 7 {*cmpsi_1}
     (nil))
(jump_insn 780 779 781 65 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 778)
            (pc))) fmtext_o.cpp:236 596 {*jcc_1}
     (nil)
 -> 778)
;;  succ:       58
;;              66 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65 (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 781 780 782 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 782 781 1171 66 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:249 90 {*movsi_internal}
     (nil))
(jump_insn 1171 782 1172 66 (set (pc)
        (label_ref 918)) fmtext_o.cpp:249 636 {jump}
     (nil)
 -> 918)
;;  succ:       74 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1172 1171 923)
;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       74
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 923 1172 785 67 59 "" [1 uses])
(note 785 923 786 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 786 785 1173 67 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:251 90 {*movsi_internal}
     (nil))
(jump_insn 1173 786 1174 67 (set (pc)
        (label_ref 908)) fmtext_o.cpp:251 636 {jump}
     (nil)
 -> 908)
;;  succ:       72 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1174 1173 913)
;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 913 1174 789 68 58 "" [1 uses])
(note 789 913 790 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 790 789 1175 68 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:253 90 {*movsi_internal}
     (nil))
(jump_insn 1175 790 1176 68 (set (pc)
        (label_ref 898)) fmtext_o.cpp:253 636 {jump}
     (nil)
 -> 898)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1176 1175 903)
;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631
(code_label 903 1176 793 69 57 "" [1 uses])
(note 793 903 794 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 794 793 795 69 (set (reg:SI 0 ax [583])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 795 794 796 69 (set (reg:DI 2 cx [582])
        (sign_extend:DI (reg:SI 0 ax [583]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 796 795 797 69 (set (reg:SI 0 ax [585])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 797 796 798 69 (set (reg:DI 1 dx [584])
        (sign_extend:DI (reg:SI 0 ax [585]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 798 797 799 69 (set (reg:DI 0 ax [586])
        (reg:DI 1 dx [584])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 799 798 800 69 (parallel [
            (set (reg:DI 0 ax [586])
                (ashift:DI (reg:DI 0 ax [586])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 497 {*ashldi3_1}
     (nil))
(insn 800 799 801 69 (parallel [
            (set (reg:DI 0 ax [586])
                (plus:DI (reg:DI 0 ax [586])
                    (reg:DI 1 dx [584])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [584])
            (const_int 5 [0x5]))
        (nil)))
(insn 801 800 802 69 (parallel [
            (set (reg:DI 1 dx [587])
                (ashift:DI (reg:DI 0 ax [586])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 497 {*ashldi3_1}
     (nil))
(insn 802 801 803 69 (parallel [
            (set (reg:DI 0 ax [586])
                (plus:DI (reg:DI 0 ax [586])
                    (reg:DI 1 dx [587])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 221 {*adddi_1}
     (nil))
(insn 803 802 804 69 (parallel [
            (set (reg:DI 0 ax [588])
                (ashift:DI (reg:DI 0 ax [586])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 497 {*ashldi3_1}
     (nil))
(insn 804 803 805 69 (set (reg:DI 0 ax [586])
        (reg:DI 0 ax [588])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 805 804 806 69 (parallel [
            (set (reg:DI 0 ax [589])
                (plus:DI (reg:DI 0 ax [586])
                    (reg:DI 2 cx [582])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 221 {*adddi_1}
     (nil))
(insn 806 805 807 69 (set (reg:SI 1 dx [orig:278 D.6573 ] [278])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [589])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80032 [0xfffffffffffec760])) [0 pe_index[i_8][j_18].index_r+0 S4 A64])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 807 806 808 69 (set (reg:SI 0 ax [590])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 808 807 809 69 (parallel [
            (set (reg:SI 0 ax [orig:279 D.6573 ] [279])
                (plus:SI (reg:SI 0 ax [590])
                    (reg:SI 1 dx [orig:278 D.6573 ] [278])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:278 D.6573 ] [278])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80028 [0xfffffffffffec764])) [0 min_pe_table_value+0 S4 A32]))
        (nil)))
(insn 809 808 1190 69 (set (reg:DI 0 ax [orig:280 D.6574 ] [280])
        (sign_extend:DI (reg:SI 0 ax [orig:279 D.6573 ] [279]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 1190 809 810 69 (set (reg:DI 0 ax [orig:281 D.6574 ] [281])
        (reg:DI 0 ax [orig:280 D.6574 ] [280])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 810 1190 1191 69 (parallel [
            (set (reg:DI 0 ax [orig:281 D.6574 ] [281])
                (ashift:DI (reg:DI 0 ax [orig:281 D.6574 ] [281])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 497 {*ashldi3_1}
     (nil))
(insn 1191 810 811 69 (set (reg:DI 1 dx [orig:281 D.6574 ] [281])
        (reg:DI 0 ax [orig:281 D.6574 ] [281])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 811 1191 812 69 (set (reg/f:DI 0 ax [591])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 812 811 813 69 (parallel [
            (set (reg/f:DI 2 cx [orig:282 D.6592 ] [282])
                (plus:DI (reg:DI 1 dx [orig:281 D.6574 ] [281])
                    (reg/f:DI 0 ax [591])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 final_data+0 S8 A64])
            (reg:DI 1 dx [orig:281 D.6574 ] [281]))
        (nil)))
(insn 813 812 814 69 (set (reg:SI 0 ax [593])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 814 813 815 69 (set (reg:DI 4 si [592])
        (sign_extend:DI (reg:SI 0 ax [593]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 815 814 816 69 (set (reg:SI 0 ax [595])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 816 815 817 69 (set (reg:DI 1 dx [594])
        (sign_extend:DI (reg:SI 0 ax [595]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 817 816 818 69 (set (reg:DI 0 ax [596])
        (reg:DI 1 dx [594])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 818 817 819 69 (parallel [
            (set (reg:DI 0 ax [596])
                (ashift:DI (reg:DI 0 ax [596])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 819 818 820 69 (parallel [
            (set (reg:DI 0 ax [596])
                (plus:DI (reg:DI 0 ax [596])
                    (reg:DI 1 dx [594])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [594])
            (const_int 5 [0x5]))
        (nil)))
(insn 820 819 821 69 (parallel [
            (set (reg:DI 1 dx [597])
                (ashift:DI (reg:DI 0 ax [596])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 821 820 822 69 (parallel [
            (set (reg:DI 0 ax [596])
                (plus:DI (reg:DI 0 ax [596])
                    (reg:DI 1 dx [597])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 221 {*adddi_1}
     (nil))
(insn 822 821 823 69 (parallel [
            (set (reg:DI 0 ax [598])
                (ashift:DI (reg:DI 0 ax [596])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 823 822 824 69 (set (reg:DI 0 ax [596])
        (reg:DI 0 ax [598])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 824 823 825 69 (parallel [
            (set (reg:DI 0 ax [599])
                (plus:DI (reg:DI 0 ax [596])
                    (reg:DI 4 si [592])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 221 {*adddi_1}
     (nil))
(insn 825 824 826 69 (set (reg:SI 1 dx [orig:283 D.6573 ] [283])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [599])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80028 [0xfffffffffffec764])) [0 pe_index[i_8][j_18].index_c+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 826 825 827 69 (set (reg:SI 0 ax [600])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 827 826 828 69 (parallel [
            (set (reg:SI 0 ax [orig:284 D.6573 ] [284])
                (plus:SI (reg:SI 0 ax [600])
                    (reg:SI 1 dx [orig:283 D.6573 ] [283])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:283 D.6573 ] [283])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80028 [0xfffffffffffec764])) [0 min_pe_table_value+0 S4 A32]))
        (nil)))
(insn 828 827 829 69 (set (reg:DI 0 ax [601])
        (sign_extend:DI (reg:SI 0 ax [orig:284 D.6573 ] [284]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 829 828 830 69 (set (reg/f:DI 0 ax [orig:285 D.6589 ] [285])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [601])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [orig:282 D.6592 ] [282])) [0 *_279 S8 A64])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 830 829 831 69 (set (reg:SI 1 dx [602])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 831 830 832 69 (set (reg:DI 1 dx [orig:286 D.6574 ] [286])
        (sign_extend:DI (reg:SI 1 dx [602]))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (nil))
(insn 832 831 833 69 (parallel [
            (set (reg:DI 1 dx [orig:287 D.6574 ] [287])
                (ashift:DI (reg:DI 1 dx [orig:286 D.6574 ] [286])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 497 {*ashldi3_1}
     (nil))
(insn 833 832 834 69 (parallel [
            (set (reg/f:DI 2 cx [orig:288 D.6589 ] [288])
                (plus:DI (reg/f:DI 0 ax [orig:285 D.6589 ] [285])
                    (reg:DI 1 dx [orig:287 D.6574 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 221 {*adddi_1}
     (nil))
(insn 834 833 835 69 (set (reg:SI 0 ax [604])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 835 834 836 69 (set (reg:DI 4 si [603])
        (sign_extend:DI (reg:SI 0 ax [604]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 836 835 837 69 (set (reg:SI 0 ax [606])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 837 836 838 69 (set (reg:DI 1 dx [605])
        (sign_extend:DI (reg:SI 0 ax [606]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 838 837 839 69 (set (reg:DI 0 ax [607])
        (reg:DI 1 dx [605])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 839 838 840 69 (parallel [
            (set (reg:DI 0 ax [607])
                (ashift:DI (reg:DI 0 ax [607])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 497 {*ashldi3_1}
     (nil))
(insn 840 839 841 69 (parallel [
            (set (reg:DI 0 ax [607])
                (plus:DI (reg:DI 0 ax [607])
                    (reg:DI 1 dx [605])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [605])
            (const_int 5 [0x5]))
        (nil)))
(insn 841 840 842 69 (parallel [
            (set (reg:DI 1 dx [608])
                (ashift:DI (reg:DI 0 ax [607])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 497 {*ashldi3_1}
     (nil))
(insn 842 841 843 69 (parallel [
            (set (reg:DI 0 ax [607])
                (plus:DI (reg:DI 0 ax [607])
                    (reg:DI 1 dx [608])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 221 {*adddi_1}
     (nil))
(insn 843 842 844 69 (parallel [
            (set (reg:DI 0 ax [609])
                (ashift:DI (reg:DI 0 ax [607])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 497 {*ashldi3_1}
     (nil))
(insn 844 843 845 69 (set (reg:DI 0 ax [607])
        (reg:DI 0 ax [609])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 845 844 846 69 (parallel [
            (set (reg:DI 0 ax [610])
                (plus:DI (reg:DI 0 ax [607])
                    (reg:DI 4 si [603])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 221 {*adddi_1}
     (nil))
(insn 846 845 847 69 (set (reg:SI 1 dx [orig:289 D.6573 ] [289])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [610])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80032 [0xfffffffffffec760])) [0 pe_index[i_8][j_18].index_r+0 S4 A64])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 847 846 848 69 (set (reg:SI 0 ax [611])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 848 847 849 69 (parallel [
            (set (reg:SI 0 ax [orig:290 D.6573 ] [290])
                (plus:SI (reg:SI 0 ax [611])
                    (reg:SI 1 dx [orig:289 D.6573 ] [289])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:289 D.6573 ] [289])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80028 [0xfffffffffffec764])) [0 min_pe_table_value+0 S4 A32]))
        (nil)))
(insn 849 848 1192 69 (set (reg:DI 0 ax [orig:291 D.6574 ] [291])
        (sign_extend:DI (reg:SI 0 ax [orig:290 D.6573 ] [290]))) fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 1192 849 850 69 (set (reg:DI 0 ax [orig:292 D.6574 ] [292])
        (reg:DI 0 ax [orig:291 D.6574 ] [291])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 850 1192 1193 69 (parallel [
            (set (reg:DI 0 ax [orig:292 D.6574 ] [292])
                (ashift:DI (reg:DI 0 ax [orig:292 D.6574 ] [292])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 497 {*ashldi3_1}
     (nil))
(insn 1193 850 851 69 (set (reg:DI 1 dx [orig:292 D.6574 ] [292])
        (reg:DI 0 ax [orig:292 D.6574 ] [292])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 851 1193 852 69 (set (reg/f:DI 0 ax [612])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 852 851 853 69 (parallel [
            (set (reg/f:DI 4 si [orig:293 D.6592 ] [293])
                (plus:DI (reg:DI 1 dx [orig:292 D.6574 ] [292])
                    (reg/f:DI 0 ax [612])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:256 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 final_data+0 S8 A64])
            (reg:DI 1 dx [orig:292 D.6574 ] [292]))
        (nil)))
(insn 853 852 854 69 (set (reg:SI 0 ax [614])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 854 853 855 69 (set (reg:DI 5 di [613])
        (sign_extend:DI (reg:SI 0 ax [614]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 855 854 856 69 (set (reg:SI 0 ax [616])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 856 855 857 69 (set (reg:DI 1 dx [615])
        (sign_extend:DI (reg:SI 0 ax [616]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 857 856 858 69 (set (reg:DI 0 ax [617])
        (reg:DI 1 dx [615])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 858 857 859 69 (parallel [
            (set (reg:DI 0 ax [617])
                (ashift:DI (reg:DI 0 ax [617])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 859 858 860 69 (parallel [
            (set (reg:DI 0 ax [617])
                (plus:DI (reg:DI 0 ax [617])
                    (reg:DI 1 dx [615])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [615])
            (const_int 5 [0x5]))
        (nil)))
(insn 860 859 861 69 (parallel [
            (set (reg:DI 1 dx [618])
                (ashift:DI (reg:DI 0 ax [617])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 861 860 862 69 (parallel [
            (set (reg:DI 0 ax [617])
                (plus:DI (reg:DI 0 ax [617])
                    (reg:DI 1 dx [618])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 221 {*adddi_1}
     (nil))
(insn 862 861 863 69 (parallel [
            (set (reg:DI 0 ax [619])
                (ashift:DI (reg:DI 0 ax [617])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 863 862 864 69 (set (reg:DI 0 ax [617])
        (reg:DI 0 ax [619])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 864 863 865 69 (parallel [
            (set (reg:DI 0 ax [620])
                (plus:DI (reg:DI 0 ax [617])
                    (reg:DI 5 di [613])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 221 {*adddi_1}
     (nil))
(insn 865 864 866 69 (set (reg:SI 1 dx [orig:294 D.6573 ] [294])
        (mem/j:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [620])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -80028 [0xfffffffffffec764])) [0 pe_index[i_8][j_18].index_c+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 866 865 867 69 (set (reg:SI 0 ax [621])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80044 [0xfffffffffffec754])) [0 min_pe_table_value+0 S4 A32])) fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 867 866 868 69 (parallel [
            (set (reg:SI 0 ax [orig:295 D.6573 ] [295])
                (plus:SI (reg:SI 0 ax [621])
                    (reg:SI 1 dx [orig:294 D.6573 ] [294])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:257 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:294 D.6573 ] [294])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80028 [0xfffffffffffec764])) [0 min_pe_table_value+0 S4 A32]))
        (nil)))
(insn 868 867 869 69 (set (reg:DI 0 ax [622])
        (sign_extend:DI (reg:SI 0 ax [orig:295 D.6573 ] [295]))) fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 869 868 870 69 (set (reg/f:DI 0 ax [orig:296 D.6589 ] [296])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [622])
                    (const_int 8 [0x8]))
                (reg/f:DI 4 si [orig:293 D.6592 ] [293])) [0 *_290 S8 A64])) fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 870 869 871 69 (set (reg:SI 1 dx [623])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 871 870 872 69 (set (reg:DI 1 dx [orig:297 D.6574 ] [297])
        (sign_extend:DI (reg:SI 1 dx [623]))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (nil))
(insn 872 871 873 69 (parallel [
            (set (reg:DI 1 dx [orig:298 D.6574 ] [298])
                (ashift:DI (reg:DI 1 dx [orig:297 D.6574 ] [297])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 497 {*ashldi3_1}
     (nil))
(insn 873 872 874 69 (parallel [
            (set (reg/f:DI 0 ax [orig:299 D.6589 ] [299])
                (plus:DI (reg/f:DI 0 ax [orig:296 D.6589 ] [296])
                    (reg:DI 1 dx [orig:298 D.6574 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 221 {*adddi_1}
     (nil))
(insn 874 873 875 69 (set (reg:DI 4 si [orig:300 D.6593 ] [300])
        (mem/j:DI (reg/f:DI 0 ax [orig:299 D.6589 ] [299]) [0 _296->lo+0 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 875 874 876 69 (set (reg:SI 0 ax [624])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 876 875 877 69 (set (reg:DI 1 dx [orig:301 D.6574 ] [301])
        (sign_extend:DI (reg:SI 0 ax [624]))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (nil))
(insn 877 876 878 69 (set (reg:DI 0 ax [625])
        (reg:DI 1 dx [orig:301 D.6574 ] [301])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 878 877 879 69 (parallel [
            (set (reg:DI 0 ax [625])
                (ashift:DI (reg:DI 0 ax [625])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 497 {*ashldi3_1}
     (nil))
(insn 879 878 880 69 (parallel [
            (set (reg:DI 0 ax [625])
                (plus:DI (reg:DI 0 ax [625])
                    (reg:DI 1 dx [orig:301 D.6574 ] [301])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:301 D.6574 ] [301])
            (const_int 5 [0x5]))
        (nil)))
(insn 880 879 881 69 (parallel [
            (set (reg:DI 1 dx [626])
                (ashift:DI (reg:DI 0 ax [625])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 497 {*ashldi3_1}
     (nil))
(insn 881 880 882 69 (parallel [
            (set (reg:DI 0 ax [625])
                (plus:DI (reg:DI 0 ax [625])
                    (reg:DI 1 dx [626])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 221 {*adddi_1}
     (nil))
(insn 882 881 883 69 (parallel [
            (set (reg:DI 0 ax [627])
                (ashift:DI (reg:DI 0 ax [625])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 497 {*ashldi3_1}
     (nil))
(insn 883 882 884 69 (set (reg:DI 0 ax [625])
        (reg:DI 0 ax [627])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 884 883 885 69 (set (reg:DI 1 dx [orig:302 D.6574 ] [302])
        (reg:DI 0 ax [625])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 885 884 886 69 (set (reg/f:DI 0 ax [628])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 886 885 887 69 (parallel [
            (set (reg/f:DI 1 dx [orig:303 D.6585 ] [303])
                (plus:DI (reg:DI 1 dx [orig:302 D.6574 ] [302])
                    (reg/f:DI 0 ax [628])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:302 D.6574 ] [302]))
        (nil)))
(insn 887 886 888 69 (set (reg:SI 0 ax [630])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 888 887 889 69 (set (reg:DI 0 ax [629])
        (sign_extend:DI (reg:SI 0 ax [630]))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (nil))
(insn 889 888 890 69 (set (reg/f:DI 0 ax [orig:304 D.6589 ] [304])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [629])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:303 D.6585 ] [303])) [0 *_300 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 890 889 891 69 (set (reg:SI 1 dx [631])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:258 90 {*movsi_internal}
     (nil))
(insn 891 890 892 69 (set (reg:DI 1 dx [orig:305 D.6574 ] [305])
        (sign_extend:DI (reg:SI 1 dx [631]))) fmtext_o.cpp:258 142 {*extendsidi2_rex64}
     (nil))
(insn 892 891 893 69 (parallel [
            (set (reg:DI 1 dx [orig:306 D.6574 ] [306])
                (ashift:DI (reg:DI 1 dx [orig:305 D.6574 ] [305])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 497 {*ashldi3_1}
     (nil))
(insn 893 892 894 69 (parallel [
            (set (reg/f:DI 0 ax [orig:307 D.6589 ] [307])
                (plus:DI (reg/f:DI 0 ax [orig:304 D.6589 ] [304])
                    (reg:DI 1 dx [orig:306 D.6574 ] [306])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 221 {*adddi_1}
     (nil))
(insn 894 893 895 69 (set (reg:DI 0 ax [orig:308 D.6593 ] [308])
        (mem/j:DI (reg/f:DI 0 ax [orig:307 D.6589 ] [307]) [0 _304->lo+0 S8 A64])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 895 894 896 69 (parallel [
            (set (reg:DI 0 ax [orig:309 D.6593 ] [309])
                (plus:DI (reg:DI 0 ax [orig:308 D.6593 ] [308])
                    (reg:DI 4 si [orig:300 D.6593 ] [300])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:258 221 {*adddi_1}
     (nil))
(insn 896 895 897 69 (set (mem/j:DI (reg/f:DI 2 cx [orig:288 D.6589 ] [288]) [0 _285->lo+0 S8 A64])
        (reg:DI 0 ax [orig:309 D.6593 ] [309])) fmtext_o.cpp:258 89 {*movdi_internal}
     (nil))
(insn 897 896 898 69 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:253 220 {*addsi_1}
     (nil))
;;  succ:       70 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69 (FALLTHRU,DFS_BACK)
;;              68 [100.0%] 
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 276 277 632
(code_label 898 897 899 70 56 "" [1 uses])
(note 899 898 900 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 900 899 901 70 (set (reg/f:DI 0 ax [632])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 901 900 902 70 (set (reg/f:DI 0 ax [orig:276 D.6579 ] [276])
        (mem/f:DI (reg/f:DI 0 ax [632]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 902 901 904 70 (set (reg:SI 0 ax [orig:277 D.6573 ] [277])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:276 D.6579 ] [276])
                (const_int 8 [0x8])) [0 _273->np.number+0 S4 A32])) fmtext_o.cpp:253 90 {*movsi_internal}
     (nil))
(insn 904 902 905 70 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:277 D.6573 ] [277])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32]))) fmtext_o.cpp:253 7 {*cmpsi_1}
     (nil))
(jump_insn 905 904 906 70 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 903)
            (pc))) fmtext_o.cpp:253 596 {*jcc_1}
     (nil)
 -> 903)
;;  succ:       69
;;              71 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 906 905 907 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 907 906 908 71 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:251 220 {*addsi_1}
     (nil))
;;  succ:       72 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71 (FALLTHRU,DFS_BACK)
;;              67 [100.0%] 
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 274 275 633
(code_label 908 907 909 72 55 "" [1 uses])
(note 909 908 910 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 910 909 911 72 (set (reg/f:DI 0 ax [633])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(insn 911 910 912 72 (set (reg/f:DI 0 ax [orig:274 D.6579 ] [274])
        (mem/f:DI (reg/f:DI 0 ax [633]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(insn 912 911 914 72 (set (reg:SI 0 ax [orig:275 D.6573 ] [275])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:274 D.6579 ] [274])
                (const_int 4 [0x4])) [0 _270->ntraces.number+0 S4 A32])) fmtext_o.cpp:251 90 {*movsi_internal}
     (nil))
(insn 914 912 915 72 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:275 D.6573 ] [275])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:251 7 {*cmpsi_1}
     (nil))
(jump_insn 915 914 916 72 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 913)
            (pc))) fmtext_o.cpp:251 596 {*jcc_1}
     (nil)
 -> 913)
;;  succ:       68
;;              73 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 916 915 917 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 917 916 918 73 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:249 220 {*addsi_1}
     (nil))
;;  succ:       74 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73 (FALLTHRU,DFS_BACK)
;;              66 [100.0%] 
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 272 273 634
(code_label 918 917 919 74 54 "" [1 uses])
(note 919 918 920 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 920 919 921 74 (set (reg/f:DI 0 ax [634])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:249 89 {*movdi_internal}
     (nil))
(insn 921 920 922 74 (set (reg/f:DI 0 ax [orig:272 D.6579 ] [272])
        (mem/f:DI (reg/f:DI 0 ax [634]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:249 89 {*movdi_internal}
     (nil))
(insn 922 921 924 74 (set (reg:SI 0 ax [orig:273 D.6573 ] [273])
        (mem/j:SI (reg/f:DI 0 ax [orig:272 D.6579 ] [272]) [0 _267->nblocks.number+0 S4 A32])) fmtext_o.cpp:249 90 {*movsi_internal}
     (nil))
(insn 924 922 925 74 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:273 D.6573 ] [273])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:249 7 {*cmpsi_1}
     (nil))
(jump_insn 925 924 926 74 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 923)
            (pc))) fmtext_o.cpp:249 596 {*jcc_1}
     (nil)
 -> 923)
;;  succ:       67
;;              75 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       74 (FALLTHRU)
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 926 925 927 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 927 926 1177 75 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
(jump_insn 1177 927 1178 75 (set (pc)
        (label_ref 1086)) fmtext_o.cpp:265 636 {jump}
     (nil)
 -> 1086)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1178 1177 1090)
;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1090 1178 930 76 65 "" [1 uses])
(note 930 1090 931 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 931 930 1179 76 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:267 90 {*movsi_internal}
     (nil))
(jump_insn 1179 931 1180 76 (set (pc)
        (label_ref 1077)) fmtext_o.cpp:267 636 {jump}
     (nil)
 -> 1077)
;;  succ:       81 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1180 1179 1081)
;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1081 1180 934 77 64 "" [1 uses])
(note 934 1081 935 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 935 934 1181 77 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(jump_insn 1181 935 1182 77 (set (pc)
        (label_ref 1062)) fmtext_o.cpp:269 636 {jump}
     (nil)
 -> 1062)
;;  succ:       79 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1182 1181 1072)
;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694
(code_label 1072 1182 938 78 63 "" [1 uses])
(note 938 1072 939 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 939 938 940 78 (set (reg:SI 0 ax [635])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 940 939 941 78 (set (reg:DI 1 dx [orig:319 D.6574 ] [319])
        (sign_extend:DI (reg:SI 0 ax [635]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 941 940 942 78 (set (reg:DI 0 ax [636])
        (reg:DI 1 dx [orig:319 D.6574 ] [319])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 942 941 943 78 (parallel [
            (set (reg:DI 0 ax [636])
                (ashift:DI (reg:DI 0 ax [636])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 497 {*ashldi3_1}
     (nil))
(insn 943 942 944 78 (parallel [
            (set (reg:DI 0 ax [636])
                (plus:DI (reg:DI 0 ax [636])
                    (reg:DI 1 dx [orig:319 D.6574 ] [319])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:319 D.6574 ] [319])
            (const_int 5 [0x5]))
        (nil)))
(insn 944 943 945 78 (parallel [
            (set (reg:DI 1 dx [637])
                (ashift:DI (reg:DI 0 ax [636])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 497 {*ashldi3_1}
     (nil))
(insn 945 944 946 78 (parallel [
            (set (reg:DI 0 ax [636])
                (plus:DI (reg:DI 0 ax [636])
                    (reg:DI 1 dx [637])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 221 {*adddi_1}
     (nil))
(insn 946 945 947 78 (parallel [
            (set (reg:DI 0 ax [638])
                (ashift:DI (reg:DI 0 ax [636])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 497 {*ashldi3_1}
     (nil))
(insn 947 946 948 78 (set (reg:DI 0 ax [636])
        (reg:DI 0 ax [638])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 948 947 949 78 (set (reg:DI 1 dx [orig:320 D.6574 ] [320])
        (reg:DI 0 ax [636])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 949 948 950 78 (set (reg/f:DI 0 ax [639])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 950 949 951 78 (parallel [
            (set (reg/f:DI 1 dx [orig:321 D.6585 ] [321])
                (plus:DI (reg:DI 1 dx [orig:320 D.6574 ] [320])
                    (reg/f:DI 0 ax [639])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:320 D.6574 ] [320]))
        (nil)))
(insn 951 950 952 78 (set (reg:SI 0 ax [641])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 952 951 953 78 (set (reg:DI 0 ax [640])
        (sign_extend:DI (reg:SI 0 ax [641]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 953 952 954 78 (set (reg/f:DI 1 dx [orig:322 D.6589 ] [322])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [640])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:321 D.6585 ] [321])) [0 *_324 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 954 953 955 78 (set (reg:SI 0 ax [642])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 955 954 1194 78 (set (reg:DI 0 ax [orig:323 D.6574 ] [323])
        (sign_extend:DI (reg:SI 0 ax [642]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 1194 955 956 78 (set (reg:DI 0 ax [orig:324 D.6574 ] [324])
        (reg:DI 0 ax [orig:323 D.6574 ] [323])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 956 1194 1195 78 (parallel [
            (set (reg:DI 0 ax [orig:324 D.6574 ] [324])
                (ashift:DI (reg:DI 0 ax [orig:324 D.6574 ] [324])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 497 {*ashldi3_1}
     (nil))
(insn 1195 956 957 78 (set (reg:DI 2 cx [orig:324 D.6574 ] [324])
        (reg:DI 0 ax [orig:324 D.6574 ] [324])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 957 1195 958 78 (set (reg/f:DI 0 ax [643])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 958 957 959 78 (parallel [
            (set (reg/f:DI 2 cx [orig:325 D.6592 ] [325])
                (plus:DI (reg:DI 2 cx [orig:324 D.6574 ] [324])
                    (reg/f:DI 0 ax [643])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:271 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 final_data+0 S8 A64])
            (reg:DI 2 cx [orig:324 D.6574 ] [324]))
        (nil)))
(insn 959 958 960 78 (set (reg:SI 0 ax [645])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 960 959 961 78 (set (reg:DI 0 ax [644])
        (sign_extend:DI (reg:SI 0 ax [645]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 961 960 962 78 (set (reg/f:DI 2 cx [orig:326 D.6589 ] [326])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [644])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [orig:325 D.6592 ] [325])) [0 *_328 S8 A64])) fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(insn 962 961 963 78 (set (reg:SI 0 ax [647])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 963 962 964 78 (set (reg:DI 0 ax [646])
        (sign_extend:DI (reg:SI 0 ax [647]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 964 963 965 78 (set (reg:QI 2 cx [orig:327 D.6590 ] [327])
        (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:326 D.6589 ] [326])
                (reg:DI 0 ax [646])) [0 _329->character S1 A8])) fmtext_o.cpp:271 93 {*movqi_internal}
     (nil))
(insn 965 964 966 78 (set (reg:SI 0 ax [649])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:271 90 {*movsi_internal}
     (nil))
(insn 966 965 967 78 (set (reg:DI 0 ax [648])
        (sign_extend:DI (reg:SI 0 ax [649]))) fmtext_o.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 967 966 968 78 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:322 D.6589 ] [322])
                (reg:DI 0 ax [648])) [0 _325->character S1 A8])
        (reg:QI 2 cx [orig:327 D.6590 ] [327])) fmtext_o.cpp:271 93 {*movqi_internal}
     (nil))
(insn 968 967 969 78 (set (reg:SI 0 ax [650])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 969 968 970 78 (set (reg:DI 1 dx [orig:328 D.6574 ] [328])
        (sign_extend:DI (reg:SI 0 ax [650]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 970 969 971 78 (set (reg:DI 0 ax [651])
        (reg:DI 1 dx [orig:328 D.6574 ] [328])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 971 970 972 78 (parallel [
            (set (reg:DI 0 ax [651])
                (ashift:DI (reg:DI 0 ax [651])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 497 {*ashldi3_1}
     (nil))
(insn 972 971 973 78 (parallel [
            (set (reg:DI 0 ax [651])
                (plus:DI (reg:DI 0 ax [651])
                    (reg:DI 1 dx [orig:328 D.6574 ] [328])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:328 D.6574 ] [328])
            (const_int 5 [0x5]))
        (nil)))
(insn 973 972 974 78 (parallel [
            (set (reg:DI 1 dx [652])
                (ashift:DI (reg:DI 0 ax [651])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 497 {*ashldi3_1}
     (nil))
(insn 974 973 975 78 (parallel [
            (set (reg:DI 0 ax [651])
                (plus:DI (reg:DI 0 ax [651])
                    (reg:DI 1 dx [652])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 221 {*adddi_1}
     (nil))
(insn 975 974 976 78 (parallel [
            (set (reg:DI 0 ax [653])
                (ashift:DI (reg:DI 0 ax [651])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 497 {*ashldi3_1}
     (nil))
(insn 976 975 977 78 (set (reg:DI 0 ax [651])
        (reg:DI 0 ax [653])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 977 976 978 78 (set (reg:DI 1 dx [orig:329 D.6574 ] [329])
        (reg:DI 0 ax [651])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 978 977 979 78 (set (reg/f:DI 0 ax [654])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 979 978 980 78 (parallel [
            (set (reg/f:DI 1 dx [orig:330 D.6585 ] [330])
                (plus:DI (reg:DI 1 dx [orig:329 D.6574 ] [329])
                    (reg/f:DI 0 ax [654])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:329 D.6574 ] [329]))
        (nil)))
(insn 980 979 981 78 (set (reg:SI 0 ax [656])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 981 980 982 78 (set (reg:DI 0 ax [655])
        (sign_extend:DI (reg:SI 0 ax [656]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 982 981 983 78 (set (reg/f:DI 1 dx [orig:331 D.6589 ] [331])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [655])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:330 D.6585 ] [330])) [0 *_333 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 983 982 984 78 (set (reg:SI 0 ax [657])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 984 983 985 78 (parallel [
            (set (reg:SI 4 si [orig:332 D.6573 ] [332])
                (plus:SI (reg:SI 0 ax [657])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 985 984 986 78 (set (reg:SI 0 ax [658])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 986 985 1196 78 (set (reg:DI 0 ax [orig:333 D.6574 ] [333])
        (sign_extend:DI (reg:SI 0 ax [658]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 1196 986 987 78 (set (reg:DI 0 ax [orig:334 D.6574 ] [334])
        (reg:DI 0 ax [orig:333 D.6574 ] [333])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 987 1196 1197 78 (parallel [
            (set (reg:DI 0 ax [orig:334 D.6574 ] [334])
                (ashift:DI (reg:DI 0 ax [orig:334 D.6574 ] [334])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 497 {*ashldi3_1}
     (nil))
(insn 1197 987 988 78 (set (reg:DI 2 cx [orig:334 D.6574 ] [334])
        (reg:DI 0 ax [orig:334 D.6574 ] [334])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 988 1197 989 78 (set (reg/f:DI 0 ax [659])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 989 988 990 78 (parallel [
            (set (reg/f:DI 2 cx [orig:335 D.6592 ] [335])
                (plus:DI (reg:DI 2 cx [orig:334 D.6574 ] [334])
                    (reg/f:DI 0 ax [659])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 final_data+0 S8 A64])
            (reg:DI 2 cx [orig:334 D.6574 ] [334]))
        (nil)))
(insn 990 989 991 78 (set (reg:SI 0 ax [661])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 991 990 992 78 (set (reg:DI 0 ax [660])
        (sign_extend:DI (reg:SI 0 ax [661]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 992 991 993 78 (set (reg/f:DI 2 cx [orig:336 D.6589 ] [336])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [660])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [orig:335 D.6592 ] [335])) [0 *_338 S8 A64])) fmtext_o.cpp:272 89 {*movdi_internal}
     (nil))
(insn 993 992 994 78 (set (reg:SI 0 ax [662])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:272 90 {*movsi_internal}
     (nil))
(insn 994 993 995 78 (parallel [
            (set (reg:SI 0 ax [orig:337 D.6573 ] [337])
                (plus:SI (reg:SI 0 ax [662])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:272 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 995 994 996 78 (set (reg:DI 0 ax [663])
        (sign_extend:DI (reg:SI 0 ax [orig:337 D.6573 ] [337]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 996 995 997 78 (set (reg:QI 2 cx [orig:338 D.6590 ] [338])
        (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:336 D.6589 ] [336])
                (reg:DI 0 ax [663])) [0 _339->character S1 A8])) fmtext_o.cpp:272 93 {*movqi_internal}
     (nil))
(insn 997 996 998 78 (set (reg:DI 0 ax [664])
        (sign_extend:DI (reg:SI 4 si [orig:332 D.6573 ] [332]))) fmtext_o.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 998 997 999 78 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:331 D.6589 ] [331])
                (reg:DI 0 ax [664])) [0 _334->character S1 A8])
        (reg:QI 2 cx [orig:338 D.6590 ] [338])) fmtext_o.cpp:272 93 {*movqi_internal}
     (nil))
(insn 999 998 1000 78 (set (reg:SI 0 ax [665])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1000 999 1001 78 (set (reg:DI 1 dx [orig:339 D.6574 ] [339])
        (sign_extend:DI (reg:SI 0 ax [665]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1001 1000 1002 78 (set (reg:DI 0 ax [666])
        (reg:DI 1 dx [orig:339 D.6574 ] [339])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1002 1001 1003 78 (parallel [
            (set (reg:DI 0 ax [666])
                (ashift:DI (reg:DI 0 ax [666])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 497 {*ashldi3_1}
     (nil))
(insn 1003 1002 1004 78 (parallel [
            (set (reg:DI 0 ax [666])
                (plus:DI (reg:DI 0 ax [666])
                    (reg:DI 1 dx [orig:339 D.6574 ] [339])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:339 D.6574 ] [339])
            (const_int 5 [0x5]))
        (nil)))
(insn 1004 1003 1005 78 (parallel [
            (set (reg:DI 1 dx [667])
                (ashift:DI (reg:DI 0 ax [666])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 497 {*ashldi3_1}
     (nil))
(insn 1005 1004 1006 78 (parallel [
            (set (reg:DI 0 ax [666])
                (plus:DI (reg:DI 0 ax [666])
                    (reg:DI 1 dx [667])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 221 {*adddi_1}
     (nil))
(insn 1006 1005 1007 78 (parallel [
            (set (reg:DI 0 ax [668])
                (ashift:DI (reg:DI 0 ax [666])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 497 {*ashldi3_1}
     (nil))
(insn 1007 1006 1008 78 (set (reg:DI 0 ax [666])
        (reg:DI 0 ax [668])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1008 1007 1009 78 (set (reg:DI 1 dx [orig:340 D.6574 ] [340])
        (reg:DI 0 ax [666])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1009 1008 1010 78 (set (reg/f:DI 0 ax [669])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1010 1009 1011 78 (parallel [
            (set (reg/f:DI 1 dx [orig:341 D.6585 ] [341])
                (plus:DI (reg:DI 1 dx [orig:340 D.6574 ] [340])
                    (reg/f:DI 0 ax [669])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:340 D.6574 ] [340]))
        (nil)))
(insn 1011 1010 1012 78 (set (reg:SI 0 ax [671])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1012 1011 1013 78 (set (reg:DI 0 ax [670])
        (sign_extend:DI (reg:SI 0 ax [671]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1013 1012 1014 78 (set (reg/f:DI 1 dx [orig:342 D.6589 ] [342])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [670])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:341 D.6585 ] [341])) [0 *_344 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1014 1013 1015 78 (set (reg:SI 0 ax [672])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1015 1014 1016 78 (parallel [
            (set (reg:SI 4 si [orig:343 D.6573 ] [343])
                (plus:SI (reg:SI 0 ax [672])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 1016 1015 1017 78 (set (reg:SI 0 ax [673])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1017 1016 1198 78 (set (reg:DI 0 ax [orig:344 D.6574 ] [344])
        (sign_extend:DI (reg:SI 0 ax [673]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1198 1017 1018 78 (set (reg:DI 0 ax [orig:345 D.6574 ] [345])
        (reg:DI 0 ax [orig:344 D.6574 ] [344])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1018 1198 1199 78 (parallel [
            (set (reg:DI 0 ax [orig:345 D.6574 ] [345])
                (ashift:DI (reg:DI 0 ax [orig:345 D.6574 ] [345])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 497 {*ashldi3_1}
     (nil))
(insn 1199 1018 1019 78 (set (reg:DI 2 cx [orig:345 D.6574 ] [345])
        (reg:DI 0 ax [orig:345 D.6574 ] [345])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1019 1199 1020 78 (set (reg/f:DI 0 ax [674])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1020 1019 1021 78 (parallel [
            (set (reg/f:DI 2 cx [orig:346 D.6592 ] [346])
                (plus:DI (reg:DI 2 cx [orig:345 D.6574 ] [345])
                    (reg/f:DI 0 ax [674])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 final_data+0 S8 A64])
            (reg:DI 2 cx [orig:345 D.6574 ] [345]))
        (nil)))
(insn 1021 1020 1022 78 (set (reg:SI 0 ax [676])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1022 1021 1023 78 (set (reg:DI 0 ax [675])
        (sign_extend:DI (reg:SI 0 ax [676]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1023 1022 1024 78 (set (reg/f:DI 2 cx [orig:347 D.6589 ] [347])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [675])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [orig:346 D.6592 ] [346])) [0 *_349 S8 A64])) fmtext_o.cpp:273 89 {*movdi_internal}
     (nil))
(insn 1024 1023 1025 78 (set (reg:SI 0 ax [677])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:273 90 {*movsi_internal}
     (nil))
(insn 1025 1024 1026 78 (parallel [
            (set (reg:SI 0 ax [orig:348 D.6573 ] [348])
                (plus:SI (reg:SI 0 ax [677])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:273 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 1026 1025 1027 78 (set (reg:DI 0 ax [678])
        (sign_extend:DI (reg:SI 0 ax [orig:348 D.6573 ] [348]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1027 1026 1028 78 (set (reg:QI 2 cx [orig:349 D.6590 ] [349])
        (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:347 D.6589 ] [347])
                (reg:DI 0 ax [678])) [0 _350->character S1 A8])) fmtext_o.cpp:273 93 {*movqi_internal}
     (nil))
(insn 1028 1027 1029 78 (set (reg:DI 0 ax [679])
        (sign_extend:DI (reg:SI 4 si [orig:343 D.6573 ] [343]))) fmtext_o.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 1029 1028 1030 78 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:342 D.6589 ] [342])
                (reg:DI 0 ax [679])) [0 _345->character S1 A8])
        (reg:QI 2 cx [orig:349 D.6590 ] [349])) fmtext_o.cpp:273 93 {*movqi_internal}
     (nil))
(insn 1030 1029 1031 78 (set (reg:SI 0 ax [680])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1031 1030 1032 78 (set (reg:DI 1 dx [orig:350 D.6574 ] [350])
        (sign_extend:DI (reg:SI 0 ax [680]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1032 1031 1033 78 (set (reg:DI 0 ax [681])
        (reg:DI 1 dx [orig:350 D.6574 ] [350])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1033 1032 1034 78 (parallel [
            (set (reg:DI 0 ax [681])
                (ashift:DI (reg:DI 0 ax [681])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 497 {*ashldi3_1}
     (nil))
(insn 1034 1033 1035 78 (parallel [
            (set (reg:DI 0 ax [681])
                (plus:DI (reg:DI 0 ax [681])
                    (reg:DI 1 dx [orig:350 D.6574 ] [350])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:350 D.6574 ] [350])
            (const_int 5 [0x5]))
        (nil)))
(insn 1035 1034 1036 78 (parallel [
            (set (reg:DI 1 dx [682])
                (ashift:DI (reg:DI 0 ax [681])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 497 {*ashldi3_1}
     (nil))
(insn 1036 1035 1037 78 (parallel [
            (set (reg:DI 0 ax [681])
                (plus:DI (reg:DI 0 ax [681])
                    (reg:DI 1 dx [682])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 221 {*adddi_1}
     (nil))
(insn 1037 1036 1038 78 (parallel [
            (set (reg:DI 0 ax [683])
                (ashift:DI (reg:DI 0 ax [681])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 497 {*ashldi3_1}
     (nil))
(insn 1038 1037 1039 78 (set (reg:DI 0 ax [681])
        (reg:DI 0 ax [683])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1039 1038 1040 78 (set (reg:DI 1 dx [orig:351 D.6574 ] [351])
        (reg:DI 0 ax [681])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1040 1039 1041 78 (set (reg/f:DI 0 ax [684])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80136 [0xfffffffffffec6f8])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1041 1040 1042 78 (parallel [
            (set (reg/f:DI 1 dx [orig:352 D.6585 ] [352])
                (plus:DI (reg:DI 1 dx [orig:351 D.6574 ] [351])
                    (reg/f:DI 0 ax [684])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80120 [0xfffffffffffec708])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:351 D.6574 ] [351]))
        (nil)))
(insn 1042 1041 1043 78 (set (reg:SI 0 ax [686])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1043 1042 1044 78 (set (reg:DI 0 ax [685])
        (sign_extend:DI (reg:SI 0 ax [686]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1044 1043 1045 78 (set (reg/f:DI 1 dx [orig:353 D.6589 ] [353])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [685])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:352 D.6585 ] [352])) [0 *_355 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1045 1044 1046 78 (set (reg:SI 0 ax [687])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1046 1045 1047 78 (parallel [
            (set (reg:SI 4 si [orig:354 D.6573 ] [354])
                (plus:SI (reg:SI 0 ax [687])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 1047 1046 1048 78 (set (reg:SI 0 ax [688])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1048 1047 1200 78 (set (reg:DI 0 ax [orig:355 D.6574 ] [355])
        (sign_extend:DI (reg:SI 0 ax [688]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1200 1048 1049 78 (set (reg:DI 0 ax [orig:356 D.6574 ] [356])
        (reg:DI 0 ax [orig:355 D.6574 ] [355])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1049 1200 1201 78 (parallel [
            (set (reg:DI 0 ax [orig:356 D.6574 ] [356])
                (ashift:DI (reg:DI 0 ax [orig:356 D.6574 ] [356])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 497 {*ashldi3_1}
     (nil))
(insn 1201 1049 1050 78 (set (reg:DI 2 cx [orig:356 D.6574 ] [356])
        (reg:DI 0 ax [orig:356 D.6574 ] [356])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1050 1201 1051 78 (set (reg/f:DI 0 ax [689])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80144 [0xfffffffffffec6f0])) [0 final_data+0 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1051 1050 1052 78 (parallel [
            (set (reg/f:DI 2 cx [orig:357 D.6592 ] [357])
                (plus:DI (reg:DI 2 cx [orig:356 D.6574 ] [356])
                    (reg/f:DI 0 ax [689])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80128 [0xfffffffffffec700])) [0 final_data+0 S8 A64])
            (reg:DI 2 cx [orig:356 D.6574 ] [356]))
        (nil)))
(insn 1052 1051 1053 78 (set (reg:SI 0 ax [691])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1053 1052 1054 78 (set (reg:DI 0 ax [690])
        (sign_extend:DI (reg:SI 0 ax [691]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1054 1053 1055 78 (set (reg/f:DI 2 cx [orig:358 D.6589 ] [358])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [690])
                    (const_int 8 [0x8]))
                (reg/f:DI 2 cx [orig:357 D.6592 ] [357])) [0 *_360 S8 A64])) fmtext_o.cpp:274 89 {*movdi_internal}
     (nil))
(insn 1055 1054 1056 78 (set (reg:SI 0 ax [692])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])) fmtext_o.cpp:274 90 {*movsi_internal}
     (nil))
(insn 1056 1055 1057 78 (parallel [
            (set (reg:SI 0 ax [orig:359 D.6573 ] [359])
                (plus:SI (reg:SI 0 ax [692])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:274 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80032 [0xfffffffffffec760])) [0 k+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 1057 1056 1058 78 (set (reg:DI 0 ax [693])
        (sign_extend:DI (reg:SI 0 ax [orig:359 D.6573 ] [359]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1058 1057 1059 78 (set (reg:QI 2 cx [orig:360 D.6590 ] [360])
        (mem/j:QI (plus:DI (reg/f:DI 2 cx [orig:358 D.6589 ] [358])
                (reg:DI 0 ax [693])) [0 _361->character S1 A8])) fmtext_o.cpp:274 93 {*movqi_internal}
     (nil))
(insn 1059 1058 1060 78 (set (reg:DI 0 ax [694])
        (sign_extend:DI (reg:SI 4 si [orig:354 D.6573 ] [354]))) fmtext_o.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 1060 1059 1061 78 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:353 D.6589 ] [353])
                (reg:DI 0 ax [694])) [0 _356->character S1 A8])
        (reg:QI 2 cx [orig:360 D.6590 ] [360])) fmtext_o.cpp:274 93 {*movqi_internal}
     (nil))
(insn 1061 1060 1062 78 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:269 220 {*addsi_1}
     (nil))
;;  succ:       79 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU,DFS_BACK)
;;              77 [100.0%] 
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 312 313 314 315 316 317 318 695
(code_label 1062 1061 1063 79 62 "" [1 uses])
(note 1063 1062 1064 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 1064 1063 1065 79 (set (reg/f:DI 0 ax [695])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80096 [0xfffffffffffec720])) [0 main_header+0 S8 A64])) fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 1065 1064 1066 79 (set (reg/f:DI 0 ax [orig:312 D.6579 ] [312])
        (mem/f:DI (reg/f:DI 0 ax [695]) [0 *main_header_54(D)+0 S8 A64])) fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 1066 1065 1067 79 (set (reg:SI 0 ax [orig:313 D.6573 ] [313])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:312 D.6579 ] [312])
                (const_int 8 [0x8])) [0 _315->np.number+0 S4 A32])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 1067 1066 1068 79 (set (reg:DI 0 ax [orig:314 D.6574 ] [314])
        (sign_extend:DI (reg:SI 0 ax [orig:313 D.6573 ] [313]))) fmtext_o.cpp:269 142 {*extendsidi2_rex64}
     (nil))
(insn 1068 1067 1069 79 (set (reg:SI 1 dx [orig:315 D.6588 ] [315])
        (reg:SI 0 ax [orig:314 D.6574 ] [314])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 1069 1068 1070 79 (set (reg:SI 0 ax [orig:316 D.6588 ] [316])
        (const_int 8 [0x8])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 1070 1069 1071 79 (parallel [
            (set (reg:SI 0 ax [orig:317 D.6588 ] [317])
                (mult:SI (reg:SI 0 ax [orig:316 D.6588 ] [316])
                    (reg:SI 1 dx [orig:315 D.6588 ] [315])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:269 306 {*mulsi3_1}
     (nil))
(insn 1071 1070 1073 79 (set (reg:SI 0 ax [orig:318 D.6573 ] [318])
        (reg:SI 0 ax [orig:317 D.6588 ] [317])) fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 1073 1071 1074 79 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:318 D.6573 ] [318])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80048 [0xfffffffffffec750])) [0 k+0 S4 A32]))) fmtext_o.cpp:269 7 {*cmpsi_1}
     (nil))
(jump_insn 1074 1073 1075 79 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1072)
            (pc))) fmtext_o.cpp:269 596 {*jcc_1}
     (nil)
 -> 1072)
;;  succ:       78
;;              80 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79 (FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1075 1074 1076 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 1076 1075 1077 80 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:267 220 {*addsi_1}
     (nil))
;;  succ:       81 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 (FALLTHRU,DFS_BACK)
;;              76 [100.0%] 
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 311 696
(code_label 1077 1076 1078 81 61 "" [1 uses])
(note 1078 1077 1079 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 1079 1078 1080 81 (set (reg/f:DI 0 ax [696])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:267 89 {*movdi_internal}
     (nil))
(insn 1080 1079 1082 81 (set (reg:SI 0 ax [orig:311 D.6573 ] [311])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [696])
                (const_int 8 [0x8])) [0 pe_info_223(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:267 90 {*movsi_internal}
     (nil))
(insn 1082 1080 1083 81 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:311 D.6573 ] [311])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80052 [0xfffffffffffec74c])) [0 j+0 S4 A32]))) fmtext_o.cpp:267 7 {*cmpsi_1}
     (nil))
(jump_insn 1083 1082 1084 81 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1081)
            (pc))) fmtext_o.cpp:267 596 {*jcc_1}
     (nil)
 -> 1081)
;;  succ:       77
;;              82 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81 (FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1084 1083 1085 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 1085 1084 1086 82 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:265 220 {*addsi_1}
     (nil))
;;  succ:       83 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       82 (FALLTHRU,DFS_BACK)
;;              75 [100.0%] 
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 310 697
(code_label 1086 1085 1087 83 60 "" [1 uses])
(note 1087 1086 1088 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1088 1087 1089 83 (set (reg/f:DI 0 ax [697])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80160 [0xfffffffffffec6e0])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:265 89 {*movdi_internal}
     (nil))
(insn 1089 1088 1091 83 (set (reg:SI 0 ax [orig:310 D.6573 ] [310])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [697])
                (const_int 8 [0x8])) [0 pe_info_223(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
(insn 1091 1089 1092 83 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:310 D.6573 ] [310])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:265 7 {*cmpsi_1}
     (nil))
(jump_insn 1092 1091 1093 83 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1090)
            (pc))) fmtext_o.cpp:265 596 {*jcc_1}
     (nil)
 -> 1090)
;;  succ:       76
;;              84 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 84, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              83 (FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1093 1092 1094 84 13 "" [1 uses])
(note 1094 1093 1095 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 1095 1094 1096 84 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:120 220 {*addsi_1}
     (nil))
;;  succ:       85 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       84 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 698
(code_label 1096 1095 1097 85 12 "" [1 uses])
(note 1097 1096 1098 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 1098 1097 1099 85 (set (reg/f:DI 0 ax [698])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80072 [0xfffffffffffec738])) [0 fid+0 S8 A64])) fmtext_o.cpp:120 89 {*movdi_internal}
     (nil))
(insn 1099 1098 1100 85 (set (reg:SI 0 ax [orig:83 D.6573 ] [83])
        (mem:SI (reg/f:DI 0 ax [698]) [0 *fid_31(D)+0 S4 A32])) fmtext_o.cpp:120 90 {*movsi_internal}
     (nil))
(insn 1100 1099 1102 85 (parallel [
            (set (reg:SI 0 ax [orig:84 D.6573 ] [84])
                (plus:SI (reg:SI 0 ax [orig:83 D.6573 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:120 220 {*addsi_1}
     (nil))
(insn 1102 1100 1103 85 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:84 D.6573 ] [84])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80056 [0xfffffffffffec748])) [0 i+0 S4 A32]))) fmtext_o.cpp:120 7 {*cmpsi_1}
     (nil))
(jump_insn 1103 1102 1104 85 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1101)
            (pc))) fmtext_o.cpp:120 596 {*jcc_1}
     (nil)
 -> 1101)
;;  succ:       3
;;              86 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       85 (FALLTHRU)
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 361 699
(note 1104 1103 1105 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 1105 1104 1106 86 (set (reg/f:DI 0 ax [699])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1106 1105 1107 86 (set (reg/f:DI 0 ax [orig:361 D.6578 ] [361])
        (mem/f:DI (reg/f:DI 0 ax [699]) [0 *in_file_41(D)+0 S8 A64])) fmtext_o.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1107 1106 1108 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:361 D.6578 ] [361])
            (const_int 0 [0]))) fmtext_o.cpp:284 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1108 1107 1109 86 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1114)
            (pc))) fmtext_o.cpp:284 596 {*jcc_1}
     (nil)
 -> 1114)
;;  succ:       87 (FALLTHRU)
;;              88
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       86 (FALLTHRU)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 362 700
(note 1109 1108 1110 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 1110 1109 1111 87 (set (reg/f:DI 0 ax [700])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80120 [0xfffffffffffec708])) [0 in_file+0 S8 A64])) fmtext_o.cpp:285 89 {*movdi_internal}
     (nil))
(insn 1111 1110 1112 87 (set (reg/f:DI 0 ax [orig:362 D.6578 ] [362])
        (mem/f:DI (reg/f:DI 0 ax [700]) [0 *in_file_41(D)+0 S8 A64])) fmtext_o.cpp:285 89 {*movdi_internal}
     (nil))
(insn 1112 1111 1113 87 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:362 D.6578 ] [362])) fmtext_o.cpp:285 89 {*movdi_internal}
     (nil))
(call_insn 1113 1112 1114 87 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b8e1bc4b900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:285 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       88 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 89, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       86
;;              87 (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 363 364
(code_label 1114 1113 1115 88 67 "" [1 uses])
(note 1115 1114 1116 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 1116 1115 1119 88 (set (reg:SI 0 ax [orig:363 D.6573 ] [363])
        (const_int 1 [0x1])) fmtext_o.cpp:288 90 {*movsi_internal}
     (nil))
(insn 1119 1116 1123 88 (set (reg:SI 0 ax [orig:364 <retval> ] [364])
        (reg:SI 0 ax [orig:363 D.6573 ] [363])) fmtext_o.cpp:288 90 {*movsi_internal}
     (nil))
(insn 1123 1119 1124 88 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:364 <retval> ] [364])) fmtext_o.cpp:290 90 {*movsi_internal}
     (nil))
(insn 1124 1123 1125 88 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.6594+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [703]))
        ]) fmtext_o.cpp:290 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 1125 1124 1131 88 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1128)
            (pc))) fmtext_o.cpp:290 596 {*jcc_1}
     (nil)
 -> 1128)
;;  succ:       90
;;              89 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 88, next block 90, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88 (FALLTHRU)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 1131 1125 1126 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(call_insn 1126 1131 1127 89 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2b8e1bf5d700 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:290 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1127 1126 1128)
;; basic block 90, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 89, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1128 1127 1132 90 69 "" [1 uses])
(note 1132 1128 1129 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 1129 1132 1183 90 (use (reg/i:SI 0 ax)) fmtext_o.cpp:290 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 1183 1129 0 NOTE_INSN_DELETED)

;; Function void write_csi_data(char*, Precision4* (*)[100], Data_file_header**, Data_block_header**, PE_info*) (_Z14write_csi_dataPcPA100_P10Precision4PP16Data_file_headerPP17Data_block_headerP7PE_info, funcdef_no=4, decl_uid=5325, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            alt=2,overall=6,losers=1 -- refuse
	 Choosing alt 2 in insn 49:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=161 from oldreg=97, assigning class GENERAL_REGS to r161
   57: {r161:SI=r161:SI-r134:SI;clobber flags:CC;}
      REG_DEAD r136:SI
      REG_DEAD r134:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  178: r161:SI=r136:SI
    Inserting insn reload after:
  179: r97:SI=r161:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 63:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 67:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 72:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 83:  (0) =rm  (1) %0  (2) rn {*addhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 88:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 89:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 92:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 93:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 98:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 99:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 112
	 Choosing alt 2 in insn 112:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 131:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 136:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 145:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) rm {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 154:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (1) rzw {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 13
  BB 3
   Insn 171: point = 0
   Insn 26: point = 0
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 23: point = 0
   Insn 22: point = 1
  BB 12
   Insn 166: point = 2
   Insn 165: point = 2
   Insn 164: point = 3
  BB 11
   Insn 162: point = 4
   Insn 161: point = 4
   Insn 160: point = 4
   Insn 159: point = 4
   Insn 158: point = 5
   Insn 157: point = 6
   Insn 156: point = 7
   Insn 155: point = 8
   Insn 154: point = 8
  BB 10
   Insn 152: point = 8
   Insn 151: point = 8
   Insn 149: point = 9
   Insn 148: point = 11
  BB 4
   Insn 173: point = 12
   Insn 77: point = 12
   Insn 76: point = 12
   Insn 75: point = 12
   Insn 74: point = 12
   Insn 73: point = 13
   Insn 72: point = 13
   Insn 71: point = 13
   Insn 70: point = 14
   Insn 69: point = 15
   Insn 68: point = 17
   Insn 67: point = 18
   Insn 66: point = 19
   Insn 65: point = 20
   Insn 64: point = 22
   Insn 63: point = 23
   Insn 62: point = 24
   Insn 61: point = 25
   Insn 60: point = 27
   Insn 59: point = 28
   Insn 58: point = 29
   Insn 179: point = 31
	Hard reg 0 is preferable by r161 with profit 1
   Insn 57: point = 33
   Insn 178: point = 34
	Hard reg 0 is preferable by r161 with profit 1
	Hard reg 4 is preferable by r161 with profit 1
   Insn 56: point = 36
   Insn 55: point = 37
   Insn 54: point = 39
   Insn 53: point = 41
   Insn 52: point = 43
   Insn 51: point = 45
   Insn 50: point = 47
   Insn 49: point = 48
   Insn 48: point = 50
   Insn 47: point = 52
   Insn 46: point = 54
   Insn 45: point = 55
   Insn 44: point = 57
   Insn 43: point = 59
   Insn 42: point = 60
   Insn 41: point = 62
   Insn 40: point = 63
   Insn 39: point = 64
   Insn 38: point = 66
   Insn 37: point = 67
   Insn 36: point = 69
   Insn 35: point = 70
   Insn 34: point = 71
   Insn 33: point = 73
   Insn 32: point = 74
   Insn 31: point = 76
  BB 2
   Insn 20: point = 77
   Insn 19: point = 77
   Insn 18: point = 78
   Insn 17: point = 79
   Insn 16: point = 79
   Insn 15: point = 80
   Insn 14: point = 81
   Insn 13: point = 81
   Insn 12: point = 82
   Insn 11: point = 82
   Insn 10: point = 83
   Insn 6: point = 83
   Insn 5: point = 83
   Insn 4: point = 83
   Insn 3: point = 83
   Insn 2: point = 83
  BB 9
   Insn 145: point = 83
  BB 8
   Insn 143: point = 83
   Insn 142: point = 83
   Insn 140: point = 84
   Insn 139: point = 86
  BB 5
   Insn 175: point = 87
   Insn 102: point = 87
   Insn 101: point = 87
   Insn 100: point = 87
   Insn 99: point = 88
   Insn 98: point = 88
   Insn 97: point = 88
   Insn 96: point = 89
   Insn 95: point = 90
   Insn 94: point = 92
   Insn 93: point = 93
   Insn 92: point = 94
   Insn 91: point = 95
   Insn 90: point = 97
   Insn 89: point = 98
   Insn 88: point = 99
   Insn 87: point = 100
   Insn 86: point = 102
   Insn 85: point = 103
   Insn 84: point = 104
   Insn 83: point = 106
   Insn 82: point = 108
   Insn 81: point = 110
  BB 7
   Insn 136: point = 111
  BB 6
   Insn 134: point = 111
   Insn 133: point = 111
   Insn 132: point = 112
   Insn 131: point = 113
   Insn 130: point = 113
   Insn 129: point = 114
   Insn 128: point = 115
   Insn 127: point = 117
   Insn 126: point = 119
   Insn 125: point = 120
   Insn 124: point = 122
   Insn 123: point = 123
   Insn 122: point = 125
   Insn 121: point = 127
   Insn 120: point = 129
   Insn 119: point = 130
   Insn 118: point = 131
   Insn 117: point = 132
   Insn 116: point = 132
   Insn 115: point = 133
   Insn 114: point = 135
   Insn 113: point = 136
   Insn 112: point = 138
   Insn 111: point = 140
   Insn 110: point = 142
   Insn 109: point = 144
   Insn 108: point = 145
   Insn 107: point = 147
   Insn 106: point = 149
 r83: [79..80]
 r84: [77..78]
 r85: [70..74]
 r86: [70..71]
 r87: [63..67]
 r88: [63..64]
 r89: [28..60]
 r90: [56..57]
 r91: [49..55]
 r92: [51..52]
 r93: [49..50]
 r94: [30..48]
 r95: [44..45]
 r96: [42..43]
 r97: [30..31]
 r98: [28..29]
 r99: [23..25]
 r100: [18..20]
 r101: [12..15]
 r102: [8..9]
 r103: [109..110]
 r104: [107..108]
 r105: [105..106]
 r106: [103..104]
 r107: [98..100]
 r108: [98..99]
 r109: [93..95]
 r110: [93..94]
 r111: [87..90]
 r112: [83..84]
 r113: [146..147]
 r114: [139..145]
 r115: [141..142]
 r116: [139..140]
 r117: [137..138]
 r118: [112..136]
 r119: [131..133]
 r120: [121..123]
 r121: [116..120]
 r122: [111..115]
 r123: [4..7]
 r124: [81..82]
 r125: [0..1]
 r126: [75..76]
 r127: [72..73]
 r128: [68..69]
 r129: [65..66]
 r130: [61..62]
 r131: [58..59]
 r132: [53..54]
 r133: [46..47]
 r134: [40..41] [33..37]
 r135: [38..39]
 r136: [35..36]
 r137: [26..27]
 r138: [23..24]
 r139: [21..22]
 r140: [18..19]
 r141: [16..17]
 r142: [13..14]
 r143: [101..102]
 r144: [96..97]
 r145: [91..92]
 r146: [88..89]
 r147: [148..149]
 r148: [143..144]
 r149: [134..135]
 r150: [128..132] [124..125]
 r151: [129..130]
 r152: [126..127]
 r153: [121..122]
 r154: [116..117]
 r155: [118..119]
 r156: [113..114]
 r157: [85..86]
 r158: [10..11]
 r159: [5..6]
 r160: [2..3]
 r161: [32..34]
Compressing live ranges: from 150 to 124 - 82%
Ranges after the compression:
 r83: [66..67]
 r84: [64..65]
 r85: [58..61]
 r86: [58..59]
 r87: [52..55]
 r88: [52..53]
 r89: [22..49]
 r90: [46..47]
 r91: [40..45]
 r92: [42..43]
 r93: [40..41]
 r94: [24..39]
 r95: [36..37]
 r96: [34..35]
 r97: [24..25]
 r98: [22..23]
 r99: [18..19]
 r100: [14..15]
 r101: [10..11]
 r102: [6..7]
 r103: [92..93]
 r104: [90..91]
 r105: [88..89]
 r106: [86..87]
 r107: [82..83]
 r108: [82..83]
 r109: [78..79]
 r110: [78..79]
 r111: [74..75]
 r112: [70..71]
 r113: [120..121]
 r114: [114..119]
 r115: [116..117]
 r116: [114..115]
 r117: [112..113]
 r118: [94..111]
 r119: [108..109]
 r120: [100..101]
 r121: [96..99]
 r122: [94..95]
 r123: [4..5]
 r124: [68..69]
 r125: [0..1]
 r126: [62..63]
 r127: [60..61]
 r128: [56..57]
 r129: [54..55]
 r130: [50..51]
 r131: [48..49]
 r132: [44..45]
 r133: [38..39]
 r134: [32..33] [26..29]
 r135: [30..31]
 r136: [28..29]
 r137: [20..21]
 r138: [18..19]
 r139: [16..17]
 r140: [14..15]
 r141: [12..13]
 r142: [10..11]
 r143: [84..85]
 r144: [80..81]
 r145: [76..77]
 r146: [74..75]
 r147: [122..123]
 r148: [118..119]
 r149: [110..111]
 r150: [106..109] [102..103]
 r151: [106..107]
 r152: [104..105]
 r153: [100..101]
 r154: [96..97]
 r155: [98..99]
 r156: [94..95]
 r157: [72..73]
 r158: [8..9]
 r159: [4..5]
 r160: [2..3]
 r161: [26..27]

********** Assignment #1: **********

	 Assigning to 161 (cl=GENERAL_REGS, orig=97, freq=3, tfirst=161, tfreq=3)...
	   Assign 4 to reload r161 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 32
changing reg in insn 35
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 40
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 59
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 49
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 67
changing reg in insn 69
changing reg in insn 74
changing reg in insn 149
changing reg in insn 151
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 89
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 100
changing reg in insn 140
changing reg in insn 142
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 132
changing reg in insn 115
changing reg in insn 118
changing reg in insn 116
changing reg in insn 118
changing reg in insn 123
changing reg in insn 125
changing reg in insn 125
changing reg in insn 125
changing reg in insn 128
changing reg in insn 128
changing reg in insn 133
changing reg in insn 156
changing reg in insn 159
changing reg in insn 11
changing reg in insn 13
changing reg in insn 22
changing reg in insn 23
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 55
changing reg in insn 53
changing reg in insn 57
changing reg in insn 56
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 106
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 114
changing reg in insn 115
changing reg in insn 122
changing reg in insn 120
changing reg in insn 118
changing reg in insn 117
changing reg in insn 116
changing reg in insn 123
changing reg in insn 121
changing reg in insn 120
changing reg in insn 119
changing reg in insn 118
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 126
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 139
changing reg in insn 140
changing reg in insn 148
changing reg in insn 149
changing reg in insn 157
changing reg in insn 158
changing reg in insn 164
changing reg in insn 165
deleting insn with uid = 15.
deleting insn with uid = 53.
deleting insn with uid = 55.
deleting insn with uid = 178.
deleting insn with uid = 82.
deleting insn with uid = 84.
deleting insn with uid = 122.
deleting insn with uid = 132.
starting the processing of deferred insns
ending the processing of deferred insns


void write_csi_data(char*, Precision4* (*)[100], Data_file_header**, Data_block_header**, PE_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={65d,60u} r1={30d,23u,2e} r2={14d,6u} r4={17d,9u} r5={17d,9u} r6={1d,63u} r7={1d,21u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={28d,5u} r18={8d} r19={8d} r20={1d,1u,1e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d,1u} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} 
;;    total ref usage 881{680d,198u,3e} in 138{130 regular + 8 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 124
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])
        (reg:DI 5 di [ outfile_name ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 csi_final+0 S8 A64])
        (reg:DI 4 si [ csi_final ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])
        (reg:DI 2 cx [ block_header ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])
        (reg:DI 37 r8 [ pe_info ])) fmtext_o.cpp:294 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:296 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:300 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x2b8e1bfe1390 *.LC19>)) fmtext_o.cpp:300 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [124])) fmtext_o.cpp:300 89 {*movdi_internal}
     (nil))
(call_insn 14 13 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b8e1bc4bd00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:300 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 16 14 17 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (reg/f:DI 0 ax [orig:83 D.6601 ] [83])) fmtext_o.cpp:300 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:300 4 {*cmpdi_ccno_1}
     (nil))
(insn 18 17 19 2 (set (reg:QI 0 ax [orig:84 D.6602 ] [84])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:300 592 {*setcc_qi}
     (nil))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 D.6602 ] [84])
            (const_int 0 [0]))) fmtext_o.cpp:300 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) fmtext_o.cpp:300 596 {*jcc_1}
     (nil)
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 125
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 outfile_name+0 S8 A64])) fmtext_o.cpp:302 89 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 4 si)
        (reg:DI 0 ax [125])) fmtext_o.cpp:302 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b8e1bf4aab0 *.LC1>)) fmtext_o.cpp:302 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:302 93 {*movqi_internal}
     (nil))
(call_insn 26 25 171 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b8e1ba95e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:302 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 171 26 172 3 (set (pc)
        (label_ref 169)) 636 {jump}
     (nil)
 -> 169)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 172 171 29)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142
(code_label 29 172 30 4 71 "" [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:306 89 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 0 ax [orig:85 D.6603 ] [85])
        (mem/f:DI (reg/f:DI 0 ax [126]) [0 *main_header_8(D)+0 S8 A64])) fmtext_o.cpp:306 89 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 1 dx [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:306 89 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:SI 1 dx [orig:86 D.6604 ] [86])
        (mem/j:SI (plus:DI (reg/f:DI 1 dx [127])
                (const_int 8 [0x8])) [0 pe_info_10(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:306 90 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (mem/j:SI (reg/f:DI 0 ax [orig:85 D.6603 ] [85]) [0 _9->nblocks.number+0 S4 A32])
        (reg:SI 1 dx [orig:86 D.6604 ] [86])) fmtext_o.cpp:306 90 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:307 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [orig:87 D.6603 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [128]) [0 *main_header_8(D)+0 S8 A64])) fmtext_o.cpp:307 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg/f:DI 1 dx [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:307 89 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:SI 1 dx [orig:88 D.6604 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 1 dx [129])
                (const_int 8 [0x8])) [0 pe_info_10(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:307 90 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:87 D.6603 ] [87])
                (const_int 4 [0x4])) [0 _12->ntraces.number+0 S4 A32])
        (reg:SI 1 dx [orig:88 D.6604 ] [88])) fmtext_o.cpp:307 90 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg/f:DI 1 dx [orig:89 D.6603 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [130]) [0 *main_header_8(D)+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg/f:DI 0 ax [orig:90 D.6603 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [131]) [0 *main_header_8(D)+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:SI 2 cx [orig:91 D.6604 ] [91])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:90 D.6603 ] [90])
                (const_int 4 [0x4])) [0 _15->ntraces.number+0 S4 A32])) fmtext_o.cpp:308 90 {*movsi_internal}
     (nil))
(insn 46 45 47 4 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [orig:92 D.6603 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [132]) [0 *main_header_8(D)+0 S8 A64])) fmtext_o.cpp:308 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SI 0 ax [orig:93 D.6604 ] [93])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:92 D.6603 ] [92])
                (const_int 16 [0x10])) [0 _17->tbytes.number+0 S4 A32])) fmtext_o.cpp:308 90 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg:SI 2 cx [orig:94 D.6604 ] [94])
                (mult:SI (reg:SI 2 cx [orig:91 D.6604 ] [91])
                    (reg:SI 0 ax [orig:93 D.6604 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:308 306 {*mulsi3_1}
     (nil))
(insn 50 49 51 4 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:309 89 {*movdi_internal}
     (nil))
(insn 51 50 52 4 (set (reg/f:DI 0 ax [orig:95 D.6603 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [133]) [0 *main_header_8(D)+0 S8 A64])) fmtext_o.cpp:309 89 {*movdi_internal}
     (nil))
(insn 52 51 54 4 (set (reg:SI 0 ax [orig:96 D.6604 ] [96])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:95 D.6603 ] [95])
                (const_int 28 [0x1c])) [0 _20->spare1.number+0 S4 A32])) fmtext_o.cpp:309 90 {*movsi_internal}
     (nil))
(insn 54 52 56 4 (parallel [
            (set (reg:SI 0 ax [135])
                (ashift:SI (reg:SI 0 ax [134])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 496 {*ashlsi3_1}
     (nil))
(insn 56 54 57 4 (parallel [
            (set (reg:SI 4 si [136])
                (ashift:SI (reg:SI 0 ax [134])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 496 {*ashlsi3_1}
     (nil))
(insn 57 56 179 4 (parallel [
            (set (reg:SI 4 si [orig:97 D.6604 ] [97])
                (minus:SI (reg:SI 4 si [orig:97 D.6604 ] [97])
                    (reg:SI 0 ax [134])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 263 {*subsi_1}
     (nil))
(insn 179 57 58 4 (set (reg:SI 0 ax [orig:97 D.6604 ] [97])
        (reg:SI 4 si [orig:97 D.6604 ] [97])) fmtext_o.cpp:309 90 {*movsi_internal}
     (nil))
(insn 58 179 59 4 (parallel [
            (set (reg:SI 0 ax [orig:98 D.6604 ] [98])
                (plus:SI (reg:SI 0 ax [orig:97 D.6604 ] [97])
                    (reg:SI 2 cx [orig:94 D.6604 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:309 220 {*addsi_1}
     (nil))
(insn 59 58 60 4 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:89 D.6603 ] [89])
                (const_int 20 [0x14])) [0 _14->bbytes.number+0 S4 A32])
        (reg:SI 0 ax [orig:98 D.6604 ] [98])) fmtext_o.cpp:309 90 {*movsi_internal}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:326 89 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg/f:DI 1 dx [orig:99 D.6605 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [137]) [0 *block_header_24(D)+0 S8 A64])) fmtext_o.cpp:326 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (set (reg:SF 0 ax [138])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S4 A32])) fmtext_o.cpp:326 129 {*movsf_internal}
     (nil))
(insn 63 62 64 4 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:99 D.6605 ] [99])
                (const_int 20 [0x14])) [0 _25->lvl.number+0 S4 A32])
        (reg:SF 0 ax [138])) fmtext_o.cpp:326 129 {*movsf_internal}
     (nil))
(insn 64 63 65 4 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:327 89 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg/f:DI 1 dx [orig:100 D.6605 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [139]) [0 *block_header_24(D)+0 S8 A64])) fmtext_o.cpp:327 89 {*movdi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:SF 0 ax [140])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S4 A32])) fmtext_o.cpp:327 129 {*movsf_internal}
     (nil))
(insn 67 66 68 4 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:100 D.6605 ] [100])
                (const_int 24 [0x18])) [0 _26->tlt.number+0 S4 A32])
        (reg:SF 0 ax [140])) fmtext_o.cpp:327 129 {*movsf_internal}
     (nil))
(insn 68 67 69 4 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [orig:101 D.6603 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [141]) [0 *main_header_8(D)+0 S8 A64])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (set (reg:DI 1 dx [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (reg:DI 2 cx)
        (reg:DI 1 dx [142])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:101 D.6603 ] [101])) fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(call_insn 75 74 76 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b8e1ba95800 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:339 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 76 75 77 4 (set (mem/j/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 temp_short_variable.number+0 S2 A64])
        (const_int 0 [0])) fmtext_o.cpp:343 92 {*movhi_internal}
     (nil))
(insn 77 76 173 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:345 90 {*movsi_internal}
     (nil))
(jump_insn 173 77 174 4 (set (pc)
        (label_ref 146)) fmtext_o.cpp:345 636 {jump}
     (nil)
 -> 146)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 174 173 150)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 103 104 105 106 107 108 109 110 111 143 144 145 146
(code_label 150 174 80 5 76 "" [1 uses])
(note 80 150 81 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 83 5 (set (reg:HI 0 ax [orig:103 D.6606 ] [103])
        (mem/j/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 temp_short_variable.number+0 S2 A64])) fmtext_o.cpp:347 92 {*movhi_internal}
     (nil))
(insn 83 81 85 5 (parallel [
            (set (reg:HI 0 ax [orig:105 D.6607 ] [105])
                (plus:HI (reg:HI 0 ax [orig:104 D.6607 ] [104])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:347 223 {*addhi_1}
     (nil))
(insn 85 83 86 5 (set (mem/j/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 temp_short_variable.number+0 S2 A64])
        (reg:HI 0 ax [orig:106 D.6606 ] [106])) fmtext_o.cpp:347 92 {*movhi_internal}
     (nil))
(insn 86 85 87 5 (set (reg/f:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:349 89 {*movdi_internal}
     (nil))
(insn 87 86 88 5 (set (reg/f:DI 0 ax [orig:107 D.6605 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [143]) [0 *block_header_24(D)+0 S8 A64])) fmtext_o.cpp:349 89 {*movdi_internal}
     (nil))
(insn 88 87 89 5 (set (reg:QI 1 dx [orig:108 D.6608 ] [108])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 temp_short_variable.character+0 S1 A64])) fmtext_o.cpp:349 93 {*movqi_internal}
     (nil))
(insn 89 88 90 5 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:107 D.6605 ] [107])
                (const_int 4 [0x4])) [0 _34->index.character+0 S1 A32])
        (reg:QI 1 dx [orig:108 D.6608 ] [108])) fmtext_o.cpp:349 93 {*movqi_internal}
     (nil))
(insn 90 89 91 5 (set (reg/f:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:350 89 {*movdi_internal}
     (nil))
(insn 91 90 92 5 (set (reg/f:DI 0 ax [orig:109 D.6605 ] [109])
        (mem/f:DI (reg/f:DI 0 ax [144]) [0 *block_header_24(D)+0 S8 A64])) fmtext_o.cpp:350 89 {*movdi_internal}
     (nil))
(insn 92 91 93 5 (set (reg:QI 1 dx [orig:110 D.6608 ] [110])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -31 [0xffffffffffffffe1])) [0 temp_short_variable.character+1 S1 A8])) fmtext_o.cpp:350 93 {*movqi_internal}
     (nil))
(insn 93 92 94 5 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:109 D.6605 ] [109])
                (const_int 5 [0x5])) [0 _36->index.character+1 S1 A8])
        (reg:QI 1 dx [orig:110 D.6608 ] [110])) fmtext_o.cpp:350 93 {*movqi_internal}
     (nil))
(insn 94 93 95 5 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 block_header+0 S8 A64])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 95 94 96 5 (set (reg/f:DI 0 ax [orig:111 D.6605 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [145]) [0 *block_header_24(D)+0 S8 A64])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 96 95 97 5 (set (reg:DI 1 dx [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 97 96 98 5 (set (reg:DI 2 cx)
        (reg:DI 1 dx [146])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 98 97 99 5 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 99 98 100 5 (set (reg:DI 4 si)
        (const_int 28 [0x1c])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(insn 100 99 101 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:111 D.6605 ] [111])) fmtext_o.cpp:352 89 {*movdi_internal}
     (nil))
(call_insn 101 100 102 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b8e1ba95800 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:352 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 102 101 175 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:354 90 {*movsi_internal}
     (nil))
(jump_insn 175 102 176 5 (set (pc)
        (label_ref 137)) fmtext_o.cpp:354 636 {jump}
     (nil)
 -> 137)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 176 175 141)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 113 114 115 116 117 118 119 120 121 122 147 148 149 150 151 152 153 154 155 156
(code_label 141 176 105 6 75 "" [1 uses])
(note 105 141 106 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 6 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 107 106 108 6 (set (reg/f:DI 0 ax [orig:113 D.6603 ] [113])
        (mem/f:DI (reg/f:DI 0 ax [147]) [0 *main_header_8(D)+0 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 108 107 109 6 (set (reg:SI 1 dx [orig:114 D.6604 ] [114])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:113 D.6603 ] [113])
                (const_int 8 [0x8])) [0 _41->np.number+0 S4 A32])) fmtext_o.cpp:356 90 {*movsi_internal}
     (nil))
(insn 109 108 110 6 (set (reg/f:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 110 109 111 6 (set (reg/f:DI 0 ax [orig:115 D.6603 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [148]) [0 *main_header_8(D)+0 S8 A64])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 111 110 112 6 (set (reg:SI 0 ax [orig:116 D.6604 ] [116])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:115 D.6603 ] [115])
                (const_int 12 [0xc])) [0 _43->ebytes.number+0 S4 A32])) fmtext_o.cpp:356 90 {*movsi_internal}
     (nil))
(insn 112 111 113 6 (parallel [
            (set (reg:SI 0 ax [orig:117 D.6604 ] [117])
                (mult:SI (reg:SI 0 ax [orig:116 D.6604 ] [116])
                    (reg:SI 1 dx [orig:114 D.6604 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 306 {*mulsi3_1}
     (nil))
(insn 113 112 114 6 (set (reg:DI 4 si [orig:118 D.6609 ] [118])
        (sign_extend:DI (reg:SI 0 ax [orig:117 D.6604 ] [117]))) fmtext_o.cpp:357 142 {*extendsidi2_rex64}
     (nil))
(insn 114 113 115 6 (set (reg:SI 0 ax [149])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) fmtext_o.cpp:356 90 {*movsi_internal}
     (nil))
(insn 115 114 116 6 (set (reg:DI 1 dx [orig:119 D.6609 ] [119])
        (sign_extend:DI (reg:SI 0 ax [149]))) fmtext_o.cpp:356 142 {*extendsidi2_rex64}
     (nil))
(insn 116 115 117 6 (set (reg:DI 0 ax [150])
        (reg:DI 1 dx [orig:119 D.6609 ] [119])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 117 116 118 6 (parallel [
            (set (reg:DI 0 ax [150])
                (ashift:DI (reg:DI 0 ax [150])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 497 {*ashldi3_1}
     (nil))
(insn 118 117 119 6 (parallel [
            (set (reg:DI 0 ax [150])
                (plus:DI (reg:DI 0 ax [150])
                    (reg:DI 1 dx [orig:119 D.6609 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:119 D.6609 ] [119])
            (const_int 5 [0x5]))
        (nil)))
(insn 119 118 120 6 (parallel [
            (set (reg:DI 1 dx [151])
                (ashift:DI (reg:DI 0 ax [150])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 497 {*ashldi3_1}
     (nil))
(insn 120 119 121 6 (parallel [
            (set (reg:DI 0 ax [150])
                (plus:DI (reg:DI 0 ax [150])
                    (reg:DI 1 dx [151])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 221 {*adddi_1}
     (nil))
(insn 121 120 123 6 (parallel [
            (set (reg:DI 0 ax [152])
                (ashift:DI (reg:DI 0 ax [150])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 497 {*ashldi3_1}
     (nil))
(insn 123 121 124 6 (set (reg:DI 1 dx [orig:120 D.6609 ] [120])
        (reg:DI 0 ax [150])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 124 123 125 6 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 csi_final+0 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 125 124 126 6 (parallel [
            (set (reg/f:DI 1 dx [orig:121 D.6610 ] [121])
                (plus:DI (reg:DI 1 dx [orig:120 D.6609 ] [120])
                    (reg/f:DI 0 ax [153])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:356 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 csi_final+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.6609 ] [120]))
        (nil)))
(insn 126 125 127 6 (set (reg:SI 0 ax [155])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) fmtext_o.cpp:356 90 {*movsi_internal}
     (nil))
(insn 127 126 128 6 (set (reg:DI 0 ax [154])
        (sign_extend:DI (reg:SI 0 ax [155]))) fmtext_o.cpp:356 142 {*extendsidi2_rex64}
     (nil))
(insn 128 127 129 6 (set (reg/f:DI 0 ax [orig:122 D.6611 ] [122])
        (mem/f/j:DI (plus:DI (mult:DI (reg:DI 0 ax [154])
                    (const_int 8 [0x8]))
                (reg/f:DI 1 dx [orig:121 D.6610 ] [121])) [0 *_50 S8 A64])) fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 129 128 130 6 (set (reg:DI 1 dx [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 130 129 131 6 (set (reg:DI 2 cx)
        (reg:DI 1 dx [156])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 131 130 133 6 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(insn 133 131 134 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:122 D.6611 ] [122])) fmtext_o.cpp:357 89 {*movdi_internal}
     (nil))
(call_insn 134 133 135 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b8e1ba95800 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:357 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 135 134 136 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:354 220 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 157
(code_label 137 136 138 8 74 "" [1 uses])
(note 138 137 139 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 8 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:354 89 {*movdi_internal}
     (nil))
(insn 140 139 142 8 (set (reg:SI 0 ax [orig:112 D.6604 ] [112])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [157])
                (const_int 8 [0x8])) [0 pe_info_10(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:354 90 {*movsi_internal}
     (nil))
(insn 142 140 143 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:112 D.6604 ] [112])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32]))) fmtext_o.cpp:354 7 {*cmpsi_1}
     (nil))
(jump_insn 143 142 144 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 141)
            (pc))) fmtext_o.cpp:354 596 {*jcc_1}
     (nil)
 -> 141)
;;  succ:       6
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 144 143 145 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:345 220 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 102 158
(code_label 146 145 147 10 73 "" [1 uses])
(note 147 146 148 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 10 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:345 89 {*movdi_internal}
     (nil))
(insn 149 148 151 10 (set (reg:SI 0 ax [orig:102 D.6604 ] [102])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [158])
                (const_int 8 [0x8])) [0 pe_info_10(D)->actual_number_pe+0 S4 A32])) fmtext_o.cpp:345 90 {*movsi_internal}
     (nil))
(insn 151 149 152 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:102 D.6604 ] [102])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32]))) fmtext_o.cpp:345 7 {*cmpsi_1}
     (nil))
(jump_insn 152 151 153 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) fmtext_o.cpp:345 596 {*jcc_1}
     (nil)
 -> 150)
;;  succ:       5
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 123 159
(note 153 152 154 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 154 153 155 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x2b8e1bfe1428 *.LC21>)) fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(call_insn/i 155 154 156 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x2b8e1bd0fd00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:361 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 156 155 157 11 (set (reg:SI 1 dx [orig:123 D.6604 ] [123])
        (reg:SI 0 ax)) fmtext_o.cpp:361 90 {*movsi_internal}
     (nil))
(insn 157 156 158 11 (set (reg:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 158 157 159 11 (set (reg:DI 4 si)
        (reg:DI 0 ax [159])) fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 159 158 160 11 (set (reg:SI 5 di)
        (reg:SI 1 dx [orig:123 D.6604 ] [123])) fmtext_o.cpp:361 90 {*movsi_internal}
     (nil))
(call_insn 160 159 161 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_putc") [flags 0x41]  <function_decl 0x2b8e1bc47300 _IO_putc>) [0 _IO_putc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:361 649 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 161 160 162 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:364 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 162 161 163 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 169)
            (pc))) fmtext_o.cpp:364 596 {*jcc_1}
     (nil)
 -> 169)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 160
(note 163 162 164 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 12 (set (reg:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) fmtext_o.cpp:365 89 {*movdi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [160])) fmtext_o.cpp:365 89 {*movdi_internal}
     (nil))
(call_insn 166 165 169 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b8e1bc4b900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:365 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              11
;;              3 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 169 166 170 13 70 "" [2 uses])
(note 170 169 177 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 177 170 0 NOTE_INSN_DELETED)

;; Function int read_nmr_text(char*, float**, Header*, float**, int) (_Z13read_nmr_textPcPPfP6HeaderS1_i, funcdef_no=5, decl_uid=5302, symbol_order=5)

      Creating newreg=247
Removing SCRATCH in insn #8 (nop 2)
rescanning insn with uid = 8.
      Creating newreg=248
Removing SCRATCH in insn #399 (nop 3)
rescanning insn with uid = 399.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r247
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 32:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 38:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 57:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 71:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 79:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 80:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 87:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 93:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 94:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 96:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 110:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 115:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 121:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 122:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 124:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 135:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 136:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 143:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 149:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 152:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 157:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 163:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 164:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 166:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 171:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 177:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 178:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 180:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 185:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 191:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 192:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 199:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 205:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 206:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 208:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 213:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 221:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 222:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 234:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 241:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 243
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 246:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 248
	 Choosing alt 0 in insn 248:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 249:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 251:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 253:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 256:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 266
	 Choosing alt 0 in insn 266:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 269:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 270:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 272
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 273:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 275:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 277:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 279:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 282:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 285:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 292:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 296:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 297:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 305:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 307
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 310:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 312
	 Choosing alt 0 in insn 312:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 313:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 315:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 317:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 319:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 322:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 324:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=249 from oldreg=228, assigning class GENERAL_REGS to r249
  324: {r249:SI=r249:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  420: r249:SI=r129:SI
    Inserting insn reload after:
  421: r228:SI=r249:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 325
	 Choosing alt 0 in insn 325:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 329:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 332:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 336:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 337:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 345:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 347
	 Choosing alt 0 in insn 347:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 351:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=250 from oldreg=236, assigning class GENERAL_REGS to r250
  351: {r250:SI=r250:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  422: r250:SI=r144:SI
    Inserting insn reload after:
  423: r236:SI=r250:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 352
	 Choosing alt 0 in insn 352:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 355:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 358
	 Choosing alt 0 in insn 358:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 361:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 363:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 365:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 367:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 370:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 372:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=251 from oldreg=242, assigning class GENERAL_REGS to r251
  372: {r251:SI=r251:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  424: r251:SI=r138:SI
    Inserting insn reload after:
  425: r242:SI=r251:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 373
	 Choosing alt 0 in insn 373:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 381:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r248
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23

********** Pseudo live ranges #1: **********

  BB 22
   Insn 401: point = 0
  BB 23
   Insn 404: point = 0
  BB 21
   Insn 400: point = 0
   Insn 399: point = 0
   Insn 398: point = 1
   Insn 394: point = 2
  BB 3
   Insn 408: point = 5
   Insn 26: point = 5
   Insn 25: point = 6
   Insn 24: point = 6
   Insn 23: point = 6
   Insn 22: point = 6
   Insn 21: point = 7
  BB 20
   Insn 389: point = 8
  BB 19
   Insn 386: point = 9
   Insn 385: point = 9
   Insn 384: point = 10
  BB 18
   Insn 382: point = 11
   Insn 381: point = 11
  BB 9
   Insn 413: point = 11
  BB 8
   Insn 286: point = 11
   Insn 285: point = 11
   Insn 283: point = 12
   Insn 282: point = 14
  BB 5
   Insn 410: point = 15
   Insn 229: point = 15
  BB 7
   Insn 279: point = 15
   Insn 278: point = 15
   Insn 277: point = 15
   Insn 276: point = 15
   Insn 275: point = 16
   Insn 274: point = 16
   Insn 273: point = 17
   Insn 272: point = 18
   Insn 271: point = 20
   Insn 270: point = 22
   Insn 269: point = 24
   Insn 268: point = 26
   Insn 267: point = 27
   Insn 266: point = 29
   Insn 265: point = 31
   Insn 264: point = 32
   Insn 263: point = 34
   Insn 262: point = 36
  BB 6
   Insn 260: point = 37
   Insn 259: point = 37
   Insn 258: point = 38
   Insn 257: point = 38
   Insn 256: point = 39
   Insn 255: point = 40
   Insn 254: point = 41
   Insn 253: point = 41
   Insn 252: point = 41
   Insn 251: point = 42
   Insn 250: point = 42
   Insn 249: point = 43
   Insn 248: point = 44
   Insn 247: point = 46
   Insn 246: point = 48
   Insn 245: point = 50
   Insn 244: point = 51
   Insn 243: point = 53
   Insn 242: point = 55
   Insn 241: point = 56
   Insn 240: point = 58
   Insn 239: point = 60
   Insn 238: point = 61
   Insn 237: point = 61
   Insn 236: point = 62
   Insn 235: point = 62
   Insn 234: point = 63
   Insn 233: point = 64
  BB 17
   Insn 378: point = 65
   Insn 377: point = 65
   Insn 375: point = 66
   Insn 374: point = 68
   Insn 373: point = 70
   Insn 425: point = 72
	Hard reg 1 is preferable by r251 with profit 1
   Insn 372: point = 74
   Insn 424: point = 74
   Insn 371: point = 75
   Insn 370: point = 77
  BB 14
   Insn 417: point = 78
   Insn 332: point = 78
  BB 13
   Insn 330: point = 78
   Insn 329: point = 78
   Insn 327: point = 79
   Insn 326: point = 81
   Insn 325: point = 83
   Insn 421: point = 85
	Hard reg 1 is preferable by r249 with profit 1
   Insn 324: point = 87
   Insn 420: point = 87
   Insn 323: point = 88
   Insn 322: point = 90
  BB 10
   Insn 415: point = 91
   Insn 292: point = 91
  BB 4
   Insn 227: point = 91
   Insn 226: point = 91
   Insn 225: point = 92
   Insn 224: point = 93
   Insn 223: point = 93
   Insn 222: point = 94
   Insn 221: point = 94
   Insn 220: point = 94
   Insn 219: point = 96
   Insn 218: point = 97
   Insn 217: point = 97
   Insn 216: point = 98
   Insn 215: point = 98
   Insn 214: point = 99
   Insn 213: point = 100
   Insn 212: point = 102
   Insn 211: point = 103
   Insn 210: point = 103
   Insn 209: point = 103
   Insn 208: point = 104
   Insn 207: point = 104
   Insn 206: point = 105
   Insn 205: point = 106
   Insn 204: point = 108
   Insn 203: point = 109
   Insn 202: point = 109
   Insn 201: point = 110
   Insn 200: point = 110
   Insn 199: point = 111
   Insn 198: point = 112
   Insn 197: point = 113
   Insn 196: point = 113
   Insn 195: point = 113
   Insn 194: point = 114
   Insn 193: point = 114
   Insn 192: point = 115
   Insn 191: point = 116
   Insn 190: point = 118
   Insn 189: point = 119
   Insn 188: point = 119
   Insn 187: point = 120
   Insn 186: point = 120
   Insn 185: point = 121
   Insn 184: point = 122
   Insn 183: point = 123
   Insn 182: point = 123
   Insn 181: point = 123
   Insn 180: point = 124
   Insn 179: point = 124
   Insn 178: point = 125
   Insn 177: point = 126
   Insn 176: point = 128
   Insn 175: point = 129
   Insn 174: point = 129
   Insn 173: point = 130
   Insn 172: point = 130
   Insn 171: point = 131
   Insn 170: point = 132
   Insn 169: point = 133
   Insn 168: point = 133
   Insn 167: point = 133
   Insn 166: point = 134
   Insn 165: point = 134
   Insn 164: point = 135
   Insn 163: point = 136
   Insn 162: point = 138
   Insn 161: point = 139
   Insn 160: point = 139
   Insn 159: point = 140
   Insn 158: point = 140
   Insn 157: point = 141
   Insn 156: point = 142
   Insn 155: point = 143
   Insn 154: point = 143
   Insn 153: point = 143
   Insn 152: point = 144
   Insn 151: point = 144
   Insn 150: point = 145
   Insn 149: point = 146
   Insn 148: point = 148
   Insn 147: point = 149
   Insn 146: point = 149
   Insn 145: point = 150
   Insn 144: point = 150
   Insn 143: point = 151
   Insn 142: point = 152
   Insn 141: point = 153
   Insn 140: point = 153
   Insn 139: point = 153
   Insn 138: point = 154
   Insn 137: point = 154
   Insn 136: point = 155
   Insn 135: point = 156
   Insn 134: point = 158
   Insn 133: point = 159
   Insn 132: point = 159
   Insn 131: point = 160
   Insn 130: point = 160
   Insn 129: point = 161
   Insn 128: point = 162
   Insn 127: point = 163
   Insn 126: point = 163
   Insn 125: point = 163
   Insn 124: point = 164
   Insn 123: point = 164
   Insn 122: point = 165
   Insn 121: point = 166
   Insn 120: point = 168
   Insn 119: point = 169
   Insn 118: point = 169
   Insn 117: point = 170
   Insn 116: point = 170
   Insn 115: point = 171
   Insn 114: point = 172
   Insn 113: point = 173
   Insn 112: point = 173
   Insn 111: point = 173
   Insn 110: point = 174
   Insn 109: point = 174
   Insn 108: point = 175
   Insn 107: point = 176
   Insn 106: point = 178
   Insn 105: point = 179
   Insn 104: point = 179
   Insn 103: point = 180
   Insn 102: point = 180
   Insn 101: point = 181
   Insn 100: point = 182
   Insn 99: point = 183
   Insn 98: point = 183
   Insn 97: point = 183
   Insn 96: point = 184
   Insn 95: point = 184
   Insn 94: point = 185
   Insn 93: point = 186
   Insn 92: point = 188
   Insn 91: point = 189
   Insn 90: point = 189
   Insn 89: point = 190
   Insn 88: point = 190
   Insn 87: point = 191
   Insn 86: point = 192
   Insn 85: point = 193
   Insn 84: point = 193
   Insn 83: point = 193
   Insn 82: point = 194
   Insn 81: point = 194
   Insn 80: point = 195
   Insn 79: point = 196
   Insn 78: point = 198
   Insn 77: point = 199
   Insn 76: point = 199
   Insn 75: point = 200
   Insn 74: point = 200
   Insn 73: point = 201
   Insn 72: point = 202
   Insn 71: point = 203
   Insn 70: point = 204
   Insn 69: point = 206
   Insn 68: point = 207
   Insn 67: point = 207
   Insn 66: point = 208
   Insn 65: point = 210
   Insn 64: point = 212
   Insn 63: point = 214
   Insn 62: point = 215
   Insn 61: point = 217
   Insn 60: point = 218
   Insn 59: point = 220
   Insn 58: point = 222
   Insn 57: point = 223
   Insn 56: point = 224
   Insn 55: point = 226
   Insn 54: point = 227
   Insn 53: point = 227
   Insn 52: point = 228
   Insn 51: point = 230
   Insn 50: point = 232
   Insn 49: point = 234
   Insn 48: point = 235
   Insn 47: point = 237
   Insn 46: point = 238
   Insn 45: point = 240
   Insn 44: point = 242
   Insn 43: point = 243
   Insn 42: point = 243
   Insn 41: point = 243
   Insn 40: point = 244
   Insn 39: point = 244
   Insn 38: point = 245
   Insn 37: point = 246
   Insn 36: point = 247
   Insn 35: point = 247
   Insn 34: point = 248
   Insn 33: point = 248
   Insn 32: point = 249
   Insn 31: point = 250
  BB 2
   Insn 19: point = 251
   Insn 18: point = 251
   Insn 17: point = 251
   Insn 16: point = 252
   Insn 15: point = 253
   Insn 14: point = 253
   Insn 13: point = 254
   Insn 12: point = 254
   Insn 11: point = 255
   Insn 8: point = 255
   Insn 6: point = 257
   Insn 5: point = 257
   Insn 4: point = 257
   Insn 3: point = 257
   Insn 2: point = 257
  BB 12
   Insn 319: point = 257
   Insn 318: point = 257
   Insn 317: point = 257
   Insn 316: point = 257
   Insn 315: point = 258
   Insn 314: point = 258
   Insn 313: point = 259
   Insn 312: point = 260
   Insn 311: point = 262
   Insn 310: point = 264
   Insn 309: point = 266
   Insn 308: point = 267
   Insn 307: point = 269
   Insn 306: point = 271
   Insn 305: point = 272
   Insn 304: point = 274
   Insn 303: point = 276
  BB 11
   Insn 301: point = 277
   Insn 300: point = 277
   Insn 299: point = 278
   Insn 298: point = 278
   Insn 297: point = 279
   Insn 296: point = 280
  BB 16
   Insn 367: point = 281
   Insn 366: point = 281
   Insn 365: point = 281
   Insn 364: point = 281
   Insn 363: point = 282
   Insn 362: point = 282
   Insn 361: point = 283
   Insn 360: point = 284
   Insn 359: point = 286
   Insn 358: point = 288
   Insn 357: point = 290
   Insn 356: point = 292
   Insn 355: point = 293
   Insn 354: point = 295
   Insn 353: point = 297
   Insn 352: point = 299
   Insn 423: point = 301
	Hard reg 2 is preferable by r250 with profit 1
   Insn 351: point = 303
   Insn 422: point = 303
   Insn 350: point = 304
   Insn 349: point = 306
   Insn 348: point = 307
   Insn 347: point = 309
   Insn 346: point = 311
   Insn 345: point = 312
   Insn 344: point = 314
   Insn 343: point = 316
  BB 15
   Insn 341: point = 317
   Insn 340: point = 317
   Insn 339: point = 318
   Insn 338: point = 318
   Insn 337: point = 319
   Insn 336: point = 320
 r83: [8..8] [3..5]
 r84: [251..252]
 r85: [244..246]
 r86: [239..240]
 r87: [236..238]
 r88: [223..235]
 r89: [231..232]
 r90: [229..230]
 r91: [227..228]
 r92: [223..224]
 r93: [219..220]
 r94: [216..218]
 r95: [203..215]
 r96: [211..212]
 r97: [209..210]
 r98: [207..208]
 r99: [203..204]
 r100: [194..196]
 r101: [184..186]
 r102: [174..176]
 r103: [164..166]
 r104: [154..156]
 r105: [144..146]
 r106: [134..136]
 r107: [124..126]
 r108: [114..116]
 r109: [104..106]
 r110: [97..100]
 r111: [93..94]
 r112: [91..92]
 r113: [11..12]
 r114: [57..58]
 r115: [54..56]
 r116: [52..53]
 r117: [45..51]
 r118: [47..48]
 r119: [45..46]
 r120: [42..44]
 r121: [33..34]
 r122: [30..32]
 r123: [28..29]
 r124: [19..27]
 r125: [23..24]
 r126: [21..22]
 r127: [19..20]
 r128: [16..18]
 r129: [84..88]
 r130: [78..79]
 r131: [273..274]
 r132: [270..272]
 r133: [268..269]
 r134: [261..267]
 r135: [263..264]
 r136: [261..262]
 r137: [258..260]
 r138: [71..75]
 r139: [65..66]
 r140: [313..314]
 r141: [310..312]
 r142: [308..309]
 r143: [285..307]
 r144: [300..304]
 r145: [294..295]
 r146: [289..293]
 r147: [289..290]
 r148: [287..288]
 r149: [285..286]
 r150: [282..284]
 r151: [1..2]
 r152: [253..254]
 r153: [6..7]
 r154: [248..250]
 r155: [247..249]
 r156: [243..245]
 r157: [241..242]
 r158: [236..237]
 r159: [233..234]
 r160: [225..226]
 r161: [221..222]
 r162: [216..217]
 r163: [213..214]
 r164: [205..206]
 r165: [200..202]
 r166: [199..201]
 r167: [197..198]
 r168: [193..195]
 r169: [190..192]
 r170: [189..191]
 r171: [187..188]
 r172: [183..185]
 r173: [180..182]
 r174: [179..181]
 r175: [177..178]
 r176: [173..175]
 r177: [170..172]
 r178: [169..171]
 r179: [167..168]
 r180: [163..165]
 r181: [160..162]
 r182: [159..161]
 r183: [157..158]
 r184: [153..155]
 r185: [150..152]
 r186: [149..151]
 r187: [147..148]
 r188: [143..145]
 r189: [140..142]
 r190: [139..141]
 r191: [137..138]
 r192: [133..135]
 r193: [130..132]
 r194: [129..131]
 r195: [127..128]
 r196: [123..125]
 r197: [120..122]
 r198: [119..121]
 r199: [117..118]
 r200: [113..115]
 r201: [110..112]
 r202: [109..111]
 r203: [107..108]
 r204: [103..105]
 r205: [101..102]
 r206: [98..99]
 r207: [95..96]
 r208: [62..64]
 r209: [61..63]
 r210: [59..60]
 r211: [54..55]
 r212: [49..50]
 r213: [41..43]
 r214: [38..40]
 r215: [37..39]
 r216: [35..36]
 r217: [30..31]
 r218: [25..26]
 r219: [15..17]
 r220: [13..14]
 r221: [278..280]
 r222: [277..279]
 r223: [275..276]
 r224: [270..271]
 r225: [265..266]
 r226: [257..259]
 r227: [89..90]
 r228: [84..85]
 r229: [82..83]
 r230: [80..81]
 r231: [318..320]
 r232: [317..319]
 r233: [315..316]
 r234: [310..311]
 r235: [305..306]
 r236: [300..301]
 r237: [298..299]
 r238: [296..297]
 r239: [291..292]
 r240: [281..283]
 r241: [76..77]
 r242: [71..72]
 r243: [69..70]
 r244: [67..68]
 r245: [9..10]
 r247: [255..256]
 r248: [0..0]
 r249: [86..87]
 r250: [302..303]
 r251: [73..74]
Compressing live ranges: from 321 to 242 - 75%
Ranges after the compression:
 r83: [7..7] [3..4]
 r84: [186..187]
 r85: [182..183]
 r86: [178..179]
 r87: [176..177]
 r88: [164..175]
 r89: [172..173]
 r90: [170..171]
 r91: [168..169]
 r92: [164..165]
 r93: [160..161]
 r94: [158..159]
 r95: [146..157]
 r96: [154..155]
 r97: [152..153]
 r98: [150..151]
 r99: [146..147]
 r100: [140..141]
 r101: [134..135]
 r102: [128..129]
 r103: [122..123]
 r104: [116..117]
 r105: [110..111]
 r106: [104..105]
 r107: [98..99]
 r108: [92..93]
 r109: [86..87]
 r110: [82..83]
 r111: [78..79]
 r112: [76..77]
 r113: [10..11]
 r114: [46..47]
 r115: [44..45]
 r116: [42..43]
 r117: [36..41]
 r118: [38..39]
 r119: [36..37]
 r120: [34..35]
 r121: [28..29]
 r122: [26..27]
 r123: [24..25]
 r124: [16..23]
 r125: [20..21]
 r126: [18..19]
 r127: [16..17]
 r128: [14..15]
 r129: [70..73]
 r130: [64..65]
 r131: [204..205]
 r132: [202..203]
 r133: [200..201]
 r134: [194..199]
 r135: [196..197]
 r136: [194..195]
 r137: [192..193]
 r138: [58..61]
 r139: [52..53]
 r140: [236..237]
 r141: [234..235]
 r142: [232..233]
 r143: [212..231]
 r144: [226..229]
 r145: [220..221]
 r146: [216..219]
 r147: [216..217]
 r148: [214..215]
 r149: [212..213]
 r150: [210..211]
 r151: [1..2]
 r152: [188..189]
 r153: [5..6]
 r154: [184..185]
 r155: [184..185]
 r156: [182..183]
 r157: [180..181]
 r158: [176..177]
 r159: [174..175]
 r160: [166..167]
 r161: [162..163]
 r162: [158..159]
 r163: [156..157]
 r164: [148..149]
 r165: [144..145]
 r166: [144..145]
 r167: [142..143]
 r168: [140..141]
 r169: [138..139]
 r170: [138..139]
 r171: [136..137]
 r172: [134..135]
 r173: [132..133]
 r174: [132..133]
 r175: [130..131]
 r176: [128..129]
 r177: [126..127]
 r178: [126..127]
 r179: [124..125]
 r180: [122..123]
 r181: [120..121]
 r182: [120..121]
 r183: [118..119]
 r184: [116..117]
 r185: [114..115]
 r186: [114..115]
 r187: [112..113]
 r188: [110..111]
 r189: [108..109]
 r190: [108..109]
 r191: [106..107]
 r192: [104..105]
 r193: [102..103]
 r194: [102..103]
 r195: [100..101]
 r196: [98..99]
 r197: [96..97]
 r198: [96..97]
 r199: [94..95]
 r200: [92..93]
 r201: [90..91]
 r202: [90..91]
 r203: [88..89]
 r204: [86..87]
 r205: [84..85]
 r206: [82..83]
 r207: [80..81]
 r208: [50..51]
 r209: [50..51]
 r210: [48..49]
 r211: [44..45]
 r212: [40..41]
 r213: [34..35]
 r214: [32..33]
 r215: [32..33]
 r216: [30..31]
 r217: [26..27]
 r218: [22..23]
 r219: [14..15]
 r220: [12..13]
 r221: [208..209]
 r222: [208..209]
 r223: [206..207]
 r224: [202..203]
 r225: [198..199]
 r226: [192..193]
 r227: [74..75]
 r228: [70..71]
 r229: [68..69]
 r230: [66..67]
 r231: [240..241]
 r232: [240..241]
 r233: [238..239]
 r234: [234..235]
 r235: [230..231]
 r236: [226..227]
 r237: [224..225]
 r238: [222..223]
 r239: [218..219]
 r240: [210..211]
 r241: [62..63]
 r242: [58..59]
 r243: [56..57]
 r244: [54..55]
 r245: [8..9]
 r247: [190..191]
 r248: [0..0]
 r249: [72..73]
 r250: [228..229]
 r251: [60..61]

********** Assignment #1: **********

	 Assigning to 249 (cl=GENERAL_REGS, orig=228, freq=3, tfirst=249, tfreq=3)...
	   Assign 1 to reload r249 (freq=3)
	 Assigning to 250 (cl=GENERAL_REGS, orig=236, freq=3, tfirst=250, tfreq=3)...
	   Assign 2 to reload r250 (freq=3)
	 Assigning to 251 (cl=GENERAL_REGS, orig=242, freq=3, tfirst=251, tfreq=3)...
	   Assign 1 to reload r251 (freq=3)
	 Assigning to 247 (cl=INDEX_REGS, orig=247, freq=1, tfirst=247, tfreq=1)...
	   Assign 0 to reload r247 (freq=1)
	 Assigning to 248 (cl=INDEX_REGS, orig=248, freq=1, tfirst=248, tfreq=1)...
	   Assign 3 to reload r248 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 389
changing reg in insn 26
changing reg in insn 394
changing reg in insn 16
changing reg in insn 17
changing reg in insn 37
changing reg in insn 39
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 48
changing reg in insn 57
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 62
changing reg in insn 71
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 79
changing reg in insn 81
changing reg in insn 93
changing reg in insn 95
changing reg in insn 107
changing reg in insn 109
changing reg in insn 121
changing reg in insn 123
changing reg in insn 135
changing reg in insn 137
changing reg in insn 149
changing reg in insn 151
changing reg in insn 163
changing reg in insn 165
changing reg in insn 177
changing reg in insn 179
changing reg in insn 191
changing reg in insn 193
changing reg in insn 205
changing reg in insn 207
changing reg in insn 213
changing reg in insn 217
changing reg in insn 220
changing reg in insn 223
changing reg in insn 225
changing reg in insn 226
changing reg in insn 283
changing reg in insn 285
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 250
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 274
changing reg in insn 323
changing reg in insn 327
changing reg in insn 329
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 314
changing reg in insn 371
changing reg in insn 375
changing reg in insn 377
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 347
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 360
changing reg in insn 350
changing reg in insn 354
changing reg in insn 355
changing reg in insn 355
changing reg in insn 357
changing reg in insn 358
changing reg in insn 359
changing reg in insn 359
changing reg in insn 360
changing reg in insn 360
changing reg in insn 362
changing reg in insn 394
changing reg in insn 398
changing reg in insn 12
changing reg in insn 14
changing reg in insn 21
changing reg in insn 22
changing reg in insn 31
changing reg in insn 33
changing reg in insn 32
changing reg in insn 35
changing reg in insn 38
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 74
changing reg in insn 73
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 86
changing reg in insn 88
changing reg in insn 87
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 100
changing reg in insn 102
changing reg in insn 101
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 111
changing reg in insn 114
changing reg in insn 116
changing reg in insn 115
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 125
changing reg in insn 128
changing reg in insn 130
changing reg in insn 129
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 139
changing reg in insn 142
changing reg in insn 144
changing reg in insn 143
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 153
changing reg in insn 156
changing reg in insn 158
changing reg in insn 157
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 170
changing reg in insn 172
changing reg in insn 171
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 181
changing reg in insn 184
changing reg in insn 186
changing reg in insn 185
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 195
changing reg in insn 198
changing reg in insn 200
changing reg in insn 199
changing reg in insn 202
changing reg in insn 204
changing reg in insn 205
changing reg in insn 206
changing reg in insn 209
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 219
changing reg in insn 220
changing reg in insn 233
changing reg in insn 235
changing reg in insn 234
changing reg in insn 237
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 245
changing reg in insn 246
changing reg in insn 249
changing reg in insn 252
changing reg in insn 255
changing reg in insn 257
changing reg in insn 256
changing reg in insn 259
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 268
changing reg in insn 269
changing reg in insn 273
changing reg in insn 276
changing reg in insn 282
changing reg in insn 283
changing reg in insn 296
changing reg in insn 298
changing reg in insn 297
changing reg in insn 300
changing reg in insn 303
changing reg in insn 304
changing reg in insn 306
changing reg in insn 309
changing reg in insn 310
changing reg in insn 313
changing reg in insn 316
changing reg in insn 322
changing reg in insn 323
changing reg in insn 325
changing reg in insn 326
changing reg in insn 326
changing reg in insn 327
changing reg in insn 336
changing reg in insn 338
changing reg in insn 337
changing reg in insn 340
changing reg in insn 343
changing reg in insn 344
changing reg in insn 346
changing reg in insn 349
changing reg in insn 350
changing reg in insn 352
changing reg in insn 353
changing reg in insn 353
changing reg in insn 354
changing reg in insn 356
changing reg in insn 357
changing reg in insn 361
changing reg in insn 364
changing reg in insn 370
changing reg in insn 371
changing reg in insn 373
changing reg in insn 374
changing reg in insn 374
changing reg in insn 375
changing reg in insn 384
changing reg in insn 385
changing reg in insn 8
changing reg in insn 399
deleting insn with uid = 33.
deleting insn with uid = 39.
deleting insn with uid = 74.
deleting insn with uid = 81.
deleting insn with uid = 88.
deleting insn with uid = 95.
deleting insn with uid = 102.
deleting insn with uid = 109.
deleting insn with uid = 116.
deleting insn with uid = 123.
deleting insn with uid = 130.
deleting insn with uid = 137.
deleting insn with uid = 144.
deleting insn with uid = 151.
deleting insn with uid = 158.
deleting insn with uid = 165.
deleting insn with uid = 172.
deleting insn with uid = 179.
deleting insn with uid = 186.
deleting insn with uid = 193.
deleting insn with uid = 200.
deleting insn with uid = 207.
deleting insn with uid = 235.
deleting insn with uid = 250.
deleting insn with uid = 257.
deleting insn with uid = 274.
deleting insn with uid = 298.
deleting insn with uid = 314.
deleting insn with uid = 421.
deleting insn with uid = 338.
deleting insn with uid = 423.
deleting insn with uid = 362.
deleting insn with uid = 425.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 161.
verify found no changes in insn with uid = 169.
verify found no changes in insn with uid = 175.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 197.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 211.
verify found no changes in insn with uid = 218.
verify found no changes in insn with uid = 224.
verify found no changes in insn with uid = 238.
verify found no changes in insn with uid = 254.
verify found no changes in insn with uid = 260.
verify found no changes in insn with uid = 278.
verify found no changes in insn with uid = 301.
verify found no changes in insn with uid = 318.
verify found no changes in insn with uid = 341.
verify found no changes in insn with uid = 366.
verify found no changes in insn with uid = 386.
verify found no changes in insn with uid = 401.


int read_nmr_text(char*, float**, Header*, float**, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={167d,134u} r1={92d,54u,6e} r2={43d,5u} r3={3d,2u} r4={73d,35u} r5={76d,38u} r6={1d,130u} r7={1d,61u} r8={38d} r9={38d} r10={38d} r11={38d} r12={38d} r13={38d} r14={38d} r15={38d} r17={124d,7u} r18={38d} r19={38d} r20={1d,1u,18e} r21={39d} r22={39d} r23={39d} r24={39d} r25={39d} r26={39d} r27={39d} r28={39d} r29={38d} r30={38d} r31={38d} r32={38d} r33={38d} r34={38d} r35={38d} r36={38d} r37={39d,1u} r38={39d} r39={38d} r40={38d} r45={38d} r46={38d} r47={38d} r48={38d} r49={38d} r50={38d} r51={38d} r52={38d} r53={38d} r54={38d} r55={38d} r56={38d} r57={38d} r58={38d} r59={38d} r60={38d} r61={38d} r62={38d} r63={38d} r64={38d} r65={38d} r66={38d} r67={38d} r68={38d} r69={38d} r70={38d} r71={38d} r72={38d} r73={38d} r74={38d} r75={38d} r76={38d} 
;;    total ref usage 3439{2947d,468u,24e} in 331{293 regular + 38 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 152
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 filename+0 S8 A64])
        (reg:DI 5 di [ filename ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])
        (reg:DI 4 si [ out_data ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])
        (reg:DI 1 dx [ header ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 scratch_data+0 S8 A64])
        (reg:DI 2 cx [ scratch_data ])) fmtext_o.cpp:374 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])
        (reg:SI 37 r8 [ fn ])) fmtext_o.cpp:374 90 {*movsi_internal}
     (nil))
(note 7 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 7 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.6624+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [247])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:374 964 {stack_tls_protect_set_di}
     (nil))
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:376 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 filename+0 S8 A64])) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2b8e1bfee688 *.LC22>)) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [152])) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(call_insn 15 14 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b8e1bc4bd00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:382 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [orig:84 D.6615 ] [84])
        (reg:DI 0 ax)) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:84 D.6615 ] [84])) fmtext_o.cpp:382 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:385 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) fmtext_o.cpp:385 596 {*jcc_1}
     (nil)
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 153
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 filename+0 S8 A64])) fmtext_o.cpp:386 89 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:DI 4 si)
        (reg:DI 0 ax [153])) fmtext_o.cpp:386 89 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x2b8e1bfee720 *.LC23>)) fmtext_o.cpp:386 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:386 93 {*movqi_internal}
     (nil))
(call_insn 25 24 26 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b8e1ba95e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:386 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 26 25 408 3 (set (reg:SI 0 ax [orig:83 D.6614 ] [83])
        (const_int 0 [0])) fmtext_o.cpp:387 90 {*movsi_internal}
     (nil))
(jump_insn 408 26 409 3 (set (pc)
        (label_ref 392)) fmtext_o.cpp:387 636 {jump}
     (nil)
 -> 392)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 409 408 29)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207
(code_label 29 409 30 4 78 "" [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg:DI 1 dx [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:390 89 {*movdi_internal}
     (nil))
(insn 32 31 34 4 (parallel [
            (set (reg:DI 0 ax [155])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:390 221 {*adddi_1}
     (nil))
(insn 34 32 35 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:390 90 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [155])) fmtext_o.cpp:390 89 {*movdi_internal}
     (nil))
(call_insn 36 35 37 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:390 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 37 36 38 4 (set (reg/f:DI 1 dx [orig:85 D.6616 ] [85])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:391 89 {*movdi_internal}
     (nil))
(insn 38 37 40 4 (parallel [
            (set (reg:DI 0 ax [156])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:391 221 {*adddi_1}
     (nil))
(insn 40 38 41 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b8e1bfee7b8 *.LC24>)) fmtext_o.cpp:391 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [156])) fmtext_o.cpp:391 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:391 93 {*movqi_internal}
     (nil))
(call_insn 43 42 44 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:391 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 44 43 45 4 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 0 ax [orig:86 D.6617 ] [86])
        (sign_extend:DI (reg:SI 0 ax [157]))) fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 1 dx [orig:87 D.6617 ] [87])
                (ashift:DI (reg:DI 0 ax [orig:86 D.6617 ] [86])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:393 497 {*ashldi3_1}
     (nil))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg/f:DI 3 bx [orig:88 D.6618 ] [88])
                (plus:DI (reg:DI 1 dx [orig:87 D.6617 ] [87])
                    (reg/f:DI 0 ax [158])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:393 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:87 D.6617 ] [87]))
        (nil)))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:SI 0 ax [orig:89 D.6614 ] [89])
        (mem/j:SI (reg/f:DI 0 ax [159]) [0 header_10(D)->number_points+0 S4 A64])) fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 0 ax [orig:90 D.6617 ] [90])
        (sign_extend:DI (reg:SI 0 ax [orig:89 D.6614 ] [89]))) fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 4 (parallel [
            (set (reg:DI 0 ax [orig:91 D.6617 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 D.6617 ] [90])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:393 497 {*ashldi3_1}
     (nil))
(insn 53 52 54 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:91 D.6617 ] [91])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(call_insn 54 53 55 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:393 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 55 54 56 4 (set (reg/f:DI 0 ax [160])
        (reg:DI 0 ax)) fmtext_o.cpp:393 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [160])
        (nil)))
(insn 56 55 57 4 (set (reg/f:DI 0 ax [orig:92 D.6619 ] [92])
        (reg/f:DI 0 ax [160])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 57 56 58 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:88 D.6618 ] [88]) [0 *_16+0 S8 A64])
        (reg/f:DI 0 ax [orig:92 D.6619 ] [92])) fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (set (reg:SI 0 ax [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:394 90 {*movsi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DI 0 ax [orig:93 D.6617 ] [93])
        (sign_extend:DI (reg:SI 0 ax [161]))) fmtext_o.cpp:394 142 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 4 (parallel [
            (set (reg:DI 1 dx [orig:94 D.6617 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.6617 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:394 497 {*ashldi3_1}
     (nil))
(insn 61 60 62 4 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 scratch_data+0 S8 A64])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg/f:DI 3 bx [orig:95 D.6618 ] [95])
                (plus:DI (reg:DI 1 dx [orig:94 D.6617 ] [94])
                    (reg/f:DI 0 ax [162])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:394 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -144 [0xffffffffffffff70])) [0 scratch_data+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.6617 ] [94]))
        (nil)))
(insn 63 62 64 4 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:SI 0 ax [orig:96 D.6614 ] [96])
        (mem/j:SI (reg/f:DI 0 ax [163]) [0 header_10(D)->number_points+0 S4 A64])) fmtext_o.cpp:394 90 {*movsi_internal}
     (nil))
(insn 65 64 66 4 (set (reg:DI 0 ax [orig:97 D.6617 ] [97])
        (sign_extend:DI (reg:SI 0 ax [orig:96 D.6614 ] [96]))) fmtext_o.cpp:394 142 {*extendsidi2_rex64}
     (nil))
(insn 66 65 67 4 (parallel [
            (set (reg:DI 0 ax [orig:98 D.6617 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.6617 ] [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:394 497 {*ashldi3_1}
     (nil))
(insn 67 66 68 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:98 D.6617 ] [98])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(call_insn 68 67 69 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:394 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 69 68 70 4 (set (reg/f:DI 0 ax [164])
        (reg:DI 0 ax)) fmtext_o.cpp:394 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [164])
        (nil)))
(insn 70 69 71 4 (set (reg/f:DI 0 ax [orig:99 D.6619 ] [99])
        (reg/f:DI 0 ax [164])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:95 D.6618 ] [95]) [0 *_24+0 S8 A64])
        (reg/f:DI 0 ax [orig:99 D.6619 ] [99])) fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 1 dx [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:396 89 {*movdi_internal}
     (nil))
(insn 73 72 75 4 (parallel [
            (set (reg:DI 0 ax [166])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:396 221 {*adddi_1}
     (nil))
(insn 75 73 76 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:396 90 {*movsi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [166])) fmtext_o.cpp:396 89 {*movdi_internal}
     (nil))
(call_insn 77 76 78 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:396 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 78 77 79 4 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:397 89 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (parallel [
            (set (reg/f:DI 1 dx [orig:100 D.6616 ] [100])
                (plus:DI (reg/f:DI 0 ax [167])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:397 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 80 79 82 4 (parallel [
            (set (reg:DI 0 ax [168])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:397 221 {*adddi_1}
     (nil))
(insn 82 80 83 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b8e1bfee7b8 *.LC24>)) fmtext_o.cpp:397 89 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [168])) fmtext_o.cpp:397 89 {*movdi_internal}
     (nil))
(insn 84 83 85 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:397 93 {*movqi_internal}
     (nil))
(call_insn 85 84 86 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:397 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 86 85 87 4 (set (reg:DI 1 dx [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:399 89 {*movdi_internal}
     (nil))
(insn 87 86 89 4 (parallel [
            (set (reg:DI 0 ax [170])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:399 221 {*adddi_1}
     (nil))
(insn 89 87 90 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:399 90 {*movsi_internal}
     (nil))
(insn 90 89 91 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [170])) fmtext_o.cpp:399 89 {*movdi_internal}
     (nil))
(call_insn 91 90 92 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:399 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 92 91 93 4 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:400 89 {*movdi_internal}
     (nil))
(insn 93 92 94 4 (parallel [
            (set (reg/f:DI 1 dx [orig:101 D.6620 ] [101])
                (plus:DI (reg/f:DI 0 ax [171])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:400 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 94 93 96 4 (parallel [
            (set (reg:DI 0 ax [172])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:400 221 {*adddi_1}
     (nil))
(insn 96 94 97 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b8e1bfee850 *.LC25>)) fmtext_o.cpp:400 89 {*movdi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [172])) fmtext_o.cpp:400 89 {*movdi_internal}
     (nil))
(insn 98 97 99 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:400 93 {*movqi_internal}
     (nil))
(call_insn 99 98 100 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:400 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 100 99 101 4 (set (reg:DI 1 dx [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:402 89 {*movdi_internal}
     (nil))
(insn 101 100 103 4 (parallel [
            (set (reg:DI 0 ax [174])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:402 221 {*adddi_1}
     (nil))
(insn 103 101 104 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:402 90 {*movsi_internal}
     (nil))
(insn 104 103 105 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [174])) fmtext_o.cpp:402 89 {*movdi_internal}
     (nil))
(call_insn 105 104 106 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:402 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 106 105 107 4 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:403 89 {*movdi_internal}
     (nil))
(insn 107 106 108 4 (parallel [
            (set (reg/f:DI 1 dx [orig:102 D.6621 ] [102])
                (plus:DI (reg/f:DI 0 ax [175])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:403 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 108 107 110 4 (parallel [
            (set (reg:DI 0 ax [176])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:403 221 {*adddi_1}
     (nil))
(insn 110 108 111 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x2b8e1bfee8e8 *.LC26>)) fmtext_o.cpp:403 89 {*movdi_internal}
     (nil))
(insn 111 110 112 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [176])) fmtext_o.cpp:403 89 {*movdi_internal}
     (nil))
(insn 112 111 113 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:403 93 {*movqi_internal}
     (nil))
(call_insn 113 112 114 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:403 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 114 113 115 4 (set (reg:DI 1 dx [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:405 89 {*movdi_internal}
     (nil))
(insn 115 114 117 4 (parallel [
            (set (reg:DI 0 ax [178])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:405 221 {*adddi_1}
     (nil))
(insn 117 115 118 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:405 90 {*movsi_internal}
     (nil))
(insn 118 117 119 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [178])) fmtext_o.cpp:405 89 {*movdi_internal}
     (nil))
(call_insn 119 118 120 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:405 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 120 119 121 4 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:406 89 {*movdi_internal}
     (nil))
(insn 121 120 122 4 (parallel [
            (set (reg/f:DI 1 dx [orig:103 D.6616 ] [103])
                (plus:DI (reg/f:DI 0 ax [179])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:406 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 122 121 124 4 (parallel [
            (set (reg:DI 0 ax [180])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:406 221 {*adddi_1}
     (nil))
(insn 124 122 125 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b8e1bfee7b8 *.LC24>)) fmtext_o.cpp:406 89 {*movdi_internal}
     (nil))
(insn 125 124 126 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [180])) fmtext_o.cpp:406 89 {*movdi_internal}
     (nil))
(insn 126 125 127 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:406 93 {*movqi_internal}
     (nil))
(call_insn 127 126 128 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:406 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 128 127 129 4 (set (reg:DI 1 dx [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 129 128 131 4 (parallel [
            (set (reg:DI 0 ax [182])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:408 221 {*adddi_1}
     (nil))
(insn 131 129 132 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:408 90 {*movsi_internal}
     (nil))
(insn 132 131 133 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [182])) fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(call_insn 133 132 134 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:408 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 134 133 135 4 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 135 134 136 4 (parallel [
            (set (reg/f:DI 1 dx [orig:104 D.6622 ] [104])
                (plus:DI (reg/f:DI 0 ax [183])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:409 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 28 [0x1c]))
        (nil)))
(insn 136 135 138 4 (parallel [
            (set (reg:DI 0 ax [184])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:409 221 {*adddi_1}
     (nil))
(insn 138 136 139 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b8e1bfee7b8 *.LC24>)) fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 139 138 140 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [184])) fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 140 139 141 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:409 93 {*movqi_internal}
     (nil))
(call_insn 141 140 142 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:409 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 142 141 143 4 (set (reg:DI 1 dx [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 143 142 145 4 (parallel [
            (set (reg:DI 0 ax [186])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:411 221 {*adddi_1}
     (nil))
(insn 145 143 146 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:411 90 {*movsi_internal}
     (nil))
(insn 146 145 147 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [186])) fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(call_insn 147 146 148 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:411 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 148 147 149 4 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(insn 149 148 150 4 (parallel [
            (set (reg/f:DI 1 dx [orig:105 D.6622 ] [105])
                (plus:DI (reg/f:DI 0 ax [187])
                    (const_int 108 [0x6c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:412 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 108 [0x6c]))
        (nil)))
(insn 150 149 152 4 (parallel [
            (set (reg:DI 0 ax [188])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:412 221 {*adddi_1}
     (nil))
(insn 152 150 153 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2b8e1bfee980 *.LC27>)) fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(insn 153 152 154 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [188])) fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(insn 154 153 155 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:412 93 {*movqi_internal}
     (nil))
(call_insn 155 154 156 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:412 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 156 155 157 4 (set (reg:DI 1 dx [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 157 156 159 4 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:414 221 {*adddi_1}
     (nil))
(insn 159 157 160 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:414 90 {*movsi_internal}
     (nil))
(insn 160 159 161 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [190])) fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(call_insn 161 160 162 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:414 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 162 161 163 4 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(insn 163 162 164 4 (parallel [
            (set (reg/f:DI 1 dx [orig:106 D.6622 ] [106])
                (plus:DI (reg/f:DI 0 ax [191])
                    (const_int 188 [0xbc])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:415 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 188 [0xbc]))
        (nil)))
(insn 164 163 166 4 (parallel [
            (set (reg:DI 0 ax [192])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:415 221 {*adddi_1}
     (nil))
(insn 166 164 167 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2b8e1bfee980 *.LC27>)) fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(insn 167 166 168 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [192])) fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(insn 168 167 169 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:415 93 {*movqi_internal}
     (nil))
(call_insn 169 168 170 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:415 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 170 169 171 4 (set (reg:DI 1 dx [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:417 89 {*movdi_internal}
     (nil))
(insn 171 170 173 4 (parallel [
            (set (reg:DI 0 ax [194])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:417 221 {*adddi_1}
     (nil))
(insn 173 171 174 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:417 90 {*movsi_internal}
     (nil))
(insn 174 173 175 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [194])) fmtext_o.cpp:417 89 {*movdi_internal}
     (nil))
(call_insn 175 174 176 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:417 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 176 175 177 4 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 177 176 178 4 (parallel [
            (set (reg/f:DI 1 dx [orig:107 D.6622 ] [107])
                (plus:DI (reg/f:DI 0 ax [195])
                    (const_int 268 [0x10c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:418 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 268 [0x10c]))
        (nil)))
(insn 178 177 180 4 (parallel [
            (set (reg:DI 0 ax [196])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:418 221 {*adddi_1}
     (nil))
(insn 180 178 181 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2b8e1bfee980 *.LC27>)) fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 181 180 182 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [196])) fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 182 181 183 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:418 93 {*movqi_internal}
     (nil))
(call_insn 183 182 184 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:418 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 184 183 185 4 (set (reg:DI 1 dx [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:420 89 {*movdi_internal}
     (nil))
(insn 185 184 187 4 (parallel [
            (set (reg:DI 0 ax [198])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:420 221 {*adddi_1}
     (nil))
(insn 187 185 188 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:420 90 {*movsi_internal}
     (nil))
(insn 188 187 189 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [198])) fmtext_o.cpp:420 89 {*movdi_internal}
     (nil))
(call_insn 189 188 190 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:420 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 190 189 191 4 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:421 89 {*movdi_internal}
     (nil))
(insn 191 190 192 4 (parallel [
            (set (reg/f:DI 1 dx [orig:108 D.6622 ] [108])
                (plus:DI (reg/f:DI 0 ax [199])
                    (const_int 348 [0x15c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:421 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 348 [0x15c]))
        (nil)))
(insn 192 191 194 4 (parallel [
            (set (reg:DI 0 ax [200])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:421 221 {*adddi_1}
     (nil))
(insn 194 192 195 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2b8e1bfee980 *.LC27>)) fmtext_o.cpp:421 89 {*movdi_internal}
     (nil))
(insn 195 194 196 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [200])) fmtext_o.cpp:421 89 {*movdi_internal}
     (nil))
(insn 196 195 197 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:421 93 {*movqi_internal}
     (nil))
(call_insn 197 196 198 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:421 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 198 197 199 4 (set (reg:DI 1 dx [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:423 89 {*movdi_internal}
     (nil))
(insn 199 198 201 4 (parallel [
            (set (reg:DI 0 ax [202])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:423 221 {*adddi_1}
     (nil))
(insn 201 199 202 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:423 90 {*movsi_internal}
     (nil))
(insn 202 201 203 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [202])) fmtext_o.cpp:423 89 {*movdi_internal}
     (nil))
(call_insn 203 202 204 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:423 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 204 203 205 4 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:424 89 {*movdi_internal}
     (nil))
(insn 205 204 206 4 (parallel [
            (set (reg/f:DI 1 dx [orig:109 D.6620 ] [109])
                (plus:DI (reg/f:DI 0 ax [203])
                    (const_int 428 [0x1ac])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:424 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 428 [0x1ac]))
        (nil)))
(insn 206 205 208 4 (parallel [
            (set (reg:DI 0 ax [204])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:424 221 {*adddi_1}
     (nil))
(insn 208 206 209 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b8e1bfee850 *.LC25>)) fmtext_o.cpp:424 89 {*movdi_internal}
     (nil))
(insn 209 208 210 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [204])) fmtext_o.cpp:424 89 {*movdi_internal}
     (nil))
(insn 210 209 211 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:424 93 {*movqi_internal}
     (nil))
(call_insn 211 210 212 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:424 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 212 211 213 4 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:426 89 {*movdi_internal}
     (nil))
(insn 213 212 214 4 (parallel [
            (set (reg/f:DI 2 cx [orig:110 D.6622 ] [110])
                (plus:DI (reg/f:DI 0 ax [205])
                    (const_int 432 [0x1b0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:426 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 432 [0x1b0]))
        (nil)))
(insn 214 213 215 4 (set (reg:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:426 89 {*movdi_internal}
     (nil))
(insn 215 214 216 4 (set (reg:DI 1 dx)
        (reg:DI 0 ax [206])) fmtext_o.cpp:426 89 {*movdi_internal}
     (nil))
(insn 216 215 217 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:426 90 {*movsi_internal}
     (nil))
(insn 217 216 218 4 (set (reg:DI 5 di)
        (reg/f:DI 2 cx [orig:110 D.6622 ] [110])) fmtext_o.cpp:426 89 {*movdi_internal}
     (nil))
(call_insn 218 217 219 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:426 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 219 218 220 4 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(insn 220 219 221 4 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.6622 ] [111])
                (plus:DI (reg/f:DI 0 ax [207])
                    (const_int 348 [0x15c])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:428 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 header+0 S8 A64])
            (const_int 348 [0x15c]))
        (nil)))
(insn 221 220 222 4 (set (reg:DI 1 dx)
        (const_int 3 [0x3])) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(insn 222 221 223 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x2b8e1bfeea18 *.LC28>)) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(insn 223 222 224 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:111 D.6622 ] [111])) fmtext_o.cpp:428 89 {*movdi_internal}
     (nil))
(call_insn/i 224 223 225 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strncmp") [flags 0x41]  <function_decl 0x2b8e1ba8fb00 strncmp>) [0 __builtin_strncmp S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:428 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 225 224 226 4 (set (reg:SI 0 ax [orig:112 D.6614 ] [112])
        (reg:SI 0 ax)) fmtext_o.cpp:428 90 {*movsi_internal}
     (nil))
(insn 226 225 227 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:112 D.6614 ] [112])
            (const_int 0 [0]))) fmtext_o.cpp:428 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 227 226 228 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 290)
            (pc))) fmtext_o.cpp:428 596 {*jcc_1}
     (nil)
 -> 290)
;;  succ:       5 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 228 227 229 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 410 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:429 90 {*movsi_internal}
     (nil))
(jump_insn 410 229 411 5 (set (pc)
        (label_ref 280)) fmtext_o.cpp:429 636 {jump}
     (nil)
 -> 280)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 411 410 284)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 114 115 116 117 118 119 120 208 209 210 211 212 213 214 215
(code_label 284 411 232 6 82 "" [1 uses])
(note 232 284 233 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 234 6 (set (reg:DI 1 dx [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:430 89 {*movdi_internal}
     (nil))
(insn 234 233 236 6 (parallel [
            (set (reg:DI 0 ax [209])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:430 221 {*adddi_1}
     (nil))
(insn 236 234 237 6 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:430 90 {*movsi_internal}
     (nil))
(insn 237 236 238 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [209])) fmtext_o.cpp:430 89 {*movdi_internal}
     (nil))
(call_insn 238 237 239 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:430 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 239 238 240 6 (set (reg:SI 0 ax [210])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:431 90 {*movsi_internal}
     (nil))
(insn 240 239 241 6 (set (reg:DI 0 ax [orig:114 D.6617 ] [114])
        (sign_extend:DI (reg:SI 0 ax [210]))) fmtext_o.cpp:431 142 {*extendsidi2_rex64}
     (nil))
(insn 241 240 242 6 (parallel [
            (set (reg:DI 1 dx [orig:115 D.6617 ] [115])
                (ashift:DI (reg:DI 0 ax [orig:114 D.6617 ] [114])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 497 {*ashldi3_1}
     (nil))
(insn 242 241 243 6 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])) fmtext_o.cpp:431 89 {*movdi_internal}
     (nil))
(insn 243 242 244 6 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.6618 ] [116])
                (plus:DI (reg/f:DI 0 ax [211])
                    (reg:DI 1 dx [orig:115 D.6617 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:115 D.6617 ] [115]))
        (nil)))
(insn 244 243 245 6 (set (reg/f:DI 0 ax [orig:117 D.6620 ] [117])
        (mem/f:DI (reg/f:DI 0 ax [orig:116 D.6618 ] [116]) [0 *_46+0 S8 A64])) fmtext_o.cpp:431 89 {*movdi_internal}
     (nil))
(insn 245 244 246 6 (set (reg:SI 1 dx [212])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])) fmtext_o.cpp:431 90 {*movsi_internal}
     (nil))
(insn 246 245 247 6 (set (reg:DI 1 dx [orig:118 D.6617 ] [118])
        (sign_extend:DI (reg:SI 1 dx [212]))) fmtext_o.cpp:431 142 {*extendsidi2_rex64}
     (nil))
(insn 247 246 248 6 (parallel [
            (set (reg:DI 1 dx [orig:119 D.6617 ] [119])
                (ashift:DI (reg:DI 1 dx [orig:118 D.6617 ] [118])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 497 {*ashldi3_1}
     (nil))
(insn 248 247 249 6 (parallel [
            (set (reg/f:DI 1 dx [orig:120 D.6620 ] [120])
                (plus:DI (reg:DI 1 dx [orig:119 D.6617 ] [119])
                    (reg/f:DI 0 ax [orig:117 D.6620 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 221 {*adddi_1}
     (nil))
(insn 249 248 251 6 (parallel [
            (set (reg:DI 0 ax [213])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:431 221 {*adddi_1}
     (nil))
(insn 251 249 252 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b8e1bfee850 *.LC25>)) fmtext_o.cpp:431 89 {*movdi_internal}
     (nil))
(insn 252 251 253 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [213])) fmtext_o.cpp:431 89 {*movdi_internal}
     (nil))
(insn 253 252 254 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:431 93 {*movqi_internal}
     (nil))
(call_insn 254 253 255 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:431 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 255 254 256 6 (set (reg:DI 1 dx [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:432 89 {*movdi_internal}
     (nil))
(insn 256 255 258 6 (parallel [
            (set (reg:DI 0 ax [215])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:432 221 {*adddi_1}
     (nil))
(insn 258 256 259 6 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:432 90 {*movsi_internal}
     (nil))
(insn 259 258 260 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [215])) fmtext_o.cpp:432 89 {*movdi_internal}
     (nil))
(call_insn 260 259 261 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:432 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 121 122 123 124 125 126 127 128 216 217 218 219
(note 261 260 262 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 262 261 263 7 (set (reg:SI 0 ax [216])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:433 90 {*movsi_internal}
     (nil))
(insn 263 262 264 7 (set (reg:DI 0 ax [orig:121 D.6617 ] [121])
        (sign_extend:DI (reg:SI 0 ax [216]))) fmtext_o.cpp:433 142 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 7 (parallel [
            (set (reg:DI 1 dx [orig:122 D.6617 ] [122])
                (ashift:DI (reg:DI 0 ax [orig:121 D.6617 ] [121])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 497 {*ashldi3_1}
     (nil))
(insn 265 264 266 7 (set (reg/f:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])) fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 266 265 267 7 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.6618 ] [123])
                (plus:DI (reg/f:DI 0 ax [217])
                    (reg:DI 1 dx [orig:122 D.6617 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:122 D.6617 ] [122]))
        (nil)))
(insn 267 266 268 7 (set (reg/f:DI 0 ax [orig:124 D.6620 ] [124])
        (mem/f:DI (reg/f:DI 0 ax [orig:123 D.6618 ] [123]) [0 *_53+0 S8 A64])) fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 268 267 269 7 (set (reg:SI 1 dx [218])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])) fmtext_o.cpp:433 90 {*movsi_internal}
     (nil))
(insn 269 268 270 7 (set (reg:DI 1 dx [orig:125 D.6623 ] [125])
        (sign_extend:DI (reg:SI 1 dx [218]))) fmtext_o.cpp:433 142 {*extendsidi2_rex64}
     (nil))
(insn 270 269 271 7 (parallel [
            (set (reg:DI 1 dx [orig:126 D.6623 ] [126])
                (plus:DI (reg:DI 1 dx [orig:125 D.6623 ] [125])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 221 {*adddi_1}
     (nil))
(insn 271 270 272 7 (parallel [
            (set (reg:DI 1 dx [orig:127 D.6623 ] [127])
                (ashift:DI (reg:DI 1 dx [orig:126 D.6623 ] [126])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 497 {*ashldi3_1}
     (nil))
(insn 272 271 273 7 (parallel [
            (set (reg/f:DI 1 dx [orig:128 D.6620 ] [128])
                (plus:DI (reg:DI 1 dx [orig:127 D.6623 ] [127])
                    (reg/f:DI 0 ax [orig:124 D.6620 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 221 {*adddi_1}
     (nil))
(insn 273 272 275 7 (parallel [
            (set (reg:DI 0 ax [219])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:433 221 {*adddi_1}
     (nil))
(insn 275 273 276 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b8e1bfee850 *.LC25>)) fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 276 275 277 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [219])) fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 277 276 278 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:433 93 {*movqi_internal}
     (nil))
(call_insn 278 277 279 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:433 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 279 278 280 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:429 220 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 220
(code_label 280 279 281 8 81 "" [1 uses])
(note 281 280 282 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 282 281 283 8 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 283 282 285 8 (set (reg:SI 0 ax [orig:113 D.6614 ] [113])
        (mem/j:SI (reg/f:DI 0 ax [220]) [0 header_10(D)->number_points+0 S4 A64])) fmtext_o.cpp:429 90 {*movsi_internal}
     (nil))
(insn 285 283 286 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:113 D.6614 ] [113])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32]))) fmtext_o.cpp:429 7 {*cmpsi_1}
     (nil))
(jump_insn 286 285 412 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 284)
            (pc))) fmtext_o.cpp:429 596 {*jcc_1}
     (nil)
 -> 284)
;;  succ:       6
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 412 286 413 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 413 412 414 9 (set (pc)
        (label_ref 379)) 636 {jump}
     (nil)
 -> 379)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 414 413 290)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 290 414 291 10 80 "" [1 uses])
(note 291 290 292 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 292 291 415 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
(jump_insn 415 292 416 10 (set (pc)
        (label_ref 320)) fmtext_o.cpp:437 636 {jump}
     (nil)
 -> 320)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 416 415 328)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 221 222
(code_label 328 416 295 11 85 "" [1 uses])
(note 295 328 296 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 296 295 297 11 (set (reg:DI 1 dx [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(insn 297 296 299 11 (parallel [
            (set (reg:DI 0 ax [222])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:438 221 {*adddi_1}
     (nil))
(insn 299 297 300 11 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:438 90 {*movsi_internal}
     (nil))
(insn 300 299 301 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [222])) fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(call_insn 301 300 302 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:438 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 131 132 133 134 135 136 137 223 224 225 226
(note 302 301 303 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 303 302 304 12 (set (reg:SI 0 ax [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:439 90 {*movsi_internal}
     (nil))
(insn 304 303 305 12 (set (reg:DI 0 ax [orig:131 D.6617 ] [131])
        (sign_extend:DI (reg:SI 0 ax [223]))) fmtext_o.cpp:439 142 {*extendsidi2_rex64}
     (nil))
(insn 305 304 306 12 (parallel [
            (set (reg:DI 1 dx [orig:132 D.6617 ] [132])
                (ashift:DI (reg:DI 0 ax [orig:131 D.6617 ] [131])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 497 {*ashldi3_1}
     (nil))
(insn 306 305 307 12 (set (reg/f:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])) fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 307 306 308 12 (parallel [
            (set (reg/f:DI 0 ax [orig:133 D.6618 ] [133])
                (plus:DI (reg/f:DI 0 ax [224])
                    (reg:DI 1 dx [orig:132 D.6617 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:132 D.6617 ] [132]))
        (nil)))
(insn 308 307 309 12 (set (reg/f:DI 0 ax [orig:134 D.6620 ] [134])
        (mem/f:DI (reg/f:DI 0 ax [orig:133 D.6618 ] [133]) [0 *_65+0 S8 A64])) fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 309 308 310 12 (set (reg:SI 1 dx [225])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])) fmtext_o.cpp:439 90 {*movsi_internal}
     (nil))
(insn 310 309 311 12 (set (reg:DI 1 dx [orig:135 D.6617 ] [135])
        (sign_extend:DI (reg:SI 1 dx [225]))) fmtext_o.cpp:439 142 {*extendsidi2_rex64}
     (nil))
(insn 311 310 312 12 (parallel [
            (set (reg:DI 1 dx [orig:136 D.6617 ] [136])
                (ashift:DI (reg:DI 1 dx [orig:135 D.6617 ] [135])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 497 {*ashldi3_1}
     (nil))
(insn 312 311 313 12 (parallel [
            (set (reg/f:DI 1 dx [orig:137 D.6620 ] [137])
                (plus:DI (reg:DI 1 dx [orig:136 D.6617 ] [136])
                    (reg/f:DI 0 ax [orig:134 D.6620 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 221 {*adddi_1}
     (nil))
(insn 313 312 315 12 (parallel [
            (set (reg:DI 0 ax [226])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:439 221 {*adddi_1}
     (nil))
(insn 315 313 316 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b8e1bfee850 *.LC25>)) fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 316 315 317 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [226])) fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 317 316 318 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:439 93 {*movqi_internal}
     (nil))
(call_insn 318 317 319 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:439 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 319 318 320 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 220 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 227 228 229 230
(code_label 320 319 321 13 84 "" [1 uses])
(note 321 320 322 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 322 321 323 13 (set (reg/f:DI 0 ax [227])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 323 322 420 13 (set (reg:SI 0 ax [orig:129 D.6614 ] [129])
        (mem/j:SI (reg/f:DI 0 ax [227]) [0 header_10(D)->number_points+0 S4 A64])) fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
(insn 420 323 324 13 (set (reg:SI 1 dx [228])
        (reg:SI 0 ax [orig:129 D.6614 ] [129])) fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
(insn 324 420 325 13 (parallel [
            (set (reg:SI 1 dx [228])
                (lshiftrt:SI (reg:SI 1 dx [228])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 529 {*lshrsi3_1}
     (nil))
(insn 325 324 326 13 (parallel [
            (set (reg:SI 0 ax [229])
                (plus:SI (reg:SI 0 ax [orig:129 D.6614 ] [129])
                    (reg:SI 1 dx [228])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 220 {*addsi_1}
     (nil))
(insn 326 325 327 13 (parallel [
            (set (reg:SI 0 ax [230])
                (ashiftrt:SI (reg:SI 0 ax [229])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:437 530 {*ashrsi3_1}
     (nil))
(insn 327 326 329 13 (set (reg:SI 0 ax [orig:130 D.6614 ] [130])
        (reg:SI 0 ax [230])) fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
(insn 329 327 330 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:130 D.6614 ] [130])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32]))) fmtext_o.cpp:437 7 {*cmpsi_1}
     (nil))
(jump_insn 330 329 331 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 328)
            (pc))) fmtext_o.cpp:437 596 {*jcc_1}
     (nil)
 -> 328)
;;  succ:       11
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 331 330 332 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 332 331 417 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:441 90 {*movsi_internal}
     (nil))
(jump_insn 417 332 418 14 (set (pc)
        (label_ref 368)) fmtext_o.cpp:441 636 {jump}
     (nil)
 -> 368)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 418 417 376)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 231 232
(code_label 376 418 335 15 87 "" [1 uses])
(note 335 376 336 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 336 335 337 15 (set (reg:DI 1 dx [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:442 89 {*movdi_internal}
     (nil))
(insn 337 336 339 15 (parallel [
            (set (reg:DI 0 ax [232])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:442 221 {*adddi_1}
     (nil))
(insn 339 337 340 15 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:442 90 {*movsi_internal}
     (nil))
(insn 340 339 341 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [232])) fmtext_o.cpp:442 89 {*movdi_internal}
     (nil))
(call_insn 341 340 342 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:442 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 140 141 142 143 144 145 146 147 148 149 150 233 234 235 236 237 238 239 240
(note 342 341 343 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 343 342 344 16 (set (reg:SI 0 ax [233])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -164 [0xffffffffffffff5c])) [0 fn+0 S4 A32])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 344 343 345 16 (set (reg:DI 0 ax [orig:140 D.6617 ] [140])
        (sign_extend:DI (reg:SI 0 ax [233]))) fmtext_o.cpp:443 142 {*extendsidi2_rex64}
     (nil))
(insn 345 344 346 16 (parallel [
            (set (reg:DI 1 dx [orig:141 D.6617 ] [141])
                (ashift:DI (reg:DI 0 ax [orig:140 D.6617 ] [140])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 497 {*ashldi3_1}
     (nil))
(insn 346 345 347 16 (set (reg/f:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 out_data+0 S8 A64])) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 347 346 348 16 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.6618 ] [142])
                (plus:DI (reg/f:DI 0 ax [234])
                    (reg:DI 1 dx [orig:141 D.6617 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:141 D.6617 ] [141]))
        (nil)))
(insn 348 347 349 16 (set (reg/f:DI 1 dx [orig:143 D.6620 ] [143])
        (mem/f:DI (reg/f:DI 0 ax [orig:142 D.6618 ] [142]) [0 *_76+0 S8 A64])) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 349 348 350 16 (set (reg/f:DI 0 ax [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 350 349 422 16 (set (reg:SI 0 ax [orig:144 D.6614 ] [144])
        (mem/j:SI (reg/f:DI 0 ax [235]) [0 header_10(D)->number_points+0 S4 A64])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 422 350 351 16 (set (reg:SI 2 cx [236])
        (reg:SI 0 ax [orig:144 D.6614 ] [144])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 351 422 352 16 (parallel [
            (set (reg:SI 2 cx [236])
                (lshiftrt:SI (reg:SI 2 cx [236])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 529 {*lshrsi3_1}
     (nil))
(insn 352 351 353 16 (parallel [
            (set (reg:SI 0 ax [237])
                (plus:SI (reg:SI 0 ax [orig:144 D.6614 ] [144])
                    (reg:SI 2 cx [236])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 220 {*addsi_1}
     (nil))
(insn 353 352 354 16 (parallel [
            (set (reg:SI 0 ax [238])
                (ashiftrt:SI (reg:SI 0 ax [237])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 530 {*ashrsi3_1}
     (nil))
(insn 354 353 355 16 (set (reg:SI 0 ax [orig:145 D.6614 ] [145])
        (reg:SI 0 ax [238])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 355 354 356 16 (set (reg:DI 2 cx [orig:146 D.6623 ] [146])
        (sign_extend:DI (reg:SI 0 ax [orig:145 D.6614 ] [145]))) fmtext_o.cpp:443 142 {*extendsidi2_rex64}
     (nil))
(insn 356 355 357 16 (set (reg:SI 0 ax [239])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])) fmtext_o.cpp:443 90 {*movsi_internal}
     (nil))
(insn 357 356 358 16 (set (reg:DI 0 ax [orig:147 D.6623 ] [147])
        (sign_extend:DI (reg:SI 0 ax [239]))) fmtext_o.cpp:443 142 {*extendsidi2_rex64}
     (nil))
(insn 358 357 359 16 (parallel [
            (set (reg:DI 0 ax [orig:148 D.6623 ] [148])
                (plus:DI (reg:DI 0 ax [orig:147 D.6623 ] [147])
                    (reg:DI 2 cx [orig:146 D.6623 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 221 {*adddi_1}
     (nil))
(insn 359 358 360 16 (parallel [
            (set (reg:DI 0 ax [orig:149 D.6623 ] [149])
                (ashift:DI (reg:DI 0 ax [orig:148 D.6623 ] [148])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 497 {*ashldi3_1}
     (nil))
(insn 360 359 361 16 (parallel [
            (set (reg/f:DI 1 dx [orig:150 D.6620 ] [150])
                (plus:DI (reg/f:DI 1 dx [orig:143 D.6620 ] [143])
                    (reg:DI 0 ax [orig:149 D.6623 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 221 {*adddi_1}
     (nil))
(insn 361 360 363 16 (parallel [
            (set (reg:DI 0 ax [240])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:443 221 {*adddi_1}
     (nil))
(insn 363 361 364 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b8e1bfee850 *.LC25>)) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 364 363 365 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [240])) fmtext_o.cpp:443 89 {*movdi_internal}
     (nil))
(insn 365 364 366 16 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:443 93 {*movqi_internal}
     (nil))
(call_insn 366 365 367 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:443 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 367 366 368 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 220 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              14 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 139 241 242 243 244
(code_label 368 367 369 17 86 "" [1 uses])
(note 369 368 370 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 370 369 371 17 (set (reg/f:DI 0 ax [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 header+0 S8 A64])) fmtext_o.cpp:441 89 {*movdi_internal}
     (nil))
(insn 371 370 424 17 (set (reg:SI 0 ax [orig:138 D.6614 ] [138])
        (mem/j:SI (reg/f:DI 0 ax [241]) [0 header_10(D)->number_points+0 S4 A64])) fmtext_o.cpp:441 90 {*movsi_internal}
     (nil))
(insn 424 371 372 17 (set (reg:SI 1 dx [242])
        (reg:SI 0 ax [orig:138 D.6614 ] [138])) fmtext_o.cpp:441 90 {*movsi_internal}
     (nil))
(insn 372 424 373 17 (parallel [
            (set (reg:SI 1 dx [242])
                (lshiftrt:SI (reg:SI 1 dx [242])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 529 {*lshrsi3_1}
     (nil))
(insn 373 372 374 17 (parallel [
            (set (reg:SI 0 ax [243])
                (plus:SI (reg:SI 0 ax [orig:138 D.6614 ] [138])
                    (reg:SI 1 dx [242])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 220 {*addsi_1}
     (nil))
(insn 374 373 375 17 (parallel [
            (set (reg:SI 0 ax [244])
                (ashiftrt:SI (reg:SI 0 ax [243])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:441 530 {*ashrsi3_1}
     (nil))
(insn 375 374 377 17 (set (reg:SI 0 ax [orig:139 D.6614 ] [139])
        (reg:SI 0 ax [244])) fmtext_o.cpp:441 90 {*movsi_internal}
     (nil))
(insn 377 375 378 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:139 D.6614 ] [139])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -124 [0xffffffffffffff84])) [0 i+0 S4 A32]))) fmtext_o.cpp:441 7 {*cmpsi_1}
     (nil))
(jump_insn 378 377 379 17 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 376)
            (pc))) fmtext_o.cpp:441 596 {*jcc_1}
     (nil)
 -> 376)
;;  succ:       15
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;;              9 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 379 378 380 18 83 "" [1 uses])
(note 380 379 381 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 382 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:447 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 382 381 383 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 387)
            (pc))) fmtext_o.cpp:447 596 {*jcc_1}
     (nil)
 -> 387)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 245
(note 383 382 384 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 384 383 385 19 (set (reg:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 input_file+0 S8 A64])) fmtext_o.cpp:448 89 {*movdi_internal}
     (nil))
(insn 385 384 386 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [245])) fmtext_o.cpp:448 89 {*movdi_internal}
     (nil))
(call_insn 386 385 387 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b8e1bc4b900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:448 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;;              19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 387 386 388 20 88 "" [1 uses])
(note 388 387 389 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 389 388 392 20 (set (reg:SI 0 ax [orig:83 D.6614 ] [83])
        (const_int 1 [0x1])) fmtext_o.cpp:451 90 {*movsi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              3 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 17 [flags] 151
(code_label 392 389 393 21 89 "" [1 uses])
(note 393 392 394 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 394 393 398 21 (set (reg:SI 0 ax [orig:151 <retval> ] [151])
        (reg:SI 0 ax [orig:83 D.6614 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 398 394 399 21 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:151 <retval> ] [151])) fmtext_o.cpp:452 90 {*movsi_internal}
     (nil))
(insn 399 398 400 21 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.6624+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [248]))
        ]) fmtext_o.cpp:452 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 400 399 406 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 403)
            (pc))) fmtext_o.cpp:452 596 {*jcc_1}
     (nil)
 -> 403)
;;  succ:       23
;;              22 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 406 400 401 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(call_insn 401 406 402 22 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2b8e1bf5d700 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:452 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 402 401 403)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 403 402 407 23 90 "" [1 uses])
(note 407 403 404 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 404 407 419 23 (use (reg/i:SI 0 ax)) fmtext_o.cpp:452 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 419 404 0 NOTE_INSN_DELETED)

;; Function int read_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision1*, float**, float**, Endian_Check*) (_Z9read_dataPiP10PreprocessP7IOFilesPP16Data_file_headerPP17Data_block_headerP10Precision2PP8_IO_FILEP10Precision1PPfSI_P12Endian_Check, funcdef_no=6, decl_uid=5296, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=575 from oldreg=424, assigning class GENERAL_REGS to r575
   36: {r575:DI=r575:DI<<0x8;clobber flags:CC;}
      REG_DEAD r422:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  822: r575:DI=r422:DI
    Inserting insn reload after:
  823: r424:DI=r575:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 76:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 86:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 106:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 107:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 116:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 129:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 139:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 149:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) rm  (1) rn {*cmphi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 162:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 179:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 185:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 193:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 209:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 215:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 223:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 228:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 234:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 238:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 251
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 252:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 254:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 259:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 261
	 Choosing alt 0 in insn 261:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 269:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 274:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 284:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 289:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 297:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 305:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 307
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 316:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 319:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 320:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 321:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 324:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 325:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 326
	 Choosing alt 0 in insn 326:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 327:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 335:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 338:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 339:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 340
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 344:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 345:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 346
	 Choosing alt 0 in insn 346:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 349:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 350:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 353:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 355:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 361:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 369:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 370:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 371
	 Choosing alt 0 in insn 371:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 372:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 373:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 379:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 380:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 381
	 Choosing alt 0 in insn 381:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 382:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 383:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 385:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 386:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 387
	 Choosing alt 0 in insn 387:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 388:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 392:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 394
	 Choosing alt 0 in insn 394:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 395:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 397
	 Choosing alt 2 in insn 397:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 398:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 401:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 402:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 403
	 Choosing alt 0 in insn 403:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 404:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 406:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 416:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 417:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 418
	 Choosing alt 0 in insn 418:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 419:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 420:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 426:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 427:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 428
	 Choosing alt 0 in insn 428:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 429:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 430:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 436:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 437:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 438
	 Choosing alt 0 in insn 438:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 439:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 440:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 447:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 448:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 449
	 Choosing alt 0 in insn 449:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 450:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 453:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 455
	 Choosing alt 0 in insn 455:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 456:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 460:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 461:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 462
	 Choosing alt 0 in insn 462:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 463:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 465
	 Choosing alt 2 in insn 465:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 466:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 469:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 470:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 471
	 Choosing alt 0 in insn 471:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 472:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 474:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 482:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 489:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 491:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 496:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 502:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 504
	 Choosing alt 0 in insn 504:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 505:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 511:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 512:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 513
	 Choosing alt 0 in insn 513:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 514:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 517
	 Choosing alt 0 in insn 517:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 518:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 519:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 522:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 523:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 524
	 Choosing alt 0 in insn 524:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 525:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 527:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 528:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 529
	 Choosing alt 0 in insn 529:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 532:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 533:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 534
	 Choosing alt 0 in insn 534:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 535:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 537:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 538:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 540:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 541:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 544:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 545:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 546
	 Choosing alt 0 in insn 546:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 547:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 549:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 550:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 551
	 Choosing alt 0 in insn 551:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 552:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 554:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 555:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 556
	 Choosing alt 0 in insn 556:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 557:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 559:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 560:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 562:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 563:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 566:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 567:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 568
	 Choosing alt 0 in insn 568:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 569:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 571:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 572:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 573
	 Choosing alt 0 in insn 573:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 574:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 576:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 577:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 578
	 Choosing alt 0 in insn 578:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 579:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 581:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 582:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 584:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 585:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 586:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 590:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 591:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 592:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 593
	 Choosing alt 0 in insn 593:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 594:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 596:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 597:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 599
	 Choosing alt 2 in insn 599:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 602:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 609:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 615:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 616:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 617
	 Choosing alt 0 in insn 617:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 618:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 623:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 624:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 625:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 626
	 Choosing alt 0 in insn 626:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 627:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 628:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 629:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 630:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 632:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 633:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 634:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 635:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 636:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 637:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 638
	 Choosing alt 0 in insn 638:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 639:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 640:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 641:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 642:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 643
	 Choosing alt 0 in insn 643:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 645:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 646:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 647:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 648
	 Choosing alt 0 in insn 648:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 649:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 650:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 651:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 652:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 653:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 654:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 655:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 656:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 657:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 658:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 659:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 660
	 Choosing alt 0 in insn 660:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 661:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 662:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 663:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 664:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 665
	 Choosing alt 0 in insn 665:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 667:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 668:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 669:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 670
	 Choosing alt 0 in insn 670:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 671:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 673:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 674:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 675:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 676:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 677:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 680:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 681:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 682
	 Choosing alt 0 in insn 682:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 683:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 684:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 685:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 686:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 687
	 Choosing alt 0 in insn 687:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 688:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 689:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 690:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 691:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 692
	 Choosing alt 0 in insn 692:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 693:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 694:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 695:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 696
	 Choosing alt 0 in insn 696:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 697:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 698:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 699:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 703:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 704:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 705:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 706
	 Choosing alt 0 in insn 706:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 707:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 708:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 709:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 710:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 711:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 712
	 Choosing alt 2 in insn 712:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 715:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 719:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 720:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 721:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 722:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 723
	 Choosing alt 0 in insn 723:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 724:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 725:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 726:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 729:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 730:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 731:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 732:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 733
	 Choosing alt 0 in insn 733:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 734:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 736:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 737:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 741:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 742:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 744:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 745
	 Choosing alt 0 in insn 745:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 746:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 747:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 748:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 749:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 750
	 Choosing alt 0 in insn 750:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 751:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 752:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 753:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 754:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 755
	 Choosing alt 0 in insn 755:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 756:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 758:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 760:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 761:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 762:  (0) =r  (1) rm {extendhidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 763:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 764:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 768:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 772:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 775:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 776:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 777:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 779:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 782:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55

********** Pseudo live ranges #1: **********

  BB 5
   Insn 56: point = 0
   Insn 55: point = 0
   Insn 54: point = 0
   Insn 53: point = 0
  BB 8
   Insn 89: point = 0
   Insn 88: point = 0
   Insn 87: point = 0
   Insn 86: point = 0
  BB 10
   Insn 119: point = 0
   Insn 118: point = 0
   Insn 117: point = 0
   Insn 116: point = 0
  BB 40
   Insn 485: point = 0
   Insn 484: point = 0
   Insn 483: point = 0
   Insn 482: point = 0
  BB 55
   Insn 790: point = 0
   Insn 789: point = 0
   Insn 785: point = 1
   Insn 782: point = 3
  BB 54
   Insn 780: point = 4
   Insn 779: point = 4
   Insn 777: point = 5
   Insn 776: point = 7
   Insn 775: point = 9
  BB 2
   Insn 792: point = 10
   Insn 11: point = 10
   Insn 7: point = 10
   Insn 6: point = 10
   Insn 5: point = 10
   Insn 4: point = 10
   Insn 3: point = 10
   Insn 2: point = 10
  BB 53
   Insn 772: point = 10
  BB 52
   Insn 769: point = 10
   Insn 768: point = 10
  BB 50
   Insn 819: point = 10
   Insn 737: point = 10
   Insn 736: point = 11
   Insn 735: point = 13
   Insn 734: point = 15
   Insn 733: point = 17
   Insn 732: point = 19
   Insn 731: point = 20
   Insn 730: point = 22
   Insn 729: point = 24
  BB 49
   Insn 727: point = 25
   Insn 726: point = 25
   Insn 725: point = 26
   Insn 724: point = 28
   Insn 723: point = 30
   Insn 722: point = 32
   Insn 721: point = 33
   Insn 720: point = 35
   Insn 719: point = 37
  BB 45
   Insn 815: point = 38
  BB 44
   Insn 603: point = 38
   Insn 602: point = 38
   Insn 600: point = 39
   Insn 599: point = 41
   Insn 598: point = 43
   Insn 597: point = 44
   Insn 596: point = 46
   Insn 595: point = 48
   Insn 594: point = 50
   Insn 593: point = 52
   Insn 592: point = 54
   Insn 591: point = 55
   Insn 590: point = 57
   Insn 589: point = 59
  BB 42
   Insn 812: point = 60
   Insn 496: point = 60
  BB 43
   Insn 586: point = 60
   Insn 585: point = 60
   Insn 584: point = 61
   Insn 583: point = 63
   Insn 582: point = 65
   Insn 581: point = 67
   Insn 580: point = 69
   Insn 579: point = 70
   Insn 578: point = 72
   Insn 577: point = 74
   Insn 576: point = 75
   Insn 575: point = 77
   Insn 574: point = 79
   Insn 573: point = 80
   Insn 572: point = 82
   Insn 571: point = 84
   Insn 570: point = 86
   Insn 569: point = 87
   Insn 568: point = 89
   Insn 567: point = 91
   Insn 566: point = 92
   Insn 565: point = 94
   Insn 564: point = 96
   Insn 563: point = 97
   Insn 562: point = 98
   Insn 561: point = 100
   Insn 560: point = 102
   Insn 559: point = 104
   Insn 558: point = 106
   Insn 557: point = 107
   Insn 556: point = 109
   Insn 555: point = 111
   Insn 554: point = 112
   Insn 553: point = 114
   Insn 552: point = 116
   Insn 551: point = 117
   Insn 550: point = 119
   Insn 549: point = 121
   Insn 548: point = 123
   Insn 547: point = 124
   Insn 546: point = 126
   Insn 545: point = 128
   Insn 544: point = 129
   Insn 543: point = 131
   Insn 542: point = 133
   Insn 541: point = 134
   Insn 540: point = 135
   Insn 539: point = 137
   Insn 538: point = 139
   Insn 537: point = 141
   Insn 536: point = 143
   Insn 535: point = 144
   Insn 534: point = 146
   Insn 533: point = 148
   Insn 532: point = 149
   Insn 531: point = 151
   Insn 530: point = 153
   Insn 529: point = 154
   Insn 528: point = 156
   Insn 527: point = 158
   Insn 526: point = 160
   Insn 525: point = 161
   Insn 524: point = 163
   Insn 523: point = 165
   Insn 522: point = 166
   Insn 521: point = 168
   Insn 520: point = 170
   Insn 519: point = 171
   Insn 518: point = 172
   Insn 517: point = 174
   Insn 516: point = 176
   Insn 515: point = 178
   Insn 514: point = 179
   Insn 513: point = 181
   Insn 512: point = 183
   Insn 511: point = 184
   Insn 510: point = 186
   Insn 509: point = 188
   Insn 508: point = 189
   Insn 507: point = 191
   Insn 506: point = 193
   Insn 505: point = 194
   Insn 504: point = 196
   Insn 503: point = 198
   Insn 502: point = 199
   Insn 501: point = 201
   Insn 500: point = 203
  BB 48
   Insn 716: point = 204
   Insn 715: point = 204
   Insn 713: point = 205
   Insn 712: point = 207
   Insn 711: point = 209
   Insn 710: point = 210
   Insn 709: point = 212
   Insn 708: point = 214
   Insn 707: point = 216
   Insn 706: point = 218
   Insn 705: point = 220
   Insn 704: point = 221
   Insn 703: point = 223
   Insn 702: point = 225
  BB 46
   Insn 817: point = 226
   Insn 609: point = 226
  BB 41
   Insn 494: point = 226
   Insn 493: point = 226
   Insn 492: point = 227
   Insn 491: point = 229
   Insn 490: point = 230
   Insn 489: point = 232
  BB 39
   Insn 810: point = 233
   Insn 477: point = 233
   Insn 476: point = 233
   Insn 475: point = 234
   Insn 474: point = 235
   Insn 473: point = 235
   Insn 472: point = 236
   Insn 471: point = 238
   Insn 470: point = 240
   Insn 469: point = 241
   Insn 468: point = 243
   Insn 467: point = 245
   Insn 466: point = 246
   Insn 465: point = 248
   Insn 464: point = 250
   Insn 463: point = 252
   Insn 462: point = 254
   Insn 461: point = 256
   Insn 460: point = 257
   Insn 459: point = 259
   Insn 458: point = 261
   Insn 457: point = 262
   Insn 456: point = 264
   Insn 455: point = 266
   Insn 454: point = 268
   Insn 453: point = 269
   Insn 452: point = 271
   Insn 451: point = 273
   Insn 450: point = 274
   Insn 449: point = 276
   Insn 448: point = 278
   Insn 447: point = 279
   Insn 446: point = 281
   Insn 445: point = 283
  BB 38
   Insn 442: point = 284
   Insn 441: point = 284
   Insn 440: point = 285
   Insn 439: point = 287
   Insn 438: point = 289
   Insn 437: point = 291
   Insn 436: point = 292
   Insn 435: point = 294
   Insn 434: point = 296
  BB 37
   Insn 432: point = 297
   Insn 431: point = 297
   Insn 430: point = 298
   Insn 429: point = 300
   Insn 428: point = 302
   Insn 427: point = 304
   Insn 426: point = 305
   Insn 425: point = 307
   Insn 424: point = 309
  BB 36
   Insn 422: point = 310
   Insn 421: point = 310
   Insn 420: point = 311
   Insn 419: point = 313
   Insn 418: point = 315
   Insn 417: point = 317
   Insn 416: point = 318
   Insn 415: point = 320
   Insn 414: point = 322
  BB 35
   Insn 808: point = 323
   Insn 409: point = 323
   Insn 408: point = 323
   Insn 407: point = 324
   Insn 406: point = 325
   Insn 405: point = 325
   Insn 404: point = 326
   Insn 403: point = 328
   Insn 402: point = 330
   Insn 401: point = 331
   Insn 400: point = 333
   Insn 399: point = 335
   Insn 398: point = 336
   Insn 397: point = 338
   Insn 396: point = 340
   Insn 395: point = 342
   Insn 394: point = 344
   Insn 393: point = 346
   Insn 392: point = 347
   Insn 391: point = 349
   Insn 390: point = 351
   Insn 389: point = 352
   Insn 388: point = 354
   Insn 387: point = 356
   Insn 386: point = 358
   Insn 385: point = 359
   Insn 384: point = 361
   Insn 383: point = 363
   Insn 382: point = 364
   Insn 381: point = 366
   Insn 380: point = 368
   Insn 379: point = 369
   Insn 378: point = 371
   Insn 377: point = 373
  BB 34
   Insn 375: point = 374
   Insn 374: point = 374
   Insn 373: point = 375
   Insn 372: point = 377
   Insn 371: point = 379
   Insn 370: point = 381
   Insn 369: point = 382
   Insn 368: point = 384
   Insn 367: point = 386
  BB 33
   Insn 364: point = 387
   Insn 363: point = 387
   Insn 362: point = 388
   Insn 361: point = 389
   Insn 360: point = 390
  BB 32
   Insn 358: point = 391
   Insn 357: point = 391
   Insn 356: point = 392
   Insn 355: point = 394
   Insn 354: point = 395
   Insn 353: point = 397
   Insn 352: point = 398
   Insn 351: point = 398
   Insn 350: point = 399
   Insn 349: point = 399
   Insn 348: point = 399
   Insn 347: point = 400
   Insn 346: point = 402
   Insn 345: point = 404
   Insn 344: point = 405
   Insn 343: point = 407
   Insn 342: point = 409
   Insn 341: point = 410
   Insn 340: point = 412
   Insn 339: point = 414
   Insn 338: point = 415
   Insn 337: point = 417
   Insn 336: point = 419
   Insn 335: point = 420
   Insn 334: point = 421
   Insn 333: point = 423
   Insn 332: point = 424
   Insn 331: point = 424
   Insn 330: point = 425
   Insn 329: point = 427
   Insn 328: point = 429
   Insn 327: point = 431
   Insn 326: point = 433
   Insn 325: point = 435
   Insn 324: point = 436
   Insn 323: point = 438
   Insn 322: point = 440
   Insn 321: point = 441
   Insn 320: point = 443
   Insn 319: point = 444
   Insn 318: point = 446
   Insn 317: point = 448
   Insn 316: point = 449
   Insn 315: point = 450
   Insn 314: point = 452
   Insn 313: point = 453
   Insn 312: point = 453
   Insn 311: point = 454
   Insn 310: point = 456
   Insn 309: point = 458
   Insn 308: point = 460
   Insn 307: point = 462
   Insn 306: point = 464
   Insn 305: point = 465
   Insn 304: point = 467
   Insn 303: point = 469
   Insn 302: point = 470
   Insn 301: point = 472
   Insn 300: point = 473
   Insn 299: point = 475
   Insn 298: point = 477
   Insn 297: point = 478
   Insn 296: point = 479
   Insn 295: point = 481
   Insn 294: point = 482
   Insn 293: point = 482
   Insn 292: point = 483
   Insn 291: point = 485
   Insn 290: point = 487
   Insn 289: point = 488
   Insn 288: point = 490
   Insn 287: point = 491
   Insn 286: point = 493
   Insn 285: point = 495
   Insn 284: point = 496
   Insn 283: point = 497
   Insn 282: point = 499
   Insn 281: point = 500
   Insn 280: point = 500
   Insn 279: point = 501
   Insn 278: point = 503
   Insn 277: point = 505
   Insn 276: point = 506
   Insn 275: point = 508
   Insn 274: point = 509
   Insn 273: point = 511
   Insn 272: point = 513
  BB 31
   Insn 269: point = 514
   Insn 268: point = 515
   Insn 267: point = 517
  BB 30
   Insn 265: point = 518
   Insn 264: point = 518
   Insn 263: point = 519
   Insn 262: point = 521
   Insn 261: point = 523
   Insn 260: point = 525
   Insn 259: point = 526
   Insn 258: point = 528
   Insn 257: point = 530
   Insn 256: point = 531
   Insn 255: point = 533
   Insn 254: point = 534
   Insn 253: point = 535
   Insn 252: point = 537
   Insn 251: point = 539
   Insn 250: point = 541
   Insn 249: point = 542
   Insn 248: point = 544
   Insn 247: point = 546
  BB 21
   Insn 800: point = 547
   Insn 194: point = 547
   Insn 193: point = 547
   Insn 192: point = 547
   Insn 191: point = 548
   Insn 190: point = 549
   Insn 189: point = 551
  BB 19
   Insn 798: point = 552
   Insn 180: point = 552
   Insn 179: point = 552
  BB 20
   Insn 186: point = 552
   Insn 185: point = 552
  BB 18
   Insn 177: point = 552
   Insn 176: point = 552
  BB 17
   Insn 796: point = 552
   Insn 169: point = 552
   Insn 168: point = 552
  BB 16
   Insn 794: point = 552
   Insn 163: point = 552
   Insn 162: point = 552
  BB 15
   Insn 160: point = 552
   Insn 159: point = 552
  BB 14
   Insn 157: point = 552
   Insn 156: point = 552
   Insn 155: point = 553
   Insn 154: point = 555
  BB 29
   Insn 244: point = 556
   Insn 243: point = 556
   Insn 242: point = 557
   Insn 241: point = 558
   Insn 240: point = 559
   Insn 239: point = 560
   Insn 238: point = 560
  BB 27
   Insn 806: point = 560
   Insn 229: point = 560
   Insn 228: point = 560
  BB 28
   Insn 235: point = 560
   Insn 234: point = 560
  BB 26
   Insn 226: point = 560
   Insn 225: point = 560
   Insn 224: point = 560
   Insn 223: point = 561
  BB 25
   Insn 804: point = 562
   Insn 216: point = 562
   Insn 215: point = 562
  BB 24
   Insn 802: point = 562
   Insn 210: point = 562
   Insn 209: point = 562
  BB 23
   Insn 207: point = 562
   Insn 206: point = 562
   Insn 205: point = 562
   Insn 204: point = 563
  BB 22
   Insn 202: point = 564
   Insn 201: point = 564
   Insn 200: point = 565
   Insn 199: point = 567
  BB 13
   Insn 151: point = 568
   Insn 150: point = 568
   Insn 149: point = 569
   Insn 148: point = 571
   Insn 147: point = 573
   Insn 146: point = 575
   Insn 145: point = 576
   Insn 144: point = 578
   Insn 143: point = 580
  BB 12
   Insn 141: point = 581
   Insn 140: point = 581
   Insn 139: point = 582
   Insn 138: point = 584
   Insn 137: point = 586
   Insn 136: point = 588
   Insn 135: point = 589
   Insn 134: point = 591
   Insn 133: point = 593
  BB 11
   Insn 131: point = 594
   Insn 130: point = 594
   Insn 129: point = 595
   Insn 128: point = 597
   Insn 127: point = 599
   Insn 126: point = 601
   Insn 125: point = 602
   Insn 124: point = 604
   Insn 123: point = 606
  BB 9
   Insn 114: point = 607
   Insn 113: point = 607
   Insn 112: point = 608
   Insn 111: point = 609
   Insn 110: point = 610
   Insn 109: point = 611
   Insn 108: point = 611
   Insn 107: point = 612
   Insn 106: point = 612
   Insn 105: point = 612
   Insn 104: point = 613
   Insn 103: point = 615
   Insn 102: point = 617
   Insn 101: point = 618
   Insn 100: point = 620
   Insn 99: point = 622
   Insn 98: point = 623
   Insn 97: point = 625
   Insn 96: point = 627
   Insn 95: point = 628
   Insn 94: point = 630
   Insn 93: point = 632
  BB 7
   Insn 84: point = 633
   Insn 83: point = 633
   Insn 82: point = 634
   Insn 81: point = 635
   Insn 80: point = 636
   Insn 79: point = 637
   Insn 78: point = 637
   Insn 77: point = 638
   Insn 76: point = 638
   Insn 75: point = 638
   Insn 74: point = 639
   Insn 73: point = 641
   Insn 72: point = 643
   Insn 71: point = 644
   Insn 70: point = 646
   Insn 69: point = 648
   Insn 68: point = 649
   Insn 67: point = 651
   Insn 66: point = 653
   Insn 65: point = 654
   Insn 64: point = 656
   Insn 63: point = 658
  BB 6
   Insn 61: point = 659
   Insn 60: point = 659
  BB 4
   Insn 51: point = 659
   Insn 50: point = 659
   Insn 49: point = 660
   Insn 48: point = 662
   Insn 47: point = 664
   Insn 46: point = 665
   Insn 45: point = 667
   Insn 44: point = 669
   Insn 43: point = 670
   Insn 42: point = 671
   Insn 41: point = 672
   Insn 40: point = 672
   Insn 39: point = 673
   Insn 38: point = 673
   Insn 37: point = 675
   Insn 823: point = 676
	Hard reg 1 is preferable by r575 with profit 1
   Insn 36: point = 678
   Insn 822: point = 678
	Hard reg 1 is preferable by r575 with profit 1
	Hard reg 0 is preferable by r575 with profit 1
   Insn 35: point = 680
   Insn 34: point = 682
   Insn 33: point = 683
   Insn 32: point = 685
   Insn 31: point = 686
   Insn 30: point = 688
   Insn 29: point = 690
  BB 47
   Insn 699: point = 691
   Insn 698: point = 691
   Insn 697: point = 692
   Insn 696: point = 694
   Insn 695: point = 696
   Insn 694: point = 698
   Insn 693: point = 699
   Insn 692: point = 701
   Insn 691: point = 703
   Insn 690: point = 704
   Insn 689: point = 706
   Insn 688: point = 708
   Insn 687: point = 709
   Insn 686: point = 711
   Insn 685: point = 713
   Insn 684: point = 715
   Insn 683: point = 716
   Insn 682: point = 718
   Insn 681: point = 720
   Insn 680: point = 721
   Insn 679: point = 723
   Insn 678: point = 725
   Insn 677: point = 726
   Insn 676: point = 727
   Insn 675: point = 729
   Insn 674: point = 731
   Insn 673: point = 733
   Insn 672: point = 735
   Insn 671: point = 736
   Insn 670: point = 738
   Insn 669: point = 740
   Insn 668: point = 741
   Insn 667: point = 743
   Insn 666: point = 745
   Insn 665: point = 746
   Insn 664: point = 748
   Insn 663: point = 750
   Insn 662: point = 752
   Insn 661: point = 753
   Insn 660: point = 755
   Insn 659: point = 757
   Insn 658: point = 758
   Insn 657: point = 760
   Insn 656: point = 762
   Insn 655: point = 763
   Insn 654: point = 764
   Insn 653: point = 766
   Insn 652: point = 768
   Insn 651: point = 770
   Insn 650: point = 772
   Insn 649: point = 773
   Insn 648: point = 775
   Insn 647: point = 777
   Insn 646: point = 778
   Insn 645: point = 780
   Insn 644: point = 782
   Insn 643: point = 783
   Insn 642: point = 785
   Insn 641: point = 787
   Insn 640: point = 789
   Insn 639: point = 790
   Insn 638: point = 792
   Insn 637: point = 794
   Insn 636: point = 795
   Insn 635: point = 797
   Insn 634: point = 799
   Insn 633: point = 800
   Insn 632: point = 801
   Insn 631: point = 803
   Insn 630: point = 805
   Insn 629: point = 807
   Insn 628: point = 809
   Insn 627: point = 810
   Insn 626: point = 812
   Insn 625: point = 814
   Insn 624: point = 815
   Insn 623: point = 817
   Insn 622: point = 819
   Insn 621: point = 820
   Insn 620: point = 822
   Insn 619: point = 824
   Insn 618: point = 825
   Insn 617: point = 827
   Insn 616: point = 829
   Insn 615: point = 830
   Insn 614: point = 832
   Insn 613: point = 834
  BB 51
   Insn 764: point = 835
   Insn 763: point = 835
   Insn 762: point = 836
   Insn 761: point = 838
   Insn 760: point = 840
   Insn 759: point = 842
   Insn 758: point = 844
   Insn 757: point = 846
   Insn 756: point = 847
   Insn 755: point = 849
   Insn 754: point = 851
   Insn 753: point = 852
   Insn 752: point = 854
   Insn 751: point = 856
   Insn 750: point = 857
   Insn 749: point = 859
   Insn 748: point = 861
   Insn 747: point = 863
   Insn 746: point = 864
   Insn 745: point = 866
   Insn 744: point = 868
   Insn 743: point = 869
   Insn 742: point = 871
   Insn 741: point = 873
  BB 3
   Insn 27: point = 874
   Insn 26: point = 874
   Insn 25: point = 875
   Insn 24: point = 877
   Insn 23: point = 879
   Insn 22: point = 880
   Insn 21: point = 882
   Insn 20: point = 884
   Insn 19: point = 886
   Insn 18: point = 887
   Insn 17: point = 887
   Insn 16: point = 888
   Insn 15: point = 890
 r83: [6..7]
 r84: [4..5]
 r85: [886..888]
 r86: [878..880]
 r87: [876..877]
 r88: [874..875]
 r89: [687..688]
 r90: [684..686]
 r91: [670..683]
 r92: [672..673]
 r93: [670..671]
 r94: [666..667]
 r95: [663..665]
 r96: [661..662]
 r97: [659..660]
 r98: [655..656]
 r99: [652..654]
 r100: [650..651]
 r101: [638..649]
 r102: [645..646]
 r103: [642..644]
 r104: [640..641]
 r105: [637..639]
 r106: [635..636]
 r107: [633..634]
 r108: [629..630]
 r109: [626..628]
 r110: [624..625]
 r111: [612..623]
 r112: [619..620]
 r113: [616..618]
 r114: [614..615]
 r115: [611..613]
 r116: [609..610]
 r117: [607..608]
 r118: [603..604]
 r119: [600..602]
 r120: [598..599]
 r121: [596..597]
 r122: [594..595]
 r123: [590..591]
 r124: [587..589]
 r125: [585..586]
 r126: [583..584]
 r127: [581..582]
 r128: [577..578]
 r129: [574..576]
 r130: [572..573]
 r131: [570..571]
 r132: [568..569]
 r133: [564..565]
 r134: [552..553]
 r135: [547..549]
 r136: [543..544]
 r137: [540..542]
 r138: [538..539]
 r139: [536..537]
 r140: [518..531]
 r141: [527..528]
 r142: [524..526]
 r143: [522..523]
 r144: [520..521]
 r145: [518..519]
 r146: [510..511]
 r147: [507..509]
 r148: [496..506]
 r149: [502..503]
 r150: [500..501]
 r151: [496..497]
 r152: [492..493]
 r153: [489..491]
 r154: [478..488]
 r155: [484..485]
 r156: [482..483]
 r157: [478..479]
 r158: [474..475]
 r159: [471..473]
 r160: [449..470]
 r161: [466..467]
 r162: [463..465]
 r163: [461..462]
 r164: [459..460]
 r165: [457..458]
 r166: [455..456]
 r167: [453..454]
 r168: [449..450]
 r169: [445..446]
 r170: [442..444]
 r171: [420..441]
 r172: [437..438]
 r173: [434..436]
 r174: [432..433]
 r175: [430..431]
 r176: [428..429]
 r177: [426..427]
 r178: [424..425]
 r179: [420..421]
 r180: [416..417]
 r181: [413..415]
 r182: [411..412]
 r183: [399..410]
 r184: [406..407]
 r185: [403..405]
 r186: [401..402]
 r187: [398..400]
 r188: [391..395]
 r189: [391..392]
 r190: [383..384]
 r191: [380..382]
 r192: [378..379]
 r193: [376..377]
 r194: [374..375]
 r195: [370..371]
 r196: [367..369]
 r197: [365..366]
 r198: [325..364]
 r199: [360..361]
 r200: [357..359]
 r201: [355..356]
 r202: [353..354]
 r203: [339..352]
 r204: [348..349]
 r205: [345..347]
 r206: [343..344]
 r207: [341..342]
 r208: [339..340]
 r209: [337..338]
 r210: [324..336]
 r211: [332..333]
 r212: [329..331]
 r213: [327..328]
 r214: [323..326]
 r215: [319..320]
 r216: [316..318]
 r217: [314..315]
 r218: [312..313]
 r219: [310..311]
 r220: [306..307]
 r221: [303..305]
 r222: [301..302]
 r223: [299..300]
 r224: [297..298]
 r225: [293..294]
 r226: [290..292]
 r227: [288..289]
 r228: [286..287]
 r229: [284..285]
 r230: [280..281]
 r231: [277..279]
 r232: [275..276]
 r233: [235..274]
 r234: [270..271]
 r235: [267..269]
 r236: [265..266]
 r237: [263..264]
 r238: [249..262]
 r239: [258..259]
 r240: [255..257]
 r241: [253..254]
 r242: [251..252]
 r243: [249..250]
 r244: [247..248]
 r245: [234..246]
 r246: [242..243]
 r247: [239..241]
 r248: [237..238]
 r249: [233..236]
 r250: [226..230]
 r251: [226..227]
 r252: [56..57]
 r253: [53..55]
 r254: [51..52]
 r255: [49..50]
 r256: [47..48]
 r257: [45..46]
 r258: [42..44]
 r259: [42..43]
 r260: [40..41]
 r261: [38..39]
 r262: [200..201]
 r263: [197..199]
 r264: [195..196]
 r265: [190..194]
 r266: [190..191]
 r267: [171..189]
 r268: [185..186]
 r269: [182..184]
 r270: [180..181]
 r271: [175..179]
 r272: [175..176]
 r273: [173..174]
 r274: [171..172]
 r275: [167..168]
 r276: [164..166]
 r277: [162..163]
 r278: [155..161]
 r279: [157..158]
 r280: [155..156]
 r281: [134..154]
 r282: [150..151]
 r283: [147..149]
 r284: [145..146]
 r285: [138..144]
 r286: [140..141]
 r287: [138..139]
 r288: [136..137]
 r289: [134..135]
 r290: [130..131]
 r291: [127..129]
 r292: [125..126]
 r293: [118..124]
 r294: [120..121]
 r295: [118..119]
 r296: [97..117]
 r297: [113..114]
 r298: [110..112]
 r299: [108..109]
 r300: [101..107]
 r301: [103..104]
 r302: [101..102]
 r303: [99..100]
 r304: [97..98]
 r305: [93..94]
 r306: [90..92]
 r307: [88..89]
 r308: [81..87]
 r309: [83..84]
 r310: [81..82]
 r311: [60..80]
 r312: [76..77]
 r313: [73..75]
 r314: [71..72]
 r315: [64..70]
 r316: [66..67]
 r317: [64..65]
 r318: [62..63]
 r319: [60..61]
 r320: [222..223]
 r321: [219..221]
 r322: [217..218]
 r323: [215..216]
 r324: [213..214]
 r325: [211..212]
 r326: [208..210]
 r327: [208..209]
 r328: [206..207]
 r329: [204..205]
 r330: [831..832]
 r331: [828..830]
 r332: [826..827]
 r333: [821..825]
 r334: [821..822]
 r335: [800..820]
 r336: [816..817]
 r337: [813..815]
 r338: [811..812]
 r339: [804..810]
 r340: [806..807]
 r341: [804..805]
 r342: [802..803]
 r343: [800..801]
 r344: [796..797]
 r345: [793..795]
 r346: [791..792]
 r347: [784..790]
 r348: [786..787]
 r349: [784..785]
 r350: [763..783]
 r351: [779..780]
 r352: [776..778]
 r353: [774..775]
 r354: [767..773]
 r355: [769..770]
 r356: [767..768]
 r357: [765..766]
 r358: [763..764]
 r359: [759..760]
 r360: [756..758]
 r361: [754..755]
 r362: [747..753]
 r363: [749..750]
 r364: [747..748]
 r365: [726..746]
 r366: [742..743]
 r367: [739..741]
 r368: [737..738]
 r369: [730..736]
 r370: [732..733]
 r371: [730..731]
 r372: [728..729]
 r373: [726..727]
 r374: [722..723]
 r375: [719..721]
 r376: [717..718]
 r377: [710..716]
 r378: [712..713]
 r379: [710..711]
 r380: [691..709]
 r381: [705..706]
 r382: [702..704]
 r383: [700..701]
 r384: [695..699]
 r385: [695..696]
 r386: [693..694]
 r387: [691..692]
 r388: [34..35]
 r389: [31..33]
 r390: [29..30]
 r391: [27..28]
 r392: [25..26]
 r393: [21..22]
 r394: [18..20]
 r395: [16..17]
 r396: [14..15]
 r397: [12..13]
 r398: [870..871]
 r399: [867..869]
 r400: [865..866]
 r401: [858..864]
 r402: [860..861]
 r403: [858..859]
 r404: [835..857]
 r405: [853..854]
 r406: [850..852]
 r407: [848..849]
 r408: [841..847]
 r409: [843..844]
 r410: [841..842]
 r411: [839..840]
 r412: [837..838]
 r413: [835..836]
 r414: [2..3]
 r415: [0..1]
 r416: [889..890]
 r417: [885..887] [881..882]
 r418: [883..884]
 r419: [878..879]
 r420: [689..690]
 r421: [684..685]
 r422: [679..680]
 r423: [681..682]
 r424: [674..676]
 r425: [674..675]
 r426: [668..669]
 r427: [663..664]
 r428: [657..658]
 r429: [652..653]
 r430: [647..648]
 r431: [642..643]
 r432: [631..632]
 r433: [626..627]
 r434: [621..622]
 r435: [616..617]
 r436: [605..606]
 r437: [600..601]
 r438: [592..593]
 r439: [587..588]
 r440: [579..580]
 r441: [574..575]
 r442: [554..555]
 r443: [550..551]
 r444: [547..548]
 r445: [566..567]
 r446: [562..563]
 r447: [560..561]
 r448: [557..559]
 r449: [556..558]
 r450: [545..546]
 r451: [540..541]
 r452: [534..535]
 r453: [532..533]
 r454: [529..530]
 r455: [524..525]
 r456: [516..517]
 r457: [514..515]
 r458: [512..513]
 r459: [507..508]
 r460: [504..505]
 r461: [498..499]
 r462: [494..495]
 r463: [489..490]
 r464: [486..487]
 r465: [480..481]
 r466: [476..477]
 r467: [471..472]
 r468: [468..469]
 r469: [463..464]
 r470: [451..452]
 r471: [447..448]
 r472: [442..443]
 r473: [439..440]
 r474: [434..435]
 r475: [422..423]
 r476: [418..419]
 r477: [413..414]
 r478: [408..409]
 r479: [403..404]
 r480: [396..397]
 r481: [393..394]
 r482: [388..390]
 r483: [387..389]
 r484: [385..386]
 r485: [380..381]
 r486: [372..373]
 r487: [367..368]
 r488: [362..363]
 r489: [357..358]
 r490: [350..351]
 r491: [345..346]
 r492: [334..335]
 r493: [329..330]
 r494: [321..322]
 r495: [316..317]
 r496: [308..309]
 r497: [303..304]
 r498: [295..296]
 r499: [290..291]
 r500: [282..283]
 r501: [277..278]
 r502: [272..273]
 r503: [267..268]
 r504: [260..261]
 r505: [255..256]
 r506: [244..245]
 r507: [239..240]
 r508: [231..232]
 r509: [228..229]
 r510: [202..203]
 r511: [197..198]
 r512: [192..193]
 r513: [187..188]
 r514: [182..183]
 r515: [177..178]
 r516: [169..170]
 r517: [164..165]
 r518: [159..160]
 r519: [152..153]
 r520: [147..148]
 r521: [142..143]
 r522: [132..133]
 r523: [127..128]
 r524: [122..123]
 r525: [115..116]
 r526: [110..111]
 r527: [105..106]
 r528: [95..96]
 r529: [90..91]
 r530: [85..86]
 r531: [78..79]
 r532: [73..74]
 r533: [68..69]
 r534: [58..59]
 r535: [53..54]
 r536: [833..834]
 r537: [828..829]
 r538: [823..824]
 r539: [818..819]
 r540: [813..814]
 r541: [808..809]
 r542: [798..799]
 r543: [793..794]
 r544: [788..789]
 r545: [781..782]
 r546: [776..777]
 r547: [771..772]
 r548: [761..762]
 r549: [756..757]
 r550: [751..752]
 r551: [744..745]
 r552: [739..740]
 r553: [734..735]
 r554: [724..725]
 r555: [719..720]
 r556: [714..715]
 r557: [707..708]
 r558: [702..703]
 r559: [697..698]
 r560: [224..225]
 r561: [219..220]
 r562: [36..37]
 r563: [31..32]
 r564: [23..24]
 r565: [18..19]
 r566: [10..11]
 r567: [872..873]
 r568: [867..868]
 r569: [862..863]
 r570: [855..856]
 r571: [850..851]
 r572: [845..846]
 r573: [8..9]
 r575: [677..678]
Compressing live ranges: from 891 to 776 - 87%
Ranges after the compression:
 r83: [6..7]
 r84: [4..5]
 r85: [772..773]
 r86: [766..767]
 r87: [764..765]
 r88: [762..763]
 r89: [600..601]
 r90: [598..599]
 r91: [586..597]
 r92: [588..589]
 r93: [586..587]
 r94: [582..583]
 r95: [580..581]
 r96: [578..579]
 r97: [576..577]
 r98: [572..573]
 r99: [570..571]
 r100: [568..569]
 r101: [558..567]
 r102: [564..565]
 r103: [562..563]
 r104: [560..561]
 r105: [558..559]
 r106: [556..557]
 r107: [554..555]
 r108: [550..551]
 r109: [548..549]
 r110: [546..547]
 r111: [536..545]
 r112: [542..543]
 r113: [540..541]
 r114: [538..539]
 r115: [536..537]
 r116: [534..535]
 r117: [532..533]
 r118: [528..529]
 r119: [526..527]
 r120: [524..525]
 r121: [522..523]
 r122: [520..521]
 r123: [516..517]
 r124: [514..515]
 r125: [512..513]
 r126: [510..511]
 r127: [508..509]
 r128: [504..505]
 r129: [502..503]
 r130: [500..501]
 r131: [498..499]
 r132: [496..497]
 r133: [492..493]
 r134: [482..483]
 r135: [478..479]
 r136: [474..475]
 r137: [472..473]
 r138: [470..471]
 r139: [468..469]
 r140: [452..463]
 r141: [460..461]
 r142: [458..459]
 r143: [456..457]
 r144: [454..455]
 r145: [452..453]
 r146: [444..445]
 r147: [442..443]
 r148: [432..441]
 r149: [438..439]
 r150: [436..437]
 r151: [432..433]
 r152: [428..429]
 r153: [426..427]
 r154: [416..425]
 r155: [422..423]
 r156: [420..421]
 r157: [416..417]
 r158: [412..413]
 r159: [410..411]
 r160: [390..409]
 r161: [406..407]
 r162: [404..405]
 r163: [402..403]
 r164: [400..401]
 r165: [398..399]
 r166: [396..397]
 r167: [394..395]
 r168: [390..391]
 r169: [386..387]
 r170: [384..385]
 r171: [364..383]
 r172: [380..381]
 r173: [378..379]
 r174: [376..377]
 r175: [374..375]
 r176: [372..373]
 r177: [370..371]
 r178: [368..369]
 r179: [364..365]
 r180: [360..361]
 r181: [358..359]
 r182: [356..357]
 r183: [346..355]
 r184: [352..353]
 r185: [350..351]
 r186: [348..349]
 r187: [346..347]
 r188: [340..343]
 r189: [340..341]
 r190: [334..335]
 r191: [332..333]
 r192: [330..331]
 r193: [328..329]
 r194: [326..327]
 r195: [322..323]
 r196: [320..321]
 r197: [318..319]
 r198: [284..317]
 r199: [314..315]
 r200: [312..313]
 r201: [310..311]
 r202: [308..309]
 r203: [296..307]
 r204: [304..305]
 r205: [302..303]
 r206: [300..301]
 r207: [298..299]
 r208: [296..297]
 r209: [294..295]
 r210: [284..293]
 r211: [290..291]
 r212: [288..289]
 r213: [286..287]
 r214: [284..285]
 r215: [280..281]
 r216: [278..279]
 r217: [276..277]
 r218: [274..275]
 r219: [272..273]
 r220: [268..269]
 r221: [266..267]
 r222: [264..265]
 r223: [262..263]
 r224: [260..261]
 r225: [256..257]
 r226: [254..255]
 r227: [252..253]
 r228: [250..251]
 r229: [248..249]
 r230: [244..245]
 r231: [242..243]
 r232: [240..241]
 r233: [206..239]
 r234: [236..237]
 r235: [234..235]
 r236: [232..233]
 r237: [230..231]
 r238: [218..229]
 r239: [226..227]
 r240: [224..225]
 r241: [222..223]
 r242: [220..221]
 r243: [218..219]
 r244: [216..217]
 r245: [206..215]
 r246: [212..213]
 r247: [210..211]
 r248: [208..209]
 r249: [206..207]
 r250: [200..203]
 r251: [200..201]
 r252: [52..53]
 r253: [50..51]
 r254: [48..49]
 r255: [46..47]
 r256: [44..45]
 r257: [42..43]
 r258: [40..41]
 r259: [40..41]
 r260: [38..39]
 r261: [36..37]
 r262: [176..177]
 r263: [174..175]
 r264: [172..173]
 r265: [168..171]
 r266: [168..169]
 r267: [152..167]
 r268: [164..165]
 r269: [162..163]
 r270: [160..161]
 r271: [156..159]
 r272: [156..157]
 r273: [154..155]
 r274: [152..153]
 r275: [148..149]
 r276: [146..147]
 r277: [144..145]
 r278: [138..143]
 r279: [140..141]
 r280: [138..139]
 r281: [120..137]
 r282: [134..135]
 r283: [132..133]
 r284: [130..131]
 r285: [124..129]
 r286: [126..127]
 r287: [124..125]
 r288: [122..123]
 r289: [120..121]
 r290: [116..117]
 r291: [114..115]
 r292: [112..113]
 r293: [106..111]
 r294: [108..109]
 r295: [106..107]
 r296: [88..105]
 r297: [102..103]
 r298: [100..101]
 r299: [98..99]
 r300: [92..97]
 r301: [94..95]
 r302: [92..93]
 r303: [90..91]
 r304: [88..89]
 r305: [84..85]
 r306: [82..83]
 r307: [80..81]
 r308: [74..79]
 r309: [76..77]
 r310: [74..75]
 r311: [56..73]
 r312: [70..71]
 r313: [68..69]
 r314: [66..67]
 r315: [60..65]
 r316: [62..63]
 r317: [60..61]
 r318: [58..59]
 r319: [56..57]
 r320: [196..197]
 r321: [194..195]
 r322: [192..193]
 r323: [190..191]
 r324: [188..189]
 r325: [186..187]
 r326: [184..185]
 r327: [184..185]
 r328: [182..183]
 r329: [180..181]
 r330: [724..725]
 r331: [722..723]
 r332: [720..721]
 r333: [716..719]
 r334: [716..717]
 r335: [698..715]
 r336: [712..713]
 r337: [710..711]
 r338: [708..709]
 r339: [702..707]
 r340: [704..705]
 r341: [702..703]
 r342: [700..701]
 r343: [698..699]
 r344: [694..695]
 r345: [692..693]
 r346: [690..691]
 r347: [684..689]
 r348: [686..687]
 r349: [684..685]
 r350: [666..683]
 r351: [680..681]
 r352: [678..679]
 r353: [676..677]
 r354: [670..675]
 r355: [672..673]
 r356: [670..671]
 r357: [668..669]
 r358: [666..667]
 r359: [662..663]
 r360: [660..661]
 r361: [658..659]
 r362: [652..657]
 r363: [654..655]
 r364: [652..653]
 r365: [634..651]
 r366: [648..649]
 r367: [646..647]
 r368: [644..645]
 r369: [638..643]
 r370: [640..641]
 r371: [638..639]
 r372: [636..637]
 r373: [634..635]
 r374: [630..631]
 r375: [628..629]
 r376: [626..627]
 r377: [620..625]
 r378: [622..623]
 r379: [620..621]
 r380: [604..619]
 r381: [616..617]
 r382: [614..615]
 r383: [612..613]
 r384: [608..611]
 r385: [608..609]
 r386: [606..607]
 r387: [604..605]
 r388: [32..33]
 r389: [30..31]
 r390: [28..29]
 r391: [26..27]
 r392: [24..25]
 r393: [20..21]
 r394: [18..19]
 r395: [16..17]
 r396: [14..15]
 r397: [12..13]
 r398: [758..759]
 r399: [756..757]
 r400: [754..755]
 r401: [748..753]
 r402: [750..751]
 r403: [748..749]
 r404: [728..747]
 r405: [744..745]
 r406: [742..743]
 r407: [740..741]
 r408: [734..739]
 r409: [736..737]
 r410: [734..735]
 r411: [732..733]
 r412: [730..731]
 r413: [728..729]
 r414: [2..3]
 r415: [0..1]
 r416: [774..775]
 r417: [772..773] [768..769]
 r418: [770..771]
 r419: [766..767]
 r420: [602..603]
 r421: [598..599]
 r422: [594..595]
 r423: [596..597]
 r424: [590..591]
 r425: [590..591]
 r426: [584..585]
 r427: [580..581]
 r428: [574..575]
 r429: [570..571]
 r430: [566..567]
 r431: [562..563]
 r432: [552..553]
 r433: [548..549]
 r434: [544..545]
 r435: [540..541]
 r436: [530..531]
 r437: [526..527]
 r438: [518..519]
 r439: [514..515]
 r440: [506..507]
 r441: [502..503]
 r442: [484..485]
 r443: [480..481]
 r444: [478..479]
 r445: [494..495]
 r446: [490..491]
 r447: [488..489]
 r448: [486..487]
 r449: [486..487]
 r450: [476..477]
 r451: [472..473]
 r452: [466..467]
 r453: [464..465]
 r454: [462..463]
 r455: [458..459]
 r456: [450..451]
 r457: [448..449]
 r458: [446..447]
 r459: [442..443]
 r460: [440..441]
 r461: [434..435]
 r462: [430..431]
 r463: [426..427]
 r464: [424..425]
 r465: [418..419]
 r466: [414..415]
 r467: [410..411]
 r468: [408..409]
 r469: [404..405]
 r470: [392..393]
 r471: [388..389]
 r472: [384..385]
 r473: [382..383]
 r474: [378..379]
 r475: [366..367]
 r476: [362..363]
 r477: [358..359]
 r478: [354..355]
 r479: [350..351]
 r480: [344..345]
 r481: [342..343]
 r482: [338..339]
 r483: [338..339]
 r484: [336..337]
 r485: [332..333]
 r486: [324..325]
 r487: [320..321]
 r488: [316..317]
 r489: [312..313]
 r490: [306..307]
 r491: [302..303]
 r492: [292..293]
 r493: [288..289]
 r494: [282..283]
 r495: [278..279]
 r496: [270..271]
 r497: [266..267]
 r498: [258..259]
 r499: [254..255]
 r500: [246..247]
 r501: [242..243]
 r502: [238..239]
 r503: [234..235]
 r504: [228..229]
 r505: [224..225]
 r506: [214..215]
 r507: [210..211]
 r508: [204..205]
 r509: [202..203]
 r510: [178..179]
 r511: [174..175]
 r512: [170..171]
 r513: [166..167]
 r514: [162..163]
 r515: [158..159]
 r516: [150..151]
 r517: [146..147]
 r518: [142..143]
 r519: [136..137]
 r520: [132..133]
 r521: [128..129]
 r522: [118..119]
 r523: [114..115]
 r524: [110..111]
 r525: [104..105]
 r526: [100..101]
 r527: [96..97]
 r528: [86..87]
 r529: [82..83]
 r530: [78..79]
 r531: [72..73]
 r532: [68..69]
 r533: [64..65]
 r534: [54..55]
 r535: [50..51]
 r536: [726..727]
 r537: [722..723]
 r538: [718..719]
 r539: [714..715]
 r540: [710..711]
 r541: [706..707]
 r542: [696..697]
 r543: [692..693]
 r544: [688..689]
 r545: [682..683]
 r546: [678..679]
 r547: [674..675]
 r548: [664..665]
 r549: [660..661]
 r550: [656..657]
 r551: [650..651]
 r552: [646..647]
 r553: [642..643]
 r554: [632..633]
 r555: [628..629]
 r556: [624..625]
 r557: [618..619]
 r558: [614..615]
 r559: [610..611]
 r560: [198..199]
 r561: [194..195]
 r562: [34..35]
 r563: [30..31]
 r564: [22..23]
 r565: [18..19]
 r566: [10..11]
 r567: [760..761]
 r568: [756..757]
 r569: [752..753]
 r570: [746..747]
 r571: [742..743]
 r572: [738..739]
 r573: [8..9]
 r575: [592..593]

********** Assignment #1: **********

	 Assigning to 575 (cl=GENERAL_REGS, orig=424, freq=3, tfirst=575, tfreq=3)...
	   Assign 0 to reload r575 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 776
changing reg in insn 777
changing reg in insn 777
changing reg in insn 779
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 19
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 33
changing reg in insn 33
changing reg in insn 43
changing reg in insn 38
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 75
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 105
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 127
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 200
changing reg in insn 201
changing reg in insn 155
changing reg in insn 156
changing reg in insn 190
changing reg in insn 192
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 253
changing reg in insn 256
changing reg in insn 264
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 276
changing reg in insn 276
changing reg in insn 276
changing reg in insn 284
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 280
changing reg in insn 283
changing reg in insn 284
changing reg in insn 286
changing reg in insn 287
changing reg in insn 287
changing reg in insn 289
changing reg in insn 289
changing reg in insn 289
changing reg in insn 297
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 296
changing reg in insn 297
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 302
changing reg in insn 302
changing reg in insn 302
changing reg in insn 316
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 315
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 321
changing reg in insn 321
changing reg in insn 321
changing reg in insn 335
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 326
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 329
changing reg in insn 329
changing reg in insn 330
changing reg in insn 330
changing reg in insn 331
changing reg in insn 334
changing reg in insn 335
changing reg in insn 337
changing reg in insn 338
changing reg in insn 338
changing reg in insn 340
changing reg in insn 340
changing reg in insn 341
changing reg in insn 341
changing reg in insn 348
changing reg in insn 343
changing reg in insn 344
changing reg in insn 344
changing reg in insn 346
changing reg in insn 346
changing reg in insn 347
changing reg in insn 347
changing reg in insn 351
changing reg in insn 354
changing reg in insn 357
changing reg in insn 356
changing reg in insn 357
changing reg in insn 368
changing reg in insn 369
changing reg in insn 369
changing reg in insn 371
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 374
changing reg in insn 378
changing reg in insn 379
changing reg in insn 379
changing reg in insn 381
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 405
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 387
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 389
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 394
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 396
changing reg in insn 396
changing reg in insn 397
changing reg in insn 398
changing reg in insn 398
changing reg in insn 407
changing reg in insn 400
changing reg in insn 401
changing reg in insn 401
changing reg in insn 403
changing reg in insn 403
changing reg in insn 404
changing reg in insn 404
changing reg in insn 408
changing reg in insn 415
changing reg in insn 416
changing reg in insn 416
changing reg in insn 418
changing reg in insn 418
changing reg in insn 419
changing reg in insn 419
changing reg in insn 420
changing reg in insn 420
changing reg in insn 421
changing reg in insn 425
changing reg in insn 426
changing reg in insn 426
changing reg in insn 428
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 430
changing reg in insn 430
changing reg in insn 431
changing reg in insn 435
changing reg in insn 436
changing reg in insn 436
changing reg in insn 438
changing reg in insn 438
changing reg in insn 439
changing reg in insn 439
changing reg in insn 440
changing reg in insn 440
changing reg in insn 441
changing reg in insn 446
changing reg in insn 447
changing reg in insn 447
changing reg in insn 449
changing reg in insn 449
changing reg in insn 450
changing reg in insn 450
changing reg in insn 473
changing reg in insn 452
changing reg in insn 453
changing reg in insn 453
changing reg in insn 455
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 457
changing reg in insn 457
changing reg in insn 459
changing reg in insn 460
changing reg in insn 460
changing reg in insn 462
changing reg in insn 462
changing reg in insn 463
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 465
changing reg in insn 466
changing reg in insn 466
changing reg in insn 475
changing reg in insn 468
changing reg in insn 469
changing reg in insn 469
changing reg in insn 471
changing reg in insn 471
changing reg in insn 472
changing reg in insn 472
changing reg in insn 476
changing reg in insn 490
changing reg in insn 493
changing reg in insn 492
changing reg in insn 493
changing reg in insn 590
changing reg in insn 591
changing reg in insn 591
changing reg in insn 593
changing reg in insn 593
changing reg in insn 594
changing reg in insn 594
changing reg in insn 595
changing reg in insn 595
changing reg in insn 596
changing reg in insn 596
changing reg in insn 597
changing reg in insn 598
changing reg in insn 599
changing reg in insn 600
changing reg in insn 600
changing reg in insn 602
changing reg in insn 501
changing reg in insn 502
changing reg in insn 502
changing reg in insn 504
changing reg in insn 504
changing reg in insn 505
changing reg in insn 505
changing reg in insn 508
changing reg in insn 507
changing reg in insn 508
changing reg in insn 508
changing reg in insn 519
changing reg in insn 510
changing reg in insn 511
changing reg in insn 511
changing reg in insn 513
changing reg in insn 513
changing reg in insn 514
changing reg in insn 514
changing reg in insn 516
changing reg in insn 517
changing reg in insn 518
changing reg in insn 518
changing reg in insn 519
changing reg in insn 521
changing reg in insn 522
changing reg in insn 522
changing reg in insn 524
changing reg in insn 524
changing reg in insn 525
changing reg in insn 525
changing reg in insn 527
changing reg in insn 528
changing reg in insn 528
changing reg in insn 529
changing reg in insn 541
changing reg in insn 531
changing reg in insn 532
changing reg in insn 532
changing reg in insn 534
changing reg in insn 534
changing reg in insn 535
changing reg in insn 535
changing reg in insn 539
changing reg in insn 537
changing reg in insn 538
changing reg in insn 538
changing reg in insn 539
changing reg in insn 539
changing reg in insn 540
changing reg in insn 540
changing reg in insn 541
changing reg in insn 543
changing reg in insn 544
changing reg in insn 544
changing reg in insn 546
changing reg in insn 546
changing reg in insn 547
changing reg in insn 547
changing reg in insn 549
changing reg in insn 550
changing reg in insn 550
changing reg in insn 551
changing reg in insn 563
changing reg in insn 553
changing reg in insn 554
changing reg in insn 554
changing reg in insn 556
changing reg in insn 556
changing reg in insn 557
changing reg in insn 557
changing reg in insn 561
changing reg in insn 559
changing reg in insn 560
changing reg in insn 560
changing reg in insn 561
changing reg in insn 561
changing reg in insn 562
changing reg in insn 562
changing reg in insn 563
changing reg in insn 565
changing reg in insn 566
changing reg in insn 566
changing reg in insn 568
changing reg in insn 568
changing reg in insn 569
changing reg in insn 569
changing reg in insn 571
changing reg in insn 572
changing reg in insn 572
changing reg in insn 573
changing reg in insn 585
changing reg in insn 575
changing reg in insn 576
changing reg in insn 576
changing reg in insn 578
changing reg in insn 578
changing reg in insn 579
changing reg in insn 579
changing reg in insn 583
changing reg in insn 581
changing reg in insn 582
changing reg in insn 582
changing reg in insn 583
changing reg in insn 583
changing reg in insn 584
changing reg in insn 584
changing reg in insn 585
changing reg in insn 703
changing reg in insn 704
changing reg in insn 704
changing reg in insn 706
changing reg in insn 706
changing reg in insn 707
changing reg in insn 707
changing reg in insn 708
changing reg in insn 708
changing reg in insn 709
changing reg in insn 709
changing reg in insn 710
changing reg in insn 711
changing reg in insn 712
changing reg in insn 713
changing reg in insn 713
changing reg in insn 715
changing reg in insn 614
changing reg in insn 615
changing reg in insn 615
changing reg in insn 617
changing reg in insn 617
changing reg in insn 618
changing reg in insn 618
changing reg in insn 621
changing reg in insn 620
changing reg in insn 621
changing reg in insn 621
changing reg in insn 633
changing reg in insn 623
changing reg in insn 624
changing reg in insn 624
changing reg in insn 626
changing reg in insn 626
changing reg in insn 627
changing reg in insn 627
changing reg in insn 631
changing reg in insn 629
changing reg in insn 630
changing reg in insn 630
changing reg in insn 631
changing reg in insn 631
changing reg in insn 632
changing reg in insn 632
changing reg in insn 633
changing reg in insn 635
changing reg in insn 636
changing reg in insn 636
changing reg in insn 638
changing reg in insn 638
changing reg in insn 639
changing reg in insn 639
changing reg in insn 641
changing reg in insn 642
changing reg in insn 642
changing reg in insn 643
changing reg in insn 655
changing reg in insn 645
changing reg in insn 646
changing reg in insn 646
changing reg in insn 648
changing reg in insn 648
changing reg in insn 649
changing reg in insn 649
changing reg in insn 653
changing reg in insn 651
changing reg in insn 652
changing reg in insn 652
changing reg in insn 653
changing reg in insn 653
changing reg in insn 654
changing reg in insn 654
changing reg in insn 655
changing reg in insn 657
changing reg in insn 658
changing reg in insn 658
changing reg in insn 660
changing reg in insn 660
changing reg in insn 661
changing reg in insn 661
changing reg in insn 663
changing reg in insn 664
changing reg in insn 664
changing reg in insn 665
changing reg in insn 677
changing reg in insn 667
changing reg in insn 668
changing reg in insn 668
changing reg in insn 670
changing reg in insn 670
changing reg in insn 671
changing reg in insn 671
changing reg in insn 675
changing reg in insn 673
changing reg in insn 674
changing reg in insn 674
changing reg in insn 675
changing reg in insn 675
changing reg in insn 676
changing reg in insn 676
changing reg in insn 677
changing reg in insn 679
changing reg in insn 680
changing reg in insn 680
changing reg in insn 682
changing reg in insn 682
changing reg in insn 683
changing reg in insn 683
changing reg in insn 685
changing reg in insn 686
changing reg in insn 686
changing reg in insn 687
changing reg in insn 698
changing reg in insn 689
changing reg in insn 690
changing reg in insn 690
changing reg in insn 692
changing reg in insn 692
changing reg in insn 693
changing reg in insn 693
changing reg in insn 695
changing reg in insn 696
changing reg in insn 697
changing reg in insn 697
changing reg in insn 698
changing reg in insn 720
changing reg in insn 721
changing reg in insn 721
changing reg in insn 723
changing reg in insn 723
changing reg in insn 724
changing reg in insn 724
changing reg in insn 725
changing reg in insn 725
changing reg in insn 726
changing reg in insn 730
changing reg in insn 731
changing reg in insn 731
changing reg in insn 733
changing reg in insn 733
changing reg in insn 734
changing reg in insn 734
changing reg in insn 735
changing reg in insn 735
changing reg in insn 736
changing reg in insn 742
changing reg in insn 743
changing reg in insn 743
changing reg in insn 745
changing reg in insn 745
changing reg in insn 746
changing reg in insn 746
changing reg in insn 748
changing reg in insn 749
changing reg in insn 749
changing reg in insn 750
changing reg in insn 763
changing reg in insn 752
changing reg in insn 753
changing reg in insn 753
changing reg in insn 755
changing reg in insn 755
changing reg in insn 756
changing reg in insn 756
changing reg in insn 760
changing reg in insn 758
changing reg in insn 759
changing reg in insn 759
changing reg in insn 760
changing reg in insn 760
changing reg in insn 761
changing reg in insn 761
changing reg in insn 762
changing reg in insn 762
changing reg in insn 763
changing reg in insn 782
changing reg in insn 785
changing reg in insn 785
changing reg in insn 789
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 22
changing reg in insn 20
changing reg in insn 19
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 37
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 93
changing reg in insn 94
changing reg in insn 96
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 143
changing reg in insn 144
changing reg in insn 146
changing reg in insn 154
changing reg in insn 155
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 199
changing reg in insn 200
changing reg in insn 204
changing reg in insn 205
changing reg in insn 223
changing reg in insn 224
changing reg in insn 240
changing reg in insn 242
changing reg in insn 241
changing reg in insn 243
changing reg in insn 247
changing reg in insn 248
changing reg in insn 250
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 258
changing reg in insn 260
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 269
changing reg in insn 272
changing reg in insn 273
changing reg in insn 275
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 282
changing reg in insn 283
changing reg in insn 285
changing reg in insn 286
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 291
changing reg in insn 295
changing reg in insn 296
changing reg in insn 298
changing reg in insn 299
changing reg in insn 301
changing reg in insn 302
changing reg in insn 303
changing reg in insn 304
changing reg in insn 306
changing reg in insn 314
changing reg in insn 315
changing reg in insn 317
changing reg in insn 318
changing reg in insn 320
changing reg in insn 321
changing reg in insn 322
changing reg in insn 323
changing reg in insn 325
changing reg in insn 333
changing reg in insn 334
changing reg in insn 336
changing reg in insn 337
changing reg in insn 339
changing reg in insn 342
changing reg in insn 343
changing reg in insn 345
changing reg in insn 353
changing reg in insn 354
changing reg in insn 355
changing reg in insn 356
changing reg in insn 360
changing reg in insn 362
changing reg in insn 361
changing reg in insn 363
changing reg in insn 367
changing reg in insn 368
changing reg in insn 370
changing reg in insn 377
changing reg in insn 378
changing reg in insn 380
changing reg in insn 383
changing reg in insn 384
changing reg in insn 386
changing reg in insn 390
changing reg in insn 391
changing reg in insn 393
changing reg in insn 399
changing reg in insn 400
changing reg in insn 402
changing reg in insn 414
changing reg in insn 415
changing reg in insn 417
changing reg in insn 424
changing reg in insn 425
changing reg in insn 427
changing reg in insn 434
changing reg in insn 435
changing reg in insn 437
changing reg in insn 445
changing reg in insn 446
changing reg in insn 448
changing reg in insn 451
changing reg in insn 452
changing reg in insn 454
changing reg in insn 458
changing reg in insn 459
changing reg in insn 461
changing reg in insn 467
changing reg in insn 468
changing reg in insn 470
changing reg in insn 489
changing reg in insn 490
changing reg in insn 491
changing reg in insn 492
changing reg in insn 500
changing reg in insn 501
changing reg in insn 503
changing reg in insn 506
changing reg in insn 507
changing reg in insn 509
changing reg in insn 510
changing reg in insn 512
changing reg in insn 515
changing reg in insn 516
changing reg in insn 520
changing reg in insn 521
changing reg in insn 523
changing reg in insn 526
changing reg in insn 527
changing reg in insn 530
changing reg in insn 531
changing reg in insn 533
changing reg in insn 536
changing reg in insn 537
changing reg in insn 542
changing reg in insn 543
changing reg in insn 545
changing reg in insn 548
changing reg in insn 549
changing reg in insn 552
changing reg in insn 553
changing reg in insn 555
changing reg in insn 558
changing reg in insn 559
changing reg in insn 564
changing reg in insn 565
changing reg in insn 567
changing reg in insn 570
changing reg in insn 571
changing reg in insn 574
changing reg in insn 575
changing reg in insn 577
changing reg in insn 580
changing reg in insn 581
changing reg in insn 589
changing reg in insn 590
changing reg in insn 592
changing reg in insn 613
changing reg in insn 614
changing reg in insn 616
changing reg in insn 619
changing reg in insn 620
changing reg in insn 622
changing reg in insn 623
changing reg in insn 625
changing reg in insn 628
changing reg in insn 629
changing reg in insn 634
changing reg in insn 635
changing reg in insn 637
changing reg in insn 640
changing reg in insn 641
changing reg in insn 644
changing reg in insn 645
changing reg in insn 647
changing reg in insn 650
changing reg in insn 651
changing reg in insn 656
changing reg in insn 657
changing reg in insn 659
changing reg in insn 662
changing reg in insn 663
changing reg in insn 666
changing reg in insn 667
changing reg in insn 669
changing reg in insn 672
changing reg in insn 673
changing reg in insn 678
changing reg in insn 679
changing reg in insn 681
changing reg in insn 684
changing reg in insn 685
changing reg in insn 688
changing reg in insn 689
changing reg in insn 691
changing reg in insn 694
changing reg in insn 695
changing reg in insn 702
changing reg in insn 703
changing reg in insn 705
changing reg in insn 719
changing reg in insn 720
changing reg in insn 722
changing reg in insn 729
changing reg in insn 730
changing reg in insn 732
changing reg in insn 736
changing reg in insn 737
changing reg in insn 741
changing reg in insn 742
changing reg in insn 744
changing reg in insn 747
changing reg in insn 748
changing reg in insn 751
changing reg in insn 752
changing reg in insn 754
changing reg in insn 757
changing reg in insn 758
changing reg in insn 775
changing reg in insn 776
deleting insn with uid = 407.
deleting insn with uid = 475.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 79.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 163.
verify found no changes in insn with uid = 169.
verify found no changes in insn with uid = 180.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 194.
verify found no changes in insn with uid = 210.
verify found no changes in insn with uid = 216.
verify found no changes in insn with uid = 229.
verify found no changes in insn with uid = 235.
verify found no changes in insn with uid = 239.
verify found no changes in insn with uid = 244.
verify found no changes in insn with uid = 281.
verify found no changes in insn with uid = 294.
verify found no changes in insn with uid = 313.
verify found no changes in insn with uid = 332.
verify found no changes in insn with uid = 352.
verify found no changes in insn with uid = 364.
verify found no changes in insn with uid = 409.
verify found no changes in insn with uid = 477.
verify found no changes in insn with uid = 483.
verify found no changes in insn with uid = 485.


int read_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision1*, float**, float**, Endian_Check*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={395d,372u} r1={118d,89u,37e} r2={78d,48u,17e} r3={5d,5u} r4={41d,11u,2e} r5={61d,31u} r6={1d,231u} r7={1d,85u} r8={30d} r9={30d} r10={30d} r11={30d} r12={30d} r13={30d} r14={30d} r15={30d} r16={22e} r17={216d,28u} r18={30d} r19={30d} r20={1d,1u,33e} r21={31d} r22={31d} r23={31d} r24={31d} r25={31d} r26={31d} r27={31d} r28={31d} r29={30d} r30={30d} r31={30d} r32={30d} r33={30d} r34={30d} r35={30d} r36={30d} r37={31d,1u} r38={31d,1u} r39={30d} r40={30d} r45={30d} r46={30d} r47={30d} r48={30d} r49={30d} r50={30d} r51={30d} r52={30d} r53={30d} r54={30d} r55={30d} r56={30d} r57={30d} r58={30d} r59={30d} r60={30d} r61={30d} r62={30d} r63={30d} r64={30d} r65={30d} r66={30d} r67={30d} r68={30d} r69={30d} r70={30d} r71={30d} r72={30d} r73={30d} r74={30d} r75={30d} r76={30d} 
;;    total ref usage 3801{2787d,903u,111e} in 675{645 regular + 30 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) fmtext_o.cpp:459 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 792 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:463 90 {*movsi_internal}
     (nil))
(jump_insn 792 11 793 2 (set (pc)
        (label_ref 773)) fmtext_o.cpp:463 636 {jump}
     (nil)
 -> 773)
;;  succ:       54 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 793 792 778)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 85 86 87 88 416 417 418 419
(code_label 778 793 14 3 124 "" [1 uses])
(note 14 778 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 0 ax [416])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 1 dx [orig:85 D.6633 ] [85])
        (sign_extend:DI (reg:SI 0 ax [416]))) fmtext_o.cpp:464 142 {*extendsidi2_rex64}
     (nil))
(insn 17 16 18 3 (set (reg:DI 0 ax [417])
        (reg:DI 1 dx [orig:85 D.6633 ] [85])) fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg:DI 0 ax [417])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 497 {*ashldi3_1}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 0 ax [417])
                (plus:DI (reg:DI 0 ax [417])
                    (reg:DI 1 dx [orig:85 D.6633 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:85 D.6633 ] [85])
            (const_int 9 [0x9]))
        (nil)))
(insn 20 19 21 3 (parallel [
            (set (reg:DI 0 ax [418])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 497 {*ashldi3_1}
     (nil))
(insn 21 20 22 3 (set (reg:DI 0 ax [417])
        (reg:DI 0 ax [418])) fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:DI 1 dx [orig:86 D.6633 ] [86])
        (reg:DI 0 ax [417])) fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [419])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.6634 ] [87])
                (plus:DI (reg/f:DI 0 ax [419])
                    (reg:DI 1 dx [orig:86 D.6633 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:464 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:86 D.6633 ] [86]))
        (nil)))
(insn 25 24 26 3 (set (reg:SI 0 ax [orig:88 D.6632 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:87 D.6634 ] [87])
                (const_int 20 [0x14])) [0 _13->file_type+0 S4 A32])) fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.6632 ] [88])
            (const_int 0 [0]))) fmtext_o.cpp:464 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 27 26 28 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 770)
            (pc))) fmtext_o.cpp:464 596 {*jcc_1}
     (nil)
 -> 770)
;;  succ:       4 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 89 90 91 92 93 94 95 96 97 420 421 422 423 424 425 426 427
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:SI 0 ax [420])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:466 90 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 0 ax [orig:89 D.6633 ] [89])
        (sign_extend:DI (reg:SI 0 ax [420]))) fmtext_o.cpp:466 142 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 4 (parallel [
            (set (reg:DI 1 dx [orig:90 D.6633 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.6633 ] [89])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 497 {*ashldi3_1}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 0 ax [421])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg/f:DI 3 bx [orig:91 D.6635 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 D.6633 ] [90])
                    (reg/f:DI 0 ax [421])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.6633 ] [90]))
        (nil)))
(insn 34 33 35 4 (set (reg:SI 0 ax [423])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:466 90 {*movsi_internal}
     (nil))
(insn 35 34 822 4 (set (reg:DI 0 ax [422])
        (sign_extend:DI (reg:SI 0 ax [423]))) fmtext_o.cpp:466 142 {*extendsidi2_rex64}
     (nil))
(insn 822 35 36 4 (set (reg:DI 0 ax [424])
        (reg:DI 0 ax [422])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 36 822 823 4 (parallel [
            (set (reg:DI 0 ax [424])
                (ashift:DI (reg:DI 0 ax [424])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 497 {*ashldi3_1}
     (nil))
(insn 823 36 37 4 (set (reg:DI 1 dx [424])
        (reg:DI 0 ax [424])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 37 823 38 4 (set (reg/f:DI 0 ax [425])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 file+0 S8 A64])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.6636 ] [92])
                (plus:DI (reg/f:DI 0 ax [425])
                    (reg:DI 1 dx [424])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:466 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 file+0 S8 A64])
            (reg:DI 1 dx [424]))
        (nil)))
(insn 39 38 40 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2b8e1bf85098 *.LC15>)) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:92 D.6636 ] [92])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(call_insn 41 40 42 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b8e1bc4bd00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:466 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 42 41 43 4 (set (reg/f:DI 0 ax [orig:93 D.6637 ] [93])
        (reg:DI 0 ax)) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:91 D.6635 ] [91]) [0 *_18+0 S8 A64])
        (reg/f:DI 0 ax [orig:93 D.6637 ] [93])) fmtext_o.cpp:466 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:SI 0 ax [426])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:468 90 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 0 ax [orig:94 D.6633 ] [94])
        (sign_extend:DI (reg:SI 0 ax [426]))) fmtext_o.cpp:468 142 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 1 dx [orig:95 D.6633 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.6633 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:468 497 {*ashldi3_1}
     (nil))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [427])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:468 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.6635 ] [96])
                (plus:DI (reg/f:DI 0 ax [427])
                    (reg:DI 1 dx [orig:95 D.6633 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:468 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.6633 ] [95]))
        (nil)))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [orig:97 D.6637 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [orig:96 D.6635 ] [96]) [0 *_25+0 S8 A64])) fmtext_o.cpp:468 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:97 D.6637 ] [97])
            (const_int 0 [0]))) fmtext_o.cpp:468 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 51 50 52 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) fmtext_o.cpp:468 596 {*jcc_1}
     (nil)
 -> 58)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 52 51 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b8e1bf85130 *.LC16>)) fmtext_o.cpp:469 89 {*movdi_internal}
     (nil))
(call_insn 54 53 55 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:469 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 55 54 56 5 (set (reg:SI 5 di)
        (const_int 4 [0x4])) fmtext_o.cpp:470 90 {*movsi_internal}
     (nil))
(call_insn 56 55 57 5 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b8e1bab3900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:470 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 57 56 58)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 58 57 59 6 94 "" [1 uses])
(note 59 58 60 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:473 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 61 60 62 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) fmtext_o.cpp:473 596 {*jcc_1}
     (nil)
 -> 91)
;;  succ:       7 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 98 99 100 101 102 103 104 105 106 107 428 429 430 431
(note 62 61 63 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 7 (set (reg:SI 0 ax [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:474 90 {*movsi_internal}
     (nil))
(insn 64 63 65 7 (set (reg:DI 0 ax [orig:98 D.6633 ] [98])
        (sign_extend:DI (reg:SI 0 ax [428]))) fmtext_o.cpp:474 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 7 (parallel [
            (set (reg:DI 1 dx [orig:99 D.6633 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 D.6633 ] [98])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 497 {*ashldi3_1}
     (nil))
(insn 66 65 67 7 (set (reg/f:DI 0 ax [429])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 67 66 68 7 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.6635 ] [100])
                (plus:DI (reg/f:DI 0 ax [429])
                    (reg:DI 1 dx [orig:99 D.6633 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.6633 ] [99]))
        (nil)))
(insn 68 67 69 7 (set (reg/f:DI 1 dx [orig:101 D.6637 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [orig:100 D.6635 ] [100]) [0 *_29+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 69 68 70 7 (set (reg:SI 0 ax [430])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:474 90 {*movsi_internal}
     (nil))
(insn 70 69 71 7 (set (reg:DI 0 ax [orig:102 D.6633 ] [102])
        (sign_extend:DI (reg:SI 0 ax [430]))) fmtext_o.cpp:474 142 {*extendsidi2_rex64}
     (nil))
(insn 71 70 72 7 (parallel [
            (set (reg:DI 2 cx [orig:103 D.6633 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.6633 ] [102])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 497 {*ashldi3_1}
     (nil))
(insn 72 71 73 7 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 73 72 74 7 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.6638 ] [104])
                (plus:DI (reg/f:DI 0 ax [431])
                    (reg:DI 2 cx [orig:103 D.6633 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:474 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:103 D.6633 ] [103]))
        (nil)))
(insn 74 73 75 7 (set (reg/f:DI 0 ax [orig:105 D.6639 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [orig:104 D.6638 ] [104]) [0 *_34+0 S8 A64])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 75 74 76 7 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:101 D.6637 ] [101])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 76 75 77 7 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 77 76 78 7 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 78 77 79 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:105 D.6639 ] [105])) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(call_insn 79 78 80 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b8e1bc5b900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:474 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 80 79 81 7 (set (reg:DI 0 ax [orig:106 D.6633 ] [106])
        (reg:DI 0 ax)) fmtext_o.cpp:474 89 {*movdi_internal}
     (nil))
(insn 81 80 82 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:106 D.6633 ] [106])
            (const_int 1 [0x1]))) fmtext_o.cpp:474 8 {*cmpdi_1}
     (nil))
(insn 82 81 83 7 (set (reg:QI 0 ax [orig:107 D.6640 ] [107])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:474 592 {*setcc_qi}
     (nil))
(insn 83 82 84 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:107 D.6640 ] [107])
            (const_int 0 [0]))) fmtext_o.cpp:474 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 84 83 85 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) fmtext_o.cpp:474 596 {*jcc_1}
     (nil)
 -> 121)
;;  succ:       8 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 85 84 86 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b8e1bf851c8 *.LC17>)) fmtext_o.cpp:475 89 {*movdi_internal}
     (nil))
(call_insn 87 86 88 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:475 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 88 87 89 8 (set (reg:SI 5 di)
        (const_int 5 [0x5])) fmtext_o.cpp:476 90 {*movsi_internal}
     (nil))
(call_insn 89 88 90 8 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b8e1bab3900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:476 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 90 89 91)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 108 109 110 111 112 113 114 115 116 117 432 433 434 435
(code_label 91 90 92 9 95 "" [1 uses])
(note 92 91 93 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 9 (set (reg:SI 0 ax [432])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:479 90 {*movsi_internal}
     (nil))
(insn 94 93 95 9 (set (reg:DI 0 ax [orig:108 D.6633 ] [108])
        (sign_extend:DI (reg:SI 0 ax [432]))) fmtext_o.cpp:479 142 {*extendsidi2_rex64}
     (nil))
(insn 95 94 96 9 (parallel [
            (set (reg:DI 1 dx [orig:109 D.6633 ] [109])
                (ashift:DI (reg:DI 0 ax [orig:108 D.6633 ] [108])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 497 {*ashldi3_1}
     (nil))
(insn 96 95 97 9 (set (reg/f:DI 0 ax [433])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 97 96 98 9 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.6635 ] [110])
                (plus:DI (reg/f:DI 0 ax [433])
                    (reg:DI 1 dx [orig:109 D.6633 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:109 D.6633 ] [109]))
        (nil)))
(insn 98 97 99 9 (set (reg/f:DI 1 dx [orig:111 D.6637 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [orig:110 D.6635 ] [110]) [0 *_41+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 99 98 100 9 (set (reg:SI 0 ax [434])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:479 90 {*movsi_internal}
     (nil))
(insn 100 99 101 9 (set (reg:DI 0 ax [orig:112 D.6633 ] [112])
        (sign_extend:DI (reg:SI 0 ax [434]))) fmtext_o.cpp:479 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 9 (parallel [
            (set (reg:DI 2 cx [orig:113 D.6633 ] [113])
                (ashift:DI (reg:DI 0 ax [orig:112 D.6633 ] [112])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 497 {*ashldi3_1}
     (nil))
(insn 102 101 103 9 (set (reg/f:DI 0 ax [435])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 103 102 104 9 (parallel [
            (set (reg/f:DI 0 ax [orig:114 D.6638 ] [114])
                (plus:DI (reg/f:DI 0 ax [435])
                    (reg:DI 2 cx [orig:113 D.6633 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:479 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:113 D.6633 ] [113]))
        (nil)))
(insn 104 103 105 9 (set (reg/f:DI 0 ax [orig:115 D.6639 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [orig:114 D.6638 ] [114]) [0 *_45+0 S8 A64])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 105 104 106 9 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:111 D.6637 ] [111])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 106 105 107 9 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 107 106 108 9 (set (reg:DI 4 si)
        (const_int 32 [0x20])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 108 107 109 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:115 D.6639 ] [115])) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(call_insn 109 108 110 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b8e1bc5b900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:479 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 110 109 111 9 (set (reg:DI 0 ax [orig:116 D.6633 ] [116])
        (reg:DI 0 ax)) fmtext_o.cpp:479 89 {*movdi_internal}
     (nil))
(insn 111 110 112 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:116 D.6633 ] [116])
            (const_int 1 [0x1]))) fmtext_o.cpp:479 8 {*cmpdi_1}
     (nil))
(insn 112 111 113 9 (set (reg:QI 0 ax [orig:117 D.6640 ] [117])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:479 592 {*setcc_qi}
     (nil))
(insn 113 112 114 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:117 D.6640 ] [117])
            (const_int 0 [0]))) fmtext_o.cpp:479 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 114 113 115 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) fmtext_o.cpp:479 596 {*jcc_1}
     (nil)
 -> 121)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 115 114 116 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x2b8e1c013be0 *.LC29>)) fmtext_o.cpp:480 89 {*movdi_internal}
     (nil))
(call_insn 117 116 118 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:480 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 118 117 119 10 (set (reg:SI 5 di)
        (const_int 5 [0x5])) fmtext_o.cpp:481 90 {*movsi_internal}
     (nil))
(call_insn 119 118 120 10 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b8e1bab3900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:481 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 120 119 121)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 121 122 436 437
(code_label 121 120 122 11 96 "" [2 uses])
(note 122 121 123 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 11 (set (reg:SI 0 ax [436])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:486 90 {*movsi_internal}
     (nil))
(insn 124 123 125 11 (set (reg:DI 0 ax [orig:118 D.6633 ] [118])
        (sign_extend:DI (reg:SI 0 ax [436]))) fmtext_o.cpp:486 142 {*extendsidi2_rex64}
     (nil))
(insn 125 124 126 11 (parallel [
            (set (reg:DI 1 dx [orig:119 D.6633 ] [119])
                (ashift:DI (reg:DI 0 ax [orig:118 D.6633 ] [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:486 497 {*ashldi3_1}
     (nil))
(insn 126 125 127 11 (set (reg/f:DI 0 ax [437])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:486 89 {*movdi_internal}
     (nil))
(insn 127 126 128 11 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.6638 ] [120])
                (plus:DI (reg/f:DI 0 ax [437])
                    (reg:DI 1 dx [orig:119 D.6633 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:486 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:119 D.6633 ] [119]))
        (nil)))
(insn 128 127 129 11 (set (reg/f:DI 0 ax [orig:121 D.6639 ] [121])
        (mem/f:DI (reg/f:DI 0 ax [orig:120 D.6638 ] [120]) [0 *_52+0 S8 A64])) fmtext_o.cpp:486 89 {*movdi_internal}
     (nil))
(insn 129 128 130 11 (set (reg:HI 0 ax [orig:122 D.6641 ] [122])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:121 D.6639 ] [121])
                (const_int 26 [0x1a])) [0 _53->status.number+0 S2 A16])) fmtext_o.cpp:486 92 {*movhi_internal}
     (nil))
(insn 130 129 131 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:122 D.6641 ] [122])
            (const_int 69 [0x45]))) fmtext_o.cpp:486 6 {*cmphi_1}
     (nil))
(jump_insn 131 130 132 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 152)
            (pc))) fmtext_o.cpp:486 596 {*jcc_1}
     (nil)
 -> 152)
;;  succ:       14
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 123 124 125 126 127 438 439
(note 132 131 133 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 12 (set (reg:SI 0 ax [438])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:487 90 {*movsi_internal}
     (nil))
(insn 134 133 135 12 (set (reg:DI 0 ax [orig:123 D.6633 ] [123])
        (sign_extend:DI (reg:SI 0 ax [438]))) fmtext_o.cpp:487 142 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 12 (parallel [
            (set (reg:DI 1 dx [orig:124 D.6633 ] [124])
                (ashift:DI (reg:DI 0 ax [orig:123 D.6633 ] [123])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:487 497 {*ashldi3_1}
     (nil))
(insn 136 135 137 12 (set (reg/f:DI 0 ax [439])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:487 89 {*movdi_internal}
     (nil))
(insn 137 136 138 12 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.6638 ] [125])
                (plus:DI (reg/f:DI 0 ax [439])
                    (reg:DI 1 dx [orig:124 D.6633 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:487 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:124 D.6633 ] [124]))
        (nil)))
(insn 138 137 139 12 (set (reg/f:DI 0 ax [orig:126 D.6639 ] [126])
        (mem/f:DI (reg/f:DI 0 ax [orig:125 D.6638 ] [125]) [0 *_57+0 S8 A64])) fmtext_o.cpp:487 89 {*movdi_internal}
     (nil))
(insn 139 138 140 12 (set (reg:HI 0 ax [orig:127 D.6641 ] [127])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:126 D.6639 ] [126])
                (const_int 26 [0x1a])) [0 _58->status.number+0 S2 A16])) fmtext_o.cpp:487 92 {*movhi_internal}
     (nil))
(insn 140 139 141 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:127 D.6641 ] [127])
            (const_int 73 [0x49]))) fmtext_o.cpp:486 6 {*cmphi_1}
     (nil))
(jump_insn 141 140 142 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 152)
            (pc))) fmtext_o.cpp:486 596 {*jcc_1}
     (nil)
 -> 152)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 129 130 131 132 440 441
(note 142 141 143 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 13 (set (reg:SI 0 ax [440])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:488 90 {*movsi_internal}
     (nil))
(insn 144 143 145 13 (set (reg:DI 0 ax [orig:128 D.6633 ] [128])
        (sign_extend:DI (reg:SI 0 ax [440]))) fmtext_o.cpp:488 142 {*extendsidi2_rex64}
     (nil))
(insn 145 144 146 13 (parallel [
            (set (reg:DI 1 dx [orig:129 D.6633 ] [129])
                (ashift:DI (reg:DI 0 ax [orig:128 D.6633 ] [128])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:488 497 {*ashldi3_1}
     (nil))
(insn 146 145 147 13 (set (reg/f:DI 0 ax [441])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:488 89 {*movdi_internal}
     (nil))
(insn 147 146 148 13 (parallel [
            (set (reg/f:DI 0 ax [orig:130 D.6638 ] [130])
                (plus:DI (reg/f:DI 0 ax [441])
                    (reg:DI 1 dx [orig:129 D.6633 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:488 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:129 D.6633 ] [129]))
        (nil)))
(insn 148 147 149 13 (set (reg/f:DI 0 ax [orig:131 D.6639 ] [131])
        (mem/f:DI (reg/f:DI 0 ax [orig:130 D.6638 ] [130]) [0 *_62+0 S8 A64])) fmtext_o.cpp:488 89 {*movdi_internal}
     (nil))
(insn 149 148 150 13 (set (reg:HI 0 ax [orig:132 D.6641 ] [132])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:131 D.6639 ] [131])
                (const_int 26 [0x1a])) [0 _63->status.number+0 S2 A16])) fmtext_o.cpp:488 92 {*movhi_internal}
     (nil))
(insn 150 149 151 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:132 D.6641 ] [132])
            (const_int 2073 [0x819]))) fmtext_o.cpp:487 6 {*cmphi_1}
     (nil))
(jump_insn 151 150 152 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 197)
            (pc))) fmtext_o.cpp:487 596 {*jcc_1}
     (nil)
 -> 197)
;;  succ:       14 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 134 442
(code_label 152 151 153 14 97 "" [2 uses])
(note 153 152 154 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 154 153 155 14 (set (reg/f:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:490 89 {*movdi_internal}
     (nil))
(insn 155 154 156 14 (set (reg:SI 0 ax [orig:134 D.6632 ] [134])
        (mem/j:SI (reg/f:DI 0 ax [442]) [0 endianCheck_65(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:490 90 {*movsi_internal}
     (nil))
(insn 156 155 157 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:134 D.6632 ] [134])
            (const_int 0 [0]))) fmtext_o.cpp:490 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 157 156 158 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) fmtext_o.cpp:490 596 {*jcc_1}
     (nil)
 -> 174)
;;  succ:       15 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 158 157 159 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:491 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 160 159 161 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 166)
            (pc))) fmtext_o.cpp:491 596 {*jcc_1}
     (nil)
 -> 166)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 161 160 162 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x2b8e1c013c78 *.LC30>)) fmtext_o.cpp:492 89 {*movdi_internal}
     (nil))
(call_insn 163 162 794 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:492 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 794 163 795 16 (set (pc)
        (label_ref 187)) 636 {jump}
     (nil)
 -> 187)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 795 794 166)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 166 795 167 17 100 "" [1 uses])
(note 167 166 168 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x2b8e1c013d10 *.LC31>)) fmtext_o.cpp:494 89 {*movdi_internal}
     (nil))
(call_insn 169 168 796 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:494 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 796 169 797 17 (set (pc)
        (label_ref 187)) 636 {jump}
     (nil)
 -> 187)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 797 796 174)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 174 797 175 18 99 "" [1 uses])
(note 175 174 176 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:496 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 177 176 178 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 183)
            (pc))) fmtext_o.cpp:496 596 {*jcc_1}
     (nil)
 -> 183)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 178 177 179 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 179 178 180 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x2b8e1c013da8 *.LC32>)) fmtext_o.cpp:497 89 {*movdi_internal}
     (nil))
(call_insn 180 179 798 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:497 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 798 180 799 19 (set (pc)
        (label_ref 187)) 636 {jump}
     (nil)
 -> 187)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 799 798 183)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 183 799 184 20 103 "" [1 uses])
(note 184 183 185 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 185 184 186 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x2b8e1c013e40 *.LC33>)) fmtext_o.cpp:499 89 {*movdi_internal}
     (nil))
(call_insn 186 185 187 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:499 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 [100.0%] 
;;              17 [100.0%] 
;;              20 (FALLTHRU)
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 135 443 444
(code_label 187 186 188 21 102 "" [3 uses])
(note 188 187 189 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 21 (set (reg/f:DI 0 ax [443])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:501 89 {*movdi_internal}
     (nil))
(insn 190 189 191 21 (set (reg:SI 1 dx [orig:135 D.6632 ] [135])
        (mem/j:SI (reg/f:DI 0 ax [443]) [0 endianCheck_65(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:501 90 {*movsi_internal}
     (nil))
(insn 191 190 192 21 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:501 89 {*movdi_internal}
     (nil))
(insn 192 191 193 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [444])
                (const_int 4 [0x4])) [0 endianCheck_65(D)->fileStruct+0 S4 A32])
        (reg:SI 1 dx [orig:135 D.6632 ] [135])) fmtext_o.cpp:501 90 {*movsi_internal}
     (nil))
(insn 193 192 194 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x2b8e1c013ed8 *.LC34>)) fmtext_o.cpp:502 89 {*movdi_internal}
     (nil))
(call_insn 194 193 800 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:502 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 800 194 801 21 (set (pc)
        (label_ref 245)) fmtext_o.cpp:502 636 {jump}
     (nil)
 -> 245)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 801 800 197)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133 445
(code_label 197 801 198 22 98 "" [1 uses])
(note 198 197 199 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 199 198 200 22 (set (reg/f:DI 0 ax [445])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:504 89 {*movdi_internal}
     (nil))
(insn 200 199 201 22 (set (reg:SI 0 ax [orig:133 D.6632 ] [133])
        (mem/j:SI (reg/f:DI 0 ax [445]) [0 endianCheck_65(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:504 90 {*movsi_internal}
     (nil))
(insn 201 200 202 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:133 D.6632 ] [133])
            (const_int 0 [0]))) fmtext_o.cpp:504 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 202 201 203 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 221)
            (pc))) fmtext_o.cpp:504 596 {*jcc_1}
     (nil)
 -> 221)
;;  succ:       23 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 446
(note 203 202 204 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 204 203 205 23 (set (reg/f:DI 0 ax [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:505 89 {*movdi_internal}
     (nil))
(insn 205 204 206 23 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [446])
                (const_int 4 [0x4])) [0 endianCheck_65(D)->fileStruct+0 S4 A32])
        (const_int 1 [0x1])) fmtext_o.cpp:505 90 {*movsi_internal}
     (nil))
(insn 206 205 207 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:506 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 207 206 208 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 213)
            (pc))) fmtext_o.cpp:506 596 {*jcc_1}
     (nil)
 -> 213)
;;  succ:       24 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 208 207 209 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 210 24 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x2b8e1c013da8 *.LC32>)) fmtext_o.cpp:507 89 {*movdi_internal}
     (nil))
(call_insn 210 209 802 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:507 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 802 210 803 24 (set (pc)
        (label_ref 236)) 636 {jump}
     (nil)
 -> 236)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 803 802 213)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 213 803 214 25 106 "" [1 uses])
(note 214 213 215 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 215 214 216 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x2b8e1c013e40 *.LC33>)) fmtext_o.cpp:509 89 {*movdi_internal}
     (nil))
(call_insn 216 215 804 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:509 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 804 216 805 25 (set (pc)
        (label_ref 236)) 636 {jump}
     (nil)
 -> 236)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 805 804 221)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 447
(code_label 221 805 222 26 105 "" [1 uses])
(note 222 221 223 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 223 222 224 26 (set (reg/f:DI 0 ax [447])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:511 89 {*movdi_internal}
     (nil))
(insn 224 223 225 26 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [447])
                (const_int 4 [0x4])) [0 endianCheck_65(D)->fileStruct+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:511 90 {*movsi_internal}
     (nil))
(insn 225 224 226 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:512 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 226 225 227 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 232)
            (pc))) fmtext_o.cpp:512 596 {*jcc_1}
     (nil)
 -> 232)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 227 226 228 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 27 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x2b8e1c013c78 *.LC30>)) fmtext_o.cpp:513 89 {*movdi_internal}
     (nil))
(call_insn 229 228 806 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:513 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 806 229 807 27 (set (pc)
        (label_ref 236)) 636 {jump}
     (nil)
 -> 236)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 807 806 232)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 232 807 233 28 109 "" [1 uses])
(note 233 232 234 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 235 28 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x2b8e1c013d10 *.LC31>)) fmtext_o.cpp:515 89 {*movdi_internal}
     (nil))
(call_insn 235 234 236 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:515 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 [100.0%] 
;;              25 [100.0%] 
;;              28 (FALLTHRU)
;;              27 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 448 449
(code_label 236 235 237 29 108 "" [3 uses])
(note 237 236 238 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x2b8e1c020000 *.LC35>)) fmtext_o.cpp:517 89 {*movdi_internal}
     (nil))
(call_insn 239 238 240 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:517 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 240 239 241 29 (set (reg:SI 1 dx [448])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:518 90 {*movsi_internal}
     (nil))
(insn 241 240 242 29 (set (reg:DI 0 ax [449])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:518 89 {*movdi_internal}
     (nil))
(insn 242 241 243 29 (set (reg:SI 4 si)
        (reg:SI 1 dx [448])) fmtext_o.cpp:518 90 {*movsi_internal}
     (nil))
(insn 243 242 244 29 (set (reg:DI 5 di)
        (reg:DI 0 ax [449])) fmtext_o.cpp:518 89 {*movdi_internal}
     (nil))
(call_insn 244 243 245 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16main_header_swapPP16Data_file_headeri") [flags 0x41]  <function_decl 0x2b8e1bd8e300 main_header_swap>) [0 main_header_swap S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:518 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;;              21 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136 137 138 139 140 141 142 143 144 145 450 451 452 453 454 455
(code_label 245 244 246 30 104 "" [1 uses])
(note 246 245 247 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 30 (set (reg:SI 0 ax [450])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 248 247 249 30 (set (reg:DI 0 ax [orig:136 D.6633 ] [136])
        (sign_extend:DI (reg:SI 0 ax [450]))) fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 249 248 250 30 (parallel [
            (set (reg:DI 1 dx [orig:137 D.6633 ] [137])
                (ashift:DI (reg:DI 0 ax [orig:136 D.6633 ] [136])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:521 497 {*ashldi3_1}
     (nil))
(insn 250 249 251 30 (set (reg/f:DI 0 ax [451])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 251 250 252 30 (parallel [
            (set (reg/f:DI 0 ax [orig:138 D.6638 ] [138])
                (plus:DI (reg/f:DI 0 ax [451])
                    (reg:DI 1 dx [orig:137 D.6633 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:521 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:137 D.6633 ] [137]))
        (nil)))
(insn 252 251 253 30 (set (reg/f:DI 0 ax [orig:139 D.6639 ] [139])
        (mem/f:DI (reg/f:DI 0 ax [orig:138 D.6638 ] [138]) [0 *_71+0 S8 A64])) fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 253 252 254 30 (set (reg:SI 0 ax [452])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:139 D.6639 ] [139])
                (const_int 8 [0x8])) [0 _72->np.number+0 S4 A32])) fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 254 253 255 30 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [452])) fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 255 254 256 30 (set (reg/f:DI 0 ax [453])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:524 89 {*movdi_internal}
     (nil))
(insn 256 255 257 30 (set (reg:SI 1 dx [orig:140 D.6632 ] [140])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [453])
                (const_int 24 [0x18])) [0 preprocess_12(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:524 90 {*movsi_internal}
     (nil))
(insn 257 256 258 30 (set (reg:SI 0 ax [454])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:524 90 {*movsi_internal}
     (nil))
(insn 258 257 259 30 (set (reg:DI 0 ax [orig:141 D.6633 ] [141])
        (sign_extend:DI (reg:SI 0 ax [454]))) fmtext_o.cpp:524 142 {*extendsidi2_rex64}
     (nil))
(insn 259 258 260 30 (parallel [
            (set (reg:DI 2 cx [orig:142 D.6633 ] [142])
                (ashift:DI (reg:DI 0 ax [orig:141 D.6633 ] [141])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:524 497 {*ashldi3_1}
     (nil))
(insn 260 259 261 30 (set (reg/f:DI 0 ax [455])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:524 89 {*movdi_internal}
     (nil))
(insn 261 260 262 30 (parallel [
            (set (reg/f:DI 0 ax [orig:143 D.6638 ] [143])
                (plus:DI (reg/f:DI 0 ax [455])
                    (reg:DI 2 cx [orig:142 D.6633 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:524 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:142 D.6633 ] [142]))
        (nil)))
(insn 262 261 263 30 (set (reg/f:DI 0 ax [orig:144 D.6639 ] [144])
        (mem/f:DI (reg/f:DI 0 ax [orig:143 D.6638 ] [143]) [0 *_77+0 S8 A64])) fmtext_o.cpp:524 89 {*movdi_internal}
     (nil))
(insn 263 262 264 30 (set (reg:SI 0 ax [orig:145 D.6632 ] [145])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:144 D.6639 ] [144])
                (const_int 8 [0x8])) [0 _78->np.number+0 S4 A32])) fmtext_o.cpp:524 90 {*movsi_internal}
     (nil))
(insn 264 263 265 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:140 D.6632 ] [140])
            (reg:SI 0 ax [orig:145 D.6632 ] [145]))) fmtext_o.cpp:524 7 {*cmpsi_1}
     (nil))
(jump_insn 265 264 266 30 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 270)
            (pc))) fmtext_o.cpp:524 596 {*jcc_1}
     (nil)
 -> 270)
;;  succ:       31 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 456 457
(note 266 265 267 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 31 (set (reg/f:DI 0 ax [456])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) fmtext_o.cpp:525 89 {*movdi_internal}
     (nil))
(insn 268 267 269 31 (set (reg:SI 0 ax [457])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [456])
                (const_int 24 [0x18])) [0 preprocess_12(D)->data_zero_fill+0 S4 A32])) fmtext_o.cpp:525 90 {*movsi_internal}
     (nil))
(insn 269 268 270 31 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [457])) fmtext_o.cpp:525 90 {*movsi_internal}
     (nil))
;;  succ:       32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;;              31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481
(code_label 270 269 271 32 110 "" [1 uses])
(note 271 270 272 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 32 (set (reg:SI 0 ax [458])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:527 90 {*movsi_internal}
     (nil))
(insn 273 272 274 32 (set (reg:DI 0 ax [orig:146 D.6633 ] [146])
        (sign_extend:DI (reg:SI 0 ax [458]))) fmtext_o.cpp:527 142 {*extendsidi2_rex64}
     (nil))
(insn 274 273 275 32 (parallel [
            (set (reg:DI 1 dx [orig:147 D.6633 ] [147])
                (ashift:DI (reg:DI 0 ax [orig:146 D.6633 ] [146])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:527 497 {*ashldi3_1}
     (nil))
(insn 275 274 276 32 (set (reg/f:DI 0 ax [459])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 out_data+0 S8 A64])) fmtext_o.cpp:527 89 {*movdi_internal}
     (nil))
(insn 276 275 277 32 (parallel [
            (set (reg/f:DI 3 bx [orig:148 D.6642 ] [148])
                (plus:DI (reg:DI 1 dx [orig:147 D.6633 ] [147])
                    (reg/f:DI 0 ax [459])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:527 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:147 D.6633 ] [147]))
        (nil)))
(insn 277 276 278 32 (set (reg:SI 0 ax [460])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:527 90 {*movsi_internal}
     (nil))
(insn 278 277 279 32 (set (reg:DI 0 ax [orig:149 D.6633 ] [149])
        (sign_extend:DI (reg:SI 0 ax [460]))) fmtext_o.cpp:527 142 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 32 (parallel [
            (set (reg:DI 0 ax [orig:150 D.6633 ] [150])
                (ashift:DI (reg:DI 0 ax [orig:149 D.6633 ] [149])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:527 497 {*ashldi3_1}
     (nil))
(insn 280 279 281 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:150 D.6633 ] [150])) fmtext_o.cpp:527 89 {*movdi_internal}
     (nil))
(call_insn 281 280 282 32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:527 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 282 281 283 32 (set (reg/f:DI 0 ax [461])
        (reg:DI 0 ax)) fmtext_o.cpp:527 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [461])
        (nil)))
(insn 283 282 284 32 (set (reg/f:DI 0 ax [orig:151 D.6643 ] [151])
        (reg/f:DI 0 ax [461])) fmtext_o.cpp:527 89 {*movdi_internal}
     (nil))
(insn 284 283 285 32 (set (mem/f:DI (reg/f:DI 3 bx [orig:148 D.6642 ] [148]) [0 *_84+0 S8 A64])
        (reg/f:DI 0 ax [orig:151 D.6643 ] [151])) fmtext_o.cpp:527 89 {*movdi_internal}
     (nil))
(insn 285 284 286 32 (set (reg:SI 0 ax [462])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:528 90 {*movsi_internal}
     (nil))
(insn 286 285 287 32 (set (reg:DI 0 ax [orig:152 D.6633 ] [152])
        (sign_extend:DI (reg:SI 0 ax [462]))) fmtext_o.cpp:528 142 {*extendsidi2_rex64}
     (nil))
(insn 287 286 288 32 (parallel [
            (set (reg:DI 1 dx [orig:153 D.6633 ] [153])
                (ashift:DI (reg:DI 0 ax [orig:152 D.6633 ] [152])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:528 497 {*ashldi3_1}
     (nil))
(insn 288 287 289 32 (set (reg/f:DI 0 ax [463])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 scratch_data+0 S8 A64])) fmtext_o.cpp:528 89 {*movdi_internal}
     (nil))
(insn 289 288 290 32 (parallel [
            (set (reg/f:DI 3 bx [orig:154 D.6642 ] [154])
                (plus:DI (reg:DI 1 dx [orig:153 D.6633 ] [153])
                    (reg/f:DI 0 ax [463])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:528 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 24 [0x18])) [0 scratch_data+0 S8 A64])
            (reg:DI 1 dx [orig:153 D.6633 ] [153]))
        (nil)))
(insn 290 289 291 32 (set (reg:SI 0 ax [464])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 out_data_size+0 S4 A32])) fmtext_o.cpp:528 90 {*movsi_internal}
     (nil))
(insn 291 290 292 32 (set (reg:DI 0 ax [orig:155 D.6633 ] [155])
        (sign_extend:DI (reg:SI 0 ax [464]))) fmtext_o.cpp:528 142 {*extendsidi2_rex64}
     (nil))
(insn 292 291 293 32 (parallel [
            (set (reg:DI 0 ax [orig:156 D.6633 ] [156])
                (ashift:DI (reg:DI 0 ax [orig:155 D.6633 ] [155])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:528 497 {*ashldi3_1}
     (nil))
(insn 293 292 294 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:156 D.6633 ] [156])) fmtext_o.cpp:528 89 {*movdi_internal}
     (nil))
(call_insn 294 293 295 32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:528 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 295 294 296 32 (set (reg/f:DI 0 ax [465])
        (reg:DI 0 ax)) fmtext_o.cpp:528 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [465])
        (nil)))
(insn 296 295 297 32 (set (reg/f:DI 0 ax [orig:157 D.6643 ] [157])
        (reg/f:DI 0 ax [465])) fmtext_o.cpp:528 89 {*movdi_internal}
     (nil))
(insn 297 296 298 32 (set (mem/f:DI (reg/f:DI 3 bx [orig:154 D.6642 ] [154]) [0 *_91+0 S8 A64])
        (reg/f:DI 0 ax [orig:157 D.6643 ] [157])) fmtext_o.cpp:528 89 {*movdi_internal}
     (nil))
(insn 298 297 299 32 (set (reg:SI 0 ax [466])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:529 90 {*movsi_internal}
     (nil))
(insn 299 298 300 32 (set (reg:DI 0 ax [orig:158 D.6633 ] [158])
        (sign_extend:DI (reg:SI 0 ax [466]))) fmtext_o.cpp:529 142 {*extendsidi2_rex64}
     (nil))
(insn 300 299 301 32 (parallel [
            (set (reg:DI 1 dx [orig:159 D.6633 ] [159])
                (ashift:DI (reg:DI 0 ax [orig:158 D.6633 ] [158])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 497 {*ashldi3_1}
     (nil))
(insn 301 300 302 32 (set (reg/f:DI 0 ax [467])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 302 301 303 32 (parallel [
            (set (reg/f:DI 3 bx [orig:160 D.6644 ] [160])
                (plus:DI (reg:DI 1 dx [orig:159 D.6633 ] [159])
                    (reg/f:DI 0 ax [467])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:159 D.6633 ] [159]))
        (nil)))
(insn 303 302 304 32 (set (reg:SI 0 ax [468])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:529 90 {*movsi_internal}
     (nil))
(insn 304 303 305 32 (set (reg:DI 0 ax [orig:161 D.6633 ] [161])
        (sign_extend:DI (reg:SI 0 ax [468]))) fmtext_o.cpp:529 142 {*extendsidi2_rex64}
     (nil))
(insn 305 304 306 32 (parallel [
            (set (reg:DI 1 dx [orig:162 D.6633 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:161 D.6633 ] [161])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 497 {*ashldi3_1}
     (nil))
(insn 306 305 307 32 (set (reg/f:DI 0 ax [469])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 307 306 308 32 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.6638 ] [163])
                (plus:DI (reg/f:DI 0 ax [469])
                    (reg:DI 1 dx [orig:162 D.6633 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.6633 ] [162]))
        (nil)))
(insn 308 307 309 32 (set (reg/f:DI 0 ax [orig:164 D.6639 ] [164])
        (mem/f:DI (reg/f:DI 0 ax [orig:163 D.6638 ] [163]) [0 *_101+0 S8 A64])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 309 308 310 32 (set (reg:SI 0 ax [orig:165 D.6632 ] [165])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:164 D.6639 ] [164])
                (const_int 8 [0x8])) [0 _102->np.number+0 S4 A32])) fmtext_o.cpp:529 90 {*movsi_internal}
     (nil))
(insn 310 309 311 32 (set (reg:DI 0 ax [orig:166 D.6633 ] [166])
        (sign_extend:DI (reg:SI 0 ax [orig:165 D.6632 ] [165]))) fmtext_o.cpp:529 142 {*extendsidi2_rex64}
     (nil))
(insn 311 310 312 32 (parallel [
            (set (reg:DI 0 ax [orig:167 D.6633 ] [167])
                (ashift:DI (reg:DI 0 ax [orig:166 D.6633 ] [166])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:529 497 {*ashldi3_1}
     (nil))
(insn 312 311 313 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:167 D.6633 ] [167])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(call_insn 313 312 314 32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:529 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 314 313 315 32 (set (reg/f:DI 0 ax [470])
        (reg:DI 0 ax)) fmtext_o.cpp:529 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [470])
        (nil)))
(insn 315 314 316 32 (set (reg/f:DI 0 ax [orig:168 D.6643 ] [168])
        (reg/f:DI 0 ax [470])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 316 315 317 32 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:160 D.6644 ] [160]) [0 _98->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:168 D.6643 ] [168])) fmtext_o.cpp:529 89 {*movdi_internal}
     (nil))
(insn 317 316 318 32 (set (reg:SI 0 ax [471])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:530 90 {*movsi_internal}
     (nil))
(insn 318 317 319 32 (set (reg:DI 0 ax [orig:169 D.6633 ] [169])
        (sign_extend:DI (reg:SI 0 ax [471]))) fmtext_o.cpp:530 142 {*extendsidi2_rex64}
     (nil))
(insn 319 318 320 32 (parallel [
            (set (reg:DI 1 dx [orig:170 D.6633 ] [170])
                (ashift:DI (reg:DI 0 ax [orig:169 D.6633 ] [169])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 497 {*ashldi3_1}
     (nil))
(insn 320 319 321 32 (set (reg/f:DI 0 ax [472])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 321 320 322 32 (parallel [
            (set (reg/f:DI 3 bx [orig:171 D.6645 ] [171])
                (plus:DI (reg:DI 1 dx [orig:170 D.6633 ] [170])
                    (reg/f:DI 0 ax [472])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:170 D.6633 ] [170]))
        (nil)))
(insn 322 321 323 32 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:530 90 {*movsi_internal}
     (nil))
(insn 323 322 324 32 (set (reg:DI 0 ax [orig:172 D.6633 ] [172])
        (sign_extend:DI (reg:SI 0 ax [473]))) fmtext_o.cpp:530 142 {*extendsidi2_rex64}
     (nil))
(insn 324 323 325 32 (parallel [
            (set (reg:DI 1 dx [orig:173 D.6633 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:172 D.6633 ] [172])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 497 {*ashldi3_1}
     (nil))
(insn 325 324 326 32 (set (reg/f:DI 0 ax [474])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 326 325 327 32 (parallel [
            (set (reg/f:DI 0 ax [orig:174 D.6638 ] [174])
                (plus:DI (reg/f:DI 0 ax [474])
                    (reg:DI 1 dx [orig:173 D.6633 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:173 D.6633 ] [173]))
        (nil)))
(insn 327 326 328 32 (set (reg/f:DI 0 ax [orig:175 D.6639 ] [175])
        (mem/f:DI (reg/f:DI 0 ax [orig:174 D.6638 ] [174]) [0 *_113+0 S8 A64])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 328 327 329 32 (set (reg:SI 0 ax [orig:176 D.6632 ] [176])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:175 D.6639 ] [175])
                (const_int 8 [0x8])) [0 _114->np.number+0 S4 A32])) fmtext_o.cpp:530 90 {*movsi_internal}
     (nil))
(insn 329 328 330 32 (set (reg:DI 0 ax [orig:177 D.6633 ] [177])
        (sign_extend:DI (reg:SI 0 ax [orig:176 D.6632 ] [176]))) fmtext_o.cpp:530 142 {*extendsidi2_rex64}
     (nil))
(insn 330 329 331 32 (parallel [
            (set (reg:DI 0 ax [orig:178 D.6633 ] [178])
                (ashift:DI (reg:DI 0 ax [orig:177 D.6633 ] [177])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:530 497 {*ashldi3_1}
     (nil))
(insn 331 330 332 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:178 D.6633 ] [178])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(call_insn 332 331 333 32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b8e1bac1200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:530 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 333 332 334 32 (set (reg/f:DI 0 ax [475])
        (reg:DI 0 ax)) fmtext_o.cpp:530 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [475])
        (nil)))
(insn 334 333 335 32 (set (reg/f:DI 0 ax [orig:179 D.6643 ] [179])
        (reg/f:DI 0 ax [475])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 335 334 336 32 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:171 D.6645 ] [171]) [0 _110->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:179 D.6643 ] [179])) fmtext_o.cpp:530 89 {*movdi_internal}
     (nil))
(insn 336 335 337 32 (set (reg:SI 0 ax [476])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:531 90 {*movsi_internal}
     (nil))
(insn 337 336 338 32 (set (reg:DI 0 ax [orig:180 D.6633 ] [180])
        (sign_extend:DI (reg:SI 0 ax [476]))) fmtext_o.cpp:531 142 {*extendsidi2_rex64}
     (nil))
(insn 338 337 339 32 (parallel [
            (set (reg:DI 1 dx [orig:181 D.6633 ] [181])
                (ashift:DI (reg:DI 0 ax [orig:180 D.6633 ] [180])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 497 {*ashldi3_1}
     (nil))
(insn 339 338 340 32 (set (reg/f:DI 0 ax [477])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 340 339 341 32 (parallel [
            (set (reg/f:DI 0 ax [orig:182 D.6635 ] [182])
                (plus:DI (reg/f:DI 0 ax [477])
                    (reg:DI 1 dx [orig:181 D.6633 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:181 D.6633 ] [181]))
        (nil)))
(insn 341 340 342 32 (set (reg/f:DI 1 dx [orig:183 D.6637 ] [183])
        (mem/f:DI (reg/f:DI 0 ax [orig:182 D.6635 ] [182]) [0 *_121+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 342 341 343 32 (set (reg:SI 0 ax [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:531 90 {*movsi_internal}
     (nil))
(insn 343 342 344 32 (set (reg:DI 0 ax [orig:184 D.6633 ] [184])
        (sign_extend:DI (reg:SI 0 ax [478]))) fmtext_o.cpp:531 142 {*extendsidi2_rex64}
     (nil))
(insn 344 343 345 32 (parallel [
            (set (reg:DI 2 cx [orig:185 D.6633 ] [185])
                (ashift:DI (reg:DI 0 ax [orig:184 D.6633 ] [184])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 497 {*ashldi3_1}
     (nil))
(insn 345 344 346 32 (set (reg/f:DI 0 ax [479])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 block_header+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 346 345 347 32 (parallel [
            (set (reg/f:DI 0 ax [orig:186 D.6646 ] [186])
                (plus:DI (reg/f:DI 0 ax [479])
                    (reg:DI 2 cx [orig:185 D.6633 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:531 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:185 D.6633 ] [185]))
        (nil)))
(insn 347 346 348 32 (set (reg/f:DI 0 ax [orig:187 D.6647 ] [187])
        (mem/f:DI (reg/f:DI 0 ax [orig:186 D.6646 ] [186]) [0 *_126+0 S8 A64])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 348 347 349 32 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:183 D.6637 ] [183])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 349 348 350 32 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 350 349 351 32 (set (reg:DI 4 si)
        (const_int 28 [0x1c])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(insn 351 350 352 32 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:187 D.6647 ] [187])) fmtext_o.cpp:531 89 {*movdi_internal}
     (nil))
(call_insn 352 351 353 32 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b8e1bc5b900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:531 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 353 352 354 32 (set (reg/f:DI 0 ax [480])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:534 89 {*movdi_internal}
     (nil))
(insn 354 353 355 32 (set (reg:SI 1 dx [orig:188 D.6632 ] [188])
        (mem/j:SI (reg/f:DI 0 ax [480]) [0 endianCheck_65(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:534 90 {*movsi_internal}
     (nil))
(insn 355 354 356 32 (set (reg/f:DI 0 ax [481])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:534 89 {*movdi_internal}
     (nil))
(insn 356 355 357 32 (set (reg:SI 0 ax [orig:189 D.6632 ] [189])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [481])
                (const_int 4 [0x4])) [0 endianCheck_65(D)->fileStruct+0 S4 A32])) fmtext_o.cpp:534 90 {*movsi_internal}
     (nil))
(insn 357 356 358 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:188 D.6632 ] [188])
            (reg:SI 0 ax [orig:189 D.6632 ] [189]))) fmtext_o.cpp:534 7 {*cmpsi_1}
     (nil))
(jump_insn 358 357 359 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 365)
            (pc))) fmtext_o.cpp:534 596 {*jcc_1}
     (nil)
 -> 365)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 482 483
(note 359 358 360 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 360 359 361 33 (set (reg:SI 1 dx [482])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:535 90 {*movsi_internal}
     (nil))
(insn 361 360 362 33 (set (reg:DI 0 ax [483])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 block_header+0 S8 A64])) fmtext_o.cpp:535 89 {*movdi_internal}
     (nil))
(insn 362 361 363 33 (set (reg:SI 4 si)
        (reg:SI 1 dx [482])) fmtext_o.cpp:535 90 {*movsi_internal}
     (nil))
(insn 363 362 364 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [483])) fmtext_o.cpp:535 89 {*movdi_internal}
     (nil))
(call_insn 364 363 365 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z17block_header_swapPP17Data_block_headeri") [flags 0x41]  <function_decl 0x2b8e1bd8e400 block_header_swap>) [0 block_header_swap S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:535 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;;              33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 190 191 192 193 194 484 485
(code_label 365 364 366 34 111 "" [1 uses])
(note 366 365 367 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 367 366 368 34 (set (reg:SI 0 ax [484])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:546 90 {*movsi_internal}
     (nil))
(insn 368 367 369 34 (set (reg:DI 0 ax [orig:190 D.6633 ] [190])
        (sign_extend:DI (reg:SI 0 ax [484]))) fmtext_o.cpp:546 142 {*extendsidi2_rex64}
     (nil))
(insn 369 368 370 34 (parallel [
            (set (reg:DI 1 dx [orig:191 D.6633 ] [191])
                (ashift:DI (reg:DI 0 ax [orig:190 D.6633 ] [190])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:546 497 {*ashldi3_1}
     (nil))
(insn 370 369 371 34 (set (reg/f:DI 0 ax [485])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:546 89 {*movdi_internal}
     (nil))
(insn 371 370 372 34 (parallel [
            (set (reg/f:DI 0 ax [orig:192 D.6638 ] [192])
                (plus:DI (reg/f:DI 0 ax [485])
                    (reg:DI 1 dx [orig:191 D.6633 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:546 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:191 D.6633 ] [191]))
        (nil)))
(insn 372 371 373 34 (set (reg/f:DI 0 ax [orig:193 D.6639 ] [193])
        (mem/f:DI (reg/f:DI 0 ax [orig:192 D.6638 ] [192]) [0 *_132+0 S8 A64])) fmtext_o.cpp:546 89 {*movdi_internal}
     (nil))
(insn 373 372 374 34 (set (reg:HI 0 ax [orig:194 D.6641 ] [194])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:193 D.6639 ] [193])
                (const_int 26 [0x1a])) [0 _133->status.number+0 S2 A16])) fmtext_o.cpp:546 92 {*movhi_internal}
     (nil))
(insn 374 373 375 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:194 D.6641 ] [194])
            (const_int 69 [0x45]))) fmtext_o.cpp:546 6 {*cmphi_1}
     (nil))
(jump_insn 375 374 376 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 412)
            (pc))) fmtext_o.cpp:546 596 {*jcc_1}
     (nil)
 -> 412)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 486 487 488 489 490 491 492 493
(note 376 375 377 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 378 35 (set (reg:SI 0 ax [486])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:548 90 {*movsi_internal}
     (nil))
(insn 378 377 379 35 (set (reg:DI 0 ax [orig:195 D.6633 ] [195])
        (sign_extend:DI (reg:SI 0 ax [486]))) fmtext_o.cpp:548 142 {*extendsidi2_rex64}
     (nil))
(insn 379 378 380 35 (parallel [
            (set (reg:DI 1 dx [orig:196 D.6633 ] [196])
                (ashift:DI (reg:DI 0 ax [orig:195 D.6633 ] [195])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 497 {*ashldi3_1}
     (nil))
(insn 380 379 381 35 (set (reg/f:DI 0 ax [487])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 381 380 382 35 (parallel [
            (set (reg/f:DI 0 ax [orig:197 D.6635 ] [197])
                (plus:DI (reg/f:DI 0 ax [487])
                    (reg:DI 1 dx [orig:196 D.6633 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:196 D.6633 ] [196]))
        (nil)))
(insn 382 381 383 35 (set (reg/f:DI 1 dx [orig:198 D.6637 ] [198])
        (mem/f:DI (reg/f:DI 0 ax [orig:197 D.6635 ] [197]) [0 *_137+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 383 382 384 35 (set (reg:SI 0 ax [488])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:547 90 {*movsi_internal}
     (nil))
(insn 384 383 385 35 (set (reg:DI 0 ax [orig:199 D.6633 ] [199])
        (sign_extend:DI (reg:SI 0 ax [488]))) fmtext_o.cpp:547 142 {*extendsidi2_rex64}
     (nil))
(insn 385 384 386 35 (parallel [
            (set (reg:DI 2 cx [orig:200 D.6633 ] [200])
                (ashift:DI (reg:DI 0 ax [orig:199 D.6633 ] [199])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 497 {*ashldi3_1}
     (nil))
(insn 386 385 387 35 (set (reg/f:DI 0 ax [489])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (nil))
(insn 387 386 388 35 (parallel [
            (set (reg/f:DI 0 ax [orig:201 D.6638 ] [201])
                (plus:DI (reg/f:DI 0 ax [489])
                    (reg:DI 2 cx [orig:200 D.6633 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:200 D.6633 ] [200]))
        (nil)))
(insn 388 387 389 35 (set (reg/f:DI 0 ax [orig:202 D.6639 ] [202])
        (mem/f:DI (reg/f:DI 0 ax [orig:201 D.6638 ] [201]) [0 *_141+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (nil))
(insn 389 388 390 35 (set (reg:SI 2 cx [orig:203 D.6632 ] [203])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:202 D.6639 ] [202])
                (const_int 8 [0x8])) [0 _142->np.number+0 S4 A32])) fmtext_o.cpp:547 90 {*movsi_internal}
     (nil))
(insn 390 389 391 35 (set (reg:SI 0 ax [490])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:548 90 {*movsi_internal}
     (nil))
(insn 391 390 392 35 (set (reg:DI 0 ax [orig:204 D.6633 ] [204])
        (sign_extend:DI (reg:SI 0 ax [490]))) fmtext_o.cpp:548 142 {*extendsidi2_rex64}
     (nil))
(insn 392 391 393 35 (parallel [
            (set (reg:DI 4 si [orig:205 D.6633 ] [205])
                (ashift:DI (reg:DI 0 ax [orig:204 D.6633 ] [204])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 497 {*ashldi3_1}
     (nil))
(insn 393 392 394 35 (set (reg/f:DI 0 ax [491])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 394 393 395 35 (parallel [
            (set (reg/f:DI 0 ax [orig:206 D.6638 ] [206])
                (plus:DI (reg/f:DI 0 ax [491])
                    (reg:DI 4 si [orig:205 D.6633 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:548 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 4 si [orig:205 D.6633 ] [205]))
        (nil)))
(insn 395 394 396 35 (set (reg/f:DI 0 ax [orig:207 D.6639 ] [207])
        (mem/f:DI (reg/f:DI 0 ax [orig:206 D.6638 ] [206]) [0 *_146+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 396 395 397 35 (set (reg:SI 0 ax [orig:208 D.6632 ] [208])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:207 D.6639 ] [207])
                (const_int 12 [0xc])) [0 _147->ebytes.number+0 S4 A32])) fmtext_o.cpp:547 90 {*movsi_internal}
     (nil))
(insn 397 396 398 35 (parallel [
            (set (reg:SI 0 ax [orig:209 D.6632 ] [209])
                (mult:SI (reg:SI 0 ax [orig:208 D.6632 ] [208])
                    (reg:SI 2 cx [orig:203 D.6632 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 306 {*mulsi3_1}
     (nil))
(insn 398 397 399 35 (set (reg:DI 4 si [orig:210 D.6633 ] [210])
        (sign_extend:DI (reg:SI 0 ax [orig:209 D.6632 ] [209]))) fmtext_o.cpp:548 142 {*extendsidi2_rex64}
     (nil))
(insn 399 398 400 35 (set (reg:SI 0 ax [492])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:547 90 {*movsi_internal}
     (nil))
(insn 400 399 401 35 (set (reg:DI 0 ax [orig:211 D.6633 ] [211])
        (sign_extend:DI (reg:SI 0 ax [492]))) fmtext_o.cpp:547 142 {*extendsidi2_rex64}
     (nil))
(insn 401 400 402 35 (parallel [
            (set (reg:DI 2 cx [orig:212 D.6633 ] [212])
                (ashift:DI (reg:DI 0 ax [orig:211 D.6633 ] [211])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 497 {*ashldi3_1}
     (nil))
(insn 402 401 403 35 (set (reg/f:DI 0 ax [493])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:547 89 {*movdi_internal}
     (nil))
(insn 403 402 404 35 (parallel [
            (set (reg/f:DI 0 ax [orig:213 D.6644 ] [213])
                (plus:DI (reg/f:DI 0 ax [493])
                    (reg:DI 2 cx [orig:212 D.6633 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:547 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:212 D.6633 ] [212]))
        (nil)))
(insn 404 403 405 35 (set (reg/f:DI 0 ax [orig:214 D.6648 ] [214])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:213 D.6644 ] [213]) [0 _153->lo+0 S8 A64])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 405 404 406 35 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:198 D.6637 ] [198])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 406 405 408 35 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(insn 408 406 409 35 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:214 D.6648 ] [214])) fmtext_o.cpp:548 89 {*movdi_internal}
     (nil))
(call_insn 409 408 808 35 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b8e1bc5b900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:548 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 808 409 809 35 (set (pc)
        (label_ref 487)) 636 {jump}
     (nil)
 -> 487)
;;  succ:       41 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 809 808 412)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 215 216 217 218 219 494 495
(code_label 412 809 413 36 112 "" [1 uses])
(note 413 412 414 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 414 413 415 36 (set (reg:SI 0 ax [494])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:549 90 {*movsi_internal}
     (nil))
(insn 415 414 416 36 (set (reg:DI 0 ax [orig:215 D.6633 ] [215])
        (sign_extend:DI (reg:SI 0 ax [494]))) fmtext_o.cpp:549 142 {*extendsidi2_rex64}
     (nil))
(insn 416 415 417 36 (parallel [
            (set (reg:DI 1 dx [orig:216 D.6633 ] [216])
                (ashift:DI (reg:DI 0 ax [orig:215 D.6633 ] [215])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 497 {*ashldi3_1}
     (nil))
(insn 417 416 418 36 (set (reg/f:DI 0 ax [495])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (nil))
(insn 418 417 419 36 (parallel [
            (set (reg/f:DI 0 ax [orig:217 D.6638 ] [217])
                (plus:DI (reg/f:DI 0 ax [495])
                    (reg:DI 1 dx [orig:216 D.6633 ] [216])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:216 D.6633 ] [216]))
        (nil)))
(insn 419 418 420 36 (set (reg/f:DI 0 ax [orig:218 D.6639 ] [218])
        (mem/f:DI (reg/f:DI 0 ax [orig:217 D.6638 ] [217]) [0 *_157+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (nil))
(insn 420 419 421 36 (set (reg:HI 0 ax [orig:219 D.6641 ] [219])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:218 D.6639 ] [218])
                (const_int 26 [0x1a])) [0 _158->status.number+0 S2 A16])) fmtext_o.cpp:549 92 {*movhi_internal}
     (nil))
(insn 421 420 422 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:219 D.6641 ] [219])
            (const_int 73 [0x49]))) fmtext_o.cpp:549 6 {*cmphi_1}
     (nil))
(jump_insn 422 421 423 36 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 443)
            (pc))) fmtext_o.cpp:549 596 {*jcc_1}
     (nil)
 -> 443)
;;  succ:       39
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 220 221 222 223 224 496 497
(note 423 422 424 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 424 423 425 37 (set (reg:SI 0 ax [496])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:549 90 {*movsi_internal}
     (nil))
(insn 425 424 426 37 (set (reg:DI 0 ax [orig:220 D.6633 ] [220])
        (sign_extend:DI (reg:SI 0 ax [496]))) fmtext_o.cpp:549 142 {*extendsidi2_rex64}
     (nil))
(insn 426 425 427 37 (parallel [
            (set (reg:DI 1 dx [orig:221 D.6633 ] [221])
                (ashift:DI (reg:DI 0 ax [orig:220 D.6633 ] [220])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 497 {*ashldi3_1}
     (nil))
(insn 427 426 428 37 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (nil))
(insn 428 427 429 37 (parallel [
            (set (reg/f:DI 0 ax [orig:222 D.6638 ] [222])
                (plus:DI (reg/f:DI 0 ax [497])
                    (reg:DI 1 dx [orig:221 D.6633 ] [221])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:549 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:221 D.6633 ] [221]))
        (nil)))
(insn 429 428 430 37 (set (reg/f:DI 0 ax [orig:223 D.6639 ] [223])
        (mem/f:DI (reg/f:DI 0 ax [orig:222 D.6638 ] [222]) [0 *_162+0 S8 A64])) fmtext_o.cpp:549 89 {*movdi_internal}
     (nil))
(insn 430 429 431 37 (set (reg:HI 0 ax [orig:224 D.6641 ] [224])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:223 D.6639 ] [223])
                (const_int 26 [0x1a])) [0 _163->status.number+0 S2 A16])) fmtext_o.cpp:549 92 {*movhi_internal}
     (nil))
(insn 431 430 432 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:224 D.6641 ] [224])
            (const_int 2073 [0x819]))) fmtext_o.cpp:549 6 {*cmphi_1}
     (nil))
(jump_insn 432 431 433 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 443)
            (pc))) fmtext_o.cpp:549 596 {*jcc_1}
     (nil)
 -> 443)
;;  succ:       39
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 225 226 227 228 229 498 499
(note 433 432 434 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 434 433 435 38 (set (reg:SI 0 ax [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:550 90 {*movsi_internal}
     (nil))
(insn 435 434 436 38 (set (reg:DI 0 ax [orig:225 D.6633 ] [225])
        (sign_extend:DI (reg:SI 0 ax [498]))) fmtext_o.cpp:550 142 {*extendsidi2_rex64}
     (nil))
(insn 436 435 437 38 (parallel [
            (set (reg:DI 1 dx [orig:226 D.6633 ] [226])
                (ashift:DI (reg:DI 0 ax [orig:225 D.6633 ] [225])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:550 497 {*ashldi3_1}
     (nil))
(insn 437 436 438 38 (set (reg/f:DI 0 ax [499])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:550 89 {*movdi_internal}
     (nil))
(insn 438 437 439 38 (parallel [
            (set (reg/f:DI 0 ax [orig:227 D.6638 ] [227])
                (plus:DI (reg/f:DI 0 ax [499])
                    (reg:DI 1 dx [orig:226 D.6633 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:550 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:226 D.6633 ] [226]))
        (nil)))
(insn 439 438 440 38 (set (reg/f:DI 0 ax [orig:228 D.6639 ] [228])
        (mem/f:DI (reg/f:DI 0 ax [orig:227 D.6638 ] [227]) [0 *_167+0 S8 A64])) fmtext_o.cpp:550 89 {*movdi_internal}
     (nil))
(insn 440 439 441 38 (set (reg:HI 0 ax [orig:229 D.6641 ] [229])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:228 D.6639 ] [228])
                (const_int 26 [0x1a])) [0 _168->status.number+0 S2 A16])) fmtext_o.cpp:550 92 {*movhi_internal}
     (nil))
(insn 441 440 442 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:229 D.6641 ] [229])
            (const_int 201 [0xc9]))) fmtext_o.cpp:550 6 {*cmphi_1}
     (nil))
(jump_insn 442 441 443 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 480)
            (pc))) fmtext_o.cpp:550 596 {*jcc_1}
     (nil)
 -> 480)
;;  succ:       39 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;;              37
;;              38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 500 501 502 503 504 505 506 507
(code_label 443 442 444 39 114 "" [2 uses])
(note 444 443 445 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 445 444 446 39 (set (reg:SI 0 ax [500])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:553 90 {*movsi_internal}
     (nil))
(insn 446 445 447 39 (set (reg:DI 0 ax [orig:230 D.6633 ] [230])
        (sign_extend:DI (reg:SI 0 ax [500]))) fmtext_o.cpp:553 142 {*extendsidi2_rex64}
     (nil))
(insn 447 446 448 39 (parallel [
            (set (reg:DI 1 dx [orig:231 D.6633 ] [231])
                (ashift:DI (reg:DI 0 ax [orig:230 D.6633 ] [230])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 497 {*ashldi3_1}
     (nil))
(insn 448 447 449 39 (set (reg/f:DI 0 ax [501])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 449 448 450 39 (parallel [
            (set (reg/f:DI 0 ax [orig:232 D.6635 ] [232])
                (plus:DI (reg/f:DI 0 ax [501])
                    (reg:DI 1 dx [orig:231 D.6633 ] [231])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:231 D.6633 ] [231]))
        (nil)))
(insn 450 449 451 39 (set (reg/f:DI 1 dx [orig:233 D.6637 ] [233])
        (mem/f:DI (reg/f:DI 0 ax [orig:232 D.6635 ] [232]) [0 *_172+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 451 450 452 39 (set (reg:SI 0 ax [502])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:552 90 {*movsi_internal}
     (nil))
(insn 452 451 453 39 (set (reg:DI 0 ax [orig:234 D.6633 ] [234])
        (sign_extend:DI (reg:SI 0 ax [502]))) fmtext_o.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 453 452 454 39 (parallel [
            (set (reg:DI 2 cx [orig:235 D.6633 ] [235])
                (ashift:DI (reg:DI 0 ax [orig:234 D.6633 ] [234])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 497 {*ashldi3_1}
     (nil))
(insn 454 453 455 39 (set (reg/f:DI 0 ax [503])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (nil))
(insn 455 454 456 39 (parallel [
            (set (reg/f:DI 0 ax [orig:236 D.6638 ] [236])
                (plus:DI (reg/f:DI 0 ax [503])
                    (reg:DI 2 cx [orig:235 D.6633 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:235 D.6633 ] [235]))
        (nil)))
(insn 456 455 457 39 (set (reg/f:DI 0 ax [orig:237 D.6639 ] [237])
        (mem/f:DI (reg/f:DI 0 ax [orig:236 D.6638 ] [236]) [0 *_176+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (nil))
(insn 457 456 458 39 (set (reg:SI 2 cx [orig:238 D.6632 ] [238])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:237 D.6639 ] [237])
                (const_int 8 [0x8])) [0 _177->np.number+0 S4 A32])) fmtext_o.cpp:552 90 {*movsi_internal}
     (nil))
(insn 458 457 459 39 (set (reg:SI 0 ax [504])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:553 90 {*movsi_internal}
     (nil))
(insn 459 458 460 39 (set (reg:DI 0 ax [orig:239 D.6633 ] [239])
        (sign_extend:DI (reg:SI 0 ax [504]))) fmtext_o.cpp:553 142 {*extendsidi2_rex64}
     (nil))
(insn 460 459 461 39 (parallel [
            (set (reg:DI 4 si [orig:240 D.6633 ] [240])
                (ashift:DI (reg:DI 0 ax [orig:239 D.6633 ] [239])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 497 {*ashldi3_1}
     (nil))
(insn 461 460 462 39 (set (reg/f:DI 0 ax [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 462 461 463 39 (parallel [
            (set (reg/f:DI 0 ax [orig:241 D.6638 ] [241])
                (plus:DI (reg/f:DI 0 ax [505])
                    (reg:DI 4 si [orig:240 D.6633 ] [240])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:553 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 4 si [orig:240 D.6633 ] [240]))
        (nil)))
(insn 463 462 464 39 (set (reg/f:DI 0 ax [orig:242 D.6639 ] [242])
        (mem/f:DI (reg/f:DI 0 ax [orig:241 D.6638 ] [241]) [0 *_181+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 464 463 465 39 (set (reg:SI 0 ax [orig:243 D.6632 ] [243])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:242 D.6639 ] [242])
                (const_int 12 [0xc])) [0 _182->ebytes.number+0 S4 A32])) fmtext_o.cpp:552 90 {*movsi_internal}
     (nil))
(insn 465 464 466 39 (parallel [
            (set (reg:SI 0 ax [orig:244 D.6632 ] [244])
                (mult:SI (reg:SI 0 ax [orig:243 D.6632 ] [243])
                    (reg:SI 2 cx [orig:238 D.6632 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 306 {*mulsi3_1}
     (nil))
(insn 466 465 467 39 (set (reg:DI 4 si [orig:245 D.6633 ] [245])
        (sign_extend:DI (reg:SI 0 ax [orig:244 D.6632 ] [244]))) fmtext_o.cpp:553 142 {*extendsidi2_rex64}
     (nil))
(insn 467 466 468 39 (set (reg:SI 0 ax [506])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:552 90 {*movsi_internal}
     (nil))
(insn 468 467 469 39 (set (reg:DI 0 ax [orig:246 D.6633 ] [246])
        (sign_extend:DI (reg:SI 0 ax [506]))) fmtext_o.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 469 468 470 39 (parallel [
            (set (reg:DI 2 cx [orig:247 D.6633 ] [247])
                (ashift:DI (reg:DI 0 ax [orig:246 D.6633 ] [246])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 497 {*ashldi3_1}
     (nil))
(insn 470 469 471 39 (set (reg/f:DI 0 ax [507])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:552 89 {*movdi_internal}
     (nil))
(insn 471 470 472 39 (parallel [
            (set (reg/f:DI 0 ax [orig:248 D.6644 ] [248])
                (plus:DI (reg/f:DI 0 ax [507])
                    (reg:DI 2 cx [orig:247 D.6633 ] [247])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:552 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:247 D.6633 ] [247]))
        (nil)))
(insn 472 471 473 39 (set (reg/f:DI 0 ax [orig:249 D.6649 ] [249])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:248 D.6644 ] [248]) [0 _188->fl+0 S8 A64])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 473 472 474 39 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:233 D.6637 ] [233])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 474 473 476 39 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(insn 476 474 477 39 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:249 D.6649 ] [249])) fmtext_o.cpp:553 89 {*movdi_internal}
     (nil))
(call_insn 477 476 810 39 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b8e1bc5b900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:553 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn 810 477 811 39 (set (pc)
        (label_ref 487)) fmtext_o.cpp:553 636 {jump}
     (nil)
 -> 487)
;;  succ:       41 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 811 810 480)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 480 811 481 40 115 "" [1 uses])
(note 481 480 482 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 482 481 483 40 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b8e1bf85260 *.LC18>)) fmtext_o.cpp:555 89 {*movdi_internal}
     (nil))
(call_insn 483 482 484 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b8e1ba98900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:555 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 484 483 485 40 (set (reg:SI 5 di)
        (const_int 6 [0x6])) fmtext_o.cpp:556 90 {*movsi_internal}
     (nil))
(call_insn 485 484 486 40 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b8e1bab3900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:556 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 486 485 487)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 [100.0%] 
;;              39 [100.0%] 
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 250 251 508 509
(code_label 487 486 488 41 113 "" [2 uses])
(note 488 487 489 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 489 488 490 41 (set (reg/f:DI 0 ax [508])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:560 89 {*movdi_internal}
     (nil))
(insn 490 489 491 41 (set (reg:SI 1 dx [orig:250 D.6632 ] [250])
        (mem/j:SI (reg/f:DI 0 ax [508]) [0 endianCheck_65(D)->systemStruct+0 S4 A32])) fmtext_o.cpp:560 90 {*movsi_internal}
     (nil))
(insn 491 490 492 41 (set (reg/f:DI 0 ax [509])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 endianCheck+0 S8 A64])) fmtext_o.cpp:560 89 {*movdi_internal}
     (nil))
(insn 492 491 493 41 (set (reg:SI 0 ax [orig:251 D.6632 ] [251])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [509])
                (const_int 4 [0x4])) [0 endianCheck_65(D)->fileStruct+0 S4 A32])) fmtext_o.cpp:560 90 {*movsi_internal}
     (nil))
(insn 493 492 494 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:250 D.6632 ] [250])
            (reg:SI 0 ax [orig:251 D.6632 ] [251]))) fmtext_o.cpp:560 7 {*cmpsi_1}
     (nil))
(jump_insn 494 493 495 41 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 607)
            (pc))) fmtext_o.cpp:560 596 {*jcc_1}
     (nil)
 -> 607)
;;  succ:       42 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 495 494 496 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 496 495 812 42 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(jump_insn 812 496 813 42 (set (pc)
        (label_ref 587)) fmtext_o.cpp:562 636 {jump}
     (nil)
 -> 587)
;;  succ:       44 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 813 812 601)
;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533
(code_label 601 813 499 43 118 "" [1 uses])
(note 499 601 500 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 501 43 (set (reg:SI 0 ax [510])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 501 500 502 43 (set (reg:DI 0 ax [orig:262 D.6633 ] [262])
        (sign_extend:DI (reg:SI 0 ax [510]))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (nil))
(insn 502 501 503 43 (parallel [
            (set (reg:DI 1 dx [orig:263 D.6633 ] [263])
                (ashift:DI (reg:DI 0 ax [orig:262 D.6633 ] [262])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 497 {*ashldi3_1}
     (nil))
(insn 503 502 504 43 (set (reg/f:DI 0 ax [511])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (nil))
(insn 504 503 505 43 (parallel [
            (set (reg/f:DI 0 ax [orig:264 D.6645 ] [264])
                (plus:DI (reg/f:DI 0 ax [511])
                    (reg:DI 1 dx [orig:263 D.6633 ] [263])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:263 D.6633 ] [263]))
        (nil)))
(insn 505 504 506 43 (set (reg/f:DI 1 dx [orig:265 D.6651 ] [265])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:264 D.6645 ] [264]) [0 _205->character+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (nil))
(insn 506 505 507 43 (set (reg:SI 0 ax [512])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 507 506 508 43 (set (reg:DI 0 ax [orig:266 D.6652 ] [266])
        (sign_extend:DI (reg:SI 0 ax [512]))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (nil))
(insn 508 507 509 43 (parallel [
            (set (reg/f:DI 1 dx [orig:267 D.6651 ] [267])
                (plus:DI (reg/f:DI 1 dx [orig:265 D.6651 ] [265])
                    (reg:DI 0 ax [orig:266 D.6652 ] [266])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 221 {*adddi_1}
     (nil))
(insn 509 508 510 43 (set (reg:SI 0 ax [513])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 510 509 511 43 (set (reg:DI 0 ax [orig:268 D.6633 ] [268])
        (sign_extend:DI (reg:SI 0 ax [513]))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (nil))
(insn 511 510 512 43 (parallel [
            (set (reg:DI 2 cx [orig:269 D.6633 ] [269])
                (ashift:DI (reg:DI 0 ax [orig:268 D.6633 ] [268])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 497 {*ashldi3_1}
     (nil))
(insn 512 511 513 43 (set (reg/f:DI 0 ax [514])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (nil))
(insn 513 512 514 43 (parallel [
            (set (reg/f:DI 0 ax [orig:270 D.6644 ] [270])
                (plus:DI (reg/f:DI 0 ax [514])
                    (reg:DI 2 cx [orig:269 D.6633 ] [269])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:269 D.6633 ] [269]))
        (nil)))
(insn 514 513 515 43 (set (reg/f:DI 2 cx [orig:271 D.6651 ] [271])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:270 D.6644 ] [270]) [0 _211->character+0 S8 A64])) fmtext_o.cpp:563 89 {*movdi_internal}
     (nil))
(insn 515 514 516 43 (set (reg:SI 0 ax [515])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:563 90 {*movsi_internal}
     (nil))
(insn 516 515 517 43 (set (reg:DI 0 ax [orig:272 D.6652 ] [272])
        (sign_extend:DI (reg:SI 0 ax [515]))) fmtext_o.cpp:563 142 {*extendsidi2_rex64}
     (nil))
(insn 517 516 518 43 (parallel [
            (set (reg/f:DI 0 ax [orig:273 D.6651 ] [273])
                (plus:DI (reg:DI 0 ax [orig:272 D.6652 ] [272])
                    (reg/f:DI 2 cx [orig:271 D.6651 ] [271])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:563 221 {*adddi_1}
     (nil))
(insn 518 517 519 43 (set (reg:QI 0 ax [orig:274 D.6653 ] [274])
        (mem:QI (reg/f:DI 0 ax [orig:273 D.6651 ] [273]) [0 *_214+0 S1 A8])) fmtext_o.cpp:563 93 {*movqi_internal}
     (nil))
(insn 519 518 520 43 (set (mem:QI (reg/f:DI 1 dx [orig:267 D.6651 ] [267]) [0 *_208+0 S1 A8])
        (reg:QI 0 ax [orig:274 D.6653 ] [274])) fmtext_o.cpp:563 93 {*movqi_internal}
     (nil))
(insn 520 519 521 43 (set (reg:SI 0 ax [516])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 521 520 522 43 (set (reg:DI 0 ax [orig:275 D.6633 ] [275])
        (sign_extend:DI (reg:SI 0 ax [516]))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (nil))
(insn 522 521 523 43 (parallel [
            (set (reg:DI 1 dx [orig:276 D.6633 ] [276])
                (ashift:DI (reg:DI 0 ax [orig:275 D.6633 ] [275])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 497 {*ashldi3_1}
     (nil))
(insn 523 522 524 43 (set (reg/f:DI 0 ax [517])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (nil))
(insn 524 523 525 43 (parallel [
            (set (reg/f:DI 0 ax [orig:277 D.6645 ] [277])
                (plus:DI (reg/f:DI 0 ax [517])
                    (reg:DI 1 dx [orig:276 D.6633 ] [276])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:276 D.6633 ] [276]))
        (nil)))
(insn 525 524 526 43 (set (reg/f:DI 0 ax [orig:278 D.6651 ] [278])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:277 D.6645 ] [277]) [0 _218->character+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (nil))
(insn 526 525 527 43 (set (reg:SI 1 dx [518])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 527 526 528 43 (set (reg:DI 1 dx [orig:279 D.6652 ] [279])
        (sign_extend:DI (reg:SI 1 dx [518]))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (nil))
(insn 528 527 529 43 (parallel [
            (set (reg:DI 1 dx [orig:280 D.6652 ] [280])
                (plus:DI (reg:DI 1 dx [orig:279 D.6652 ] [279])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 221 {*adddi_1}
     (nil))
(insn 529 528 530 43 (parallel [
            (set (reg/f:DI 1 dx [orig:281 D.6651 ] [281])
                (plus:DI (reg:DI 1 dx [orig:280 D.6652 ] [280])
                    (reg/f:DI 0 ax [orig:278 D.6651 ] [278])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 221 {*adddi_1}
     (nil))
(insn 530 529 531 43 (set (reg:SI 0 ax [519])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 531 530 532 43 (set (reg:DI 0 ax [orig:282 D.6633 ] [282])
        (sign_extend:DI (reg:SI 0 ax [519]))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (nil))
(insn 532 531 533 43 (parallel [
            (set (reg:DI 2 cx [orig:283 D.6633 ] [283])
                (ashift:DI (reg:DI 0 ax [orig:282 D.6633 ] [282])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 497 {*ashldi3_1}
     (nil))
(insn 533 532 534 43 (set (reg/f:DI 0 ax [520])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (nil))
(insn 534 533 535 43 (parallel [
            (set (reg/f:DI 0 ax [orig:284 D.6644 ] [284])
                (plus:DI (reg/f:DI 0 ax [520])
                    (reg:DI 2 cx [orig:283 D.6633 ] [283])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:283 D.6633 ] [283]))
        (nil)))
(insn 535 534 536 43 (set (reg/f:DI 0 ax [orig:285 D.6651 ] [285])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:284 D.6644 ] [284]) [0 _225->character+0 S8 A64])) fmtext_o.cpp:564 89 {*movdi_internal}
     (nil))
(insn 536 535 537 43 (set (reg:SI 2 cx [521])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:564 90 {*movsi_internal}
     (nil))
(insn 537 536 538 43 (set (reg:DI 2 cx [orig:286 D.6652 ] [286])
        (sign_extend:DI (reg:SI 2 cx [521]))) fmtext_o.cpp:564 142 {*extendsidi2_rex64}
     (nil))
(insn 538 537 539 43 (parallel [
            (set (reg:DI 2 cx [orig:287 D.6652 ] [287])
                (plus:DI (reg:DI 2 cx [orig:286 D.6652 ] [286])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 221 {*adddi_1}
     (nil))
(insn 539 538 540 43 (parallel [
            (set (reg/f:DI 0 ax [orig:288 D.6651 ] [288])
                (plus:DI (reg/f:DI 0 ax [orig:285 D.6651 ] [285])
                    (reg:DI 2 cx [orig:287 D.6652 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:564 221 {*adddi_1}
     (nil))
(insn 540 539 541 43 (set (reg:QI 0 ax [orig:289 D.6653 ] [289])
        (mem:QI (reg/f:DI 0 ax [orig:288 D.6651 ] [288]) [0 *_229+0 S1 A8])) fmtext_o.cpp:564 93 {*movqi_internal}
     (nil))
(insn 541 540 542 43 (set (mem:QI (reg/f:DI 1 dx [orig:281 D.6651 ] [281]) [0 *_222+0 S1 A8])
        (reg:QI 0 ax [orig:289 D.6653 ] [289])) fmtext_o.cpp:564 93 {*movqi_internal}
     (nil))
(insn 542 541 543 43 (set (reg:SI 0 ax [522])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 543 542 544 43 (set (reg:DI 0 ax [orig:290 D.6633 ] [290])
        (sign_extend:DI (reg:SI 0 ax [522]))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 544 543 545 43 (parallel [
            (set (reg:DI 1 dx [orig:291 D.6633 ] [291])
                (ashift:DI (reg:DI 0 ax [orig:290 D.6633 ] [290])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 497 {*ashldi3_1}
     (nil))
(insn 545 544 546 43 (set (reg/f:DI 0 ax [523])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (nil))
(insn 546 545 547 43 (parallel [
            (set (reg/f:DI 0 ax [orig:292 D.6645 ] [292])
                (plus:DI (reg/f:DI 0 ax [523])
                    (reg:DI 1 dx [orig:291 D.6633 ] [291])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:291 D.6633 ] [291]))
        (nil)))
(insn 547 546 548 43 (set (reg/f:DI 0 ax [orig:293 D.6651 ] [293])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:292 D.6645 ] [292]) [0 _233->character+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (nil))
(insn 548 547 549 43 (set (reg:SI 1 dx [524])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 549 548 550 43 (set (reg:DI 1 dx [orig:294 D.6652 ] [294])
        (sign_extend:DI (reg:SI 1 dx [524]))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 550 549 551 43 (parallel [
            (set (reg:DI 1 dx [orig:295 D.6652 ] [295])
                (plus:DI (reg:DI 1 dx [orig:294 D.6652 ] [294])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 221 {*adddi_1}
     (nil))
(insn 551 550 552 43 (parallel [
            (set (reg/f:DI 1 dx [orig:296 D.6651 ] [296])
                (plus:DI (reg:DI 1 dx [orig:295 D.6652 ] [295])
                    (reg/f:DI 0 ax [orig:293 D.6651 ] [293])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 221 {*adddi_1}
     (nil))
(insn 552 551 553 43 (set (reg:SI 0 ax [525])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 553 552 554 43 (set (reg:DI 0 ax [orig:297 D.6633 ] [297])
        (sign_extend:DI (reg:SI 0 ax [525]))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 554 553 555 43 (parallel [
            (set (reg:DI 2 cx [orig:298 D.6633 ] [298])
                (ashift:DI (reg:DI 0 ax [orig:297 D.6633 ] [297])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 497 {*ashldi3_1}
     (nil))
(insn 555 554 556 43 (set (reg/f:DI 0 ax [526])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (nil))
(insn 556 555 557 43 (parallel [
            (set (reg/f:DI 0 ax [orig:299 D.6644 ] [299])
                (plus:DI (reg/f:DI 0 ax [526])
                    (reg:DI 2 cx [orig:298 D.6633 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:298 D.6633 ] [298]))
        (nil)))
(insn 557 556 558 43 (set (reg/f:DI 0 ax [orig:300 D.6651 ] [300])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:299 D.6644 ] [299]) [0 _240->character+0 S8 A64])) fmtext_o.cpp:565 89 {*movdi_internal}
     (nil))
(insn 558 557 559 43 (set (reg:SI 2 cx [527])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:565 90 {*movsi_internal}
     (nil))
(insn 559 558 560 43 (set (reg:DI 2 cx [orig:301 D.6652 ] [301])
        (sign_extend:DI (reg:SI 2 cx [527]))) fmtext_o.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 560 559 561 43 (parallel [
            (set (reg:DI 2 cx [orig:302 D.6652 ] [302])
                (plus:DI (reg:DI 2 cx [orig:301 D.6652 ] [301])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 221 {*adddi_1}
     (nil))
(insn 561 560 562 43 (parallel [
            (set (reg/f:DI 0 ax [orig:303 D.6651 ] [303])
                (plus:DI (reg/f:DI 0 ax [orig:300 D.6651 ] [300])
                    (reg:DI 2 cx [orig:302 D.6652 ] [302])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:565 221 {*adddi_1}
     (nil))
(insn 562 561 563 43 (set (reg:QI 0 ax [orig:304 D.6653 ] [304])
        (mem:QI (reg/f:DI 0 ax [orig:303 D.6651 ] [303]) [0 *_244+0 S1 A8])) fmtext_o.cpp:565 93 {*movqi_internal}
     (nil))
(insn 563 562 564 43 (set (mem:QI (reg/f:DI 1 dx [orig:296 D.6651 ] [296]) [0 *_237+0 S1 A8])
        (reg:QI 0 ax [orig:304 D.6653 ] [304])) fmtext_o.cpp:565 93 {*movqi_internal}
     (nil))
(insn 564 563 565 43 (set (reg:SI 0 ax [528])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 565 564 566 43 (set (reg:DI 0 ax [orig:305 D.6633 ] [305])
        (sign_extend:DI (reg:SI 0 ax [528]))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (nil))
(insn 566 565 567 43 (parallel [
            (set (reg:DI 1 dx [orig:306 D.6633 ] [306])
                (ashift:DI (reg:DI 0 ax [orig:305 D.6633 ] [305])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 497 {*ashldi3_1}
     (nil))
(insn 567 566 568 43 (set (reg/f:DI 0 ax [529])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (nil))
(insn 568 567 569 43 (parallel [
            (set (reg/f:DI 0 ax [orig:307 D.6645 ] [307])
                (plus:DI (reg/f:DI 0 ax [529])
                    (reg:DI 1 dx [orig:306 D.6633 ] [306])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:306 D.6633 ] [306]))
        (nil)))
(insn 569 568 570 43 (set (reg/f:DI 0 ax [orig:308 D.6651 ] [308])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:307 D.6645 ] [307]) [0 _248->character+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (nil))
(insn 570 569 571 43 (set (reg:SI 1 dx [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 571 570 572 43 (set (reg:DI 1 dx [orig:309 D.6652 ] [309])
        (sign_extend:DI (reg:SI 1 dx [530]))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (nil))
(insn 572 571 573 43 (parallel [
            (set (reg:DI 1 dx [orig:310 D.6652 ] [310])
                (plus:DI (reg:DI 1 dx [orig:309 D.6652 ] [309])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 221 {*adddi_1}
     (nil))
(insn 573 572 574 43 (parallel [
            (set (reg/f:DI 1 dx [orig:311 D.6651 ] [311])
                (plus:DI (reg:DI 1 dx [orig:310 D.6652 ] [310])
                    (reg/f:DI 0 ax [orig:308 D.6651 ] [308])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 221 {*adddi_1}
     (nil))
(insn 574 573 575 43 (set (reg:SI 0 ax [531])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 575 574 576 43 (set (reg:DI 0 ax [orig:312 D.6633 ] [312])
        (sign_extend:DI (reg:SI 0 ax [531]))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (nil))
(insn 576 575 577 43 (parallel [
            (set (reg:DI 2 cx [orig:313 D.6633 ] [313])
                (ashift:DI (reg:DI 0 ax [orig:312 D.6633 ] [312])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 497 {*ashldi3_1}
     (nil))
(insn 577 576 578 43 (set (reg/f:DI 0 ax [532])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (nil))
(insn 578 577 579 43 (parallel [
            (set (reg/f:DI 0 ax [orig:314 D.6644 ] [314])
                (plus:DI (reg/f:DI 0 ax [532])
                    (reg:DI 2 cx [orig:313 D.6633 ] [313])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:313 D.6633 ] [313]))
        (nil)))
(insn 579 578 580 43 (set (reg/f:DI 0 ax [orig:315 D.6651 ] [315])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:314 D.6644 ] [314]) [0 _255->character+0 S8 A64])) fmtext_o.cpp:566 89 {*movdi_internal}
     (nil))
(insn 580 579 581 43 (set (reg:SI 2 cx [533])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:566 90 {*movsi_internal}
     (nil))
(insn 581 580 582 43 (set (reg:DI 2 cx [orig:316 D.6652 ] [316])
        (sign_extend:DI (reg:SI 2 cx [533]))) fmtext_o.cpp:566 142 {*extendsidi2_rex64}
     (nil))
(insn 582 581 583 43 (parallel [
            (set (reg:DI 2 cx [orig:317 D.6652 ] [317])
                (plus:DI (reg:DI 2 cx [orig:316 D.6652 ] [316])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 221 {*adddi_1}
     (nil))
(insn 583 582 584 43 (parallel [
            (set (reg/f:DI 0 ax [orig:318 D.6651 ] [318])
                (plus:DI (reg/f:DI 0 ax [orig:315 D.6651 ] [315])
                    (reg:DI 2 cx [orig:317 D.6652 ] [317])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:566 221 {*adddi_1}
     (nil))
(insn 584 583 585 43 (set (reg:QI 0 ax [orig:319 D.6653 ] [319])
        (mem:QI (reg/f:DI 0 ax [orig:318 D.6651 ] [318]) [0 *_259+0 S1 A8])) fmtext_o.cpp:566 93 {*movqi_internal}
     (nil))
(insn 585 584 586 43 (set (mem:QI (reg/f:DI 1 dx [orig:311 D.6651 ] [311]) [0 *_252+0 S1 A8])
        (reg:QI 0 ax [orig:319 D.6653 ] [319])) fmtext_o.cpp:566 93 {*movqi_internal}
     (nil))
(insn 586 585 587 43 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 220 {*addsi_1}
     (nil))
;;  succ:       44 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU,DFS_BACK)
;;              42 [100.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 252 253 254 255 256 257 258 259 260 261 534 535
(code_label 587 586 588 44 117 "" [1 uses])
(note 588 587 589 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 589 588 590 44 (set (reg:SI 0 ax [534])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 590 589 591 44 (set (reg:DI 0 ax [orig:252 D.6633 ] [252])
        (sign_extend:DI (reg:SI 0 ax [534]))) fmtext_o.cpp:562 142 {*extendsidi2_rex64}
     (nil))
(insn 591 590 592 44 (parallel [
            (set (reg:DI 1 dx [orig:253 D.6633 ] [253])
                (ashift:DI (reg:DI 0 ax [orig:252 D.6633 ] [252])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 497 {*ashldi3_1}
     (nil))
(insn 592 591 593 44 (set (reg/f:DI 0 ax [535])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:562 89 {*movdi_internal}
     (nil))
(insn 593 592 594 44 (parallel [
            (set (reg/f:DI 0 ax [orig:254 D.6638 ] [254])
                (plus:DI (reg/f:DI 0 ax [535])
                    (reg:DI 1 dx [orig:253 D.6633 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:253 D.6633 ] [253]))
        (nil)))
(insn 594 593 595 44 (set (reg/f:DI 0 ax [orig:255 D.6639 ] [255])
        (mem/f:DI (reg/f:DI 0 ax [orig:254 D.6638 ] [254]) [0 *_195+0 S8 A64])) fmtext_o.cpp:562 89 {*movdi_internal}
     (nil))
(insn 595 594 596 44 (set (reg:SI 0 ax [orig:256 D.6632 ] [256])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:255 D.6639 ] [255])
                (const_int 8 [0x8])) [0 _196->np.number+0 S4 A32])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 596 595 597 44 (set (reg:DI 0 ax [orig:257 D.6633 ] [257])
        (sign_extend:DI (reg:SI 0 ax [orig:256 D.6632 ] [256]))) fmtext_o.cpp:562 142 {*extendsidi2_rex64}
     (nil))
(insn 597 596 598 44 (set (reg:SI 1 dx [orig:258 D.6650 ] [258])
        (reg:SI 0 ax [orig:257 D.6633 ] [257])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 598 597 599 44 (set (reg:SI 0 ax [orig:259 D.6650 ] [259])
        (const_int 8 [0x8])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 599 598 600 44 (parallel [
            (set (reg:SI 0 ax [orig:260 D.6650 ] [260])
                (mult:SI (reg:SI 0 ax [orig:259 D.6650 ] [259])
                    (reg:SI 1 dx [orig:258 D.6650 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:562 306 {*mulsi3_1}
     (nil))
(insn 600 599 602 44 (set (reg:SI 0 ax [orig:261 D.6632 ] [261])
        (reg:SI 0 ax [orig:260 D.6650 ] [260])) fmtext_o.cpp:562 90 {*movsi_internal}
     (nil))
(insn 602 600 603 44 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:261 D.6632 ] [261])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))) fmtext_o.cpp:562 7 {*cmpsi_1}
     (nil))
(jump_insn 603 602 814 44 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 601)
            (pc))) fmtext_o.cpp:562 596 {*jcc_1}
     (nil)
 -> 601)
;;  succ:       43
;;              45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 814 603 815 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(jump_insn 815 814 816 45 (set (pc)
        (label_ref 717)) 636 {jump}
     (nil)
 -> 717)
;;  succ:       49 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 816 815 607)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 607 816 608 46 116 "" [1 uses])
(note 608 607 609 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 609 608 817 46 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(jump_insn 817 609 818 46 (set (pc)
        (label_ref 700)) fmtext_o.cpp:569 636 {jump}
     (nil)
 -> 700)
;;  succ:       48 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 818 817 714)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559
(code_label 714 818 612 47 121 "" [1 uses])
(note 612 714 613 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 613 612 614 47 (set (reg:SI 0 ax [536])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 614 613 615 47 (set (reg:DI 0 ax [orig:330 D.6633 ] [330])
        (sign_extend:DI (reg:SI 0 ax [536]))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (nil))
(insn 615 614 616 47 (parallel [
            (set (reg:DI 1 dx [orig:331 D.6633 ] [331])
                (ashift:DI (reg:DI 0 ax [orig:330 D.6633 ] [330])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 497 {*ashldi3_1}
     (nil))
(insn 616 615 617 47 (set (reg/f:DI 0 ax [537])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (nil))
(insn 617 616 618 47 (parallel [
            (set (reg/f:DI 0 ax [orig:332 D.6645 ] [332])
                (plus:DI (reg/f:DI 0 ax [537])
                    (reg:DI 1 dx [orig:331 D.6633 ] [331])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:331 D.6633 ] [331]))
        (nil)))
(insn 618 617 619 47 (set (reg/f:DI 1 dx [orig:333 D.6651 ] [333])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:332 D.6645 ] [332]) [0 _275->character+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (nil))
(insn 619 618 620 47 (set (reg:SI 0 ax [538])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 620 619 621 47 (set (reg:DI 0 ax [orig:334 D.6652 ] [334])
        (sign_extend:DI (reg:SI 0 ax [538]))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (nil))
(insn 621 620 622 47 (parallel [
            (set (reg/f:DI 1 dx [orig:335 D.6651 ] [335])
                (plus:DI (reg/f:DI 1 dx [orig:333 D.6651 ] [333])
                    (reg:DI 0 ax [orig:334 D.6652 ] [334])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 221 {*adddi_1}
     (nil))
(insn 622 621 623 47 (set (reg:SI 0 ax [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 623 622 624 47 (set (reg:DI 0 ax [orig:336 D.6633 ] [336])
        (sign_extend:DI (reg:SI 0 ax [539]))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (nil))
(insn 624 623 625 47 (parallel [
            (set (reg:DI 2 cx [orig:337 D.6633 ] [337])
                (ashift:DI (reg:DI 0 ax [orig:336 D.6633 ] [336])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 497 {*ashldi3_1}
     (nil))
(insn 625 624 626 47 (set (reg/f:DI 0 ax [540])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (nil))
(insn 626 625 627 47 (parallel [
            (set (reg/f:DI 0 ax [orig:338 D.6644 ] [338])
                (plus:DI (reg/f:DI 0 ax [540])
                    (reg:DI 2 cx [orig:337 D.6633 ] [337])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:337 D.6633 ] [337]))
        (nil)))
(insn 627 626 628 47 (set (reg/f:DI 0 ax [orig:339 D.6651 ] [339])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:338 D.6644 ] [338]) [0 _281->character+0 S8 A64])) fmtext_o.cpp:570 89 {*movdi_internal}
     (nil))
(insn 628 627 629 47 (set (reg:SI 2 cx [541])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:570 90 {*movsi_internal}
     (nil))
(insn 629 628 630 47 (set (reg:DI 2 cx [orig:340 D.6652 ] [340])
        (sign_extend:DI (reg:SI 2 cx [541]))) fmtext_o.cpp:570 142 {*extendsidi2_rex64}
     (nil))
(insn 630 629 631 47 (parallel [
            (set (reg:DI 2 cx [orig:341 D.6652 ] [341])
                (plus:DI (reg:DI 2 cx [orig:340 D.6652 ] [340])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 221 {*adddi_1}
     (nil))
(insn 631 630 632 47 (parallel [
            (set (reg/f:DI 0 ax [orig:342 D.6651 ] [342])
                (plus:DI (reg/f:DI 0 ax [orig:339 D.6651 ] [339])
                    (reg:DI 2 cx [orig:341 D.6652 ] [341])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:570 221 {*adddi_1}
     (nil))
(insn 632 631 633 47 (set (reg:QI 0 ax [orig:343 D.6653 ] [343])
        (mem:QI (reg/f:DI 0 ax [orig:342 D.6651 ] [342]) [0 *_285+0 S1 A8])) fmtext_o.cpp:570 93 {*movqi_internal}
     (nil))
(insn 633 632 634 47 (set (mem:QI (reg/f:DI 1 dx [orig:335 D.6651 ] [335]) [0 *_278+0 S1 A8])
        (reg:QI 0 ax [orig:343 D.6653 ] [343])) fmtext_o.cpp:570 93 {*movqi_internal}
     (nil))
(insn 634 633 635 47 (set (reg:SI 0 ax [542])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 635 634 636 47 (set (reg:DI 0 ax [orig:344 D.6633 ] [344])
        (sign_extend:DI (reg:SI 0 ax [542]))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 636 635 637 47 (parallel [
            (set (reg:DI 1 dx [orig:345 D.6633 ] [345])
                (ashift:DI (reg:DI 0 ax [orig:344 D.6633 ] [344])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 497 {*ashldi3_1}
     (nil))
(insn 637 636 638 47 (set (reg/f:DI 0 ax [543])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (nil))
(insn 638 637 639 47 (parallel [
            (set (reg/f:DI 0 ax [orig:346 D.6645 ] [346])
                (plus:DI (reg/f:DI 0 ax [543])
                    (reg:DI 1 dx [orig:345 D.6633 ] [345])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:345 D.6633 ] [345]))
        (nil)))
(insn 639 638 640 47 (set (reg/f:DI 0 ax [orig:347 D.6651 ] [347])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:346 D.6645 ] [346]) [0 _289->character+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (nil))
(insn 640 639 641 47 (set (reg:SI 1 dx [544])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 641 640 642 47 (set (reg:DI 1 dx [orig:348 D.6652 ] [348])
        (sign_extend:DI (reg:SI 1 dx [544]))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 642 641 643 47 (parallel [
            (set (reg:DI 1 dx [orig:349 D.6652 ] [349])
                (plus:DI (reg:DI 1 dx [orig:348 D.6652 ] [348])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 221 {*adddi_1}
     (nil))
(insn 643 642 644 47 (parallel [
            (set (reg/f:DI 1 dx [orig:350 D.6651 ] [350])
                (plus:DI (reg:DI 1 dx [orig:349 D.6652 ] [349])
                    (reg/f:DI 0 ax [orig:347 D.6651 ] [347])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 221 {*adddi_1}
     (nil))
(insn 644 643 645 47 (set (reg:SI 0 ax [545])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 645 644 646 47 (set (reg:DI 0 ax [orig:351 D.6633 ] [351])
        (sign_extend:DI (reg:SI 0 ax [545]))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 646 645 647 47 (parallel [
            (set (reg:DI 2 cx [orig:352 D.6633 ] [352])
                (ashift:DI (reg:DI 0 ax [orig:351 D.6633 ] [351])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 497 {*ashldi3_1}
     (nil))
(insn 647 646 648 47 (set (reg/f:DI 0 ax [546])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (nil))
(insn 648 647 649 47 (parallel [
            (set (reg/f:DI 0 ax [orig:353 D.6644 ] [353])
                (plus:DI (reg/f:DI 0 ax [546])
                    (reg:DI 2 cx [orig:352 D.6633 ] [352])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:352 D.6633 ] [352]))
        (nil)))
(insn 649 648 650 47 (set (reg/f:DI 0 ax [orig:354 D.6651 ] [354])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:353 D.6644 ] [353]) [0 _296->character+0 S8 A64])) fmtext_o.cpp:571 89 {*movdi_internal}
     (nil))
(insn 650 649 651 47 (set (reg:SI 2 cx [547])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:571 90 {*movsi_internal}
     (nil))
(insn 651 650 652 47 (set (reg:DI 2 cx [orig:355 D.6652 ] [355])
        (sign_extend:DI (reg:SI 2 cx [547]))) fmtext_o.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 652 651 653 47 (parallel [
            (set (reg:DI 2 cx [orig:356 D.6652 ] [356])
                (plus:DI (reg:DI 2 cx [orig:355 D.6652 ] [355])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 221 {*adddi_1}
     (nil))
(insn 653 652 654 47 (parallel [
            (set (reg/f:DI 0 ax [orig:357 D.6651 ] [357])
                (plus:DI (reg/f:DI 0 ax [orig:354 D.6651 ] [354])
                    (reg:DI 2 cx [orig:356 D.6652 ] [356])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:571 221 {*adddi_1}
     (nil))
(insn 654 653 655 47 (set (reg:QI 0 ax [orig:358 D.6653 ] [358])
        (mem:QI (reg/f:DI 0 ax [orig:357 D.6651 ] [357]) [0 *_300+0 S1 A8])) fmtext_o.cpp:571 93 {*movqi_internal}
     (nil))
(insn 655 654 656 47 (set (mem:QI (reg/f:DI 1 dx [orig:350 D.6651 ] [350]) [0 *_293+0 S1 A8])
        (reg:QI 0 ax [orig:358 D.6653 ] [358])) fmtext_o.cpp:571 93 {*movqi_internal}
     (nil))
(insn 656 655 657 47 (set (reg:SI 0 ax [548])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 657 656 658 47 (set (reg:DI 0 ax [orig:359 D.6633 ] [359])
        (sign_extend:DI (reg:SI 0 ax [548]))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (nil))
(insn 658 657 659 47 (parallel [
            (set (reg:DI 1 dx [orig:360 D.6633 ] [360])
                (ashift:DI (reg:DI 0 ax [orig:359 D.6633 ] [359])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 497 {*ashldi3_1}
     (nil))
(insn 659 658 660 47 (set (reg/f:DI 0 ax [549])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (nil))
(insn 660 659 661 47 (parallel [
            (set (reg/f:DI 0 ax [orig:361 D.6645 ] [361])
                (plus:DI (reg/f:DI 0 ax [549])
                    (reg:DI 1 dx [orig:360 D.6633 ] [360])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:360 D.6633 ] [360]))
        (nil)))
(insn 661 660 662 47 (set (reg/f:DI 0 ax [orig:362 D.6651 ] [362])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:361 D.6645 ] [361]) [0 _304->character+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (nil))
(insn 662 661 663 47 (set (reg:SI 1 dx [550])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 663 662 664 47 (set (reg:DI 1 dx [orig:363 D.6652 ] [363])
        (sign_extend:DI (reg:SI 1 dx [550]))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (nil))
(insn 664 663 665 47 (parallel [
            (set (reg:DI 1 dx [orig:364 D.6652 ] [364])
                (plus:DI (reg:DI 1 dx [orig:363 D.6652 ] [363])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 221 {*adddi_1}
     (nil))
(insn 665 664 666 47 (parallel [
            (set (reg/f:DI 1 dx [orig:365 D.6651 ] [365])
                (plus:DI (reg:DI 1 dx [orig:364 D.6652 ] [364])
                    (reg/f:DI 0 ax [orig:362 D.6651 ] [362])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 221 {*adddi_1}
     (nil))
(insn 666 665 667 47 (set (reg:SI 0 ax [551])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 667 666 668 47 (set (reg:DI 0 ax [orig:366 D.6633 ] [366])
        (sign_extend:DI (reg:SI 0 ax [551]))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (nil))
(insn 668 667 669 47 (parallel [
            (set (reg:DI 2 cx [orig:367 D.6633 ] [367])
                (ashift:DI (reg:DI 0 ax [orig:366 D.6633 ] [366])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 497 {*ashldi3_1}
     (nil))
(insn 669 668 670 47 (set (reg/f:DI 0 ax [552])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (nil))
(insn 670 669 671 47 (parallel [
            (set (reg/f:DI 0 ax [orig:368 D.6644 ] [368])
                (plus:DI (reg/f:DI 0 ax [552])
                    (reg:DI 2 cx [orig:367 D.6633 ] [367])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:367 D.6633 ] [367]))
        (nil)))
(insn 671 670 672 47 (set (reg/f:DI 0 ax [orig:369 D.6651 ] [369])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:368 D.6644 ] [368]) [0 _311->character+0 S8 A64])) fmtext_o.cpp:572 89 {*movdi_internal}
     (nil))
(insn 672 671 673 47 (set (reg:SI 2 cx [553])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:572 90 {*movsi_internal}
     (nil))
(insn 673 672 674 47 (set (reg:DI 2 cx [orig:370 D.6652 ] [370])
        (sign_extend:DI (reg:SI 2 cx [553]))) fmtext_o.cpp:572 142 {*extendsidi2_rex64}
     (nil))
(insn 674 673 675 47 (parallel [
            (set (reg:DI 2 cx [orig:371 D.6652 ] [371])
                (plus:DI (reg:DI 2 cx [orig:370 D.6652 ] [370])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 221 {*adddi_1}
     (nil))
(insn 675 674 676 47 (parallel [
            (set (reg/f:DI 0 ax [orig:372 D.6651 ] [372])
                (plus:DI (reg/f:DI 0 ax [orig:369 D.6651 ] [369])
                    (reg:DI 2 cx [orig:371 D.6652 ] [371])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:572 221 {*adddi_1}
     (nil))
(insn 676 675 677 47 (set (reg:QI 0 ax [orig:373 D.6653 ] [373])
        (mem:QI (reg/f:DI 0 ax [orig:372 D.6651 ] [372]) [0 *_315+0 S1 A8])) fmtext_o.cpp:572 93 {*movqi_internal}
     (nil))
(insn 677 676 678 47 (set (mem:QI (reg/f:DI 1 dx [orig:365 D.6651 ] [365]) [0 *_308+0 S1 A8])
        (reg:QI 0 ax [orig:373 D.6653 ] [373])) fmtext_o.cpp:572 93 {*movqi_internal}
     (nil))
(insn 678 677 679 47 (set (reg:SI 0 ax [554])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 679 678 680 47 (set (reg:DI 0 ax [orig:374 D.6633 ] [374])
        (sign_extend:DI (reg:SI 0 ax [554]))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (nil))
(insn 680 679 681 47 (parallel [
            (set (reg:DI 1 dx [orig:375 D.6633 ] [375])
                (ashift:DI (reg:DI 0 ax [orig:374 D.6633 ] [374])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 497 {*ashldi3_1}
     (nil))
(insn 681 680 682 47 (set (reg/f:DI 0 ax [555])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 switch_data+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (nil))
(insn 682 681 683 47 (parallel [
            (set (reg/f:DI 0 ax [orig:376 D.6645 ] [376])
                (plus:DI (reg/f:DI 0 ax [555])
                    (reg:DI 1 dx [orig:375 D.6633 ] [375])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:375 D.6633 ] [375]))
        (nil)))
(insn 683 682 684 47 (set (reg/f:DI 0 ax [orig:377 D.6651 ] [377])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:376 D.6645 ] [376]) [0 _319->character+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (nil))
(insn 684 683 685 47 (set (reg:SI 1 dx [556])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 685 684 686 47 (set (reg:DI 1 dx [orig:378 D.6652 ] [378])
        (sign_extend:DI (reg:SI 1 dx [556]))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (nil))
(insn 686 685 687 47 (parallel [
            (set (reg:DI 1 dx [orig:379 D.6652 ] [379])
                (plus:DI (reg:DI 1 dx [orig:378 D.6652 ] [378])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 221 {*adddi_1}
     (nil))
(insn 687 686 688 47 (parallel [
            (set (reg/f:DI 1 dx [orig:380 D.6651 ] [380])
                (plus:DI (reg:DI 1 dx [orig:379 D.6652 ] [379])
                    (reg/f:DI 0 ax [orig:377 D.6651 ] [377])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 221 {*adddi_1}
     (nil))
(insn 688 687 689 47 (set (reg:SI 0 ax [557])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 689 688 690 47 (set (reg:DI 0 ax [orig:381 D.6633 ] [381])
        (sign_extend:DI (reg:SI 0 ax [557]))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (nil))
(insn 690 689 691 47 (parallel [
            (set (reg:DI 2 cx [orig:382 D.6633 ] [382])
                (ashift:DI (reg:DI 0 ax [orig:381 D.6633 ] [381])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 497 {*ashldi3_1}
     (nil))
(insn 691 690 692 47 (set (reg/f:DI 0 ax [558])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (nil))
(insn 692 691 693 47 (parallel [
            (set (reg/f:DI 0 ax [orig:383 D.6644 ] [383])
                (plus:DI (reg/f:DI 0 ax [558])
                    (reg:DI 2 cx [orig:382 D.6633 ] [382])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:382 D.6633 ] [382]))
        (nil)))
(insn 693 692 694 47 (set (reg/f:DI 2 cx [orig:384 D.6651 ] [384])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:383 D.6644 ] [383]) [0 _326->character+0 S8 A64])) fmtext_o.cpp:573 89 {*movdi_internal}
     (nil))
(insn 694 693 695 47 (set (reg:SI 0 ax [559])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:573 90 {*movsi_internal}
     (nil))
(insn 695 694 696 47 (set (reg:DI 0 ax [orig:385 D.6652 ] [385])
        (sign_extend:DI (reg:SI 0 ax [559]))) fmtext_o.cpp:573 142 {*extendsidi2_rex64}
     (nil))
(insn 696 695 697 47 (parallel [
            (set (reg/f:DI 0 ax [orig:386 D.6651 ] [386])
                (plus:DI (reg:DI 0 ax [orig:385 D.6652 ] [385])
                    (reg/f:DI 2 cx [orig:384 D.6651 ] [384])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:573 221 {*adddi_1}
     (nil))
(insn 697 696 698 47 (set (reg:QI 0 ax [orig:387 D.6653 ] [387])
        (mem:QI (reg/f:DI 0 ax [orig:386 D.6651 ] [386]) [0 *_329+0 S1 A8])) fmtext_o.cpp:573 93 {*movqi_internal}
     (nil))
(insn 698 697 699 47 (set (mem:QI (reg/f:DI 1 dx [orig:380 D.6651 ] [380]) [0 *_323+0 S1 A8])
        (reg:QI 0 ax [orig:387 D.6653 ] [387])) fmtext_o.cpp:573 93 {*movqi_internal}
     (nil))
(insn 699 698 700 47 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 220 {*addsi_1}
     (nil))
;;  succ:       48 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU,DFS_BACK)
;;              46 [100.0%] 
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 320 321 322 323 324 325 326 327 328 329 560 561
(code_label 700 699 701 48 120 "" [1 uses])
(note 701 700 702 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 702 701 703 48 (set (reg:SI 0 ax [560])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 703 702 704 48 (set (reg:DI 0 ax [orig:320 D.6633 ] [320])
        (sign_extend:DI (reg:SI 0 ax [560]))) fmtext_o.cpp:569 142 {*extendsidi2_rex64}
     (nil))
(insn 704 703 705 48 (parallel [
            (set (reg:DI 1 dx [orig:321 D.6633 ] [321])
                (ashift:DI (reg:DI 0 ax [orig:320 D.6633 ] [320])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 497 {*ashldi3_1}
     (nil))
(insn 705 704 706 48 (set (reg/f:DI 0 ax [561])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:569 89 {*movdi_internal}
     (nil))
(insn 706 705 707 48 (parallel [
            (set (reg/f:DI 0 ax [orig:322 D.6638 ] [322])
                (plus:DI (reg/f:DI 0 ax [561])
                    (reg:DI 1 dx [orig:321 D.6633 ] [321])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:321 D.6633 ] [321]))
        (nil)))
(insn 707 706 708 48 (set (reg/f:DI 0 ax [orig:323 D.6639 ] [323])
        (mem/f:DI (reg/f:DI 0 ax [orig:322 D.6638 ] [322]) [0 *_265+0 S8 A64])) fmtext_o.cpp:569 89 {*movdi_internal}
     (nil))
(insn 708 707 709 48 (set (reg:SI 0 ax [orig:324 D.6632 ] [324])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:323 D.6639 ] [323])
                (const_int 8 [0x8])) [0 _266->np.number+0 S4 A32])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 709 708 710 48 (set (reg:DI 0 ax [orig:325 D.6633 ] [325])
        (sign_extend:DI (reg:SI 0 ax [orig:324 D.6632 ] [324]))) fmtext_o.cpp:569 142 {*extendsidi2_rex64}
     (nil))
(insn 710 709 711 48 (set (reg:SI 1 dx [orig:326 D.6650 ] [326])
        (reg:SI 0 ax [orig:325 D.6633 ] [325])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 711 710 712 48 (set (reg:SI 0 ax [orig:327 D.6650 ] [327])
        (const_int 8 [0x8])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 712 711 713 48 (parallel [
            (set (reg:SI 0 ax [orig:328 D.6650 ] [328])
                (mult:SI (reg:SI 0 ax [orig:327 D.6650 ] [327])
                    (reg:SI 1 dx [orig:326 D.6650 ] [326])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:569 306 {*mulsi3_1}
     (nil))
(insn 713 712 715 48 (set (reg:SI 0 ax [orig:329 D.6632 ] [329])
        (reg:SI 0 ax [orig:328 D.6650 ] [328])) fmtext_o.cpp:569 90 {*movsi_internal}
     (nil))
(insn 715 713 716 48 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:329 D.6632 ] [329])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))) fmtext_o.cpp:569 7 {*cmpsi_1}
     (nil))
(jump_insn 716 715 717 48 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 714)
            (pc))) fmtext_o.cpp:569 596 {*jcc_1}
     (nil)
 -> 714)
;;  succ:       47
;;              49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;;              45 [100.0%] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 388 389 390 391 392 562 563
(code_label 717 716 718 49 119 "" [1 uses])
(note 718 717 719 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 719 718 720 49 (set (reg:SI 0 ax [562])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:580 90 {*movsi_internal}
     (nil))
(insn 720 719 721 49 (set (reg:DI 0 ax [orig:388 D.6633 ] [388])
        (sign_extend:DI (reg:SI 0 ax [562]))) fmtext_o.cpp:580 142 {*extendsidi2_rex64}
     (nil))
(insn 721 720 722 49 (parallel [
            (set (reg:DI 1 dx [orig:389 D.6633 ] [389])
                (ashift:DI (reg:DI 0 ax [orig:388 D.6633 ] [388])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:580 497 {*ashldi3_1}
     (nil))
(insn 722 721 723 49 (set (reg/f:DI 0 ax [563])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:580 89 {*movdi_internal}
     (nil))
(insn 723 722 724 49 (parallel [
            (set (reg/f:DI 0 ax [orig:390 D.6638 ] [390])
                (plus:DI (reg/f:DI 0 ax [563])
                    (reg:DI 1 dx [orig:389 D.6633 ] [389])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:580 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:389 D.6633 ] [389]))
        (nil)))
(insn 724 723 725 49 (set (reg/f:DI 0 ax [orig:391 D.6639 ] [391])
        (mem/f:DI (reg/f:DI 0 ax [orig:390 D.6638 ] [390]) [0 *_334+0 S8 A64])) fmtext_o.cpp:580 89 {*movdi_internal}
     (nil))
(insn 725 724 726 49 (set (reg:SI 0 ax [orig:392 D.6632 ] [392])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:391 D.6639 ] [391])
                (const_int 12 [0xc])) [0 _335->ebytes.number+0 S4 A32])) fmtext_o.cpp:580 90 {*movsi_internal}
     (nil))
(insn 726 725 727 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:392 D.6632 ] [392])
            (const_int 2 [0x2]))) fmtext_o.cpp:580 7 {*cmpsi_1}
     (nil))
(jump_insn 727 726 728 49 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 770)
            (pc))) fmtext_o.cpp:580 596 {*jcc_1}
     (nil)
 -> 770)
;;  succ:       50 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 393 394 395 396 397 564 565 566
(note 728 727 729 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 729 728 730 50 (set (reg:SI 0 ax [564])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:581 90 {*movsi_internal}
     (nil))
(insn 730 729 731 50 (set (reg:DI 0 ax [orig:393 D.6633 ] [393])
        (sign_extend:DI (reg:SI 0 ax [564]))) fmtext_o.cpp:581 142 {*extendsidi2_rex64}
     (nil))
(insn 731 730 732 50 (parallel [
            (set (reg:DI 1 dx [orig:394 D.6633 ] [394])
                (ashift:DI (reg:DI 0 ax [orig:393 D.6633 ] [393])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 497 {*ashldi3_1}
     (nil))
(insn 732 731 733 50 (set (reg/f:DI 0 ax [565])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 main_header+0 S8 A64])) fmtext_o.cpp:581 89 {*movdi_internal}
     (nil))
(insn 733 732 734 50 (parallel [
            (set (reg/f:DI 0 ax [orig:395 D.6638 ] [395])
                (plus:DI (reg/f:DI 0 ax [565])
                    (reg:DI 1 dx [orig:394 D.6633 ] [394])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:394 D.6633 ] [394]))
        (nil)))
(insn 734 733 735 50 (set (reg/f:DI 0 ax [orig:396 D.6639 ] [396])
        (mem/f:DI (reg/f:DI 0 ax [orig:395 D.6638 ] [395]) [0 *_339+0 S8 A64])) fmtext_o.cpp:581 89 {*movdi_internal}
     (nil))
(insn 735 734 736 50 (set (reg:SI 0 ax [orig:397 D.6632 ] [397])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:396 D.6639 ] [396])
                (const_int 8 [0x8])) [0 _340->np.number+0 S4 A32])) fmtext_o.cpp:581 90 {*movsi_internal}
     (nil))
(insn 736 735 737 50 (parallel [
            (set (reg:SI 0 ax [566])
                (plus:SI (reg:SI 0 ax [orig:397 D.6632 ] [397])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 220 {*addsi_1}
     (nil))
(insn 737 736 819 50 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (reg:SI 0 ax [566])) fmtext_o.cpp:581 90 {*movsi_internal}
     (nil))
(jump_insn 819 737 820 50 (set (pc)
        (label_ref 765)) fmtext_o.cpp:581 636 {jump}
     (nil)
 -> 765)
;;  succ:       52 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 820 819 767)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 567 568 569 570 571 572
(code_label 767 820 740 51 123 "" [1 uses])
(note 740 767 741 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 741 740 742 51 (set (reg:SI 0 ax [567])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 742 741 743 51 (set (reg:DI 0 ax [orig:398 D.6633 ] [398])
        (sign_extend:DI (reg:SI 0 ax [567]))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 743 742 744 51 (parallel [
            (set (reg:DI 1 dx [orig:399 D.6633 ] [399])
                (ashift:DI (reg:DI 0 ax [orig:398 D.6633 ] [398])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 497 {*ashldi3_1}
     (nil))
(insn 744 743 745 51 (set (reg/f:DI 0 ax [568])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 745 744 746 51 (parallel [
            (set (reg/f:DI 0 ax [orig:400 D.6644 ] [400])
                (plus:DI (reg/f:DI 0 ax [568])
                    (reg:DI 1 dx [orig:399 D.6633 ] [399])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:399 D.6633 ] [399]))
        (nil)))
(insn 746 745 747 51 (set (reg/f:DI 0 ax [orig:401 D.6648 ] [401])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:400 D.6644 ] [400]) [0 _345->lo+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 747 746 748 51 (set (reg:SI 1 dx [569])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 748 747 749 51 (set (reg:DI 1 dx [orig:402 D.6633 ] [402])
        (sign_extend:DI (reg:SI 1 dx [569]))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 749 748 750 51 (parallel [
            (set (reg:DI 1 dx [orig:403 D.6633 ] [403])
                (ashift:DI (reg:DI 1 dx [orig:402 D.6633 ] [402])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 497 {*ashldi3_1}
     (nil))
(insn 750 749 751 51 (parallel [
            (set (reg/f:DI 1 dx [orig:404 D.6648 ] [404])
                (plus:DI (reg:DI 1 dx [orig:403 D.6633 ] [403])
                    (reg/f:DI 0 ax [orig:401 D.6648 ] [401])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 221 {*adddi_1}
     (nil))
(insn 751 750 752 51 (set (reg:SI 0 ax [570])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 752 751 753 51 (set (reg:DI 0 ax [orig:405 D.6633 ] [405])
        (sign_extend:DI (reg:SI 0 ax [570]))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 753 752 754 51 (parallel [
            (set (reg:DI 2 cx [orig:406 D.6633 ] [406])
                (ashift:DI (reg:DI 0 ax [orig:405 D.6633 ] [405])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 497 {*ashldi3_1}
     (nil))
(insn 754 753 755 51 (set (reg/f:DI 0 ax [571])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 755 754 756 51 (parallel [
            (set (reg/f:DI 0 ax [orig:407 D.6644 ] [407])
                (plus:DI (reg/f:DI 0 ax [571])
                    (reg:DI 2 cx [orig:406 D.6633 ] [406])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:406 D.6633 ] [406]))
        (nil)))
(insn 756 755 757 51 (set (reg/f:DI 0 ax [orig:408 D.6654 ] [408])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:407 D.6644 ] [407]) [0 _352->sh+0 S8 A64])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 757 756 758 51 (set (reg:SI 2 cx [572])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) fmtext_o.cpp:582 90 {*movsi_internal}
     (nil))
(insn 758 757 759 51 (set (reg:DI 2 cx [orig:409 D.6633 ] [409])
        (sign_extend:DI (reg:SI 2 cx [572]))) fmtext_o.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 759 758 760 51 (parallel [
            (set (reg:DI 2 cx [orig:410 D.6633 ] [410])
                (ashift:DI (reg:DI 2 cx [orig:409 D.6633 ] [409])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 497 {*ashldi3_1}
     (nil))
(insn 760 759 761 51 (parallel [
            (set (reg/f:DI 0 ax [orig:411 D.6654 ] [411])
                (plus:DI (reg/f:DI 0 ax [orig:408 D.6654 ] [408])
                    (reg:DI 2 cx [orig:410 D.6633 ] [410])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:582 221 {*adddi_1}
     (nil))
(insn 761 760 762 51 (set (reg:HI 0 ax [orig:412 D.6641 ] [412])
        (mem:HI (reg/f:DI 0 ax [orig:411 D.6654 ] [411]) [0 *_356+0 S2 A16])) fmtext_o.cpp:582 92 {*movhi_internal}
     (nil))
(insn 762 761 763 51 (set (reg:DI 0 ax [orig:413 D.6655 ] [413])
        (sign_extend:DI (reg:HI 0 ax [orig:412 D.6641 ] [412]))) fmtext_o.cpp:582 145 {extendhidi2}
     (nil))
(insn 763 762 764 51 (set (mem:DI (reg/f:DI 1 dx [orig:404 D.6648 ] [404]) [0 *_349+0 S8 A64])
        (reg:DI 0 ax [orig:413 D.6655 ] [413])) fmtext_o.cpp:582 89 {*movdi_internal}
     (nil))
(insn 764 763 765 51 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:581 220 {*addsi_1}
     (nil))
;;  succ:       52 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU,DFS_BACK)
;;              50 [100.0%] 
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 765 764 766 52 122 "" [1 uses])
(note 766 765 768 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 768 766 769 52 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
            (const_int 0 [0]))) fmtext_o.cpp:581 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 769 768 770 52 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 767)
            (pc))) fmtext_o.cpp:581 596 {*jcc_1}
     (nil)
 -> 767)
;;  succ:       51
;;              53 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              52 (FALLTHRU)
;;              49
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 770 769 771 53 93 "" [2 uses])
(note 771 770 772 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 772 771 773 53 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:463 220 {*addsi_1}
     (nil))
;;  succ:       54 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 573
(code_label 773 772 774 54 92 "" [1 uses])
(note 774 773 775 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 775 774 776 54 (set (reg/f:DI 0 ax [573])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) fmtext_o.cpp:463 89 {*movdi_internal}
     (nil))
(insn 776 775 777 54 (set (reg:SI 0 ax [orig:83 D.6632 ] [83])
        (mem:SI (reg/f:DI 0 ax [573]) [0 *fid_7(D)+0 S4 A32])) fmtext_o.cpp:463 90 {*movsi_internal}
     (nil))
(insn 777 776 779 54 (parallel [
            (set (reg:SI 0 ax [orig:84 D.6632 ] [84])
                (plus:SI (reg:SI 0 ax [orig:83 D.6632 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:463 220 {*addsi_1}
     (nil))
(insn 779 777 780 54 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:84 D.6632 ] [84])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32]))) fmtext_o.cpp:463 7 {*cmpsi_1}
     (nil))
(jump_insn 780 779 781 54 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 778)
            (pc))) fmtext_o.cpp:463 596 {*jcc_1}
     (nil)
 -> 778)
;;  succ:       3
;;              55 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 414 415
(note 781 780 782 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 782 781 785 55 (set (reg:SI 0 ax [orig:414 D.6632 ] [414])
        (const_int 1 [0x1])) fmtext_o.cpp:588 90 {*movsi_internal}
     (nil))
(insn 785 782 789 55 (set (reg:SI 0 ax [orig:415 <retval> ] [415])
        (reg:SI 0 ax [orig:414 D.6632 ] [414])) fmtext_o.cpp:588 90 {*movsi_internal}
     (nil))
(insn 789 785 790 55 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:415 <retval> ] [415])) fmtext_o.cpp:590 90 {*movsi_internal}
     (nil))
(insn 790 789 821 55 (use (reg/i:SI 0 ax)) fmtext_o.cpp:590 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 821 790 0 NOTE_INSN_DELETED)

;; Function int read_PE_table(char*, int*, PE_info*) (_Z13read_PE_tablePcPiP7PE_info, funcdef_no=7, decl_uid=5319, symbol_order=7)

      Creating newreg=106
Removing SCRATCH in insn #6 (nop 2)
rescanning insn with uid = 6.
      Creating newreg=107
Removing SCRATCH in insn #92 (nop 3)
rescanning insn with uid = 92.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r106
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 40:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 51:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 57:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 71:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r107
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 12
   Insn 94: point = 0
  BB 13
   Insn 97: point = 0
  BB 11
   Insn 93: point = 0
   Insn 92: point = 0
   Insn 91: point = 1
   Insn 87: point = 2
  BB 3
   Insn 101: point = 5
   Insn 24: point = 5
   Insn 23: point = 6
   Insn 22: point = 6
   Insn 21: point = 6
   Insn 20: point = 6
   Insn 19: point = 7
  BB 10
   Insn 82: point = 8
  BB 9
   Insn 79: point = 9
   Insn 78: point = 9
   Insn 77: point = 10
  BB 8
   Insn 75: point = 11
   Insn 74: point = 11
   Insn 73: point = 11
   Insn 72: point = 12
   Insn 71: point = 13
   Insn 70: point = 15
  BB 7
   Insn 68: point = 16
   Insn 67: point = 16
   Insn 65: point = 17
   Insn 64: point = 18
   Insn 63: point = 19
   Insn 62: point = 20
   Insn 61: point = 20
   Insn 60: point = 21
  BB 4
   Insn 103: point = 22
   Insn 35: point = 22
   Insn 34: point = 22
   Insn 33: point = 22
   Insn 32: point = 23
   Insn 31: point = 23
   Insn 30: point = 24
   Insn 29: point = 25
  BB 2
   Insn 17: point = 26
   Insn 16: point = 26
   Insn 15: point = 26
   Insn 14: point = 27
   Insn 13: point = 28
   Insn 12: point = 28
   Insn 11: point = 29
   Insn 10: point = 29
   Insn 9: point = 30
   Insn 6: point = 30
   Insn 4: point = 32
   Insn 3: point = 32
   Insn 2: point = 32
  BB 6
   Insn 57: point = 32
   Insn 56: point = 32
   Insn 55: point = 32
   Insn 54: point = 32
   Insn 53: point = 33
   Insn 52: point = 33
   Insn 51: point = 34
   Insn 50: point = 35
   Insn 49: point = 37
   Insn 48: point = 38
   Insn 47: point = 40
   Insn 46: point = 42
  BB 5
   Insn 44: point = 43
   Insn 43: point = 43
   Insn 42: point = 44
   Insn 41: point = 44
   Insn 40: point = 45
   Insn 39: point = 46
 r83: [8..8] [3..5]
 r84: [26..27]
 r85: [18..19]
 r86: [16..17]
 r87: [39..40]
 r88: [36..38]
 r89: [33..35]
 r90: [11..13]
 r91: [1..2]
 r92: [28..29]
 r93: [6..7]
 r94: [23..25]
 r95: [22..24]
 r96: [44..46]
 r97: [43..45]
 r98: [41..42]
 r99: [36..37]
 r100: [32..34]
 r101: [20..21]
 r102: [14..15]
 r103: [11..12]
 r104: [9..10]
 r106: [30..31]
 r107: [0..0]
Compressing live ranges: from 47 to 38 - 80%
Ranges after the compression:
 r83: [7..7] [3..4]
 r84: [22..23]
 r85: [16..17]
 r86: [14..15]
 r87: [32..33]
 r88: [30..31]
 r89: [28..29]
 r90: [10..11]
 r91: [1..2]
 r92: [24..25]
 r93: [5..6]
 r94: [20..21]
 r95: [20..21]
 r96: [36..37]
 r97: [36..37]
 r98: [34..35]
 r99: [30..31]
 r100: [28..29]
 r101: [18..19]
 r102: [12..13]
 r103: [10..11]
 r104: [8..9]
 r106: [26..27]
 r107: [0..0]

********** Assignment #1: **********

	 Assigning to 106 (cl=INDEX_REGS, orig=106, freq=1, tfirst=106, tfreq=1)...
	   Assign 0 to reload r106 (freq=1)
	 Assigning to 107 (cl=INDEX_REGS, orig=107, freq=1, tfirst=107, tfreq=1)...
	   Assign 2 to reload r107 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 82
changing reg in insn 24
changing reg in insn 87
changing reg in insn 14
changing reg in insn 15
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 71
changing reg in insn 73
changing reg in insn 87
changing reg in insn 91
changing reg in insn 10
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 29
changing reg in insn 31
changing reg in insn 30
changing reg in insn 33
changing reg in insn 39
changing reg in insn 41
changing reg in insn 40
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 54
changing reg in insn 60
changing reg in insn 61
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 77
changing reg in insn 78
changing reg in insn 6
changing reg in insn 92
deleting insn with uid = 31.
deleting insn with uid = 41.
deleting insn with uid = 52.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 79.
verify found no changes in insn with uid = 94.


int read_PE_table(char*, int*, PE_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={31d,23u} r1={14d,6u,1e} r2={10d} r4={14d,6u} r5={16d,8u} r6={1d,38u} r7={1d,21u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={21d,5u} r18={8d} r19={8d} r20={1d,1u,2e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} 
;;    total ref usage 726{615d,108u,3e} in 67{59 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 92
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])
        (reg:DI 5 di [ filename ])) fmtext_o.cpp:592 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 pe_table+0 S8 A64])
        (reg:DI 4 si [ pe_table ])) fmtext_o.cpp:592 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 pe_info+0 S8 A64])
        (reg:DI 1 dx [ pe_info ])) fmtext_o.cpp:592 89 {*movdi_internal}
     (nil))
(note 5 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 5 9 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.6668+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [106])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:592 964 {stack_tls_protect_set_di}
     (nil))
(insn 9 6 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
        (const_int 0 [0])) fmtext_o.cpp:594 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2b8e1bfee688 *.LC22>)) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(call_insn 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b8e1bc4bd00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:598 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [orig:84 D.6664 ] [84])
        (reg:DI 0 ax)) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:84 D.6664 ] [84])) fmtext_o.cpp:598 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:600 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 17 16 18 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) fmtext_o.cpp:600 596 {*jcc_1}
     (nil)
 -> 27)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 93
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 filename+0 S8 A64])) fmtext_o.cpp:601 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 4 si)
        (reg:DI 0 ax [93])) fmtext_o.cpp:601 89 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x2b8e1bfee720 *.LC23>)) fmtext_o.cpp:601 89 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:601 93 {*movqi_internal}
     (nil))
(call_insn 23 22 24 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b8e1ba95e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:601 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 24 23 101 3 (set (reg:SI 0 ax [orig:83 D.6663 ] [83])
        (const_int 0 [0])) fmtext_o.cpp:602 90 {*movsi_internal}
     (nil))
(jump_insn 101 24 102 3 (set (pc)
        (label_ref 85)) fmtext_o.cpp:602 636 {jump}
     (nil)
 -> 85)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 102 101 27)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 94 95
(code_label 27 102 28 4 127 "" [1 uses])
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:DI 1 dx [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 30 29 32 4 (parallel [
            (set (reg:DI 0 ax [95])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:605 221 {*adddi_1}
     (nil))
(insn 32 30 33 4 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:605 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(call_insn 34 33 35 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:605 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 35 34 103 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
        (const_int 0 [0])) fmtext_o.cpp:607 90 {*movsi_internal}
     (nil))
(jump_insn 103 35 104 4 (set (pc)
        (label_ref 58)) fmtext_o.cpp:609 636 {jump}
     (nil)
 -> 58)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 104 103 66)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 96 97
(code_label 66 104 38 5 130 "" [1 uses])
(note 38 66 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg:DI 1 dx [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(insn 40 39 42 5 (parallel [
            (set (reg:DI 0 ax [97])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:610 221 {*adddi_1}
     (nil))
(insn 42 40 43 5 (set (reg:SI 4 si)
        (const_int 80 [0x50])) fmtext_o.cpp:610 90 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(call_insn 44 43 45 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b8e1bc5bc00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:610 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 87 88 89 98 99 100
(note 45 44 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 6 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])) fmtext_o.cpp:611 90 {*movsi_internal}
     (nil))
(insn 47 46 48 6 (set (reg:DI 0 ax [orig:87 D.6666 ] [87])
        (sign_extend:DI (reg:SI 0 ax [98]))) fmtext_o.cpp:611 142 {*extendsidi2_rex64}
     (nil))
(insn 48 47 49 6 (parallel [
            (set (reg:DI 1 dx [orig:88 D.6666 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.6666 ] [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:611 497 {*ashldi3_1}
     (nil))
(insn 49 48 50 6 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 pe_table+0 S8 A64])) fmtext_o.cpp:611 89 {*movdi_internal}
     (nil))
(insn 50 49 51 6 (parallel [
            (set (reg/f:DI 1 dx [orig:89 D.6667 ] [89])
                (plus:DI (reg:DI 1 dx [orig:88 D.6666 ] [88])
                    (reg/f:DI 0 ax [99])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:611 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 pe_table+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.6666 ] [88]))
        (nil)))
(insn 51 50 53 6 (parallel [
            (set (reg:DI 0 ax [100])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:611 221 {*adddi_1}
     (nil))
(insn 53 51 54 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x2b8e1c04be40 *.LC36>)) fmtext_o.cpp:611 89 {*movdi_internal}
     (nil))
(insn 54 53 55 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) fmtext_o.cpp:611 89 {*movdi_internal}
     (nil))
(insn 55 54 56 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) fmtext_o.cpp:611 93 {*movqi_internal}
     (nil))
(call_insn 56 55 57 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b8e1ba9a900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:611 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 57 56 58 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:612 220 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 101
(code_label 58 57 59 7 129 "" [1 uses])
(note 59 58 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 7 (set (reg:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:609 89 {*movdi_internal}
     (nil))
(insn 61 60 62 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [101])) fmtext_o.cpp:609 89 {*movdi_internal}
     (nil))
(call_insn 62 61 63 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("feof") [flags 0x41]  <function_decl 0x2b8e1bc63b00 feof>) [0 feof S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:609 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 63 62 64 7 (set (reg:SI 0 ax [orig:85 D.6663 ] [85])
        (reg:SI 0 ax)) fmtext_o.cpp:609 90 {*movsi_internal}
     (nil))
(insn 64 63 65 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:85 D.6663 ] [85])
            (const_int 0 [0]))) fmtext_o.cpp:609 3 {*cmpsi_ccno_1}
     (nil))
(insn 65 64 67 7 (set (reg:QI 0 ax [orig:86 D.6665 ] [86])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) fmtext_o.cpp:609 592 {*setcc_qi}
     (nil))
(insn 67 65 68 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:86 D.6665 ] [86])
            (const_int 0 [0]))) fmtext_o.cpp:609 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 68 67 69 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) fmtext_o.cpp:609 596 {*jcc_1}
     (nil)
 -> 66)
;;  succ:       5
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 102 103
(note 69 68 70 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 8 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])) fmtext_o.cpp:615 90 {*movsi_internal}
     (nil))
(insn 71 70 72 8 (parallel [
            (set (reg:SI 1 dx [orig:90 D.6663 ] [90])
                (plus:SI (reg:SI 0 ax [102])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) fmtext_o.cpp:615 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -108 [0xffffffffffffff94])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 72 71 73 8 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 pe_info+0 S8 A64])) fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 73 72 74 8 (set (mem/j:SI (reg/f:DI 0 ax [103]) [0 pe_info_17(D)->number_pe+0 S4 A32])
        (reg:SI 1 dx [orig:90 D.6663 ] [90])) fmtext_o.cpp:615 90 {*movsi_internal}
     (nil))
(insn 74 73 75 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])
            (const_int 0 [0]))) fmtext_o.cpp:618 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 75 74 76 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) fmtext_o.cpp:618 596 {*jcc_1}
     (nil)
 -> 80)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 104
(note 76 75 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 9 (set (reg:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 input_file+0 S8 A64])) fmtext_o.cpp:619 89 {*movdi_internal}
     (nil))
(insn 78 77 79 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [104])) fmtext_o.cpp:619 89 {*movdi_internal}
     (nil))
(call_insn 79 78 80 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b8e1bc4b900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) fmtext_o.cpp:619 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 80 79 81 10 131 "" [1 uses])
(note 81 80 82 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 85 10 (set (reg:SI 0 ax [orig:83 D.6663 ] [83])
        (const_int 1 [0x1])) fmtext_o.cpp:622 90 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              3 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 17 [flags] 91
(code_label 85 82 86 11 132 "" [1 uses])
(note 86 85 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 91 11 (set (reg:SI 0 ax [orig:91 <retval> ] [91])
        (reg:SI 0 ax [orig:83 D.6663 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 91 87 92 11 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:91 <retval> ] [91])) fmtext_o.cpp:623 90 {*movsi_internal}
     (nil))
(insn 92 91 93 11 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.6668+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [107]))
        ]) fmtext_o.cpp:623 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 93 92 99 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) fmtext_o.cpp:623 596 {*jcc_1}
     (nil)
 -> 96)
;;  succ:       13
;;              12 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 99 93 94 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(call_insn 94 99 95 12 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2b8e1bf5d700 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) fmtext_o.cpp:623 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 95 94 96)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 96 95 100 13 133 "" [1 uses])
(note 100 96 97 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 97 100 105 13 (use (reg/i:SI 0 ax)) fmtext_o.cpp:623 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 105 97 0 NOTE_INSN_DELETED)
