
;; Function int read_fdf_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision1*, float**, float**, Procpar_info*) (_Z13read_fdf_dataPiP10PreprocessP7IOFilesPP16Data_file_headerPP17Data_block_headerP10Precision2PP8_IO_FILEP10Precision1PPfSI_P12Procpar_info, funcdef_no=2, decl_uid=5345, symbol_order=2)

      Creating newreg=543
Removing SCRATCH in insn #19 (nop 2)
rescanning insn with uid = 19.
      Creating newreg=544
Removing SCRATCH in insn #762 (nop 3)
rescanning insn with uid = 762.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=832, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=800, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r543
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=545 from oldreg=340, assigning class GENERAL_REGS to r545
   47: {r545:DI=r545:DI<<0x8;clobber flags:CC;}
      REG_DEAD r338:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  780: r545:DI=r338:DI
    Inserting insn reload after:
  781: r340:DI=r545:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 54:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 74
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 81:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 100:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 105:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 106:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 110:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 114:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 115:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 122:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 123:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 124:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 125:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 126:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 127:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =<  (1) re*m {*pushdi2_rex64}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 129:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 131:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-16)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-24)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 135:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-32)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 137:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-40)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-40)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 143:  (0) r  (1) Z {*movdi_internal} (sp_off=-48)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) q  (1) qn {*movqi_internal} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (1) rzw {*call_value} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-48)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 150:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 151:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=546 from oldreg=368, assigning class CREG to r546
      Creating newreg=547 from oldreg=370, assigning class DIREG to r547
  151: {r546:DI=unspec[[r547:DI],r372:QI,0x8,r546:DI] 23;clobber r547:DI;clobber flags:CC;}
      REG_DEAD r372:QI
      REG_DEAD r371:DI
      REG_DEAD r370:DI
      REG_UNUSED r370:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  782: r546:DI=r371:DI
  784: r547:DI=r370:DI
    Inserting insn reload after:
  783: r368:DI=r546:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 153:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 155:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 158:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 159:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 169:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 165:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 166:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=548 from oldreg=377, assigning class CREG to r548
      Creating newreg=549 from oldreg=379, assigning class DIREG to r549
  166: {r548:DI=unspec[[r549:DI],r381:QI,0x8,r548:DI] 23;clobber r549:DI;clobber flags:CC;}
      REG_DEAD r381:QI
      REG_DEAD r380:DI
      REG_DEAD r379:DI
      REG_UNUSED r379:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  785: r548:DI=r380:DI
  787: r549:DI=r379:DI
    Inserting insn reload after:
  786: r377:DI=r548:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 170:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 173:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 174:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 184:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 180:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 181:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=550 from oldreg=386, assigning class CREG to r550
      Creating newreg=551 from oldreg=388, assigning class DIREG to r551
  181: {r550:DI=unspec[[r551:DI],r390:QI,0x8,r550:DI] 23;clobber r551:DI;clobber flags:CC;}
      REG_DEAD r390:QI
      REG_DEAD r389:DI
      REG_DEAD r388:DI
      REG_UNUSED r388:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  788: r550:DI=r389:DI
  790: r551:DI=r388:DI
    Inserting insn reload after:
  789: r386:DI=r550:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 183:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 185:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 188:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 189:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 199:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 196:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=552 from oldreg=395, assigning class CREG to r552
      Creating newreg=553 from oldreg=397, assigning class DIREG to r553
  196: {r552:DI=unspec[[r553:DI],r399:QI,0x8,r552:DI] 23;clobber r553:DI;clobber flags:CC;}
      REG_DEAD r399:QI
      REG_DEAD r398:DI
      REG_DEAD r397:DI
      REG_UNUSED r397:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  791: r552:DI=r398:DI
  793: r553:DI=r397:DI
    Inserting insn reload after:
  792: r395:DI=r552:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 198:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 200:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 203:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 204:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 208:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 209:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 210:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (1) rzw {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 215:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 218:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 219:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 226:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 227:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 228:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 229:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 230:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 231:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =<  (1) re*m {*pushdi2_rex64}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 233:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 239:  (0) r  (1) Z {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 241:  (0) q  (1) qn {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (1) rzw {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 244:  (0) ?r  (1) rm {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 245:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 246:  (0) ?m  (1) rC {*movdf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 249:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 250:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 257:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 258:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 259:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 260:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 261:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 262:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 263:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 269:  (0) r  (1) Z {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 271:  (0) q  (1) qn {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (1) rzw {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 274:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 275:  (0) =x  (1) xm {*extendsfdf2_sse}
      Creating newreg=554 from oldreg=121, assigning class SSE_REGS to r554
  275: r554:DF=float_extend(r120:SF)
      REG_DEAD r120:SF
    Inserting insn reload after:
  794: r121:DF=r554:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 794:  (0) r  (1) Yj {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 277:  (0) ?m  (1) rC {*movdf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 280:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 281:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 289:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 290:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 291:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 292:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 293:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 294:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 300:  (0) r  (1) Z {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 302:  (0) q  (1) qn {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (1) rzw {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 304:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 307:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 309
	 Choosing alt 0 in insn 309:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 311:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 313:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 316:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 317:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 324:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 325:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 326:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 327:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 328:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 329:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 330:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 336:  (0) r  (1) Z {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 338:  (0) q  (1) qn {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (1) rzw {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 343:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 344:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 345
	 Choosing alt 0 in insn 345:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 347:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 350:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 355:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 358:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 359:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 367:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 368:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 369:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 370:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 371:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 372:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 378:  (0) r  (1) Z {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 380:  (0) q  (1) qn {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (1) rzw {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 382:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 383:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 385:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 386:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 387
	 Choosing alt 0 in insn 387:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 388:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 389:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 394:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 396:  (0) r  (1) l  (2) M {*ashlsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 397:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 398:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 401:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 402:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 411:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 413:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=555 from oldreg=455, assigning class GENERAL_REGS to r555
  413: {r555:SI=r555:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  795: r555:SI=r149:SI
    Inserting insn reload after:
  796: r455:SI=r555:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 414
	 Choosing alt 0 in insn 414:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 417:  (0) x  (1) r {*floatsidf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 418:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 419:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 420:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 421:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 422
	 Choosing alt 0 in insn 422:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 423:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 424:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=556 from oldreg=155, assigning class SSE_REGS to r556
  424: r556:DF=r556:DF/r154:DF
      REG_DEAD r460:DF
      REG_DEAD r154:DF
    Inserting insn reload before:
  797: r556:DF=r460:DF
    Inserting insn reload after:
  798: r155:DF=r556:DF

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 425
	 Choosing alt 0 in insn 425:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 426:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=557 from oldreg=157, assigning class SSE_REGS to r557
  426: r557:SF=float_trunc(r156:DF)
      REG_DEAD r156:DF
    Inserting insn reload after:
  799: r157:SF=r557:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 799:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 427:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 428:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 429:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 430:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 432:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 433:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 434:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 435:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 436:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 437:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 438:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 439:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 440:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 443:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 445
	 Choosing alt 0 in insn 445:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 446:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 447:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 449:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 450:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 454:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 455:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 456
	 Choosing alt 0 in insn 456:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 457:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 462:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 464:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 469:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 470:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 471:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 479:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 482:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 483:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 484:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 492:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 495:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 497:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 500:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 501:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 502
	 Choosing alt 0 in insn 502:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 511:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 514:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 515:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 516:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 519:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 520:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 521
	 Choosing alt 0 in insn 521:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 522:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 523:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 525:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 530:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 534:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 535:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 536
	 Choosing alt 0 in insn 536:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 537:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 542:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 544:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 549:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 550:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 551
	 Choosing alt 0 in insn 551:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 552:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 555:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 556:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 557
	 Choosing alt 0 in insn 557:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 558:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 562:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 563:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 564
	 Choosing alt 0 in insn 564:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 565:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 567
	 Choosing alt 2 in insn 567:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 568:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 571:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 572:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 573
	 Choosing alt 0 in insn 573:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 574:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 576:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 581:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 582:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 583:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 584
	 Choosing alt 0 in insn 584:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 585:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 586:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 588:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 593:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 594:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 595
	 Choosing alt 0 in insn 595:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 597:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 598:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 599:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 605:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 606:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 607
	 Choosing alt 0 in insn 607:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 608:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 609:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 610:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 611:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 612
	 Choosing alt 0 in insn 612:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 615:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 616:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 617
	 Choosing alt 0 in insn 617:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 618:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 620:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 623:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 624:  (0) =r  (1) rm {extendhidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 625:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 626:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 630:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 634:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 638:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 639:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 640:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 641:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 642
	 Choosing alt 0 in insn 642:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 643:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 645:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 646:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 647:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 649:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 650:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 651
	 Choosing alt 0 in insn 651:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 652:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 653:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 654:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 655
	 Choosing alt 0 in insn 655:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 656:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 657:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 659:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 660:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 661:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 662
	 Choosing alt 0 in insn 662:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 663:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 665:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 666:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 667
	 Choosing alt 0 in insn 667:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 669:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 670:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 671:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 672
	 Choosing alt 0 in insn 672:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 673:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 674:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 675:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 676:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 677:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 678:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 679:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 681:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 682:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 683:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 684
	 Choosing alt 0 in insn 684:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 685:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 686:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 687:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 688:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 689
	 Choosing alt 0 in insn 689:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 690:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 692:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 693:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 694
	 Choosing alt 0 in insn 694:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 695:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 696:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 697:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 698:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 699:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 700:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 701:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 703:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 704:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 705:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 706
	 Choosing alt 0 in insn 706:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 707:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 708:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 709:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 710:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 711
	 Choosing alt 0 in insn 711:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 712:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 713:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 714:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 715:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 716
	 Choosing alt 0 in insn 716:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 717:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 719:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 720:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 721:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 722:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 723:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 724:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 728:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 729:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 730:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 731
	 Choosing alt 0 in insn 731:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 732:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 733:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 734:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 736:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 737
	 Choosing alt 2 in insn 737:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 740:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 744:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 747:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 748:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 749:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 751:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 762:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r544
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 764:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37

********** Pseudo live ranges #1: **********

  BB 5
   Insn 66: point = 0
   Insn 65: point = 0
   Insn 64: point = 0
   Insn 63: point = 0
  BB 36
   Insn 764: point = 0
  BB 37
   Insn 767: point = 0
  BB 35
   Insn 763: point = 0
   Insn 762: point = 0
   Insn 761: point = 1
   Insn 757: point = 2
   Insn 754: point = 4
  BB 34
   Insn 752: point = 5
   Insn 751: point = 5
   Insn 749: point = 6
   Insn 748: point = 8
   Insn 747: point = 10
  BB 2
   Insn 771: point = 11
   Insn 22: point = 11
   Insn 19: point = 11
   Insn 17: point = 13
   Insn 16: point = 14
   Insn 15: point = 15
   Insn 14: point = 16
   Insn 13: point = 17
   Insn 12: point = 18
   Insn 11: point = 19
   Insn 10: point = 20
   Insn 9: point = 21
   Insn 8: point = 22
   Insn 7: point = 23
   Insn 6: point = 23
   Insn 5: point = 23
   Insn 4: point = 23
   Insn 3: point = 23
   Insn 2: point = 23
  BB 33
   Insn 744: point = 23
  BB 32
   Insn 741: point = 23
   Insn 740: point = 23
   Insn 738: point = 24
   Insn 737: point = 26
   Insn 736: point = 28
   Insn 735: point = 29
   Insn 734: point = 31
   Insn 733: point = 33
   Insn 732: point = 35
   Insn 731: point = 37
   Insn 730: point = 39
   Insn 729: point = 40
   Insn 728: point = 42
   Insn 727: point = 44
  BB 30
   Insn 777: point = 45
   Insn 634: point = 45
  BB 29
   Insn 631: point = 45
   Insn 630: point = 45
  BB 27
   Insn 775: point = 45
   Insn 599: point = 45
   Insn 598: point = 46
   Insn 597: point = 48
   Insn 596: point = 50
   Insn 595: point = 52
   Insn 594: point = 54
   Insn 593: point = 55
   Insn 592: point = 57
   Insn 591: point = 59
  BB 28
   Insn 626: point = 60
   Insn 625: point = 60
   Insn 624: point = 61
   Insn 623: point = 63
   Insn 622: point = 65
   Insn 621: point = 67
   Insn 620: point = 69
   Insn 619: point = 71
   Insn 618: point = 72
   Insn 617: point = 74
   Insn 616: point = 76
   Insn 615: point = 77
   Insn 614: point = 79
   Insn 613: point = 81
   Insn 612: point = 82
   Insn 611: point = 84
   Insn 610: point = 86
   Insn 609: point = 88
   Insn 608: point = 89
   Insn 607: point = 91
   Insn 606: point = 93
   Insn 605: point = 94
   Insn 604: point = 96
   Insn 603: point = 98
  BB 26
   Insn 589: point = 99
   Insn 588: point = 99
   Insn 587: point = 100
   Insn 586: point = 102
   Insn 585: point = 104
   Insn 584: point = 106
   Insn 583: point = 108
   Insn 582: point = 109
   Insn 581: point = 111
   Insn 580: point = 113
   Insn 579: point = 114
   Insn 578: point = 114
   Insn 577: point = 115
   Insn 576: point = 116
   Insn 575: point = 116
   Insn 574: point = 117
   Insn 573: point = 119
   Insn 572: point = 121
   Insn 571: point = 122
   Insn 570: point = 124
   Insn 569: point = 126
   Insn 568: point = 127
   Insn 567: point = 129
   Insn 566: point = 131
   Insn 565: point = 133
   Insn 564: point = 135
   Insn 563: point = 137
   Insn 562: point = 138
   Insn 561: point = 140
   Insn 560: point = 142
   Insn 559: point = 143
   Insn 558: point = 145
   Insn 557: point = 147
   Insn 556: point = 149
   Insn 555: point = 150
   Insn 554: point = 152
   Insn 553: point = 154
   Insn 552: point = 155
   Insn 551: point = 157
   Insn 550: point = 159
   Insn 549: point = 160
   Insn 548: point = 162
   Insn 547: point = 164
  BB 25
   Insn 545: point = 165
   Insn 544: point = 165
   Insn 542: point = 165
  BB 24
   Insn 540: point = 167
   Insn 539: point = 168
   Insn 538: point = 168
   Insn 537: point = 169
   Insn 536: point = 171
   Insn 535: point = 173
   Insn 534: point = 174
   Insn 533: point = 176
   Insn 532: point = 178
  BB 23
   Insn 530: point = 179
   Insn 529: point = 180
   Insn 528: point = 182
   Insn 527: point = 183
   Insn 526: point = 183
   Insn 525: point = 184
   Insn 524: point = 186
   Insn 523: point = 188
   Insn 522: point = 190
   Insn 521: point = 192
   Insn 520: point = 194
   Insn 519: point = 195
   Insn 518: point = 197
   Insn 517: point = 199
   Insn 516: point = 200
   Insn 515: point = 202
   Insn 514: point = 203
   Insn 513: point = 205
   Insn 512: point = 207
   Insn 511: point = 208
   Insn 510: point = 209
   Insn 509: point = 211
   Insn 508: point = 212
   Insn 507: point = 212
   Insn 506: point = 213
   Insn 505: point = 215
   Insn 504: point = 217
   Insn 503: point = 219
   Insn 502: point = 221
   Insn 501: point = 223
   Insn 500: point = 224
   Insn 499: point = 226
   Insn 498: point = 228
   Insn 497: point = 229
   Insn 496: point = 231
   Insn 495: point = 232
   Insn 494: point = 234
   Insn 493: point = 236
   Insn 492: point = 237
   Insn 491: point = 238
   Insn 490: point = 240
   Insn 489: point = 241
   Insn 488: point = 241
   Insn 487: point = 242
   Insn 486: point = 244
   Insn 485: point = 246
   Insn 484: point = 247
   Insn 483: point = 249
   Insn 482: point = 250
   Insn 481: point = 252
   Insn 480: point = 254
   Insn 479: point = 255
   Insn 478: point = 256
   Insn 477: point = 258
   Insn 476: point = 259
   Insn 475: point = 259
   Insn 474: point = 260
   Insn 473: point = 262
   Insn 472: point = 264
   Insn 471: point = 265
   Insn 470: point = 267
   Insn 469: point = 268
   Insn 468: point = 270
   Insn 467: point = 272
  BB 22
   Insn 464: point = 273
   Insn 463: point = 274
   Insn 462: point = 276
  BB 21
   Insn 460: point = 277
   Insn 459: point = 277
   Insn 458: point = 278
   Insn 457: point = 280
   Insn 456: point = 282
   Insn 455: point = 284
   Insn 454: point = 285
   Insn 453: point = 287
   Insn 452: point = 289
   Insn 451: point = 290
   Insn 450: point = 292
   Insn 449: point = 293
   Insn 448: point = 294
   Insn 447: point = 296
   Insn 446: point = 298
   Insn 445: point = 300
   Insn 444: point = 302
   Insn 443: point = 303
   Insn 442: point = 305
   Insn 441: point = 307
   Insn 440: point = 308
   Insn 439: point = 309
   Insn 438: point = 311
   Insn 437: point = 313
   Insn 436: point = 314
   Insn 435: point = 315
   Insn 434: point = 316
   Insn 433: point = 317
   Insn 432: point = 318
   Insn 431: point = 319
   Insn 430: point = 320
   Insn 429: point = 321
   Insn 428: point = 322
   Insn 427: point = 323
   Insn 799: point = 324
	Hard reg 0 is preferable by r557 with profit 1
   Insn 426: point = 326
   Insn 425: point = 328
   Insn 798: point = 330
	Hard reg 21 is preferable by r556 with profit 1
   Insn 424: point = 332
   Insn 797: point = 333
	Hard reg 21 is preferable by r556 with profit 1
	Hard reg 23 is preferable by r556 with profit 1
   Insn 423: point = 335
   Insn 422: point = 336
   Insn 421: point = 338
   Insn 420: point = 340
   Insn 419: point = 341
   Insn 418: point = 343
   Insn 417: point = 344
   Insn 416: point = 346
   Insn 415: point = 348
   Insn 414: point = 350
   Insn 796: point = 352
	Hard reg 1 is preferable by r555 with profit 1
   Insn 413: point = 354
   Insn 795: point = 354
   Insn 412: point = 355
   Insn 411: point = 357
  BB 20
   Insn 408: point = 358
   Insn 407: point = 358
   Insn 405: point = 359
   Insn 404: point = 360
   Insn 403: point = 360
   Insn 402: point = 361
   Insn 401: point = 361
  BB 7
   Insn 773: point = 362
  BB 19
   Insn 398: point = 362
   Insn 397: point = 363
   Insn 396: point = 364
   Insn 395: point = 366
   Insn 394: point = 367
   Insn 393: point = 368
   Insn 392: point = 370
   Insn 391: point = 372
   Insn 390: point = 374
   Insn 389: point = 375
   Insn 388: point = 377
   Insn 387: point = 379
   Insn 386: point = 381
   Insn 385: point = 382
   Insn 384: point = 384
   Insn 383: point = 386
   Insn 382: point = 387
   Insn 381: point = 387
   Insn 380: point = 387
   Insn 379: point = 387
   Insn 378: point = 388
   Insn 377: point = 388
   Insn 376: point = 389
   Insn 375: point = 390
   Insn 374: point = 391
   Insn 373: point = 392
   Insn 372: point = 393
   Insn 371: point = 394
   Insn 370: point = 395
   Insn 369: point = 396
   Insn 368: point = 397
   Insn 367: point = 398
   Insn 366: point = 399
  BB 18
   Insn 364: point = 399
   Insn 363: point = 399
   Insn 362: point = 400
   Insn 361: point = 401
   Insn 360: point = 401
   Insn 359: point = 402
   Insn 358: point = 402
  BB 17
   Insn 355: point = 403
   Insn 354: point = 404
   Insn 353: point = 406
   Insn 352: point = 408
   Insn 351: point = 409
   Insn 350: point = 409
   Insn 349: point = 410
   Insn 348: point = 412
   Insn 347: point = 413
   Insn 346: point = 415
   Insn 345: point = 417
   Insn 344: point = 419
   Insn 343: point = 420
   Insn 342: point = 422
   Insn 341: point = 424
   Insn 340: point = 425
   Insn 339: point = 425
   Insn 338: point = 425
   Insn 337: point = 425
   Insn 336: point = 426
   Insn 335: point = 426
   Insn 334: point = 427
   Insn 333: point = 428
   Insn 332: point = 429
   Insn 331: point = 430
   Insn 330: point = 431
   Insn 329: point = 432
   Insn 328: point = 433
   Insn 327: point = 434
   Insn 326: point = 435
   Insn 325: point = 436
   Insn 324: point = 437
  BB 16
   Insn 322: point = 437
   Insn 321: point = 437
   Insn 320: point = 438
   Insn 319: point = 439
   Insn 318: point = 439
   Insn 317: point = 440
   Insn 316: point = 440
  BB 15
   Insn 313: point = 441
   Insn 312: point = 442
   Insn 311: point = 443
   Insn 310: point = 445
   Insn 309: point = 447
   Insn 308: point = 449
   Insn 307: point = 450
   Insn 306: point = 452
   Insn 305: point = 454
   Insn 304: point = 455
   Insn 303: point = 455
   Insn 302: point = 455
   Insn 301: point = 455
   Insn 300: point = 456
   Insn 299: point = 456
   Insn 298: point = 457
   Insn 297: point = 458
   Insn 296: point = 459
   Insn 295: point = 460
   Insn 294: point = 461
   Insn 293: point = 462
   Insn 292: point = 463
   Insn 291: point = 464
   Insn 290: point = 465
   Insn 289: point = 466
   Insn 288: point = 467
  BB 14
   Insn 286: point = 467
   Insn 285: point = 467
   Insn 284: point = 468
   Insn 283: point = 469
   Insn 282: point = 469
   Insn 281: point = 470
   Insn 280: point = 470
  BB 13
   Insn 277: point = 471
   Insn 276: point = 472
   Insn 794: point = 473
	Hard reg 0 is preferable by r554 with profit 1
   Insn 275: point = 475
   Insn 274: point = 477
   Insn 273: point = 478
   Insn 272: point = 478
   Insn 271: point = 478
   Insn 270: point = 478
   Insn 269: point = 479
   Insn 268: point = 479
   Insn 267: point = 480
   Insn 266: point = 481
   Insn 265: point = 482
   Insn 264: point = 483
   Insn 263: point = 484
   Insn 262: point = 485
   Insn 261: point = 486
   Insn 260: point = 487
   Insn 259: point = 488
   Insn 258: point = 489
   Insn 257: point = 490
  BB 12
   Insn 255: point = 490
   Insn 254: point = 490
   Insn 253: point = 491
   Insn 252: point = 492
   Insn 251: point = 492
   Insn 250: point = 493
   Insn 249: point = 493
  BB 11
   Insn 246: point = 494
   Insn 245: point = 495
   Insn 244: point = 496
   Insn 243: point = 497
   Insn 242: point = 497
   Insn 241: point = 497
   Insn 240: point = 497
   Insn 239: point = 498
   Insn 238: point = 498
   Insn 237: point = 499
   Insn 236: point = 500
   Insn 235: point = 501
   Insn 234: point = 502
   Insn 233: point = 503
   Insn 232: point = 504
   Insn 231: point = 505
   Insn 230: point = 506
   Insn 229: point = 507
   Insn 228: point = 508
   Insn 227: point = 509
   Insn 226: point = 510
  BB 10
   Insn 224: point = 511
   Insn 223: point = 511
   Insn 222: point = 512
   Insn 221: point = 513
   Insn 220: point = 513
   Insn 219: point = 514
   Insn 218: point = 514
  BB 9
   Insn 215: point = 515
   Insn 214: point = 516
   Insn 213: point = 517
   Insn 212: point = 517
   Insn 211: point = 518
   Insn 210: point = 519
   Insn 209: point = 520
   Insn 208: point = 522
   Insn 207: point = 523
   Insn 206: point = 523
   Insn 205: point = 524
   Insn 204: point = 525
   Insn 203: point = 526
   Insn 202: point = 527
   Insn 201: point = 528
   Insn 200: point = 530
   Insn 198: point = 531
   Insn 197: point = 533
   Insn 792: point = 535
	Hard reg 0 is preferable by r552 with profit 1
   Insn 196: point = 537
   Insn 793: point = 539
	Hard reg 1 is preferable by r553 with profit 1
   Insn 791: point = 541
	Hard reg 0 is preferable by r552 with profit 1
	Hard reg 2 is preferable by r552 with profit 1
   Insn 195: point = 543
   Insn 194: point = 544
   Insn 193: point = 546
   Insn 199: point = 547
   Insn 192: point = 548
   Insn 191: point = 548
   Insn 190: point = 549
   Insn 189: point = 550
   Insn 188: point = 551
   Insn 187: point = 552
   Insn 186: point = 553
   Insn 185: point = 555
   Insn 183: point = 556
   Insn 182: point = 558
   Insn 789: point = 560
	Hard reg 0 is preferable by r550 with profit 1
   Insn 181: point = 562
   Insn 790: point = 564
	Hard reg 1 is preferable by r551 with profit 1
   Insn 788: point = 566
	Hard reg 0 is preferable by r550 with profit 1
	Hard reg 2 is preferable by r550 with profit 1
   Insn 180: point = 568
   Insn 179: point = 569
   Insn 178: point = 571
   Insn 184: point = 572
   Insn 177: point = 573
   Insn 176: point = 573
   Insn 175: point = 574
   Insn 174: point = 575
   Insn 173: point = 576
   Insn 172: point = 577
   Insn 171: point = 578
   Insn 170: point = 580
   Insn 168: point = 581
   Insn 167: point = 583
   Insn 786: point = 585
	Hard reg 0 is preferable by r548 with profit 1
   Insn 166: point = 587
   Insn 787: point = 589
	Hard reg 1 is preferable by r549 with profit 1
   Insn 785: point = 591
	Hard reg 0 is preferable by r548 with profit 1
	Hard reg 2 is preferable by r548 with profit 1
   Insn 165: point = 593
   Insn 164: point = 594
   Insn 163: point = 596
   Insn 169: point = 597
   Insn 162: point = 598
   Insn 161: point = 598
   Insn 160: point = 599
   Insn 159: point = 600
   Insn 158: point = 601
   Insn 157: point = 602
   Insn 156: point = 603
   Insn 155: point = 605
   Insn 153: point = 606
   Insn 152: point = 608
   Insn 783: point = 610
	Hard reg 0 is preferable by r546 with profit 1
   Insn 151: point = 612
   Insn 784: point = 614
	Hard reg 1 is preferable by r547 with profit 1
   Insn 782: point = 616
	Hard reg 0 is preferable by r546 with profit 1
	Hard reg 2 is preferable by r546 with profit 1
   Insn 150: point = 618
   Insn 149: point = 619
   Insn 148: point = 621
   Insn 154: point = 622
   Insn 147: point = 623
   Insn 146: point = 623
   Insn 145: point = 623
   Insn 144: point = 623
   Insn 143: point = 624
   Insn 142: point = 624
   Insn 141: point = 625
   Insn 140: point = 626
   Insn 139: point = 627
   Insn 138: point = 628
   Insn 137: point = 629
   Insn 136: point = 630
   Insn 135: point = 631
   Insn 134: point = 632
   Insn 133: point = 633
   Insn 132: point = 634
   Insn 131: point = 635
   Insn 130: point = 636
   Insn 129: point = 637
   Insn 128: point = 638
   Insn 127: point = 639
   Insn 126: point = 640
   Insn 125: point = 641
   Insn 124: point = 642
   Insn 123: point = 643
   Insn 122: point = 644
  BB 8
   Insn 120: point = 645
   Insn 119: point = 645
   Insn 118: point = 646
   Insn 117: point = 647
   Insn 116: point = 647
   Insn 115: point = 648
   Insn 114: point = 648
   Insn 113: point = 649
   Insn 112: point = 649
   Insn 111: point = 649
   Insn 110: point = 650
   Insn 109: point = 650
   Insn 108: point = 651
   Insn 107: point = 652
   Insn 106: point = 653
   Insn 105: point = 654
   Insn 104: point = 655
   Insn 103: point = 655
   Insn 102: point = 656
   Insn 101: point = 656
   Insn 100: point = 657
   Insn 99: point = 658
   Insn 98: point = 660
   Insn 97: point = 662
   Insn 96: point = 663
   Insn 95: point = 665
   Insn 94: point = 667
  BB 6
   Insn 89: point = 668
   Insn 88: point = 668
   Insn 87: point = 668
   Insn 86: point = 668
   Insn 85: point = 668
   Insn 84: point = 669
   Insn 83: point = 669
   Insn 82: point = 670
   Insn 81: point = 671
   Insn 80: point = 672
   Insn 79: point = 672
   Insn 78: point = 673
   Insn 77: point = 673
   Insn 76: point = 674
   Insn 75: point = 675
   Insn 74: point = 677
   Insn 73: point = 679
   Insn 72: point = 680
   Insn 71: point = 682
   Insn 70: point = 684
  BB 4
   Insn 61: point = 685
   Insn 60: point = 685
   Insn 59: point = 686
   Insn 58: point = 688
   Insn 57: point = 689
   Insn 56: point = 691
   Insn 55: point = 693
   Insn 54: point = 694
   Insn 53: point = 695
   Insn 52: point = 696
   Insn 51: point = 696
   Insn 50: point = 697
   Insn 49: point = 697
   Insn 48: point = 699
   Insn 781: point = 700
	Hard reg 1 is preferable by r545 with profit 1
   Insn 47: point = 702
   Insn 780: point = 702
	Hard reg 1 is preferable by r545 with profit 1
	Hard reg 0 is preferable by r545 with profit 1
   Insn 46: point = 704
   Insn 45: point = 706
   Insn 44: point = 707
   Insn 43: point = 709
   Insn 42: point = 710
   Insn 41: point = 712
   Insn 40: point = 714
  BB 31
   Insn 724: point = 715
   Insn 723: point = 715
   Insn 722: point = 716
   Insn 721: point = 718
   Insn 720: point = 720
   Insn 719: point = 722
   Insn 718: point = 724
   Insn 717: point = 725
   Insn 716: point = 727
   Insn 715: point = 729
   Insn 714: point = 730
   Insn 713: point = 732
   Insn 712: point = 734
   Insn 711: point = 735
   Insn 710: point = 737
   Insn 709: point = 739
   Insn 708: point = 741
   Insn 707: point = 742
   Insn 706: point = 744
   Insn 705: point = 746
   Insn 704: point = 747
   Insn 703: point = 749
   Insn 702: point = 751
   Insn 701: point = 752
   Insn 700: point = 753
   Insn 699: point = 755
   Insn 698: point = 757
   Insn 697: point = 759
   Insn 696: point = 761
   Insn 695: point = 762
   Insn 694: point = 764
   Insn 693: point = 766
   Insn 692: point = 767
   Insn 691: point = 769
   Insn 690: point = 771
   Insn 689: point = 772
   Insn 688: point = 774
   Insn 687: point = 776
   Insn 686: point = 778
   Insn 685: point = 779
   Insn 684: point = 781
   Insn 683: point = 783
   Insn 682: point = 784
   Insn 681: point = 786
   Insn 680: point = 788
   Insn 679: point = 789
   Insn 678: point = 790
   Insn 677: point = 792
   Insn 676: point = 794
   Insn 675: point = 796
   Insn 674: point = 798
   Insn 673: point = 799
   Insn 672: point = 801
   Insn 671: point = 803
   Insn 670: point = 804
   Insn 669: point = 806
   Insn 668: point = 808
   Insn 667: point = 809
   Insn 666: point = 811
   Insn 665: point = 813
   Insn 664: point = 815
   Insn 663: point = 816
   Insn 662: point = 818
   Insn 661: point = 820
   Insn 660: point = 821
   Insn 659: point = 823
   Insn 658: point = 825
   Insn 657: point = 826
   Insn 656: point = 827
   Insn 655: point = 829
   Insn 654: point = 831
   Insn 653: point = 833
   Insn 652: point = 834
   Insn 651: point = 836
   Insn 650: point = 838
   Insn 649: point = 839
   Insn 648: point = 841
   Insn 647: point = 843
   Insn 646: point = 844
   Insn 645: point = 846
   Insn 644: point = 848
   Insn 643: point = 849
   Insn 642: point = 851
   Insn 641: point = 853
   Insn 640: point = 854
   Insn 639: point = 856
   Insn 638: point = 858
  BB 3
   Insn 38: point = 859
   Insn 37: point = 859
   Insn 36: point = 860
   Insn 35: point = 862
   Insn 34: point = 864
   Insn 33: point = 865
   Insn 32: point = 867
   Insn 31: point = 869
   Insn 30: point = 871
   Insn 29: point = 872
   Insn 28: point = 872
   Insn 27: point = 873
   Insn 26: point = 875
 r83: [7..8]
 r84: [5..6]
 r85: [871..873]
 r86: [863..865]
 r87: [861..862]
 r88: [859..860]
 r89: [711..712]
 r90: [708..710]
 r91: [694..707]
 r92: [696..697]
 r93: [694..695]
 r94: [690..691]
 r95: [687..689]
 r96: [685..686]
 r97: [681..682]
 r98: [678..680]
 r99: [676..677]
 r100: [673..675]
 r101: [358..359]
 r102: [664..665]
 r103: [661..663]
 r104: [659..660]
 r105: [656..658]
 r106: [645..646]
 r107: [604..606]
 r108: [602..603]
 r109: [579..581]
 r110: [577..578]
 r111: [554..556]
 r112: [552..553]
 r113: [529..531]
 r114: [527..528]
 r115: [517..520]
 r116: [515..516]
 r117: [511..512]
 r118: [494..496]
 r119: [490..491]
 r120: [476..477]
 r121: [471..473]
 r122: [467..468]
 r123: [451..452]
 r124: [448..450]
 r125: [446..447]
 r126: [444..445]
 r127: [441..443]
 r128: [441..442]
 r129: [437..438]
 r130: [421..422]
 r131: [418..420]
 r132: [416..417]
 r133: [414..415]
 r134: [403..413]
 r135: [411..412]
 r136: [403..404]
 r137: [399..400]
 r138: [383..384]
 r139: [380..382]
 r140: [378..379]
 r141: [376..377]
 r142: [367..375]
 r143: [373..374]
 r144: [371..372]
 r145: [369..370]
 r146: [367..368]
 r147: [365..366]
 r148: [362..364]
 r149: [351..355]
 r150: [345..346]
 r151: [329..344]
 r152: [337..341]
 r153: [337..338]
 r154: [332..336]
 r155: [329..330]
 r156: [327..328]
 r157: [322..324]
 r158: [310..311]
 r159: [308..309]
 r160: [304..305]
 r161: [301..303]
 r162: [299..300]
 r163: [297..298]
 r164: [295..296]
 r165: [277..290]
 r166: [286..287]
 r167: [283..285]
 r168: [281..282]
 r169: [279..280]
 r170: [277..278]
 r171: [269..270]
 r172: [266..268]
 r173: [255..265]
 r174: [261..262]
 r175: [259..260]
 r176: [255..256]
 r177: [251..252]
 r178: [248..250]
 r179: [237..247]
 r180: [243..244]
 r181: [241..242]
 r182: [237..238]
 r183: [233..234]
 r184: [230..232]
 r185: [208..229]
 r186: [225..226]
 r187: [222..224]
 r188: [220..221]
 r189: [218..219]
 r190: [216..217]
 r191: [214..215]
 r192: [212..213]
 r193: [208..209]
 r194: [204..205]
 r195: [201..203]
 r196: [179..200]
 r197: [196..197]
 r198: [193..195]
 r199: [191..192]
 r200: [189..190]
 r201: [187..188]
 r202: [185..186]
 r203: [183..184]
 r204: [179..180]
 r205: [175..176]
 r206: [172..174]
 r207: [170..171]
 r208: [168..169]
 r209: [165..167]
 r210: [161..162]
 r211: [158..160]
 r212: [156..157]
 r213: [116..155]
 r214: [151..152]
 r215: [148..150]
 r216: [146..147]
 r217: [144..145]
 r218: [130..143]
 r219: [139..140]
 r220: [136..138]
 r221: [134..135]
 r222: [132..133]
 r223: [130..131]
 r224: [128..129]
 r225: [115..127]
 r226: [123..124]
 r227: [120..122]
 r228: [118..119]
 r229: [114..117]
 r230: [110..111]
 r231: [107..109]
 r232: [105..106]
 r233: [103..104]
 r234: [101..102]
 r235: [99..100]
 r236: [56..57]
 r237: [53..55]
 r238: [51..52]
 r239: [49..50]
 r240: [47..48]
 r241: [95..96]
 r242: [92..94]
 r243: [90..91]
 r244: [83..89]
 r245: [85..86]
 r246: [83..84]
 r247: [60..82]
 r248: [78..79]
 r249: [75..77]
 r250: [73..74]
 r251: [66..72]
 r252: [68..69]
 r253: [66..67]
 r254: [64..65]
 r255: [62..63]
 r256: [60..61]
 r257: [41..42]
 r258: [38..40]
 r259: [36..37]
 r260: [34..35]
 r261: [32..33]
 r262: [30..31]
 r263: [27..29]
 r264: [27..28]
 r265: [25..26]
 r266: [23..24]
 r267: [855..856]
 r268: [852..854]
 r269: [850..851]
 r270: [845..849]
 r271: [845..846]
 r272: [826..844]
 r273: [840..841]
 r274: [837..839]
 r275: [835..836]
 r276: [830..834]
 r277: [830..831]
 r278: [828..829]
 r279: [826..827]
 r280: [822..823]
 r281: [819..821]
 r282: [817..818]
 r283: [810..816]
 r284: [812..813]
 r285: [810..811]
 r286: [789..809]
 r287: [805..806]
 r288: [802..804]
 r289: [800..801]
 r290: [793..799]
 r291: [795..796]
 r292: [793..794]
 r293: [791..792]
 r294: [789..790]
 r295: [785..786]
 r296: [782..784]
 r297: [780..781]
 r298: [773..779]
 r299: [775..776]
 r300: [773..774]
 r301: [752..772]
 r302: [768..769]
 r303: [765..767]
 r304: [763..764]
 r305: [756..762]
 r306: [758..759]
 r307: [756..757]
 r308: [754..755]
 r309: [752..753]
 r310: [748..749]
 r311: [745..747]
 r312: [743..744]
 r313: [736..742]
 r314: [738..739]
 r315: [736..737]
 r316: [715..735]
 r317: [731..732]
 r318: [728..730]
 r319: [726..727]
 r320: [719..725]
 r321: [721..722]
 r322: [719..720]
 r323: [717..718]
 r324: [715..716]
 r325: [3..4]
 r326: [1..2]
 r327: [21..22]
 r328: [19..20]
 r329: [17..18]
 r330: [15..16]
 r331: [13..14]
 r332: [874..875]
 r333: [870..872] [866..867]
 r334: [868..869]
 r335: [863..864]
 r336: [713..714]
 r337: [708..709]
 r338: [703..704]
 r339: [705..706]
 r340: [698..700]
 r341: [698..699]
 r342: [692..693]
 r343: [687..688]
 r344: [683..684]
 r345: [678..679]
 r346: [672..674]
 r347: [669..671]
 r348: [668..670]
 r349: [666..667]
 r350: [661..662]
 r351: [655..657]
 r352: [651..654]
 r353: [650..653]
 r354: [649..652]
 r355: [647..648]
 r356: [627..644]
 r357: [626..643]
 r358: [625..642]
 r359: [624..641]
 r360: [623..640]
 r361: [638..639]
 r362: [636..637]
 r363: [634..635]
 r364: [632..633]
 r365: [630..631]
 r366: [628..629]
 r367: [620..622]
 r368: [609..610]
 r369: [607..608]
 r370: [615..619]
 r371: [617..621]
 r372: [613..618]
 r373: [604..605]
 r374: [599..601]
 r375: [598..600]
 r376: [595..597]
 r377: [584..585]
 r378: [582..583]
 r379: [590..594]
 r380: [592..596]
 r381: [588..593]
 r382: [579..580]
 r383: [574..576]
 r384: [573..575]
 r385: [570..572]
 r386: [559..560]
 r387: [557..558]
 r388: [565..569]
 r389: [567..571]
 r390: [563..568]
 r391: [554..555]
 r392: [549..551]
 r393: [548..550]
 r394: [545..547]
 r395: [534..535]
 r396: [532..533]
 r397: [540..544]
 r398: [542..546]
 r399: [538..543]
 r400: [529..530]
 r401: [524..526]
 r402: [523..525]
 r403: [521..522]
 r404: [518..519]
 r405: [513..514]
 r406: [501..510]
 r407: [500..509]
 r408: [499..508]
 r409: [498..507]
 r410: [497..506]
 r411: [504..505]
 r412: [502..503]
 r413: [494..495]
 r414: [492..493]
 r415: [482..489]
 r416: [481..488]
 r417: [480..487]
 r418: [479..486]
 r419: [478..485]
 r420: [483..484]
 r421: [471..472]
 r422: [469..470]
 r423: [459..466]
 r424: [458..465]
 r425: [457..464]
 r426: [456..463]
 r427: [455..462]
 r428: [460..461]
 r429: [453..454]
 r430: [448..449]
 r431: [439..440]
 r432: [429..436]
 r433: [428..435]
 r434: [427..434]
 r435: [426..433]
 r436: [425..432]
 r437: [430..431]
 r438: [423..424]
 r439: [418..419]
 r440: [407..410]
 r441: [408..409]
 r442: [405..406]
 r443: [401..402]
 r444: [391..398]
 r445: [390..397]
 r446: [389..396]
 r447: [388..395]
 r448: [387..394]
 r449: [392..393]
 r450: [385..386]
 r451: [380..381]
 r452: [362..363]
 r453: [360..361]
 r454: [356..357]
 r455: [351..352]
 r456: [349..350]
 r457: [347..348]
 r458: [342..343]
 r459: [339..340]
 r460: [334..335]
 r461: [322..323]
 r462: [320..321]
 r463: [317..319]
 r464: [317..318]
 r465: [314..316]
 r466: [314..315]
 r467: [312..313]
 r468: [306..307]
 r469: [301..302]
 r470: [293..294]
 r471: [291..292]
 r472: [288..289]
 r473: [283..284]
 r474: [275..276]
 r475: [273..274]
 r476: [271..272]
 r477: [266..267]
 r478: [263..264]
 r479: [257..258]
 r480: [253..254]
 r481: [248..249]
 r482: [245..246]
 r483: [239..240]
 r484: [235..236]
 r485: [230..231]
 r486: [227..228]
 r487: [222..223]
 r488: [210..211]
 r489: [206..207]
 r490: [201..202]
 r491: [198..199]
 r492: [193..194]
 r493: [181..182]
 r494: [177..178]
 r495: [172..173]
 r496: [163..164]
 r497: [158..159]
 r498: [153..154]
 r499: [148..149]
 r500: [141..142]
 r501: [136..137]
 r502: [125..126]
 r503: [120..121]
 r504: [112..113]
 r505: [107..108]
 r506: [58..59]
 r507: [53..54]
 r508: [45..46]
 r509: [97..98]
 r510: [92..93]
 r511: [87..88]
 r512: [80..81]
 r513: [75..76]
 r514: [70..71]
 r515: [857..858]
 r516: [852..853]
 r517: [847..848]
 r518: [842..843]
 r519: [837..838]
 r520: [832..833]
 r521: [824..825]
 r522: [819..820]
 r523: [814..815]
 r524: [807..808]
 r525: [802..803]
 r526: [797..798]
 r527: [787..788]
 r528: [782..783]
 r529: [777..778]
 r530: [770..771]
 r531: [765..766]
 r532: [760..761]
 r533: [750..751]
 r534: [745..746]
 r535: [740..741]
 r536: [733..734]
 r537: [728..729]
 r538: [723..724]
 r539: [43..44]
 r540: [38..39]
 r541: [9..10]
 r543: [11..12]
 r544: [0..0]
 r545: [701..702]
 r546: [611..616]
 r547: [612..614]
 r548: [586..591]
 r549: [587..589]
 r550: [561..566]
 r551: [562..564]
 r552: [536..541]
 r553: [537..539]
 r554: [474..475]
 r555: [353..354]
 r556: [331..333]
 r557: [325..326]
Compressing live ranges: from 876 to 695 - 79%
Ranges after the compression:
 r83: [7..8]
 r84: [5..6]
 r85: [691..692]
 r86: [685..686]
 r87: [683..684]
 r88: [681..682]
 r89: [553..554]
 r90: [551..552]
 r91: [539..550]
 r92: [541..542]
 r93: [539..540]
 r94: [535..536]
 r95: [533..534]
 r96: [531..532]
 r97: [527..528]
 r98: [525..526]
 r99: [523..524]
 r100: [521..522]
 r101: [317..318]
 r102: [515..516]
 r103: [513..514]
 r104: [511..512]
 r105: [509..510]
 r106: [503..504]
 r107: [477..478]
 r108: [475..476]
 r109: [459..460]
 r110: [457..458]
 r111: [441..442]
 r112: [439..440]
 r113: [423..424]
 r114: [421..422]
 r115: [415..416]
 r116: [413..414]
 r117: [409..410]
 r118: [403..404]
 r119: [399..400]
 r120: [395..396]
 r121: [391..392]
 r122: [387..388]
 r123: [381..382]
 r124: [379..380]
 r125: [377..378]
 r126: [375..376]
 r127: [373..374]
 r128: [373..374]
 r129: [369..370]
 r130: [363..364]
 r131: [361..362]
 r132: [359..360]
 r133: [357..358]
 r134: [349..356]
 r135: [355..356]
 r136: [349..350]
 r137: [345..346]
 r138: [339..340]
 r139: [337..338]
 r140: [335..336]
 r141: [333..334]
 r142: [325..332]
 r143: [331..332]
 r144: [329..330]
 r145: [327..328]
 r146: [325..326]
 r147: [323..324]
 r148: [321..322]
 r149: [311..314]
 r150: [305..306]
 r151: [293..304]
 r152: [299..302]
 r153: [299..300]
 r154: [295..298]
 r155: [293..294]
 r156: [291..292]
 r157: [287..288]
 r158: [277..278]
 r159: [275..276]
 r160: [271..272]
 r161: [269..270]
 r162: [267..268]
 r163: [265..266]
 r164: [263..264]
 r165: [247..258]
 r166: [255..256]
 r167: [253..254]
 r168: [251..252]
 r169: [249..250]
 r170: [247..248]
 r171: [239..240]
 r172: [237..238]
 r173: [227..236]
 r174: [233..234]
 r175: [231..232]
 r176: [227..228]
 r177: [223..224]
 r178: [221..222]
 r179: [211..220]
 r180: [217..218]
 r181: [215..216]
 r182: [211..212]
 r183: [207..208]
 r184: [205..206]
 r185: [185..204]
 r186: [201..202]
 r187: [199..200]
 r188: [197..198]
 r189: [195..196]
 r190: [193..194]
 r191: [191..192]
 r192: [189..190]
 r193: [185..186]
 r194: [181..182]
 r195: [179..180]
 r196: [159..178]
 r197: [175..176]
 r198: [173..174]
 r199: [171..172]
 r200: [169..170]
 r201: [167..168]
 r202: [165..166]
 r203: [163..164]
 r204: [159..160]
 r205: [155..156]
 r206: [153..154]
 r207: [151..152]
 r208: [149..150]
 r209: [147..148]
 r210: [143..144]
 r211: [141..142]
 r212: [139..140]
 r213: [105..138]
 r214: [135..136]
 r215: [133..134]
 r216: [131..132]
 r217: [129..130]
 r218: [117..128]
 r219: [125..126]
 r220: [123..124]
 r221: [121..122]
 r222: [119..120]
 r223: [117..118]
 r224: [115..116]
 r225: [105..114]
 r226: [111..112]
 r227: [109..110]
 r228: [107..108]
 r229: [105..106]
 r230: [101..102]
 r231: [99..100]
 r232: [97..98]
 r233: [95..96]
 r234: [93..94]
 r235: [91..92]
 r236: [53..54]
 r237: [51..52]
 r238: [49..50]
 r239: [47..48]
 r240: [45..46]
 r241: [87..88]
 r242: [85..86]
 r243: [83..84]
 r244: [77..82]
 r245: [79..80]
 r246: [77..78]
 r247: [57..76]
 r248: [73..74]
 r249: [71..72]
 r250: [69..70]
 r251: [63..68]
 r252: [65..66]
 r253: [63..64]
 r254: [61..62]
 r255: [59..60]
 r256: [57..58]
 r257: [39..40]
 r258: [37..38]
 r259: [35..36]
 r260: [33..34]
 r261: [31..32]
 r262: [29..30]
 r263: [27..28]
 r264: [27..28]
 r265: [25..26]
 r266: [23..24]
 r267: [677..678]
 r268: [675..676]
 r269: [673..674]
 r270: [669..672]
 r271: [669..670]
 r272: [653..668]
 r273: [665..666]
 r274: [663..664]
 r275: [661..662]
 r276: [657..660]
 r277: [657..658]
 r278: [655..656]
 r279: [653..654]
 r280: [649..650]
 r281: [647..648]
 r282: [645..646]
 r283: [639..644]
 r284: [641..642]
 r285: [639..640]
 r286: [621..638]
 r287: [635..636]
 r288: [633..634]
 r289: [631..632]
 r290: [625..630]
 r291: [627..628]
 r292: [625..626]
 r293: [623..624]
 r294: [621..622]
 r295: [617..618]
 r296: [615..616]
 r297: [613..614]
 r298: [607..612]
 r299: [609..610]
 r300: [607..608]
 r301: [589..606]
 r302: [603..604]
 r303: [601..602]
 r304: [599..600]
 r305: [593..598]
 r306: [595..596]
 r307: [593..594]
 r308: [591..592]
 r309: [589..590]
 r310: [585..586]
 r311: [583..584]
 r312: [581..582]
 r313: [575..580]
 r314: [577..578]
 r315: [575..576]
 r316: [557..574]
 r317: [571..572]
 r318: [569..570]
 r319: [567..568]
 r320: [561..566]
 r321: [563..564]
 r322: [561..562]
 r323: [559..560]
 r324: [557..558]
 r325: [3..4]
 r326: [1..2]
 r327: [21..22]
 r328: [19..20]
 r329: [17..18]
 r330: [15..16]
 r331: [13..14]
 r332: [693..694]
 r333: [691..692] [687..688]
 r334: [689..690]
 r335: [685..686]
 r336: [555..556]
 r337: [551..552]
 r338: [547..548]
 r339: [549..550]
 r340: [543..544]
 r341: [543..544]
 r342: [537..538]
 r343: [533..534]
 r344: [529..530]
 r345: [525..526]
 r346: [521..522]
 r347: [519..520]
 r348: [519..520]
 r349: [517..518]
 r350: [513..514]
 r351: [509..510]
 r352: [507..508]
 r353: [507..508]
 r354: [507..508]
 r355: [505..506]
 r356: [491..502]
 r357: [491..502]
 r358: [491..502]
 r359: [491..502]
 r360: [491..502]
 r361: [501..502]
 r362: [499..500]
 r363: [497..498]
 r364: [495..496]
 r365: [493..494]
 r366: [491..492]
 r367: [489..490]
 r368: [481..482]
 r369: [479..480]
 r370: [485..488]
 r371: [487..490]
 r372: [483..488]
 r373: [477..478]
 r374: [473..474]
 r375: [473..474]
 r376: [471..472]
 r377: [463..464]
 r378: [461..462]
 r379: [467..470]
 r380: [469..472]
 r381: [465..470]
 r382: [459..460]
 r383: [455..456]
 r384: [455..456]
 r385: [453..454]
 r386: [445..446]
 r387: [443..444]
 r388: [449..452]
 r389: [451..454]
 r390: [447..452]
 r391: [441..442]
 r392: [437..438]
 r393: [437..438]
 r394: [435..436]
 r395: [427..428]
 r396: [425..426]
 r397: [431..434]
 r398: [433..436]
 r399: [429..434]
 r400: [423..424]
 r401: [419..420]
 r402: [419..420]
 r403: [417..418]
 r404: [415..416]
 r405: [411..412]
 r406: [405..408]
 r407: [405..408]
 r408: [405..408]
 r409: [405..408]
 r410: [405..408]
 r411: [407..408]
 r412: [405..406]
 r413: [403..404]
 r414: [401..402]
 r415: [397..398]
 r416: [397..398]
 r417: [397..398]
 r418: [397..398]
 r419: [397..398]
 r420: [397..398]
 r421: [391..392]
 r422: [389..390]
 r423: [385..386]
 r424: [385..386]
 r425: [385..386]
 r426: [385..386]
 r427: [385..386]
 r428: [385..386]
 r429: [383..384]
 r430: [379..380]
 r431: [371..372]
 r432: [367..368]
 r433: [367..368]
 r434: [367..368]
 r435: [367..368]
 r436: [367..368]
 r437: [367..368]
 r438: [365..366]
 r439: [361..362]
 r440: [353..354]
 r441: [353..354]
 r442: [351..352]
 r443: [347..348]
 r444: [343..344]
 r445: [343..344]
 r446: [343..344]
 r447: [343..344]
 r448: [343..344]
 r449: [343..344]
 r450: [341..342]
 r451: [337..338]
 r452: [321..322]
 r453: [319..320]
 r454: [315..316]
 r455: [311..312]
 r456: [309..310]
 r457: [307..308]
 r458: [303..304]
 r459: [301..302]
 r460: [297..298]
 r461: [287..288]
 r462: [285..286]
 r463: [283..284]
 r464: [283..284]
 r465: [281..282]
 r466: [281..282]
 r467: [279..280]
 r468: [273..274]
 r469: [269..270]
 r470: [261..262]
 r471: [259..260]
 r472: [257..258]
 r473: [253..254]
 r474: [245..246]
 r475: [243..244]
 r476: [241..242]
 r477: [237..238]
 r478: [235..236]
 r479: [229..230]
 r480: [225..226]
 r481: [221..222]
 r482: [219..220]
 r483: [213..214]
 r484: [209..210]
 r485: [205..206]
 r486: [203..204]
 r487: [199..200]
 r488: [187..188]
 r489: [183..184]
 r490: [179..180]
 r491: [177..178]
 r492: [173..174]
 r493: [161..162]
 r494: [157..158]
 r495: [153..154]
 r496: [145..146]
 r497: [141..142]
 r498: [137..138]
 r499: [133..134]
 r500: [127..128]
 r501: [123..124]
 r502: [113..114]
 r503: [109..110]
 r504: [103..104]
 r505: [99..100]
 r506: [55..56]
 r507: [51..52]
 r508: [43..44]
 r509: [89..90]
 r510: [85..86]
 r511: [81..82]
 r512: [75..76]
 r513: [71..72]
 r514: [67..68]
 r515: [679..680]
 r516: [675..676]
 r517: [671..672]
 r518: [667..668]
 r519: [663..664]
 r520: [659..660]
 r521: [651..652]
 r522: [647..648]
 r523: [643..644]
 r524: [637..638]
 r525: [633..634]
 r526: [629..630]
 r527: [619..620]
 r528: [615..616]
 r529: [611..612]
 r530: [605..606]
 r531: [601..602]
 r532: [597..598]
 r533: [587..588]
 r534: [583..584]
 r535: [579..580]
 r536: [573..574]
 r537: [569..570]
 r538: [565..566]
 r539: [41..42]
 r540: [37..38]
 r541: [9..10]
 r543: [11..12]
 r544: [0..0]
 r545: [545..546]
 r546: [483..486]
 r547: [483..484]
 r548: [465..468]
 r549: [465..466]
 r550: [447..450]
 r551: [447..448]
 r552: [429..432]
 r553: [429..430]
 r554: [393..394]
 r555: [313..314]
 r556: [295..296]
 r557: [289..290]

********** Assignment #1: **********

	 Assigning to 546 (cl=CREG, orig=368, freq=3, tfirst=546, tfreq=3)...
	   Assign 2 to reload r546 (freq=3)
	 Assigning to 548 (cl=CREG, orig=377, freq=3, tfirst=548, tfreq=3)...
	   Assign 2 to reload r548 (freq=3)
	 Assigning to 550 (cl=CREG, orig=386, freq=3, tfirst=550, tfreq=3)...
	   Assign 2 to reload r550 (freq=3)
	 Assigning to 552 (cl=CREG, orig=395, freq=3, tfirst=552, tfreq=3)...
	   Assign 2 to reload r552 (freq=3)
	 Assigning to 547 (cl=DIREG, orig=370, freq=2, tfirst=547, tfreq=2)...
	   Assign 5 to reload r547 (freq=2)
	 Assigning to 549 (cl=DIREG, orig=379, freq=2, tfirst=549, tfreq=2)...
	   Assign 5 to reload r549 (freq=2)
	 Assigning to 551 (cl=DIREG, orig=388, freq=2, tfirst=551, tfreq=2)...
	   Assign 5 to reload r551 (freq=2)
	 Assigning to 553 (cl=DIREG, orig=397, freq=2, tfirst=553, tfreq=2)...
	   Assign 5 to reload r553 (freq=2)
	 Assigning to 545 (cl=GENERAL_REGS, orig=340, freq=3, tfirst=545, tfreq=3)...
	   Assign 0 to reload r545 (freq=3)
	 Assigning to 555 (cl=GENERAL_REGS, orig=455, freq=3, tfirst=555, tfreq=3)...
	   Assign 1 to reload r555 (freq=3)
	 Assigning to 543 (cl=INDEX_REGS, orig=543, freq=1, tfirst=543, tfreq=1)...
	   Assign 0 to reload r543 (freq=1)
	 Assigning to 544 (cl=INDEX_REGS, orig=544, freq=1, tfirst=544, tfreq=1)...
	   Assign 3 to reload r544 (freq=1)
	 Assigning to 556 (cl=SSE_REGS, orig=155, freq=3, tfirst=556, tfreq=3)...
	   Assign 23 to reload r556 (freq=3)
	 Assigning to 554 (cl=SSE_REGS, orig=121, freq=2, tfirst=554, tfreq=2)...
	   Assign 24 to reload r554 (freq=2)
	 Assigning to 557 (cl=SSE_REGS, orig=157, freq=2, tfirst=557, tfreq=2)...
	   Assign 25 to reload r557 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=832, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=800, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 748
changing reg in insn 749
changing reg in insn 749
changing reg in insn 751
changing reg in insn 27
changing reg in insn 30
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 44
changing reg in insn 44
changing reg in insn 54
changing reg in insn 49
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 405
changing reg in insn 407
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 118
changing reg in insn 119
changing reg in insn 153
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 168
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 183
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 198
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 209
changing reg in insn 212
changing reg in insn 214
changing reg in insn 215
changing reg in insn 222
changing reg in insn 223
changing reg in insn 244
changing reg in insn 246
changing reg in insn 253
changing reg in insn 254
changing reg in insn 274
changing reg in insn 275
changing reg in insn 277
changing reg in insn 284
changing reg in insn 285
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 309
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 313
changing reg in insn 312
changing reg in insn 313
changing reg in insn 320
changing reg in insn 321
changing reg in insn 342
changing reg in insn 343
changing reg in insn 343
changing reg in insn 345
changing reg in insn 345
changing reg in insn 346
changing reg in insn 346
changing reg in insn 347
changing reg in insn 347
changing reg in insn 355
changing reg in insn 348
changing reg in insn 349
changing reg in insn 354
changing reg in insn 355
changing reg in insn 362
changing reg in insn 363
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 387
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 389
changing reg in insn 394
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 395
changing reg in insn 396
changing reg in insn 396
changing reg in insn 398
changing reg in insn 412
changing reg in insn 416
changing reg in insn 417
changing reg in insn 417
changing reg in insn 419
changing reg in insn 421
changing reg in insn 422
changing reg in insn 424
changing reg in insn 425
changing reg in insn 426
changing reg in insn 428
changing reg in insn 438
changing reg in insn 439
changing reg in insn 439
changing reg in insn 440
changing reg in insn 442
changing reg in insn 443
changing reg in insn 443
changing reg in insn 445
changing reg in insn 445
changing reg in insn 446
changing reg in insn 446
changing reg in insn 447
changing reg in insn 447
changing reg in insn 448
changing reg in insn 451
changing reg in insn 459
changing reg in insn 453
changing reg in insn 454
changing reg in insn 454
changing reg in insn 456
changing reg in insn 456
changing reg in insn 457
changing reg in insn 457
changing reg in insn 458
changing reg in insn 458
changing reg in insn 459
changing reg in insn 468
changing reg in insn 469
changing reg in insn 469
changing reg in insn 471
changing reg in insn 471
changing reg in insn 471
changing reg in insn 479
changing reg in insn 473
changing reg in insn 474
changing reg in insn 474
changing reg in insn 475
changing reg in insn 478
changing reg in insn 479
changing reg in insn 481
changing reg in insn 482
changing reg in insn 482
changing reg in insn 484
changing reg in insn 484
changing reg in insn 484
changing reg in insn 492
changing reg in insn 486
changing reg in insn 487
changing reg in insn 487
changing reg in insn 488
changing reg in insn 491
changing reg in insn 492
changing reg in insn 494
changing reg in insn 495
changing reg in insn 495
changing reg in insn 497
changing reg in insn 497
changing reg in insn 497
changing reg in insn 511
changing reg in insn 499
changing reg in insn 500
changing reg in insn 500
changing reg in insn 502
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 505
changing reg in insn 505
changing reg in insn 506
changing reg in insn 506
changing reg in insn 507
changing reg in insn 510
changing reg in insn 511
changing reg in insn 513
changing reg in insn 514
changing reg in insn 514
changing reg in insn 516
changing reg in insn 516
changing reg in insn 516
changing reg in insn 530
changing reg in insn 518
changing reg in insn 519
changing reg in insn 519
changing reg in insn 521
changing reg in insn 521
changing reg in insn 522
changing reg in insn 522
changing reg in insn 523
changing reg in insn 523
changing reg in insn 524
changing reg in insn 524
changing reg in insn 525
changing reg in insn 525
changing reg in insn 526
changing reg in insn 529
changing reg in insn 530
changing reg in insn 533
changing reg in insn 534
changing reg in insn 534
changing reg in insn 536
changing reg in insn 536
changing reg in insn 537
changing reg in insn 537
changing reg in insn 538
changing reg in insn 540
changing reg in insn 542
changing reg in insn 548
changing reg in insn 549
changing reg in insn 549
changing reg in insn 551
changing reg in insn 551
changing reg in insn 552
changing reg in insn 552
changing reg in insn 575
changing reg in insn 554
changing reg in insn 555
changing reg in insn 555
changing reg in insn 557
changing reg in insn 557
changing reg in insn 558
changing reg in insn 558
changing reg in insn 559
changing reg in insn 559
changing reg in insn 561
changing reg in insn 562
changing reg in insn 562
changing reg in insn 564
changing reg in insn 564
changing reg in insn 565
changing reg in insn 565
changing reg in insn 566
changing reg in insn 566
changing reg in insn 567
changing reg in insn 568
changing reg in insn 568
changing reg in insn 577
changing reg in insn 570
changing reg in insn 571
changing reg in insn 571
changing reg in insn 573
changing reg in insn 573
changing reg in insn 574
changing reg in insn 574
changing reg in insn 578
changing reg in insn 581
changing reg in insn 582
changing reg in insn 582
changing reg in insn 584
changing reg in insn 584
changing reg in insn 585
changing reg in insn 585
changing reg in insn 586
changing reg in insn 586
changing reg in insn 587
changing reg in insn 587
changing reg in insn 588
changing reg in insn 592
changing reg in insn 593
changing reg in insn 593
changing reg in insn 595
changing reg in insn 595
changing reg in insn 596
changing reg in insn 596
changing reg in insn 597
changing reg in insn 597
changing reg in insn 598
changing reg in insn 604
changing reg in insn 605
changing reg in insn 605
changing reg in insn 607
changing reg in insn 607
changing reg in insn 608
changing reg in insn 608
changing reg in insn 610
changing reg in insn 611
changing reg in insn 611
changing reg in insn 612
changing reg in insn 625
changing reg in insn 614
changing reg in insn 615
changing reg in insn 615
changing reg in insn 617
changing reg in insn 617
changing reg in insn 618
changing reg in insn 618
changing reg in insn 622
changing reg in insn 620
changing reg in insn 621
changing reg in insn 621
changing reg in insn 622
changing reg in insn 622
changing reg in insn 623
changing reg in insn 623
changing reg in insn 624
changing reg in insn 624
changing reg in insn 625
changing reg in insn 728
changing reg in insn 729
changing reg in insn 729
changing reg in insn 731
changing reg in insn 731
changing reg in insn 732
changing reg in insn 732
changing reg in insn 733
changing reg in insn 733
changing reg in insn 734
changing reg in insn 734
changing reg in insn 735
changing reg in insn 736
changing reg in insn 737
changing reg in insn 738
changing reg in insn 738
changing reg in insn 740
changing reg in insn 639
changing reg in insn 640
changing reg in insn 640
changing reg in insn 642
changing reg in insn 642
changing reg in insn 643
changing reg in insn 643
changing reg in insn 646
changing reg in insn 645
changing reg in insn 646
changing reg in insn 646
changing reg in insn 657
changing reg in insn 648
changing reg in insn 649
changing reg in insn 649
changing reg in insn 651
changing reg in insn 651
changing reg in insn 652
changing reg in insn 652
changing reg in insn 654
changing reg in insn 655
changing reg in insn 656
changing reg in insn 656
changing reg in insn 657
changing reg in insn 659
changing reg in insn 660
changing reg in insn 660
changing reg in insn 662
changing reg in insn 662
changing reg in insn 663
changing reg in insn 663
changing reg in insn 665
changing reg in insn 666
changing reg in insn 666
changing reg in insn 667
changing reg in insn 679
changing reg in insn 669
changing reg in insn 670
changing reg in insn 670
changing reg in insn 672
changing reg in insn 672
changing reg in insn 673
changing reg in insn 673
changing reg in insn 677
changing reg in insn 675
changing reg in insn 676
changing reg in insn 676
changing reg in insn 677
changing reg in insn 677
changing reg in insn 678
changing reg in insn 678
changing reg in insn 679
changing reg in insn 681
changing reg in insn 682
changing reg in insn 682
changing reg in insn 684
changing reg in insn 684
changing reg in insn 685
changing reg in insn 685
changing reg in insn 687
changing reg in insn 688
changing reg in insn 688
changing reg in insn 689
changing reg in insn 701
changing reg in insn 691
changing reg in insn 692
changing reg in insn 692
changing reg in insn 694
changing reg in insn 694
changing reg in insn 695
changing reg in insn 695
changing reg in insn 699
changing reg in insn 697
changing reg in insn 698
changing reg in insn 698
changing reg in insn 699
changing reg in insn 699
changing reg in insn 700
changing reg in insn 700
changing reg in insn 701
changing reg in insn 703
changing reg in insn 704
changing reg in insn 704
changing reg in insn 706
changing reg in insn 706
changing reg in insn 707
changing reg in insn 707
changing reg in insn 709
changing reg in insn 710
changing reg in insn 710
changing reg in insn 711
changing reg in insn 723
changing reg in insn 713
changing reg in insn 714
changing reg in insn 714
changing reg in insn 716
changing reg in insn 716
changing reg in insn 717
changing reg in insn 717
changing reg in insn 721
changing reg in insn 719
changing reg in insn 720
changing reg in insn 720
changing reg in insn 721
changing reg in insn 721
changing reg in insn 722
changing reg in insn 722
changing reg in insn 723
changing reg in insn 754
changing reg in insn 757
changing reg in insn 757
changing reg in insn 761
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 30
changing reg in insn 29
changing reg in insn 28
changing reg in insn 33
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 48
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 76
changing reg in insn 79
changing reg in insn 81
changing reg in insn 83
changing reg in insn 82
changing reg in insn 85
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 100
changing reg in insn 103
changing reg in insn 105
changing reg in insn 108
changing reg in insn 106
changing reg in insn 109
changing reg in insn 107
changing reg in insn 111
changing reg in insn 114
changing reg in insn 116
changing reg in insn 122
changing reg in insn 139
changing reg in insn 123
changing reg in insn 140
changing reg in insn 124
changing reg in insn 141
changing reg in insn 125
changing reg in insn 142
changing reg in insn 126
changing reg in insn 144
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 154
changing reg in insn 149
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 149
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 160
changing reg in insn 159
changing reg in insn 161
changing reg in insn 169
changing reg in insn 164
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 164
changing reg in insn 163
changing reg in insn 165
changing reg in insn 166
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 175
changing reg in insn 174
changing reg in insn 176
changing reg in insn 184
changing reg in insn 179
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 179
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 185
changing reg in insn 186
changing reg in insn 188
changing reg in insn 190
changing reg in insn 189
changing reg in insn 191
changing reg in insn 199
changing reg in insn 194
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 194
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 205
changing reg in insn 204
changing reg in insn 206
changing reg in insn 208
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 218
changing reg in insn 220
changing reg in insn 226
changing reg in insn 235
changing reg in insn 227
changing reg in insn 236
changing reg in insn 228
changing reg in insn 237
changing reg in insn 229
changing reg in insn 238
changing reg in insn 230
changing reg in insn 240
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 245
changing reg in insn 246
changing reg in insn 249
changing reg in insn 251
changing reg in insn 258
changing reg in insn 265
changing reg in insn 259
changing reg in insn 266
changing reg in insn 260
changing reg in insn 267
changing reg in insn 261
changing reg in insn 268
changing reg in insn 262
changing reg in insn 270
changing reg in insn 263
changing reg in insn 264
changing reg in insn 276
changing reg in insn 277
changing reg in insn 280
changing reg in insn 282
changing reg in insn 289
changing reg in insn 296
changing reg in insn 290
changing reg in insn 297
changing reg in insn 291
changing reg in insn 298
changing reg in insn 292
changing reg in insn 299
changing reg in insn 293
changing reg in insn 301
changing reg in insn 294
changing reg in insn 295
changing reg in insn 305
changing reg in insn 306
changing reg in insn 308
changing reg in insn 316
changing reg in insn 318
changing reg in insn 325
changing reg in insn 332
changing reg in insn 326
changing reg in insn 333
changing reg in insn 327
changing reg in insn 334
changing reg in insn 328
changing reg in insn 335
changing reg in insn 329
changing reg in insn 337
changing reg in insn 330
changing reg in insn 331
changing reg in insn 341
changing reg in insn 342
changing reg in insn 344
changing reg in insn 352
changing reg in insn 349
changing reg in insn 353
changing reg in insn 352
changing reg in insn 351
changing reg in insn 350
changing reg in insn 350
changing reg in insn 352
changing reg in insn 353
changing reg in insn 354
changing reg in insn 358
changing reg in insn 360
changing reg in insn 367
changing reg in insn 374
changing reg in insn 368
changing reg in insn 375
changing reg in insn 369
changing reg in insn 376
changing reg in insn 370
changing reg in insn 377
changing reg in insn 371
changing reg in insn 379
changing reg in insn 372
changing reg in insn 373
changing reg in insn 383
changing reg in insn 384
changing reg in insn 386
changing reg in insn 397
changing reg in insn 398
changing reg in insn 401
changing reg in insn 403
changing reg in insn 411
changing reg in insn 412
changing reg in insn 414
changing reg in insn 415
changing reg in insn 415
changing reg in insn 416
changing reg in insn 418
changing reg in insn 419
changing reg in insn 420
changing reg in insn 421
changing reg in insn 423
changing reg in insn 427
changing reg in insn 428
changing reg in insn 429
changing reg in insn 430
changing reg in insn 431
changing reg in insn 433
changing reg in insn 432
changing reg in insn 433
changing reg in insn 434
changing reg in insn 436
changing reg in insn 435
changing reg in insn 436
changing reg in insn 437
changing reg in insn 438
changing reg in insn 441
changing reg in insn 442
changing reg in insn 444
changing reg in insn 448
changing reg in insn 449
changing reg in insn 450
changing reg in insn 451
changing reg in insn 452
changing reg in insn 453
changing reg in insn 455
changing reg in insn 462
changing reg in insn 463
changing reg in insn 463
changing reg in insn 464
changing reg in insn 467
changing reg in insn 468
changing reg in insn 470
changing reg in insn 471
changing reg in insn 472
changing reg in insn 473
changing reg in insn 477
changing reg in insn 478
changing reg in insn 480
changing reg in insn 481
changing reg in insn 483
changing reg in insn 484
changing reg in insn 485
changing reg in insn 486
changing reg in insn 490
changing reg in insn 491
changing reg in insn 493
changing reg in insn 494
changing reg in insn 496
changing reg in insn 497
changing reg in insn 498
changing reg in insn 499
changing reg in insn 501
changing reg in insn 509
changing reg in insn 510
changing reg in insn 512
changing reg in insn 513
changing reg in insn 515
changing reg in insn 516
changing reg in insn 517
changing reg in insn 518
changing reg in insn 520
changing reg in insn 528
changing reg in insn 529
changing reg in insn 532
changing reg in insn 533
changing reg in insn 535
changing reg in insn 547
changing reg in insn 548
changing reg in insn 550
changing reg in insn 553
changing reg in insn 554
changing reg in insn 556
changing reg in insn 560
changing reg in insn 561
changing reg in insn 563
changing reg in insn 569
changing reg in insn 570
changing reg in insn 572
changing reg in insn 580
changing reg in insn 581
changing reg in insn 583
changing reg in insn 591
changing reg in insn 592
changing reg in insn 594
changing reg in insn 598
changing reg in insn 599
changing reg in insn 603
changing reg in insn 604
changing reg in insn 606
changing reg in insn 609
changing reg in insn 610
changing reg in insn 613
changing reg in insn 614
changing reg in insn 616
changing reg in insn 619
changing reg in insn 620
changing reg in insn 638
changing reg in insn 639
changing reg in insn 641
changing reg in insn 644
changing reg in insn 645
changing reg in insn 647
changing reg in insn 648
changing reg in insn 650
changing reg in insn 653
changing reg in insn 654
changing reg in insn 658
changing reg in insn 659
changing reg in insn 661
changing reg in insn 664
changing reg in insn 665
changing reg in insn 668
changing reg in insn 669
changing reg in insn 671
changing reg in insn 674
changing reg in insn 675
changing reg in insn 680
changing reg in insn 681
changing reg in insn 683
changing reg in insn 686
changing reg in insn 687
changing reg in insn 690
changing reg in insn 691
changing reg in insn 693
changing reg in insn 696
changing reg in insn 697
changing reg in insn 702
changing reg in insn 703
changing reg in insn 705
changing reg in insn 708
changing reg in insn 709
changing reg in insn 712
changing reg in insn 713
changing reg in insn 715
changing reg in insn 718
changing reg in insn 719
changing reg in insn 727
changing reg in insn 728
changing reg in insn 730
changing reg in insn 747
changing reg in insn 748
changing reg in insn 19
changing reg in insn 762
deleting insn with uid = 77.
deleting insn with uid = 83.
deleting insn with uid = 101.
deleting insn with uid = 108.
deleting insn with uid = 109.
deleting insn with uid = 141.
deleting insn with uid = 142.
deleting insn with uid = 782.
deleting insn with uid = 785.
deleting insn with uid = 788.
deleting insn with uid = 791.
deleting insn with uid = 237.
deleting insn with uid = 238.
deleting insn with uid = 267.
deleting insn with uid = 268.
deleting insn with uid = 298.
deleting insn with uid = 299.
deleting insn with uid = 334.
deleting insn with uid = 335.
deleting insn with uid = 376.
deleting insn with uid = 377.
deleting insn with uid = 391.
deleting insn with uid = 393.
deleting insn with uid = 796.
deleting insn with uid = 797.
deleting insn with uid = 577.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 104.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 162.
verify found no changes in insn with uid = 177.
verify found no changes in insn with uid = 192.
verify found no changes in insn with uid = 207.
verify found no changes in insn with uid = 213.
verify found no changes in insn with uid = 221.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 252.
verify found no changes in insn with uid = 272.
verify found no changes in insn with uid = 283.
verify found no changes in insn with uid = 303.
verify found no changes in insn with uid = 319.
verify found no changes in insn with uid = 339.
verify found no changes in insn with uid = 361.
verify found no changes in insn with uid = 381.
verify found no changes in insn with uid = 404.
verify found no changes in insn with uid = 476.
verify found no changes in insn with uid = 489.
verify found no changes in insn with uid = 508.
verify found no changes in insn with uid = 527.
verify found no changes in insn with uid = 539.
verify found no changes in insn with uid = 579.
verify found no changes in insn with uid = 764.


int read_fdf_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision1*, float**, float**, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 37[r8] 38[r9]
;;  ref usage 	r0={351d,334u} r1={117d,86u,27e} r2={72d,40u,8e} r3={6d,5u} r4={70d,38u,1e} r5={78d,42u} r6={1d,249u} r7={23d,101u} r8={32d} r9={32d} r10={32d} r11={32d} r12={32d} r13={32d} r14={32d} r15={32d} r17={261d,18u} r18={32d} r19={32d} r20={1d,1u,36e} r21={38d,5u} r22={34d,1u} r23={36d,3u} r24={34d,1u} r25={34d,1u} r26={33d} r27={33d} r28={33d} r29={32d} r30={32d} r31={32d} r32={32d} r33={32d} r34={32d} r35={32d} r36={32d} r37={45d,13u} r38={39d,7u} r39={32d} r40={32d} r45={32d} r46={32d} r47={32d} r48={32d} r49={32d} r50={32d} r51={32d} r52={32d} r53={32d} r54={32d} r55={32d} r56={32d} r57={32d} r58={32d} r59={32d} r60={32d} r61={32d} r62={32d} r63={32d} r64={32d} r65={32d} r66={32d} r67={32d} r68={32d} r69={32d} r70={32d} r71={32d} r72={32d} r73={32d} r74={32d} r75={32d} r76={32d} 
;;    total ref usage 4020{3003d,945u,72e} in 693{661 regular + 32 call} insns.
(note 1 0 20 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 327 328 329 330 331
(note 20 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 20 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -744 [0xfffffffffffffd18])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -760 [0xfffffffffffffd08])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [327])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])
        (reg/f:DI 0 ax [327])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [328])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])
        (reg/f:DI 0 ax [328])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [329])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 out_data+0 S8 A64])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -792 [0xfffffffffffffce8])) [0 out_data+0 S8 A64])
        (reg/f:DI 0 ax [329])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [330])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 scratch_data+0 S8 A64])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -800 [0xfffffffffffffce0])) [0 scratch_data+0 S8 A64])
        (reg/f:DI 0 ax [330])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])
        (reg/f:DI 0 ax [331])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(note 18 17 19 2 NOTE_INSN_FUNCTION_BEG)
(insn 19 18 22 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.5750+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [543])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:24 964 {stack_tls_protect_set_di}
     (nil))
(insn 22 19 771 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])
        (const_int 0 [0])) read_fdf.cpp:33 90 {*movsi_internal}
     (nil))
(jump_insn 771 22 772 2 (set (pc)
        (label_ref 745)) read_fdf.cpp:33 636 {jump}
     (nil)
 -> 745)
;;  succ:       34 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 772 771 750)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 85 86 87 88 332 333 334 335
(code_label 750 772 25 3 20 "" [1 uses])
(note 25 750 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 3 (set (reg:SI 0 ax [332])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:35 90 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:DI 1 dx [orig:85 D.5726 ] [85])
        (sign_extend:DI (reg:SI 0 ax [332]))) read_fdf.cpp:35 142 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 3 (set (reg:DI 0 ax [333])
        (reg:DI 1 dx [orig:85 D.5726 ] [85])) read_fdf.cpp:35 89 {*movdi_internal}
     (nil))
(insn 29 28 30 3 (parallel [
            (set (reg:DI 0 ax [333])
                (ashift:DI (reg:DI 0 ax [333])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:35 497 {*ashldi3_1}
     (nil))
(insn 30 29 31 3 (parallel [
            (set (reg:DI 0 ax [333])
                (plus:DI (reg:DI 0 ax [333])
                    (reg:DI 1 dx [orig:85 D.5726 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:35 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:85 D.5726 ] [85])
            (const_int 9 [0x9]))
        (nil)))
(insn 31 30 32 3 (parallel [
            (set (reg:DI 0 ax [334])
                (ashift:DI (reg:DI 0 ax [333])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:35 497 {*ashldi3_1}
     (nil))
(insn 32 31 33 3 (set (reg:DI 0 ax [333])
        (reg:DI 0 ax [334])) read_fdf.cpp:35 89 {*movdi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:DI 1 dx [orig:86 D.5726 ] [86])
        (reg:DI 0 ax [333])) read_fdf.cpp:35 89 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (reg/f:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 preprocess+0 S8 A64])) read_fdf.cpp:35 89 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.5727 ] [87])
                (plus:DI (reg/f:DI 0 ax [335])
                    (reg:DI 1 dx [orig:86 D.5726 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:35 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -720 [0xfffffffffffffd30])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:86 D.5726 ] [86]))
        (nil)))
(insn 36 35 37 3 (set (reg:SI 0 ax [orig:88 D.5725 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:87 D.5727 ] [87])
                (const_int 20 [0x14])) [0 _12->file_type+0 S4 A32])) read_fdf.cpp:35 90 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.5725 ] [88])
            (const_int 0 [0]))) read_fdf.cpp:35 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 38 37 39 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 742)
            (pc))) read_fdf.cpp:35 596 {*jcc_1}
     (nil)
 -> 742)
;;  succ:       4 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 89 90 91 92 93 94 95 96 336 337 338 339 340 341 342 343
(note 39 38 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 4 (set (reg:SI 0 ax [336])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:37 90 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 0 ax [orig:89 D.5726 ] [89])
        (sign_extend:DI (reg:SI 0 ax [336]))) read_fdf.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg:DI 1 dx [orig:90 D.5726 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.5726 ] [89])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:37 497 {*ashldi3_1}
     (nil))
(insn 43 42 44 4 (set (reg/f:DI 0 ax [337])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg/f:DI 3 bx [orig:91 D.5728 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 D.5726 ] [90])
                    (reg/f:DI 0 ax [337])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:37 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.5726 ] [90]))
        (nil)))
(insn 45 44 46 4 (set (reg:SI 0 ax [339])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:37 90 {*movsi_internal}
     (nil))
(insn 46 45 780 4 (set (reg:DI 0 ax [338])
        (sign_extend:DI (reg:SI 0 ax [339]))) read_fdf.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 780 46 47 4 (set (reg:DI 0 ax [340])
        (reg:DI 0 ax [338])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 47 780 781 4 (parallel [
            (set (reg:DI 0 ax [340])
                (ashift:DI (reg:DI 0 ax [340])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:37 497 {*ashldi3_1}
     (nil))
(insn 781 47 48 4 (set (reg:DI 1 dx [340])
        (reg:DI 0 ax [340])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 48 781 49 4 (set (reg/f:DI 0 ax [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -744 [0xfffffffffffffd18])) [0 file+0 S8 A64])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.5729 ] [92])
                (plus:DI (reg/f:DI 0 ax [341])
                    (reg:DI 1 dx [340])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:37 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -728 [0xfffffffffffffd28])) [0 file+0 S8 A64])
            (reg:DI 1 dx [340]))
        (nil)))
(insn 50 49 51 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b1b50421d10 *.LC0>)) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:92 D.5729 ] [92])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(call_insn 52 51 53 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b1b5029ed00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:37 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 53 52 54 4 (set (reg/f:DI 0 ax [orig:93 D.5730 ] [93])
        (reg:DI 0 ax)) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:91 D.5728 ] [91]) [0 *_17+0 S8 A64])
        (reg/f:DI 0 ax [orig:93 D.5730 ] [93])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:SI 0 ax [342])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:39 90 {*movsi_internal}
     (nil))
(insn 56 55 57 4 (set (reg:DI 0 ax [orig:94 D.5726 ] [94])
        (sign_extend:DI (reg:SI 0 ax [342]))) read_fdf.cpp:39 142 {*extendsidi2_rex64}
     (nil))
(insn 57 56 58 4 (parallel [
            (set (reg:DI 1 dx [orig:95 D.5726 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.5726 ] [94])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:39 497 {*ashldi3_1}
     (nil))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:39 89 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.5728 ] [96])
                (plus:DI (reg/f:DI 0 ax [343])
                    (reg:DI 1 dx [orig:95 D.5726 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:39 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.5726 ] [95]))
        (nil)))
(insn 60 59 61 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:96 D.5728 ] [96])
            (const_int 0 [0]))) read_fdf.cpp:39 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 61 60 62 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) read_fdf.cpp:39 596 {*jcc_1}
     (nil)
 -> 68)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 62 61 63 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b1b50421da8 *.LC1>)) read_fdf.cpp:40 89 {*movdi_internal}
     (nil))
(call_insn 64 63 65 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b1b500ed900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:40 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 65 64 66 5 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_fdf.cpp:41 90 {*movsi_internal}
     (nil))
(call_insn 66 65 67 5 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b1b50108900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_fdf.cpp:41 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 67 66 68)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 97 98 99 100 344 345 346 347 348
(code_label 68 67 69 6 4 "" [1 uses])
(note 69 68 70 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 6 (set (reg:SI 0 ax [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:46 90 {*movsi_internal}
     (nil))
(insn 71 70 72 6 (set (reg:DI 0 ax [orig:97 D.5726 ] [97])
        (sign_extend:DI (reg:SI 0 ax [344]))) read_fdf.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 72 71 73 6 (parallel [
            (set (reg:DI 1 dx [orig:98 D.5726 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.5726 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:46 497 {*ashldi3_1}
     (nil))
(insn 73 72 74 6 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:46 89 {*movdi_internal}
     (nil))
(insn 74 73 75 6 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.5728 ] [99])
                (plus:DI (reg/f:DI 0 ax [345])
                    (reg:DI 1 dx [orig:98 D.5726 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:46 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.5726 ] [98]))
        (nil)))
(insn 75 74 76 6 (set (reg/f:DI 1 dx [orig:100 D.5730 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 D.5728 ] [99]) [0 *_27+0 S8 A64])) read_fdf.cpp:46 89 {*movdi_internal}
     (nil))
(insn 76 75 78 6 (parallel [
            (set (reg:DI 0 ax [346])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:46 221 {*adddi_1}
     (nil))
(insn 78 76 79 6 (set (reg:SI 4 si)
        (const_int 80 [0x50])) read_fdf.cpp:46 90 {*movsi_internal}
     (nil))
(insn 79 78 80 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [346])) read_fdf.cpp:46 89 {*movdi_internal}
     (nil))
(call_insn 80 79 81 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b1b502aec00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:46 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 81 80 82 6 (parallel [
            (set (reg:DI 1 dx [347])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:47 221 {*adddi_1}
     (nil))
(insn 82 81 84 6 (parallel [
            (set (reg:DI 0 ax [348])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:47 221 {*adddi_1}
     (nil))
(insn 84 82 85 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b1b50421e40 *.LC2>)) read_fdf.cpp:47 89 {*movdi_internal}
     (nil))
(insn 85 84 86 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [348])) read_fdf.cpp:47 89 {*movdi_internal}
     (nil))
(insn 86 85 87 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:47 93 {*movqi_internal}
     (nil))
(call_insn 87 86 88 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b1b500ef900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:47 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 88 87 89 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])
            (const_int 0 [0]))) read_fdf.cpp:49 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 89 88 90 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 409)
            (pc))) read_fdf.cpp:49 596 {*jcc_1}
     (nil)
 -> 409)
;;  succ:       7 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 90 89 773 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 773 90 774 7 (set (pc)
        (label_ref 399)) read_fdf.cpp:50 636 {jump}
     (nil)
 -> 399)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 774 773 406)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 102 103 104 105 106 349 350 351 352 353 354 355
(code_label 406 774 93 8 12 "" [1 uses])
(note 93 406 94 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 8 (set (reg:SI 0 ax [349])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:51 90 {*movsi_internal}
     (nil))
(insn 95 94 96 8 (set (reg:DI 0 ax [orig:102 D.5726 ] [102])
        (sign_extend:DI (reg:SI 0 ax [349]))) read_fdf.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 8 (parallel [
            (set (reg:DI 1 dx [orig:103 D.5726 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.5726 ] [102])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:51 497 {*ashldi3_1}
     (nil))
(insn 97 96 98 8 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:51 89 {*movdi_internal}
     (nil))
(insn 98 97 99 8 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.5728 ] [104])
                (plus:DI (reg/f:DI 0 ax [350])
                    (reg:DI 1 dx [orig:103 D.5726 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:51 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.5726 ] [103]))
        (nil)))
(insn 99 98 100 8 (set (reg/f:DI 1 dx [orig:105 D.5730 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [orig:104 D.5728 ] [104]) [0 *_32+0 S8 A64])) read_fdf.cpp:51 89 {*movdi_internal}
     (nil))
(insn 100 99 102 8 (parallel [
            (set (reg:DI 0 ax [351])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:51 221 {*adddi_1}
     (nil))
(insn 102 100 103 8 (set (reg:SI 4 si)
        (const_int 80 [0x50])) read_fdf.cpp:51 90 {*movsi_internal}
     (nil))
(insn 103 102 104 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [351])) read_fdf.cpp:51 89 {*movdi_internal}
     (nil))
(call_insn 104 103 105 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b1b502aec00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:51 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 105 104 106 8 (parallel [
            (set (reg:DI 2 cx [352])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:52 221 {*adddi_1}
     (nil))
(insn 106 105 107 8 (parallel [
            (set (reg:DI 1 dx [353])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:52 221 {*adddi_1}
     (nil))
(insn 107 106 110 8 (parallel [
            (set (reg:DI 0 ax [354])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:52 221 {*adddi_1}
     (nil))
(insn 110 107 111 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b1b50421ed8 *.LC3>)) read_fdf.cpp:52 89 {*movdi_internal}
     (nil))
(insn 111 110 112 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [354])) read_fdf.cpp:52 89 {*movdi_internal}
     (nil))
(insn 112 111 113 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:52 93 {*movqi_internal}
     (nil))
(call_insn 113 112 114 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b1b500ef900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:52 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 114 113 115 8 (parallel [
            (set (reg:DI 0 ax [355])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:54 221 {*adddi_1}
     (nil))
(insn 115 114 116 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b1b5042b000 *.LC4>)) read_fdf.cpp:54 89 {*movdi_internal}
     (nil))
(insn 116 115 117 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [355])) read_fdf.cpp:54 89 {*movdi_internal}
     (nil))
(call_insn/i 117 116 118 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b1b500e0300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:54 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 118 117 119 8 (set (reg:SI 0 ax [orig:106 D.5725 ] [106])
        (reg:SI 0 ax)) read_fdf.cpp:54 90 {*movsi_internal}
     (nil))
(insn 119 118 120 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:106 D.5725 ] [106])
            (const_int 0 [0]))) read_fdf.cpp:54 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 120 119 121 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 216)
            (pc))) read_fdf.cpp:54 596 {*jcc_1}
     (nil)
 -> 216)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 107 108 109 110 111 112 113 114 115 116 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404
(note 121 120 122 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 9 (parallel [
            (set (reg:DI 37 r8 [356])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 123 122 124 9 (parallel [
            (set (reg:DI 5 di [357])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 124 123 125 9 (parallel [
            (set (reg:DI 2 cx [358])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 125 124 126 9 (parallel [
            (set (reg:DI 1 dx [359])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 126 125 127 9 (parallel [
            (set (reg:DI 0 ax [360])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 127 126 128 9 (parallel [
            (set (reg:DI 4 si [361])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 128 127 129 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [361])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 129 128 130 9 (parallel [
            (set (reg:DI 4 si [362])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 130 129 131 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [362])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 131 130 132 9 (parallel [
            (set (reg:DI 4 si [363])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 132 131 133 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [363])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 133 132 134 9 (parallel [
            (set (reg:DI 4 si [364])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 134 133 135 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [364])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 135 134 136 9 (parallel [
            (set (reg:DI 4 si [365])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 136 135 137 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [365])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 40 [0x28])
        (nil)))
(insn 137 136 138 9 (parallel [
            (set (reg:DI 4 si [366])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (nil))
(insn 138 137 139 9 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [366])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 139 138 140 9 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [356])) read_fdf.cpp:56 89 {*movdi_internal}
     (nil))
(insn 140 139 143 9 (set (reg:DI 37 r8)
        (reg:DI 5 di [357])) read_fdf.cpp:56 89 {*movdi_internal}
     (nil))
(insn 143 140 144 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b1b5042b130 *.LC5>)) read_fdf.cpp:56 89 {*movdi_internal}
     (nil))
(insn 144 143 145 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [360])) read_fdf.cpp:56 89 {*movdi_internal}
     (nil))
(insn 145 144 146 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:56 93 {*movqi_internal}
     (nil))
(call_insn 146 145 147 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b1b500ef900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 48 [0x30]))) read_fdf.cpp:56 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 147 146 154 9 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 154 147 148 9 (parallel [
            (set (reg:DI 0 ax [367])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:57 221 {*adddi_1}
     (nil))
(insn 148 154 149 9 (set (reg:DI 2 cx [371])
        (const_int -1 [0xffffffffffffffff])) read_fdf.cpp:57 89 {*movdi_internal}
     (nil))
(insn 149 148 150 9 (set (reg:DI 1 dx [370])
        (reg:DI 0 ax [367])) read_fdf.cpp:57 89 {*movdi_internal}
     (nil))
(insn 150 149 784 9 (set (reg:QI 0 ax [372])
        (const_int 0 [0])) read_fdf.cpp:57 93 {*movqi_internal}
     (nil))
(insn 784 150 151 9 (set (reg:DI 5 di [370])
        (reg:DI 1 dx [370])) read_fdf.cpp:57 89 {*movdi_internal}
     (nil))
(insn 151 784 783 9 (parallel [
            (set (reg:DI 2 cx [368])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [370]) [0  A8])
                        (reg:QI 0 ax [372])
                        (const_int 8 [0x8])
                        (reg:DI 2 cx [368])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [370]))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:57 923 {*strlenqi_1}
     (nil))
(insn 783 151 152 9 (set (reg:DI 0 ax [368])
        (reg:DI 2 cx [368])) read_fdf.cpp:57 89 {*movdi_internal}
     (nil))
(insn 152 783 153 9 (set (reg:DI 0 ax [369])
        (not:DI (reg:DI 0 ax [368]))) read_fdf.cpp:57 479 {*one_cmpldi2_1}
     (nil))
(insn 153 152 155 9 (parallel [
            (set (reg:DI 1 dx [orig:107 D.5726 ] [107])
                (plus:DI (reg:DI 0 ax [369])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:57 221 {*adddi_1}
     (nil))
(insn 155 153 156 9 (parallel [
            (set (reg:DI 0 ax [373])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:57 221 {*adddi_1}
     (nil))
(insn 156 155 157 9 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.5731 ] [108])
                (plus:DI (reg:DI 0 ax [373])
                    (reg:DI 1 dx [orig:107 D.5726 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:57 221 {*adddi_1}
     (nil))
(insn 157 156 158 9 (set (mem:HI (reg/f:DI 0 ax [orig:108 D.5731 ] [108]) [0 MEM[(void *)_36]+0 S2 A8])
        (const_int 32 [0x20])) read_fdf.cpp:57 92 {*movhi_internal}
     (nil))
(insn 158 157 159 9 (parallel [
            (set (reg:DI 1 dx [374])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:58 221 {*adddi_1}
     (nil))
(insn 159 158 160 9 (parallel [
            (set (reg:DI 0 ax [375])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:58 221 {*adddi_1}
     (nil))
(insn 160 159 161 9 (set (reg:DI 4 si)
        (reg:DI 1 dx [374])) read_fdf.cpp:58 89 {*movdi_internal}
     (nil))
(insn 161 160 162 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [375])) read_fdf.cpp:58 89 {*movdi_internal}
     (nil))
(call_insn 162 161 169 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x2b1b500ded00 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:58 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 169 162 163 9 (parallel [
            (set (reg:DI 0 ax [376])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:59 221 {*adddi_1}
     (nil))
(insn 163 169 164 9 (set (reg:DI 2 cx [380])
        (const_int -1 [0xffffffffffffffff])) read_fdf.cpp:59 89 {*movdi_internal}
     (nil))
(insn 164 163 165 9 (set (reg:DI 1 dx [379])
        (reg:DI 0 ax [376])) read_fdf.cpp:59 89 {*movdi_internal}
     (nil))
(insn 165 164 787 9 (set (reg:QI 0 ax [381])
        (const_int 0 [0])) read_fdf.cpp:59 93 {*movqi_internal}
     (nil))
(insn 787 165 166 9 (set (reg:DI 5 di [379])
        (reg:DI 1 dx [379])) read_fdf.cpp:59 89 {*movdi_internal}
     (nil))
(insn 166 787 786 9 (parallel [
            (set (reg:DI 2 cx [377])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [379]) [0  A8])
                        (reg:QI 0 ax [381])
                        (const_int 8 [0x8])
                        (reg:DI 2 cx [377])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [379]))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:59 923 {*strlenqi_1}
     (nil))
(insn 786 166 167 9 (set (reg:DI 0 ax [377])
        (reg:DI 2 cx [377])) read_fdf.cpp:59 89 {*movdi_internal}
     (nil))
(insn 167 786 168 9 (set (reg:DI 0 ax [378])
        (not:DI (reg:DI 0 ax [377]))) read_fdf.cpp:59 479 {*one_cmpldi2_1}
     (nil))
(insn 168 167 170 9 (parallel [
            (set (reg:DI 1 dx [orig:109 D.5726 ] [109])
                (plus:DI (reg:DI 0 ax [378])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:59 221 {*adddi_1}
     (nil))
(insn 170 168 171 9 (parallel [
            (set (reg:DI 0 ax [382])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:59 221 {*adddi_1}
     (nil))
(insn 171 170 172 9 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.5731 ] [110])
                (plus:DI (reg:DI 0 ax [382])
                    (reg:DI 1 dx [orig:109 D.5726 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:59 221 {*adddi_1}
     (nil))
(insn 172 171 173 9 (set (mem:HI (reg/f:DI 0 ax [orig:110 D.5731 ] [110]) [0 MEM[(void *)_38]+0 S2 A8])
        (const_int 32 [0x20])) read_fdf.cpp:59 92 {*movhi_internal}
     (nil))
(insn 173 172 174 9 (parallel [
            (set (reg:DI 1 dx [383])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:60 221 {*adddi_1}
     (nil))
(insn 174 173 175 9 (parallel [
            (set (reg:DI 0 ax [384])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:60 221 {*adddi_1}
     (nil))
(insn 175 174 176 9 (set (reg:DI 4 si)
        (reg:DI 1 dx [383])) read_fdf.cpp:60 89 {*movdi_internal}
     (nil))
(insn 176 175 177 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [384])) read_fdf.cpp:60 89 {*movdi_internal}
     (nil))
(call_insn 177 176 184 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x2b1b500ded00 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:60 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 184 177 178 9 (parallel [
            (set (reg:DI 0 ax [385])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:61 221 {*adddi_1}
     (nil))
(insn 178 184 179 9 (set (reg:DI 2 cx [389])
        (const_int -1 [0xffffffffffffffff])) read_fdf.cpp:61 89 {*movdi_internal}
     (nil))
(insn 179 178 180 9 (set (reg:DI 1 dx [388])
        (reg:DI 0 ax [385])) read_fdf.cpp:61 89 {*movdi_internal}
     (nil))
(insn 180 179 790 9 (set (reg:QI 0 ax [390])
        (const_int 0 [0])) read_fdf.cpp:61 93 {*movqi_internal}
     (nil))
(insn 790 180 181 9 (set (reg:DI 5 di [388])
        (reg:DI 1 dx [388])) read_fdf.cpp:61 89 {*movdi_internal}
     (nil))
(insn 181 790 789 9 (parallel [
            (set (reg:DI 2 cx [386])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [388]) [0  A8])
                        (reg:QI 0 ax [390])
                        (const_int 8 [0x8])
                        (reg:DI 2 cx [386])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [388]))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:61 923 {*strlenqi_1}
     (nil))
(insn 789 181 182 9 (set (reg:DI 0 ax [386])
        (reg:DI 2 cx [386])) read_fdf.cpp:61 89 {*movdi_internal}
     (nil))
(insn 182 789 183 9 (set (reg:DI 0 ax [387])
        (not:DI (reg:DI 0 ax [386]))) read_fdf.cpp:61 479 {*one_cmpldi2_1}
     (nil))
(insn 183 182 185 9 (parallel [
            (set (reg:DI 1 dx [orig:111 D.5726 ] [111])
                (plus:DI (reg:DI 0 ax [387])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:61 221 {*adddi_1}
     (nil))
(insn 185 183 186 9 (parallel [
            (set (reg:DI 0 ax [391])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:61 221 {*adddi_1}
     (nil))
(insn 186 185 187 9 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.5731 ] [112])
                (plus:DI (reg:DI 0 ax [391])
                    (reg:DI 1 dx [orig:111 D.5726 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:61 221 {*adddi_1}
     (nil))
(insn 187 186 188 9 (set (mem:HI (reg/f:DI 0 ax [orig:112 D.5731 ] [112]) [0 MEM[(void *)_40]+0 S2 A8])
        (const_int 32 [0x20])) read_fdf.cpp:61 92 {*movhi_internal}
     (nil))
(insn 188 187 189 9 (parallel [
            (set (reg:DI 1 dx [392])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:62 221 {*adddi_1}
     (nil))
(insn 189 188 190 9 (parallel [
            (set (reg:DI 0 ax [393])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:62 221 {*adddi_1}
     (nil))
(insn 190 189 191 9 (set (reg:DI 4 si)
        (reg:DI 1 dx [392])) read_fdf.cpp:62 89 {*movdi_internal}
     (nil))
(insn 191 190 192 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [393])) read_fdf.cpp:62 89 {*movdi_internal}
     (nil))
(call_insn 192 191 199 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x2b1b500ded00 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:62 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 199 192 193 9 (parallel [
            (set (reg:DI 0 ax [394])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:63 221 {*adddi_1}
     (nil))
(insn 193 199 194 9 (set (reg:DI 2 cx [398])
        (const_int -1 [0xffffffffffffffff])) read_fdf.cpp:63 89 {*movdi_internal}
     (nil))
(insn 194 193 195 9 (set (reg:DI 1 dx [397])
        (reg:DI 0 ax [394])) read_fdf.cpp:63 89 {*movdi_internal}
     (nil))
(insn 195 194 793 9 (set (reg:QI 0 ax [399])
        (const_int 0 [0])) read_fdf.cpp:63 93 {*movqi_internal}
     (nil))
(insn 793 195 196 9 (set (reg:DI 5 di [397])
        (reg:DI 1 dx [397])) read_fdf.cpp:63 89 {*movdi_internal}
     (nil))
(insn 196 793 792 9 (parallel [
            (set (reg:DI 2 cx [395])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [397]) [0  A8])
                        (reg:QI 0 ax [399])
                        (const_int 8 [0x8])
                        (reg:DI 2 cx [395])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [397]))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:63 923 {*strlenqi_1}
     (nil))
(insn 792 196 197 9 (set (reg:DI 0 ax [395])
        (reg:DI 2 cx [395])) read_fdf.cpp:63 89 {*movdi_internal}
     (nil))
(insn 197 792 198 9 (set (reg:DI 0 ax [396])
        (not:DI (reg:DI 0 ax [395]))) read_fdf.cpp:63 479 {*one_cmpldi2_1}
     (nil))
(insn 198 197 200 9 (parallel [
            (set (reg:DI 1 dx [orig:113 D.5726 ] [113])
                (plus:DI (reg:DI 0 ax [396])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:63 221 {*adddi_1}
     (nil))
(insn 200 198 201 9 (parallel [
            (set (reg:DI 0 ax [400])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:63 221 {*adddi_1}
     (nil))
(insn 201 200 202 9 (parallel [
            (set (reg/f:DI 0 ax [orig:114 D.5731 ] [114])
                (plus:DI (reg:DI 0 ax [400])
                    (reg:DI 1 dx [orig:113 D.5726 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:63 221 {*adddi_1}
     (nil))
(insn 202 201 203 9 (set (mem:HI (reg/f:DI 0 ax [orig:114 D.5731 ] [114]) [0 MEM[(void *)_42]+0 S2 A8])
        (const_int 32 [0x20])) read_fdf.cpp:63 92 {*movhi_internal}
     (nil))
(insn 203 202 204 9 (parallel [
            (set (reg:DI 1 dx [401])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:64 221 {*adddi_1}
     (nil))
(insn 204 203 205 9 (parallel [
            (set (reg:DI 0 ax [402])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:64 221 {*adddi_1}
     (nil))
(insn 205 204 206 9 (set (reg:DI 4 si)
        (reg:DI 1 dx [401])) read_fdf.cpp:64 89 {*movdi_internal}
     (nil))
(insn 206 205 207 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [402])) read_fdf.cpp:64 89 {*movdi_internal}
     (nil))
(call_insn 207 206 208 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x2b1b500ded00 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:64 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 208 207 209 9 (set (reg/f:DI 0 ax [403])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:65 89 {*movdi_internal}
     (nil))
(insn 209 208 210 9 (parallel [
            (set (reg/f:DI 1 dx [orig:115 D.5732 ] [115])
                (plus:DI (reg/f:DI 0 ax [403])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:65 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -792 [0xfffffffffffffce8])) [0 procpar_info+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 210 209 211 9 (parallel [
            (set (reg:DI 0 ax [404])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:65 221 {*adddi_1}
     (nil))
(insn 211 210 212 9 (set (reg:DI 4 si)
        (reg:DI 0 ax [404])) read_fdf.cpp:65 89 {*movdi_internal}
     (nil))
(insn 212 211 213 9 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:115 D.5732 ] [115])) read_fdf.cpp:65 89 {*movdi_internal}
     (nil))
(call_insn 213 212 214 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b1b500e0600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:65 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 214 213 215 9 (set (reg:QI 0 ax [orig:116 D.5733 ] [116])
        (const_int 0 [0])) read_fdf.cpp:66 93 {*movqi_internal}
     (nil))
(insn 215 214 216 9 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -512 [0xfffffffffffffe00])) [0 MEM[(char * {ref-all})&symbol]+0 S1 A64])
        (reg:QI 0 ax [orig:116 D.5733 ] [116])) read_fdf.cpp:66 93 {*movqi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 117 405
(code_label 216 215 217 10 7 "" [1 uses])
(note 217 216 218 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 218 217 219 10 (parallel [
            (set (reg:DI 0 ax [405])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:69 221 {*adddi_1}
     (nil))
(insn 219 218 220 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b1b5042b1c8 *.LC6>)) read_fdf.cpp:69 89 {*movdi_internal}
     (nil))
(insn 220 219 221 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [405])) read_fdf.cpp:69 89 {*movdi_internal}
     (nil))
(call_insn/i 221 220 222 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b1b500e0300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:69 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 222 221 223 10 (set (reg:SI 0 ax [orig:117 D.5725 ] [117])
        (reg:SI 0 ax)) read_fdf.cpp:69 90 {*movsi_internal}
     (nil))
(insn 223 222 224 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:117 D.5725 ] [117])
            (const_int 0 [0]))) read_fdf.cpp:69 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 224 223 225 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 247)
            (pc))) read_fdf.cpp:69 596 {*jcc_1}
     (nil)
 -> 247)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 118 406 407 408 409 410 411 412 413
(note 225 224 226 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 226 225 227 11 (parallel [
            (set (reg:DI 37 r8 [406])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 221 {*adddi_1}
     (nil))
(insn 227 226 228 11 (parallel [
            (set (reg:DI 5 di [407])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 221 {*adddi_1}
     (nil))
(insn 228 227 229 11 (parallel [
            (set (reg:DI 2 cx [408])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 221 {*adddi_1}
     (nil))
(insn 229 228 230 11 (parallel [
            (set (reg:DI 1 dx [409])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 221 {*adddi_1}
     (nil))
(insn 230 229 231 11 (parallel [
            (set (reg:DI 0 ax [410])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 221 {*adddi_1}
     (nil))
(insn 231 230 232 11 (parallel [
            (set (reg:DI 4 si [411])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -704 [0xfffffffffffffd40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 221 {*adddi_1}
     (nil))
(insn 232 231 233 11 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [411])) read_fdf.cpp:70 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 233 232 234 11 (parallel [
            (set (reg:DI 4 si [412])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -680 [0xfffffffffffffd58])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 221 {*adddi_1}
     (nil))
(insn 234 233 235 11 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [412])) read_fdf.cpp:70 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 235 234 236 11 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [406])) read_fdf.cpp:70 89 {*movdi_internal}
     (nil))
(insn 236 235 239 11 (set (reg:DI 37 r8)
        (reg:DI 5 di [407])) read_fdf.cpp:70 89 {*movdi_internal}
     (nil))
(insn 239 236 240 11 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b1b5042b260 *.LC7>)) read_fdf.cpp:70 89 {*movdi_internal}
     (nil))
(insn 240 239 241 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [410])) read_fdf.cpp:70 89 {*movdi_internal}
     (nil))
(insn 241 240 242 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:70 93 {*movqi_internal}
     (nil))
(call_insn 242 241 243 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b1b500ef900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 16 [0x10]))) read_fdf.cpp:70 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 243 242 244 11 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 244 243 245 11 (set (reg:DF 0 ax [orig:118 D.5734 ] [118])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -680 [0xfffffffffffffd58])) [0 dum8+0 S8 A64])) read_fdf.cpp:71 128 {*movdf_internal}
     (nil))
(insn 245 244 246 11 (set (reg/f:DI 1 dx [413])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:71 89 {*movdi_internal}
     (nil))
(insn 246 245 247 11 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [413])
                (const_int 304 [0x130])) [0 procpar_info_43(D)->main_frequency+0 S8 A64])
        (reg:DF 0 ax [orig:118 D.5734 ] [118])) read_fdf.cpp:71 128 {*movdf_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 119 414
(code_label 247 246 248 12 8 "" [1 uses])
(note 248 247 249 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 249 248 250 12 (parallel [
            (set (reg:DI 0 ax [414])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:74 221 {*adddi_1}
     (nil))
(insn 250 249 251 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b1b5042b2f8 *.LC8>)) read_fdf.cpp:74 89 {*movdi_internal}
     (nil))
(insn 251 250 252 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [414])) read_fdf.cpp:74 89 {*movdi_internal}
     (nil))
(call_insn/i 252 251 253 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b1b500e0300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:74 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 253 252 254 12 (set (reg:SI 0 ax [orig:119 D.5725 ] [119])
        (reg:SI 0 ax)) read_fdf.cpp:74 90 {*movsi_internal}
     (nil))
(insn 254 253 255 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:119 D.5725 ] [119])
            (const_int 0 [0]))) read_fdf.cpp:74 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 255 254 256 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 278)
            (pc))) read_fdf.cpp:74 596 {*jcc_1}
     (nil)
 -> 278)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 120 121 415 416 417 418 419 420 421
(note 256 255 257 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 257 256 258 13 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 258 257 259 13 (parallel [
            (set (reg:DI 37 r8 [415])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 221 {*adddi_1}
     (nil))
(insn 259 258 260 13 (parallel [
            (set (reg:DI 5 di [416])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 221 {*adddi_1}
     (nil))
(insn 260 259 261 13 (parallel [
            (set (reg:DI 2 cx [417])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 221 {*adddi_1}
     (nil))
(insn 261 260 262 13 (parallel [
            (set (reg:DI 1 dx [418])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 221 {*adddi_1}
     (nil))
(insn 262 261 263 13 (parallel [
            (set (reg:DI 0 ax [419])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 221 {*adddi_1}
     (nil))
(insn 263 262 264 13 (parallel [
            (set (reg:DI 4 si [420])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -708 [0xfffffffffffffd3c])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 221 {*adddi_1}
     (nil))
(insn 264 263 265 13 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [420])) read_fdf.cpp:75 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 265 264 266 13 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [415])) read_fdf.cpp:75 89 {*movdi_internal}
     (nil))
(insn 266 265 269 13 (set (reg:DI 37 r8)
        (reg:DI 5 di [416])) read_fdf.cpp:75 89 {*movdi_internal}
     (nil))
(insn 269 266 270 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b1b5042b390 *.LC9>)) read_fdf.cpp:75 89 {*movdi_internal}
     (nil))
(insn 270 269 271 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [419])) read_fdf.cpp:75 89 {*movdi_internal}
     (nil))
(insn 271 270 272 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:75 93 {*movqi_internal}
     (nil))
(call_insn 272 271 273 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b1b500ef900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 16 [0x10]))) read_fdf.cpp:75 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 273 272 274 13 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 274 273 275 13 (set (reg:SF 21 xmm0 [orig:120 D.5735 ] [120])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -708 [0xfffffffffffffd3c])) [0 dum5+0 S4 A32])) read_fdf.cpp:76 129 {*movsf_internal}
     (nil))
(insn 275 274 794 13 (set (reg:DF 24 xmm3 [orig:121 D.5734 ] [121])
        (float_extend:DF (reg:SF 21 xmm0 [orig:120 D.5735 ] [120]))) read_fdf.cpp:76 152 {*extendsfdf2_sse}
     (nil))
(insn 794 275 276 13 (set (reg:DF 0 ax [orig:121 D.5734 ] [121])
        (reg:DF 24 xmm3 [orig:121 D.5734 ] [121])) read_fdf.cpp:76 128 {*movdf_internal}
     (nil))
(insn 276 794 277 13 (set (reg/f:DI 1 dx [421])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:76 89 {*movdi_internal}
     (nil))
(insn 277 276 278 13 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [421])
                (const_int 360 [0x168])) [0 procpar_info_43(D)->span+0 S8 A64])
        (reg:DF 0 ax [orig:121 D.5734 ] [121])) read_fdf.cpp:76 128 {*movdf_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 122 422
(code_label 278 277 279 14 9 "" [1 uses])
(note 279 278 280 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 280 279 281 14 (parallel [
            (set (reg:DI 0 ax [422])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:79 221 {*adddi_1}
     (nil))
(insn 281 280 282 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b1b5042b428 *.LC10>)) read_fdf.cpp:79 89 {*movdi_internal}
     (nil))
(insn 282 281 283 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [422])) read_fdf.cpp:79 89 {*movdi_internal}
     (nil))
(call_insn/i 283 282 284 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b1b500e0300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:79 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 284 283 285 14 (set (reg:SI 0 ax [orig:122 D.5725 ] [122])
        (reg:SI 0 ax)) read_fdf.cpp:79 90 {*movsi_internal}
     (nil))
(insn 285 284 286 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:122 D.5725 ] [122])
            (const_int 0 [0]))) read_fdf.cpp:79 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 286 285 287 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 314)
            (pc))) read_fdf.cpp:79 596 {*jcc_1}
     (nil)
 -> 314)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 123 124 125 126 127 128 423 424 425 426 427 428 429 430
(note 287 286 288 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 15 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 289 288 290 15 (parallel [
            (set (reg:DI 37 r8 [423])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -700 [0xfffffffffffffd44])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 221 {*adddi_1}
     (nil))
(insn 290 289 291 15 (parallel [
            (set (reg:DI 5 di [424])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 221 {*adddi_1}
     (nil))
(insn 291 290 292 15 (parallel [
            (set (reg:DI 2 cx [425])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 221 {*adddi_1}
     (nil))
(insn 292 291 293 15 (parallel [
            (set (reg:DI 1 dx [426])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 221 {*adddi_1}
     (nil))
(insn 293 292 294 15 (parallel [
            (set (reg:DI 0 ax [427])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 221 {*adddi_1}
     (nil))
(insn 294 293 295 15 (parallel [
            (set (reg:DI 4 si [428])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 221 {*adddi_1}
     (nil))
(insn 295 294 296 15 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [428])) read_fdf.cpp:80 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 296 295 297 15 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [423])) read_fdf.cpp:80 89 {*movdi_internal}
     (nil))
(insn 297 296 300 15 (set (reg:DI 37 r8)
        (reg:DI 5 di [424])) read_fdf.cpp:80 89 {*movdi_internal}
     (nil))
(insn 300 297 301 15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b1b5042b4c0 *.LC11>)) read_fdf.cpp:80 89 {*movdi_internal}
     (nil))
(insn 301 300 302 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [427])) read_fdf.cpp:80 89 {*movdi_internal}
     (nil))
(insn 302 301 303 15 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:80 93 {*movqi_internal}
     (nil))
(call_insn 303 302 304 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b1b500ef900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 16 [0x10]))) read_fdf.cpp:80 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 304 303 305 15 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 305 304 306 15 (set (reg:SI 0 ax [429])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:81 90 {*movsi_internal}
     (nil))
(insn 306 305 307 15 (set (reg:DI 0 ax [orig:123 D.5726 ] [123])
        (sign_extend:DI (reg:SI 0 ax [429]))) read_fdf.cpp:81 142 {*extendsidi2_rex64}
     (nil))
(insn 307 306 308 15 (parallel [
            (set (reg:DI 1 dx [orig:124 D.5726 ] [124])
                (ashift:DI (reg:DI 0 ax [orig:123 D.5726 ] [123])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:81 497 {*ashldi3_1}
     (nil))
(insn 308 307 309 15 (set (reg/f:DI 0 ax [430])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:81 89 {*movdi_internal}
     (nil))
(insn 309 308 310 15 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.5736 ] [125])
                (plus:DI (reg/f:DI 0 ax [430])
                    (reg:DI 1 dx [orig:124 D.5726 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:81 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:124 D.5726 ] [124]))
        (nil)))
(insn 310 309 311 15 (set (reg/f:DI 0 ax [orig:126 D.5737 ] [126])
        (mem/f:DI (reg/f:DI 0 ax [orig:125 D.5736 ] [125]) [0 *_55+0 S8 A64])) read_fdf.cpp:81 89 {*movdi_internal}
     (nil))
(insn 311 310 312 15 (parallel [
            (set (reg/f:DI 1 dx [orig:127 D.5737 ] [127])
                (plus:DI (reg/f:DI 0 ax [orig:126 D.5737 ] [126])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:81 221 {*adddi_1}
     (nil))
(insn 312 311 313 15 (set (reg:SI 0 ax [orig:128 D.5725 ] [128])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -700 [0xfffffffffffffd44])) [0 dum7+0 S4 A32])) read_fdf.cpp:81 90 {*movsi_internal}
     (nil))
(insn 313 312 314 15 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:127 D.5737 ] [127])
                (const_int 4 [0x4])) [0 _57->ntraces.number+0 S4 A32])
        (reg:SI 0 ax [orig:128 D.5725 ] [128])) read_fdf.cpp:81 90 {*movsi_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 129 431
(code_label 314 313 315 16 10 "" [1 uses])
(note 315 314 316 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 316 315 317 16 (parallel [
            (set (reg:DI 0 ax [431])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:84 221 {*adddi_1}
     (nil))
(insn 317 316 318 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b1b5042b558 *.LC12>)) read_fdf.cpp:84 89 {*movdi_internal}
     (nil))
(insn 318 317 319 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [431])) read_fdf.cpp:84 89 {*movdi_internal}
     (nil))
(call_insn/i 319 318 320 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b1b500e0300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:84 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 320 319 321 16 (set (reg:SI 0 ax [orig:129 D.5725 ] [129])
        (reg:SI 0 ax)) read_fdf.cpp:84 90 {*movsi_internal}
     (nil))
(insn 321 320 322 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:129 D.5725 ] [129])
            (const_int 0 [0]))) read_fdf.cpp:84 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 322 321 323 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 356)
            (pc))) read_fdf.cpp:84 596 {*jcc_1}
     (nil)
 -> 356)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 130 131 132 133 134 135 136 432 433 434 435 436 437 438 439 440 441 442
(note 323 322 324 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 324 323 325 17 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 325 324 326 17 (parallel [
            (set (reg:DI 37 r8 [432])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -700 [0xfffffffffffffd44])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 221 {*adddi_1}
     (nil))
(insn 326 325 327 17 (parallel [
            (set (reg:DI 5 di [433])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 221 {*adddi_1}
     (nil))
(insn 327 326 328 17 (parallel [
            (set (reg:DI 2 cx [434])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 221 {*adddi_1}
     (nil))
(insn 328 327 329 17 (parallel [
            (set (reg:DI 1 dx [435])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 221 {*adddi_1}
     (nil))
(insn 329 328 330 17 (parallel [
            (set (reg:DI 0 ax [436])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 221 {*adddi_1}
     (nil))
(insn 330 329 331 17 (parallel [
            (set (reg:DI 4 si [437])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 221 {*adddi_1}
     (nil))
(insn 331 330 332 17 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [437])) read_fdf.cpp:85 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 332 331 333 17 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [432])) read_fdf.cpp:85 89 {*movdi_internal}
     (nil))
(insn 333 332 336 17 (set (reg:DI 37 r8)
        (reg:DI 5 di [433])) read_fdf.cpp:85 89 {*movdi_internal}
     (nil))
(insn 336 333 337 17 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b1b5042b4c0 *.LC11>)) read_fdf.cpp:85 89 {*movdi_internal}
     (nil))
(insn 337 336 338 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [436])) read_fdf.cpp:85 89 {*movdi_internal}
     (nil))
(insn 338 337 339 17 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:85 93 {*movqi_internal}
     (nil))
(call_insn 339 338 340 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b1b500ef900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 16 [0x10]))) read_fdf.cpp:85 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 340 339 341 17 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 341 340 342 17 (set (reg:SI 0 ax [438])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:86 90 {*movsi_internal}
     (nil))
(insn 342 341 343 17 (set (reg:DI 0 ax [orig:130 D.5726 ] [130])
        (sign_extend:DI (reg:SI 0 ax [438]))) read_fdf.cpp:86 142 {*extendsidi2_rex64}
     (nil))
(insn 343 342 344 17 (parallel [
            (set (reg:DI 1 dx [orig:131 D.5726 ] [131])
                (ashift:DI (reg:DI 0 ax [orig:130 D.5726 ] [130])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:86 497 {*ashldi3_1}
     (nil))
(insn 344 343 345 17 (set (reg/f:DI 0 ax [439])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:86 89 {*movdi_internal}
     (nil))
(insn 345 344 346 17 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.5736 ] [132])
                (plus:DI (reg/f:DI 0 ax [439])
                    (reg:DI 1 dx [orig:131 D.5726 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:86 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:131 D.5726 ] [131]))
        (nil)))
(insn 346 345 347 17 (set (reg/f:DI 0 ax [orig:133 D.5737 ] [133])
        (mem/f:DI (reg/f:DI 0 ax [orig:132 D.5736 ] [132]) [0 *_62+0 S8 A64])) read_fdf.cpp:86 89 {*movdi_internal}
     (nil))
(insn 347 346 348 17 (parallel [
            (set (reg/f:DI 1 dx [orig:134 D.5737 ] [134])
                (plus:DI (reg/f:DI 0 ax [orig:133 D.5737 ] [133])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:86 221 {*adddi_1}
     (nil))
(insn 348 347 349 17 (set (reg:SI 0 ax [orig:135 D.5725 ] [135])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -700 [0xfffffffffffffd44])) [0 dum7+0 S4 A32])) read_fdf.cpp:86 90 {*movsi_internal}
     (nil))
(insn 349 348 350 17 (set (reg:SI 0 ax [440])
        (reg:SI 0 ax [orig:135 D.5725 ] [135])) read_fdf.cpp:86 90 {*movsi_internal}
     (nil))
(insn 350 349 351 17 (parallel [
            (set (reg:SI 2 cx [441])
                (plus:SI (reg:SI 0 ax [440])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:86 220 {*addsi_1}
     (nil))
(insn 351 350 352 17 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [440])
            (const_int 0 [0]))) read_fdf.cpp:86 3 {*cmpsi_ccno_1}
     (nil))
(insn 352 351 353 17 (set (reg:SI 0 ax [440])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 2 cx [441])
            (reg:SI 0 ax [440]))) read_fdf.cpp:86 931 {*movsicc_noc}
     (nil))
(insn 353 352 354 17 (parallel [
            (set (reg:SI 0 ax [442])
                (ashiftrt:SI (reg:SI 0 ax [440])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:86 530 {*ashrsi3_1}
     (nil))
(insn 354 353 355 17 (set (reg:SI 0 ax [orig:136 D.5725 ] [136])
        (reg:SI 0 ax [442])) read_fdf.cpp:86 90 {*movsi_internal}
     (nil))
(insn 355 354 356 17 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:134 D.5737 ] [134])
                (const_int 12 [0xc])) [0 _64->ebytes.number+0 S4 A32])
        (reg:SI 0 ax [orig:136 D.5725 ] [136])) read_fdf.cpp:86 90 {*movsi_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 137 443
(code_label 356 355 357 18 11 "" [1 uses])
(note 357 356 358 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 358 357 359 18 (parallel [
            (set (reg:DI 0 ax [443])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:89 221 {*adddi_1}
     (nil))
(insn 359 358 360 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b1b5042b5f0 *.LC13>)) read_fdf.cpp:89 89 {*movdi_internal}
     (nil))
(insn 360 359 361 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [443])) read_fdf.cpp:89 89 {*movdi_internal}
     (nil))
(call_insn/i 361 360 362 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b1b500e0300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:89 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 362 361 363 18 (set (reg:SI 0 ax [orig:137 D.5725 ] [137])
        (reg:SI 0 ax)) read_fdf.cpp:89 90 {*movsi_internal}
     (nil))
(insn 363 362 364 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:137 D.5725 ] [137])
            (const_int 0 [0]))) read_fdf.cpp:89 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 364 363 365 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 399)
            (pc))) read_fdf.cpp:89 596 {*jcc_1}
     (nil)
 -> 399)
;;  succ:       19 (FALLTHRU)
;;              20 (DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 138 139 140 141 142 143 144 145 146 147 148 444 445 446 447 448 449 450 451 452
(note 365 364 366 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 366 365 367 19 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 367 366 368 19 (parallel [
            (set (reg:DI 37 r8 [444])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 221 {*adddi_1}
     (nil))
(insn 368 367 369 19 (parallel [
            (set (reg:DI 5 di [445])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 221 {*adddi_1}
     (nil))
(insn 369 368 370 19 (parallel [
            (set (reg:DI 2 cx [446])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 221 {*adddi_1}
     (nil))
(insn 370 369 371 19 (parallel [
            (set (reg:DI 1 dx [447])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 221 {*adddi_1}
     (nil))
(insn 371 370 372 19 (parallel [
            (set (reg:DI 0 ax [448])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 221 {*adddi_1}
     (nil))
(insn 372 371 373 19 (parallel [
            (set (reg:DI 4 si [449])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -700 [0xfffffffffffffd44])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 221 {*adddi_1}
     (nil))
(insn 373 372 374 19 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [449])) read_fdf.cpp:90 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 374 373 375 19 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [444])) read_fdf.cpp:90 89 {*movdi_internal}
     (nil))
(insn 375 374 378 19 (set (reg:DI 37 r8)
        (reg:DI 5 di [445])) read_fdf.cpp:90 89 {*movdi_internal}
     (nil))
(insn 378 375 379 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x2b1b5042b688 *.LC14>)) read_fdf.cpp:90 89 {*movdi_internal}
     (nil))
(insn 379 378 380 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [448])) read_fdf.cpp:90 89 {*movdi_internal}
     (nil))
(insn 380 379 381 19 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:90 93 {*movqi_internal}
     (nil))
(call_insn 381 380 382 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b1b500ef900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 16 [0x10]))) read_fdf.cpp:90 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 382 381 383 19 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 383 382 384 19 (set (reg:SI 0 ax [450])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:91 90 {*movsi_internal}
     (nil))
(insn 384 383 385 19 (set (reg:DI 0 ax [orig:138 D.5726 ] [138])
        (sign_extend:DI (reg:SI 0 ax [450]))) read_fdf.cpp:91 142 {*extendsidi2_rex64}
     (nil))
(insn 385 384 386 19 (parallel [
            (set (reg:DI 1 dx [orig:139 D.5726 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:138 D.5726 ] [138])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:91 497 {*ashldi3_1}
     (nil))
(insn 386 385 387 19 (set (reg/f:DI 0 ax [451])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:91 89 {*movdi_internal}
     (nil))
(insn 387 386 388 19 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.5736 ] [140])
                (plus:DI (reg/f:DI 0 ax [451])
                    (reg:DI 1 dx [orig:139 D.5726 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:91 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.5726 ] [139]))
        (nil)))
(insn 388 387 389 19 (set (reg/f:DI 0 ax [orig:141 D.5737 ] [141])
        (mem/f:DI (reg/f:DI 0 ax [orig:140 D.5736 ] [140]) [0 *_70+0 S8 A64])) read_fdf.cpp:91 89 {*movdi_internal}
     (nil))
(insn 389 388 390 19 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.5737 ] [142])
                (plus:DI (reg/f:DI 0 ax [orig:141 D.5737 ] [141])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:91 221 {*adddi_1}
     (nil))
(insn 390 389 392 19 (set (reg:SI 1 dx [orig:143 D.5725 ] [143])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -700 [0xfffffffffffffd44])) [0 dum7+0 S4 A32])) read_fdf.cpp:91 90 {*movsi_internal}
     (nil))
(insn 392 390 394 19 (parallel [
            (set (reg:SI 1 dx [orig:145 D.5738 ] [145])
                (ashift:SI (reg:SI 1 dx [orig:144 D.5738 ] [144])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:91 496 {*ashlsi3_1}
     (nil))
(insn 394 392 395 19 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:142 D.5737 ] [142])
                (const_int 8 [0x8])) [0 _72->np.number+0 S4 A32])
        (reg:SI 1 dx [orig:146 D.5725 ] [146])) read_fdf.cpp:91 90 {*movsi_internal}
     (nil))
(insn 395 394 396 19 (set (reg:SI 0 ax [orig:147 D.5725 ] [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -700 [0xfffffffffffffd44])) [0 dum7+0 S4 A32])) read_fdf.cpp:92 90 {*movsi_internal}
     (nil))
(insn 396 395 397 19 (parallel [
            (set (reg:SI 1 dx [orig:148 D.5725 ] [148])
                (ashift:SI (reg:SI 0 ax [orig:147 D.5725 ] [147])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:92 496 {*ashlsi3_1}
     (nil))
(insn 397 396 398 19 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:92 89 {*movdi_internal}
     (nil))
(insn 398 397 399 19 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [452])
                (const_int 300 [0x12c])) [0 procpar_info_43(D)->num_points+0 S4 A32])
        (reg:SI 1 dx [orig:148 D.5725 ] [148])) read_fdf.cpp:92 90 {*movsi_internal}
     (nil))
;;  succ:       20 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU,DFS_BACK)
;;              18 (DFS_BACK)
;;              7 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 101 453
(code_label 399 398 400 20 6 "" [2 uses])
(note 400 399 401 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 401 400 402 20 (parallel [
            (set (reg:DI 0 ax [453])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:50 221 {*adddi_1}
     (nil))
(insn 402 401 403 20 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2b1b5042b720 *.LC15>)) read_fdf.cpp:50 89 {*movdi_internal}
     (nil))
(insn 403 402 404 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [453])) read_fdf.cpp:50 89 {*movdi_internal}
     (nil))
(call_insn/i 404 403 405 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b1b500e0300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:50 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 405 404 407 20 (set (reg:SI 0 ax [orig:101 D.5725 ] [101])
        (reg:SI 0 ax)) read_fdf.cpp:50 90 {*movsi_internal}
     (nil))
(insn 407 405 408 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:101 D.5725 ] [101])
            (const_int 0 [0]))) read_fdf.cpp:50 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 408 407 409 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 406)
            (pc))) read_fdf.cpp:50 596 {*jcc_1}
     (nil)
 -> 406)
;;  succ:       8
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473
(code_label 409 408 410 21 5 "" [1 uses])
(note 410 409 411 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 411 410 412 21 (set (reg/f:DI 0 ax [454])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:99 89 {*movdi_internal}
     (nil))
(insn 412 411 795 21 (set (reg:SI 0 ax [orig:149 D.5725 ] [149])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [454])
                (const_int 300 [0x12c])) [0 procpar_info_43(D)->num_points+0 S4 A32])) read_fdf.cpp:99 90 {*movsi_internal}
     (nil))
(insn 795 412 413 21 (set (reg:SI 1 dx [455])
        (reg:SI 0 ax [orig:149 D.5725 ] [149])) read_fdf.cpp:99 90 {*movsi_internal}
     (nil))
(insn 413 795 414 21 (parallel [
            (set (reg:SI 1 dx [455])
                (lshiftrt:SI (reg:SI 1 dx [455])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:99 529 {*lshrsi3_1}
     (nil))
(insn 414 413 415 21 (parallel [
            (set (reg:SI 0 ax [456])
                (plus:SI (reg:SI 0 ax [orig:149 D.5725 ] [149])
                    (reg:SI 1 dx [455])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:99 220 {*addsi_1}
     (nil))
(insn 415 414 416 21 (parallel [
            (set (reg:SI 0 ax [457])
                (ashiftrt:SI (reg:SI 0 ax [456])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:99 530 {*ashrsi3_1}
     (nil))
(insn 416 415 417 21 (set (reg:SI 0 ax [orig:150 D.5725 ] [150])
        (reg:SI 0 ax [457])) read_fdf.cpp:99 90 {*movsi_internal}
     (nil))
(insn 417 416 418 21 (set (reg:DF 22 xmm1 [orig:151 D.5734 ] [151])
        (float:DF (reg:SI 0 ax [orig:150 D.5725 ] [150]))) read_fdf.cpp:99 201 {*floatsidf2_sse}
     (nil))
(insn 418 417 419 21 (set (reg/f:DI 0 ax [458])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:99 89 {*movdi_internal}
     (nil))
(insn 419 418 420 21 (set (reg:DF 23 xmm2 [orig:152 D.5734 ] [152])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [458])
                (const_int 360 [0x168])) [0 procpar_info_43(D)->span+0 S8 A64])) read_fdf.cpp:99 128 {*movdf_internal}
     (nil))
(insn 420 419 421 21 (set (reg/f:DI 0 ax [459])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:99 89 {*movdi_internal}
     (nil))
(insn 421 420 422 21 (set (reg:DF 21 xmm0 [orig:153 D.5734 ] [153])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [459])
                (const_int 304 [0x130])) [0 procpar_info_43(D)->main_frequency+0 S8 A64])) read_fdf.cpp:99 128 {*movdf_internal}
     (nil))
(insn 422 421 423 21 (set (reg:DF 21 xmm0 [orig:154 D.5734 ] [154])
        (mult:DF (reg:DF 21 xmm0 [orig:153 D.5734 ] [153])
            (reg:DF 23 xmm2 [orig:152 D.5734 ] [152]))) read_fdf.cpp:99 776 {*fop_df_comm_sse}
     (nil))
(insn 423 422 424 21 (set (reg:DF 23 xmm2 [460])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S8 A64])) read_fdf.cpp:99 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 424 423 798 21 (set (reg:DF 23 xmm2 [orig:155 D.5734 ] [155])
        (div:DF (reg:DF 23 xmm2 [orig:155 D.5734 ] [155])
            (reg:DF 21 xmm0 [orig:154 D.5734 ] [154]))) read_fdf.cpp:99 783 {*fop_df_1_sse}
     (nil))
(insn 798 424 425 21 (set (reg:DF 21 xmm0 [orig:155 D.5734 ] [155])
        (reg:DF 23 xmm2 [orig:155 D.5734 ] [155])) read_fdf.cpp:99 128 {*movdf_internal}
     (nil))
(insn 425 798 426 21 (set (reg:DF 21 xmm0 [orig:156 D.5734 ] [156])
        (mult:DF (reg:DF 21 xmm0 [orig:155 D.5734 ] [155])
            (reg:DF 22 xmm1 [orig:151 D.5734 ] [151]))) read_fdf.cpp:99 776 {*fop_df_comm_sse}
     (nil))
(insn 426 425 799 21 (set (reg:SF 25 xmm4 [orig:157 D.5735 ] [157])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:156 D.5734 ] [156]))) read_fdf.cpp:99 157 {*truncdfsf_fast_sse}
     (nil))
(insn 799 426 427 21 (set (reg:SF 0 ax [orig:157 D.5735 ] [157])
        (reg:SF 25 xmm4 [orig:157 D.5735 ] [157])) read_fdf.cpp:99 129 {*movsf_internal}
     (nil))
(insn 427 799 428 21 (set (reg/f:DI 1 dx [461])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:99 89 {*movdi_internal}
     (nil))
(insn 428 427 429 21 (set (mem/j:SF (reg/f:DI 1 dx [461]) [0 procpar_info_43(D)->acquision_time+0 S4 A64])
        (reg:SF 0 ax [orig:157 D.5735 ] [157])) read_fdf.cpp:99 129 {*movsf_internal}
     (nil))
(insn 429 428 430 21 (set (reg/f:DI 0 ax [462])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:100 89 {*movdi_internal}
     (nil))
(insn 430 429 431 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [462])
                (const_int 296 [0x128])) [0 procpar_info_43(D)->num_transients+0 S4 A64])
        (const_int 1 [0x1])) read_fdf.cpp:100 90 {*movsi_internal}
     (nil))
(insn 431 430 432 21 (set (reg/f:DI 1 dx [463])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:101 89 {*movdi_internal}
     (nil))
(insn 432 431 433 21 (set (reg:SF 0 ax [464])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S4 A32])) read_fdf.cpp:101 129 {*movsf_internal}
     (nil))
(insn 433 432 434 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [463])
                (const_int 320 [0x140])) [0 procpar_info_43(D)->te+0 S4 A64])
        (reg:SF 0 ax [464])) read_fdf.cpp:101 129 {*movsf_internal}
     (nil))
(insn 434 433 435 21 (set (reg/f:DI 1 dx [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:102 89 {*movdi_internal}
     (nil))
(insn 435 434 436 21 (set (reg:SF 0 ax [466])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S4 A32])) read_fdf.cpp:102 129 {*movsf_internal}
     (nil))
(insn 436 435 437 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [465])
                (const_int 324 [0x144])) [0 procpar_info_43(D)->tm+0 S4 A32])
        (reg:SF 0 ax [466])) read_fdf.cpp:102 129 {*movsf_internal}
     (nil))
(insn 437 436 438 21 (set (reg/f:DI 0 ax [467])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -760 [0xfffffffffffffd08])) [0 block_header+0 S8 A64])) read_fdf.cpp:103 89 {*movdi_internal}
     (nil))
(insn 438 437 439 21 (set (reg/f:DI 0 ax [orig:158 D.5739 ] [158])
        (mem/f:DI (reg/f:DI 0 ax [467]) [0 *block_header_88(D)+0 S8 A64])) read_fdf.cpp:103 89 {*movdi_internal}
     (nil))
(insn 439 438 440 21 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.5739 ] [159])
                (plus:DI (reg/f:DI 0 ax [orig:158 D.5739 ] [158])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:103 221 {*adddi_1}
     (nil))
(insn 440 439 441 21 (set (mem/j:HI (reg/f:DI 0 ax [orig:159 D.5739 ] [159]) [0 _90->scale.number+0 S2 A32])
        (const_int 1 [0x1])) read_fdf.cpp:103 92 {*movhi_internal}
     (nil))
(insn 441 440 442 21 (set (reg:SI 0 ax [468])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:105 90 {*movsi_internal}
     (nil))
(insn 442 441 443 21 (set (reg:DI 0 ax [orig:160 D.5726 ] [160])
        (sign_extend:DI (reg:SI 0 ax [468]))) read_fdf.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 443 442 444 21 (parallel [
            (set (reg:DI 1 dx [orig:161 D.5726 ] [161])
                (ashift:DI (reg:DI 0 ax [orig:160 D.5726 ] [160])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:105 497 {*ashldi3_1}
     (nil))
(insn 444 443 445 21 (set (reg/f:DI 0 ax [469])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:105 89 {*movdi_internal}
     (nil))
(insn 445 444 446 21 (parallel [
            (set (reg/f:DI 0 ax [orig:162 D.5736 ] [162])
                (plus:DI (reg/f:DI 0 ax [469])
                    (reg:DI 1 dx [orig:161 D.5726 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:105 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:161 D.5726 ] [161]))
        (nil)))
(insn 446 445 447 21 (set (reg/f:DI 0 ax [orig:163 D.5737 ] [163])
        (mem/f:DI (reg/f:DI 0 ax [orig:162 D.5736 ] [162]) [0 *_93+0 S8 A64])) read_fdf.cpp:105 89 {*movdi_internal}
     (nil))
(insn 447 446 448 21 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.5737 ] [164])
                (plus:DI (reg/f:DI 0 ax [orig:163 D.5737 ] [163])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:105 221 {*adddi_1}
     (nil))
(insn 448 447 449 21 (set (reg:SI 0 ax [470])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:164 D.5737 ] [164])
                (const_int 8 [0x8])) [0 _95->np.number+0 S4 A32])) read_fdf.cpp:105 90 {*movsi_internal}
     (nil))
(insn 449 448 450 21 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [470])) read_fdf.cpp:105 90 {*movsi_internal}
     (nil))
(insn 450 449 451 21 (set (reg/f:DI 0 ax [471])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 preprocess+0 S8 A64])) read_fdf.cpp:108 89 {*movdi_internal}
     (nil))
(insn 451 450 452 21 (set (reg:SI 1 dx [orig:165 D.5725 ] [165])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [471])
                (const_int 24 [0x18])) [0 preprocess_11(D)->data_zero_fill+0 S4 A32])) read_fdf.cpp:108 90 {*movsi_internal}
     (nil))
(insn 452 451 453 21 (set (reg:SI 0 ax [472])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:108 90 {*movsi_internal}
     (nil))
(insn 453 452 454 21 (set (reg:DI 0 ax [orig:166 D.5726 ] [166])
        (sign_extend:DI (reg:SI 0 ax [472]))) read_fdf.cpp:108 142 {*extendsidi2_rex64}
     (nil))
(insn 454 453 455 21 (parallel [
            (set (reg:DI 2 cx [orig:167 D.5726 ] [167])
                (ashift:DI (reg:DI 0 ax [orig:166 D.5726 ] [166])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:108 497 {*ashldi3_1}
     (nil))
(insn 455 454 456 21 (set (reg/f:DI 0 ax [473])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:108 89 {*movdi_internal}
     (nil))
(insn 456 455 457 21 (parallel [
            (set (reg/f:DI 0 ax [orig:168 D.5736 ] [168])
                (plus:DI (reg/f:DI 0 ax [473])
                    (reg:DI 2 cx [orig:167 D.5726 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:108 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:167 D.5726 ] [167]))
        (nil)))
(insn 457 456 458 21 (set (reg/f:DI 0 ax [orig:169 D.5737 ] [169])
        (mem/f:DI (reg/f:DI 0 ax [orig:168 D.5736 ] [168]) [0 *_100+0 S8 A64])) read_fdf.cpp:108 89 {*movdi_internal}
     (nil))
(insn 458 457 459 21 (set (reg:SI 0 ax [orig:170 D.5725 ] [170])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:169 D.5737 ] [169])
                (const_int 8 [0x8])) [0 _101->np.number+0 S4 A32])) read_fdf.cpp:108 90 {*movsi_internal}
     (nil))
(insn 459 458 460 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:165 D.5725 ] [165])
            (reg:SI 0 ax [orig:170 D.5725 ] [170]))) read_fdf.cpp:108 7 {*cmpsi_1}
     (nil))
(jump_insn 460 459 461 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 465)
            (pc))) read_fdf.cpp:108 596 {*jcc_1}
     (nil)
 -> 465)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 474 475
(note 461 460 462 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 462 461 463 22 (set (reg/f:DI 0 ax [474])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 preprocess+0 S8 A64])) read_fdf.cpp:109 89 {*movdi_internal}
     (nil))
(insn 463 462 464 22 (set (reg:SI 0 ax [475])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [474])
                (const_int 24 [0x18])) [0 preprocess_11(D)->data_zero_fill+0 S4 A32])) read_fdf.cpp:109 90 {*movsi_internal}
     (nil))
(insn 464 463 465 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [475])) read_fdf.cpp:109 90 {*movsi_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493
(code_label 465 464 466 23 13 "" [1 uses])
(note 466 465 467 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 467 466 468 23 (set (reg:SI 0 ax [476])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:111 90 {*movsi_internal}
     (nil))
(insn 468 467 469 23 (set (reg:DI 0 ax [orig:171 D.5726 ] [171])
        (sign_extend:DI (reg:SI 0 ax [476]))) read_fdf.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 469 468 470 23 (parallel [
            (set (reg:DI 1 dx [orig:172 D.5726 ] [172])
                (ashift:DI (reg:DI 0 ax [orig:171 D.5726 ] [171])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:111 497 {*ashldi3_1}
     (nil))
(insn 470 469 471 23 (set (reg/f:DI 0 ax [477])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -792 [0xfffffffffffffce8])) [0 out_data+0 S8 A64])) read_fdf.cpp:111 89 {*movdi_internal}
     (nil))
(insn 471 470 472 23 (parallel [
            (set (reg/f:DI 3 bx [orig:173 D.5740 ] [173])
                (plus:DI (reg:DI 1 dx [orig:172 D.5726 ] [172])
                    (reg/f:DI 0 ax [477])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:111 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -776 [0xfffffffffffffcf8])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:172 D.5726 ] [172]))
        (nil)))
(insn 472 471 473 23 (set (reg:SI 0 ax [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [0 out_data_size+0 S4 A32])) read_fdf.cpp:111 90 {*movsi_internal}
     (nil))
(insn 473 472 474 23 (set (reg:DI 0 ax [orig:174 D.5726 ] [174])
        (sign_extend:DI (reg:SI 0 ax [478]))) read_fdf.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 474 473 475 23 (parallel [
            (set (reg:DI 0 ax [orig:175 D.5726 ] [175])
                (ashift:DI (reg:DI 0 ax [orig:174 D.5726 ] [174])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:111 497 {*ashldi3_1}
     (nil))
(insn 475 474 476 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:175 D.5726 ] [175])) read_fdf.cpp:111 89 {*movdi_internal}
     (nil))
(call_insn 476 475 477 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b1b50116200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:111 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 477 476 478 23 (set (reg/f:DI 0 ax [479])
        (reg:DI 0 ax)) read_fdf.cpp:111 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [479])
        (nil)))
(insn 478 477 479 23 (set (reg/f:DI 0 ax [orig:176 D.5741 ] [176])
        (reg/f:DI 0 ax [479])) read_fdf.cpp:111 89 {*movdi_internal}
     (nil))
(insn 479 478 480 23 (set (mem/f:DI (reg/f:DI 3 bx [orig:173 D.5740 ] [173]) [0 *_107+0 S8 A64])
        (reg/f:DI 0 ax [orig:176 D.5741 ] [176])) read_fdf.cpp:111 89 {*movdi_internal}
     (nil))
(insn 480 479 481 23 (set (reg:SI 0 ax [480])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:112 90 {*movsi_internal}
     (nil))
(insn 481 480 482 23 (set (reg:DI 0 ax [orig:177 D.5726 ] [177])
        (sign_extend:DI (reg:SI 0 ax [480]))) read_fdf.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 482 481 483 23 (parallel [
            (set (reg:DI 1 dx [orig:178 D.5726 ] [178])
                (ashift:DI (reg:DI 0 ax [orig:177 D.5726 ] [177])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:112 497 {*ashldi3_1}
     (nil))
(insn 483 482 484 23 (set (reg/f:DI 0 ax [481])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -800 [0xfffffffffffffce0])) [0 scratch_data+0 S8 A64])) read_fdf.cpp:112 89 {*movdi_internal}
     (nil))
(insn 484 483 485 23 (parallel [
            (set (reg/f:DI 3 bx [orig:179 D.5740 ] [179])
                (plus:DI (reg:DI 1 dx [orig:178 D.5726 ] [178])
                    (reg/f:DI 0 ax [481])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:112 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -784 [0xfffffffffffffcf0])) [0 scratch_data+0 S8 A64])
            (reg:DI 1 dx [orig:178 D.5726 ] [178]))
        (nil)))
(insn 485 484 486 23 (set (reg:SI 0 ax [482])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [0 out_data_size+0 S4 A32])) read_fdf.cpp:112 90 {*movsi_internal}
     (nil))
(insn 486 485 487 23 (set (reg:DI 0 ax [orig:180 D.5726 ] [180])
        (sign_extend:DI (reg:SI 0 ax [482]))) read_fdf.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 487 486 488 23 (parallel [
            (set (reg:DI 0 ax [orig:181 D.5726 ] [181])
                (ashift:DI (reg:DI 0 ax [orig:180 D.5726 ] [180])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:112 497 {*ashldi3_1}
     (nil))
(insn 488 487 489 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:181 D.5726 ] [181])) read_fdf.cpp:112 89 {*movdi_internal}
     (nil))
(call_insn 489 488 490 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b1b50116200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:112 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 490 489 491 23 (set (reg/f:DI 0 ax [483])
        (reg:DI 0 ax)) read_fdf.cpp:112 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [483])
        (nil)))
(insn 491 490 492 23 (set (reg/f:DI 0 ax [orig:182 D.5741 ] [182])
        (reg/f:DI 0 ax [483])) read_fdf.cpp:112 89 {*movdi_internal}
     (nil))
(insn 492 491 493 23 (set (mem/f:DI (reg/f:DI 3 bx [orig:179 D.5740 ] [179]) [0 *_114+0 S8 A64])
        (reg/f:DI 0 ax [orig:182 D.5741 ] [182])) read_fdf.cpp:112 89 {*movdi_internal}
     (nil))
(insn 493 492 494 23 (set (reg:SI 0 ax [484])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:114 90 {*movsi_internal}
     (nil))
(insn 494 493 495 23 (set (reg:DI 0 ax [orig:183 D.5726 ] [183])
        (sign_extend:DI (reg:SI 0 ax [484]))) read_fdf.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 495 494 496 23 (parallel [
            (set (reg:DI 1 dx [orig:184 D.5726 ] [184])
                (ashift:DI (reg:DI 0 ax [orig:183 D.5726 ] [183])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:114 497 {*ashldi3_1}
     (nil))
(insn 496 495 497 23 (set (reg/f:DI 0 ax [485])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(insn 497 496 498 23 (parallel [
            (set (reg/f:DI 3 bx [orig:185 D.5742 ] [185])
                (plus:DI (reg:DI 1 dx [orig:184 D.5726 ] [184])
                    (reg/f:DI 0 ax [485])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:114 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:184 D.5726 ] [184]))
        (nil)))
(insn 498 497 499 23 (set (reg:SI 0 ax [486])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:114 90 {*movsi_internal}
     (nil))
(insn 499 498 500 23 (set (reg:DI 0 ax [orig:186 D.5726 ] [186])
        (sign_extend:DI (reg:SI 0 ax [486]))) read_fdf.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 500 499 501 23 (parallel [
            (set (reg:DI 1 dx [orig:187 D.5726 ] [187])
                (ashift:DI (reg:DI 0 ax [orig:186 D.5726 ] [186])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:114 497 {*ashldi3_1}
     (nil))
(insn 501 500 502 23 (set (reg/f:DI 0 ax [487])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(insn 502 501 503 23 (parallel [
            (set (reg/f:DI 0 ax [orig:188 D.5736 ] [188])
                (plus:DI (reg/f:DI 0 ax [487])
                    (reg:DI 1 dx [orig:187 D.5726 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:114 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:187 D.5726 ] [187]))
        (nil)))
(insn 503 502 504 23 (set (reg/f:DI 0 ax [orig:189 D.5737 ] [189])
        (mem/f:DI (reg/f:DI 0 ax [orig:188 D.5736 ] [188]) [0 *_124+0 S8 A64])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(insn 504 503 505 23 (set (reg:SI 0 ax [orig:190 D.5725 ] [190])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:189 D.5737 ] [189])
                (const_int 8 [0x8])) [0 _125->np.number+0 S4 A32])) read_fdf.cpp:114 90 {*movsi_internal}
     (nil))
(insn 505 504 506 23 (set (reg:DI 0 ax [orig:191 D.5726 ] [191])
        (sign_extend:DI (reg:SI 0 ax [orig:190 D.5725 ] [190]))) read_fdf.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 506 505 507 23 (parallel [
            (set (reg:DI 0 ax [orig:192 D.5726 ] [192])
                (ashift:DI (reg:DI 0 ax [orig:191 D.5726 ] [191])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:114 497 {*ashldi3_1}
     (nil))
(insn 507 506 508 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:192 D.5726 ] [192])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(call_insn 508 507 509 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b1b50116200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:114 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 509 508 510 23 (set (reg/f:DI 0 ax [488])
        (reg:DI 0 ax)) read_fdf.cpp:114 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [488])
        (nil)))
(insn 510 509 511 23 (set (reg/f:DI 0 ax [orig:193 D.5741 ] [193])
        (reg/f:DI 0 ax [488])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(insn 511 510 512 23 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:185 D.5742 ] [185]) [0 _121->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:193 D.5741 ] [193])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(insn 512 511 513 23 (set (reg:SI 0 ax [489])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:115 90 {*movsi_internal}
     (nil))
(insn 513 512 514 23 (set (reg:DI 0 ax [orig:194 D.5726 ] [194])
        (sign_extend:DI (reg:SI 0 ax [489]))) read_fdf.cpp:115 142 {*extendsidi2_rex64}
     (nil))
(insn 514 513 515 23 (parallel [
            (set (reg:DI 1 dx [orig:195 D.5726 ] [195])
                (ashift:DI (reg:DI 0 ax [orig:194 D.5726 ] [194])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:115 497 {*ashldi3_1}
     (nil))
(insn 515 514 516 23 (set (reg/f:DI 0 ax [490])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
(insn 516 515 517 23 (parallel [
            (set (reg/f:DI 3 bx [orig:196 D.5743 ] [196])
                (plus:DI (reg:DI 1 dx [orig:195 D.5726 ] [195])
                    (reg/f:DI 0 ax [490])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:115 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -752 [0xfffffffffffffd10])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:195 D.5726 ] [195]))
        (nil)))
(insn 517 516 518 23 (set (reg:SI 0 ax [491])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:115 90 {*movsi_internal}
     (nil))
(insn 518 517 519 23 (set (reg:DI 0 ax [orig:197 D.5726 ] [197])
        (sign_extend:DI (reg:SI 0 ax [491]))) read_fdf.cpp:115 142 {*extendsidi2_rex64}
     (nil))
(insn 519 518 520 23 (parallel [
            (set (reg:DI 1 dx [orig:198 D.5726 ] [198])
                (ashift:DI (reg:DI 0 ax [orig:197 D.5726 ] [197])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:115 497 {*ashldi3_1}
     (nil))
(insn 520 519 521 23 (set (reg/f:DI 0 ax [492])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
(insn 521 520 522 23 (parallel [
            (set (reg/f:DI 0 ax [orig:199 D.5736 ] [199])
                (plus:DI (reg/f:DI 0 ax [492])
                    (reg:DI 1 dx [orig:198 D.5726 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:115 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:198 D.5726 ] [198]))
        (nil)))
(insn 522 521 523 23 (set (reg/f:DI 0 ax [orig:200 D.5737 ] [200])
        (mem/f:DI (reg/f:DI 0 ax [orig:199 D.5736 ] [199]) [0 *_136+0 S8 A64])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
(insn 523 522 524 23 (set (reg:SI 0 ax [orig:201 D.5725 ] [201])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:200 D.5737 ] [200])
                (const_int 8 [0x8])) [0 _137->np.number+0 S4 A32])) read_fdf.cpp:115 90 {*movsi_internal}
     (nil))
(insn 524 523 525 23 (set (reg:DI 0 ax [orig:202 D.5726 ] [202])
        (sign_extend:DI (reg:SI 0 ax [orig:201 D.5725 ] [201]))) read_fdf.cpp:115 142 {*extendsidi2_rex64}
     (nil))
(insn 525 524 526 23 (parallel [
            (set (reg:DI 0 ax [orig:203 D.5726 ] [203])
                (ashift:DI (reg:DI 0 ax [orig:202 D.5726 ] [202])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:115 497 {*ashldi3_1}
     (nil))
(insn 526 525 527 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:203 D.5726 ] [203])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
(call_insn 527 526 528 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b1b50116200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:115 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 528 527 529 23 (set (reg/f:DI 0 ax [493])
        (reg:DI 0 ax)) read_fdf.cpp:115 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [493])
        (nil)))
(insn 529 528 530 23 (set (reg/f:DI 0 ax [orig:204 D.5741 ] [204])
        (reg/f:DI 0 ax [493])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
(insn 530 529 543 23 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:196 D.5743 ] [196]) [0 _133->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:204 D.5741 ] [204])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;;              25 (DFS_BACK)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 205 206 207 208 209 494 495
(code_label 543 530 531 24 14 "" [1 uses])
(note 531 543 532 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 532 531 533 24 (set (reg:SI 0 ax [494])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:120 90 {*movsi_internal}
     (nil))
(insn 533 532 534 24 (set (reg:DI 0 ax [orig:205 D.5726 ] [205])
        (sign_extend:DI (reg:SI 0 ax [494]))) read_fdf.cpp:120 142 {*extendsidi2_rex64}
     (nil))
(insn 534 533 535 24 (parallel [
            (set (reg:DI 1 dx [orig:206 D.5726 ] [206])
                (ashift:DI (reg:DI 0 ax [orig:205 D.5726 ] [205])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:120 497 {*ashldi3_1}
     (nil))
(insn 535 534 536 24 (set (reg/f:DI 0 ax [495])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:120 89 {*movdi_internal}
     (nil))
(insn 536 535 537 24 (parallel [
            (set (reg/f:DI 0 ax [orig:207 D.5728 ] [207])
                (plus:DI (reg/f:DI 0 ax [495])
                    (reg:DI 1 dx [orig:206 D.5726 ] [206])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:120 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:206 D.5726 ] [206]))
        (nil)))
(insn 537 536 538 24 (set (reg/f:DI 0 ax [orig:208 D.5730 ] [208])
        (mem/f:DI (reg/f:DI 0 ax [orig:207 D.5728 ] [207]) [0 *_144+0 S8 A64])) read_fdf.cpp:120 89 {*movdi_internal}
     (nil))
(insn 538 537 539 24 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:208 D.5730 ] [208])) read_fdf.cpp:120 89 {*movdi_internal}
     (nil))
(call_insn 539 538 540 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x2b1b50299200 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:120 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 540 539 541 24 (set (reg:SI 0 ax [orig:209 D.5725 ] [209])
        (reg:SI 0 ax)) read_fdf.cpp:120 90 {*movsi_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 209

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 209
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 209
;; lr  def 	 17 [flags]
(note 541 540 542 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 542 541 544 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -684 [0xfffffffffffffd54])) [0 ch+0 S4 A32])
        (reg:SI 0 ax [orig:209 D.5725 ] [209])) read_fdf.cpp:120 90 {*movsi_internal}
     (nil))
(insn 544 542 545 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -684 [0xfffffffffffffd54])) [0 ch+0 S4 A32])
            (const_int 0 [0]))) read_fdf.cpp:119 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 545 544 546 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 543)
            (pc))) read_fdf.cpp:119 596 {*jcc_1}
     (nil)
 -> 543)
;;  succ:       24 (DFS_BACK)
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 496 497 498 499 500 501 502 503 504 505
(note 546 545 547 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 547 546 548 26 (set (reg:SI 0 ax [496])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:126 90 {*movsi_internal}
     (nil))
(insn 548 547 549 26 (set (reg:DI 0 ax [orig:210 D.5726 ] [210])
        (sign_extend:DI (reg:SI 0 ax [496]))) read_fdf.cpp:126 142 {*extendsidi2_rex64}
     (nil))
(insn 549 548 550 26 (parallel [
            (set (reg:DI 1 dx [orig:211 D.5726 ] [211])
                (ashift:DI (reg:DI 0 ax [orig:210 D.5726 ] [210])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:126 497 {*ashldi3_1}
     (nil))
(insn 550 549 551 26 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 551 550 552 26 (parallel [
            (set (reg/f:DI 0 ax [orig:212 D.5728 ] [212])
                (plus:DI (reg/f:DI 0 ax [497])
                    (reg:DI 1 dx [orig:211 D.5726 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:126 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:211 D.5726 ] [211]))
        (nil)))
(insn 552 551 553 26 (set (reg/f:DI 1 dx [orig:213 D.5730 ] [213])
        (mem/f:DI (reg/f:DI 0 ax [orig:212 D.5728 ] [212]) [0 *_150+0 S8 A64])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 553 552 554 26 (set (reg:SI 0 ax [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:125 90 {*movsi_internal}
     (nil))
(insn 554 553 555 26 (set (reg:DI 0 ax [orig:214 D.5726 ] [214])
        (sign_extend:DI (reg:SI 0 ax [498]))) read_fdf.cpp:125 142 {*extendsidi2_rex64}
     (nil))
(insn 555 554 556 26 (parallel [
            (set (reg:DI 2 cx [orig:215 D.5726 ] [215])
                (ashift:DI (reg:DI 0 ax [orig:214 D.5726 ] [214])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:125 497 {*ashldi3_1}
     (nil))
(insn 556 555 557 26 (set (reg/f:DI 0 ax [499])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:125 89 {*movdi_internal}
     (nil))
(insn 557 556 558 26 (parallel [
            (set (reg/f:DI 0 ax [orig:216 D.5736 ] [216])
                (plus:DI (reg/f:DI 0 ax [499])
                    (reg:DI 2 cx [orig:215 D.5726 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:125 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:215 D.5726 ] [215]))
        (nil)))
(insn 558 557 559 26 (set (reg/f:DI 0 ax [orig:217 D.5737 ] [217])
        (mem/f:DI (reg/f:DI 0 ax [orig:216 D.5736 ] [216]) [0 *_154+0 S8 A64])) read_fdf.cpp:125 89 {*movdi_internal}
     (nil))
(insn 559 558 560 26 (set (reg:SI 2 cx [orig:218 D.5725 ] [218])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:217 D.5737 ] [217])
                (const_int 8 [0x8])) [0 _155->np.number+0 S4 A32])) read_fdf.cpp:125 90 {*movsi_internal}
     (nil))
(insn 560 559 561 26 (set (reg:SI 0 ax [500])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:126 90 {*movsi_internal}
     (nil))
(insn 561 560 562 26 (set (reg:DI 0 ax [orig:219 D.5726 ] [219])
        (sign_extend:DI (reg:SI 0 ax [500]))) read_fdf.cpp:126 142 {*extendsidi2_rex64}
     (nil))
(insn 562 561 563 26 (parallel [
            (set (reg:DI 4 si [orig:220 D.5726 ] [220])
                (ashift:DI (reg:DI 0 ax [orig:219 D.5726 ] [219])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:126 497 {*ashldi3_1}
     (nil))
(insn 563 562 564 26 (set (reg/f:DI 0 ax [501])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 564 563 565 26 (parallel [
            (set (reg/f:DI 0 ax [orig:221 D.5736 ] [221])
                (plus:DI (reg/f:DI 0 ax [501])
                    (reg:DI 4 si [orig:220 D.5726 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:126 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 4 si [orig:220 D.5726 ] [220]))
        (nil)))
(insn 565 564 566 26 (set (reg/f:DI 0 ax [orig:222 D.5737 ] [222])
        (mem/f:DI (reg/f:DI 0 ax [orig:221 D.5736 ] [221]) [0 *_159+0 S8 A64])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 566 565 567 26 (set (reg:SI 0 ax [orig:223 D.5725 ] [223])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:222 D.5737 ] [222])
                (const_int 12 [0xc])) [0 _160->ebytes.number+0 S4 A32])) read_fdf.cpp:125 90 {*movsi_internal}
     (nil))
(insn 567 566 568 26 (parallel [
            (set (reg:SI 0 ax [orig:224 D.5725 ] [224])
                (mult:SI (reg:SI 0 ax [orig:223 D.5725 ] [223])
                    (reg:SI 2 cx [orig:218 D.5725 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:125 306 {*mulsi3_1}
     (nil))
(insn 568 567 569 26 (set (reg:DI 4 si [orig:225 D.5726 ] [225])
        (sign_extend:DI (reg:SI 0 ax [orig:224 D.5725 ] [224]))) read_fdf.cpp:126 142 {*extendsidi2_rex64}
     (nil))
(insn 569 568 570 26 (set (reg:SI 0 ax [502])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:125 90 {*movsi_internal}
     (nil))
(insn 570 569 571 26 (set (reg:DI 0 ax [orig:226 D.5726 ] [226])
        (sign_extend:DI (reg:SI 0 ax [502]))) read_fdf.cpp:125 142 {*extendsidi2_rex64}
     (nil))
(insn 571 570 572 26 (parallel [
            (set (reg:DI 2 cx [orig:227 D.5726 ] [227])
                (ashift:DI (reg:DI 0 ax [orig:226 D.5726 ] [226])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:125 497 {*ashldi3_1}
     (nil))
(insn 572 571 573 26 (set (reg/f:DI 0 ax [503])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:125 89 {*movdi_internal}
     (nil))
(insn 573 572 574 26 (parallel [
            (set (reg/f:DI 0 ax [orig:228 D.5742 ] [228])
                (plus:DI (reg/f:DI 0 ax [503])
                    (reg:DI 2 cx [orig:227 D.5726 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:125 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:227 D.5726 ] [227]))
        (nil)))
(insn 574 573 575 26 (set (reg/f:DI 0 ax [orig:229 D.5744 ] [229])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:228 D.5742 ] [228]) [0 _166->fl+0 S8 A64])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 575 574 576 26 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:213 D.5730 ] [213])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 576 575 578 26 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 578 576 579 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:229 D.5744 ] [229])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(call_insn 579 578 580 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b1b502ae900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:126 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 580 579 581 26 (set (reg:SI 0 ax [504])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:132 90 {*movsi_internal}
     (nil))
(insn 581 580 582 26 (set (reg:DI 0 ax [orig:230 D.5726 ] [230])
        (sign_extend:DI (reg:SI 0 ax [504]))) read_fdf.cpp:132 142 {*extendsidi2_rex64}
     (nil))
(insn 582 581 583 26 (parallel [
            (set (reg:DI 1 dx [orig:231 D.5726 ] [231])
                (ashift:DI (reg:DI 0 ax [orig:230 D.5726 ] [230])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:132 497 {*ashldi3_1}
     (nil))
(insn 583 582 584 26 (set (reg/f:DI 0 ax [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:132 89 {*movdi_internal}
     (nil))
(insn 584 583 585 26 (parallel [
            (set (reg/f:DI 0 ax [orig:232 D.5736 ] [232])
                (plus:DI (reg/f:DI 0 ax [505])
                    (reg:DI 1 dx [orig:231 D.5726 ] [231])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:132 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:231 D.5726 ] [231]))
        (nil)))
(insn 585 584 586 26 (set (reg/f:DI 0 ax [orig:233 D.5737 ] [233])
        (mem/f:DI (reg/f:DI 0 ax [orig:232 D.5736 ] [232]) [0 *_170+0 S8 A64])) read_fdf.cpp:132 89 {*movdi_internal}
     (nil))
(insn 586 585 587 26 (parallel [
            (set (reg/f:DI 0 ax [orig:234 D.5737 ] [234])
                (plus:DI (reg/f:DI 0 ax [orig:233 D.5737 ] [233])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:132 221 {*adddi_1}
     (nil))
(insn 587 586 588 26 (set (reg:SI 0 ax [orig:235 D.5725 ] [235])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:234 D.5737 ] [234])
                (const_int 12 [0xc])) [0 _172->ebytes.number+0 S4 A32])) read_fdf.cpp:132 90 {*movsi_internal}
     (nil))
(insn 588 587 589 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:235 D.5725 ] [235])
            (const_int 2 [0x2]))) read_fdf.cpp:132 7 {*cmpsi_1}
     (nil))
(jump_insn 589 588 590 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 632)
            (pc))) read_fdf.cpp:132 596 {*jcc_1}
     (nil)
 -> 632)
;;  succ:       27 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 236 237 238 239 240 506 507 508
(note 590 589 591 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 591 590 592 27 (set (reg:SI 0 ax [506])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:133 90 {*movsi_internal}
     (nil))
(insn 592 591 593 27 (set (reg:DI 0 ax [orig:236 D.5726 ] [236])
        (sign_extend:DI (reg:SI 0 ax [506]))) read_fdf.cpp:133 142 {*extendsidi2_rex64}
     (nil))
(insn 593 592 594 27 (parallel [
            (set (reg:DI 1 dx [orig:237 D.5726 ] [237])
                (ashift:DI (reg:DI 0 ax [orig:236 D.5726 ] [236])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:133 497 {*ashldi3_1}
     (nil))
(insn 594 593 595 27 (set (reg/f:DI 0 ax [507])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:133 89 {*movdi_internal}
     (nil))
(insn 595 594 596 27 (parallel [
            (set (reg/f:DI 0 ax [orig:238 D.5736 ] [238])
                (plus:DI (reg/f:DI 0 ax [507])
                    (reg:DI 1 dx [orig:237 D.5726 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:133 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:237 D.5726 ] [237]))
        (nil)))
(insn 596 595 597 27 (set (reg/f:DI 0 ax [orig:239 D.5737 ] [239])
        (mem/f:DI (reg/f:DI 0 ax [orig:238 D.5736 ] [238]) [0 *_176+0 S8 A64])) read_fdf.cpp:133 89 {*movdi_internal}
     (nil))
(insn 597 596 598 27 (set (reg:SI 0 ax [orig:240 D.5725 ] [240])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:239 D.5737 ] [239])
                (const_int 8 [0x8])) [0 _177->np.number+0 S4 A32])) read_fdf.cpp:133 90 {*movsi_internal}
     (nil))
(insn 598 597 599 27 (parallel [
            (set (reg:SI 0 ax [508])
                (plus:SI (reg:SI 0 ax [orig:240 D.5725 ] [240])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:133 220 {*addsi_1}
     (nil))
(insn 599 598 775 27 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
        (reg:SI 0 ax [508])) read_fdf.cpp:133 90 {*movsi_internal}
     (nil))
(jump_insn 775 599 776 27 (set (pc)
        (label_ref 627)) read_fdf.cpp:133 636 {jump}
     (nil)
 -> 627)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 776 775 629)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 509 510 511 512 513 514
(code_label 629 776 602 28 17 "" [1 uses])
(note 602 629 603 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 603 602 604 28 (set (reg:SI 0 ax [509])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:134 90 {*movsi_internal}
     (nil))
(insn 604 603 605 28 (set (reg:DI 0 ax [orig:241 D.5726 ] [241])
        (sign_extend:DI (reg:SI 0 ax [509]))) read_fdf.cpp:134 142 {*extendsidi2_rex64}
     (nil))
(insn 605 604 606 28 (parallel [
            (set (reg:DI 1 dx [orig:242 D.5726 ] [242])
                (ashift:DI (reg:DI 0 ax [orig:241 D.5726 ] [241])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 497 {*ashldi3_1}
     (nil))
(insn 606 605 607 28 (set (reg/f:DI 0 ax [510])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:134 89 {*movdi_internal}
     (nil))
(insn 607 606 608 28 (parallel [
            (set (reg/f:DI 0 ax [orig:243 D.5742 ] [243])
                (plus:DI (reg/f:DI 0 ax [510])
                    (reg:DI 1 dx [orig:242 D.5726 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:242 D.5726 ] [242]))
        (nil)))
(insn 608 607 609 28 (set (reg/f:DI 0 ax [orig:244 D.5745 ] [244])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:243 D.5742 ] [243]) [0 _182->lo+0 S8 A64])) read_fdf.cpp:134 89 {*movdi_internal}
     (nil))
(insn 609 608 610 28 (set (reg:SI 1 dx [511])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:134 90 {*movsi_internal}
     (nil))
(insn 610 609 611 28 (set (reg:DI 1 dx [orig:245 D.5726 ] [245])
        (sign_extend:DI (reg:SI 1 dx [511]))) read_fdf.cpp:134 142 {*extendsidi2_rex64}
     (nil))
(insn 611 610 612 28 (parallel [
            (set (reg:DI 1 dx [orig:246 D.5726 ] [246])
                (ashift:DI (reg:DI 1 dx [orig:245 D.5726 ] [245])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 497 {*ashldi3_1}
     (nil))
(insn 612 611 613 28 (parallel [
            (set (reg/f:DI 1 dx [orig:247 D.5745 ] [247])
                (plus:DI (reg:DI 1 dx [orig:246 D.5726 ] [246])
                    (reg/f:DI 0 ax [orig:244 D.5745 ] [244])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 221 {*adddi_1}
     (nil))
(insn 613 612 614 28 (set (reg:SI 0 ax [512])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:134 90 {*movsi_internal}
     (nil))
(insn 614 613 615 28 (set (reg:DI 0 ax [orig:248 D.5726 ] [248])
        (sign_extend:DI (reg:SI 0 ax [512]))) read_fdf.cpp:134 142 {*extendsidi2_rex64}
     (nil))
(insn 615 614 616 28 (parallel [
            (set (reg:DI 2 cx [orig:249 D.5726 ] [249])
                (ashift:DI (reg:DI 0 ax [orig:248 D.5726 ] [248])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 497 {*ashldi3_1}
     (nil))
(insn 616 615 617 28 (set (reg/f:DI 0 ax [513])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:134 89 {*movdi_internal}
     (nil))
(insn 617 616 618 28 (parallel [
            (set (reg/f:DI 0 ax [orig:250 D.5742 ] [250])
                (plus:DI (reg/f:DI 0 ax [513])
                    (reg:DI 2 cx [orig:249 D.5726 ] [249])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:249 D.5726 ] [249]))
        (nil)))
(insn 618 617 619 28 (set (reg/f:DI 0 ax [orig:251 D.5746 ] [251])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:250 D.5742 ] [250]) [0 _189->sh+0 S8 A64])) read_fdf.cpp:134 89 {*movdi_internal}
     (nil))
(insn 619 618 620 28 (set (reg:SI 2 cx [514])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:134 90 {*movsi_internal}
     (nil))
(insn 620 619 621 28 (set (reg:DI 2 cx [orig:252 D.5726 ] [252])
        (sign_extend:DI (reg:SI 2 cx [514]))) read_fdf.cpp:134 142 {*extendsidi2_rex64}
     (nil))
(insn 621 620 622 28 (parallel [
            (set (reg:DI 2 cx [orig:253 D.5726 ] [253])
                (ashift:DI (reg:DI 2 cx [orig:252 D.5726 ] [252])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 497 {*ashldi3_1}
     (nil))
(insn 622 621 623 28 (parallel [
            (set (reg/f:DI 0 ax [orig:254 D.5746 ] [254])
                (plus:DI (reg/f:DI 0 ax [orig:251 D.5746 ] [251])
                    (reg:DI 2 cx [orig:253 D.5726 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 221 {*adddi_1}
     (nil))
(insn 623 622 624 28 (set (reg:HI 0 ax [orig:255 D.5747 ] [255])
        (mem:HI (reg/f:DI 0 ax [orig:254 D.5746 ] [254]) [0 *_193+0 S2 A16])) read_fdf.cpp:134 92 {*movhi_internal}
     (nil))
(insn 624 623 625 28 (set (reg:DI 0 ax [orig:256 D.5748 ] [256])
        (sign_extend:DI (reg:HI 0 ax [orig:255 D.5747 ] [255]))) read_fdf.cpp:134 145 {extendhidi2}
     (nil))
(insn 625 624 626 28 (set (mem:DI (reg/f:DI 1 dx [orig:247 D.5745 ] [247]) [0 *_186+0 S8 A64])
        (reg:DI 0 ax [orig:256 D.5748 ] [256])) read_fdf.cpp:134 89 {*movdi_internal}
     (nil))
(insn 626 625 627 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:133 220 {*addsi_1}
     (nil))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              27 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 627 626 628 29 16 "" [1 uses])
(note 628 627 630 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 630 628 631 29 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
            (const_int 0 [0]))) read_fdf.cpp:133 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 631 630 632 29 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 629)
            (pc))) read_fdf.cpp:133 596 {*jcc_1}
     (nil)
 -> 629)
;;  succ:       28
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;;              29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 632 631 633 30 15 "" [1 uses])
(note 633 632 634 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 634 633 777 30 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
        (const_int 0 [0])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(jump_insn 777 634 778 30 (set (pc)
        (label_ref 725)) read_fdf.cpp:138 636 {jump}
     (nil)
 -> 725)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 778 777 739)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538
(code_label 739 778 637 31 19 "" [1 uses])
(note 637 739 638 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 638 637 639 31 (set (reg:SI 0 ax [515])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:139 90 {*movsi_internal}
     (nil))
(insn 639 638 640 31 (set (reg:DI 0 ax [orig:267 D.5726 ] [267])
        (sign_extend:DI (reg:SI 0 ax [515]))) read_fdf.cpp:139 142 {*extendsidi2_rex64}
     (nil))
(insn 640 639 641 31 (parallel [
            (set (reg:DI 1 dx [orig:268 D.5726 ] [268])
                (ashift:DI (reg:DI 0 ax [orig:267 D.5726 ] [267])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 497 {*ashldi3_1}
     (nil))
(insn 641 640 642 31 (set (reg/f:DI 0 ax [516])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])) read_fdf.cpp:139 89 {*movdi_internal}
     (nil))
(insn 642 641 643 31 (parallel [
            (set (reg/f:DI 0 ax [orig:269 D.5743 ] [269])
                (plus:DI (reg/f:DI 0 ax [516])
                    (reg:DI 1 dx [orig:268 D.5726 ] [268])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -752 [0xfffffffffffffd10])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:268 D.5726 ] [268]))
        (nil)))
(insn 643 642 644 31 (set (reg/f:DI 1 dx [orig:270 D.5731 ] [270])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:269 D.5743 ] [269]) [0 _210->character+0 S8 A64])) read_fdf.cpp:139 89 {*movdi_internal}
     (nil))
(insn 644 643 645 31 (set (reg:SI 0 ax [517])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:139 90 {*movsi_internal}
     (nil))
(insn 645 644 646 31 (set (reg:DI 0 ax [orig:271 D.5749 ] [271])
        (sign_extend:DI (reg:SI 0 ax [517]))) read_fdf.cpp:139 142 {*extendsidi2_rex64}
     (nil))
(insn 646 645 647 31 (parallel [
            (set (reg/f:DI 1 dx [orig:272 D.5731 ] [272])
                (plus:DI (reg/f:DI 1 dx [orig:270 D.5731 ] [270])
                    (reg:DI 0 ax [orig:271 D.5749 ] [271])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 221 {*adddi_1}
     (nil))
(insn 647 646 648 31 (set (reg:SI 0 ax [518])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:139 90 {*movsi_internal}
     (nil))
(insn 648 647 649 31 (set (reg:DI 0 ax [orig:273 D.5726 ] [273])
        (sign_extend:DI (reg:SI 0 ax [518]))) read_fdf.cpp:139 142 {*extendsidi2_rex64}
     (nil))
(insn 649 648 650 31 (parallel [
            (set (reg:DI 2 cx [orig:274 D.5726 ] [274])
                (ashift:DI (reg:DI 0 ax [orig:273 D.5726 ] [273])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 497 {*ashldi3_1}
     (nil))
(insn 650 649 651 31 (set (reg/f:DI 0 ax [519])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:139 89 {*movdi_internal}
     (nil))
(insn 651 650 652 31 (parallel [
            (set (reg/f:DI 0 ax [orig:275 D.5742 ] [275])
                (plus:DI (reg/f:DI 0 ax [519])
                    (reg:DI 2 cx [orig:274 D.5726 ] [274])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:274 D.5726 ] [274]))
        (nil)))
(insn 652 651 653 31 (set (reg/f:DI 2 cx [orig:276 D.5731 ] [276])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:275 D.5742 ] [275]) [0 _216->character+0 S8 A64])) read_fdf.cpp:139 89 {*movdi_internal}
     (nil))
(insn 653 652 654 31 (set (reg:SI 0 ax [520])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:139 90 {*movsi_internal}
     (nil))
(insn 654 653 655 31 (set (reg:DI 0 ax [orig:277 D.5749 ] [277])
        (sign_extend:DI (reg:SI 0 ax [520]))) read_fdf.cpp:139 142 {*extendsidi2_rex64}
     (nil))
(insn 655 654 656 31 (parallel [
            (set (reg/f:DI 0 ax [orig:278 D.5731 ] [278])
                (plus:DI (reg:DI 0 ax [orig:277 D.5749 ] [277])
                    (reg/f:DI 2 cx [orig:276 D.5731 ] [276])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 221 {*adddi_1}
     (nil))
(insn 656 655 657 31 (set (reg:QI 0 ax [orig:279 D.5733 ] [279])
        (mem:QI (reg/f:DI 0 ax [orig:278 D.5731 ] [278]) [0 *_219+0 S1 A8])) read_fdf.cpp:139 93 {*movqi_internal}
     (nil))
(insn 657 656 658 31 (set (mem:QI (reg/f:DI 1 dx [orig:272 D.5731 ] [272]) [0 *_213+0 S1 A8])
        (reg:QI 0 ax [orig:279 D.5733 ] [279])) read_fdf.cpp:139 93 {*movqi_internal}
     (nil))
(insn 658 657 659 31 (set (reg:SI 0 ax [521])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:140 90 {*movsi_internal}
     (nil))
(insn 659 658 660 31 (set (reg:DI 0 ax [orig:280 D.5726 ] [280])
        (sign_extend:DI (reg:SI 0 ax [521]))) read_fdf.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 660 659 661 31 (parallel [
            (set (reg:DI 1 dx [orig:281 D.5726 ] [281])
                (ashift:DI (reg:DI 0 ax [orig:280 D.5726 ] [280])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 497 {*ashldi3_1}
     (nil))
(insn 661 660 662 31 (set (reg/f:DI 0 ax [522])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])) read_fdf.cpp:140 89 {*movdi_internal}
     (nil))
(insn 662 661 663 31 (parallel [
            (set (reg/f:DI 0 ax [orig:282 D.5743 ] [282])
                (plus:DI (reg/f:DI 0 ax [522])
                    (reg:DI 1 dx [orig:281 D.5726 ] [281])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -752 [0xfffffffffffffd10])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:281 D.5726 ] [281]))
        (nil)))
(insn 663 662 664 31 (set (reg/f:DI 0 ax [orig:283 D.5731 ] [283])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:282 D.5743 ] [282]) [0 _223->character+0 S8 A64])) read_fdf.cpp:140 89 {*movdi_internal}
     (nil))
(insn 664 663 665 31 (set (reg:SI 1 dx [523])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:140 90 {*movsi_internal}
     (nil))
(insn 665 664 666 31 (set (reg:DI 1 dx [orig:284 D.5749 ] [284])
        (sign_extend:DI (reg:SI 1 dx [523]))) read_fdf.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 666 665 667 31 (parallel [
            (set (reg:DI 1 dx [orig:285 D.5749 ] [285])
                (plus:DI (reg:DI 1 dx [orig:284 D.5749 ] [284])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 221 {*adddi_1}
     (nil))
(insn 667 666 668 31 (parallel [
            (set (reg/f:DI 1 dx [orig:286 D.5731 ] [286])
                (plus:DI (reg:DI 1 dx [orig:285 D.5749 ] [285])
                    (reg/f:DI 0 ax [orig:283 D.5731 ] [283])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 221 {*adddi_1}
     (nil))
(insn 668 667 669 31 (set (reg:SI 0 ax [524])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:140 90 {*movsi_internal}
     (nil))
(insn 669 668 670 31 (set (reg:DI 0 ax [orig:287 D.5726 ] [287])
        (sign_extend:DI (reg:SI 0 ax [524]))) read_fdf.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 670 669 671 31 (parallel [
            (set (reg:DI 2 cx [orig:288 D.5726 ] [288])
                (ashift:DI (reg:DI 0 ax [orig:287 D.5726 ] [287])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 497 {*ashldi3_1}
     (nil))
(insn 671 670 672 31 (set (reg/f:DI 0 ax [525])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:140 89 {*movdi_internal}
     (nil))
(insn 672 671 673 31 (parallel [
            (set (reg/f:DI 0 ax [orig:289 D.5742 ] [289])
                (plus:DI (reg/f:DI 0 ax [525])
                    (reg:DI 2 cx [orig:288 D.5726 ] [288])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:288 D.5726 ] [288]))
        (nil)))
(insn 673 672 674 31 (set (reg/f:DI 0 ax [orig:290 D.5731 ] [290])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:289 D.5742 ] [289]) [0 _230->character+0 S8 A64])) read_fdf.cpp:140 89 {*movdi_internal}
     (nil))
(insn 674 673 675 31 (set (reg:SI 2 cx [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:140 90 {*movsi_internal}
     (nil))
(insn 675 674 676 31 (set (reg:DI 2 cx [orig:291 D.5749 ] [291])
        (sign_extend:DI (reg:SI 2 cx [526]))) read_fdf.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 676 675 677 31 (parallel [
            (set (reg:DI 2 cx [orig:292 D.5749 ] [292])
                (plus:DI (reg:DI 2 cx [orig:291 D.5749 ] [291])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 221 {*adddi_1}
     (nil))
(insn 677 676 678 31 (parallel [
            (set (reg/f:DI 0 ax [orig:293 D.5731 ] [293])
                (plus:DI (reg/f:DI 0 ax [orig:290 D.5731 ] [290])
                    (reg:DI 2 cx [orig:292 D.5749 ] [292])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 221 {*adddi_1}
     (nil))
(insn 678 677 679 31 (set (reg:QI 0 ax [orig:294 D.5733 ] [294])
        (mem:QI (reg/f:DI 0 ax [orig:293 D.5731 ] [293]) [0 *_234+0 S1 A8])) read_fdf.cpp:140 93 {*movqi_internal}
     (nil))
(insn 679 678 680 31 (set (mem:QI (reg/f:DI 1 dx [orig:286 D.5731 ] [286]) [0 *_227+0 S1 A8])
        (reg:QI 0 ax [orig:294 D.5733 ] [294])) read_fdf.cpp:140 93 {*movqi_internal}
     (nil))
(insn 680 679 681 31 (set (reg:SI 0 ax [527])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:141 90 {*movsi_internal}
     (nil))
(insn 681 680 682 31 (set (reg:DI 0 ax [orig:295 D.5726 ] [295])
        (sign_extend:DI (reg:SI 0 ax [527]))) read_fdf.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 682 681 683 31 (parallel [
            (set (reg:DI 1 dx [orig:296 D.5726 ] [296])
                (ashift:DI (reg:DI 0 ax [orig:295 D.5726 ] [295])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 497 {*ashldi3_1}
     (nil))
(insn 683 682 684 31 (set (reg/f:DI 0 ax [528])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])) read_fdf.cpp:141 89 {*movdi_internal}
     (nil))
(insn 684 683 685 31 (parallel [
            (set (reg/f:DI 0 ax [orig:297 D.5743 ] [297])
                (plus:DI (reg/f:DI 0 ax [528])
                    (reg:DI 1 dx [orig:296 D.5726 ] [296])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -752 [0xfffffffffffffd10])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:296 D.5726 ] [296]))
        (nil)))
(insn 685 684 686 31 (set (reg/f:DI 0 ax [orig:298 D.5731 ] [298])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:297 D.5743 ] [297]) [0 _238->character+0 S8 A64])) read_fdf.cpp:141 89 {*movdi_internal}
     (nil))
(insn 686 685 687 31 (set (reg:SI 1 dx [529])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:141 90 {*movsi_internal}
     (nil))
(insn 687 686 688 31 (set (reg:DI 1 dx [orig:299 D.5749 ] [299])
        (sign_extend:DI (reg:SI 1 dx [529]))) read_fdf.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 688 687 689 31 (parallel [
            (set (reg:DI 1 dx [orig:300 D.5749 ] [300])
                (plus:DI (reg:DI 1 dx [orig:299 D.5749 ] [299])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 221 {*adddi_1}
     (nil))
(insn 689 688 690 31 (parallel [
            (set (reg/f:DI 1 dx [orig:301 D.5731 ] [301])
                (plus:DI (reg:DI 1 dx [orig:300 D.5749 ] [300])
                    (reg/f:DI 0 ax [orig:298 D.5731 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 221 {*adddi_1}
     (nil))
(insn 690 689 691 31 (set (reg:SI 0 ax [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:141 90 {*movsi_internal}
     (nil))
(insn 691 690 692 31 (set (reg:DI 0 ax [orig:302 D.5726 ] [302])
        (sign_extend:DI (reg:SI 0 ax [530]))) read_fdf.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 692 691 693 31 (parallel [
            (set (reg:DI 2 cx [orig:303 D.5726 ] [303])
                (ashift:DI (reg:DI 0 ax [orig:302 D.5726 ] [302])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 497 {*ashldi3_1}
     (nil))
(insn 693 692 694 31 (set (reg/f:DI 0 ax [531])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:141 89 {*movdi_internal}
     (nil))
(insn 694 693 695 31 (parallel [
            (set (reg/f:DI 0 ax [orig:304 D.5742 ] [304])
                (plus:DI (reg/f:DI 0 ax [531])
                    (reg:DI 2 cx [orig:303 D.5726 ] [303])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:303 D.5726 ] [303]))
        (nil)))
(insn 695 694 696 31 (set (reg/f:DI 0 ax [orig:305 D.5731 ] [305])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:304 D.5742 ] [304]) [0 _245->character+0 S8 A64])) read_fdf.cpp:141 89 {*movdi_internal}
     (nil))
(insn 696 695 697 31 (set (reg:SI 2 cx [532])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:141 90 {*movsi_internal}
     (nil))
(insn 697 696 698 31 (set (reg:DI 2 cx [orig:306 D.5749 ] [306])
        (sign_extend:DI (reg:SI 2 cx [532]))) read_fdf.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 698 697 699 31 (parallel [
            (set (reg:DI 2 cx [orig:307 D.5749 ] [307])
                (plus:DI (reg:DI 2 cx [orig:306 D.5749 ] [306])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 221 {*adddi_1}
     (nil))
(insn 699 698 700 31 (parallel [
            (set (reg/f:DI 0 ax [orig:308 D.5731 ] [308])
                (plus:DI (reg/f:DI 0 ax [orig:305 D.5731 ] [305])
                    (reg:DI 2 cx [orig:307 D.5749 ] [307])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 221 {*adddi_1}
     (nil))
(insn 700 699 701 31 (set (reg:QI 0 ax [orig:309 D.5733 ] [309])
        (mem:QI (reg/f:DI 0 ax [orig:308 D.5731 ] [308]) [0 *_249+0 S1 A8])) read_fdf.cpp:141 93 {*movqi_internal}
     (nil))
(insn 701 700 702 31 (set (mem:QI (reg/f:DI 1 dx [orig:301 D.5731 ] [301]) [0 *_242+0 S1 A8])
        (reg:QI 0 ax [orig:309 D.5733 ] [309])) read_fdf.cpp:141 93 {*movqi_internal}
     (nil))
(insn 702 701 703 31 (set (reg:SI 0 ax [533])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:142 90 {*movsi_internal}
     (nil))
(insn 703 702 704 31 (set (reg:DI 0 ax [orig:310 D.5726 ] [310])
        (sign_extend:DI (reg:SI 0 ax [533]))) read_fdf.cpp:142 142 {*extendsidi2_rex64}
     (nil))
(insn 704 703 705 31 (parallel [
            (set (reg:DI 1 dx [orig:311 D.5726 ] [311])
                (ashift:DI (reg:DI 0 ax [orig:310 D.5726 ] [310])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 497 {*ashldi3_1}
     (nil))
(insn 705 704 706 31 (set (reg/f:DI 0 ax [534])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])) read_fdf.cpp:142 89 {*movdi_internal}
     (nil))
(insn 706 705 707 31 (parallel [
            (set (reg/f:DI 0 ax [orig:312 D.5743 ] [312])
                (plus:DI (reg/f:DI 0 ax [534])
                    (reg:DI 1 dx [orig:311 D.5726 ] [311])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -752 [0xfffffffffffffd10])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:311 D.5726 ] [311]))
        (nil)))
(insn 707 706 708 31 (set (reg/f:DI 0 ax [orig:313 D.5731 ] [313])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:312 D.5743 ] [312]) [0 _253->character+0 S8 A64])) read_fdf.cpp:142 89 {*movdi_internal}
     (nil))
(insn 708 707 709 31 (set (reg:SI 1 dx [535])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:142 90 {*movsi_internal}
     (nil))
(insn 709 708 710 31 (set (reg:DI 1 dx [orig:314 D.5749 ] [314])
        (sign_extend:DI (reg:SI 1 dx [535]))) read_fdf.cpp:142 142 {*extendsidi2_rex64}
     (nil))
(insn 710 709 711 31 (parallel [
            (set (reg:DI 1 dx [orig:315 D.5749 ] [315])
                (plus:DI (reg:DI 1 dx [orig:314 D.5749 ] [314])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 221 {*adddi_1}
     (nil))
(insn 711 710 712 31 (parallel [
            (set (reg/f:DI 1 dx [orig:316 D.5731 ] [316])
                (plus:DI (reg:DI 1 dx [orig:315 D.5749 ] [315])
                    (reg/f:DI 0 ax [orig:313 D.5731 ] [313])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 221 {*adddi_1}
     (nil))
(insn 712 711 713 31 (set (reg:SI 0 ax [536])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:142 90 {*movsi_internal}
     (nil))
(insn 713 712 714 31 (set (reg:DI 0 ax [orig:317 D.5726 ] [317])
        (sign_extend:DI (reg:SI 0 ax [536]))) read_fdf.cpp:142 142 {*extendsidi2_rex64}
     (nil))
(insn 714 713 715 31 (parallel [
            (set (reg:DI 2 cx [orig:318 D.5726 ] [318])
                (ashift:DI (reg:DI 0 ax [orig:317 D.5726 ] [317])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 497 {*ashldi3_1}
     (nil))
(insn 715 714 716 31 (set (reg/f:DI 0 ax [537])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:142 89 {*movdi_internal}
     (nil))
(insn 716 715 717 31 (parallel [
            (set (reg/f:DI 0 ax [orig:319 D.5742 ] [319])
                (plus:DI (reg/f:DI 0 ax [537])
                    (reg:DI 2 cx [orig:318 D.5726 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:318 D.5726 ] [318]))
        (nil)))
(insn 717 716 718 31 (set (reg/f:DI 0 ax [orig:320 D.5731 ] [320])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:319 D.5742 ] [319]) [0 _260->character+0 S8 A64])) read_fdf.cpp:142 89 {*movdi_internal}
     (nil))
(insn 718 717 719 31 (set (reg:SI 2 cx [538])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:142 90 {*movsi_internal}
     (nil))
(insn 719 718 720 31 (set (reg:DI 2 cx [orig:321 D.5749 ] [321])
        (sign_extend:DI (reg:SI 2 cx [538]))) read_fdf.cpp:142 142 {*extendsidi2_rex64}
     (nil))
(insn 720 719 721 31 (parallel [
            (set (reg:DI 2 cx [orig:322 D.5749 ] [322])
                (plus:DI (reg:DI 2 cx [orig:321 D.5749 ] [321])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 221 {*adddi_1}
     (nil))
(insn 721 720 722 31 (parallel [
            (set (reg/f:DI 0 ax [orig:323 D.5731 ] [323])
                (plus:DI (reg/f:DI 0 ax [orig:320 D.5731 ] [320])
                    (reg:DI 2 cx [orig:322 D.5749 ] [322])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 221 {*adddi_1}
     (nil))
(insn 722 721 723 31 (set (reg:QI 0 ax [orig:324 D.5733 ] [324])
        (mem:QI (reg/f:DI 0 ax [orig:323 D.5731 ] [323]) [0 *_264+0 S1 A8])) read_fdf.cpp:142 93 {*movqi_internal}
     (nil))
(insn 723 722 724 31 (set (mem:QI (reg/f:DI 1 dx [orig:316 D.5731 ] [316]) [0 *_257+0 S1 A8])
        (reg:QI 0 ax [orig:324 D.5733 ] [324])) read_fdf.cpp:142 93 {*movqi_internal}
     (nil))
(insn 724 723 725 31 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:138 220 {*addsi_1}
     (nil))
;;  succ:       32 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU,DFS_BACK)
;;              30 [100.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 257 258 259 260 261 262 263 264 265 266 539 540
(code_label 725 724 726 32 18 "" [1 uses])
(note 726 725 727 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 727 726 728 32 (set (reg:SI 0 ax [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(insn 728 727 729 32 (set (reg:DI 0 ax [orig:257 D.5726 ] [257])
        (sign_extend:DI (reg:SI 0 ax [539]))) read_fdf.cpp:138 142 {*extendsidi2_rex64}
     (nil))
(insn 729 728 730 32 (parallel [
            (set (reg:DI 1 dx [orig:258 D.5726 ] [258])
                (ashift:DI (reg:DI 0 ax [orig:257 D.5726 ] [257])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:138 497 {*ashldi3_1}
     (nil))
(insn 730 729 731 32 (set (reg/f:DI 0 ax [540])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:138 89 {*movdi_internal}
     (nil))
(insn 731 730 732 32 (parallel [
            (set (reg/f:DI 0 ax [orig:259 D.5736 ] [259])
                (plus:DI (reg/f:DI 0 ax [540])
                    (reg:DI 1 dx [orig:258 D.5726 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:138 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:258 D.5726 ] [258]))
        (nil)))
(insn 732 731 733 32 (set (reg/f:DI 0 ax [orig:260 D.5737 ] [260])
        (mem/f:DI (reg/f:DI 0 ax [orig:259 D.5736 ] [259]) [0 *_200+0 S8 A64])) read_fdf.cpp:138 89 {*movdi_internal}
     (nil))
(insn 733 732 734 32 (set (reg:SI 0 ax [orig:261 D.5725 ] [261])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:260 D.5737 ] [260])
                (const_int 8 [0x8])) [0 _201->np.number+0 S4 A32])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(insn 734 733 735 32 (set (reg:DI 0 ax [orig:262 D.5726 ] [262])
        (sign_extend:DI (reg:SI 0 ax [orig:261 D.5725 ] [261]))) read_fdf.cpp:138 142 {*extendsidi2_rex64}
     (nil))
(insn 735 734 736 32 (set (reg:SI 1 dx [orig:263 D.5738 ] [263])
        (reg:SI 0 ax [orig:262 D.5726 ] [262])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(insn 736 735 737 32 (set (reg:SI 0 ax [orig:264 D.5738 ] [264])
        (const_int 4 [0x4])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(insn 737 736 738 32 (parallel [
            (set (reg:SI 0 ax [orig:265 D.5738 ] [265])
                (mult:SI (reg:SI 0 ax [orig:264 D.5738 ] [264])
                    (reg:SI 1 dx [orig:263 D.5738 ] [263])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:138 306 {*mulsi3_1}
     (nil))
(insn 738 737 740 32 (set (reg:SI 0 ax [orig:266 D.5725 ] [266])
        (reg:SI 0 ax [orig:265 D.5738 ] [265])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(insn 740 738 741 32 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:266 D.5725 ] [266])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32]))) read_fdf.cpp:138 7 {*cmpsi_1}
     (nil))
(jump_insn 741 740 742 32 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 739)
            (pc))) read_fdf.cpp:138 596 {*jcc_1}
     (nil)
 -> 739)
;;  succ:       31
;;              33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 742 741 743 33 3 "" [1 uses])
(note 743 742 744 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 744 743 745 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:33 220 {*addsi_1}
     (nil))
;;  succ:       34 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 541
(code_label 745 744 746 34 2 "" [1 uses])
(note 746 745 747 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 747 746 748 34 (set (reg/f:DI 0 ax [541])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 fid+0 S8 A64])) read_fdf.cpp:33 89 {*movdi_internal}
     (nil))
(insn 748 747 749 34 (set (reg:SI 0 ax [orig:83 D.5725 ] [83])
        (mem:SI (reg/f:DI 0 ax [541]) [0 *fid_6(D)+0 S4 A32])) read_fdf.cpp:33 90 {*movsi_internal}
     (nil))
(insn 749 748 751 34 (parallel [
            (set (reg:SI 0 ax [orig:84 D.5725 ] [84])
                (plus:SI (reg:SI 0 ax [orig:83 D.5725 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:33 220 {*addsi_1}
     (nil))
(insn 751 749 752 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:84 D.5725 ] [84])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32]))) read_fdf.cpp:33 7 {*cmpsi_1}
     (nil))
(jump_insn 752 751 753 34 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 750)
            (pc))) read_fdf.cpp:33 596 {*jcc_1}
     (nil)
 -> 750)
;;  succ:       3
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 325 326
(note 753 752 754 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 754 753 757 35 (set (reg:SI 0 ax [orig:325 D.5725 ] [325])
        (const_int 1 [0x1])) read_fdf.cpp:147 90 {*movsi_internal}
     (nil))
(insn 757 754 761 35 (set (reg:SI 0 ax [orig:326 <retval> ] [326])
        (reg:SI 0 ax [orig:325 D.5725 ] [325])) read_fdf.cpp:147 90 {*movsi_internal}
     (nil))
(insn 761 757 762 35 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:326 <retval> ] [326])) read_fdf.cpp:149 90 {*movsi_internal}
     (nil))
(insn 762 761 763 35 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.5750+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [544]))
        ]) read_fdf.cpp:149 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 763 762 769 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 766)
            (pc))) read_fdf.cpp:149 596 {*jcc_1}
     (nil)
 -> 766)
;;  succ:       37
;;              36 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 769 763 764 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(call_insn 764 769 765 36 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2b1b50419200 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) read_fdf.cpp:149 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 765 764 766)
;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 766 765 770 37 22 "" [1 uses])
(note 770 766 767 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 767 770 779 37 (use (reg/i:SI 0 ax)) read_fdf.cpp:149 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 779 767 0 NOTE_INSN_DELETED)
