
;; Function int read_fdf_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision1*, float**, float**, Procpar_info*) (_Z13read_fdf_dataPiP10PreprocessP7IOFilesPP16Data_file_headerPP17Data_block_headerP10Precision2PP8_IO_FILEP10Precision1PPfSI_P12Procpar_info, funcdef_no=2, decl_uid=5447, cgraph_uid=2, symbol_order=2)

      Creating newreg=547
Removing SCRATCH in insn #19 (nop 2)
rescanning insn with uid = 19.
      Creating newreg=548
Removing SCRATCH in insn #763 (nop 3)
rescanning insn with uid = 763.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=832, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=800, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r547
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 39
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=549 from oldreg=345, assigning class GENERAL_REGS to r549
   51: {r549:DI=r549:DI<<0x8;clobber flags:CC;}
      REG_DEAD r343:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  783: r549:DI=r343:DI
    Inserting insn reload after:
  784: r345:DI=r549:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 58:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 80:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 85:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 86:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 88:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) ?mr {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 95:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 96:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 109:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 114:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 115:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 116:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 119:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 123:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 124:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 131:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 132:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 134:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 135:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 136:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =<  (1) re*m {*pushdi2_rex64}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 138:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 140:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-16)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 142:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-24)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 144:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-32)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 146:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-40)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-40)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 152:  (0) r  (1) Z {*movdi_internal} (sp_off=-48)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) q  (1) qn {*movqi_internal} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) rBwBz {*call_value} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-48)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 163:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 160:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=550 from oldreg=374, assigning class CREG to r550
      Creating newreg=551 from oldreg=376, assigning class DIREG to r551
  160: {r550:DI=unspec[[r551:DI],r378:QI,0x8,r550:DI] 24;clobber r551:DI;clobber flags:CC;}
      REG_DEAD r378:QI
      REG_DEAD r377:DI
      REG_DEAD r376:DI
      REG_UNUSED r376:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  785: r550:DI=r377:DI
  787: r551:DI=r376:DI
    Inserting insn reload after:
  786: r374:DI=r550:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 162:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 164:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 167:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 178:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 175:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=552 from oldreg=383, assigning class CREG to r552
      Creating newreg=553 from oldreg=385, assigning class DIREG to r553
  175: {r552:DI=unspec[[r553:DI],r387:QI,0x8,r552:DI] 24;clobber r553:DI;clobber flags:CC;}
      REG_DEAD r387:QI
      REG_DEAD r386:DI
      REG_DEAD r385:DI
      REG_UNUSED r385:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  788: r552:DI=r386:DI
  790: r553:DI=r385:DI
    Inserting insn reload after:
  789: r383:DI=r552:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 177:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 179:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 182:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 183:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 193:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 190:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=554 from oldreg=392, assigning class CREG to r554
      Creating newreg=555 from oldreg=394, assigning class DIREG to r555
  190: {r554:DI=unspec[[r555:DI],r396:QI,0x8,r554:DI] 24;clobber r555:DI;clobber flags:CC;}
      REG_DEAD r396:QI
      REG_DEAD r395:DI
      REG_DEAD r394:DI
      REG_UNUSED r394:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  791: r554:DI=r395:DI
  793: r555:DI=r394:DI
    Inserting insn reload after:
  792: r392:DI=r554:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 192:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 194:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 197:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 198:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 208:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 204:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 205:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=556 from oldreg=401, assigning class CREG to r556
      Creating newreg=557 from oldreg=403, assigning class DIREG to r557
  205: {r556:DI=unspec[[r557:DI],r405:QI,0x8,r556:DI] 24;clobber r557:DI;clobber flags:CC;}
      REG_DEAD r405:QI
      REG_DEAD r404:DI
      REG_DEAD r403:DI
      REG_UNUSED r403:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  794: r556:DI=r404:DI
  796: r557:DI=r403:DI
    Inserting insn reload after:
  795: r401:DI=r556:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 207:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 209:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 212:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 213:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 218:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 219:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (1) rBwBz {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 223:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 224:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 227:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 228:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 235:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 236:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 237:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 238:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 239:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 240:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =<  (1) re*m {*pushdi2_rex64}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 242:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 248:  (0) r  (1) Z {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 250:  (0) q  (1) qn {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (1) rBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 252:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 253:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 255:  (0) m  (1) v {*movdf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 258:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 259:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 266:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 267:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 268:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 269:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 270:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 271:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 272:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 278:  (0) r  (1) Z {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 280:  (0) q  (1) qn {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (1) rBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 282:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 283:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 286:  (0) m  (1) v {*movdf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 289:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 290:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 297:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 298:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 299:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 300:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 301:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 302:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 303:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 309:  (0) r  (1) Z {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 311:  (0) q  (1) qn {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (1) rBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 313:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 316:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 318
	 Choosing alt 0 in insn 318:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 319:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 320:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 322:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 325:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 326:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 333:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 334:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 335:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 336:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 337:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 338:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 339:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 345:  (0) r  (1) Z {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) q  (1) qn {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (1) rBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 349:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 352:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 353:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 354
	 Choosing alt 0 in insn 354:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 355:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 356:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 359:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 364:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 367:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 368:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 375:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 376:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 377:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 378:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 379:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 380:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 381:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 387:  (0) r  (1) Z {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 389:  (0) q  (1) qn {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (1) rBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 391:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 394:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 395:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 396
	 Choosing alt 0 in insn 396:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 397:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 398:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 403:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 405:  (0) r  (1) l  (2) M {*ashlsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 406:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 407:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 417:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=558 from oldreg=460, assigning class GENERAL_REGS to r558
  417: {r558:SI=r558:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  797: r558:SI=r153:SI
    Inserting insn reload after:
  798: r460:SI=r558:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 418
	 Choosing alt 0 in insn 418:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 421:  (0) x  (1) r {*floatsidf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 422:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 423:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 424:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 425:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 426
	 Choosing alt 0 in insn 426:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 427:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 428:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=559 from oldreg=159, assigning class SSE_REGS to r559
  428: r559:DF=r559:DF/r158:DF
      REG_DEAD r465:DF
      REG_DEAD r158:DF
    Inserting insn reload before:
  799: r559:DF=r465:DF
    Inserting insn reload after:
  800: r159:DF=r559:DF

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 429
	 Choosing alt 0 in insn 429:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 432:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 433:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 434:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 435:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 436:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 437:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 438:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 439:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 440:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 441:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 442:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 443:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 447:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 448:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 449
	 Choosing alt 0 in insn 449:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 450:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 451:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 453:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 458:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 459:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 460
	 Choosing alt 0 in insn 460:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 461:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 466:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 468:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 473:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 474:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 475:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 483:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 486:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 487:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 488:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 496:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 499:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 500:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 501:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 504:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 505:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 506
	 Choosing alt 0 in insn 506:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 507:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 515:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 518:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 519:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 520:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 523:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 524:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 525
	 Choosing alt 0 in insn 525:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 526:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 534:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 538:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 539:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 540
	 Choosing alt 0 in insn 540:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 541:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 545:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 546:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 556:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 557:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 558
	 Choosing alt 0 in insn 558:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 559:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 562:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 563:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 564
	 Choosing alt 0 in insn 564:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 565:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 568:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 569:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 570:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 571
	 Choosing alt 0 in insn 571:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 572:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 574
	 Choosing alt 2 in insn 574:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 575:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 578:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 579:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 580
	 Choosing alt 0 in insn 580:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 581:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 583:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 588:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 589:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 590:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 591
	 Choosing alt 0 in insn 591:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 592:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 593:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 600:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 601:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 602
	 Choosing alt 0 in insn 602:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 603:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 605:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 606:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 608:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 611:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 612:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 613:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 614:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 615
	 Choosing alt 0 in insn 615:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 616:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 617:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 618:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 620
	 Choosing alt 0 in insn 620:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 623:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 624:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 625
	 Choosing alt 0 in insn 625:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 626:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 628:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 629:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 630:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 631:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 632:  (0) =r  (1) rm {extendhidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 633:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 634:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 640:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 642:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 643:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 644:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 645:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 646
	 Choosing alt 0 in insn 646:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 647:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 649:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 650:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 651:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 652
	 Choosing alt 2 in insn 652:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 654:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 657:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 659:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 660:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 661
	 Choosing alt 0 in insn 661:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 663:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 665:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 667:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 668:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 669:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 670
	 Choosing alt 0 in insn 670:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 671:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 674
	 Choosing alt 0 in insn 674:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 675:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 676:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 677:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 679:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 680:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 681
	 Choosing alt 0 in insn 681:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 682:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 683:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 684:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 685:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 686
	 Choosing alt 0 in insn 686:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 688:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 689:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 690:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 691
	 Choosing alt 0 in insn 691:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 692:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 693:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 694:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 695:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 696:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 697:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 698:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 699:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 701:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 702:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 703
	 Choosing alt 0 in insn 703:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 704:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 705:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 706:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 707:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 708
	 Choosing alt 0 in insn 708:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 709:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 710:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 711:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 712:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 713
	 Choosing alt 0 in insn 713:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 714:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 715:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 716:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 717:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 719:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 720:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 721:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 722:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 723:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 724:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 725
	 Choosing alt 0 in insn 725:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 726:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 728:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 729:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 730
	 Choosing alt 0 in insn 730:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 731:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 732:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 733:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 734:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 735
	 Choosing alt 0 in insn 735:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 736:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 737:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 738:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 739:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 740:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 741:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 742:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 743:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 749:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 755:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 763:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r548
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 765:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37

********** Pseudo live ranges #1: **********

  BB 6
   Insn 70: point = 0
   Insn 69: point = 0
   Insn 68: point = 0
   Insn 67: point = 0
  BB 36
   Insn 765: point = 0
  BB 37
   Insn 768: point = 0
  BB 35
   Insn 764: point = 0
   Insn 763: point = 0
   Insn 762: point = 1
   Insn 758: point = 2
   Insn 755: point = 4
  BB 3
   Insn 28: point = 5
   Insn 27: point = 5
   Insn 26: point = 6
   Insn 25: point = 8
   Insn 24: point = 10
  BB 34
   Insn 780: point = 11
   Insn 749: point = 11
  BB 32
   Insn 655: point = 11
   Insn 654: point = 11
   Insn 653: point = 12
   Insn 652: point = 14
   Insn 651: point = 16
   Insn 650: point = 17
   Insn 649: point = 19
   Insn 648: point = 21
   Insn 647: point = 23
   Insn 646: point = 25
   Insn 645: point = 27
   Insn 644: point = 28
   Insn 643: point = 30
   Insn 642: point = 32
  BB 33
   Insn 778: point = 33
   Insn 743: point = 33
   Insn 742: point = 33
   Insn 741: point = 34
   Insn 740: point = 36
   Insn 739: point = 38
   Insn 738: point = 40
   Insn 737: point = 42
   Insn 736: point = 43
   Insn 735: point = 45
   Insn 734: point = 47
   Insn 733: point = 48
   Insn 732: point = 50
   Insn 731: point = 52
   Insn 730: point = 53
   Insn 729: point = 55
   Insn 728: point = 57
   Insn 727: point = 59
   Insn 726: point = 60
   Insn 725: point = 62
   Insn 724: point = 64
   Insn 723: point = 65
   Insn 722: point = 67
   Insn 721: point = 69
   Insn 720: point = 70
   Insn 719: point = 71
   Insn 718: point = 73
   Insn 717: point = 75
   Insn 716: point = 77
   Insn 715: point = 79
   Insn 714: point = 80
   Insn 713: point = 82
   Insn 712: point = 84
   Insn 711: point = 85
   Insn 710: point = 87
   Insn 709: point = 89
   Insn 708: point = 90
   Insn 707: point = 92
   Insn 706: point = 94
   Insn 705: point = 96
   Insn 704: point = 97
   Insn 703: point = 99
   Insn 702: point = 101
   Insn 701: point = 102
   Insn 700: point = 104
   Insn 699: point = 106
   Insn 698: point = 107
   Insn 697: point = 108
   Insn 696: point = 110
   Insn 695: point = 112
   Insn 694: point = 114
   Insn 693: point = 116
   Insn 692: point = 117
   Insn 691: point = 119
   Insn 690: point = 121
   Insn 689: point = 122
   Insn 688: point = 124
   Insn 687: point = 126
   Insn 686: point = 127
   Insn 685: point = 129
   Insn 684: point = 131
   Insn 683: point = 133
   Insn 682: point = 134
   Insn 681: point = 136
   Insn 680: point = 138
   Insn 679: point = 139
   Insn 678: point = 141
   Insn 677: point = 143
   Insn 676: point = 144
   Insn 675: point = 145
   Insn 674: point = 147
   Insn 673: point = 149
   Insn 672: point = 151
   Insn 671: point = 152
   Insn 670: point = 154
   Insn 669: point = 156
   Insn 668: point = 157
   Insn 667: point = 159
   Insn 666: point = 161
   Insn 665: point = 162
   Insn 664: point = 164
   Insn 663: point = 166
   Insn 662: point = 167
   Insn 661: point = 169
   Insn 660: point = 171
   Insn 659: point = 172
   Insn 658: point = 174
   Insn 657: point = 176
  BB 31
   Insn 640: point = 177
  BB 29
   Insn 609: point = 177
   Insn 608: point = 177
  BB 30
   Insn 776: point = 177
   Insn 634: point = 177
   Insn 633: point = 177
   Insn 632: point = 178
   Insn 631: point = 180
   Insn 630: point = 182
   Insn 629: point = 184
   Insn 628: point = 186
   Insn 627: point = 188
   Insn 626: point = 189
   Insn 625: point = 191
   Insn 624: point = 193
   Insn 623: point = 194
   Insn 622: point = 196
   Insn 621: point = 198
   Insn 620: point = 199
   Insn 619: point = 201
   Insn 618: point = 203
   Insn 617: point = 205
   Insn 616: point = 206
   Insn 615: point = 208
   Insn 614: point = 210
   Insn 613: point = 211
   Insn 612: point = 213
   Insn 611: point = 215
  BB 28
   Insn 606: point = 216
   Insn 605: point = 217
   Insn 604: point = 219
   Insn 603: point = 221
   Insn 602: point = 223
   Insn 601: point = 225
   Insn 600: point = 226
   Insn 599: point = 228
   Insn 598: point = 230
  BB 27
   Insn 596: point = 231
   Insn 595: point = 231
   Insn 594: point = 232
   Insn 593: point = 234
   Insn 592: point = 236
   Insn 591: point = 238
   Insn 590: point = 240
   Insn 589: point = 241
   Insn 588: point = 243
   Insn 587: point = 245
   Insn 586: point = 246
   Insn 585: point = 246
   Insn 584: point = 247
   Insn 583: point = 248
   Insn 582: point = 248
   Insn 581: point = 249
   Insn 580: point = 251
   Insn 579: point = 253
   Insn 578: point = 254
   Insn 577: point = 256
   Insn 576: point = 258
   Insn 575: point = 259
   Insn 574: point = 261
   Insn 573: point = 263
   Insn 572: point = 265
   Insn 571: point = 267
   Insn 570: point = 269
   Insn 569: point = 270
   Insn 568: point = 272
   Insn 567: point = 274
   Insn 566: point = 275
   Insn 565: point = 277
   Insn 564: point = 279
   Insn 563: point = 281
   Insn 562: point = 282
   Insn 561: point = 284
   Insn 560: point = 286
   Insn 559: point = 287
   Insn 558: point = 289
   Insn 557: point = 291
   Insn 556: point = 292
   Insn 555: point = 294
   Insn 554: point = 296
  BB 25
   Insn 547: point = 297
   Insn 546: point = 297
   Insn 545: point = 297
   Insn 544: point = 298
   Insn 543: point = 299
   Insn 542: point = 299
   Insn 541: point = 300
   Insn 540: point = 302
   Insn 539: point = 304
   Insn 538: point = 305
   Insn 537: point = 307
   Insn 536: point = 309
  BB 26
   Insn 774: point = 310
  BB 24
   Insn 534: point = 310
   Insn 533: point = 311
   Insn 532: point = 313
   Insn 531: point = 314
   Insn 530: point = 314
   Insn 529: point = 315
   Insn 528: point = 317
   Insn 527: point = 319
   Insn 526: point = 321
   Insn 525: point = 323
   Insn 524: point = 325
   Insn 523: point = 326
   Insn 522: point = 328
   Insn 521: point = 330
   Insn 520: point = 331
   Insn 519: point = 333
   Insn 518: point = 334
   Insn 517: point = 336
   Insn 516: point = 338
   Insn 515: point = 339
   Insn 514: point = 340
   Insn 513: point = 342
   Insn 512: point = 343
   Insn 511: point = 343
   Insn 510: point = 344
   Insn 509: point = 346
   Insn 508: point = 348
   Insn 507: point = 350
   Insn 506: point = 352
   Insn 505: point = 354
   Insn 504: point = 355
   Insn 503: point = 357
   Insn 502: point = 359
   Insn 501: point = 360
   Insn 500: point = 362
   Insn 499: point = 363
   Insn 498: point = 365
   Insn 497: point = 367
   Insn 496: point = 368
   Insn 495: point = 369
   Insn 494: point = 371
   Insn 493: point = 372
   Insn 492: point = 372
   Insn 491: point = 373
   Insn 490: point = 375
   Insn 489: point = 377
   Insn 488: point = 378
   Insn 487: point = 380
   Insn 486: point = 381
   Insn 485: point = 383
   Insn 484: point = 385
   Insn 483: point = 386
   Insn 482: point = 387
   Insn 481: point = 389
   Insn 480: point = 390
   Insn 479: point = 390
   Insn 478: point = 391
   Insn 477: point = 393
   Insn 476: point = 395
   Insn 475: point = 396
   Insn 474: point = 398
   Insn 473: point = 399
   Insn 472: point = 401
   Insn 471: point = 403
  BB 23
   Insn 468: point = 404
   Insn 467: point = 405
   Insn 466: point = 407
  BB 22
   Insn 464: point = 408
   Insn 463: point = 408
   Insn 462: point = 409
   Insn 461: point = 411
   Insn 460: point = 413
   Insn 459: point = 415
   Insn 458: point = 416
   Insn 457: point = 418
   Insn 456: point = 420
   Insn 455: point = 421
   Insn 454: point = 423
   Insn 453: point = 424
   Insn 452: point = 425
   Insn 451: point = 427
   Insn 450: point = 429
   Insn 449: point = 431
   Insn 448: point = 433
   Insn 447: point = 434
   Insn 446: point = 436
   Insn 445: point = 438
   Insn 444: point = 439
   Insn 443: point = 440
   Insn 442: point = 442
   Insn 441: point = 444
   Insn 440: point = 445
   Insn 439: point = 446
   Insn 438: point = 447
   Insn 437: point = 448
   Insn 436: point = 449
   Insn 435: point = 450
   Insn 434: point = 451
   Insn 433: point = 452
   Insn 432: point = 453
   Insn 431: point = 454
   Insn 430: point = 455
   Insn 429: point = 457
   Insn 800: point = 459
	Hard reg 21 is preferable by r559 with profit 1
   Insn 428: point = 461
   Insn 799: point = 462
	Hard reg 21 is preferable by r559 with profit 1
	Hard reg 23 is preferable by r559 with profit 1
   Insn 427: point = 464
   Insn 426: point = 465
   Insn 425: point = 467
   Insn 424: point = 469
   Insn 423: point = 470
   Insn 422: point = 472
   Insn 421: point = 473
   Insn 420: point = 475
   Insn 419: point = 477
   Insn 418: point = 479
   Insn 798: point = 481
	Hard reg 1 is preferable by r558 with profit 1
   Insn 417: point = 483
   Insn 797: point = 483
   Insn 416: point = 484
   Insn 415: point = 486
  BB 8
   Insn 101: point = 487
   Insn 100: point = 487
   Insn 99: point = 488
   Insn 98: point = 489
   Insn 97: point = 489
   Insn 96: point = 490
   Insn 95: point = 490
  BB 21
   Insn 772: point = 491
  BB 20
   Insn 407: point = 491
   Insn 406: point = 492
   Insn 405: point = 493
   Insn 404: point = 495
   Insn 403: point = 496
   Insn 402: point = 497
   Insn 401: point = 499
   Insn 400: point = 501
   Insn 399: point = 503
   Insn 398: point = 504
   Insn 397: point = 506
   Insn 396: point = 508
   Insn 395: point = 510
   Insn 394: point = 511
   Insn 393: point = 513
   Insn 392: point = 515
   Insn 391: point = 516
   Insn 390: point = 516
   Insn 389: point = 516
   Insn 388: point = 516
   Insn 387: point = 517
   Insn 386: point = 517
   Insn 385: point = 518
   Insn 384: point = 519
   Insn 383: point = 520
   Insn 382: point = 521
   Insn 381: point = 522
   Insn 380: point = 523
   Insn 379: point = 523
   Insn 378: point = 524
   Insn 377: point = 525
   Insn 376: point = 526
   Insn 375: point = 527
  BB 19
   Insn 373: point = 528
   Insn 372: point = 528
   Insn 371: point = 529
   Insn 370: point = 530
   Insn 369: point = 530
   Insn 368: point = 531
   Insn 367: point = 531
  BB 18
   Insn 364: point = 532
   Insn 363: point = 533
   Insn 362: point = 535
   Insn 361: point = 537
   Insn 360: point = 538
   Insn 359: point = 538
   Insn 358: point = 539
   Insn 357: point = 541
   Insn 356: point = 542
   Insn 355: point = 544
   Insn 354: point = 546
   Insn 353: point = 548
   Insn 352: point = 549
   Insn 351: point = 551
   Insn 350: point = 553
   Insn 349: point = 554
   Insn 348: point = 554
   Insn 347: point = 554
   Insn 346: point = 554
   Insn 345: point = 555
   Insn 344: point = 555
   Insn 343: point = 556
   Insn 342: point = 557
   Insn 341: point = 558
   Insn 340: point = 559
   Insn 339: point = 560
   Insn 338: point = 561
   Insn 337: point = 561
   Insn 336: point = 562
   Insn 335: point = 563
   Insn 334: point = 564
   Insn 333: point = 565
  BB 17
   Insn 331: point = 566
   Insn 330: point = 566
   Insn 329: point = 567
   Insn 328: point = 568
   Insn 327: point = 568
   Insn 326: point = 569
   Insn 325: point = 569
  BB 16
   Insn 322: point = 570
   Insn 321: point = 571
   Insn 320: point = 572
   Insn 319: point = 574
   Insn 318: point = 576
   Insn 317: point = 578
   Insn 316: point = 579
   Insn 315: point = 581
   Insn 314: point = 583
   Insn 313: point = 584
   Insn 312: point = 584
   Insn 311: point = 584
   Insn 310: point = 584
   Insn 309: point = 585
   Insn 308: point = 585
   Insn 307: point = 586
   Insn 306: point = 587
   Insn 305: point = 588
   Insn 304: point = 589
   Insn 303: point = 590
   Insn 302: point = 591
   Insn 301: point = 591
   Insn 300: point = 592
   Insn 299: point = 593
   Insn 298: point = 594
   Insn 297: point = 595
  BB 15
   Insn 295: point = 596
   Insn 294: point = 596
   Insn 293: point = 597
   Insn 292: point = 598
   Insn 291: point = 598
   Insn 290: point = 599
   Insn 289: point = 599
  BB 14
   Insn 286: point = 600
   Insn 285: point = 601
   Insn 284: point = 602
   Insn 283: point = 604
   Insn 282: point = 605
   Insn 281: point = 605
   Insn 280: point = 605
   Insn 279: point = 605
   Insn 278: point = 606
   Insn 277: point = 606
   Insn 276: point = 607
   Insn 275: point = 608
   Insn 274: point = 609
   Insn 273: point = 610
   Insn 272: point = 611
   Insn 271: point = 612
   Insn 270: point = 612
   Insn 269: point = 613
   Insn 268: point = 614
   Insn 267: point = 615
   Insn 266: point = 616
  BB 13
   Insn 264: point = 617
   Insn 263: point = 617
   Insn 262: point = 618
   Insn 261: point = 619
   Insn 260: point = 619
   Insn 259: point = 620
   Insn 258: point = 620
  BB 12
   Insn 255: point = 621
   Insn 254: point = 622
   Insn 253: point = 623
   Insn 252: point = 624
   Insn 251: point = 624
   Insn 250: point = 624
   Insn 249: point = 624
   Insn 248: point = 625
   Insn 247: point = 625
   Insn 246: point = 626
   Insn 245: point = 627
   Insn 244: point = 628
   Insn 243: point = 629
   Insn 242: point = 630
   Insn 241: point = 631
   Insn 240: point = 632
   Insn 239: point = 633
   Insn 238: point = 634
   Insn 237: point = 635
   Insn 236: point = 636
   Insn 235: point = 637
  BB 11
   Insn 233: point = 638
   Insn 232: point = 638
   Insn 231: point = 639
   Insn 230: point = 640
   Insn 229: point = 640
   Insn 228: point = 641
   Insn 227: point = 641
  BB 10
   Insn 224: point = 642
   Insn 223: point = 643
   Insn 222: point = 644
   Insn 221: point = 644
   Insn 220: point = 645
   Insn 219: point = 646
   Insn 218: point = 647
   Insn 217: point = 649
   Insn 216: point = 650
   Insn 215: point = 650
   Insn 214: point = 651
   Insn 213: point = 652
   Insn 212: point = 653
   Insn 211: point = 654
   Insn 210: point = 655
   Insn 209: point = 657
   Insn 207: point = 658
   Insn 206: point = 660
   Insn 795: point = 662
	Hard reg 0 is preferable by r556 with profit 1
   Insn 205: point = 664
   Insn 796: point = 666
	Hard reg 1 is preferable by r557 with profit 1
   Insn 794: point = 668
	Hard reg 0 is preferable by r556 with profit 1
	Hard reg 2 is preferable by r556 with profit 1
   Insn 204: point = 670
   Insn 203: point = 671
   Insn 202: point = 673
   Insn 208: point = 674
   Insn 201: point = 675
   Insn 200: point = 675
   Insn 199: point = 676
   Insn 198: point = 677
   Insn 197: point = 678
   Insn 196: point = 679
   Insn 195: point = 680
   Insn 194: point = 682
   Insn 192: point = 683
   Insn 191: point = 685
   Insn 792: point = 687
	Hard reg 0 is preferable by r554 with profit 1
   Insn 190: point = 689
   Insn 793: point = 691
	Hard reg 1 is preferable by r555 with profit 1
   Insn 791: point = 693
	Hard reg 0 is preferable by r554 with profit 1
	Hard reg 2 is preferable by r554 with profit 1
   Insn 189: point = 695
   Insn 188: point = 696
   Insn 187: point = 698
   Insn 193: point = 699
   Insn 186: point = 700
   Insn 185: point = 700
   Insn 184: point = 701
   Insn 183: point = 702
   Insn 182: point = 703
   Insn 181: point = 704
   Insn 180: point = 705
   Insn 179: point = 707
   Insn 177: point = 708
   Insn 176: point = 710
   Insn 789: point = 712
	Hard reg 0 is preferable by r552 with profit 1
   Insn 175: point = 714
   Insn 790: point = 716
	Hard reg 1 is preferable by r553 with profit 1
   Insn 788: point = 718
	Hard reg 0 is preferable by r552 with profit 1
	Hard reg 2 is preferable by r552 with profit 1
   Insn 174: point = 720
   Insn 173: point = 721
   Insn 172: point = 723
   Insn 178: point = 724
   Insn 171: point = 725
   Insn 170: point = 725
   Insn 169: point = 726
   Insn 168: point = 727
   Insn 167: point = 728
   Insn 166: point = 729
   Insn 165: point = 730
   Insn 164: point = 732
   Insn 162: point = 733
   Insn 161: point = 735
   Insn 786: point = 737
	Hard reg 0 is preferable by r550 with profit 1
   Insn 160: point = 739
   Insn 787: point = 741
	Hard reg 1 is preferable by r551 with profit 1
   Insn 785: point = 743
	Hard reg 0 is preferable by r550 with profit 1
	Hard reg 2 is preferable by r550 with profit 1
   Insn 159: point = 745
   Insn 158: point = 746
   Insn 157: point = 748
   Insn 163: point = 749
   Insn 156: point = 750
   Insn 155: point = 750
   Insn 154: point = 750
   Insn 153: point = 750
   Insn 152: point = 751
   Insn 151: point = 751
   Insn 150: point = 752
   Insn 149: point = 753
   Insn 148: point = 754
   Insn 147: point = 755
   Insn 146: point = 756
   Insn 145: point = 757
   Insn 144: point = 758
   Insn 143: point = 759
   Insn 142: point = 760
   Insn 141: point = 761
   Insn 140: point = 762
   Insn 139: point = 763
   Insn 138: point = 764
   Insn 137: point = 765
   Insn 136: point = 766
   Insn 135: point = 767
   Insn 134: point = 768
   Insn 133: point = 769
   Insn 132: point = 770
   Insn 131: point = 771
  BB 9
   Insn 129: point = 772
   Insn 128: point = 772
   Insn 127: point = 773
   Insn 126: point = 774
   Insn 125: point = 774
   Insn 124: point = 775
   Insn 123: point = 775
   Insn 122: point = 776
   Insn 121: point = 776
   Insn 120: point = 776
   Insn 119: point = 777
   Insn 118: point = 777
   Insn 117: point = 778
   Insn 116: point = 779
   Insn 115: point = 780
   Insn 114: point = 781
   Insn 113: point = 782
   Insn 112: point = 782
   Insn 111: point = 783
   Insn 110: point = 783
   Insn 109: point = 784
   Insn 108: point = 785
   Insn 107: point = 787
   Insn 106: point = 789
   Insn 105: point = 790
   Insn 104: point = 792
   Insn 103: point = 794
  BB 7
   Insn 93: point = 795
   Insn 92: point = 795
   Insn 91: point = 795
   Insn 90: point = 795
   Insn 89: point = 795
   Insn 88: point = 796
   Insn 87: point = 796
   Insn 86: point = 797
   Insn 85: point = 798
   Insn 84: point = 799
   Insn 83: point = 799
   Insn 82: point = 800
   Insn 81: point = 800
   Insn 80: point = 801
   Insn 79: point = 802
   Insn 78: point = 804
   Insn 77: point = 806
   Insn 76: point = 807
   Insn 75: point = 809
   Insn 74: point = 811
  BB 5
   Insn 65: point = 812
   Insn 64: point = 812
   Insn 63: point = 813
   Insn 62: point = 815
   Insn 61: point = 816
   Insn 60: point = 818
   Insn 59: point = 820
   Insn 58: point = 821
   Insn 57: point = 822
   Insn 56: point = 823
   Insn 55: point = 823
   Insn 54: point = 824
   Insn 53: point = 824
   Insn 52: point = 826
   Insn 784: point = 827
	Hard reg 1 is preferable by r549 with profit 1
   Insn 51: point = 829
   Insn 783: point = 829
	Hard reg 1 is preferable by r549 with profit 1
	Hard reg 0 is preferable by r549 with profit 1
   Insn 50: point = 831
   Insn 49: point = 833
   Insn 48: point = 834
   Insn 47: point = 836
   Insn 46: point = 837
   Insn 45: point = 839
   Insn 44: point = 841
  BB 4
   Insn 42: point = 842
   Insn 41: point = 842
   Insn 40: point = 843
   Insn 39: point = 845
   Insn 38: point = 847
   Insn 37: point = 848
   Insn 36: point = 850
   Insn 35: point = 852
   Insn 34: point = 854
   Insn 33: point = 855
   Insn 32: point = 855
   Insn 31: point = 856
   Insn 30: point = 858
  BB 2
   Insn 22: point = 859
   Insn 19: point = 859
   Insn 17: point = 861
   Insn 16: point = 862
   Insn 15: point = 863
   Insn 14: point = 864
   Insn 13: point = 865
   Insn 12: point = 866
   Insn 11: point = 867
   Insn 10: point = 868
   Insn 9: point = 869
   Insn 8: point = 870
   Insn 7: point = 871
   Insn 6: point = 871
   Insn 5: point = 871
   Insn 4: point = 871
   Insn 3: point = 871
   Insn 2: point = 871
 r87: [7..8]
 r88: [5..6]
 r89: [854..856]
 r90: [846..848]
 r91: [844..845]
 r92: [842..843]
 r93: [838..839]
 r94: [835..837]
 r95: [821..834]
 r96: [823..824]
 r97: [821..822]
 r98: [817..818]
 r99: [814..816]
 r100: [812..813]
 r101: [808..809]
 r102: [805..807]
 r103: [803..804]
 r104: [800..802]
 r105: [487..488]
 r106: [791..792]
 r107: [788..790]
 r108: [786..787]
 r109: [783..785]
 r110: [772..773]
 r111: [731..733]
 r112: [729..730]
 r113: [706..708]
 r114: [704..705]
 r115: [681..683]
 r116: [679..680]
 r117: [656..658]
 r118: [654..655]
 r119: [644..647]
 r120: [642..643]
 r121: [638..639]
 r122: [621..623]
 r123: [617..618]
 r124: [603..604]
 r125: [600..602]
 r126: [596..597]
 r127: [580..581]
 r128: [577..579]
 r129: [575..576]
 r130: [573..574]
 r131: [570..572]
 r132: [570..571]
 r133: [566..567]
 r134: [550..551]
 r135: [547..549]
 r136: [545..546]
 r137: [543..544]
 r138: [532..542]
 r139: [540..541]
 r140: [532..533]
 r141: [528..529]
 r142: [512..513]
 r143: [509..511]
 r144: [507..508]
 r145: [505..506]
 r146: [496..504]
 r147: [502..503]
 r148: [500..501]
 r149: [498..499]
 r150: [496..497]
 r151: [494..495]
 r152: [491..493]
 r153: [480..484]
 r154: [474..475]
 r155: [458..473]
 r156: [466..470]
 r157: [466..467]
 r158: [461..465]
 r159: [458..459]
 r160: [456..457]
 r161: [453..455]
 r162: [441..442]
 r163: [439..440]
 r164: [435..436]
 r165: [432..434]
 r166: [430..431]
 r167: [428..429]
 r168: [426..427]
 r169: [408..421]
 r170: [417..418]
 r171: [414..416]
 r172: [412..413]
 r173: [410..411]
 r174: [408..409]
 r175: [400..401]
 r176: [397..399]
 r177: [386..396]
 r178: [392..393]
 r179: [390..391]
 r180: [386..387]
 r181: [382..383]
 r182: [379..381]
 r183: [368..378]
 r184: [374..375]
 r185: [372..373]
 r186: [368..369]
 r187: [364..365]
 r188: [361..363]
 r189: [339..360]
 r190: [356..357]
 r191: [353..355]
 r192: [351..352]
 r193: [349..350]
 r194: [347..348]
 r195: [345..346]
 r196: [343..344]
 r197: [339..340]
 r198: [335..336]
 r199: [332..334]
 r200: [310..331]
 r201: [327..328]
 r202: [324..326]
 r203: [322..323]
 r204: [320..321]
 r205: [318..319]
 r206: [316..317]
 r207: [314..315]
 r208: [310..311]
 r209: [306..307]
 r210: [303..305]
 r211: [301..302]
 r212: [299..300]
 r213: [297..298]
 r214: [293..294]
 r215: [290..292]
 r216: [288..289]
 r217: [248..287]
 r218: [283..284]
 r219: [280..282]
 r220: [278..279]
 r221: [276..277]
 r222: [262..275]
 r223: [271..272]
 r224: [268..270]
 r225: [266..267]
 r226: [264..265]
 r227: [262..263]
 r228: [260..261]
 r229: [247..259]
 r230: [255..256]
 r231: [252..254]
 r232: [250..251]
 r233: [246..249]
 r234: [242..243]
 r235: [239..241]
 r236: [237..238]
 r237: [235..236]
 r238: [233..234]
 r239: [231..232]
 r240: [227..228]
 r241: [224..226]
 r242: [222..223]
 r243: [220..221]
 r244: [218..219]
 r245: [212..213]
 r246: [209..211]
 r247: [207..208]
 r248: [200..206]
 r249: [202..203]
 r250: [200..201]
 r251: [177..199]
 r252: [195..196]
 r253: [192..194]
 r254: [190..191]
 r255: [183..189]
 r256: [185..186]
 r257: [183..184]
 r258: [181..182]
 r259: [179..180]
 r260: [177..178]
 r261: [29..30]
 r262: [26..28]
 r263: [24..25]
 r264: [22..23]
 r265: [20..21]
 r266: [18..19]
 r267: [15..17]
 r268: [15..16]
 r269: [13..14]
 r270: [11..12]
 r271: [173..174]
 r272: [170..172]
 r273: [168..169]
 r274: [163..167]
 r275: [163..164]
 r276: [144..162]
 r277: [158..159]
 r278: [155..157]
 r279: [153..154]
 r280: [148..152]
 r281: [148..149]
 r282: [146..147]
 r283: [144..145]
 r284: [140..141]
 r285: [137..139]
 r286: [135..136]
 r287: [128..134]
 r288: [130..131]
 r289: [128..129]
 r290: [107..127]
 r291: [123..124]
 r292: [120..122]
 r293: [118..119]
 r294: [111..117]
 r295: [113..114]
 r296: [111..112]
 r297: [109..110]
 r298: [107..108]
 r299: [103..104]
 r300: [100..102]
 r301: [98..99]
 r302: [91..97]
 r303: [93..94]
 r304: [91..92]
 r305: [70..90]
 r306: [86..87]
 r307: [83..85]
 r308: [81..82]
 r309: [74..80]
 r310: [76..77]
 r311: [74..75]
 r312: [72..73]
 r313: [70..71]
 r314: [66..67]
 r315: [63..65]
 r316: [61..62]
 r317: [54..60]
 r318: [56..57]
 r319: [54..55]
 r320: [33..53]
 r321: [49..50]
 r322: [46..48]
 r323: [44..45]
 r324: [37..43]
 r325: [39..40]
 r326: [37..38]
 r327: [35..36]
 r328: [33..34]
 r329: [3..4]
 r330: [1..2]
 r331: [869..870]
 r332: [867..868]
 r333: [865..866]
 r334: [863..864]
 r335: [861..862]
 r336: [9..10]
 r337: [857..858]
 r338: [853..855] [849..850]
 r339: [851..852]
 r340: [846..847]
 r341: [840..841]
 r342: [835..836]
 r343: [830..831]
 r344: [832..833]
 r345: [825..827]
 r346: [825..826]
 r347: [819..820]
 r348: [814..815]
 r349: [810..811]
 r350: [805..806]
 r351: [799..801]
 r352: [796..798]
 r353: [795..797]
 r354: [489..490]
 r355: [793..794]
 r356: [788..789]
 r357: [782..784]
 r358: [778..781]
 r359: [777..780]
 r360: [776..779]
 r361: [774..775]
 r362: [754..771]
 r363: [753..770]
 r364: [752..769]
 r365: [751..768]
 r366: [750..767]
 r367: [765..766]
 r368: [763..764]
 r369: [761..762]
 r370: [759..760]
 r371: [757..758]
 r372: [755..756]
 r373: [747..749]
 r374: [736..737]
 r375: [734..735]
 r376: [742..746]
 r377: [744..748]
 r378: [740..745]
 r379: [731..732]
 r380: [726..728]
 r381: [725..727]
 r382: [722..724]
 r383: [711..712]
 r384: [709..710]
 r385: [717..721]
 r386: [719..723]
 r387: [715..720]
 r388: [706..707]
 r389: [701..703]
 r390: [700..702]
 r391: [697..699]
 r392: [686..687]
 r393: [684..685]
 r394: [692..696]
 r395: [694..698]
 r396: [690..695]
 r397: [681..682]
 r398: [676..678]
 r399: [675..677]
 r400: [672..674]
 r401: [661..662]
 r402: [659..660]
 r403: [667..671]
 r404: [669..673]
 r405: [665..670]
 r406: [656..657]
 r407: [651..653]
 r408: [650..652]
 r409: [648..649]
 r410: [645..646]
 r411: [640..641]
 r412: [628..637]
 r413: [627..636]
 r414: [626..635]
 r415: [625..634]
 r416: [624..633]
 r417: [631..632]
 r418: [629..630]
 r419: [621..622]
 r420: [619..620]
 r421: [609..616]
 r422: [608..615]
 r423: [607..614]
 r424: [606..613]
 r425: [605..612]
 r426: [610..611]
 r427: [600..601]
 r428: [598..599]
 r429: [588..595]
 r430: [587..594]
 r431: [586..593]
 r432: [585..592]
 r433: [584..591]
 r434: [589..590]
 r435: [582..583]
 r436: [577..578]
 r437: [568..569]
 r438: [558..565]
 r439: [557..564]
 r440: [556..563]
 r441: [555..562]
 r442: [554..561]
 r443: [559..560]
 r444: [552..553]
 r445: [547..548]
 r446: [536..539]
 r447: [537..538]
 r448: [534..535]
 r449: [530..531]
 r450: [520..527]
 r451: [519..526]
 r452: [518..525]
 r453: [517..524]
 r454: [516..523]
 r455: [521..522]
 r456: [514..515]
 r457: [509..510]
 r458: [491..492]
 r459: [485..486]
 r460: [480..481]
 r461: [478..479]
 r462: [476..477]
 r463: [471..472]
 r464: [468..469]
 r465: [463..464]
 r466: [453..454]
 r467: [451..452]
 r468: [448..450]
 r469: [448..449]
 r470: [445..447]
 r471: [445..446]
 r472: [443..444]
 r473: [437..438]
 r474: [432..433]
 r475: [424..425]
 r476: [422..423]
 r477: [419..420]
 r478: [414..415]
 r479: [406..407]
 r480: [404..405]
 r481: [402..403]
 r482: [397..398]
 r483: [394..395]
 r484: [388..389]
 r485: [384..385]
 r486: [379..380]
 r487: [376..377]
 r488: [370..371]
 r489: [366..367]
 r490: [361..362]
 r491: [358..359]
 r492: [353..354]
 r493: [341..342]
 r494: [337..338]
 r495: [332..333]
 r496: [329..330]
 r497: [324..325]
 r498: [312..313]
 r499: [308..309]
 r500: [303..304]
 r501: [295..296]
 r502: [290..291]
 r503: [285..286]
 r504: [280..281]
 r505: [273..274]
 r506: [268..269]
 r507: [257..258]
 r508: [252..253]
 r509: [244..245]
 r510: [239..240]
 r511: [229..230]
 r512: [224..225]
 r513: [216..217]
 r514: [214..215]
 r515: [209..210]
 r516: [204..205]
 r517: [197..198]
 r518: [192..193]
 r519: [187..188]
 r520: [31..32]
 r521: [26..27]
 r522: [175..176]
 r523: [170..171]
 r524: [165..166]
 r525: [160..161]
 r526: [155..156]
 r527: [150..151]
 r528: [142..143]
 r529: [137..138]
 r530: [132..133]
 r531: [125..126]
 r532: [120..121]
 r533: [115..116]
 r534: [105..106]
 r535: [100..101]
 r536: [95..96]
 r537: [88..89]
 r538: [83..84]
 r539: [78..79]
 r540: [68..69]
 r541: [63..64]
 r542: [58..59]
 r543: [51..52]
 r544: [46..47]
 r545: [41..42]
 r547: [859..860]
 r548: [0..0]
 r549: [828..829]
 r550: [738..743]
 r551: [739..741]
 r552: [713..718]
 r553: [714..716]
 r554: [688..693]
 r555: [689..691]
 r556: [663..668]
 r557: [664..666]
 r558: [482..483]
 r559: [460..462]
Compressing live ranges: from 871 to 691 - 79%
Ranges after the compression:
 r87: [7..8]
 r88: [5..6]
 r89: [675..676]
 r90: [669..670]
 r91: [667..668]
 r92: [665..666]
 r93: [661..662]
 r94: [659..660]
 r95: [647..658]
 r96: [649..650]
 r97: [647..648]
 r98: [643..644]
 r99: [641..642]
 r100: [639..640]
 r101: [635..636]
 r102: [633..634]
 r103: [631..632]
 r104: [629..630]
 r105: [427..428]
 r106: [623..624]
 r107: [621..622]
 r108: [619..620]
 r109: [617..618]
 r110: [611..612]
 r111: [585..586]
 r112: [583..584]
 r113: [567..568]
 r114: [565..566]
 r115: [549..550]
 r116: [547..548]
 r117: [531..532]
 r118: [529..530]
 r119: [523..524]
 r120: [521..522]
 r121: [517..518]
 r122: [511..512]
 r123: [507..508]
 r124: [503..504]
 r125: [501..502]
 r126: [497..498]
 r127: [491..492]
 r128: [489..490]
 r129: [487..488]
 r130: [485..486]
 r131: [483..484]
 r132: [483..484]
 r133: [479..480]
 r134: [473..474]
 r135: [471..472]
 r136: [469..470]
 r137: [467..468]
 r138: [459..466]
 r139: [465..466]
 r140: [459..460]
 r141: [455..456]
 r142: [449..450]
 r143: [447..448]
 r144: [445..446]
 r145: [443..444]
 r146: [435..442]
 r147: [441..442]
 r148: [439..440]
 r149: [437..438]
 r150: [435..436]
 r151: [433..434]
 r152: [431..432]
 r153: [421..424]
 r154: [415..416]
 r155: [403..414]
 r156: [409..412]
 r157: [409..410]
 r158: [405..408]
 r159: [403..404]
 r160: [401..402]
 r161: [399..400]
 r162: [389..390]
 r163: [387..388]
 r164: [383..384]
 r165: [381..382]
 r166: [379..380]
 r167: [377..378]
 r168: [375..376]
 r169: [359..370]
 r170: [367..368]
 r171: [365..366]
 r172: [363..364]
 r173: [361..362]
 r174: [359..360]
 r175: [351..352]
 r176: [349..350]
 r177: [339..348]
 r178: [345..346]
 r179: [343..344]
 r180: [339..340]
 r181: [335..336]
 r182: [333..334]
 r183: [323..332]
 r184: [329..330]
 r185: [327..328]
 r186: [323..324]
 r187: [319..320]
 r188: [317..318]
 r189: [297..316]
 r190: [313..314]
 r191: [311..312]
 r192: [309..310]
 r193: [307..308]
 r194: [305..306]
 r195: [303..304]
 r196: [301..302]
 r197: [297..298]
 r198: [293..294]
 r199: [291..292]
 r200: [271..290]
 r201: [287..288]
 r202: [285..286]
 r203: [283..284]
 r204: [281..282]
 r205: [279..280]
 r206: [277..278]
 r207: [275..276]
 r208: [271..272]
 r209: [267..268]
 r210: [265..266]
 r211: [263..264]
 r212: [261..262]
 r213: [259..260]
 r214: [255..256]
 r215: [253..254]
 r216: [251..252]
 r217: [217..250]
 r218: [247..248]
 r219: [245..246]
 r220: [243..244]
 r221: [241..242]
 r222: [229..240]
 r223: [237..238]
 r224: [235..236]
 r225: [233..234]
 r226: [231..232]
 r227: [229..230]
 r228: [227..228]
 r229: [217..226]
 r230: [223..224]
 r231: [221..222]
 r232: [219..220]
 r233: [217..218]
 r234: [213..214]
 r235: [211..212]
 r236: [209..210]
 r237: [207..208]
 r238: [205..206]
 r239: [203..204]
 r240: [199..200]
 r241: [197..198]
 r242: [195..196]
 r243: [193..194]
 r244: [191..192]
 r245: [185..186]
 r246: [183..184]
 r247: [181..182]
 r248: [175..180]
 r249: [177..178]
 r250: [175..176]
 r251: [155..174]
 r252: [171..172]
 r253: [169..170]
 r254: [167..168]
 r255: [161..166]
 r256: [163..164]
 r257: [161..162]
 r258: [159..160]
 r259: [157..158]
 r260: [155..156]
 r261: [27..28]
 r262: [25..26]
 r263: [23..24]
 r264: [21..22]
 r265: [19..20]
 r266: [17..18]
 r267: [15..16]
 r268: [15..16]
 r269: [13..14]
 r270: [11..12]
 r271: [151..152]
 r272: [149..150]
 r273: [147..148]
 r274: [143..146]
 r275: [143..144]
 r276: [127..142]
 r277: [139..140]
 r278: [137..138]
 r279: [135..136]
 r280: [131..134]
 r281: [131..132]
 r282: [129..130]
 r283: [127..128]
 r284: [123..124]
 r285: [121..122]
 r286: [119..120]
 r287: [113..118]
 r288: [115..116]
 r289: [113..114]
 r290: [95..112]
 r291: [109..110]
 r292: [107..108]
 r293: [105..106]
 r294: [99..104]
 r295: [101..102]
 r296: [99..100]
 r297: [97..98]
 r298: [95..96]
 r299: [91..92]
 r300: [89..90]
 r301: [87..88]
 r302: [81..86]
 r303: [83..84]
 r304: [81..82]
 r305: [63..80]
 r306: [77..78]
 r307: [75..76]
 r308: [73..74]
 r309: [67..72]
 r310: [69..70]
 r311: [67..68]
 r312: [65..66]
 r313: [63..64]
 r314: [59..60]
 r315: [57..58]
 r316: [55..56]
 r317: [49..54]
 r318: [51..52]
 r319: [49..50]
 r320: [31..48]
 r321: [45..46]
 r322: [43..44]
 r323: [41..42]
 r324: [35..40]
 r325: [37..38]
 r326: [35..36]
 r327: [33..34]
 r328: [31..32]
 r329: [3..4]
 r330: [1..2]
 r331: [689..690]
 r332: [687..688]
 r333: [685..686]
 r334: [683..684]
 r335: [681..682]
 r336: [9..10]
 r337: [677..678]
 r338: [675..676] [671..672]
 r339: [673..674]
 r340: [669..670]
 r341: [663..664]
 r342: [659..660]
 r343: [655..656]
 r344: [657..658]
 r345: [651..652]
 r346: [651..652]
 r347: [645..646]
 r348: [641..642]
 r349: [637..638]
 r350: [633..634]
 r351: [629..630]
 r352: [627..628]
 r353: [627..628]
 r354: [429..430]
 r355: [625..626]
 r356: [621..622]
 r357: [617..618]
 r358: [615..616]
 r359: [615..616]
 r360: [615..616]
 r361: [613..614]
 r362: [599..610]
 r363: [599..610]
 r364: [599..610]
 r365: [599..610]
 r366: [599..610]
 r367: [609..610]
 r368: [607..608]
 r369: [605..606]
 r370: [603..604]
 r371: [601..602]
 r372: [599..600]
 r373: [597..598]
 r374: [589..590]
 r375: [587..588]
 r376: [593..596]
 r377: [595..598]
 r378: [591..596]
 r379: [585..586]
 r380: [581..582]
 r381: [581..582]
 r382: [579..580]
 r383: [571..572]
 r384: [569..570]
 r385: [575..578]
 r386: [577..580]
 r387: [573..578]
 r388: [567..568]
 r389: [563..564]
 r390: [563..564]
 r391: [561..562]
 r392: [553..554]
 r393: [551..552]
 r394: [557..560]
 r395: [559..562]
 r396: [555..560]
 r397: [549..550]
 r398: [545..546]
 r399: [545..546]
 r400: [543..544]
 r401: [535..536]
 r402: [533..534]
 r403: [539..542]
 r404: [541..544]
 r405: [537..542]
 r406: [531..532]
 r407: [527..528]
 r408: [527..528]
 r409: [525..526]
 r410: [523..524]
 r411: [519..520]
 r412: [513..516]
 r413: [513..516]
 r414: [513..516]
 r415: [513..516]
 r416: [513..516]
 r417: [515..516]
 r418: [513..514]
 r419: [511..512]
 r420: [509..510]
 r421: [505..506]
 r422: [505..506]
 r423: [505..506]
 r424: [505..506]
 r425: [505..506]
 r426: [505..506]
 r427: [501..502]
 r428: [499..500]
 r429: [495..496]
 r430: [495..496]
 r431: [495..496]
 r432: [495..496]
 r433: [495..496]
 r434: [495..496]
 r435: [493..494]
 r436: [489..490]
 r437: [481..482]
 r438: [477..478]
 r439: [477..478]
 r440: [477..478]
 r441: [477..478]
 r442: [477..478]
 r443: [477..478]
 r444: [475..476]
 r445: [471..472]
 r446: [463..464]
 r447: [463..464]
 r448: [461..462]
 r449: [457..458]
 r450: [453..454]
 r451: [453..454]
 r452: [453..454]
 r453: [453..454]
 r454: [453..454]
 r455: [453..454]
 r456: [451..452]
 r457: [447..448]
 r458: [431..432]
 r459: [425..426]
 r460: [421..422]
 r461: [419..420]
 r462: [417..418]
 r463: [413..414]
 r464: [411..412]
 r465: [407..408]
 r466: [399..400]
 r467: [397..398]
 r468: [395..396]
 r469: [395..396]
 r470: [393..394]
 r471: [393..394]
 r472: [391..392]
 r473: [385..386]
 r474: [381..382]
 r475: [373..374]
 r476: [371..372]
 r477: [369..370]
 r478: [365..366]
 r479: [357..358]
 r480: [355..356]
 r481: [353..354]
 r482: [349..350]
 r483: [347..348]
 r484: [341..342]
 r485: [337..338]
 r486: [333..334]
 r487: [331..332]
 r488: [325..326]
 r489: [321..322]
 r490: [317..318]
 r491: [315..316]
 r492: [311..312]
 r493: [299..300]
 r494: [295..296]
 r495: [291..292]
 r496: [289..290]
 r497: [285..286]
 r498: [273..274]
 r499: [269..270]
 r500: [265..266]
 r501: [257..258]
 r502: [253..254]
 r503: [249..250]
 r504: [245..246]
 r505: [239..240]
 r506: [235..236]
 r507: [225..226]
 r508: [221..222]
 r509: [215..216]
 r510: [211..212]
 r511: [201..202]
 r512: [197..198]
 r513: [189..190]
 r514: [187..188]
 r515: [183..184]
 r516: [179..180]
 r517: [173..174]
 r518: [169..170]
 r519: [165..166]
 r520: [29..30]
 r521: [25..26]
 r522: [153..154]
 r523: [149..150]
 r524: [145..146]
 r525: [141..142]
 r526: [137..138]
 r527: [133..134]
 r528: [125..126]
 r529: [121..122]
 r530: [117..118]
 r531: [111..112]
 r532: [107..108]
 r533: [103..104]
 r534: [93..94]
 r535: [89..90]
 r536: [85..86]
 r537: [79..80]
 r538: [75..76]
 r539: [71..72]
 r540: [61..62]
 r541: [57..58]
 r542: [53..54]
 r543: [47..48]
 r544: [43..44]
 r545: [39..40]
 r547: [679..680]
 r548: [0..0]
 r549: [653..654]
 r550: [591..594]
 r551: [591..592]
 r552: [573..576]
 r553: [573..574]
 r554: [555..558]
 r555: [555..556]
 r556: [537..540]
 r557: [537..538]
 r558: [423..424]
 r559: [405..406]

********** Assignment #1: **********

	 Assigning to 550 (cl=CREG, orig=374, freq=3, tfirst=550, tfreq=3)...
	   Assign 2 to reload r550 (freq=3)
	 Assigning to 552 (cl=CREG, orig=383, freq=3, tfirst=552, tfreq=3)...
	   Assign 2 to reload r552 (freq=3)
	 Assigning to 554 (cl=CREG, orig=392, freq=3, tfirst=554, tfreq=3)...
	   Assign 2 to reload r554 (freq=3)
	 Assigning to 556 (cl=CREG, orig=401, freq=3, tfirst=556, tfreq=3)...
	   Assign 2 to reload r556 (freq=3)
	 Assigning to 551 (cl=DIREG, orig=376, freq=2, tfirst=551, tfreq=2)...
	   Assign 5 to reload r551 (freq=2)
	 Assigning to 553 (cl=DIREG, orig=385, freq=2, tfirst=553, tfreq=2)...
	   Assign 5 to reload r553 (freq=2)
	 Assigning to 555 (cl=DIREG, orig=394, freq=2, tfirst=555, tfreq=2)...
	   Assign 5 to reload r555 (freq=2)
	 Assigning to 557 (cl=DIREG, orig=403, freq=2, tfirst=557, tfreq=2)...
	   Assign 5 to reload r557 (freq=2)
	 Assigning to 549 (cl=GENERAL_REGS, orig=345, freq=3, tfirst=549, tfreq=3)...
	   Assign 0 to reload r549 (freq=3)
	 Assigning to 558 (cl=GENERAL_REGS, orig=460, freq=3, tfirst=558, tfreq=3)...
	   Assign 1 to reload r558 (freq=3)
	 Assigning to 547 (cl=INDEX_REGS, orig=547, freq=1, tfirst=547, tfreq=1)...
	   Assign 0 to reload r547 (freq=1)
	 Assigning to 548 (cl=INDEX_REGS, orig=548, freq=1, tfirst=548, tfreq=1)...
	   Assign 3 to reload r548 (freq=1)
	 Assigning to 559 (cl=SSE_REGS, orig=159, freq=3, tfirst=559, tfreq=3)...
	   Assign 23 to reload r559 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=832, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=800, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 31
changing reg in insn 34
changing reg in insn 32
changing reg in insn 34
changing reg in insn 37
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 48
changing reg in insn 58
changing reg in insn 53
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 81
changing reg in insn 99
changing reg in insn 100
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 127
changing reg in insn 128
changing reg in insn 162
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 177
changing reg in insn 180
changing reg in insn 180
changing reg in insn 181
changing reg in insn 192
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 207
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 218
changing reg in insn 221
changing reg in insn 223
changing reg in insn 224
changing reg in insn 231
changing reg in insn 232
changing reg in insn 253
changing reg in insn 255
changing reg in insn 262
changing reg in insn 263
changing reg in insn 283
changing reg in insn 284
changing reg in insn 284
changing reg in insn 286
changing reg in insn 293
changing reg in insn 294
changing reg in insn 315
changing reg in insn 316
changing reg in insn 316
changing reg in insn 318
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 322
changing reg in insn 321
changing reg in insn 322
changing reg in insn 329
changing reg in insn 330
changing reg in insn 351
changing reg in insn 352
changing reg in insn 352
changing reg in insn 354
changing reg in insn 354
changing reg in insn 355
changing reg in insn 355
changing reg in insn 356
changing reg in insn 356
changing reg in insn 364
changing reg in insn 357
changing reg in insn 358
changing reg in insn 363
changing reg in insn 364
changing reg in insn 371
changing reg in insn 372
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 396
changing reg in insn 396
changing reg in insn 397
changing reg in insn 397
changing reg in insn 398
changing reg in insn 398
changing reg in insn 403
changing reg in insn 399
changing reg in insn 400
changing reg in insn 400
changing reg in insn 401
changing reg in insn 401
changing reg in insn 402
changing reg in insn 402
changing reg in insn 403
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 407
changing reg in insn 416
changing reg in insn 420
changing reg in insn 421
changing reg in insn 421
changing reg in insn 423
changing reg in insn 425
changing reg in insn 426
changing reg in insn 428
changing reg in insn 429
changing reg in insn 430
changing reg in insn 430
changing reg in insn 432
changing reg in insn 442
changing reg in insn 443
changing reg in insn 443
changing reg in insn 444
changing reg in insn 446
changing reg in insn 447
changing reg in insn 447
changing reg in insn 449
changing reg in insn 449
changing reg in insn 450
changing reg in insn 450
changing reg in insn 451
changing reg in insn 451
changing reg in insn 452
changing reg in insn 455
changing reg in insn 463
changing reg in insn 457
changing reg in insn 458
changing reg in insn 458
changing reg in insn 460
changing reg in insn 460
changing reg in insn 461
changing reg in insn 461
changing reg in insn 462
changing reg in insn 462
changing reg in insn 463
changing reg in insn 472
changing reg in insn 473
changing reg in insn 473
changing reg in insn 475
changing reg in insn 475
changing reg in insn 475
changing reg in insn 483
changing reg in insn 477
changing reg in insn 478
changing reg in insn 478
changing reg in insn 479
changing reg in insn 482
changing reg in insn 483
changing reg in insn 485
changing reg in insn 486
changing reg in insn 486
changing reg in insn 488
changing reg in insn 488
changing reg in insn 488
changing reg in insn 496
changing reg in insn 490
changing reg in insn 491
changing reg in insn 491
changing reg in insn 492
changing reg in insn 495
changing reg in insn 496
changing reg in insn 498
changing reg in insn 499
changing reg in insn 499
changing reg in insn 501
changing reg in insn 501
changing reg in insn 501
changing reg in insn 515
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 506
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 508
changing reg in insn 508
changing reg in insn 509
changing reg in insn 509
changing reg in insn 510
changing reg in insn 510
changing reg in insn 511
changing reg in insn 514
changing reg in insn 515
changing reg in insn 517
changing reg in insn 518
changing reg in insn 518
changing reg in insn 520
changing reg in insn 520
changing reg in insn 520
changing reg in insn 534
changing reg in insn 522
changing reg in insn 523
changing reg in insn 523
changing reg in insn 525
changing reg in insn 525
changing reg in insn 526
changing reg in insn 526
changing reg in insn 527
changing reg in insn 527
changing reg in insn 528
changing reg in insn 528
changing reg in insn 529
changing reg in insn 529
changing reg in insn 530
changing reg in insn 533
changing reg in insn 534
changing reg in insn 537
changing reg in insn 538
changing reg in insn 538
changing reg in insn 540
changing reg in insn 540
changing reg in insn 541
changing reg in insn 541
changing reg in insn 542
changing reg in insn 544
changing reg in insn 545
changing reg in insn 555
changing reg in insn 556
changing reg in insn 556
changing reg in insn 558
changing reg in insn 558
changing reg in insn 559
changing reg in insn 559
changing reg in insn 582
changing reg in insn 561
changing reg in insn 562
changing reg in insn 562
changing reg in insn 564
changing reg in insn 564
changing reg in insn 565
changing reg in insn 565
changing reg in insn 566
changing reg in insn 566
changing reg in insn 568
changing reg in insn 569
changing reg in insn 569
changing reg in insn 571
changing reg in insn 571
changing reg in insn 572
changing reg in insn 572
changing reg in insn 573
changing reg in insn 573
changing reg in insn 574
changing reg in insn 575
changing reg in insn 575
changing reg in insn 584
changing reg in insn 577
changing reg in insn 578
changing reg in insn 578
changing reg in insn 580
changing reg in insn 580
changing reg in insn 581
changing reg in insn 581
changing reg in insn 585
changing reg in insn 588
changing reg in insn 589
changing reg in insn 589
changing reg in insn 591
changing reg in insn 591
changing reg in insn 592
changing reg in insn 592
changing reg in insn 593
changing reg in insn 593
changing reg in insn 594
changing reg in insn 594
changing reg in insn 595
changing reg in insn 599
changing reg in insn 600
changing reg in insn 600
changing reg in insn 602
changing reg in insn 602
changing reg in insn 603
changing reg in insn 603
changing reg in insn 604
changing reg in insn 604
changing reg in insn 605
changing reg in insn 612
changing reg in insn 613
changing reg in insn 613
changing reg in insn 615
changing reg in insn 615
changing reg in insn 616
changing reg in insn 616
changing reg in insn 618
changing reg in insn 619
changing reg in insn 619
changing reg in insn 620
changing reg in insn 633
changing reg in insn 622
changing reg in insn 623
changing reg in insn 623
changing reg in insn 625
changing reg in insn 625
changing reg in insn 626
changing reg in insn 626
changing reg in insn 630
changing reg in insn 628
changing reg in insn 629
changing reg in insn 629
changing reg in insn 630
changing reg in insn 630
changing reg in insn 631
changing reg in insn 631
changing reg in insn 632
changing reg in insn 632
changing reg in insn 633
changing reg in insn 643
changing reg in insn 644
changing reg in insn 644
changing reg in insn 646
changing reg in insn 646
changing reg in insn 647
changing reg in insn 647
changing reg in insn 648
changing reg in insn 648
changing reg in insn 649
changing reg in insn 649
changing reg in insn 650
changing reg in insn 651
changing reg in insn 652
changing reg in insn 653
changing reg in insn 653
changing reg in insn 654
changing reg in insn 658
changing reg in insn 659
changing reg in insn 659
changing reg in insn 661
changing reg in insn 661
changing reg in insn 662
changing reg in insn 662
changing reg in insn 665
changing reg in insn 664
changing reg in insn 665
changing reg in insn 665
changing reg in insn 676
changing reg in insn 667
changing reg in insn 668
changing reg in insn 668
changing reg in insn 670
changing reg in insn 670
changing reg in insn 671
changing reg in insn 671
changing reg in insn 673
changing reg in insn 674
changing reg in insn 675
changing reg in insn 675
changing reg in insn 676
changing reg in insn 678
changing reg in insn 679
changing reg in insn 679
changing reg in insn 681
changing reg in insn 681
changing reg in insn 682
changing reg in insn 682
changing reg in insn 684
changing reg in insn 685
changing reg in insn 685
changing reg in insn 686
changing reg in insn 698
changing reg in insn 688
changing reg in insn 689
changing reg in insn 689
changing reg in insn 691
changing reg in insn 691
changing reg in insn 692
changing reg in insn 692
changing reg in insn 696
changing reg in insn 694
changing reg in insn 695
changing reg in insn 695
changing reg in insn 696
changing reg in insn 696
changing reg in insn 697
changing reg in insn 697
changing reg in insn 698
changing reg in insn 700
changing reg in insn 701
changing reg in insn 701
changing reg in insn 703
changing reg in insn 703
changing reg in insn 704
changing reg in insn 704
changing reg in insn 706
changing reg in insn 707
changing reg in insn 707
changing reg in insn 708
changing reg in insn 720
changing reg in insn 710
changing reg in insn 711
changing reg in insn 711
changing reg in insn 713
changing reg in insn 713
changing reg in insn 714
changing reg in insn 714
changing reg in insn 718
changing reg in insn 716
changing reg in insn 717
changing reg in insn 717
changing reg in insn 718
changing reg in insn 718
changing reg in insn 719
changing reg in insn 719
changing reg in insn 720
changing reg in insn 722
changing reg in insn 723
changing reg in insn 723
changing reg in insn 725
changing reg in insn 725
changing reg in insn 726
changing reg in insn 726
changing reg in insn 728
changing reg in insn 729
changing reg in insn 729
changing reg in insn 730
changing reg in insn 742
changing reg in insn 732
changing reg in insn 733
changing reg in insn 733
changing reg in insn 735
changing reg in insn 735
changing reg in insn 736
changing reg in insn 736
changing reg in insn 740
changing reg in insn 738
changing reg in insn 739
changing reg in insn 739
changing reg in insn 740
changing reg in insn 740
changing reg in insn 741
changing reg in insn 741
changing reg in insn 742
changing reg in insn 755
changing reg in insn 758
changing reg in insn 758
changing reg in insn 762
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 25
changing reg in insn 30
changing reg in insn 31
changing reg in insn 36
changing reg in insn 34
changing reg in insn 33
changing reg in insn 32
changing reg in insn 37
changing reg in insn 35
changing reg in insn 34
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 52
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 80
changing reg in insn 83
changing reg in insn 85
changing reg in insn 87
changing reg in insn 86
changing reg in insn 89
changing reg in insn 95
changing reg in insn 97
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 109
changing reg in insn 112
changing reg in insn 114
changing reg in insn 117
changing reg in insn 115
changing reg in insn 118
changing reg in insn 116
changing reg in insn 120
changing reg in insn 123
changing reg in insn 125
changing reg in insn 131
changing reg in insn 148
changing reg in insn 132
changing reg in insn 149
changing reg in insn 133
changing reg in insn 150
changing reg in insn 134
changing reg in insn 151
changing reg in insn 135
changing reg in insn 153
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 163
changing reg in insn 158
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 158
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 169
changing reg in insn 168
changing reg in insn 170
changing reg in insn 178
changing reg in insn 173
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 173
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 179
changing reg in insn 180
changing reg in insn 182
changing reg in insn 184
changing reg in insn 183
changing reg in insn 185
changing reg in insn 193
changing reg in insn 188
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 188
changing reg in insn 187
changing reg in insn 189
changing reg in insn 190
changing reg in insn 194
changing reg in insn 195
changing reg in insn 197
changing reg in insn 199
changing reg in insn 198
changing reg in insn 200
changing reg in insn 208
changing reg in insn 203
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 203
changing reg in insn 202
changing reg in insn 204
changing reg in insn 205
changing reg in insn 209
changing reg in insn 210
changing reg in insn 212
changing reg in insn 214
changing reg in insn 213
changing reg in insn 215
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 227
changing reg in insn 229
changing reg in insn 235
changing reg in insn 244
changing reg in insn 236
changing reg in insn 245
changing reg in insn 237
changing reg in insn 246
changing reg in insn 238
changing reg in insn 247
changing reg in insn 239
changing reg in insn 249
changing reg in insn 240
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 254
changing reg in insn 255
changing reg in insn 258
changing reg in insn 260
changing reg in insn 266
changing reg in insn 274
changing reg in insn 267
changing reg in insn 275
changing reg in insn 268
changing reg in insn 276
changing reg in insn 269
changing reg in insn 277
changing reg in insn 270
changing reg in insn 279
changing reg in insn 272
changing reg in insn 273
changing reg in insn 285
changing reg in insn 286
changing reg in insn 289
changing reg in insn 291
changing reg in insn 297
changing reg in insn 305
changing reg in insn 298
changing reg in insn 306
changing reg in insn 299
changing reg in insn 307
changing reg in insn 300
changing reg in insn 308
changing reg in insn 301
changing reg in insn 310
changing reg in insn 303
changing reg in insn 304
changing reg in insn 314
changing reg in insn 315
changing reg in insn 317
changing reg in insn 325
changing reg in insn 327
changing reg in insn 333
changing reg in insn 341
changing reg in insn 334
changing reg in insn 342
changing reg in insn 335
changing reg in insn 343
changing reg in insn 336
changing reg in insn 344
changing reg in insn 337
changing reg in insn 346
changing reg in insn 339
changing reg in insn 340
changing reg in insn 350
changing reg in insn 351
changing reg in insn 353
changing reg in insn 361
changing reg in insn 358
changing reg in insn 362
changing reg in insn 361
changing reg in insn 360
changing reg in insn 359
changing reg in insn 359
changing reg in insn 361
changing reg in insn 362
changing reg in insn 363
changing reg in insn 367
changing reg in insn 369
changing reg in insn 375
changing reg in insn 383
changing reg in insn 376
changing reg in insn 384
changing reg in insn 377
changing reg in insn 385
changing reg in insn 378
changing reg in insn 386
changing reg in insn 379
changing reg in insn 388
changing reg in insn 381
changing reg in insn 382
changing reg in insn 392
changing reg in insn 393
changing reg in insn 395
changing reg in insn 406
changing reg in insn 407
changing reg in insn 415
changing reg in insn 416
changing reg in insn 418
changing reg in insn 419
changing reg in insn 419
changing reg in insn 420
changing reg in insn 422
changing reg in insn 423
changing reg in insn 424
changing reg in insn 425
changing reg in insn 427
changing reg in insn 431
changing reg in insn 432
changing reg in insn 433
changing reg in insn 434
changing reg in insn 435
changing reg in insn 437
changing reg in insn 436
changing reg in insn 437
changing reg in insn 438
changing reg in insn 440
changing reg in insn 439
changing reg in insn 440
changing reg in insn 441
changing reg in insn 442
changing reg in insn 445
changing reg in insn 446
changing reg in insn 448
changing reg in insn 452
changing reg in insn 453
changing reg in insn 454
changing reg in insn 455
changing reg in insn 456
changing reg in insn 457
changing reg in insn 459
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 468
changing reg in insn 471
changing reg in insn 472
changing reg in insn 474
changing reg in insn 475
changing reg in insn 476
changing reg in insn 477
changing reg in insn 481
changing reg in insn 482
changing reg in insn 484
changing reg in insn 485
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 490
changing reg in insn 494
changing reg in insn 495
changing reg in insn 497
changing reg in insn 498
changing reg in insn 500
changing reg in insn 501
changing reg in insn 502
changing reg in insn 503
changing reg in insn 505
changing reg in insn 513
changing reg in insn 514
changing reg in insn 516
changing reg in insn 517
changing reg in insn 519
changing reg in insn 520
changing reg in insn 521
changing reg in insn 522
changing reg in insn 524
changing reg in insn 532
changing reg in insn 533
changing reg in insn 536
changing reg in insn 537
changing reg in insn 539
changing reg in insn 554
changing reg in insn 555
changing reg in insn 557
changing reg in insn 560
changing reg in insn 561
changing reg in insn 563
changing reg in insn 567
changing reg in insn 568
changing reg in insn 570
changing reg in insn 576
changing reg in insn 577
changing reg in insn 579
changing reg in insn 587
changing reg in insn 588
changing reg in insn 590
changing reg in insn 598
changing reg in insn 599
changing reg in insn 601
changing reg in insn 605
changing reg in insn 606
changing reg in insn 611
changing reg in insn 612
changing reg in insn 614
changing reg in insn 617
changing reg in insn 618
changing reg in insn 621
changing reg in insn 622
changing reg in insn 624
changing reg in insn 627
changing reg in insn 628
changing reg in insn 642
changing reg in insn 643
changing reg in insn 645
changing reg in insn 657
changing reg in insn 658
changing reg in insn 660
changing reg in insn 663
changing reg in insn 664
changing reg in insn 666
changing reg in insn 667
changing reg in insn 669
changing reg in insn 672
changing reg in insn 673
changing reg in insn 677
changing reg in insn 678
changing reg in insn 680
changing reg in insn 683
changing reg in insn 684
changing reg in insn 687
changing reg in insn 688
changing reg in insn 690
changing reg in insn 693
changing reg in insn 694
changing reg in insn 699
changing reg in insn 700
changing reg in insn 702
changing reg in insn 705
changing reg in insn 706
changing reg in insn 709
changing reg in insn 710
changing reg in insn 712
changing reg in insn 715
changing reg in insn 716
changing reg in insn 721
changing reg in insn 722
changing reg in insn 724
changing reg in insn 727
changing reg in insn 728
changing reg in insn 731
changing reg in insn 732
changing reg in insn 734
changing reg in insn 737
changing reg in insn 738
changing reg in insn 19
changing reg in insn 763
deleting insn with uid = 81.
deleting insn with uid = 87.
deleting insn with uid = 110.
deleting insn with uid = 117.
deleting insn with uid = 118.
deleting insn with uid = 150.
deleting insn with uid = 151.
deleting insn with uid = 785.
deleting insn with uid = 788.
deleting insn with uid = 791.
deleting insn with uid = 794.
deleting insn with uid = 246.
deleting insn with uid = 247.
deleting insn with uid = 276.
deleting insn with uid = 277.
deleting insn with uid = 307.
deleting insn with uid = 308.
deleting insn with uid = 343.
deleting insn with uid = 344.
deleting insn with uid = 385.
deleting insn with uid = 386.
deleting insn with uid = 400.
deleting insn with uid = 402.
deleting insn with uid = 798.
deleting insn with uid = 799.
deleting insn with uid = 584.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 98.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 126.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 201.
verify found no changes in insn with uid = 216.
verify found no changes in insn with uid = 222.
verify found no changes in insn with uid = 230.
verify found no changes in insn with uid = 251.
verify found no changes in insn with uid = 261.
verify found no changes in insn with uid = 281.
verify found no changes in insn with uid = 292.
verify found no changes in insn with uid = 312.
verify found no changes in insn with uid = 328.
verify found no changes in insn with uid = 348.
verify found no changes in insn with uid = 370.
verify found no changes in insn with uid = 390.
verify found no changes in insn with uid = 480.
verify found no changes in insn with uid = 493.
verify found no changes in insn with uid = 512.
verify found no changes in insn with uid = 531.
verify found no changes in insn with uid = 543.
verify found no changes in insn with uid = 586.
verify found no changes in insn with uid = 765.


int read_fdf_data(int*, Preprocess*, IOFiles*, Data_file_header**, Data_block_header**, Precision2*, FILE**, Precision1*, float**, float**, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 37[r8] 38[r9]
;;  ref usage 	r0={351d,334u} r1={112d,81u,27e} r2={72d,40u,8e} r3={6d,5u} r4={70d,38u,1e} r5={78d,42u} r6={1d,249u} r7={23d,101u} r8={32d} r9={32d} r10={32d} r11={32d} r12={32d} r13={32d} r14={32d} r15={32d} r17={261d,18u} r18={32d} r19={32d} r20={1d,1u,36e} r21={43d,10u} r22={34d,1u} r23={36d,3u} r24={33d} r25={33d} r26={33d} r27={33d} r28={33d} r29={32d} r30={32d} r31={32d} r32={32d} r33={32d} r34={32d} r35={32d} r36={32d} r37={45d,13u} r38={39d,7u} r39={32d} r40={32d} r45={32d} r46={32d} r47={32d} r48={32d} r49={32d} r50={32d} r51={32d} r52={32d} r53={32d} r54={32d} r55={32d} r56={32d} r57={32d} r58={32d} r59={32d} r60={32d} r61={32d} r62={32d} r63={32d} r64={32d} r65={32d} r66={32d} r67={32d} r68={32d} r69={32d} r70={32d} r71={32d} r72={32d} r73={32d} r74={32d} r75={32d} r76={32d} r77={32d} r78={32d} r79={32d} r80={32d} 
;;    total ref usage 4144{3129d,943u,72e} in 692{660 regular + 32 call} insns.
(note 1 0 20 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 331 332 333 334 335
(note 20 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 20 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -744 [0xfffffffffffffd18])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -760 [0xfffffffffffffd08])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])
        (reg/f:DI 0 ax [331])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])
        (reg/f:DI 0 ax [332])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [333])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 out_data+0 S8 A64])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -792 [0xfffffffffffffce8])) [0 out_data+0 S8 A64])
        (reg/f:DI 0 ax [333])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [334])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 scratch_data+0 S8 A64])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -800 [0xfffffffffffffce0])) [0 scratch_data+0 S8 A64])
        (reg/f:DI 0 ax [334])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])
        (reg/f:DI 0 ax [335])) read_fdf.cpp:24 89 {*movdi_internal}
     (nil))
(note 18 17 19 2 NOTE_INSN_FUNCTION_BEG)
(insn 19 18 22 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.5855+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [547])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:24 986 {stack_tls_protect_set_di}
     (nil))
(insn 22 19 750 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])
        (const_int 0 [0])) read_fdf.cpp:33 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              34 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 336
(code_label 750 22 23 3 19 "" [1 uses])
(note 23 750 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg/f:DI 0 ax [336])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 fid+0 S8 A64])) read_fdf.cpp:33 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:SI 0 ax [orig:87 D.5829 ] [87])
        (mem:SI (reg/f:DI 0 ax [336]) [0 *fid_22(D)+0 S4 A32])) read_fdf.cpp:33 90 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg:SI 0 ax [orig:88 D.5829 ] [88])
                (plus:SI (reg:SI 0 ax [orig:87 D.5829 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:33 217 {*addsi_1}
     (nil))
(insn 27 26 28 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.5829 ] [88])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32]))) read_fdf.cpp:33 7 {*cmpsi_1}
     (nil))
(jump_insn 28 27 29 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 753)
            (pc))) read_fdf.cpp:33 612 {*jcc_1}
     (nil)
 -> 753)
;;  succ:       35
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 337 338 339 340
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg:SI 0 ax [337])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:35 90 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DI 1 dx [orig:89 D.5830 ] [89])
        (sign_extend:DI (reg:SI 0 ax [337]))) read_fdf.cpp:35 142 {*extendsidi2_rex64}
     (nil))
(insn 32 31 33 4 (set (reg:DI 0 ax [338])
        (reg:DI 1 dx [orig:89 D.5830 ] [89])) read_fdf.cpp:35 89 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg:DI 0 ax [338])
                (ashift:DI (reg:DI 0 ax [338])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:35 512 {*ashldi3_1}
     (nil))
(insn 34 33 35 4 (parallel [
            (set (reg:DI 0 ax [338])
                (plus:DI (reg:DI 0 ax [338])
                    (reg:DI 1 dx [orig:89 D.5830 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:35 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:89 D.5830 ] [89])
            (const_int 9 [0x9]))
        (nil)))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 0 ax [339])
                (ashift:DI (reg:DI 0 ax [338])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:35 512 {*ashldi3_1}
     (nil))
(insn 36 35 37 4 (set (reg:DI 0 ax [338])
        (reg:DI 0 ax [339])) read_fdf.cpp:35 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:DI 1 dx [orig:90 D.5830 ] [90])
        (reg:DI 0 ax [338])) read_fdf.cpp:35 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg/f:DI 0 ax [340])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 preprocess+0 S8 A64])) read_fdf.cpp:35 89 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.5831 ] [91])
                (plus:DI (reg/f:DI 0 ax [340])
                    (reg:DI 1 dx [orig:90 D.5830 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:35 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -720 [0xfffffffffffffd30])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.5830 ] [90]))
        (nil)))
(insn 40 39 41 4 (set (reg:SI 0 ax [orig:92 D.5829 ] [92])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:91 D.5831 ] [91])
                (const_int 20 [0x14])) [0 _28->file_type+0 S4 A32])) read_fdf.cpp:35 90 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.5829 ] [92])
            (const_int 0 [0]))) read_fdf.cpp:35 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 42 41 43 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 747)
            (pc))) read_fdf.cpp:35 612 {*jcc_1}
     (nil)
 -> 747)
;;  succ:       5 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 93 94 95 96 97 98 99 100 341 342 343 344 345 346 347 348
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:SI 0 ax [341])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:37 90 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:DI 0 ax [orig:93 D.5830 ] [93])
        (sign_extend:DI (reg:SI 0 ax [341]))) read_fdf.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 5 (parallel [
            (set (reg:DI 1 dx [orig:94 D.5830 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.5830 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:37 512 {*ashldi3_1}
     (nil))
(insn 47 46 48 5 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (parallel [
            (set (reg/f:DI 3 bx [orig:95 D.5832 ] [95])
                (plus:DI (reg:DI 1 dx [orig:94 D.5830 ] [94])
                    (reg/f:DI 0 ax [342])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:37 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.5830 ] [94]))
        (nil)))
(insn 49 48 50 5 (set (reg:SI 0 ax [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:37 90 {*movsi_internal}
     (nil))
(insn 50 49 783 5 (set (reg:DI 0 ax [343])
        (sign_extend:DI (reg:SI 0 ax [344]))) read_fdf.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 783 50 51 5 (set (reg:DI 0 ax [345])
        (reg:DI 0 ax [343])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 51 783 784 5 (parallel [
            (set (reg:DI 0 ax [345])
                (ashift:DI (reg:DI 0 ax [345])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:37 512 {*ashldi3_1}
     (nil))
(insn 784 51 52 5 (set (reg:DI 1 dx [345])
        (reg:DI 0 ax [345])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 52 784 53 5 (set (reg/f:DI 0 ax [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -744 [0xfffffffffffffd18])) [0 file+0 S8 A64])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 53 52 54 5 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.5833 ] [96])
                (plus:DI (reg/f:DI 0 ax [346])
                    (reg:DI 1 dx [345])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:37 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -728 [0xfffffffffffffd28])) [0 file+0 S8 A64])
            (reg:DI 1 dx [345]))
        (nil)))
(insn 54 53 55 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f5d97ddbab0 *.LC0>)) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 D.5833 ] [96])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f5d98056510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:37 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 57 56 58 5 (set (reg/f:DI 0 ax [orig:97 D.5834 ] [97])
        (reg:DI 0 ax)) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 58 57 59 5 (set (mem/f:DI (reg/f:DI 3 bx [orig:95 D.5832 ] [95]) [0 *_33+0 S8 A64])
        (reg/f:DI 0 ax [orig:97 D.5834 ] [97])) read_fdf.cpp:37 89 {*movdi_internal}
     (nil))
(insn 59 58 60 5 (set (reg:SI 0 ax [347])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:39 90 {*movsi_internal}
     (nil))
(insn 60 59 61 5 (set (reg:DI 0 ax [orig:98 D.5830 ] [98])
        (sign_extend:DI (reg:SI 0 ax [347]))) read_fdf.cpp:39 142 {*extendsidi2_rex64}
     (nil))
(insn 61 60 62 5 (parallel [
            (set (reg:DI 1 dx [orig:99 D.5830 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 D.5830 ] [98])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:39 512 {*ashldi3_1}
     (nil))
(insn 62 61 63 5 (set (reg/f:DI 0 ax [348])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:39 89 {*movdi_internal}
     (nil))
(insn 63 62 64 5 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.5832 ] [100])
                (plus:DI (reg/f:DI 0 ax [348])
                    (reg:DI 1 dx [orig:99 D.5830 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:39 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.5830 ] [99]))
        (nil)))
(insn 64 63 65 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:100 D.5832 ] [100])
            (const_int 0 [0]))) read_fdf.cpp:39 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 65 64 66 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 72)
            (pc))) read_fdf.cpp:39 612 {*jcc_1}
     (nil)
 -> 72)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 66 65 67 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f5d97ddbb40 *.LC1>)) read_fdf.cpp:40 89 {*movdi_internal}
     (nil))
(call_insn 68 67 69 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f5d98299000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:40 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 69 68 70 6 (set (reg:SI 5 di)
        (const_int 4 [0x4])) read_fdf.cpp:41 90 {*movsi_internal}
     (nil))
(call_insn 70 69 71 6 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f5d982b4ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) read_fdf.cpp:41 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 71 70 72)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 101 102 103 104 349 350 351 352 353
(code_label 72 71 73 7 4 "" [1 uses])
(note 73 72 74 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 7 (set (reg:SI 0 ax [349])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:46 90 {*movsi_internal}
     (nil))
(insn 75 74 76 7 (set (reg:DI 0 ax [orig:101 D.5830 ] [101])
        (sign_extend:DI (reg:SI 0 ax [349]))) read_fdf.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 7 (parallel [
            (set (reg:DI 1 dx [orig:102 D.5830 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.5830 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:46 512 {*ashldi3_1}
     (nil))
(insn 77 76 78 7 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:46 89 {*movdi_internal}
     (nil))
(insn 78 77 79 7 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.5832 ] [103])
                (plus:DI (reg/f:DI 0 ax [350])
                    (reg:DI 1 dx [orig:102 D.5830 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:46 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.5830 ] [102]))
        (nil)))
(insn 79 78 80 7 (set (reg/f:DI 1 dx [orig:104 D.5834 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.5832 ] [103]) [0 *_45+0 S8 A64])) read_fdf.cpp:46 89 {*movdi_internal}
     (nil))
(insn 80 79 82 7 (parallel [
            (set (reg:DI 0 ax [351])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:46 218 {*adddi_1}
     (nil))
(insn 82 80 83 7 (set (reg:SI 4 si)
        (const_int 80 [0x50])) read_fdf.cpp:46 90 {*movsi_internal}
     (nil))
(insn 83 82 84 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [351])) read_fdf.cpp:46 89 {*movdi_internal}
     (nil))
(call_insn 84 83 85 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f5d9805caf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:46 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 85 84 86 7 (parallel [
            (set (reg:DI 1 dx [352])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:47 218 {*adddi_1}
     (nil))
(insn 86 85 88 7 (parallel [
            (set (reg:DI 0 ax [353])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:47 218 {*adddi_1}
     (nil))
(insn 88 86 89 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f5d97ddbbd0 *.LC2>)) read_fdf.cpp:47 89 {*movdi_internal}
     (nil))
(insn 89 88 90 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [353])) read_fdf.cpp:47 89 {*movdi_internal}
     (nil))
(insn 90 89 91 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:47 93 {*movqi_internal}
     (nil))
(call_insn 91 90 92 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f5d98299d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:47 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 92 91 93 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])
            (const_int 0 [0]))) read_fdf.cpp:49 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 93 92 410 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 413)
            (pc))) read_fdf.cpp:49 612 {*jcc_1}
     (nil)
 -> 413)
;;  succ:       8 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              21 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 105 354
(code_label 410 93 94 8 12 "" [1 uses])
(note 94 410 95 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 8 (parallel [
            (set (reg:DI 0 ax [354])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:50 218 {*adddi_1}
     (nil))
(insn 96 95 97 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f5d97ddbc60 *.LC3>)) read_fdf.cpp:50 89 {*movdi_internal}
     (nil))
(insn 97 96 98 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [354])) read_fdf.cpp:50 89 {*movdi_internal}
     (nil))
(call_insn/i 98 97 99 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f5d9828d360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:50 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 99 98 100 8 (set (reg:SI 0 ax [orig:105 D.5829 ] [105])
        (reg:SI 0 ax)) read_fdf.cpp:50 90 {*movsi_internal}
     (nil))
(insn 100 99 101 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:105 D.5829 ] [105])
            (const_int 0 [0]))) read_fdf.cpp:50 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 101 100 102 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 413)
            (pc))) read_fdf.cpp:50 612 {*jcc_1}
     (nil)
 -> 413)
;;  succ:       22
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 106 107 108 109 110 355 356 357 358 359 360 361
(note 102 101 103 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 9 (set (reg:SI 0 ax [355])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:51 90 {*movsi_internal}
     (nil))
(insn 104 103 105 9 (set (reg:DI 0 ax [orig:106 D.5830 ] [106])
        (sign_extend:DI (reg:SI 0 ax [355]))) read_fdf.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 105 104 106 9 (parallel [
            (set (reg:DI 1 dx [orig:107 D.5830 ] [107])
                (ashift:DI (reg:DI 0 ax [orig:106 D.5830 ] [106])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:51 512 {*ashldi3_1}
     (nil))
(insn 106 105 107 9 (set (reg/f:DI 0 ax [356])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:51 89 {*movdi_internal}
     (nil))
(insn 107 106 108 9 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.5832 ] [108])
                (plus:DI (reg/f:DI 0 ax [356])
                    (reg:DI 1 dx [orig:107 D.5830 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:51 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.5830 ] [107]))
        (nil)))
(insn 108 107 109 9 (set (reg/f:DI 1 dx [orig:109 D.5834 ] [109])
        (mem/f:DI (reg/f:DI 0 ax [orig:108 D.5832 ] [108]) [0 *_52+0 S8 A64])) read_fdf.cpp:51 89 {*movdi_internal}
     (nil))
(insn 109 108 111 9 (parallel [
            (set (reg:DI 0 ax [357])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:51 218 {*adddi_1}
     (nil))
(insn 111 109 112 9 (set (reg:SI 4 si)
        (const_int 80 [0x50])) read_fdf.cpp:51 90 {*movsi_internal}
     (nil))
(insn 112 111 113 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [357])) read_fdf.cpp:51 89 {*movdi_internal}
     (nil))
(call_insn 113 112 114 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f5d9805caf8 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:51 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 114 113 115 9 (parallel [
            (set (reg:DI 2 cx [358])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:52 218 {*adddi_1}
     (nil))
(insn 115 114 116 9 (parallel [
            (set (reg:DI 1 dx [359])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:52 218 {*adddi_1}
     (nil))
(insn 116 115 119 9 (parallel [
            (set (reg:DI 0 ax [360])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:52 218 {*adddi_1}
     (nil))
(insn 119 116 120 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f5d97ddbcf0 *.LC4>)) read_fdf.cpp:52 89 {*movdi_internal}
     (nil))
(insn 120 119 121 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [360])) read_fdf.cpp:52 89 {*movdi_internal}
     (nil))
(insn 121 120 122 9 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:52 93 {*movqi_internal}
     (nil))
(call_insn 122 121 123 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f5d98299d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:52 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(insn 123 122 124 9 (parallel [
            (set (reg:DI 0 ax [361])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:54 218 {*adddi_1}
     (nil))
(insn 124 123 125 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f5d97ddbd80 *.LC5>)) read_fdf.cpp:54 89 {*movdi_internal}
     (nil))
(insn 125 124 126 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [361])) read_fdf.cpp:54 89 {*movdi_internal}
     (nil))
(call_insn/i 126 125 127 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f5d9828d360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:54 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 127 126 128 9 (set (reg:SI 0 ax [orig:110 D.5829 ] [110])
        (reg:SI 0 ax)) read_fdf.cpp:54 90 {*movsi_internal}
     (nil))
(insn 128 127 129 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:110 D.5829 ] [110])
            (const_int 0 [0]))) read_fdf.cpp:54 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 129 128 130 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 225)
            (pc))) read_fdf.cpp:54 612 {*jcc_1}
     (nil)
 -> 225)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 111 112 113 114 115 116 117 118 119 120 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410
(note 130 129 131 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 10 (parallel [
            (set (reg:DI 37 r8 [362])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 132 131 133 10 (parallel [
            (set (reg:DI 5 di [363])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 133 132 134 10 (parallel [
            (set (reg:DI 2 cx [364])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 134 133 135 10 (parallel [
            (set (reg:DI 1 dx [365])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 135 134 136 10 (parallel [
            (set (reg:DI 0 ax [366])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 136 135 137 10 (parallel [
            (set (reg:DI 4 si [367])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 137 136 138 10 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [367])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 138 137 139 10 (parallel [
            (set (reg:DI 4 si [368])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 139 138 140 10 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [368])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 140 139 141 10 (parallel [
            (set (reg:DI 4 si [369])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 141 140 142 10 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [369])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 142 141 143 10 (parallel [
            (set (reg:DI 4 si [370])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 143 142 144 10 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [370])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 144 143 145 10 (parallel [
            (set (reg:DI 4 si [371])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 145 144 146 10 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [371])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 40 [0x28])
        (nil)))
(insn 146 145 147 10 (parallel [
            (set (reg:DI 4 si [372])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (nil))
(insn 147 146 148 10 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [372])) read_fdf.cpp:56 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 148 147 149 10 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [362])) read_fdf.cpp:56 89 {*movdi_internal}
     (nil))
(insn 149 148 152 10 (set (reg:DI 37 r8)
        (reg:DI 5 di [363])) read_fdf.cpp:56 89 {*movdi_internal}
     (nil))
(insn 152 149 153 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f5d97ddbea0 *.LC6>)) read_fdf.cpp:56 89 {*movdi_internal}
     (nil))
(insn 153 152 154 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [366])) read_fdf.cpp:56 89 {*movdi_internal}
     (nil))
(insn 154 153 155 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:56 93 {*movqi_internal}
     (nil))
(call_insn 155 154 156 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f5d98299d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 48 [0x30]))) read_fdf.cpp:56 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 156 155 163 10 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:56 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 163 156 157 10 (parallel [
            (set (reg:DI 0 ax [373])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:57 218 {*adddi_1}
     (nil))
(insn 157 163 158 10 (set (reg:DI 2 cx [377])
        (const_int -1 [0xffffffffffffffff])) read_fdf.cpp:57 89 {*movdi_internal}
     (nil))
(insn 158 157 159 10 (set (reg:DI 1 dx [376])
        (reg:DI 0 ax [373])) read_fdf.cpp:57 89 {*movdi_internal}
     (nil))
(insn 159 158 787 10 (set (reg:QI 0 ax [378])
        (const_int 0 [0])) read_fdf.cpp:57 93 {*movqi_internal}
     (nil))
(insn 787 159 160 10 (set (reg:DI 5 di [376])
        (reg:DI 1 dx [376])) read_fdf.cpp:57 89 {*movdi_internal}
     (nil))
(insn 160 787 786 10 (parallel [
            (set (reg:DI 2 cx [374])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [376]) [0  A8])
                        (reg:QI 0 ax [378])
                        (const_int 8 [0x8])
                        (reg:DI 2 cx [374])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [376]))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:57 945 {*strlenqi_1}
     (nil))
(insn 786 160 161 10 (set (reg:DI 0 ax [374])
        (reg:DI 2 cx [374])) read_fdf.cpp:57 89 {*movdi_internal}
     (nil))
(insn 161 786 162 10 (set (reg:DI 0 ax [375])
        (not:DI (reg:DI 0 ax [374]))) read_fdf.cpp:57 494 {*one_cmpldi2_1}
     (nil))
(insn 162 161 164 10 (parallel [
            (set (reg:DI 1 dx [orig:111 D.5830 ] [111])
                (plus:DI (reg:DI 0 ax [375])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:57 218 {*adddi_1}
     (nil))
(insn 164 162 165 10 (parallel [
            (set (reg:DI 0 ax [379])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:57 218 {*adddi_1}
     (nil))
(insn 165 164 166 10 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.5835 ] [112])
                (plus:DI (reg:DI 0 ax [379])
                    (reg:DI 1 dx [orig:111 D.5830 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:57 218 {*adddi_1}
     (nil))
(insn 166 165 167 10 (set (mem:HI (reg/f:DI 0 ax [orig:112 D.5835 ] [112]) [0 MEM[(void *)_59]+0 S2 A8])
        (const_int 32 [0x20])) read_fdf.cpp:57 92 {*movhi_internal}
     (nil))
(insn 167 166 168 10 (parallel [
            (set (reg:DI 1 dx [380])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:58 218 {*adddi_1}
     (nil))
(insn 168 167 169 10 (parallel [
            (set (reg:DI 0 ax [381])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:58 218 {*adddi_1}
     (nil))
(insn 169 168 170 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [380])) read_fdf.cpp:58 89 {*movdi_internal}
     (nil))
(insn 170 169 171 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [381])) read_fdf.cpp:58 89 {*movdi_internal}
     (nil))
(call_insn 171 170 178 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x7f5d98289d80 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:58 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 178 171 172 10 (parallel [
            (set (reg:DI 0 ax [382])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:59 218 {*adddi_1}
     (nil))
(insn 172 178 173 10 (set (reg:DI 2 cx [386])
        (const_int -1 [0xffffffffffffffff])) read_fdf.cpp:59 89 {*movdi_internal}
     (nil))
(insn 173 172 174 10 (set (reg:DI 1 dx [385])
        (reg:DI 0 ax [382])) read_fdf.cpp:59 89 {*movdi_internal}
     (nil))
(insn 174 173 790 10 (set (reg:QI 0 ax [387])
        (const_int 0 [0])) read_fdf.cpp:59 93 {*movqi_internal}
     (nil))
(insn 790 174 175 10 (set (reg:DI 5 di [385])
        (reg:DI 1 dx [385])) read_fdf.cpp:59 89 {*movdi_internal}
     (nil))
(insn 175 790 789 10 (parallel [
            (set (reg:DI 2 cx [383])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [385]) [0  A8])
                        (reg:QI 0 ax [387])
                        (const_int 8 [0x8])
                        (reg:DI 2 cx [383])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [385]))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:59 945 {*strlenqi_1}
     (nil))
(insn 789 175 176 10 (set (reg:DI 0 ax [383])
        (reg:DI 2 cx [383])) read_fdf.cpp:59 89 {*movdi_internal}
     (nil))
(insn 176 789 177 10 (set (reg:DI 0 ax [384])
        (not:DI (reg:DI 0 ax [383]))) read_fdf.cpp:59 494 {*one_cmpldi2_1}
     (nil))
(insn 177 176 179 10 (parallel [
            (set (reg:DI 1 dx [orig:113 D.5830 ] [113])
                (plus:DI (reg:DI 0 ax [384])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:59 218 {*adddi_1}
     (nil))
(insn 179 177 180 10 (parallel [
            (set (reg:DI 0 ax [388])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:59 218 {*adddi_1}
     (nil))
(insn 180 179 181 10 (parallel [
            (set (reg/f:DI 0 ax [orig:114 D.5835 ] [114])
                (plus:DI (reg:DI 0 ax [388])
                    (reg:DI 1 dx [orig:113 D.5830 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:59 218 {*adddi_1}
     (nil))
(insn 181 180 182 10 (set (mem:HI (reg/f:DI 0 ax [orig:114 D.5835 ] [114]) [0 MEM[(void *)_63]+0 S2 A8])
        (const_int 32 [0x20])) read_fdf.cpp:59 92 {*movhi_internal}
     (nil))
(insn 182 181 183 10 (parallel [
            (set (reg:DI 1 dx [389])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:60 218 {*adddi_1}
     (nil))
(insn 183 182 184 10 (parallel [
            (set (reg:DI 0 ax [390])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:60 218 {*adddi_1}
     (nil))
(insn 184 183 185 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [389])) read_fdf.cpp:60 89 {*movdi_internal}
     (nil))
(insn 185 184 186 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [390])) read_fdf.cpp:60 89 {*movdi_internal}
     (nil))
(call_insn 186 185 193 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x7f5d98289d80 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:60 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 193 186 187 10 (parallel [
            (set (reg:DI 0 ax [391])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:61 218 {*adddi_1}
     (nil))
(insn 187 193 188 10 (set (reg:DI 2 cx [395])
        (const_int -1 [0xffffffffffffffff])) read_fdf.cpp:61 89 {*movdi_internal}
     (nil))
(insn 188 187 189 10 (set (reg:DI 1 dx [394])
        (reg:DI 0 ax [391])) read_fdf.cpp:61 89 {*movdi_internal}
     (nil))
(insn 189 188 793 10 (set (reg:QI 0 ax [396])
        (const_int 0 [0])) read_fdf.cpp:61 93 {*movqi_internal}
     (nil))
(insn 793 189 190 10 (set (reg:DI 5 di [394])
        (reg:DI 1 dx [394])) read_fdf.cpp:61 89 {*movdi_internal}
     (nil))
(insn 190 793 792 10 (parallel [
            (set (reg:DI 2 cx [392])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [394]) [0  A8])
                        (reg:QI 0 ax [396])
                        (const_int 8 [0x8])
                        (reg:DI 2 cx [392])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [394]))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:61 945 {*strlenqi_1}
     (nil))
(insn 792 190 191 10 (set (reg:DI 0 ax [392])
        (reg:DI 2 cx [392])) read_fdf.cpp:61 89 {*movdi_internal}
     (nil))
(insn 191 792 192 10 (set (reg:DI 0 ax [393])
        (not:DI (reg:DI 0 ax [392]))) read_fdf.cpp:61 494 {*one_cmpldi2_1}
     (nil))
(insn 192 191 194 10 (parallel [
            (set (reg:DI 1 dx [orig:115 D.5830 ] [115])
                (plus:DI (reg:DI 0 ax [393])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:61 218 {*adddi_1}
     (nil))
(insn 194 192 195 10 (parallel [
            (set (reg:DI 0 ax [397])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:61 218 {*adddi_1}
     (nil))
(insn 195 194 196 10 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.5835 ] [116])
                (plus:DI (reg:DI 0 ax [397])
                    (reg:DI 1 dx [orig:115 D.5830 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:61 218 {*adddi_1}
     (nil))
(insn 196 195 197 10 (set (mem:HI (reg/f:DI 0 ax [orig:116 D.5835 ] [116]) [0 MEM[(void *)_67]+0 S2 A8])
        (const_int 32 [0x20])) read_fdf.cpp:61 92 {*movhi_internal}
     (nil))
(insn 197 196 198 10 (parallel [
            (set (reg:DI 1 dx [398])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:62 218 {*adddi_1}
     (nil))
(insn 198 197 199 10 (parallel [
            (set (reg:DI 0 ax [399])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:62 218 {*adddi_1}
     (nil))
(insn 199 198 200 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [398])) read_fdf.cpp:62 89 {*movdi_internal}
     (nil))
(insn 200 199 201 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [399])) read_fdf.cpp:62 89 {*movdi_internal}
     (nil))
(call_insn 201 200 208 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x7f5d98289d80 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:62 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 208 201 202 10 (parallel [
            (set (reg:DI 0 ax [400])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:63 218 {*adddi_1}
     (nil))
(insn 202 208 203 10 (set (reg:DI 2 cx [404])
        (const_int -1 [0xffffffffffffffff])) read_fdf.cpp:63 89 {*movdi_internal}
     (nil))
(insn 203 202 204 10 (set (reg:DI 1 dx [403])
        (reg:DI 0 ax [400])) read_fdf.cpp:63 89 {*movdi_internal}
     (nil))
(insn 204 203 796 10 (set (reg:QI 0 ax [405])
        (const_int 0 [0])) read_fdf.cpp:63 93 {*movqi_internal}
     (nil))
(insn 796 204 205 10 (set (reg:DI 5 di [403])
        (reg:DI 1 dx [403])) read_fdf.cpp:63 89 {*movdi_internal}
     (nil))
(insn 205 796 795 10 (parallel [
            (set (reg:DI 2 cx [401])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [403]) [0  A8])
                        (reg:QI 0 ax [405])
                        (const_int 8 [0x8])
                        (reg:DI 2 cx [401])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [403]))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:63 945 {*strlenqi_1}
     (nil))
(insn 795 205 206 10 (set (reg:DI 0 ax [401])
        (reg:DI 2 cx [401])) read_fdf.cpp:63 89 {*movdi_internal}
     (nil))
(insn 206 795 207 10 (set (reg:DI 0 ax [402])
        (not:DI (reg:DI 0 ax [401]))) read_fdf.cpp:63 494 {*one_cmpldi2_1}
     (nil))
(insn 207 206 209 10 (parallel [
            (set (reg:DI 1 dx [orig:117 D.5830 ] [117])
                (plus:DI (reg:DI 0 ax [402])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:63 218 {*adddi_1}
     (nil))
(insn 209 207 210 10 (parallel [
            (set (reg:DI 0 ax [406])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:63 218 {*adddi_1}
     (nil))
(insn 210 209 211 10 (parallel [
            (set (reg/f:DI 0 ax [orig:118 D.5835 ] [118])
                (plus:DI (reg:DI 0 ax [406])
                    (reg:DI 1 dx [orig:117 D.5830 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:63 218 {*adddi_1}
     (nil))
(insn 211 210 212 10 (set (mem:HI (reg/f:DI 0 ax [orig:118 D.5835 ] [118]) [0 MEM[(void *)_71]+0 S2 A8])
        (const_int 32 [0x20])) read_fdf.cpp:63 92 {*movhi_internal}
     (nil))
(insn 212 211 213 10 (parallel [
            (set (reg:DI 1 dx [407])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:64 218 {*adddi_1}
     (nil))
(insn 213 212 214 10 (parallel [
            (set (reg:DI 0 ax [408])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:64 218 {*adddi_1}
     (nil))
(insn 214 213 215 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [407])) read_fdf.cpp:64 89 {*movdi_internal}
     (nil))
(insn 215 214 216 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [408])) read_fdf.cpp:64 89 {*movdi_internal}
     (nil))
(call_insn 216 215 217 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x7f5d98289d80 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:64 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 217 216 218 10 (set (reg/f:DI 0 ax [409])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:65 89 {*movdi_internal}
     (nil))
(insn 218 217 219 10 (parallel [
            (set (reg/f:DI 1 dx [orig:119 D.5836 ] [119])
                (plus:DI (reg/f:DI 0 ax [409])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:65 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -792 [0xfffffffffffffce8])) [0 procpar_info+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 219 218 220 10 (parallel [
            (set (reg:DI 0 ax [410])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:65 218 {*adddi_1}
     (nil))
(insn 220 219 221 10 (set (reg:DI 4 si)
        (reg:DI 0 ax [410])) read_fdf.cpp:65 89 {*movdi_internal}
     (nil))
(insn 221 220 222 10 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:119 D.5836 ] [119])) read_fdf.cpp:65 89 {*movdi_internal}
     (nil))
(call_insn 222 221 223 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f5d9828d5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:65 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 223 222 224 10 (set (reg:QI 0 ax [orig:120 D.5837 ] [120])
        (mem/u/c:QI (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f5d97ddbf30 *.LC7>) [0 MEM[(char * {ref-all})""]+0 S1 A8])) read_fdf.cpp:66 93 {*movqi_internal}
     (nil))
(insn 224 223 225 10 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -512 [0xfffffffffffffe00])) [0 MEM[(char * {ref-all})&symbol]+0 S1 A64])
        (reg:QI 0 ax [orig:120 D.5837 ] [120])) read_fdf.cpp:66 93 {*movqi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 121 411
(code_label 225 224 226 11 6 "" [1 uses])
(note 226 225 227 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 227 226 228 11 (parallel [
            (set (reg:DI 0 ax [411])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:69 218 {*adddi_1}
     (nil))
(insn 228 227 229 11 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f5d97dec000 *.LC8>)) read_fdf.cpp:69 89 {*movdi_internal}
     (nil))
(insn 229 228 230 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [411])) read_fdf.cpp:69 89 {*movdi_internal}
     (nil))
(call_insn/i 230 229 231 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f5d9828d360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:69 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 231 230 232 11 (set (reg:SI 0 ax [orig:121 D.5829 ] [121])
        (reg:SI 0 ax)) read_fdf.cpp:69 90 {*movsi_internal}
     (nil))
(insn 232 231 233 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:121 D.5829 ] [121])
            (const_int 0 [0]))) read_fdf.cpp:69 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 233 232 234 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 256)
            (pc))) read_fdf.cpp:69 612 {*jcc_1}
     (nil)
 -> 256)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 122 412 413 414 415 416 417 418 419
(note 234 233 235 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 236 12 (parallel [
            (set (reg:DI 37 r8 [412])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 218 {*adddi_1}
     (nil))
(insn 236 235 237 12 (parallel [
            (set (reg:DI 5 di [413])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 218 {*adddi_1}
     (nil))
(insn 237 236 238 12 (parallel [
            (set (reg:DI 2 cx [414])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 218 {*adddi_1}
     (nil))
(insn 238 237 239 12 (parallel [
            (set (reg:DI 1 dx [415])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 218 {*adddi_1}
     (nil))
(insn 239 238 240 12 (parallel [
            (set (reg:DI 0 ax [416])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 218 {*adddi_1}
     (nil))
(insn 240 239 241 12 (parallel [
            (set (reg:DI 4 si [417])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -704 [0xfffffffffffffd40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 218 {*adddi_1}
     (nil))
(insn 241 240 242 12 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [417])) read_fdf.cpp:70 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 242 241 243 12 (parallel [
            (set (reg:DI 4 si [418])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -680 [0xfffffffffffffd58])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 218 {*adddi_1}
     (nil))
(insn 243 242 244 12 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [418])) read_fdf.cpp:70 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 244 243 245 12 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [412])) read_fdf.cpp:70 89 {*movdi_internal}
     (nil))
(insn 245 244 248 12 (set (reg:DI 37 r8)
        (reg:DI 5 di [413])) read_fdf.cpp:70 89 {*movdi_internal}
     (nil))
(insn 248 245 249 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f5d97dec090 *.LC9>)) read_fdf.cpp:70 89 {*movdi_internal}
     (nil))
(insn 249 248 250 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [416])) read_fdf.cpp:70 89 {*movdi_internal}
     (nil))
(insn 250 249 251 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:70 93 {*movqi_internal}
     (nil))
(call_insn 251 250 252 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f5d98299d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 16 [0x10]))) read_fdf.cpp:70 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 252 251 253 12 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:70 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 253 252 254 12 (set (reg:DF 21 xmm0 [orig:122 D.5838 ] [122])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -680 [0xfffffffffffffd58])) [0 dum8+0 S8 A64])) read_fdf.cpp:71 128 {*movdf_internal}
     (nil))
(insn 254 253 255 12 (set (reg/f:DI 0 ax [419])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:71 89 {*movdi_internal}
     (nil))
(insn 255 254 256 12 (set (mem/j:DF (plus:DI (reg/f:DI 0 ax [419])
                (const_int 304 [0x130])) [0 procpar_info_74(D)->main_frequency+0 S8 A64])
        (reg:DF 21 xmm0 [orig:122 D.5838 ] [122])) read_fdf.cpp:71 128 {*movdf_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 123 420
(code_label 256 255 257 13 7 "" [1 uses])
(note 257 256 258 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 258 257 259 13 (parallel [
            (set (reg:DI 0 ax [420])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:74 218 {*adddi_1}
     (nil))
(insn 259 258 260 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f5d97dec120 *.LC10>)) read_fdf.cpp:74 89 {*movdi_internal}
     (nil))
(insn 260 259 261 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [420])) read_fdf.cpp:74 89 {*movdi_internal}
     (nil))
(call_insn/i 261 260 262 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f5d9828d360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:74 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 262 261 263 13 (set (reg:SI 0 ax [orig:123 D.5829 ] [123])
        (reg:SI 0 ax)) read_fdf.cpp:74 90 {*movsi_internal}
     (nil))
(insn 263 262 264 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:123 D.5829 ] [123])
            (const_int 0 [0]))) read_fdf.cpp:74 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 264 263 265 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 287)
            (pc))) read_fdf.cpp:74 612 {*jcc_1}
     (nil)
 -> 287)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 124 125 421 422 423 424 425 426 427
(note 265 264 266 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 266 265 267 14 (parallel [
            (set (reg:DI 37 r8 [421])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 218 {*adddi_1}
     (nil))
(insn 267 266 268 14 (parallel [
            (set (reg:DI 5 di [422])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 218 {*adddi_1}
     (nil))
(insn 268 267 269 14 (parallel [
            (set (reg:DI 2 cx [423])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 218 {*adddi_1}
     (nil))
(insn 269 268 270 14 (parallel [
            (set (reg:DI 1 dx [424])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 218 {*adddi_1}
     (nil))
(insn 270 269 271 14 (parallel [
            (set (reg:DI 0 ax [425])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 218 {*adddi_1}
     (nil))
(insn 271 270 272 14 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 272 271 273 14 (parallel [
            (set (reg:DI 4 si [426])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -708 [0xfffffffffffffd3c])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 218 {*adddi_1}
     (nil))
(insn 273 272 274 14 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [426])) read_fdf.cpp:75 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 274 273 275 14 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [421])) read_fdf.cpp:75 89 {*movdi_internal}
     (nil))
(insn 275 274 278 14 (set (reg:DI 37 r8)
        (reg:DI 5 di [422])) read_fdf.cpp:75 89 {*movdi_internal}
     (nil))
(insn 278 275 279 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f5d97dec1b0 *.LC11>)) read_fdf.cpp:75 89 {*movdi_internal}
     (nil))
(insn 279 278 280 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [425])) read_fdf.cpp:75 89 {*movdi_internal}
     (nil))
(insn 280 279 281 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:75 93 {*movqi_internal}
     (nil))
(call_insn 281 280 282 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f5d98299d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 16 [0x10]))) read_fdf.cpp:75 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 282 281 283 14 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:75 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 283 282 284 14 (set (reg:SF 21 xmm0 [orig:124 D.5839 ] [124])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -708 [0xfffffffffffffd3c])) [0 dum5+0 S4 A32])) read_fdf.cpp:76 129 {*movsf_internal}
     (nil))
(insn 284 283 285 14 (set (reg:DF 21 xmm0 [orig:125 D.5838 ] [125])
        (float_extend:DF (reg:SF 21 xmm0 [orig:124 D.5839 ] [124]))) read_fdf.cpp:76 152 {*extendsfdf2_sse}
     (nil))
(insn 285 284 286 14 (set (reg/f:DI 0 ax [427])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:76 89 {*movdi_internal}
     (nil))
(insn 286 285 287 14 (set (mem/j:DF (plus:DI (reg/f:DI 0 ax [427])
                (const_int 360 [0x168])) [0 procpar_info_74(D)->span+0 S8 A64])
        (reg:DF 21 xmm0 [orig:125 D.5838 ] [125])) read_fdf.cpp:76 128 {*movdf_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 126 428
(code_label 287 286 288 15 8 "" [1 uses])
(note 288 287 289 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 289 288 290 15 (parallel [
            (set (reg:DI 0 ax [428])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:79 218 {*adddi_1}
     (nil))
(insn 290 289 291 15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f5d97dec240 *.LC12>)) read_fdf.cpp:79 89 {*movdi_internal}
     (nil))
(insn 291 290 292 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [428])) read_fdf.cpp:79 89 {*movdi_internal}
     (nil))
(call_insn/i 292 291 293 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f5d9828d360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:79 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 293 292 294 15 (set (reg:SI 0 ax [orig:126 D.5829 ] [126])
        (reg:SI 0 ax)) read_fdf.cpp:79 90 {*movsi_internal}
     (nil))
(insn 294 293 295 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:126 D.5829 ] [126])
            (const_int 0 [0]))) read_fdf.cpp:79 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 295 294 296 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 323)
            (pc))) read_fdf.cpp:79 612 {*jcc_1}
     (nil)
 -> 323)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 127 128 129 130 131 132 429 430 431 432 433 434 435 436
(note 296 295 297 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 16 (parallel [
            (set (reg:DI 37 r8 [429])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -700 [0xfffffffffffffd44])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 218 {*adddi_1}
     (nil))
(insn 298 297 299 16 (parallel [
            (set (reg:DI 5 di [430])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 218 {*adddi_1}
     (nil))
(insn 299 298 300 16 (parallel [
            (set (reg:DI 2 cx [431])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 218 {*adddi_1}
     (nil))
(insn 300 299 301 16 (parallel [
            (set (reg:DI 1 dx [432])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 218 {*adddi_1}
     (nil))
(insn 301 300 302 16 (parallel [
            (set (reg:DI 0 ax [433])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 218 {*adddi_1}
     (nil))
(insn 302 301 303 16 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 303 302 304 16 (parallel [
            (set (reg:DI 4 si [434])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 218 {*adddi_1}
     (nil))
(insn 304 303 305 16 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [434])) read_fdf.cpp:80 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 305 304 306 16 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [429])) read_fdf.cpp:80 89 {*movdi_internal}
     (nil))
(insn 306 305 309 16 (set (reg:DI 37 r8)
        (reg:DI 5 di [430])) read_fdf.cpp:80 89 {*movdi_internal}
     (nil))
(insn 309 306 310 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f5d97dec2d0 *.LC13>)) read_fdf.cpp:80 89 {*movdi_internal}
     (nil))
(insn 310 309 311 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [433])) read_fdf.cpp:80 89 {*movdi_internal}
     (nil))
(insn 311 310 312 16 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:80 93 {*movqi_internal}
     (nil))
(call_insn 312 311 313 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f5d98299d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 16 [0x10]))) read_fdf.cpp:80 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 313 312 314 16 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:80 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 314 313 315 16 (set (reg:SI 0 ax [435])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:81 90 {*movsi_internal}
     (nil))
(insn 315 314 316 16 (set (reg:DI 0 ax [orig:127 D.5830 ] [127])
        (sign_extend:DI (reg:SI 0 ax [435]))) read_fdf.cpp:81 142 {*extendsidi2_rex64}
     (nil))
(insn 316 315 317 16 (parallel [
            (set (reg:DI 1 dx [orig:128 D.5830 ] [128])
                (ashift:DI (reg:DI 0 ax [orig:127 D.5830 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:81 512 {*ashldi3_1}
     (nil))
(insn 317 316 318 16 (set (reg/f:DI 0 ax [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:81 89 {*movdi_internal}
     (nil))
(insn 318 317 319 16 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.5840 ] [129])
                (plus:DI (reg/f:DI 0 ax [436])
                    (reg:DI 1 dx [orig:128 D.5830 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:81 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:128 D.5830 ] [128]))
        (nil)))
(insn 319 318 320 16 (set (reg/f:DI 0 ax [orig:130 D.5841 ] [130])
        (mem/f:DI (reg/f:DI 0 ax [orig:129 D.5840 ] [129]) [0 *_93+0 S8 A64])) read_fdf.cpp:81 89 {*movdi_internal}
     (nil))
(insn 320 319 321 16 (parallel [
            (set (reg/f:DI 1 dx [orig:131 D.5841 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:130 D.5841 ] [130])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:81 218 {*adddi_1}
     (nil))
(insn 321 320 322 16 (set (reg:SI 0 ax [orig:132 D.5829 ] [132])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -700 [0xfffffffffffffd44])) [0 dum7+0 S4 A32])) read_fdf.cpp:81 90 {*movsi_internal}
     (nil))
(insn 322 321 323 16 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:131 D.5841 ] [131])
                (const_int 4 [0x4])) [0 _95->ntraces.number+0 S4 A32])
        (reg:SI 0 ax [orig:132 D.5829 ] [132])) read_fdf.cpp:81 90 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;;              16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 133 437
(code_label 323 322 324 17 9 "" [1 uses])
(note 324 323 325 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 325 324 326 17 (parallel [
            (set (reg:DI 0 ax [437])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:84 218 {*adddi_1}
     (nil))
(insn 326 325 327 17 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f5d97dec360 *.LC14>)) read_fdf.cpp:84 89 {*movdi_internal}
     (nil))
(insn 327 326 328 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [437])) read_fdf.cpp:84 89 {*movdi_internal}
     (nil))
(call_insn/i 328 327 329 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f5d9828d360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:84 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 329 328 330 17 (set (reg:SI 0 ax [orig:133 D.5829 ] [133])
        (reg:SI 0 ax)) read_fdf.cpp:84 90 {*movsi_internal}
     (nil))
(insn 330 329 331 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:133 D.5829 ] [133])
            (const_int 0 [0]))) read_fdf.cpp:84 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 331 330 332 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 365)
            (pc))) read_fdf.cpp:84 612 {*jcc_1}
     (nil)
 -> 365)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 134 135 136 137 138 139 140 438 439 440 441 442 443 444 445 446 447 448
(note 332 331 333 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 333 332 334 18 (parallel [
            (set (reg:DI 37 r8 [438])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -700 [0xfffffffffffffd44])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 218 {*adddi_1}
     (nil))
(insn 334 333 335 18 (parallel [
            (set (reg:DI 5 di [439])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 218 {*adddi_1}
     (nil))
(insn 335 334 336 18 (parallel [
            (set (reg:DI 2 cx [440])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 218 {*adddi_1}
     (nil))
(insn 336 335 337 18 (parallel [
            (set (reg:DI 1 dx [441])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 218 {*adddi_1}
     (nil))
(insn 337 336 338 18 (parallel [
            (set (reg:DI 0 ax [442])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 218 {*adddi_1}
     (nil))
(insn 338 337 339 18 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 339 338 340 18 (parallel [
            (set (reg:DI 4 si [443])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 218 {*adddi_1}
     (nil))
(insn 340 339 341 18 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [443])) read_fdf.cpp:85 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 341 340 342 18 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [438])) read_fdf.cpp:85 89 {*movdi_internal}
     (nil))
(insn 342 341 345 18 (set (reg:DI 37 r8)
        (reg:DI 5 di [439])) read_fdf.cpp:85 89 {*movdi_internal}
     (nil))
(insn 345 342 346 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f5d97dec2d0 *.LC13>)) read_fdf.cpp:85 89 {*movdi_internal}
     (nil))
(insn 346 345 347 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [442])) read_fdf.cpp:85 89 {*movdi_internal}
     (nil))
(insn 347 346 348 18 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:85 93 {*movqi_internal}
     (nil))
(call_insn 348 347 349 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f5d98299d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 16 [0x10]))) read_fdf.cpp:85 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 349 348 350 18 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:85 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 350 349 351 18 (set (reg:SI 0 ax [444])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:86 90 {*movsi_internal}
     (nil))
(insn 351 350 352 18 (set (reg:DI 0 ax [orig:134 D.5830 ] [134])
        (sign_extend:DI (reg:SI 0 ax [444]))) read_fdf.cpp:86 142 {*extendsidi2_rex64}
     (nil))
(insn 352 351 353 18 (parallel [
            (set (reg:DI 1 dx [orig:135 D.5830 ] [135])
                (ashift:DI (reg:DI 0 ax [orig:134 D.5830 ] [134])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:86 512 {*ashldi3_1}
     (nil))
(insn 353 352 354 18 (set (reg/f:DI 0 ax [445])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:86 89 {*movdi_internal}
     (nil))
(insn 354 353 355 18 (parallel [
            (set (reg/f:DI 0 ax [orig:136 D.5840 ] [136])
                (plus:DI (reg/f:DI 0 ax [445])
                    (reg:DI 1 dx [orig:135 D.5830 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:86 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:135 D.5830 ] [135]))
        (nil)))
(insn 355 354 356 18 (set (reg/f:DI 0 ax [orig:137 D.5841 ] [137])
        (mem/f:DI (reg/f:DI 0 ax [orig:136 D.5840 ] [136]) [0 *_102+0 S8 A64])) read_fdf.cpp:86 89 {*movdi_internal}
     (nil))
(insn 356 355 357 18 (parallel [
            (set (reg/f:DI 1 dx [orig:138 D.5841 ] [138])
                (plus:DI (reg/f:DI 0 ax [orig:137 D.5841 ] [137])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:86 218 {*adddi_1}
     (nil))
(insn 357 356 358 18 (set (reg:SI 0 ax [orig:139 D.5829 ] [139])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -700 [0xfffffffffffffd44])) [0 dum7+0 S4 A32])) read_fdf.cpp:86 90 {*movsi_internal}
     (nil))
(insn 358 357 359 18 (set (reg:SI 0 ax [446])
        (reg:SI 0 ax [orig:139 D.5829 ] [139])) read_fdf.cpp:86 90 {*movsi_internal}
     (nil))
(insn 359 358 360 18 (parallel [
            (set (reg:SI 2 cx [447])
                (plus:SI (reg:SI 0 ax [446])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:86 217 {*addsi_1}
     (nil))
(insn 360 359 361 18 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [446])
            (const_int 0 [0]))) read_fdf.cpp:86 3 {*cmpsi_ccno_1}
     (nil))
(insn 361 360 362 18 (set (reg:SI 0 ax [446])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 2 cx [447])
            (reg:SI 0 ax [446]))) read_fdf.cpp:86 953 {*movsicc_noc}
     (nil))
(insn 362 361 363 18 (parallel [
            (set (reg:SI 0 ax [448])
                (ashiftrt:SI (reg:SI 0 ax [446])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:86 545 {*ashrsi3_1}
     (nil))
(insn 363 362 364 18 (set (reg:SI 0 ax [orig:140 D.5829 ] [140])
        (reg:SI 0 ax [448])) read_fdf.cpp:86 90 {*movsi_internal}
     (nil))
(insn 364 363 365 18 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:138 D.5841 ] [138])
                (const_int 12 [0xc])) [0 _104->ebytes.number+0 S4 A32])
        (reg:SI 0 ax [orig:140 D.5829 ] [140])) read_fdf.cpp:86 90 {*movsi_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;;              18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 141 449
(code_label 365 364 366 19 10 "" [1 uses])
(note 366 365 367 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 367 366 368 19 (parallel [
            (set (reg:DI 0 ax [449])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -512 [0xfffffffffffffe00])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:89 218 {*adddi_1}
     (nil))
(insn 368 367 369 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f5d97dec3f0 *.LC15>)) read_fdf.cpp:89 89 {*movdi_internal}
     (nil))
(insn 369 368 370 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [449])) read_fdf.cpp:89 89 {*movdi_internal}
     (nil))
(call_insn/i 370 369 371 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f5d9828d360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:89 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 371 370 372 19 (set (reg:SI 0 ax [orig:141 D.5829 ] [141])
        (reg:SI 0 ax)) read_fdf.cpp:89 90 {*movsi_internal}
     (nil))
(insn 372 371 373 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:141 D.5829 ] [141])
            (const_int 0 [0]))) read_fdf.cpp:89 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 373 372 374 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 408)
            (pc))) read_fdf.cpp:89 612 {*jcc_1}
     (nil)
 -> 408)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 142 143 144 145 146 147 148 149 150 151 152 450 451 452 453 454 455 456 457 458
(note 374 373 375 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 375 374 376 20 (parallel [
            (set (reg:DI 37 r8 [450])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 218 {*adddi_1}
     (nil))
(insn 376 375 377 20 (parallel [
            (set (reg:DI 5 di [451])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 218 {*adddi_1}
     (nil))
(insn 377 376 378 20 (parallel [
            (set (reg:DI 2 cx [452])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 218 {*adddi_1}
     (nil))
(insn 378 377 379 20 (parallel [
            (set (reg:DI 1 dx [453])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -432 [0xfffffffffffffe50])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 218 {*adddi_1}
     (nil))
(insn 379 378 380 20 (parallel [
            (set (reg:DI 0 ax [454])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 218 {*adddi_1}
     (nil))
(insn 380 379 381 20 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 381 380 382 20 (parallel [
            (set (reg:DI 4 si [455])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -700 [0xfffffffffffffd44])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 218 {*adddi_1}
     (nil))
(insn 382 381 383 20 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 4 si [455])) read_fdf.cpp:90 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 383 382 384 20 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [450])) read_fdf.cpp:90 89 {*movdi_internal}
     (nil))
(insn 384 383 387 20 (set (reg:DI 37 r8)
        (reg:DI 5 di [451])) read_fdf.cpp:90 89 {*movdi_internal}
     (nil))
(insn 387 384 388 20 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f5d97dec480 *.LC16>)) read_fdf.cpp:90 89 {*movdi_internal}
     (nil))
(insn 388 387 389 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [454])) read_fdf.cpp:90 89 {*movdi_internal}
     (nil))
(insn 389 388 390 20 (set (reg:QI 0 ax)
        (const_int 0 [0])) read_fdf.cpp:90 93 {*movqi_internal}
     (nil))
(call_insn 390 389 391 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f5d98299d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 16 [0x10]))) read_fdf.cpp:90 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (expr_list:DI (use (reg:DI 37 r8))
                            (expr_list:DI (use (reg:DI 38 r9))
                                (nil)))))))))
(insn 391 390 392 20 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:90 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 392 391 393 20 (set (reg:SI 0 ax [456])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:91 90 {*movsi_internal}
     (nil))
(insn 393 392 394 20 (set (reg:DI 0 ax [orig:142 D.5830 ] [142])
        (sign_extend:DI (reg:SI 0 ax [456]))) read_fdf.cpp:91 142 {*extendsidi2_rex64}
     (nil))
(insn 394 393 395 20 (parallel [
            (set (reg:DI 1 dx [orig:143 D.5830 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.5830 ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:91 512 {*ashldi3_1}
     (nil))
(insn 395 394 396 20 (set (reg/f:DI 0 ax [457])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:91 89 {*movdi_internal}
     (nil))
(insn 396 395 397 20 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.5840 ] [144])
                (plus:DI (reg/f:DI 0 ax [457])
                    (reg:DI 1 dx [orig:143 D.5830 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:91 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.5830 ] [143]))
        (nil)))
(insn 397 396 398 20 (set (reg/f:DI 0 ax [orig:145 D.5841 ] [145])
        (mem/f:DI (reg/f:DI 0 ax [orig:144 D.5840 ] [144]) [0 *_112+0 S8 A64])) read_fdf.cpp:91 89 {*movdi_internal}
     (nil))
(insn 398 397 399 20 (parallel [
            (set (reg/f:DI 0 ax [orig:146 D.5841 ] [146])
                (plus:DI (reg/f:DI 0 ax [orig:145 D.5841 ] [145])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:91 218 {*adddi_1}
     (nil))
(insn 399 398 401 20 (set (reg:SI 1 dx [orig:147 D.5829 ] [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -700 [0xfffffffffffffd44])) [0 dum7+0 S4 A32])) read_fdf.cpp:91 90 {*movsi_internal}
     (nil))
(insn 401 399 403 20 (parallel [
            (set (reg:SI 1 dx [orig:149 D.5842 ] [149])
                (ashift:SI (reg:SI 1 dx [orig:148 D.5842 ] [148])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:91 511 {*ashlsi3_1}
     (nil))
(insn 403 401 404 20 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:146 D.5841 ] [146])
                (const_int 8 [0x8])) [0 _114->np.number+0 S4 A32])
        (reg:SI 1 dx [orig:150 D.5829 ] [150])) read_fdf.cpp:91 90 {*movsi_internal}
     (nil))
(insn 404 403 405 20 (set (reg:SI 0 ax [orig:151 D.5829 ] [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -700 [0xfffffffffffffd44])) [0 dum7+0 S4 A32])) read_fdf.cpp:92 90 {*movsi_internal}
     (nil))
(insn 405 404 406 20 (parallel [
            (set (reg:SI 1 dx [orig:152 D.5829 ] [152])
                (ashift:SI (reg:SI 0 ax [orig:151 D.5829 ] [151])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:92 511 {*ashlsi3_1}
     (nil))
(insn 406 405 407 20 (set (reg/f:DI 0 ax [458])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:92 89 {*movdi_internal}
     (nil))
(insn 407 406 408 20 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [458])
                (const_int 300 [0x12c])) [0 procpar_info_74(D)->num_points+0 S4 A32])
        (reg:SI 1 dx [orig:152 D.5829 ] [152])) read_fdf.cpp:92 90 {*movsi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;;              20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 408 407 409 21 11 "" [1 uses])
(note 409 408 772 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(jump_insn 772 409 773 21 (set (pc)
        (label_ref 410)) read_fdf.cpp:50 654 {jump}
     (nil)
 -> 410)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 773 772 413)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478
(code_label 413 773 414 22 5 "" [2 uses])
(note 414 413 415 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 415 414 416 22 (set (reg/f:DI 0 ax [459])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:99 89 {*movdi_internal}
     (nil))
(insn 416 415 797 22 (set (reg:SI 0 ax [orig:153 D.5829 ] [153])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [459])
                (const_int 300 [0x12c])) [0 procpar_info_74(D)->num_points+0 S4 A32])) read_fdf.cpp:99 90 {*movsi_internal}
     (nil))
(insn 797 416 417 22 (set (reg:SI 1 dx [460])
        (reg:SI 0 ax [orig:153 D.5829 ] [153])) read_fdf.cpp:99 90 {*movsi_internal}
     (nil))
(insn 417 797 418 22 (parallel [
            (set (reg:SI 1 dx [460])
                (lshiftrt:SI (reg:SI 1 dx [460])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:99 544 {*lshrsi3_1}
     (nil))
(insn 418 417 419 22 (parallel [
            (set (reg:SI 0 ax [461])
                (plus:SI (reg:SI 0 ax [orig:153 D.5829 ] [153])
                    (reg:SI 1 dx [460])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:99 217 {*addsi_1}
     (nil))
(insn 419 418 420 22 (parallel [
            (set (reg:SI 0 ax [462])
                (ashiftrt:SI (reg:SI 0 ax [461])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:99 545 {*ashrsi3_1}
     (nil))
(insn 420 419 421 22 (set (reg:SI 0 ax [orig:154 D.5829 ] [154])
        (reg:SI 0 ax [462])) read_fdf.cpp:99 90 {*movsi_internal}
     (nil))
(insn 421 420 422 22 (set (reg:DF 22 xmm1 [orig:155 D.5838 ] [155])
        (float:DF (reg:SI 0 ax [orig:154 D.5829 ] [154]))) read_fdf.cpp:99 201 {*floatsidf2_sse}
     (nil))
(insn 422 421 423 22 (set (reg/f:DI 0 ax [463])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:99 89 {*movdi_internal}
     (nil))
(insn 423 422 424 22 (set (reg:DF 23 xmm2 [orig:156 D.5838 ] [156])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [463])
                (const_int 360 [0x168])) [0 procpar_info_74(D)->span+0 S8 A64])) read_fdf.cpp:99 128 {*movdf_internal}
     (nil))
(insn 424 423 425 22 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:99 89 {*movdi_internal}
     (nil))
(insn 425 424 426 22 (set (reg:DF 21 xmm0 [orig:157 D.5838 ] [157])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [464])
                (const_int 304 [0x130])) [0 procpar_info_74(D)->main_frequency+0 S8 A64])) read_fdf.cpp:99 128 {*movdf_internal}
     (nil))
(insn 426 425 427 22 (set (reg:DF 21 xmm0 [orig:158 D.5838 ] [158])
        (mult:DF (reg:DF 21 xmm0 [orig:157 D.5838 ] [157])
            (reg:DF 23 xmm2 [orig:156 D.5838 ] [156]))) read_fdf.cpp:99 798 {*fop_df_comm_sse}
     (nil))
(insn 427 426 428 22 (set (reg:DF 23 xmm2 [465])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) read_fdf.cpp:99 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 428 427 800 22 (set (reg:DF 23 xmm2 [orig:159 D.5838 ] [159])
        (div:DF (reg:DF 23 xmm2 [orig:159 D.5838 ] [159])
            (reg:DF 21 xmm0 [orig:158 D.5838 ] [158]))) read_fdf.cpp:99 805 {*fop_df_1_sse}
     (nil))
(insn 800 428 429 22 (set (reg:DF 21 xmm0 [orig:159 D.5838 ] [159])
        (reg:DF 23 xmm2 [orig:159 D.5838 ] [159])) read_fdf.cpp:99 128 {*movdf_internal}
     (nil))
(insn 429 800 430 22 (set (reg:DF 21 xmm0 [orig:160 D.5838 ] [160])
        (mult:DF (reg:DF 21 xmm0 [orig:159 D.5838 ] [159])
            (reg:DF 22 xmm1 [orig:155 D.5838 ] [155]))) read_fdf.cpp:99 798 {*fop_df_comm_sse}
     (nil))
(insn 430 429 431 22 (set (reg:SF 21 xmm0 [orig:161 D.5839 ] [161])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:160 D.5838 ] [160]))) read_fdf.cpp:99 157 {*truncdfsf_fast_sse}
     (nil))
(insn 431 430 432 22 (set (reg/f:DI 0 ax [466])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:99 89 {*movdi_internal}
     (nil))
(insn 432 431 433 22 (set (mem/j:SF (reg/f:DI 0 ax [466]) [0 procpar_info_74(D)->acquision_time+0 S4 A64])
        (reg:SF 21 xmm0 [orig:161 D.5839 ] [161])) read_fdf.cpp:99 129 {*movsf_internal}
     (nil))
(insn 433 432 434 22 (set (reg/f:DI 0 ax [467])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:100 89 {*movdi_internal}
     (nil))
(insn 434 433 435 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [467])
                (const_int 296 [0x128])) [0 procpar_info_74(D)->num_transients+0 S4 A64])
        (const_int 1 [0x1])) read_fdf.cpp:100 90 {*movsi_internal}
     (nil))
(insn 435 434 436 22 (set (reg/f:DI 0 ax [468])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:101 89 {*movdi_internal}
     (nil))
(insn 436 435 437 22 (set (reg:SF 21 xmm0 [469])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC18") [flags 0x2]) [0  S4 A32])) read_fdf.cpp:101 129 {*movsf_internal}
     (nil))
(insn 437 436 438 22 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [468])
                (const_int 320 [0x140])) [0 procpar_info_74(D)->te+0 S4 A64])
        (reg:SF 21 xmm0 [469])) read_fdf.cpp:101 129 {*movsf_internal}
     (nil))
(insn 438 437 439 22 (set (reg/f:DI 0 ax [470])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 procpar_info+0 S8 A64])) read_fdf.cpp:102 89 {*movdi_internal}
     (nil))
(insn 439 438 440 22 (set (reg:SF 21 xmm0 [471])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC18") [flags 0x2]) [0  S4 A32])) read_fdf.cpp:102 129 {*movsf_internal}
     (nil))
(insn 440 439 441 22 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [470])
                (const_int 324 [0x144])) [0 procpar_info_74(D)->tm+0 S4 A32])
        (reg:SF 21 xmm0 [471])) read_fdf.cpp:102 129 {*movsf_internal}
     (nil))
(insn 441 440 442 22 (set (reg/f:DI 0 ax [472])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -760 [0xfffffffffffffd08])) [0 block_header+0 S8 A64])) read_fdf.cpp:103 89 {*movdi_internal}
     (nil))
(insn 442 441 443 22 (set (reg/f:DI 0 ax [orig:162 D.5843 ] [162])
        (mem/f:DI (reg/f:DI 0 ax [472]) [0 *block_header_136(D)+0 S8 A64])) read_fdf.cpp:103 89 {*movdi_internal}
     (nil))
(insn 443 442 444 22 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.5843 ] [163])
                (plus:DI (reg/f:DI 0 ax [orig:162 D.5843 ] [162])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:103 218 {*adddi_1}
     (nil))
(insn 444 443 445 22 (set (mem/j:HI (reg/f:DI 0 ax [orig:163 D.5843 ] [163]) [0 _138->scale.number+0 S2 A32])
        (const_int 1 [0x1])) read_fdf.cpp:103 92 {*movhi_internal}
     (nil))
(insn 445 444 446 22 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:105 90 {*movsi_internal}
     (nil))
(insn 446 445 447 22 (set (reg:DI 0 ax [orig:164 D.5830 ] [164])
        (sign_extend:DI (reg:SI 0 ax [473]))) read_fdf.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 447 446 448 22 (parallel [
            (set (reg:DI 1 dx [orig:165 D.5830 ] [165])
                (ashift:DI (reg:DI 0 ax [orig:164 D.5830 ] [164])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:105 512 {*ashldi3_1}
     (nil))
(insn 448 447 449 22 (set (reg/f:DI 0 ax [474])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:105 89 {*movdi_internal}
     (nil))
(insn 449 448 450 22 (parallel [
            (set (reg/f:DI 0 ax [orig:166 D.5840 ] [166])
                (plus:DI (reg/f:DI 0 ax [474])
                    (reg:DI 1 dx [orig:165 D.5830 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:105 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:165 D.5830 ] [165]))
        (nil)))
(insn 450 449 451 22 (set (reg/f:DI 0 ax [orig:167 D.5841 ] [167])
        (mem/f:DI (reg/f:DI 0 ax [orig:166 D.5840 ] [166]) [0 *_142+0 S8 A64])) read_fdf.cpp:105 89 {*movdi_internal}
     (nil))
(insn 451 450 452 22 (parallel [
            (set (reg/f:DI 0 ax [orig:168 D.5841 ] [168])
                (plus:DI (reg/f:DI 0 ax [orig:167 D.5841 ] [167])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:105 218 {*adddi_1}
     (nil))
(insn 452 451 453 22 (set (reg:SI 0 ax [475])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:168 D.5841 ] [168])
                (const_int 8 [0x8])) [0 _144->np.number+0 S4 A32])) read_fdf.cpp:105 90 {*movsi_internal}
     (nil))
(insn 453 452 454 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [475])) read_fdf.cpp:105 90 {*movsi_internal}
     (nil))
(insn 454 453 455 22 (set (reg/f:DI 0 ax [476])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 preprocess+0 S8 A64])) read_fdf.cpp:108 89 {*movdi_internal}
     (nil))
(insn 455 454 456 22 (set (reg:SI 1 dx [orig:169 D.5829 ] [169])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [476])
                (const_int 24 [0x18])) [0 preprocess_27(D)->data_zero_fill+0 S4 A32])) read_fdf.cpp:108 90 {*movsi_internal}
     (nil))
(insn 456 455 457 22 (set (reg:SI 0 ax [477])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:108 90 {*movsi_internal}
     (nil))
(insn 457 456 458 22 (set (reg:DI 0 ax [orig:170 D.5830 ] [170])
        (sign_extend:DI (reg:SI 0 ax [477]))) read_fdf.cpp:108 142 {*extendsidi2_rex64}
     (nil))
(insn 458 457 459 22 (parallel [
            (set (reg:DI 2 cx [orig:171 D.5830 ] [171])
                (ashift:DI (reg:DI 0 ax [orig:170 D.5830 ] [170])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:108 512 {*ashldi3_1}
     (nil))
(insn 459 458 460 22 (set (reg/f:DI 0 ax [478])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:108 89 {*movdi_internal}
     (nil))
(insn 460 459 461 22 (parallel [
            (set (reg/f:DI 0 ax [orig:172 D.5840 ] [172])
                (plus:DI (reg/f:DI 0 ax [478])
                    (reg:DI 2 cx [orig:171 D.5830 ] [171])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:108 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:171 D.5830 ] [171]))
        (nil)))
(insn 461 460 462 22 (set (reg/f:DI 0 ax [orig:173 D.5841 ] [173])
        (mem/f:DI (reg/f:DI 0 ax [orig:172 D.5840 ] [172]) [0 *_149+0 S8 A64])) read_fdf.cpp:108 89 {*movdi_internal}
     (nil))
(insn 462 461 463 22 (set (reg:SI 0 ax [orig:174 D.5829 ] [174])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:173 D.5841 ] [173])
                (const_int 8 [0x8])) [0 _150->np.number+0 S4 A32])) read_fdf.cpp:108 90 {*movsi_internal}
     (nil))
(insn 463 462 464 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:169 D.5829 ] [169])
            (reg:SI 0 ax [orig:174 D.5829 ] [174]))) read_fdf.cpp:108 7 {*cmpsi_1}
     (nil))
(jump_insn 464 463 465 22 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 469)
            (pc))) read_fdf.cpp:108 612 {*jcc_1}
     (nil)
 -> 469)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 479 480
(note 465 464 466 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 466 465 467 23 (set (reg/f:DI 0 ax [479])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 preprocess+0 S8 A64])) read_fdf.cpp:109 89 {*movdi_internal}
     (nil))
(insn 467 466 468 23 (set (reg:SI 0 ax [480])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [479])
                (const_int 24 [0x18])) [0 preprocess_27(D)->data_zero_fill+0 S4 A32])) read_fdf.cpp:109 90 {*movsi_internal}
     (nil))
(insn 468 467 469 23 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [480])) read_fdf.cpp:109 90 {*movsi_internal}
     (nil))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;;              23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498
(code_label 469 468 470 24 13 "" [1 uses])
(note 470 469 471 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 471 470 472 24 (set (reg:SI 0 ax [481])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:111 90 {*movsi_internal}
     (nil))
(insn 472 471 473 24 (set (reg:DI 0 ax [orig:175 D.5830 ] [175])
        (sign_extend:DI (reg:SI 0 ax [481]))) read_fdf.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 473 472 474 24 (parallel [
            (set (reg:DI 1 dx [orig:176 D.5830 ] [176])
                (ashift:DI (reg:DI 0 ax [orig:175 D.5830 ] [175])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:111 512 {*ashldi3_1}
     (nil))
(insn 474 473 475 24 (set (reg/f:DI 0 ax [482])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -792 [0xfffffffffffffce8])) [0 out_data+0 S8 A64])) read_fdf.cpp:111 89 {*movdi_internal}
     (nil))
(insn 475 474 476 24 (parallel [
            (set (reg/f:DI 3 bx [orig:177 D.5844 ] [177])
                (plus:DI (reg:DI 1 dx [orig:176 D.5830 ] [176])
                    (reg/f:DI 0 ax [482])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:111 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -776 [0xfffffffffffffcf8])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:176 D.5830 ] [176]))
        (nil)))
(insn 476 475 477 24 (set (reg:SI 0 ax [483])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [0 out_data_size+0 S4 A32])) read_fdf.cpp:111 90 {*movsi_internal}
     (nil))
(insn 477 476 478 24 (set (reg:DI 0 ax [orig:178 D.5830 ] [178])
        (sign_extend:DI (reg:SI 0 ax [483]))) read_fdf.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 478 477 479 24 (parallel [
            (set (reg:DI 0 ax [orig:179 D.5830 ] [179])
                (ashift:DI (reg:DI 0 ax [orig:178 D.5830 ] [178])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:111 512 {*ashldi3_1}
     (nil))
(insn 479 478 480 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:179 D.5830 ] [179])) read_fdf.cpp:111 89 {*movdi_internal}
     (nil))
(call_insn 480 479 481 24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f5d982c3a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:111 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 481 480 482 24 (set (reg/f:DI 0 ax [484])
        (reg:DI 0 ax)) read_fdf.cpp:111 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [484])
        (nil)))
(insn 482 481 483 24 (set (reg/f:DI 0 ax [orig:180 D.5845 ] [180])
        (reg/f:DI 0 ax [484])) read_fdf.cpp:111 89 {*movdi_internal}
     (nil))
(insn 483 482 484 24 (set (mem/f:DI (reg/f:DI 3 bx [orig:177 D.5844 ] [177]) [0 *_156+0 S8 A64])
        (reg/f:DI 0 ax [orig:180 D.5845 ] [180])) read_fdf.cpp:111 89 {*movdi_internal}
     (nil))
(insn 484 483 485 24 (set (reg:SI 0 ax [485])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:112 90 {*movsi_internal}
     (nil))
(insn 485 484 486 24 (set (reg:DI 0 ax [orig:181 D.5830 ] [181])
        (sign_extend:DI (reg:SI 0 ax [485]))) read_fdf.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 486 485 487 24 (parallel [
            (set (reg:DI 1 dx [orig:182 D.5830 ] [182])
                (ashift:DI (reg:DI 0 ax [orig:181 D.5830 ] [181])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:112 512 {*ashldi3_1}
     (nil))
(insn 487 486 488 24 (set (reg/f:DI 0 ax [486])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -800 [0xfffffffffffffce0])) [0 scratch_data+0 S8 A64])) read_fdf.cpp:112 89 {*movdi_internal}
     (nil))
(insn 488 487 489 24 (parallel [
            (set (reg/f:DI 3 bx [orig:183 D.5844 ] [183])
                (plus:DI (reg:DI 1 dx [orig:182 D.5830 ] [182])
                    (reg/f:DI 0 ax [486])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:112 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -784 [0xfffffffffffffcf0])) [0 scratch_data+0 S8 A64])
            (reg:DI 1 dx [orig:182 D.5830 ] [182]))
        (nil)))
(insn 489 488 490 24 (set (reg:SI 0 ax [487])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [0 out_data_size+0 S4 A32])) read_fdf.cpp:112 90 {*movsi_internal}
     (nil))
(insn 490 489 491 24 (set (reg:DI 0 ax [orig:184 D.5830 ] [184])
        (sign_extend:DI (reg:SI 0 ax [487]))) read_fdf.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 491 490 492 24 (parallel [
            (set (reg:DI 0 ax [orig:185 D.5830 ] [185])
                (ashift:DI (reg:DI 0 ax [orig:184 D.5830 ] [184])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:112 512 {*ashldi3_1}
     (nil))
(insn 492 491 493 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:185 D.5830 ] [185])) read_fdf.cpp:112 89 {*movdi_internal}
     (nil))
(call_insn 493 492 494 24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f5d982c3a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:112 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 494 493 495 24 (set (reg/f:DI 0 ax [488])
        (reg:DI 0 ax)) read_fdf.cpp:112 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [488])
        (nil)))
(insn 495 494 496 24 (set (reg/f:DI 0 ax [orig:186 D.5845 ] [186])
        (reg/f:DI 0 ax [488])) read_fdf.cpp:112 89 {*movdi_internal}
     (nil))
(insn 496 495 497 24 (set (mem/f:DI (reg/f:DI 3 bx [orig:183 D.5844 ] [183]) [0 *_165+0 S8 A64])
        (reg/f:DI 0 ax [orig:186 D.5845 ] [186])) read_fdf.cpp:112 89 {*movdi_internal}
     (nil))
(insn 497 496 498 24 (set (reg:SI 0 ax [489])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:114 90 {*movsi_internal}
     (nil))
(insn 498 497 499 24 (set (reg:DI 0 ax [orig:187 D.5830 ] [187])
        (sign_extend:DI (reg:SI 0 ax [489]))) read_fdf.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 499 498 500 24 (parallel [
            (set (reg:DI 1 dx [orig:188 D.5830 ] [188])
                (ashift:DI (reg:DI 0 ax [orig:187 D.5830 ] [187])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:114 512 {*ashldi3_1}
     (nil))
(insn 500 499 501 24 (set (reg/f:DI 0 ax [490])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(insn 501 500 502 24 (parallel [
            (set (reg/f:DI 3 bx [orig:189 D.5846 ] [189])
                (plus:DI (reg:DI 1 dx [orig:188 D.5830 ] [188])
                    (reg/f:DI 0 ax [490])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:114 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:188 D.5830 ] [188]))
        (nil)))
(insn 502 501 503 24 (set (reg:SI 0 ax [491])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:114 90 {*movsi_internal}
     (nil))
(insn 503 502 504 24 (set (reg:DI 0 ax [orig:190 D.5830 ] [190])
        (sign_extend:DI (reg:SI 0 ax [491]))) read_fdf.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 504 503 505 24 (parallel [
            (set (reg:DI 1 dx [orig:191 D.5830 ] [191])
                (ashift:DI (reg:DI 0 ax [orig:190 D.5830 ] [190])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:114 512 {*ashldi3_1}
     (nil))
(insn 505 504 506 24 (set (reg/f:DI 0 ax [492])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(insn 506 505 507 24 (parallel [
            (set (reg/f:DI 0 ax [orig:192 D.5840 ] [192])
                (plus:DI (reg/f:DI 0 ax [492])
                    (reg:DI 1 dx [orig:191 D.5830 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:114 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:191 D.5830 ] [191]))
        (nil)))
(insn 507 506 508 24 (set (reg/f:DI 0 ax [orig:193 D.5841 ] [193])
        (mem/f:DI (reg/f:DI 0 ax [orig:192 D.5840 ] [192]) [0 *_177+0 S8 A64])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(insn 508 507 509 24 (set (reg:SI 0 ax [orig:194 D.5829 ] [194])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:193 D.5841 ] [193])
                (const_int 8 [0x8])) [0 _178->np.number+0 S4 A32])) read_fdf.cpp:114 90 {*movsi_internal}
     (nil))
(insn 509 508 510 24 (set (reg:DI 0 ax [orig:195 D.5830 ] [195])
        (sign_extend:DI (reg:SI 0 ax [orig:194 D.5829 ] [194]))) read_fdf.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 510 509 511 24 (parallel [
            (set (reg:DI 0 ax [orig:196 D.5830 ] [196])
                (ashift:DI (reg:DI 0 ax [orig:195 D.5830 ] [195])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:114 512 {*ashldi3_1}
     (nil))
(insn 511 510 512 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:196 D.5830 ] [196])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(call_insn 512 511 513 24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f5d982c3a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:114 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 513 512 514 24 (set (reg/f:DI 0 ax [493])
        (reg:DI 0 ax)) read_fdf.cpp:114 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [493])
        (nil)))
(insn 514 513 515 24 (set (reg/f:DI 0 ax [orig:197 D.5845 ] [197])
        (reg/f:DI 0 ax [493])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(insn 515 514 516 24 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:189 D.5846 ] [189]) [0 _174->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:197 D.5845 ] [197])) read_fdf.cpp:114 89 {*movdi_internal}
     (nil))
(insn 516 515 517 24 (set (reg:SI 0 ax [494])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:115 90 {*movsi_internal}
     (nil))
(insn 517 516 518 24 (set (reg:DI 0 ax [orig:198 D.5830 ] [198])
        (sign_extend:DI (reg:SI 0 ax [494]))) read_fdf.cpp:115 142 {*extendsidi2_rex64}
     (nil))
(insn 518 517 519 24 (parallel [
            (set (reg:DI 1 dx [orig:199 D.5830 ] [199])
                (ashift:DI (reg:DI 0 ax [orig:198 D.5830 ] [198])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:115 512 {*ashldi3_1}
     (nil))
(insn 519 518 520 24 (set (reg/f:DI 0 ax [495])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
(insn 520 519 521 24 (parallel [
            (set (reg/f:DI 3 bx [orig:200 D.5847 ] [200])
                (plus:DI (reg:DI 1 dx [orig:199 D.5830 ] [199])
                    (reg/f:DI 0 ax [495])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:115 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -752 [0xfffffffffffffd10])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:199 D.5830 ] [199]))
        (nil)))
(insn 521 520 522 24 (set (reg:SI 0 ax [496])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:115 90 {*movsi_internal}
     (nil))
(insn 522 521 523 24 (set (reg:DI 0 ax [orig:201 D.5830 ] [201])
        (sign_extend:DI (reg:SI 0 ax [496]))) read_fdf.cpp:115 142 {*extendsidi2_rex64}
     (nil))
(insn 523 522 524 24 (parallel [
            (set (reg:DI 1 dx [orig:202 D.5830 ] [202])
                (ashift:DI (reg:DI 0 ax [orig:201 D.5830 ] [201])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:115 512 {*ashldi3_1}
     (nil))
(insn 524 523 525 24 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
(insn 525 524 526 24 (parallel [
            (set (reg/f:DI 0 ax [orig:203 D.5840 ] [203])
                (plus:DI (reg/f:DI 0 ax [497])
                    (reg:DI 1 dx [orig:202 D.5830 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:115 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:202 D.5830 ] [202]))
        (nil)))
(insn 526 525 527 24 (set (reg/f:DI 0 ax [orig:204 D.5841 ] [204])
        (mem/f:DI (reg/f:DI 0 ax [orig:203 D.5840 ] [203]) [0 *_191+0 S8 A64])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
(insn 527 526 528 24 (set (reg:SI 0 ax [orig:205 D.5829 ] [205])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:204 D.5841 ] [204])
                (const_int 8 [0x8])) [0 _192->np.number+0 S4 A32])) read_fdf.cpp:115 90 {*movsi_internal}
     (nil))
(insn 528 527 529 24 (set (reg:DI 0 ax [orig:206 D.5830 ] [206])
        (sign_extend:DI (reg:SI 0 ax [orig:205 D.5829 ] [205]))) read_fdf.cpp:115 142 {*extendsidi2_rex64}
     (nil))
(insn 529 528 530 24 (parallel [
            (set (reg:DI 0 ax [orig:207 D.5830 ] [207])
                (ashift:DI (reg:DI 0 ax [orig:206 D.5830 ] [206])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:115 512 {*ashldi3_1}
     (nil))
(insn 530 529 531 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:207 D.5830 ] [207])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
(call_insn 531 530 532 24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f5d982c3a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:115 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 532 531 533 24 (set (reg/f:DI 0 ax [498])
        (reg:DI 0 ax)) read_fdf.cpp:115 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [498])
        (nil)))
(insn 533 532 534 24 (set (reg/f:DI 0 ax [orig:208 D.5845 ] [208])
        (reg/f:DI 0 ax [498])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
(insn 534 533 549 24 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:200 D.5847 ] [200]) [0 _188->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:208 D.5845 ] [208])) read_fdf.cpp:115 89 {*movdi_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;;              26 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 209 210 211 212 213 499 500
(code_label 549 534 535 25 15 "" [1 uses])
(note 535 549 536 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 536 535 537 25 (set (reg:SI 0 ax [499])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:120 90 {*movsi_internal}
     (nil))
(insn 537 536 538 25 (set (reg:DI 0 ax [orig:209 D.5830 ] [209])
        (sign_extend:DI (reg:SI 0 ax [499]))) read_fdf.cpp:120 142 {*extendsidi2_rex64}
     (nil))
(insn 538 537 539 25 (parallel [
            (set (reg:DI 1 dx [orig:210 D.5830 ] [210])
                (ashift:DI (reg:DI 0 ax [orig:209 D.5830 ] [209])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:120 512 {*ashldi3_1}
     (nil))
(insn 539 538 540 25 (set (reg/f:DI 0 ax [500])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:120 89 {*movdi_internal}
     (nil))
(insn 540 539 541 25 (parallel [
            (set (reg/f:DI 0 ax [orig:211 D.5832 ] [211])
                (plus:DI (reg/f:DI 0 ax [500])
                    (reg:DI 1 dx [orig:210 D.5830 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:120 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:210 D.5830 ] [210]))
        (nil)))
(insn 541 540 542 25 (set (reg/f:DI 0 ax [orig:212 D.5834 ] [212])
        (mem/f:DI (reg/f:DI 0 ax [orig:211 D.5832 ] [211]) [0 *_201+0 S8 A64])) read_fdf.cpp:120 89 {*movdi_internal}
     (nil))
(insn 542 541 543 25 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:212 D.5834 ] [212])) read_fdf.cpp:120 89 {*movdi_internal}
     (nil))
(call_insn 543 542 544 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f5d97ff1ca8 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:120 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 544 543 545 25 (set (reg:SI 0 ax [orig:213 D.5829 ] [213])
        (reg:SI 0 ax)) read_fdf.cpp:120 90 {*movsi_internal}
     (nil))
(insn 545 544 546 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -684 [0xfffffffffffffd54])) [0 ch+0 S4 A32])
        (reg:SI 0 ax [orig:213 D.5829 ] [213])) read_fdf.cpp:120 90 {*movsi_internal}
     (nil))
(insn 546 545 547 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -684 [0xfffffffffffffd54])) [0 ch+0 S4 A32])
            (const_int 0 [0]))) read_fdf.cpp:121 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 547 546 548 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 552)
            (pc))) read_fdf.cpp:121 612 {*jcc_1}
     (nil)
 -> 552)
;;  succ:       27
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 548 547 774 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(jump_insn 774 548 775 26 (set (pc)
        (label_ref 549)) read_fdf.cpp:119 654 {jump}
     (nil)
 -> 549)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 775 774 552)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 501 502 503 504 505 506 507 508 509 510
(code_label 552 775 553 27 14 "" [1 uses])
(note 553 552 554 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 554 553 555 27 (set (reg:SI 0 ax [501])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:126 90 {*movsi_internal}
     (nil))
(insn 555 554 556 27 (set (reg:DI 0 ax [orig:214 D.5830 ] [214])
        (sign_extend:DI (reg:SI 0 ax [501]))) read_fdf.cpp:126 142 {*extendsidi2_rex64}
     (nil))
(insn 556 555 557 27 (parallel [
            (set (reg:DI 1 dx [orig:215 D.5830 ] [215])
                (ashift:DI (reg:DI 0 ax [orig:214 D.5830 ] [214])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:126 512 {*ashldi3_1}
     (nil))
(insn 557 556 558 27 (set (reg/f:DI 0 ax [502])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -776 [0xfffffffffffffcf8])) [0 in_file+0 S8 A64])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 558 557 559 27 (parallel [
            (set (reg/f:DI 0 ax [orig:216 D.5832 ] [216])
                (plus:DI (reg/f:DI 0 ax [502])
                    (reg:DI 1 dx [orig:215 D.5830 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:126 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -760 [0xfffffffffffffd08])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:215 D.5830 ] [215]))
        (nil)))
(insn 559 558 560 27 (set (reg/f:DI 1 dx [orig:217 D.5834 ] [217])
        (mem/f:DI (reg/f:DI 0 ax [orig:216 D.5832 ] [216]) [0 *_208+0 S8 A64])) read_fdf.cpp:125 89 {*movdi_internal}
     (nil))
(insn 560 559 561 27 (set (reg:SI 0 ax [503])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:125 90 {*movsi_internal}
     (nil))
(insn 561 560 562 27 (set (reg:DI 0 ax [orig:218 D.5830 ] [218])
        (sign_extend:DI (reg:SI 0 ax [503]))) read_fdf.cpp:125 142 {*extendsidi2_rex64}
     (nil))
(insn 562 561 563 27 (parallel [
            (set (reg:DI 2 cx [orig:219 D.5830 ] [219])
                (ashift:DI (reg:DI 0 ax [orig:218 D.5830 ] [218])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:125 512 {*ashldi3_1}
     (nil))
(insn 563 562 564 27 (set (reg/f:DI 0 ax [504])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:125 89 {*movdi_internal}
     (nil))
(insn 564 563 565 27 (parallel [
            (set (reg/f:DI 0 ax [orig:220 D.5840 ] [220])
                (plus:DI (reg/f:DI 0 ax [504])
                    (reg:DI 2 cx [orig:219 D.5830 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:125 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:219 D.5830 ] [219]))
        (nil)))
(insn 565 564 566 27 (set (reg/f:DI 0 ax [orig:221 D.5841 ] [221])
        (mem/f:DI (reg/f:DI 0 ax [orig:220 D.5840 ] [220]) [0 *_212+0 S8 A64])) read_fdf.cpp:125 89 {*movdi_internal}
     (nil))
(insn 566 565 567 27 (set (reg:SI 2 cx [orig:222 D.5829 ] [222])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:221 D.5841 ] [221])
                (const_int 8 [0x8])) [0 _213->np.number+0 S4 A32])) read_fdf.cpp:125 90 {*movsi_internal}
     (nil))
(insn 567 566 568 27 (set (reg:SI 0 ax [505])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:126 90 {*movsi_internal}
     (nil))
(insn 568 567 569 27 (set (reg:DI 0 ax [orig:223 D.5830 ] [223])
        (sign_extend:DI (reg:SI 0 ax [505]))) read_fdf.cpp:126 142 {*extendsidi2_rex64}
     (nil))
(insn 569 568 570 27 (parallel [
            (set (reg:DI 4 si [orig:224 D.5830 ] [224])
                (ashift:DI (reg:DI 0 ax [orig:223 D.5830 ] [223])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:126 512 {*ashldi3_1}
     (nil))
(insn 570 569 571 27 (set (reg/f:DI 0 ax [506])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 571 570 572 27 (parallel [
            (set (reg/f:DI 0 ax [orig:225 D.5840 ] [225])
                (plus:DI (reg/f:DI 0 ax [506])
                    (reg:DI 4 si [orig:224 D.5830 ] [224])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:126 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 4 si [orig:224 D.5830 ] [224]))
        (nil)))
(insn 572 571 573 27 (set (reg/f:DI 0 ax [orig:226 D.5841 ] [226])
        (mem/f:DI (reg/f:DI 0 ax [orig:225 D.5840 ] [225]) [0 *_217+0 S8 A64])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 573 572 574 27 (set (reg:SI 0 ax [orig:227 D.5829 ] [227])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:226 D.5841 ] [226])
                (const_int 12 [0xc])) [0 _218->ebytes.number+0 S4 A32])) read_fdf.cpp:126 90 {*movsi_internal}
     (nil))
(insn 574 573 575 27 (parallel [
            (set (reg:SI 0 ax [orig:228 D.5829 ] [228])
                (mult:SI (reg:SI 0 ax [orig:227 D.5829 ] [227])
                    (reg:SI 2 cx [orig:222 D.5829 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:125 305 {*mulsi3_1}
     (nil))
(insn 575 574 576 27 (set (reg:DI 4 si [orig:229 D.5830 ] [229])
        (sign_extend:DI (reg:SI 0 ax [orig:228 D.5829 ] [228]))) read_fdf.cpp:125 142 {*extendsidi2_rex64}
     (nil))
(insn 576 575 577 27 (set (reg:SI 0 ax [507])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:125 90 {*movsi_internal}
     (nil))
(insn 577 576 578 27 (set (reg:DI 0 ax [orig:230 D.5830 ] [230])
        (sign_extend:DI (reg:SI 0 ax [507]))) read_fdf.cpp:125 142 {*extendsidi2_rex64}
     (nil))
(insn 578 577 579 27 (parallel [
            (set (reg:DI 2 cx [orig:231 D.5830 ] [231])
                (ashift:DI (reg:DI 0 ax [orig:230 D.5830 ] [230])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:125 512 {*ashldi3_1}
     (nil))
(insn 579 578 580 27 (set (reg/f:DI 0 ax [508])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:125 89 {*movdi_internal}
     (nil))
(insn 580 579 581 27 (parallel [
            (set (reg/f:DI 0 ax [orig:232 D.5846 ] [232])
                (plus:DI (reg/f:DI 0 ax [508])
                    (reg:DI 2 cx [orig:231 D.5830 ] [231])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:125 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:231 D.5830 ] [231]))
        (nil)))
(insn 581 580 582 27 (set (reg/f:DI 0 ax [orig:233 D.5848 ] [233])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:232 D.5846 ] [232]) [0 _224->fl+0 S8 A64])) read_fdf.cpp:125 89 {*movdi_internal}
     (nil))
(insn 582 581 583 27 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:217 D.5834 ] [217])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 583 582 585 27 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(insn 585 583 586 27 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:233 D.5848 ] [233])) read_fdf.cpp:126 89 {*movdi_internal}
     (nil))
(call_insn 586 585 587 27 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f5d98068360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) read_fdf.cpp:126 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 587 586 588 27 (set (reg:SI 0 ax [509])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:132 90 {*movsi_internal}
     (nil))
(insn 588 587 589 27 (set (reg:DI 0 ax [orig:234 D.5830 ] [234])
        (sign_extend:DI (reg:SI 0 ax [509]))) read_fdf.cpp:132 142 {*extendsidi2_rex64}
     (nil))
(insn 589 588 590 27 (parallel [
            (set (reg:DI 1 dx [orig:235 D.5830 ] [235])
                (ashift:DI (reg:DI 0 ax [orig:234 D.5830 ] [234])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:132 512 {*ashldi3_1}
     (nil))
(insn 590 589 591 27 (set (reg/f:DI 0 ax [510])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:132 89 {*movdi_internal}
     (nil))
(insn 591 590 592 27 (parallel [
            (set (reg/f:DI 0 ax [orig:236 D.5840 ] [236])
                (plus:DI (reg/f:DI 0 ax [510])
                    (reg:DI 1 dx [orig:235 D.5830 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:132 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:235 D.5830 ] [235]))
        (nil)))
(insn 592 591 593 27 (set (reg/f:DI 0 ax [orig:237 D.5841 ] [237])
        (mem/f:DI (reg/f:DI 0 ax [orig:236 D.5840 ] [236]) [0 *_229+0 S8 A64])) read_fdf.cpp:132 89 {*movdi_internal}
     (nil))
(insn 593 592 594 27 (parallel [
            (set (reg/f:DI 0 ax [orig:238 D.5841 ] [238])
                (plus:DI (reg/f:DI 0 ax [orig:237 D.5841 ] [237])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:132 218 {*adddi_1}
     (nil))
(insn 594 593 595 27 (set (reg:SI 0 ax [orig:239 D.5829 ] [239])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:238 D.5841 ] [238])
                (const_int 12 [0xc])) [0 _231->ebytes.number+0 S4 A32])) read_fdf.cpp:132 90 {*movsi_internal}
     (nil))
(insn 595 594 596 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:239 D.5829 ] [239])
            (const_int 2 [0x2]))) read_fdf.cpp:132 7 {*cmpsi_1}
     (nil))
(jump_insn 596 595 597 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 638)
            (pc))) read_fdf.cpp:132 612 {*jcc_1}
     (nil)
 -> 638)
;;  succ:       28 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 240 241 242 243 244 511 512 513
(note 597 596 598 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 598 597 599 28 (set (reg:SI 0 ax [511])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:133 90 {*movsi_internal}
     (nil))
(insn 599 598 600 28 (set (reg:DI 0 ax [orig:240 D.5830 ] [240])
        (sign_extend:DI (reg:SI 0 ax [511]))) read_fdf.cpp:133 142 {*extendsidi2_rex64}
     (nil))
(insn 600 599 601 28 (parallel [
            (set (reg:DI 1 dx [orig:241 D.5830 ] [241])
                (ashift:DI (reg:DI 0 ax [orig:240 D.5830 ] [240])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:133 512 {*ashldi3_1}
     (nil))
(insn 601 600 602 28 (set (reg/f:DI 0 ax [512])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:133 89 {*movdi_internal}
     (nil))
(insn 602 601 603 28 (parallel [
            (set (reg/f:DI 0 ax [orig:242 D.5840 ] [242])
                (plus:DI (reg/f:DI 0 ax [512])
                    (reg:DI 1 dx [orig:241 D.5830 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:133 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:241 D.5830 ] [241]))
        (nil)))
(insn 603 602 604 28 (set (reg/f:DI 0 ax [orig:243 D.5841 ] [243])
        (mem/f:DI (reg/f:DI 0 ax [orig:242 D.5840 ] [242]) [0 *_235+0 S8 A64])) read_fdf.cpp:133 89 {*movdi_internal}
     (nil))
(insn 604 603 605 28 (set (reg:SI 0 ax [orig:244 D.5829 ] [244])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:243 D.5841 ] [243])
                (const_int 8 [0x8])) [0 _236->np.number+0 S4 A32])) read_fdf.cpp:133 90 {*movsi_internal}
     (nil))
(insn 605 604 606 28 (parallel [
            (set (reg:SI 0 ax [513])
                (plus:SI (reg:SI 0 ax [orig:244 D.5829 ] [244])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:133 217 {*addsi_1}
     (nil))
(insn 606 605 635 28 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
        (reg:SI 0 ax [513])) read_fdf.cpp:133 90 {*movsi_internal}
     (nil))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;;              30 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 635 606 607 29 17 "" [1 uses])
(note 607 635 608 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 608 607 609 29 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
            (const_int 0 [0]))) read_fdf.cpp:133 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 609 608 610 29 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 638)
            (pc))) read_fdf.cpp:133 612 {*jcc_1}
     (nil)
 -> 638)
;;  succ:       31
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 514 515 516 517 518 519
(note 610 609 611 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 611 610 612 30 (set (reg:SI 0 ax [514])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:134 90 {*movsi_internal}
     (nil))
(insn 612 611 613 30 (set (reg:DI 0 ax [orig:245 D.5830 ] [245])
        (sign_extend:DI (reg:SI 0 ax [514]))) read_fdf.cpp:134 142 {*extendsidi2_rex64}
     (nil))
(insn 613 612 614 30 (parallel [
            (set (reg:DI 1 dx [orig:246 D.5830 ] [246])
                (ashift:DI (reg:DI 0 ax [orig:245 D.5830 ] [245])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 512 {*ashldi3_1}
     (nil))
(insn 614 613 615 30 (set (reg/f:DI 0 ax [515])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:134 89 {*movdi_internal}
     (nil))
(insn 615 614 616 30 (parallel [
            (set (reg/f:DI 0 ax [orig:247 D.5846 ] [247])
                (plus:DI (reg/f:DI 0 ax [515])
                    (reg:DI 1 dx [orig:246 D.5830 ] [246])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:246 D.5830 ] [246]))
        (nil)))
(insn 616 615 617 30 (set (reg/f:DI 0 ax [orig:248 D.5849 ] [248])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:247 D.5846 ] [247]) [0 _241->lo+0 S8 A64])) read_fdf.cpp:134 89 {*movdi_internal}
     (nil))
(insn 617 616 618 30 (set (reg:SI 1 dx [516])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:134 90 {*movsi_internal}
     (nil))
(insn 618 617 619 30 (set (reg:DI 1 dx [orig:249 D.5830 ] [249])
        (sign_extend:DI (reg:SI 1 dx [516]))) read_fdf.cpp:134 142 {*extendsidi2_rex64}
     (nil))
(insn 619 618 620 30 (parallel [
            (set (reg:DI 1 dx [orig:250 D.5830 ] [250])
                (ashift:DI (reg:DI 1 dx [orig:249 D.5830 ] [249])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 512 {*ashldi3_1}
     (nil))
(insn 620 619 621 30 (parallel [
            (set (reg/f:DI 1 dx [orig:251 D.5849 ] [251])
                (plus:DI (reg:DI 1 dx [orig:250 D.5830 ] [250])
                    (reg/f:DI 0 ax [orig:248 D.5849 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 218 {*adddi_1}
     (nil))
(insn 621 620 622 30 (set (reg:SI 0 ax [517])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:134 90 {*movsi_internal}
     (nil))
(insn 622 621 623 30 (set (reg:DI 0 ax [orig:252 D.5830 ] [252])
        (sign_extend:DI (reg:SI 0 ax [517]))) read_fdf.cpp:134 142 {*extendsidi2_rex64}
     (nil))
(insn 623 622 624 30 (parallel [
            (set (reg:DI 2 cx [orig:253 D.5830 ] [253])
                (ashift:DI (reg:DI 0 ax [orig:252 D.5830 ] [252])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 512 {*ashldi3_1}
     (nil))
(insn 624 623 625 30 (set (reg/f:DI 0 ax [518])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:134 89 {*movdi_internal}
     (nil))
(insn 625 624 626 30 (parallel [
            (set (reg/f:DI 0 ax [orig:254 D.5846 ] [254])
                (plus:DI (reg/f:DI 0 ax [518])
                    (reg:DI 2 cx [orig:253 D.5830 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:253 D.5830 ] [253]))
        (nil)))
(insn 626 625 627 30 (set (reg/f:DI 0 ax [orig:255 D.5850 ] [255])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:254 D.5846 ] [254]) [0 _248->sh+0 S8 A64])) read_fdf.cpp:134 89 {*movdi_internal}
     (nil))
(insn 627 626 628 30 (set (reg:SI 2 cx [519])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:134 90 {*movsi_internal}
     (nil))
(insn 628 627 629 30 (set (reg:DI 2 cx [orig:256 D.5830 ] [256])
        (sign_extend:DI (reg:SI 2 cx [519]))) read_fdf.cpp:134 142 {*extendsidi2_rex64}
     (nil))
(insn 629 628 630 30 (parallel [
            (set (reg:DI 2 cx [orig:257 D.5830 ] [257])
                (ashift:DI (reg:DI 2 cx [orig:256 D.5830 ] [256])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 512 {*ashldi3_1}
     (nil))
(insn 630 629 631 30 (parallel [
            (set (reg/f:DI 0 ax [orig:258 D.5850 ] [258])
                (plus:DI (reg/f:DI 0 ax [orig:255 D.5850 ] [255])
                    (reg:DI 2 cx [orig:257 D.5830 ] [257])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:134 218 {*adddi_1}
     (nil))
(insn 631 630 632 30 (set (reg:HI 0 ax [orig:259 D.5851 ] [259])
        (mem:HI (reg/f:DI 0 ax [orig:258 D.5850 ] [258]) [0 *_252+0 S2 A16])) read_fdf.cpp:134 92 {*movhi_internal}
     (nil))
(insn 632 631 633 30 (set (reg:DI 0 ax [orig:260 D.5852 ] [260])
        (sign_extend:DI (reg:HI 0 ax [orig:259 D.5851 ] [259]))) read_fdf.cpp:134 145 {extendhidi2}
     (nil))
(insn 633 632 634 30 (set (mem:DI (reg/f:DI 1 dx [orig:251 D.5849 ] [251]) [0 *_245+0 S8 A64])
        (reg:DI 0 ax [orig:260 D.5852 ] [260])) read_fdf.cpp:134 89 {*movdi_internal}
     (nil))
(insn 634 633 776 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:133 217 {*addsi_1}
     (nil))
(jump_insn 776 634 777 30 (set (pc)
        (label_ref 635)) read_fdf.cpp:133 654 {jump}
     (nil)
 -> 635)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 777 776 638)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;;              29
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 638 777 639 31 16 "" [2 uses])
(note 639 638 640 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 640 639 744 31 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
        (const_int 0 [0])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
;;  succ:       32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;;              33 [100.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 261 262 263 264 265 266 267 268 269 270 520 521
(code_label 744 640 641 32 18 "" [1 uses])
(note 641 744 642 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 642 641 643 32 (set (reg:SI 0 ax [520])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(insn 643 642 644 32 (set (reg:DI 0 ax [orig:261 D.5830 ] [261])
        (sign_extend:DI (reg:SI 0 ax [520]))) read_fdf.cpp:138 142 {*extendsidi2_rex64}
     (nil))
(insn 644 643 645 32 (parallel [
            (set (reg:DI 1 dx [orig:262 D.5830 ] [262])
                (ashift:DI (reg:DI 0 ax [orig:261 D.5830 ] [261])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:138 512 {*ashldi3_1}
     (nil))
(insn 645 644 646 32 (set (reg/f:DI 0 ax [521])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -752 [0xfffffffffffffd10])) [0 main_header+0 S8 A64])) read_fdf.cpp:138 89 {*movdi_internal}
     (nil))
(insn 646 645 647 32 (parallel [
            (set (reg/f:DI 0 ax [orig:263 D.5840 ] [263])
                (plus:DI (reg/f:DI 0 ax [521])
                    (reg:DI 1 dx [orig:262 D.5830 ] [262])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:138 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:262 D.5830 ] [262]))
        (nil)))
(insn 647 646 648 32 (set (reg/f:DI 0 ax [orig:264 D.5841 ] [264])
        (mem/f:DI (reg/f:DI 0 ax [orig:263 D.5840 ] [263]) [0 *_260+0 S8 A64])) read_fdf.cpp:138 89 {*movdi_internal}
     (nil))
(insn 648 647 649 32 (set (reg:SI 0 ax [orig:265 D.5829 ] [265])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:264 D.5841 ] [264])
                (const_int 8 [0x8])) [0 _261->np.number+0 S4 A32])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(insn 649 648 650 32 (set (reg:DI 0 ax [orig:266 D.5830 ] [266])
        (sign_extend:DI (reg:SI 0 ax [orig:265 D.5829 ] [265]))) read_fdf.cpp:138 142 {*extendsidi2_rex64}
     (nil))
(insn 650 649 651 32 (set (reg:SI 1 dx [orig:267 D.5842 ] [267])
        (reg:SI 0 ax [orig:266 D.5830 ] [266])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(insn 651 650 652 32 (set (reg:SI 0 ax [orig:268 D.5842 ] [268])
        (const_int 4 [0x4])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(insn 652 651 653 32 (parallel [
            (set (reg:SI 0 ax [orig:269 D.5842 ] [269])
                (mult:SI (reg:SI 0 ax [orig:268 D.5842 ] [268])
                    (reg:SI 1 dx [orig:267 D.5842 ] [267])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:138 305 {*mulsi3_1}
     (nil))
(insn 653 652 654 32 (set (reg:SI 0 ax [orig:270 D.5829 ] [270])
        (reg:SI 0 ax [orig:269 D.5842 ] [269])) read_fdf.cpp:138 90 {*movsi_internal}
     (nil))
(insn 654 653 655 32 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:270 D.5829 ] [270])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32]))) read_fdf.cpp:138 7 {*cmpsi_1}
     (nil))
(jump_insn 655 654 656 32 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 747)
            (pc))) read_fdf.cpp:138 612 {*jcc_1}
     (nil)
 -> 747)
;;  succ:       34
;;              33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545
(note 656 655 657 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 657 656 658 33 (set (reg:SI 0 ax [522])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:139 90 {*movsi_internal}
     (nil))
(insn 658 657 659 33 (set (reg:DI 0 ax [orig:271 D.5830 ] [271])
        (sign_extend:DI (reg:SI 0 ax [522]))) read_fdf.cpp:139 142 {*extendsidi2_rex64}
     (nil))
(insn 659 658 660 33 (parallel [
            (set (reg:DI 1 dx [orig:272 D.5830 ] [272])
                (ashift:DI (reg:DI 0 ax [orig:271 D.5830 ] [271])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 512 {*ashldi3_1}
     (nil))
(insn 660 659 661 33 (set (reg/f:DI 0 ax [523])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])) read_fdf.cpp:139 89 {*movdi_internal}
     (nil))
(insn 661 660 662 33 (parallel [
            (set (reg/f:DI 0 ax [orig:273 D.5847 ] [273])
                (plus:DI (reg/f:DI 0 ax [523])
                    (reg:DI 1 dx [orig:272 D.5830 ] [272])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -752 [0xfffffffffffffd10])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:272 D.5830 ] [272]))
        (nil)))
(insn 662 661 663 33 (set (reg/f:DI 1 dx [orig:274 D.5853 ] [274])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:273 D.5847 ] [273]) [0 _270->character+0 S8 A64])) read_fdf.cpp:139 89 {*movdi_internal}
     (nil))
(insn 663 662 664 33 (set (reg:SI 0 ax [524])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:139 90 {*movsi_internal}
     (nil))
(insn 664 663 665 33 (set (reg:DI 0 ax [orig:275 D.5854 ] [275])
        (sign_extend:DI (reg:SI 0 ax [524]))) read_fdf.cpp:139 142 {*extendsidi2_rex64}
     (nil))
(insn 665 664 666 33 (parallel [
            (set (reg/f:DI 1 dx [orig:276 D.5853 ] [276])
                (plus:DI (reg/f:DI 1 dx [orig:274 D.5853 ] [274])
                    (reg:DI 0 ax [orig:275 D.5854 ] [275])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 218 {*adddi_1}
     (nil))
(insn 666 665 667 33 (set (reg:SI 0 ax [525])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:139 90 {*movsi_internal}
     (nil))
(insn 667 666 668 33 (set (reg:DI 0 ax [orig:277 D.5830 ] [277])
        (sign_extend:DI (reg:SI 0 ax [525]))) read_fdf.cpp:139 142 {*extendsidi2_rex64}
     (nil))
(insn 668 667 669 33 (parallel [
            (set (reg:DI 2 cx [orig:278 D.5830 ] [278])
                (ashift:DI (reg:DI 0 ax [orig:277 D.5830 ] [277])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 512 {*ashldi3_1}
     (nil))
(insn 669 668 670 33 (set (reg/f:DI 0 ax [526])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:139 89 {*movdi_internal}
     (nil))
(insn 670 669 671 33 (parallel [
            (set (reg/f:DI 0 ax [orig:279 D.5846 ] [279])
                (plus:DI (reg/f:DI 0 ax [526])
                    (reg:DI 2 cx [orig:278 D.5830 ] [278])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:278 D.5830 ] [278]))
        (nil)))
(insn 671 670 672 33 (set (reg/f:DI 2 cx [orig:280 D.5853 ] [280])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:279 D.5846 ] [279]) [0 _276->character+0 S8 A64])) read_fdf.cpp:139 89 {*movdi_internal}
     (nil))
(insn 672 671 673 33 (set (reg:SI 0 ax [527])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:139 90 {*movsi_internal}
     (nil))
(insn 673 672 674 33 (set (reg:DI 0 ax [orig:281 D.5854 ] [281])
        (sign_extend:DI (reg:SI 0 ax [527]))) read_fdf.cpp:139 142 {*extendsidi2_rex64}
     (nil))
(insn 674 673 675 33 (parallel [
            (set (reg/f:DI 0 ax [orig:282 D.5853 ] [282])
                (plus:DI (reg:DI 0 ax [orig:281 D.5854 ] [281])
                    (reg/f:DI 2 cx [orig:280 D.5853 ] [280])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:139 218 {*adddi_1}
     (nil))
(insn 675 674 676 33 (set (reg:QI 0 ax [orig:283 D.5837 ] [283])
        (mem:QI (reg/f:DI 0 ax [orig:282 D.5853 ] [282]) [0 *_279+0 S1 A8])) read_fdf.cpp:139 93 {*movqi_internal}
     (nil))
(insn 676 675 677 33 (set (mem:QI (reg/f:DI 1 dx [orig:276 D.5853 ] [276]) [0 *_273+0 S1 A8])
        (reg:QI 0 ax [orig:283 D.5837 ] [283])) read_fdf.cpp:139 93 {*movqi_internal}
     (nil))
(insn 677 676 678 33 (set (reg:SI 0 ax [528])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:140 90 {*movsi_internal}
     (nil))
(insn 678 677 679 33 (set (reg:DI 0 ax [orig:284 D.5830 ] [284])
        (sign_extend:DI (reg:SI 0 ax [528]))) read_fdf.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 679 678 680 33 (parallel [
            (set (reg:DI 1 dx [orig:285 D.5830 ] [285])
                (ashift:DI (reg:DI 0 ax [orig:284 D.5830 ] [284])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 512 {*ashldi3_1}
     (nil))
(insn 680 679 681 33 (set (reg/f:DI 0 ax [529])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])) read_fdf.cpp:140 89 {*movdi_internal}
     (nil))
(insn 681 680 682 33 (parallel [
            (set (reg/f:DI 0 ax [orig:286 D.5847 ] [286])
                (plus:DI (reg/f:DI 0 ax [529])
                    (reg:DI 1 dx [orig:285 D.5830 ] [285])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -752 [0xfffffffffffffd10])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:285 D.5830 ] [285]))
        (nil)))
(insn 682 681 683 33 (set (reg/f:DI 0 ax [orig:287 D.5853 ] [287])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:286 D.5847 ] [286]) [0 _284->character+0 S8 A64])) read_fdf.cpp:140 89 {*movdi_internal}
     (nil))
(insn 683 682 684 33 (set (reg:SI 1 dx [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:140 90 {*movsi_internal}
     (nil))
(insn 684 683 685 33 (set (reg:DI 1 dx [orig:288 D.5854 ] [288])
        (sign_extend:DI (reg:SI 1 dx [530]))) read_fdf.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 685 684 686 33 (parallel [
            (set (reg:DI 1 dx [orig:289 D.5854 ] [289])
                (plus:DI (reg:DI 1 dx [orig:288 D.5854 ] [288])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 218 {*adddi_1}
     (nil))
(insn 686 685 687 33 (parallel [
            (set (reg/f:DI 1 dx [orig:290 D.5853 ] [290])
                (plus:DI (reg:DI 1 dx [orig:289 D.5854 ] [289])
                    (reg/f:DI 0 ax [orig:287 D.5853 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 218 {*adddi_1}
     (nil))
(insn 687 686 688 33 (set (reg:SI 0 ax [531])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:140 90 {*movsi_internal}
     (nil))
(insn 688 687 689 33 (set (reg:DI 0 ax [orig:291 D.5830 ] [291])
        (sign_extend:DI (reg:SI 0 ax [531]))) read_fdf.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 689 688 690 33 (parallel [
            (set (reg:DI 2 cx [orig:292 D.5830 ] [292])
                (ashift:DI (reg:DI 0 ax [orig:291 D.5830 ] [291])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 512 {*ashldi3_1}
     (nil))
(insn 690 689 691 33 (set (reg/f:DI 0 ax [532])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:140 89 {*movdi_internal}
     (nil))
(insn 691 690 692 33 (parallel [
            (set (reg/f:DI 0 ax [orig:293 D.5846 ] [293])
                (plus:DI (reg/f:DI 0 ax [532])
                    (reg:DI 2 cx [orig:292 D.5830 ] [292])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:292 D.5830 ] [292]))
        (nil)))
(insn 692 691 693 33 (set (reg/f:DI 0 ax [orig:294 D.5853 ] [294])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:293 D.5846 ] [293]) [0 _291->character+0 S8 A64])) read_fdf.cpp:140 89 {*movdi_internal}
     (nil))
(insn 693 692 694 33 (set (reg:SI 2 cx [533])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:140 90 {*movsi_internal}
     (nil))
(insn 694 693 695 33 (set (reg:DI 2 cx [orig:295 D.5854 ] [295])
        (sign_extend:DI (reg:SI 2 cx [533]))) read_fdf.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 695 694 696 33 (parallel [
            (set (reg:DI 2 cx [orig:296 D.5854 ] [296])
                (plus:DI (reg:DI 2 cx [orig:295 D.5854 ] [295])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 218 {*adddi_1}
     (nil))
(insn 696 695 697 33 (parallel [
            (set (reg/f:DI 0 ax [orig:297 D.5853 ] [297])
                (plus:DI (reg/f:DI 0 ax [orig:294 D.5853 ] [294])
                    (reg:DI 2 cx [orig:296 D.5854 ] [296])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:140 218 {*adddi_1}
     (nil))
(insn 697 696 698 33 (set (reg:QI 0 ax [orig:298 D.5837 ] [298])
        (mem:QI (reg/f:DI 0 ax [orig:297 D.5853 ] [297]) [0 *_295+0 S1 A8])) read_fdf.cpp:140 93 {*movqi_internal}
     (nil))
(insn 698 697 699 33 (set (mem:QI (reg/f:DI 1 dx [orig:290 D.5853 ] [290]) [0 *_288+0 S1 A8])
        (reg:QI 0 ax [orig:298 D.5837 ] [298])) read_fdf.cpp:140 93 {*movqi_internal}
     (nil))
(insn 699 698 700 33 (set (reg:SI 0 ax [534])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:141 90 {*movsi_internal}
     (nil))
(insn 700 699 701 33 (set (reg:DI 0 ax [orig:299 D.5830 ] [299])
        (sign_extend:DI (reg:SI 0 ax [534]))) read_fdf.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 701 700 702 33 (parallel [
            (set (reg:DI 1 dx [orig:300 D.5830 ] [300])
                (ashift:DI (reg:DI 0 ax [orig:299 D.5830 ] [299])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 512 {*ashldi3_1}
     (nil))
(insn 702 701 703 33 (set (reg/f:DI 0 ax [535])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])) read_fdf.cpp:141 89 {*movdi_internal}
     (nil))
(insn 703 702 704 33 (parallel [
            (set (reg/f:DI 0 ax [orig:301 D.5847 ] [301])
                (plus:DI (reg/f:DI 0 ax [535])
                    (reg:DI 1 dx [orig:300 D.5830 ] [300])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -752 [0xfffffffffffffd10])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:300 D.5830 ] [300]))
        (nil)))
(insn 704 703 705 33 (set (reg/f:DI 0 ax [orig:302 D.5853 ] [302])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:301 D.5847 ] [301]) [0 _300->character+0 S8 A64])) read_fdf.cpp:141 89 {*movdi_internal}
     (nil))
(insn 705 704 706 33 (set (reg:SI 1 dx [536])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:141 90 {*movsi_internal}
     (nil))
(insn 706 705 707 33 (set (reg:DI 1 dx [orig:303 D.5854 ] [303])
        (sign_extend:DI (reg:SI 1 dx [536]))) read_fdf.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 707 706 708 33 (parallel [
            (set (reg:DI 1 dx [orig:304 D.5854 ] [304])
                (plus:DI (reg:DI 1 dx [orig:303 D.5854 ] [303])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 218 {*adddi_1}
     (nil))
(insn 708 707 709 33 (parallel [
            (set (reg/f:DI 1 dx [orig:305 D.5853 ] [305])
                (plus:DI (reg:DI 1 dx [orig:304 D.5854 ] [304])
                    (reg/f:DI 0 ax [orig:302 D.5853 ] [302])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 218 {*adddi_1}
     (nil))
(insn 709 708 710 33 (set (reg:SI 0 ax [537])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:141 90 {*movsi_internal}
     (nil))
(insn 710 709 711 33 (set (reg:DI 0 ax [orig:306 D.5830 ] [306])
        (sign_extend:DI (reg:SI 0 ax [537]))) read_fdf.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 711 710 712 33 (parallel [
            (set (reg:DI 2 cx [orig:307 D.5830 ] [307])
                (ashift:DI (reg:DI 0 ax [orig:306 D.5830 ] [306])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 512 {*ashldi3_1}
     (nil))
(insn 712 711 713 33 (set (reg/f:DI 0 ax [538])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:141 89 {*movdi_internal}
     (nil))
(insn 713 712 714 33 (parallel [
            (set (reg/f:DI 0 ax [orig:308 D.5846 ] [308])
                (plus:DI (reg/f:DI 0 ax [538])
                    (reg:DI 2 cx [orig:307 D.5830 ] [307])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:307 D.5830 ] [307]))
        (nil)))
(insn 714 713 715 33 (set (reg/f:DI 0 ax [orig:309 D.5853 ] [309])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:308 D.5846 ] [308]) [0 _307->character+0 S8 A64])) read_fdf.cpp:141 89 {*movdi_internal}
     (nil))
(insn 715 714 716 33 (set (reg:SI 2 cx [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:141 90 {*movsi_internal}
     (nil))
(insn 716 715 717 33 (set (reg:DI 2 cx [orig:310 D.5854 ] [310])
        (sign_extend:DI (reg:SI 2 cx [539]))) read_fdf.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 717 716 718 33 (parallel [
            (set (reg:DI 2 cx [orig:311 D.5854 ] [311])
                (plus:DI (reg:DI 2 cx [orig:310 D.5854 ] [310])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 218 {*adddi_1}
     (nil))
(insn 718 717 719 33 (parallel [
            (set (reg/f:DI 0 ax [orig:312 D.5853 ] [312])
                (plus:DI (reg/f:DI 0 ax [orig:309 D.5853 ] [309])
                    (reg:DI 2 cx [orig:311 D.5854 ] [311])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:141 218 {*adddi_1}
     (nil))
(insn 719 718 720 33 (set (reg:QI 0 ax [orig:313 D.5837 ] [313])
        (mem:QI (reg/f:DI 0 ax [orig:312 D.5853 ] [312]) [0 *_311+0 S1 A8])) read_fdf.cpp:141 93 {*movqi_internal}
     (nil))
(insn 720 719 721 33 (set (mem:QI (reg/f:DI 1 dx [orig:305 D.5853 ] [305]) [0 *_304+0 S1 A8])
        (reg:QI 0 ax [orig:313 D.5837 ] [313])) read_fdf.cpp:141 93 {*movqi_internal}
     (nil))
(insn 721 720 722 33 (set (reg:SI 0 ax [540])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:142 90 {*movsi_internal}
     (nil))
(insn 722 721 723 33 (set (reg:DI 0 ax [orig:314 D.5830 ] [314])
        (sign_extend:DI (reg:SI 0 ax [540]))) read_fdf.cpp:142 142 {*extendsidi2_rex64}
     (nil))
(insn 723 722 724 33 (parallel [
            (set (reg:DI 1 dx [orig:315 D.5830 ] [315])
                (ashift:DI (reg:DI 0 ax [orig:314 D.5830 ] [314])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 512 {*ashldi3_1}
     (nil))
(insn 724 723 725 33 (set (reg/f:DI 0 ax [541])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -768 [0xfffffffffffffd00])) [0 switch_data+0 S8 A64])) read_fdf.cpp:142 89 {*movdi_internal}
     (nil))
(insn 725 724 726 33 (parallel [
            (set (reg/f:DI 0 ax [orig:316 D.5847 ] [316])
                (plus:DI (reg/f:DI 0 ax [541])
                    (reg:DI 1 dx [orig:315 D.5830 ] [315])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -752 [0xfffffffffffffd10])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:315 D.5830 ] [315]))
        (nil)))
(insn 726 725 727 33 (set (reg/f:DI 0 ax [orig:317 D.5853 ] [317])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:316 D.5847 ] [316]) [0 _316->character+0 S8 A64])) read_fdf.cpp:142 89 {*movdi_internal}
     (nil))
(insn 727 726 728 33 (set (reg:SI 1 dx [542])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:142 90 {*movsi_internal}
     (nil))
(insn 728 727 729 33 (set (reg:DI 1 dx [orig:318 D.5854 ] [318])
        (sign_extend:DI (reg:SI 1 dx [542]))) read_fdf.cpp:142 142 {*extendsidi2_rex64}
     (nil))
(insn 729 728 730 33 (parallel [
            (set (reg:DI 1 dx [orig:319 D.5854 ] [319])
                (plus:DI (reg:DI 1 dx [orig:318 D.5854 ] [318])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 218 {*adddi_1}
     (nil))
(insn 730 729 731 33 (parallel [
            (set (reg/f:DI 1 dx [orig:320 D.5853 ] [320])
                (plus:DI (reg:DI 1 dx [orig:319 D.5854 ] [319])
                    (reg/f:DI 0 ax [orig:317 D.5853 ] [317])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 218 {*adddi_1}
     (nil))
(insn 731 730 732 33 (set (reg:SI 0 ax [543])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])) read_fdf.cpp:142 90 {*movsi_internal}
     (nil))
(insn 732 731 733 33 (set (reg:DI 0 ax [orig:321 D.5830 ] [321])
        (sign_extend:DI (reg:SI 0 ax [543]))) read_fdf.cpp:142 142 {*extendsidi2_rex64}
     (nil))
(insn 733 732 734 33 (parallel [
            (set (reg:DI 2 cx [orig:322 D.5830 ] [322])
                (ashift:DI (reg:DI 0 ax [orig:321 D.5830 ] [321])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 512 {*ashldi3_1}
     (nil))
(insn 734 733 735 33 (set (reg/f:DI 0 ax [544])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -784 [0xfffffffffffffcf0])) [0 in_data+0 S8 A64])) read_fdf.cpp:142 89 {*movdi_internal}
     (nil))
(insn 735 734 736 33 (parallel [
            (set (reg/f:DI 0 ax [orig:323 D.5846 ] [323])
                (plus:DI (reg/f:DI 0 ax [544])
                    (reg:DI 2 cx [orig:322 D.5830 ] [322])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -768 [0xfffffffffffffd00])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:322 D.5830 ] [322]))
        (nil)))
(insn 736 735 737 33 (set (reg/f:DI 0 ax [orig:324 D.5853 ] [324])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:323 D.5846 ] [323]) [0 _323->character+0 S8 A64])) read_fdf.cpp:142 89 {*movdi_internal}
     (nil))
(insn 737 736 738 33 (set (reg:SI 2 cx [545])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])) read_fdf.cpp:142 90 {*movsi_internal}
     (nil))
(insn 738 737 739 33 (set (reg:DI 2 cx [orig:325 D.5854 ] [325])
        (sign_extend:DI (reg:SI 2 cx [545]))) read_fdf.cpp:142 142 {*extendsidi2_rex64}
     (nil))
(insn 739 738 740 33 (parallel [
            (set (reg:DI 2 cx [orig:326 D.5854 ] [326])
                (plus:DI (reg:DI 2 cx [orig:325 D.5854 ] [325])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 218 {*adddi_1}
     (nil))
(insn 740 739 741 33 (parallel [
            (set (reg/f:DI 0 ax [orig:327 D.5853 ] [327])
                (plus:DI (reg/f:DI 0 ax [orig:324 D.5853 ] [324])
                    (reg:DI 2 cx [orig:326 D.5854 ] [326])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:142 218 {*adddi_1}
     (nil))
(insn 741 740 742 33 (set (reg:QI 0 ax [orig:328 D.5837 ] [328])
        (mem:QI (reg/f:DI 0 ax [orig:327 D.5853 ] [327]) [0 *_327+0 S1 A8])) read_fdf.cpp:142 93 {*movqi_internal}
     (nil))
(insn 742 741 743 33 (set (mem:QI (reg/f:DI 1 dx [orig:320 D.5853 ] [320]) [0 *_320+0 S1 A8])
        (reg:QI 0 ax [orig:328 D.5837 ] [328])) read_fdf.cpp:142 93 {*movqi_internal}
     (nil))
(insn 743 742 778 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -692 [0xfffffffffffffd4c])) [0 j+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:138 217 {*addsi_1}
     (nil))
(jump_insn 778 743 779 33 (set (pc)
        (label_ref 744)) read_fdf.cpp:138 654 {jump}
     (nil)
 -> 744)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 779 778 747)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 747 779 748 34 3 "" [2 uses])
(note 748 747 749 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 749 748 780 34 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -696 [0xfffffffffffffd48])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) read_fdf.cpp:33 217 {*addsi_1}
     (nil))
(jump_insn 780 749 781 34 (set (pc)
        (label_ref 750)) read_fdf.cpp:33 654 {jump}
     (nil)
 -> 750)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 781 780 753)
;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 329 330
(code_label 753 781 754 35 2 "" [1 uses])
(note 754 753 755 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 755 754 758 35 (set (reg:SI 0 ax [orig:329 D.5829 ] [329])
        (const_int 1 [0x1])) read_fdf.cpp:147 90 {*movsi_internal}
     (nil))
(insn 758 755 762 35 (set (reg:SI 0 ax [orig:330 <retval> ] [330])
        (reg:SI 0 ax [orig:329 D.5829 ] [329])) read_fdf.cpp:147 90 {*movsi_internal}
     (nil))
(insn 762 758 763 35 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:330 <retval> ] [330])) read_fdf.cpp:149 90 {*movsi_internal}
     (nil))
(insn 763 762 764 35 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.5855+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [548]))
        ]) read_fdf.cpp:149 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 764 763 770 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 767)
            (pc))) read_fdf.cpp:149 612 {*jcc_1}
     (nil)
 -> 767)
;;  succ:       37
;;              36 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 770 764 765 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(call_insn 765 770 766 36 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f5d98196000 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) read_fdf.cpp:149 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 766 765 767)
;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 767 766 771 37 21 "" [1 uses])
(note 771 767 768 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 768 771 782 37 (use (reg/i:SI 0 ax)) read_fdf.cpp:149 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 782 768 0 NOTE_INSN_DELETED)
