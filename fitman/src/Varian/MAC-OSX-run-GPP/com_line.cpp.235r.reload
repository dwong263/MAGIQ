
;; Function int command_line(Preprocess*, IOFiles*, Procpar_info*, int, char**, int*) (_Z12command_lineP10PreprocessP7IOFilesP12Procpar_infoiPPcPi, funcdef_no=2, decl_uid=5383, cgraph_uid=2, symbol_order=2)

      Creating newreg=1004
Removing SCRATCH in insn #9 (nop 2)
rescanning insn with uid = 9.
      Creating newreg=1005
Removing SCRATCH in insn #1892 (nop 3)
rescanning insn with uid = 1892.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=5120, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=5088, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r1004
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 50:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 51:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 61
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 72
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 94
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 106:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 107:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 139
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 150
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 161
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 162:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 163:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 165:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 173
	 Choosing alt 0 in insn 173:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 187:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 195
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 205:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 206
	 Choosing alt 0 in insn 206:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 209:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 217
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 218:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 219:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 226:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 228:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 235:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 240:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 242:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 250:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 256:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 271:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 272
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 273:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 286:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 287:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 291:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 292:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 296:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 305:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1006 from oldreg=657, assigning class CREG to r1006
      Creating newreg=1007 from oldreg=659, assigning class DIREG to r1007
  305: {r1006:DI=unspec[[r1007:DI],r661:QI,0x1,r1006:DI] 24;clobber r1007:DI;clobber flags:CC;}
      REG_DEAD r661:QI
      REG_DEAD r660:DI
      REG_DEAD r659:DI
      REG_UNUSED r659:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2018: r1006:DI=r660:DI
 2020: r1007:DI=r659:DI
    Inserting insn reload after:
 2019: r657:DI=r1006:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 309
	 Choosing alt 0 in insn 309:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 310:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 311:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 314:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 315:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 319:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 320:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 323:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 324:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 333:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 334:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 336:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 337:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1008 from oldreg=665, assigning class CREG to r1008
      Creating newreg=1009 from oldreg=667, assigning class DIREG to r1009
  337: {r1008:DI=unspec[[r1009:DI],r669:QI,0x1,r1008:DI] 24;clobber r1009:DI;clobber flags:CC;}
      REG_DEAD r669:QI
      REG_DEAD r668:DI
      REG_DEAD r667:DI
      REG_UNUSED r667:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2021: r1008:DI=r668:DI
 2023: r1009:DI=r667:DI
    Inserting insn reload after:
 2022: r665:DI=r1008:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 339:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 341
	 Choosing alt 0 in insn 341:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 342:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1010, assigning class GENERAL_REGS to r1010
  342: r1010:DI=0x7478742e6469662f
    Inserting insn reload after:
 2024: [r170:DI]=r1010:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2024:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 343:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 347:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 351:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 352:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 355:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 367:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 369:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 373:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 376:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 379:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 381:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 382:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 383
	 Choosing alt 0 in insn 383:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 385:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 394:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 395:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 396
	 Choosing alt 0 in insn 396:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 397:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 398:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 407:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 409
	 Choosing alt 0 in insn 409:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 410:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 411:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 426:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 427:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 428:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 432:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 440:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 441:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 442:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 446:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 447:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 455:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 456:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 460:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 461:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 468:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 469:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 470:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 474:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 475:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 482:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 483:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 484:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 488:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 489:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 497:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 498:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 502:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 503:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 510:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 511:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 512:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 516:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 524:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 525:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 526:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 530:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 531:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 536:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 539:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 540:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 541:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 543:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 544:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1011 from oldreg=699, assigning class CREG to r1011
      Creating newreg=1012 from oldreg=701, assigning class DIREG to r1012
  544: {r1011:DI=unspec[[r1012:DI],r703:QI,0x1,r1011:DI] 24;clobber r1012:DI;clobber flags:CC;}
      REG_DEAD r703:QI
      REG_DEAD r702:DI
      REG_DEAD r701:DI
      REG_UNUSED r701:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2025: r1011:DI=r702:DI
 2027: r1012:DI=r701:DI
    Inserting insn reload after:
 2026: r699:DI=r1011:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 546:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 548
	 Choosing alt 0 in insn 548:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 549:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 550:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 551:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 556:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 557:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 558:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 559:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 562:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 568:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 569:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 570:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 574:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 575:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 580:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 581:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 583:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 584:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 586:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 587:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 588:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 589:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 590:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 592:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 593:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 595:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 597:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 598:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 600:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (1) rBwBz {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 602:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 606:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) qm  (1) qn {*cmpqi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 611:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 612:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 613:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 615:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 620:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 621:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 623:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 624:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 626:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 627:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 628:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 629:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 630:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 632:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 636:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 638:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 641:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 642:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 643:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 644:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 645:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 649:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 650:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 651:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 653:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 654:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1013 from oldreg=715, assigning class CREG to r1013
      Creating newreg=1014 from oldreg=717, assigning class DIREG to r1014
  654: {r1013:DI=unspec[[r1014:DI],r719:QI,0x1,r1013:DI] 24;clobber r1014:DI;clobber flags:CC;}
      REG_DEAD r719:QI
      REG_DEAD r718:DI
      REG_DEAD r717:DI
      REG_UNUSED r717:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2028: r1013:DI=r718:DI
 2030: r1014:DI=r717:DI
    Inserting insn reload after:
 2029: r715:DI=r1013:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 655:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 656:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 658
	 Choosing alt 0 in insn 658:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 659:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1015, assigning class GENERAL_REGS to r1015
  659: r1015:DI=0x726170636f72702f
    Inserting insn reload after:
 2031: [r215:DI]=r1015:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2031:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 660:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 661:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 663:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 664:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 668:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 669:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 670:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 672:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 673:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 674:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 675:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 678:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 681:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 685:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 690:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 691:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 692:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 694:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 695:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 696:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 699:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 701:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 702:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 703:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 704
	 Choosing alt 0 in insn 704:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 705:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 706:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 708:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 710:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 713:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 715:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 716:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 717
	 Choosing alt 0 in insn 717:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 718:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 719:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 721:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 723:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 726:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 728:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 729:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 730
	 Choosing alt 0 in insn 730:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 731:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 732:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 734:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 736:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 740:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 741:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 742:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 743:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 744
	 Choosing alt 0 in insn 744:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 745:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 746:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 748:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 750:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 753:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 755:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 758:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 762:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 763
	 Choosing alt 0 in insn 763:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 764:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 765:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 766:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 767:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 768:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 770:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 771:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 772:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 775:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 776:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 777:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 778:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 779:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 780:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 781:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 782:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 783:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 785:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 786:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 787:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 790:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 791:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 792:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 793:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 794:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 795:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 796:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 798:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 799:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 800:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 803:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 804
	 Choosing alt 0 in insn 804:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 805:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 806:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 807:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 808:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 809:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 810
	 Choosing alt 0 in insn 810:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 811:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 812:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 813:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 816:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 817:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 818:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 819:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 822:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 823:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 824:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 826:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 827:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1016 from oldreg=758, assigning class CREG to r1016
      Creating newreg=1017 from oldreg=760, assigning class DIREG to r1017
  827: {r1016:DI=unspec[[r1017:DI],r762:QI,0x1,r1016:DI] 24;clobber r1017:DI;clobber flags:CC;}
      REG_DEAD r762:QI
      REG_DEAD r761:DI
      REG_DEAD r760:DI
      REG_UNUSED r760:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2032: r1016:DI=r761:DI
 2034: r1017:DI=r760:DI
    Inserting insn reload after:
 2033: r758:DI=r1016:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 828:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 829:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 831
	 Choosing alt 0 in insn 831:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 832:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 833:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 836:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 837:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 838:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 839:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 840
	 Choosing alt 0 in insn 840:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 841:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 842:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 844:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 846:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 849:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 850:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 851:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 853:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 854:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 855:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 858:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 859
	 Choosing alt 0 in insn 859:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 860:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 861:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 862:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 863:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 864:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 866:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 867:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 868:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 871:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 872:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 873:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 874:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 875:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 876:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 877
	 Choosing alt 0 in insn 877:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 878:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 880:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 882:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 883:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 884:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 885:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 886:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 888:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 889:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 890:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 893:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 894
	 Choosing alt 0 in insn 894:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 895:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 896:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 897:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 898:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 899:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 900:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 901:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 902:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 904:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 905:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 906:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 909:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 910:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 911:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 912:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 913:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 914:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 915
	 Choosing alt 0 in insn 915:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 916:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 918:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 920:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 921:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 922:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 923:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 924:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 925:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 927:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 928:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 929:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 932:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 933:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 934:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 935:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 936:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 937:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 938:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 940:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 941:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 942:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 945:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 946
	 Choosing alt 0 in insn 946:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 947:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 948:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 949:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 950:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 951:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 952
	 Choosing alt 0 in insn 952:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 953:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 954:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 955:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 958:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 959:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 960:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 961:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 964:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 965:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 966:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 968:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 969:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1018 from oldreg=802, assigning class CREG to r1018
      Creating newreg=1019 from oldreg=804, assigning class DIREG to r1019
  969: {r1018:DI=unspec[[r1019:DI],r806:QI,0x1,r1018:DI] 24;clobber r1019:DI;clobber flags:CC;}
      REG_DEAD r806:QI
      REG_DEAD r805:DI
      REG_DEAD r804:DI
      REG_UNUSED r804:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2035: r1018:DI=r805:DI
 2037: r1019:DI=r804:DI
    Inserting insn reload after:
 2036: r802:DI=r1018:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 970:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 971:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 973
	 Choosing alt 0 in insn 973:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 974:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 975:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 978:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 979:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 980:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 981:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 982
	 Choosing alt 0 in insn 982:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 983:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 984:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 986:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 988:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 991:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 992:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 993:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 995:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 996:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 997:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1000:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1001
	 Choosing alt 0 in insn 1001:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1002:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1003:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1004:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1005:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1006:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1008:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1009:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1010:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1013:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1014:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1015:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1016:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1017:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1018:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1019
	 Choosing alt 0 in insn 1019:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1020:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1022:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1024:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1025:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1026:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1027:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1028:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1030:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1031:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1032:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1035:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1036:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1037:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1038:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1039:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1040:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1041
	 Choosing alt 0 in insn 1041:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1042:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1044:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1046:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1047:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1048:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1049:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1050:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1052:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1053:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1054:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1057:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1058
	 Choosing alt 0 in insn 1058:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1059:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1060:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1061:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1062:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1063:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1064:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1065:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1066:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1068:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1069:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1070:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1073:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1074
	 Choosing alt 0 in insn 1074:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1075:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1076:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1077:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1078:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1080:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1081:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1082:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1085:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1086:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1087:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1088:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1089:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1090:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1091:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1092:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1094:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1095:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1096:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1099:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1100:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1101:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1102:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1103:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1105
	 Choosing alt 0 in insn 1105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1108:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1110:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1111:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1112:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1113:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1114:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1115:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1117:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1118:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1119:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1123:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1124:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1125:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1126:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1127:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1128:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1129:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1130
	 Choosing alt 0 in insn 1130:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1131:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1132:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1133:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1136:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1137:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1138:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1139:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1142:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1143:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1144:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1146:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 1147:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1020 from oldreg=857, assigning class CREG to r1020
      Creating newreg=1021 from oldreg=859, assigning class DIREG to r1021
 1147: {r1020:DI=unspec[[r1021:DI],r861:QI,0x1,r1020:DI] 24;clobber r1021:DI;clobber flags:CC;}
      REG_DEAD r861:QI
      REG_DEAD r860:DI
      REG_DEAD r859:DI
      REG_UNUSED r859:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2038: r1020:DI=r860:DI
 2040: r1021:DI=r859:DI
    Inserting insn reload after:
 2039: r857:DI=r1020:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1148:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1149:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1151
	 Choosing alt 0 in insn 1151:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 1152:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1022, assigning class GENERAL_REGS to r1022
 1152: r1022:DI=0x7478742e6469662f
    Inserting insn reload after:
 2041: [r531:DI]=r1022:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2041:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1153:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1156:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1157:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1158:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1160:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1162:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1163:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1166:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1167:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1169:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1175:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1177:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1178:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1181:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1182:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1183:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1184:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1185
	 Choosing alt 0 in insn 1185:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1186:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1187:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1188:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1191:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1193:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1194:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1196:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 1197:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1023 from oldreg=870, assigning class CREG to r1023
      Creating newreg=1024 from oldreg=872, assigning class DIREG to r1024
 1197: {r1023:DI=unspec[[r1024:DI],r874:QI,0x1,r1023:DI] 24;clobber r1024:DI;clobber flags:CC;}
      REG_DEAD r874:QI
      REG_DEAD r873:DI
      REG_DEAD r872:DI
      REG_UNUSED r872:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2042: r1023:DI=r873:DI
 2044: r1024:DI=r872:DI
    Inserting insn reload after:
 2043: r870:DI=r1023:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1198:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1199:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1201
	 Choosing alt 0 in insn 1201:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 1202:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1025, assigning class GENERAL_REGS to r1025
 1202: r1025:DI=0x726170636f72702f
    Inserting insn reload after:
 2045: [r542:DI]=r1025:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2045:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1203:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1204:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1205:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1206:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1208:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1210:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1211:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1214:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1215:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1216:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1217:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1221:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1223:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1224:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1225:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1226:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1228
	 Choosing alt 0 in insn 1228:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1229:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1230:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1231:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1232:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1235:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1238:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1239:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1240:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1241:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1242:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1245:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1246:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1247:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1248:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1254:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1255:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1256:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1258:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1260:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1261:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1268:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1269:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1270:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1272:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1274:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1275:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1282:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1283:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1284:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1286:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1288:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1289:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1296:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1297:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1298:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1300:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1302:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1303:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1310:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1311:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1312:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1314:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1316:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1317:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1324:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1325:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1326:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1328:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1330:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1331:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1338:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1339:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1340:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1342:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1344:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1345:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1352:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1353:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1354:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1356:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1358:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1359:  (0) ?mr {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1364:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1367:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1368:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1369:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1371:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 1372:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=1026 from oldreg=901, assigning class CREG to r1026
      Creating newreg=1027 from oldreg=903, assigning class DIREG to r1027
 1372: {r1026:DI=unspec[[r1027:DI],r905:QI,0x1,r1026:DI] 24;clobber r1027:DI;clobber flags:CC;}
      REG_DEAD r905:QI
      REG_DEAD r904:DI
      REG_DEAD r903:DI
      REG_UNUSED r903:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 2046: r1026:DI=r904:DI
 2048: r1027:DI=r903:DI
    Inserting insn reload after:
 2047: r901:DI=r1026:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1373:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1374:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1376
	 Choosing alt 0 in insn 1376:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 1377:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1028, assigning class GENERAL_REGS to r1028
 1377: r1028:DI=0x7461642e736e755f
    Inserting insn reload after:
 2049: [r564:DI]=r1028:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2049:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1378:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1383:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 1384:  (0) r  (1) i {*movdi_internal}
      Creating newreg=1029, assigning class GENERAL_REGS to r1029
 1384: r1029:DI=0x7461642e736e755f
    Inserting insn reload after:
 2050: [r906:DI]=r1029:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2050:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1385:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1392:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1393:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1394:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1395:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1396
	 Choosing alt 0 in insn 1396:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1397:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1398:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1400:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1402:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1405:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1406:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1407:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1409:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1410:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1411:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1414:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1415
	 Choosing alt 0 in insn 1415:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1416:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1417:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1420:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1421:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1422:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1424:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1425:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1426:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1429:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1430
	 Choosing alt 0 in insn 1430:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1431:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1432:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1433:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1434:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1436:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1437:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1438:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1441:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1442
	 Choosing alt 0 in insn 1442:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1443:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1444:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1449:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1450:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1451:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1452:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1456:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1457:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1458:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1459:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1460
	 Choosing alt 0 in insn 1460:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1461:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1462:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1464:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1466:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1469:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1470:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1471:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1473:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1474:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1475:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1478:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1479
	 Choosing alt 0 in insn 1479:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1480:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1481:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1484:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1485:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1486:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1488:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1489:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1490:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1493:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1494
	 Choosing alt 0 in insn 1494:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1495:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1496:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1497:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1498:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1499:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1501:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1502:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1503:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1506:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1507
	 Choosing alt 0 in insn 1507:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1508:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1509:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1510:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1511:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1512:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1513
	 Choosing alt 0 in insn 1513:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1514:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1516:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1518:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1519:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1524:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1525:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1526:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1527:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1531:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1532:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1533:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1534:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1535
	 Choosing alt 0 in insn 1535:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1536:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1537:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1539:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1541:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1544:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1545:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1546:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1548:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1549:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1550:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1553:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1554
	 Choosing alt 0 in insn 1554:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1555:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1560:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1561:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1562:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1563:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1564
	 Choosing alt 0 in insn 1564:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1565:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1566:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1568:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1570:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1573:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1574:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1575:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1577:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1578:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1579:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1582:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1583
	 Choosing alt 0 in insn 1583:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1584:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1589:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1590:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1591:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1592:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1593
	 Choosing alt 0 in insn 1593:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1594:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1595:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1597:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1599:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1602:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1603:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1604:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1605:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1607:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1608:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1609:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1612:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1613
	 Choosing alt 0 in insn 1613:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1614:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1615:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1616:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1617:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1618:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1619
	 Choosing alt 0 in insn 1619:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1620:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1622:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1624:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1625:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1630:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1631:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1632:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1633:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1634
	 Choosing alt 0 in insn 1634:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1635:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1636:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1638:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1640:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1643:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1644:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1645:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1647:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1648:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1649:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1652:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1653
	 Choosing alt 0 in insn 1653:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1654:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1659:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1660:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1661:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1662:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1663
	 Choosing alt 0 in insn 1663:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1664:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1665:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1667:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1669:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1672:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1673:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1674:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1676:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1677:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1678:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1681:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1682
	 Choosing alt 0 in insn 1682:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1683:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1688:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1689:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1690:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1691:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1692
	 Choosing alt 0 in insn 1692:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1693:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1694:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1696:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1698:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1701:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1702:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1703:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1705:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1706:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1707:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1710:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1711
	 Choosing alt 0 in insn 1711:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1712:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1717:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1718:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1719:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1720:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1721
	 Choosing alt 0 in insn 1721:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1722:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1723:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1725:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1727:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1730:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1731:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1732:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1734:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1735:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1736:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1739:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1740
	 Choosing alt 0 in insn 1740:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1741:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1746:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1747:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1748:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1749:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1750
	 Choosing alt 0 in insn 1750:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1751:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1752:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1754:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1756:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1759:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1760:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1761:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1762:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1763:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1764:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1765:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1766
	 Choosing alt 0 in insn 1766:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1767:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1769:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1771:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1772:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1773:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1774:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1775:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1776:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1777:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1778:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1779:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1780
	 Choosing alt 0 in insn 1780:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1781:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1783:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1785:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1786:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1787:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1788:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1789:  (0) r  (1) l  (2) M {*ashlsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1790:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1791:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1792:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1793:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1794:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1795:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1796:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1797:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1798:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1803:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1804:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1805:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1806:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1807
	 Choosing alt 0 in insn 1807:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1808:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1809:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1811:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1813:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1816:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1817:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1822:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1823:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1824:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1825:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1826
	 Choosing alt 0 in insn 1826:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1827:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1828:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1830:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1832:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1835:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1836:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1841:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1842:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1843:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1844:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1845
	 Choosing alt 0 in insn 1845:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1846:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1847:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1849:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1851:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1854:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1855:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1856:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1857:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1858:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1859:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1860:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1861
	 Choosing alt 0 in insn 1861:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1862:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1863:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1864:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1867:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1872:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1873:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1874:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1875:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1884:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1892:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r1005
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1894:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 112
EBB 113
EBB 114
EBB 115
EBB 116
EBB 117
EBB 118
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 119
EBB 120
EBB 121
EBB 122
EBB 123
EBB 124
EBB 125
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 89
EBB 90
EBB 91
EBB 92
EBB 93
EBB 94
EBB 95
EBB 96
EBB 97
EBB 98
EBB 99
EBB 100
EBB 101
EBB 102
EBB 103
EBB 104
EBB 105
EBB 106
EBB 107
EBB 108
EBB 109
EBB 110
EBB 111

********** Pseudo live ranges #1: **********

  BB 17
   Insn 358: point = 0
   Insn 357: point = 0
   Insn 356: point = 0
   Insn 355: point = 0
  BB 40
   Insn 632: point = 0
   Insn 631: point = 0
   Insn 630: point = 0
   Insn 629: point = 0
   Insn 628: point = 0
   Insn 627: point = 0
   Insn 626: point = 0
   Insn 625: point = 0
   Insn 624: point = 1
   Insn 623: point = 3
   Insn 622: point = 4
   Insn 621: point = 4
   Insn 620: point = 4
  BB 43
   Insn 681: point = 4
   Insn 680: point = 4
   Insn 679: point = 4
   Insn 678: point = 4
  BB 60
   Insn 1169: point = 4
   Insn 1168: point = 4
   Insn 1167: point = 4
   Insn 1166: point = 4
  BB 63
   Insn 1217: point = 4
   Insn 1216: point = 4
   Insn 1215: point = 4
   Insn 1214: point = 4
  BB 80
   Insn 1452: point = 4
   Insn 1451: point = 4
   Insn 1450: point = 4
   Insn 1449: point = 4
  BB 84
   Insn 1527: point = 4
   Insn 1526: point = 4
   Insn 1525: point = 4
   Insn 1524: point = 4
  BB 107
   Insn 1875: point = 4
   Insn 1874: point = 4
   Insn 1873: point = 4
   Insn 1872: point = 4
  BB 110
   Insn 1894: point = 4
  BB 111
   Insn 1897: point = 4
  BB 109
   Insn 1893: point = 4
   Insn 1892: point = 4
   Insn 1891: point = 5
   Insn 1887: point = 6
   Insn 1884: point = 8
  BB 46
   Insn 697: point = 9
   Insn 696: point = 9
   Insn 695: point = 10
   Insn 694: point = 12
  BB 108
   Insn 1945: point = 13
  BB 106
   Insn 1943: point = 13
   Insn 1867: point = 13
   Insn 1866: point = 13
   Insn 1865: point = 14
   Insn 1864: point = 15
   Insn 1863: point = 17
   Insn 1862: point = 18
   Insn 1861: point = 20
   Insn 1860: point = 22
   Insn 1859: point = 23
   Insn 1858: point = 25
   Insn 1857: point = 27
   Insn 1856: point = 28
   Insn 1855: point = 28
   Insn 1854: point = 28
  BB 105
   Insn 1852: point = 28
   Insn 1851: point = 28
   Insn 1850: point = 29
   Insn 1849: point = 30
   Insn 1848: point = 30
   Insn 1847: point = 31
   Insn 1846: point = 31
   Insn 1845: point = 33
   Insn 1844: point = 35
   Insn 1843: point = 36
   Insn 1842: point = 38
   Insn 1841: point = 40
  BB 104
   Insn 1941: point = 41
   Insn 1836: point = 41
   Insn 1835: point = 41
  BB 103
   Insn 1833: point = 41
   Insn 1832: point = 41
   Insn 1831: point = 42
   Insn 1830: point = 43
   Insn 1829: point = 43
   Insn 1828: point = 44
   Insn 1827: point = 44
   Insn 1826: point = 46
   Insn 1825: point = 48
   Insn 1824: point = 49
   Insn 1823: point = 51
   Insn 1822: point = 53
  BB 102
   Insn 1939: point = 54
   Insn 1817: point = 54
   Insn 1816: point = 54
  BB 101
   Insn 1814: point = 54
   Insn 1813: point = 54
   Insn 1812: point = 55
   Insn 1811: point = 56
   Insn 1810: point = 56
   Insn 1809: point = 57
   Insn 1808: point = 57
   Insn 1807: point = 59
   Insn 1806: point = 61
   Insn 1805: point = 62
   Insn 1804: point = 64
   Insn 1803: point = 66
  BB 100
   Insn 1937: point = 67
   Insn 1798: point = 67
   Insn 1797: point = 68
   Insn 1796: point = 70
   Insn 1795: point = 72
   Insn 1794: point = 74
   Insn 1793: point = 75
   Insn 1792: point = 77
   Insn 1791: point = 78
   Insn 1790: point = 79
   Insn 1789: point = 80
   Insn 1788: point = 82
   Insn 1787: point = 84
   Insn 1786: point = 85
   Insn 1785: point = 85
   Insn 1784: point = 85
   Insn 1783: point = 86
   Insn 1782: point = 86
   Insn 1781: point = 87
   Insn 1780: point = 89
   Insn 1779: point = 91
   Insn 1778: point = 92
   Insn 1777: point = 94
   Insn 1776: point = 96
   Insn 1775: point = 97
   Insn 1774: point = 99
   Insn 1773: point = 101
   Insn 1772: point = 102
   Insn 1771: point = 102
   Insn 1770: point = 102
   Insn 1769: point = 103
   Insn 1768: point = 103
   Insn 1767: point = 104
   Insn 1766: point = 106
   Insn 1765: point = 108
   Insn 1764: point = 109
   Insn 1763: point = 111
   Insn 1762: point = 113
   Insn 1761: point = 114
   Insn 1760: point = 116
   Insn 1759: point = 117
  BB 99
   Insn 1757: point = 117
   Insn 1756: point = 117
   Insn 1755: point = 118
   Insn 1754: point = 119
   Insn 1753: point = 119
   Insn 1752: point = 120
   Insn 1751: point = 120
   Insn 1750: point = 122
   Insn 1749: point = 124
   Insn 1748: point = 125
   Insn 1747: point = 127
   Insn 1746: point = 129
  BB 98
   Insn 1935: point = 130
   Insn 1741: point = 130
   Insn 1740: point = 131
   Insn 1739: point = 133
   Insn 1738: point = 134
   Insn 1737: point = 136
   Insn 1736: point = 138
   Insn 1735: point = 140
   Insn 1734: point = 141
   Insn 1733: point = 141
   Insn 1732: point = 142
   Insn 1731: point = 144
   Insn 1730: point = 146
  BB 97
   Insn 1728: point = 147
   Insn 1727: point = 147
   Insn 1726: point = 148
   Insn 1725: point = 149
   Insn 1724: point = 149
   Insn 1723: point = 150
   Insn 1722: point = 150
   Insn 1721: point = 152
   Insn 1720: point = 154
   Insn 1719: point = 155
   Insn 1718: point = 157
   Insn 1717: point = 159
  BB 96
   Insn 1933: point = 160
   Insn 1712: point = 160
   Insn 1711: point = 161
   Insn 1710: point = 163
   Insn 1709: point = 164
   Insn 1708: point = 166
   Insn 1707: point = 168
   Insn 1706: point = 170
   Insn 1705: point = 171
   Insn 1704: point = 171
   Insn 1703: point = 172
   Insn 1702: point = 174
   Insn 1701: point = 176
  BB 95
   Insn 1699: point = 177
   Insn 1698: point = 177
   Insn 1697: point = 178
   Insn 1696: point = 179
   Insn 1695: point = 179
   Insn 1694: point = 180
   Insn 1693: point = 180
   Insn 1692: point = 182
   Insn 1691: point = 184
   Insn 1690: point = 185
   Insn 1689: point = 187
   Insn 1688: point = 189
  BB 94
   Insn 1931: point = 190
   Insn 1683: point = 190
   Insn 1682: point = 191
   Insn 1681: point = 193
   Insn 1680: point = 194
   Insn 1679: point = 196
   Insn 1678: point = 198
   Insn 1677: point = 200
   Insn 1676: point = 201
   Insn 1675: point = 201
   Insn 1674: point = 202
   Insn 1673: point = 204
   Insn 1672: point = 206
  BB 93
   Insn 1670: point = 207
   Insn 1669: point = 207
   Insn 1668: point = 208
   Insn 1667: point = 209
   Insn 1666: point = 209
   Insn 1665: point = 210
   Insn 1664: point = 210
   Insn 1663: point = 212
   Insn 1662: point = 214
   Insn 1661: point = 215
   Insn 1660: point = 217
   Insn 1659: point = 219
  BB 92
   Insn 1929: point = 220
   Insn 1654: point = 220
   Insn 1653: point = 221
   Insn 1652: point = 223
   Insn 1651: point = 224
   Insn 1650: point = 226
   Insn 1649: point = 228
   Insn 1648: point = 230
   Insn 1647: point = 231
   Insn 1646: point = 231
   Insn 1645: point = 232
   Insn 1644: point = 234
   Insn 1643: point = 236
  BB 91
   Insn 1641: point = 237
   Insn 1640: point = 237
   Insn 1639: point = 238
   Insn 1638: point = 239
   Insn 1637: point = 239
   Insn 1636: point = 240
   Insn 1635: point = 240
   Insn 1634: point = 242
   Insn 1633: point = 244
   Insn 1632: point = 245
   Insn 1631: point = 247
   Insn 1630: point = 249
  BB 90
   Insn 1927: point = 250
   Insn 1625: point = 250
   Insn 1624: point = 250
   Insn 1623: point = 250
   Insn 1622: point = 251
   Insn 1621: point = 251
   Insn 1620: point = 252
   Insn 1619: point = 254
   Insn 1618: point = 256
   Insn 1617: point = 257
   Insn 1616: point = 259
   Insn 1615: point = 261
   Insn 1614: point = 262
   Insn 1613: point = 264
   Insn 1612: point = 266
   Insn 1611: point = 267
   Insn 1610: point = 269
   Insn 1609: point = 271
   Insn 1608: point = 273
   Insn 1607: point = 274
   Insn 1606: point = 274
   Insn 1605: point = 275
   Insn 1604: point = 277
   Insn 1603: point = 279
   Insn 1602: point = 280
  BB 89
   Insn 1600: point = 280
   Insn 1599: point = 280
   Insn 1598: point = 281
   Insn 1597: point = 282
   Insn 1596: point = 282
   Insn 1595: point = 283
   Insn 1594: point = 283
   Insn 1593: point = 285
   Insn 1592: point = 287
   Insn 1591: point = 288
   Insn 1590: point = 290
   Insn 1589: point = 292
  BB 88
   Insn 1925: point = 293
   Insn 1584: point = 293
   Insn 1583: point = 294
   Insn 1582: point = 296
   Insn 1581: point = 297
   Insn 1580: point = 299
   Insn 1579: point = 301
   Insn 1578: point = 303
   Insn 1577: point = 304
   Insn 1576: point = 304
   Insn 1575: point = 305
   Insn 1574: point = 307
   Insn 1573: point = 309
  BB 87
   Insn 1571: point = 310
   Insn 1570: point = 310
   Insn 1569: point = 311
   Insn 1568: point = 312
   Insn 1567: point = 312
   Insn 1566: point = 313
   Insn 1565: point = 313
   Insn 1564: point = 315
   Insn 1563: point = 317
   Insn 1562: point = 318
   Insn 1561: point = 320
   Insn 1560: point = 322
  BB 86
   Insn 1923: point = 323
   Insn 1555: point = 323
   Insn 1554: point = 324
   Insn 1553: point = 326
   Insn 1552: point = 327
   Insn 1551: point = 329
   Insn 1550: point = 331
   Insn 1549: point = 333
   Insn 1548: point = 334
   Insn 1547: point = 334
   Insn 1546: point = 335
   Insn 1545: point = 337
   Insn 1544: point = 339
  BB 85
   Insn 1542: point = 340
   Insn 1541: point = 340
   Insn 1540: point = 341
   Insn 1539: point = 342
   Insn 1538: point = 342
   Insn 1537: point = 343
   Insn 1536: point = 343
   Insn 1535: point = 345
   Insn 1534: point = 347
   Insn 1533: point = 348
   Insn 1532: point = 350
   Insn 1531: point = 352
  BB 83
   Insn 1921: point = 353
   Insn 1519: point = 353
   Insn 1518: point = 353
   Insn 1517: point = 353
   Insn 1516: point = 354
   Insn 1515: point = 354
   Insn 1514: point = 355
   Insn 1513: point = 357
   Insn 1512: point = 359
   Insn 1511: point = 360
   Insn 1510: point = 362
   Insn 1509: point = 364
   Insn 1508: point = 365
   Insn 1507: point = 367
   Insn 1506: point = 369
   Insn 1505: point = 370
   Insn 1504: point = 372
   Insn 1503: point = 374
   Insn 1502: point = 376
   Insn 1501: point = 377
   Insn 1500: point = 377
   Insn 1499: point = 378
   Insn 1498: point = 380
   Insn 1497: point = 382
   Insn 1496: point = 383
   Insn 1495: point = 383
   Insn 1494: point = 384
   Insn 1493: point = 386
   Insn 1492: point = 387
   Insn 1491: point = 389
   Insn 1490: point = 391
   Insn 1489: point = 393
   Insn 1488: point = 394
   Insn 1487: point = 394
   Insn 1486: point = 395
   Insn 1485: point = 397
   Insn 1484: point = 399
  BB 82
   Insn 1482: point = 400
   Insn 1481: point = 400
   Insn 1480: point = 401
   Insn 1479: point = 403
   Insn 1478: point = 405
   Insn 1477: point = 406
   Insn 1476: point = 408
   Insn 1475: point = 410
   Insn 1474: point = 412
   Insn 1473: point = 413
   Insn 1472: point = 413
   Insn 1471: point = 414
   Insn 1470: point = 416
   Insn 1469: point = 418
  BB 81
   Insn 1467: point = 419
   Insn 1466: point = 419
   Insn 1465: point = 420
   Insn 1464: point = 421
   Insn 1463: point = 421
   Insn 1462: point = 422
   Insn 1461: point = 422
   Insn 1460: point = 424
   Insn 1459: point = 426
   Insn 1458: point = 427
   Insn 1457: point = 429
   Insn 1456: point = 431
  BB 79
   Insn 1919: point = 432
   Insn 1444: point = 432
   Insn 1443: point = 433
   Insn 1442: point = 434
   Insn 1441: point = 436
   Insn 1440: point = 437
   Insn 1439: point = 439
   Insn 1438: point = 441
   Insn 1437: point = 443
   Insn 1436: point = 444
   Insn 1435: point = 444
   Insn 1434: point = 445
   Insn 1433: point = 447
   Insn 1432: point = 449
   Insn 1431: point = 450
   Insn 1430: point = 451
   Insn 1429: point = 453
   Insn 1428: point = 454
   Insn 1427: point = 456
   Insn 1426: point = 458
   Insn 1425: point = 460
   Insn 1424: point = 461
   Insn 1423: point = 461
   Insn 1422: point = 462
   Insn 1421: point = 464
   Insn 1420: point = 466
  BB 78
   Insn 1418: point = 467
   Insn 1417: point = 467
   Insn 1416: point = 468
   Insn 1415: point = 470
   Insn 1414: point = 472
   Insn 1413: point = 473
   Insn 1412: point = 475
   Insn 1411: point = 477
   Insn 1410: point = 479
   Insn 1409: point = 480
   Insn 1408: point = 480
   Insn 1407: point = 481
   Insn 1406: point = 483
   Insn 1405: point = 485
  BB 77
   Insn 1403: point = 486
   Insn 1402: point = 486
   Insn 1401: point = 487
   Insn 1400: point = 488
   Insn 1399: point = 488
   Insn 1398: point = 489
   Insn 1397: point = 489
   Insn 1396: point = 491
   Insn 1395: point = 493
   Insn 1394: point = 494
   Insn 1393: point = 496
   Insn 1392: point = 498
  BB 76
   Insn 1917: point = 499
   Insn 1385: point = 499
   Insn 2050: point = 500
   Insn 1384: point = 501
   Insn 1383: point = 502
  BB 75
   Insn 1915: point = 503
   Insn 1378: point = 503
   Insn 2049: point = 504
   Insn 1377: point = 505
   Insn 1376: point = 506
   Insn 1374: point = 508
   Insn 1373: point = 510
   Insn 2047: point = 512
	Hard reg 0 is preferable by r1026 with profit 1
   Insn 1372: point = 514
   Insn 2048: point = 516
	Hard reg 4 is preferable by r1027 with profit 1
   Insn 2046: point = 518
	Hard reg 0 is preferable by r1026 with profit 1
	Hard reg 2 is preferable by r1026 with profit 1
   Insn 1371: point = 520
   Insn 1370: point = 521
   Insn 1369: point = 523
   Insn 1375: point = 524
   Insn 1368: point = 525
   Insn 1367: point = 527
  BB 74
   Insn 1365: point = 528
   Insn 1364: point = 528
  BB 124
   Insn 2012: point = 528
   Insn 2011: point = 528
  BB 125
   Insn 2016: point = 528
  BB 123
   Insn 2007: point = 528
   Insn 2006: point = 528
  BB 122
   Insn 2002: point = 528
   Insn 2001: point = 528
  BB 121
   Insn 1997: point = 528
   Insn 1996: point = 528
  BB 120
   Insn 1992: point = 528
   Insn 1991: point = 528
  BB 119
   Insn 1987: point = 528
   Insn 1986: point = 528
  BB 73
   Insn 1982: point = 528
   Insn 1359: point = 528
   Insn 1358: point = 528
   Insn 1357: point = 529
   Insn 1356: point = 530
   Insn 1355: point = 530
   Insn 1354: point = 531
   Insn 1353: point = 531
   Insn 1352: point = 533
  BB 72
   Insn 1346: point = 534
   Insn 1345: point = 534
   Insn 1344: point = 534
   Insn 1343: point = 535
   Insn 1342: point = 536
   Insn 1341: point = 536
   Insn 1340: point = 537
   Insn 1339: point = 537
   Insn 1338: point = 539
  BB 71
   Insn 1332: point = 540
   Insn 1331: point = 540
   Insn 1330: point = 540
   Insn 1329: point = 541
   Insn 1328: point = 542
   Insn 1327: point = 542
   Insn 1326: point = 543
   Insn 1325: point = 543
   Insn 1324: point = 545
  BB 70
   Insn 1318: point = 546
   Insn 1317: point = 546
   Insn 1316: point = 546
   Insn 1315: point = 547
   Insn 1314: point = 548
   Insn 1313: point = 548
   Insn 1312: point = 549
   Insn 1311: point = 549
   Insn 1310: point = 551
  BB 69
   Insn 1304: point = 552
   Insn 1303: point = 552
   Insn 1302: point = 552
   Insn 1301: point = 553
   Insn 1300: point = 554
   Insn 1299: point = 554
   Insn 1298: point = 555
   Insn 1297: point = 555
   Insn 1296: point = 557
  BB 68
   Insn 1290: point = 558
   Insn 1289: point = 558
   Insn 1288: point = 558
   Insn 1287: point = 559
   Insn 1286: point = 560
   Insn 1285: point = 560
   Insn 1284: point = 561
   Insn 1283: point = 561
   Insn 1282: point = 563
  BB 67
   Insn 1276: point = 564
   Insn 1275: point = 564
   Insn 1274: point = 564
   Insn 1273: point = 565
   Insn 1272: point = 566
   Insn 1271: point = 566
   Insn 1270: point = 567
   Insn 1269: point = 567
   Insn 1268: point = 569
  BB 66
   Insn 1262: point = 570
   Insn 1261: point = 570
   Insn 1260: point = 570
   Insn 1259: point = 571
   Insn 1258: point = 572
   Insn 1257: point = 572
   Insn 1256: point = 573
   Insn 1255: point = 573
   Insn 1254: point = 575
  BB 65
   Insn 1249: point = 576
   Insn 1248: point = 576
   Insn 1247: point = 577
   Insn 1246: point = 578
   Insn 1245: point = 578
   Insn 1244: point = 578
   Insn 1243: point = 579
   Insn 1242: point = 580
   Insn 1241: point = 582
   Insn 1240: point = 583
   Insn 1239: point = 585
   Insn 1238: point = 587
  BB 64
   Insn 1235: point = 588
   Insn 1234: point = 588
   Insn 1233: point = 589
   Insn 1232: point = 590
   Insn 1231: point = 592
   Insn 1230: point = 594
   Insn 1229: point = 595
   Insn 1228: point = 597
   Insn 1227: point = 599
   Insn 1226: point = 600
   Insn 1225: point = 602
   Insn 1224: point = 604
   Insn 1223: point = 605
   Insn 1222: point = 605
   Insn 1221: point = 606
  BB 62
   Insn 1212: point = 607
   Insn 1211: point = 607
   Insn 1210: point = 607
   Insn 1209: point = 608
   Insn 1208: point = 609
   Insn 1207: point = 609
   Insn 1206: point = 610
   Insn 1205: point = 610
   Insn 1204: point = 612
   Insn 1203: point = 613
   Insn 2045: point = 614
   Insn 1202: point = 615
   Insn 1201: point = 616
   Insn 1199: point = 618
   Insn 1198: point = 620
   Insn 2043: point = 622
	Hard reg 0 is preferable by r1023 with profit 1
   Insn 1197: point = 624
   Insn 2044: point = 626
	Hard reg 4 is preferable by r1024 with profit 1
   Insn 2042: point = 628
	Hard reg 0 is preferable by r1023 with profit 1
	Hard reg 2 is preferable by r1023 with profit 1
   Insn 1196: point = 630
   Insn 1195: point = 631
   Insn 1194: point = 633
   Insn 1200: point = 634
   Insn 1193: point = 635
   Insn 1192: point = 637
   Insn 1191: point = 638
   Insn 1190: point = 638
   Insn 1189: point = 639
   Insn 1188: point = 640
   Insn 1187: point = 642
   Insn 1186: point = 643
   Insn 1185: point = 645
   Insn 1184: point = 647
   Insn 1183: point = 648
   Insn 1182: point = 650
   Insn 1181: point = 652
  BB 61
   Insn 1179: point = 653
   Insn 1178: point = 653
   Insn 1177: point = 654
   Insn 1176: point = 656
   Insn 1175: point = 657
   Insn 1174: point = 657
   Insn 1173: point = 658
  BB 59
   Insn 1164: point = 659
   Insn 1163: point = 659
   Insn 1162: point = 659
   Insn 1161: point = 660
   Insn 1160: point = 661
   Insn 1159: point = 661
   Insn 1158: point = 662
   Insn 1157: point = 662
   Insn 1156: point = 664
  BB 58
   Insn 1153: point = 665
   Insn 2041: point = 666
   Insn 1152: point = 667
   Insn 1151: point = 668
   Insn 1149: point = 670
   Insn 1148: point = 672
   Insn 2039: point = 674
	Hard reg 0 is preferable by r1020 with profit 1
   Insn 1147: point = 676
   Insn 2040: point = 678
	Hard reg 4 is preferable by r1021 with profit 1
   Insn 2038: point = 680
	Hard reg 0 is preferable by r1020 with profit 1
	Hard reg 2 is preferable by r1020 with profit 1
   Insn 1146: point = 682
   Insn 1145: point = 683
   Insn 1144: point = 685
   Insn 1150: point = 686
   Insn 1143: point = 687
   Insn 1142: point = 689
  BB 57
   Insn 1140: point = 690
   Insn 1139: point = 690
   Insn 1138: point = 691
   Insn 1137: point = 693
   Insn 1136: point = 694
   Insn 1135: point = 694
   Insn 1134: point = 695
   Insn 1133: point = 696
   Insn 1132: point = 698
   Insn 1131: point = 699
   Insn 1130: point = 701
   Insn 1129: point = 703
   Insn 1128: point = 704
   Insn 1127: point = 706
   Insn 1126: point = 708
   Insn 1125: point = 709
   Insn 1124: point = 710
   Insn 1123: point = 711
   Insn 1122: point = 713
   Insn 1121: point = 714
   Insn 1120: point = 716
   Insn 1119: point = 718
   Insn 1118: point = 720
   Insn 1117: point = 721
   Insn 1116: point = 721
   Insn 1115: point = 722
   Insn 1114: point = 724
   Insn 1113: point = 726
   Insn 1112: point = 727
   Insn 1111: point = 727
   Insn 1110: point = 728
   Insn 1109: point = 730
   Insn 1108: point = 731
   Insn 1107: point = 731
   Insn 1106: point = 732
   Insn 1105: point = 734
   Insn 1104: point = 736
   Insn 1103: point = 737
   Insn 1102: point = 739
   Insn 1101: point = 741
   Insn 1100: point = 742
   Insn 1099: point = 744
   Insn 1098: point = 745
   Insn 1097: point = 747
   Insn 1096: point = 749
   Insn 1095: point = 751
   Insn 1094: point = 752
   Insn 1093: point = 752
   Insn 1092: point = 753
   Insn 1091: point = 755
   Insn 1090: point = 757
   Insn 1089: point = 758
   Insn 1088: point = 759
   Insn 1087: point = 761
   Insn 1086: point = 762
   Insn 1085: point = 764
   Insn 1084: point = 765
   Insn 1083: point = 767
   Insn 1082: point = 769
   Insn 1081: point = 771
   Insn 1080: point = 772
   Insn 1079: point = 772
   Insn 1078: point = 773
   Insn 1077: point = 775
   Insn 1076: point = 777
   Insn 1075: point = 778
   Insn 1074: point = 779
   Insn 1073: point = 781
   Insn 1072: point = 782
   Insn 1071: point = 784
   Insn 1070: point = 786
   Insn 1069: point = 788
   Insn 1068: point = 789
   Insn 1067: point = 789
   Insn 1066: point = 790
   Insn 1065: point = 792
   Insn 1064: point = 794
   Insn 1063: point = 795
   Insn 1062: point = 796
   Insn 1061: point = 797
   Insn 1060: point = 798
   Insn 1059: point = 800
   Insn 1058: point = 801
   Insn 1057: point = 803
   Insn 1056: point = 804
   Insn 1055: point = 806
   Insn 1054: point = 808
   Insn 1053: point = 810
   Insn 1052: point = 811
   Insn 1051: point = 811
   Insn 1050: point = 812
   Insn 1049: point = 814
   Insn 1048: point = 816
   Insn 1047: point = 817
   Insn 1046: point = 818
   Insn 1045: point = 820
   Insn 1044: point = 821
   Insn 1043: point = 821
   Insn 1042: point = 822
   Insn 1041: point = 824
   Insn 1040: point = 826
   Insn 1039: point = 827
   Insn 1038: point = 829
   Insn 1037: point = 831
   Insn 1036: point = 832
   Insn 1035: point = 834
   Insn 1034: point = 835
   Insn 1033: point = 837
   Insn 1032: point = 839
   Insn 1031: point = 841
   Insn 1030: point = 842
   Insn 1029: point = 842
   Insn 1028: point = 843
   Insn 1027: point = 845
   Insn 1026: point = 847
   Insn 1025: point = 848
   Insn 1024: point = 848
   Insn 1023: point = 849
   Insn 1022: point = 850
   Insn 1021: point = 850
   Insn 1020: point = 851
   Insn 1019: point = 853
   Insn 1018: point = 855
   Insn 1017: point = 856
   Insn 1016: point = 858
   Insn 1015: point = 860
   Insn 1014: point = 861
   Insn 1013: point = 863
   Insn 1012: point = 864
   Insn 1011: point = 866
   Insn 1010: point = 868
   Insn 1009: point = 870
   Insn 1008: point = 871
   Insn 1007: point = 871
   Insn 1006: point = 872
   Insn 1005: point = 874
   Insn 1004: point = 876
   Insn 1003: point = 877
   Insn 1002: point = 877
   Insn 1001: point = 878
   Insn 1000: point = 880
   Insn 999: point = 881
   Insn 998: point = 883
   Insn 997: point = 885
   Insn 996: point = 887
   Insn 995: point = 888
   Insn 994: point = 888
   Insn 993: point = 889
   Insn 992: point = 891
   Insn 991: point = 893
  BB 56
   Insn 989: point = 894
   Insn 988: point = 894
   Insn 987: point = 895
   Insn 986: point = 896
   Insn 985: point = 896
   Insn 984: point = 897
   Insn 983: point = 897
   Insn 982: point = 899
   Insn 981: point = 901
   Insn 980: point = 902
   Insn 979: point = 904
   Insn 978: point = 906
  BB 55
   Insn 975: point = 907
   Insn 974: point = 908
   Insn 973: point = 908
   Insn 971: point = 910
   Insn 970: point = 912
   Insn 2036: point = 914
	Hard reg 0 is preferable by r1018 with profit 1
   Insn 969: point = 916
   Insn 2037: point = 918
	Hard reg 4 is preferable by r1019 with profit 1
   Insn 2035: point = 920
	Hard reg 0 is preferable by r1018 with profit 1
	Hard reg 2 is preferable by r1018 with profit 1
   Insn 968: point = 922
   Insn 967: point = 923
   Insn 966: point = 925
   Insn 972: point = 926
   Insn 965: point = 927
   Insn 964: point = 929
  BB 54
   Insn 962: point = 930
   Insn 961: point = 930
   Insn 960: point = 931
   Insn 959: point = 933
   Insn 958: point = 934
   Insn 957: point = 934
   Insn 956: point = 935
   Insn 955: point = 936
   Insn 954: point = 938
   Insn 953: point = 939
   Insn 952: point = 941
   Insn 951: point = 943
   Insn 950: point = 944
   Insn 949: point = 946
   Insn 948: point = 948
   Insn 947: point = 949
   Insn 946: point = 950
   Insn 945: point = 952
   Insn 944: point = 953
   Insn 943: point = 955
   Insn 942: point = 957
   Insn 941: point = 959
   Insn 940: point = 960
   Insn 939: point = 960
   Insn 938: point = 961
   Insn 937: point = 963
   Insn 936: point = 965
   Insn 935: point = 966
   Insn 934: point = 967
   Insn 933: point = 968
   Insn 932: point = 970
   Insn 931: point = 971
   Insn 930: point = 973
   Insn 929: point = 975
   Insn 928: point = 977
   Insn 927: point = 978
   Insn 926: point = 978
   Insn 925: point = 979
   Insn 924: point = 981
   Insn 923: point = 983
   Insn 922: point = 984
   Insn 921: point = 984
   Insn 920: point = 985
   Insn 919: point = 987
   Insn 918: point = 988
   Insn 917: point = 988
   Insn 916: point = 989
   Insn 915: point = 991
   Insn 914: point = 993
   Insn 913: point = 994
   Insn 912: point = 996
   Insn 911: point = 998
   Insn 910: point = 999
   Insn 909: point = 1001
   Insn 908: point = 1002
   Insn 907: point = 1004
   Insn 906: point = 1006
   Insn 905: point = 1008
   Insn 904: point = 1009
   Insn 903: point = 1009
   Insn 902: point = 1010
   Insn 901: point = 1012
   Insn 900: point = 1014
   Insn 899: point = 1015
   Insn 898: point = 1016
   Insn 897: point = 1017
   Insn 896: point = 1018
   Insn 895: point = 1020
   Insn 894: point = 1021
   Insn 893: point = 1023
   Insn 892: point = 1024
   Insn 891: point = 1026
   Insn 890: point = 1028
   Insn 889: point = 1030
   Insn 888: point = 1031
   Insn 887: point = 1031
   Insn 886: point = 1032
   Insn 885: point = 1034
   Insn 884: point = 1036
   Insn 883: point = 1037
   Insn 882: point = 1038
   Insn 881: point = 1040
   Insn 880: point = 1041
   Insn 879: point = 1041
   Insn 878: point = 1042
   Insn 877: point = 1044
   Insn 876: point = 1046
   Insn 875: point = 1047
   Insn 874: point = 1049
   Insn 873: point = 1051
   Insn 872: point = 1052
   Insn 871: point = 1054
   Insn 870: point = 1055
   Insn 869: point = 1057
   Insn 868: point = 1059
   Insn 867: point = 1061
   Insn 866: point = 1062
   Insn 865: point = 1062
   Insn 864: point = 1063
   Insn 863: point = 1065
   Insn 862: point = 1067
   Insn 861: point = 1068
   Insn 860: point = 1068
   Insn 859: point = 1069
   Insn 858: point = 1071
   Insn 857: point = 1072
   Insn 856: point = 1074
   Insn 855: point = 1076
   Insn 854: point = 1078
   Insn 853: point = 1079
   Insn 852: point = 1079
   Insn 851: point = 1080
   Insn 850: point = 1082
   Insn 849: point = 1084
  BB 53
   Insn 847: point = 1085
   Insn 846: point = 1085
   Insn 845: point = 1086
   Insn 844: point = 1087
   Insn 843: point = 1087
   Insn 842: point = 1088
   Insn 841: point = 1088
   Insn 840: point = 1090
   Insn 839: point = 1092
   Insn 838: point = 1093
   Insn 837: point = 1095
   Insn 836: point = 1097
  BB 52
   Insn 833: point = 1098
   Insn 832: point = 1099
   Insn 831: point = 1099
   Insn 829: point = 1101
   Insn 828: point = 1103
   Insn 2033: point = 1105
	Hard reg 0 is preferable by r1016 with profit 1
   Insn 827: point = 1107
   Insn 2034: point = 1109
	Hard reg 4 is preferable by r1017 with profit 1
   Insn 2032: point = 1111
	Hard reg 0 is preferable by r1016 with profit 1
	Hard reg 2 is preferable by r1016 with profit 1
   Insn 826: point = 1113
   Insn 825: point = 1114
   Insn 824: point = 1116
   Insn 830: point = 1117
   Insn 823: point = 1118
   Insn 822: point = 1120
  BB 51
   Insn 820: point = 1121
   Insn 819: point = 1121
   Insn 818: point = 1122
   Insn 817: point = 1124
   Insn 816: point = 1125
   Insn 815: point = 1125
   Insn 814: point = 1126
   Insn 813: point = 1127
   Insn 812: point = 1129
   Insn 811: point = 1130
   Insn 810: point = 1132
   Insn 809: point = 1134
   Insn 808: point = 1135
   Insn 807: point = 1137
   Insn 806: point = 1139
   Insn 805: point = 1140
   Insn 804: point = 1141
   Insn 803: point = 1143
   Insn 802: point = 1144
   Insn 801: point = 1146
   Insn 800: point = 1148
   Insn 799: point = 1150
   Insn 798: point = 1151
   Insn 797: point = 1151
   Insn 796: point = 1152
   Insn 795: point = 1154
   Insn 794: point = 1156
   Insn 793: point = 1157
   Insn 792: point = 1158
   Insn 791: point = 1159
   Insn 790: point = 1161
   Insn 789: point = 1162
   Insn 788: point = 1164
   Insn 787: point = 1166
   Insn 786: point = 1168
   Insn 785: point = 1169
   Insn 784: point = 1169
   Insn 783: point = 1170
   Insn 782: point = 1172
   Insn 781: point = 1174
   Insn 780: point = 1175
   Insn 779: point = 1176
   Insn 778: point = 1177
   Insn 777: point = 1178
   Insn 776: point = 1179
   Insn 775: point = 1181
   Insn 774: point = 1182
   Insn 773: point = 1184
   Insn 772: point = 1186
   Insn 771: point = 1188
   Insn 770: point = 1189
   Insn 769: point = 1189
   Insn 768: point = 1190
   Insn 767: point = 1192
   Insn 766: point = 1194
   Insn 765: point = 1195
   Insn 764: point = 1195
   Insn 763: point = 1196
   Insn 762: point = 1198
   Insn 761: point = 1199
   Insn 760: point = 1201
   Insn 759: point = 1203
   Insn 758: point = 1205
   Insn 757: point = 1206
   Insn 756: point = 1206
   Insn 755: point = 1207
   Insn 754: point = 1209
   Insn 753: point = 1211
  BB 50
   Insn 751: point = 1212
   Insn 750: point = 1212
   Insn 749: point = 1213
   Insn 748: point = 1214
   Insn 747: point = 1214
   Insn 746: point = 1215
   Insn 745: point = 1215
   Insn 744: point = 1217
   Insn 743: point = 1219
   Insn 742: point = 1220
   Insn 741: point = 1222
   Insn 740: point = 1224
  BB 49
   Insn 737: point = 1225
   Insn 736: point = 1225
   Insn 735: point = 1226
   Insn 734: point = 1227
   Insn 733: point = 1227
   Insn 732: point = 1228
   Insn 731: point = 1228
   Insn 730: point = 1230
   Insn 729: point = 1232
   Insn 728: point = 1233
   Insn 727: point = 1235
   Insn 726: point = 1237
  BB 48
   Insn 724: point = 1238
   Insn 723: point = 1238
   Insn 722: point = 1239
   Insn 721: point = 1240
   Insn 720: point = 1240
   Insn 719: point = 1241
   Insn 718: point = 1241
   Insn 717: point = 1243
   Insn 716: point = 1245
   Insn 715: point = 1246
   Insn 714: point = 1248
   Insn 713: point = 1250
  BB 47
   Insn 711: point = 1251
   Insn 710: point = 1251
   Insn 709: point = 1252
   Insn 708: point = 1253
   Insn 707: point = 1253
   Insn 706: point = 1254
   Insn 705: point = 1254
   Insn 704: point = 1256
   Insn 703: point = 1258
   Insn 702: point = 1259
   Insn 701: point = 1261
   Insn 700: point = 1263
   Insn 699: point = 1264
  BB 45
   Insn 692: point = 1264
   Insn 691: point = 1265
   Insn 690: point = 1266
  BB 44
   Insn 687: point = 1266
   Insn 686: point = 1266
   Insn 685: point = 1267
  BB 42
   Insn 676: point = 1268
   Insn 675: point = 1268
   Insn 674: point = 1268
   Insn 673: point = 1268
   Insn 672: point = 1268
   Insn 671: point = 1268
   Insn 670: point = 1269
   Insn 669: point = 1271
   Insn 668: point = 1272
   Insn 667: point = 1273
   Insn 666: point = 1274
   Insn 665: point = 1274
   Insn 664: point = 1275
   Insn 663: point = 1275
   Insn 662: point = 1277
   Insn 661: point = 1278
   Insn 660: point = 1279
   Insn 2031: point = 1279
   Insn 659: point = 1280
   Insn 658: point = 1281
   Insn 656: point = 1283
   Insn 655: point = 1285
   Insn 2029: point = 1287
	Hard reg 0 is preferable by r1013 with profit 1
   Insn 654: point = 1289
   Insn 2030: point = 1291
	Hard reg 4 is preferable by r1014 with profit 1
   Insn 2028: point = 1293
	Hard reg 0 is preferable by r1013 with profit 1
	Hard reg 2 is preferable by r1013 with profit 1
   Insn 653: point = 1295
   Insn 652: point = 1296
   Insn 651: point = 1298
   Insn 657: point = 1299
   Insn 650: point = 1300
   Insn 649: point = 1302
   Insn 648: point = 1303
   Insn 647: point = 1303
   Insn 646: point = 1304
   Insn 645: point = 1305
   Insn 644: point = 1307
   Insn 643: point = 1308
   Insn 642: point = 1310
   Insn 641: point = 1312
  BB 41
   Insn 639: point = 1313
   Insn 638: point = 1313
   Insn 637: point = 1314
   Insn 636: point = 1316
  BB 39
   Insn 1913: point = 1317
   Insn 615: point = 1317
   Insn 614: point = 1317
   Insn 613: point = 1318
   Insn 612: point = 1319
   Insn 611: point = 1319
  BB 38
   Insn 608: point = 1319
   Insn 607: point = 1319
   Insn 606: point = 1320
  BB 37
   Insn 604: point = 1321
   Insn 603: point = 1321
   Insn 602: point = 1322
   Insn 601: point = 1323
   Insn 600: point = 1323
   Insn 599: point = 1323
   Insn 598: point = 1323
   Insn 597: point = 1323
   Insn 596: point = 1323
   Insn 595: point = 1324
   Insn 594: point = 1325
   Insn 593: point = 1325
   Insn 592: point = 1325
   Insn 591: point = 1325
   Insn 590: point = 1325
   Insn 589: point = 1325
   Insn 588: point = 1325
   Insn 587: point = 1325
   Insn 586: point = 1325
   Insn 585: point = 1325
   Insn 584: point = 1326
   Insn 583: point = 1328
   Insn 582: point = 1329
   Insn 581: point = 1329
   Insn 580: point = 1329
  BB 36
   Insn 578: point = 1329
   Insn 577: point = 1329
   Insn 576: point = 1330
   Insn 575: point = 1331
   Insn 574: point = 1331
   Insn 573: point = 1332
   Insn 572: point = 1333
   Insn 571: point = 1333
   Insn 570: point = 1334
   Insn 569: point = 1334
   Insn 568: point = 1336
  BB 19
   Insn 377: point = 1337
   Insn 376: point = 1337
   Insn 375: point = 1338
  BB 35
   Insn 1911: point = 1339
   Insn 562: point = 1339
  BB 33
   Insn 1909: point = 1339
   Insn 551: point = 1339
   Insn 550: point = 1340
   Insn 549: point = 1340
   Insn 548: point = 1340
   Insn 546: point = 1342
   Insn 545: point = 1344
   Insn 2026: point = 1346
	Hard reg 0 is preferable by r1011 with profit 1
   Insn 544: point = 1348
   Insn 2027: point = 1350
	Hard reg 4 is preferable by r1012 with profit 1
   Insn 2025: point = 1352
	Hard reg 0 is preferable by r1011 with profit 1
	Hard reg 2 is preferable by r1011 with profit 1
   Insn 543: point = 1354
   Insn 542: point = 1355
   Insn 541: point = 1357
   Insn 547: point = 1358
   Insn 540: point = 1359
   Insn 539: point = 1361
  BB 34
   Insn 559: point = 1362
   Insn 558: point = 1363
   Insn 557: point = 1363
   Insn 556: point = 1363
  BB 32
   Insn 537: point = 1364
   Insn 536: point = 1364
  BB 117
   Insn 1977: point = 1364
   Insn 1976: point = 1364
  BB 118
   Insn 1981: point = 1364
  BB 116
   Insn 1972: point = 1364
   Insn 1971: point = 1364
  BB 115
   Insn 1967: point = 1364
   Insn 1966: point = 1364
  BB 114
   Insn 1962: point = 1364
   Insn 1961: point = 1364
  BB 113
   Insn 1957: point = 1364
   Insn 1956: point = 1364
  BB 112
   Insn 1952: point = 1364
   Insn 1951: point = 1364
  BB 31
   Insn 1947: point = 1364
   Insn 531: point = 1364
   Insn 530: point = 1364
   Insn 529: point = 1365
   Insn 528: point = 1366
   Insn 527: point = 1366
   Insn 526: point = 1367
   Insn 525: point = 1367
   Insn 524: point = 1369
  BB 30
   Insn 518: point = 1370
   Insn 517: point = 1370
   Insn 516: point = 1370
   Insn 515: point = 1371
   Insn 514: point = 1372
   Insn 513: point = 1372
   Insn 512: point = 1373
   Insn 511: point = 1373
   Insn 510: point = 1375
  BB 29
   Insn 504: point = 1376
   Insn 503: point = 1376
   Insn 502: point = 1376
   Insn 501: point = 1377
   Insn 500: point = 1378
   Insn 499: point = 1378
   Insn 498: point = 1379
   Insn 497: point = 1379
   Insn 496: point = 1381
  BB 28
   Insn 490: point = 1382
   Insn 489: point = 1382
   Insn 488: point = 1382
   Insn 487: point = 1383
   Insn 486: point = 1384
   Insn 485: point = 1384
   Insn 484: point = 1385
   Insn 483: point = 1385
   Insn 482: point = 1387
  BB 27
   Insn 476: point = 1388
   Insn 475: point = 1388
   Insn 474: point = 1388
   Insn 473: point = 1389
   Insn 472: point = 1390
   Insn 471: point = 1390
   Insn 470: point = 1391
   Insn 469: point = 1391
   Insn 468: point = 1393
  BB 26
   Insn 462: point = 1394
   Insn 461: point = 1394
   Insn 460: point = 1394
   Insn 459: point = 1395
   Insn 458: point = 1396
   Insn 457: point = 1396
   Insn 456: point = 1397
   Insn 455: point = 1397
   Insn 454: point = 1399
  BB 25
   Insn 448: point = 1400
   Insn 447: point = 1400
   Insn 446: point = 1400
   Insn 445: point = 1401
   Insn 444: point = 1402
   Insn 443: point = 1402
   Insn 442: point = 1403
   Insn 441: point = 1403
   Insn 440: point = 1405
  BB 24
   Insn 434: point = 1406
   Insn 433: point = 1406
   Insn 432: point = 1406
   Insn 431: point = 1407
   Insn 430: point = 1408
   Insn 429: point = 1408
   Insn 428: point = 1409
   Insn 427: point = 1409
   Insn 426: point = 1411
  BB 23
   Insn 421: point = 1412
   Insn 420: point = 1412
   Insn 419: point = 1413
  BB 22
   Insn 416: point = 1414
   Insn 415: point = 1414
   Insn 414: point = 1415
   Insn 413: point = 1416
   Insn 412: point = 1416
   Insn 411: point = 1417
   Insn 410: point = 1417
   Insn 409: point = 1419
   Insn 408: point = 1421
   Insn 407: point = 1422
   Insn 406: point = 1424
   Insn 405: point = 1426
  BB 21
   Insn 403: point = 1427
   Insn 402: point = 1427
   Insn 401: point = 1428
   Insn 400: point = 1429
   Insn 399: point = 1429
   Insn 398: point = 1430
   Insn 397: point = 1430
   Insn 396: point = 1432
   Insn 395: point = 1434
   Insn 394: point = 1435
   Insn 393: point = 1437
   Insn 392: point = 1439
  BB 20
   Insn 390: point = 1440
   Insn 389: point = 1440
   Insn 388: point = 1441
   Insn 387: point = 1442
   Insn 386: point = 1442
   Insn 385: point = 1443
   Insn 384: point = 1443
   Insn 383: point = 1445
   Insn 382: point = 1447
   Insn 381: point = 1448
   Insn 380: point = 1450
   Insn 379: point = 1452
  BB 18
   Insn 373: point = 1453
   Insn 372: point = 1453
   Insn 371: point = 1453
   Insn 370: point = 1454
   Insn 369: point = 1455
   Insn 368: point = 1457
   Insn 367: point = 1458
   Insn 366: point = 1460
   Insn 365: point = 1462
   Insn 364: point = 1463
   Insn 363: point = 1463
   Insn 362: point = 1464
  BB 16
   Insn 353: point = 1465
   Insn 352: point = 1465
   Insn 351: point = 1465
   Insn 350: point = 1466
   Insn 349: point = 1467
   Insn 348: point = 1467
   Insn 347: point = 1468
   Insn 346: point = 1468
  BB 15
   Insn 343: point = 1469
   Insn 2024: point = 1470
   Insn 342: point = 1471
   Insn 341: point = 1472
   Insn 339: point = 1474
   Insn 338: point = 1476
   Insn 2022: point = 1478
	Hard reg 0 is preferable by r1008 with profit 1
   Insn 337: point = 1480
   Insn 2023: point = 1482
	Hard reg 4 is preferable by r1009 with profit 1
   Insn 2021: point = 1484
	Hard reg 0 is preferable by r1008 with profit 1
	Hard reg 2 is preferable by r1008 with profit 1
   Insn 336: point = 1486
   Insn 335: point = 1487
   Insn 334: point = 1489
   Insn 340: point = 1490
   Insn 333: point = 1491
  BB 14
   Insn 331: point = 1492
   Insn 330: point = 1492
   Insn 329: point = 1493
   Insn 328: point = 1495
   Insn 327: point = 1496
   Insn 326: point = 1496
   Insn 325: point = 1497
   Insn 324: point = 1498
   Insn 323: point = 1499
  BB 13
   Insn 321: point = 1500
   Insn 320: point = 1500
   Insn 319: point = 1500
   Insn 318: point = 1501
   Insn 317: point = 1502
   Insn 316: point = 1502
   Insn 315: point = 1503
   Insn 314: point = 1503
  BB 12
   Insn 311: point = 1504
   Insn 310: point = 1505
   Insn 309: point = 1505
   Insn 307: point = 1507
   Insn 306: point = 1509
   Insn 2019: point = 1511
	Hard reg 0 is preferable by r1006 with profit 1
   Insn 305: point = 1513
   Insn 2020: point = 1515
	Hard reg 4 is preferable by r1007 with profit 1
   Insn 2018: point = 1517
	Hard reg 0 is preferable by r1006 with profit 1
	Hard reg 2 is preferable by r1006 with profit 1
   Insn 304: point = 1519
   Insn 303: point = 1520
   Insn 302: point = 1522
   Insn 308: point = 1523
   Insn 301: point = 1524
  BB 11
   Insn 299: point = 1525
   Insn 298: point = 1525
   Insn 297: point = 1526
   Insn 296: point = 1528
   Insn 295: point = 1529
   Insn 294: point = 1529
   Insn 293: point = 1530
   Insn 292: point = 1531
   Insn 291: point = 1532
   Insn 290: point = 1533
   Insn 289: point = 1533
   Insn 288: point = 1534
   Insn 287: point = 1535
   Insn 286: point = 1537
   Insn 285: point = 1538
   Insn 284: point = 1540
   Insn 283: point = 1542
   Insn 282: point = 1543
   Insn 281: point = 1543
   Insn 280: point = 1544
   Insn 279: point = 1545
   Insn 278: point = 1546
   Insn 277: point = 1548
   Insn 276: point = 1550
  BB 10
   Insn 273: point = 1551
   Insn 272: point = 1552
   Insn 271: point = 1554
   Insn 270: point = 1555
   Insn 269: point = 1557
   Insn 268: point = 1559
   Insn 267: point = 1561
   Insn 266: point = 1562
   Insn 265: point = 1562
   Insn 264: point = 1563
   Insn 263: point = 1565
  BB 9
   Insn 261: point = 1566
   Insn 260: point = 1566
   Insn 259: point = 1567
   Insn 258: point = 1568
   Insn 257: point = 1568
   Insn 256: point = 1569
   Insn 255: point = 1569
   Insn 254: point = 1571
   Insn 253: point = 1573
  BB 8
   Insn 250: point = 1574
   Insn 249: point = 1575
  BB 7
   Insn 247: point = 1576
   Insn 246: point = 1576
   Insn 245: point = 1577
   Insn 244: point = 1578
   Insn 243: point = 1578
   Insn 242: point = 1579
   Insn 241: point = 1579
   Insn 240: point = 1581
   Insn 239: point = 1583
  BB 6
   Insn 236: point = 1584
   Insn 235: point = 1585
  BB 5
   Insn 233: point = 1586
   Insn 232: point = 1586
   Insn 231: point = 1587
   Insn 230: point = 1588
   Insn 229: point = 1588
   Insn 228: point = 1589
   Insn 227: point = 1589
   Insn 226: point = 1591
   Insn 225: point = 1593
  BB 3
   Insn 16: point = 1594
   Insn 15: point = 1594
  BB 4
   Insn 1907: point = 1594
   Insn 219: point = 1594
   Insn 218: point = 1594
   Insn 217: point = 1595
   Insn 216: point = 1597
   Insn 215: point = 1598
   Insn 214: point = 1600
   Insn 213: point = 1602
   Insn 212: point = 1604
   Insn 211: point = 1605
   Insn 210: point = 1605
   Insn 209: point = 1606
   Insn 208: point = 1608
   Insn 207: point = 1609
   Insn 206: point = 1610
   Insn 205: point = 1612
   Insn 204: point = 1613
   Insn 203: point = 1615
   Insn 202: point = 1617
   Insn 201: point = 1619
   Insn 200: point = 1620
   Insn 199: point = 1620
   Insn 198: point = 1621
   Insn 197: point = 1623
   Insn 196: point = 1624
   Insn 195: point = 1625
   Insn 194: point = 1627
   Insn 193: point = 1628
   Insn 192: point = 1630
   Insn 191: point = 1632
   Insn 190: point = 1634
   Insn 189: point = 1635
   Insn 188: point = 1635
   Insn 187: point = 1636
   Insn 186: point = 1638
   Insn 185: point = 1639
   Insn 184: point = 1640
   Insn 183: point = 1642
   Insn 182: point = 1643
   Insn 181: point = 1645
   Insn 180: point = 1647
   Insn 179: point = 1649
   Insn 178: point = 1650
   Insn 177: point = 1650
   Insn 176: point = 1651
   Insn 175: point = 1653
   Insn 174: point = 1654
   Insn 173: point = 1655
   Insn 172: point = 1657
   Insn 171: point = 1658
   Insn 170: point = 1660
   Insn 169: point = 1662
   Insn 168: point = 1664
   Insn 167: point = 1665
   Insn 166: point = 1665
   Insn 165: point = 1666
   Insn 164: point = 1668
   Insn 163: point = 1669
   Insn 162: point = 1670
   Insn 161: point = 1671
   Insn 160: point = 1673
   Insn 159: point = 1674
   Insn 158: point = 1676
   Insn 157: point = 1678
   Insn 156: point = 1680
   Insn 155: point = 1681
   Insn 154: point = 1681
   Insn 153: point = 1682
   Insn 152: point = 1684
   Insn 151: point = 1685
   Insn 150: point = 1686
   Insn 149: point = 1688
   Insn 148: point = 1689
   Insn 147: point = 1691
   Insn 146: point = 1693
   Insn 145: point = 1695
   Insn 144: point = 1696
   Insn 143: point = 1696
   Insn 142: point = 1697
   Insn 141: point = 1699
   Insn 140: point = 1700
   Insn 139: point = 1701
   Insn 138: point = 1703
   Insn 137: point = 1704
   Insn 136: point = 1706
   Insn 135: point = 1708
   Insn 134: point = 1710
   Insn 133: point = 1711
   Insn 132: point = 1711
   Insn 131: point = 1712
   Insn 130: point = 1714
   Insn 129: point = 1715
   Insn 128: point = 1716
   Insn 127: point = 1718
   Insn 126: point = 1719
   Insn 125: point = 1721
   Insn 124: point = 1723
   Insn 123: point = 1725
   Insn 122: point = 1726
   Insn 121: point = 1726
   Insn 120: point = 1727
   Insn 119: point = 1729
   Insn 118: point = 1730
   Insn 117: point = 1731
   Insn 116: point = 1733
   Insn 115: point = 1734
   Insn 114: point = 1736
   Insn 113: point = 1738
   Insn 112: point = 1740
   Insn 111: point = 1741
   Insn 110: point = 1741
   Insn 109: point = 1742
   Insn 108: point = 1744
   Insn 107: point = 1745
   Insn 106: point = 1746
   Insn 105: point = 1747
   Insn 104: point = 1749
   Insn 103: point = 1750
   Insn 102: point = 1752
   Insn 101: point = 1754
   Insn 100: point = 1756
   Insn 99: point = 1757
   Insn 98: point = 1757
   Insn 97: point = 1758
   Insn 96: point = 1760
   Insn 95: point = 1761
   Insn 94: point = 1762
   Insn 93: point = 1764
   Insn 92: point = 1765
   Insn 91: point = 1767
   Insn 90: point = 1769
   Insn 89: point = 1771
   Insn 88: point = 1772
   Insn 87: point = 1772
   Insn 86: point = 1773
   Insn 85: point = 1775
   Insn 84: point = 1776
   Insn 83: point = 1777
   Insn 82: point = 1779
   Insn 81: point = 1780
   Insn 80: point = 1782
   Insn 79: point = 1784
   Insn 78: point = 1786
   Insn 77: point = 1787
   Insn 76: point = 1787
   Insn 75: point = 1788
   Insn 74: point = 1790
   Insn 73: point = 1791
   Insn 72: point = 1792
   Insn 71: point = 1794
   Insn 70: point = 1795
   Insn 69: point = 1797
   Insn 68: point = 1799
   Insn 67: point = 1801
   Insn 66: point = 1802
   Insn 65: point = 1802
   Insn 64: point = 1803
   Insn 63: point = 1805
   Insn 62: point = 1806
   Insn 61: point = 1807
   Insn 60: point = 1809
   Insn 59: point = 1810
   Insn 58: point = 1812
   Insn 57: point = 1814
   Insn 56: point = 1816
   Insn 55: point = 1817
   Insn 54: point = 1817
   Insn 53: point = 1818
   Insn 52: point = 1820
   Insn 51: point = 1821
   Insn 50: point = 1822
   Insn 49: point = 1823
   Insn 48: point = 1825
   Insn 47: point = 1826
   Insn 46: point = 1828
   Insn 45: point = 1830
   Insn 44: point = 1832
   Insn 43: point = 1833
   Insn 42: point = 1833
   Insn 41: point = 1834
   Insn 40: point = 1836
   Insn 39: point = 1837
   Insn 38: point = 1838
   Insn 37: point = 1840
   Insn 36: point = 1841
   Insn 35: point = 1843
   Insn 34: point = 1845
   Insn 33: point = 1847
   Insn 32: point = 1848
   Insn 31: point = 1848
   Insn 30: point = 1849
   Insn 29: point = 1851
   Insn 28: point = 1852
   Insn 27: point = 1853
   Insn 26: point = 1855
   Insn 25: point = 1856
   Insn 24: point = 1858
   Insn 23: point = 1860
   Insn 22: point = 1862
   Insn 21: point = 1863
   Insn 20: point = 1863
   Insn 19: point = 1864
   Insn 18: point = 1866
  BB 2
   Insn 13: point = 1867
   Insn 12: point = 1867
   Insn 9: point = 1867
   Insn 7: point = 1869
   Insn 6: point = 1869
   Insn 5: point = 1869
   Insn 4: point = 1869
   Insn 3: point = 1869
   Insn 2: point = 1869
 r87: [1862..1864]
 r88: [1854..1856]
 r89: [1852..1853]
 r90: [1847..1849]
 r91: [1839..1841]
 r92: [1837..1838]
 r93: [1832..1834]
 r94: [1824..1826]
 r95: [1821..1823]
 r96: [1816..1818]
 r97: [1808..1810]
 r98: [1806..1807]
 r99: [1801..1803]
 r100: [1793..1795]
 r101: [1791..1792]
 r102: [1786..1788]
 r103: [1778..1780]
 r104: [1776..1777]
 r105: [1771..1773]
 r106: [1763..1765]
 r107: [1761..1762]
 r108: [1756..1758]
 r109: [1748..1750]
 r110: [1745..1747]
 r111: [1740..1742]
 r112: [1732..1734]
 r113: [1730..1731]
 r114: [1725..1727]
 r115: [1717..1719]
 r116: [1715..1716]
 r117: [1710..1712]
 r118: [1702..1704]
 r119: [1700..1701]
 r120: [1695..1697]
 r121: [1687..1689]
 r122: [1685..1686]
 r123: [1680..1682]
 r124: [1672..1674]
 r125: [1669..1671]
 r126: [1664..1666]
 r127: [1656..1658]
 r128: [1654..1655]
 r129: [1649..1651]
 r130: [1641..1643]
 r131: [1639..1640]
 r132: [1634..1636]
 r133: [1626..1628]
 r134: [1624..1625]
 r135: [1619..1621]
 r136: [1611..1613]
 r137: [1609..1610]
 r138: [1604..1606]
 r139: [1596..1598]
 r140: [1594..1595]
 r141: [1590..1591]
 r142: [1588..1589]
 r143: [1586..1587]
 r144: [1580..1581]
 r145: [1578..1579]
 r146: [1576..1577]
 r147: [1570..1571]
 r148: [1568..1569]
 r149: [1566..1567]
 r150: [1561..1563]
 r151: [1553..1555]
 r152: [1551..1552]
 r153: [1547..1548]
 r154: [1544..1546]
 r155: [1543..1545]
 r156: [1539..1540]
 r157: [1534..1538]
 r158: [1533..1535]
 r159: [1530..1532]
 r160: [1525..1526]
 r161: [1506..1524]
 r162: [1506..1507]
 r163: [1504..1505]
 r164: [1502..1503]
 r165: [1500..1501]
 r166: [1496..1499]
 r167: [1492..1493]
 r168: [1473..1491]
 r169: [1473..1474]
 r170: [1469..1472]
 r171: [1467..1468]
 r172: [1465..1466]
 r173: [1459..1460]
 r174: [1454..1458]
 r175: [1453..1455]
 r176: [1449..1450]
 r177: [1446..1448]
 r178: [1444..1445]
 r179: [1442..1443]
 r180: [1440..1441]
 r181: [1436..1437]
 r182: [1433..1435]
 r183: [1431..1432]
 r184: [1429..1430]
 r185: [1427..1428]
 r186: [1423..1424]
 r187: [1420..1422]
 r188: [1418..1419]
 r189: [1416..1417]
 r190: [1414..1415]
 r191: [1408..1409]
 r192: [1402..1403]
 r193: [1396..1397]
 r194: [1390..1391]
 r195: [1384..1385]
 r196: [1378..1379]
 r197: [1372..1373]
 r198: [1366..1367]
 r199: [1341..1359]
 r200: [1341..1342]
 r201: [1339..1340]
 r202: [1333..1334]
 r203: [1331..1332]
 r204: [1329..1330]
 r205: [1325..1326]
 r206: [1321..1322]
 r207: [1319..1320]
 r208: [0..1]
 r209: [1313..1314]
 r210: [1309..1310]
 r211: [1304..1308]
 r212: [1303..1305]
 r213: [1282..1300]
 r214: [1282..1283]
 r215: [1278..1281]
 r216: [1274..1275]
 r217: [1272..1273]
 r218: [1268..1269]
 r219: [9..10]
 r220: [1260..1261]
 r221: [1257..1259]
 r222: [1255..1256]
 r223: [1253..1254]
 r224: [1251..1252]
 r225: [1247..1248]
 r226: [1244..1246]
 r227: [1242..1243]
 r228: [1240..1241]
 r229: [1238..1239]
 r230: [1234..1235]
 r231: [1231..1233]
 r232: [1229..1230]
 r233: [1227..1228]
 r234: [1225..1226]
 r235: [495..496]
 r236: [492..494]
 r237: [490..491]
 r238: [488..489]
 r239: [486..487]
 r240: [482..483]
 r241: [479..481]
 r242: [471..473]
 r243: [469..470]
 r244: [467..468]
 r245: [463..464]
 r246: [460..462]
 r247: [452..454]
 r248: [450..451]
 r249: [446..447]
 r250: [443..445]
 r251: [435..437]
 r252: [432..434]
 r253: [428..429]
 r254: [425..427]
 r255: [423..424]
 r256: [421..422]
 r257: [419..420]
 r258: [415..416]
 r259: [412..414]
 r260: [404..406]
 r261: [402..403]
 r262: [400..401]
 r263: [396..397]
 r264: [393..395]
 r265: [385..387]
 r266: [383..384]
 r267: [379..380]
 r268: [376..378]
 r269: [368..370]
 r270: [366..367]
 r271: [354..365]
 r272: [361..362]
 r273: [358..360]
 r274: [356..357]
 r275: [353..355]
 r276: [349..350]
 r277: [346..348]
 r278: [344..345]
 r279: [342..343]
 r280: [340..341]
 r281: [336..337]
 r282: [333..335]
 r283: [325..327]
 r284: [323..324]
 r285: [319..320]
 r286: [316..318]
 r287: [314..315]
 r288: [312..313]
 r289: [310..311]
 r290: [306..307]
 r291: [303..305]
 r292: [295..297]
 r293: [293..294]
 r294: [289..290]
 r295: [286..288]
 r296: [284..285]
 r297: [282..283]
 r298: [280..281]
 r299: [276..277]
 r300: [273..275]
 r301: [265..267]
 r302: [263..264]
 r303: [251..262]
 r304: [258..259]
 r305: [255..257]
 r306: [253..254]
 r307: [250..252]
 r308: [246..247]
 r309: [243..245]
 r310: [241..242]
 r311: [239..240]
 r312: [237..238]
 r313: [233..234]
 r314: [230..232]
 r315: [222..224]
 r316: [220..221]
 r317: [216..217]
 r318: [213..215]
 r319: [211..212]
 r320: [209..210]
 r321: [207..208]
 r322: [203..204]
 r323: [200..202]
 r324: [192..194]
 r325: [190..191]
 r326: [186..187]
 r327: [183..185]
 r328: [181..182]
 r329: [179..180]
 r330: [177..178]
 r331: [173..174]
 r332: [170..172]
 r333: [162..164]
 r334: [160..161]
 r335: [156..157]
 r336: [153..155]
 r337: [151..152]
 r338: [149..150]
 r339: [147..148]
 r340: [143..144]
 r341: [140..142]
 r342: [132..134]
 r343: [130..131]
 r344: [126..127]
 r345: [123..125]
 r346: [121..122]
 r347: [119..120]
 r348: [117..118]
 r349: [103..114]
 r350: [110..111]
 r351: [107..109]
 r352: [105..106]
 r353: [102..104]
 r354: [98..99]
 r355: [86..97]
 r356: [93..94]
 r357: [90..92]
 r358: [88..89]
 r359: [85..87]
 r360: [81..82]
 r361: [78..80]
 r362: [67..75]
 r363: [71..72]
 r364: [69..70]
 r365: [67..68]
 r366: [63..64]
 r367: [60..62]
 r368: [58..59]
 r369: [56..57]
 r370: [54..55]
 r371: [50..51]
 r372: [47..49]
 r373: [45..46]
 r374: [43..44]
 r375: [41..42]
 r376: [37..38]
 r377: [34..36]
 r378: [32..33]
 r379: [30..31]
 r380: [28..29]
 r381: [24..25]
 r382: [21..23]
 r383: [19..20]
 r384: [14..18]
 r385: [13..15]
 r386: [1221..1222]
 r387: [1218..1220]
 r388: [1216..1217]
 r389: [1214..1215]
 r390: [1212..1213]
 r391: [1208..1209]
 r392: [1205..1207]
 r393: [1197..1199]
 r394: [1195..1196]
 r395: [1191..1192]
 r396: [1188..1190]
 r397: [1180..1182]
 r398: [1177..1179]
 r399: [1171..1172]
 r400: [1168..1170]
 r401: [1160..1162]
 r402: [1157..1159]
 r403: [1153..1154]
 r404: [1150..1152]
 r405: [1142..1144]
 r406: [1140..1141]
 r407: [1136..1137]
 r408: [1133..1135]
 r409: [1131..1132]
 r410: [1126..1130]
 r411: [1125..1127]
 r412: [1121..1122]
 r413: [1100..1118]
 r414: [1100..1101]
 r415: [1098..1099]
 r416: [1094..1095]
 r417: [1091..1093]
 r418: [1089..1090]
 r419: [1087..1088]
 r420: [1085..1086]
 r421: [1081..1082]
 r422: [1078..1080]
 r423: [1070..1072]
 r424: [1068..1069]
 r425: [1064..1065]
 r426: [1061..1063]
 r427: [1053..1055]
 r428: [1037..1052]
 r429: [1048..1049]
 r430: [1045..1047]
 r431: [1043..1044]
 r432: [1041..1042]
 r433: [1039..1040]
 r434: [1037..1038]
 r435: [1033..1034]
 r436: [1030..1032]
 r437: [1022..1024]
 r438: [1017..1021]
 r439: [1017..1018]
 r440: [1011..1012]
 r441: [1008..1010]
 r442: [1000..1002]
 r443: [984..999]
 r444: [995..996]
 r445: [992..994]
 r446: [990..991]
 r447: [988..989]
 r448: [986..987]
 r449: [984..985]
 r450: [980..981]
 r451: [977..979]
 r452: [969..971]
 r453: [966..968]
 r454: [962..963]
 r455: [959..961]
 r456: [951..953]
 r457: [949..950]
 r458: [945..946]
 r459: [942..944]
 r460: [940..941]
 r461: [935..939]
 r462: [934..936]
 r463: [930..931]
 r464: [909..927]
 r465: [909..910]
 r466: [907..908]
 r467: [903..904]
 r468: [900..902]
 r469: [898..899]
 r470: [896..897]
 r471: [894..895]
 r472: [890..891]
 r473: [887..889]
 r474: [879..881]
 r475: [877..878]
 r476: [873..874]
 r477: [870..872]
 r478: [862..864]
 r479: [848..861]
 r480: [857..858]
 r481: [854..856]
 r482: [852..853]
 r483: [850..851]
 r484: [848..849]
 r485: [844..845]
 r486: [841..843]
 r487: [833..835]
 r488: [817..832]
 r489: [828..829]
 r490: [825..827]
 r491: [823..824]
 r492: [821..822]
 r493: [819..820]
 r494: [817..818]
 r495: [813..814]
 r496: [810..812]
 r497: [802..804]
 r498: [797..801]
 r499: [797..798]
 r500: [791..792]
 r501: [788..790]
 r502: [780..782]
 r503: [778..779]
 r504: [774..775]
 r505: [771..773]
 r506: [763..765]
 r507: [758..762]
 r508: [758..759]
 r509: [754..755]
 r510: [751..753]
 r511: [743..745]
 r512: [727..742]
 r513: [738..739]
 r514: [735..737]
 r515: [733..734]
 r516: [731..732]
 r517: [729..730]
 r518: [727..728]
 r519: [723..724]
 r520: [720..722]
 r521: [712..714]
 r522: [709..711]
 r523: [705..706]
 r524: [702..704]
 r525: [700..701]
 r526: [695..699]
 r527: [694..696]
 r528: [690..691]
 r529: [669..687]
 r530: [669..670]
 r531: [665..668]
 r532: [661..662]
 r533: [659..660]
 r534: [653..654]
 r535: [649..650]
 r536: [646..648]
 r537: [644..645]
 r538: [639..643]
 r539: [638..640]
 r540: [617..635]
 r541: [617..618]
 r542: [613..616]
 r543: [609..610]
 r544: [607..608]
 r545: [601..602]
 r546: [598..600]
 r547: [596..597]
 r548: [589..595]
 r549: [591..592]
 r550: [588..590]
 r551: [584..585]
 r552: [579..583]
 r553: [578..580]
 r554: [572..573]
 r555: [566..567]
 r556: [560..561]
 r557: [554..555]
 r558: [548..549]
 r559: [542..543]
 r560: [536..537]
 r561: [530..531]
 r562: [507..525]
 r563: [507..508]
 r564: [503..506]
 r565: [7..8]
 r566: [5..6]
 r567: [1865..1866]
 r568: [1861..1863] [1857..1858]
 r569: [1859..1860]
 r570: [1854..1855]
 r571: [1850..1851]
 r572: [1846..1848] [1842..1843]
 r573: [1844..1845]
 r574: [1839..1840]
 r575: [1835..1836]
 r576: [1831..1833] [1827..1828]
 r577: [1829..1830]
 r578: [1824..1825]
 r579: [1821..1822]
 r580: [1819..1820]
 r581: [1815..1817] [1811..1812]
 r582: [1813..1814]
 r583: [1808..1809]
 r584: [1804..1805]
 r585: [1800..1802] [1796..1797]
 r586: [1798..1799]
 r587: [1793..1794]
 r588: [1789..1790]
 r589: [1785..1787] [1781..1782]
 r590: [1783..1784]
 r591: [1778..1779]
 r592: [1774..1775]
 r593: [1770..1772] [1766..1767]
 r594: [1768..1769]
 r595: [1763..1764]
 r596: [1759..1760]
 r597: [1755..1757] [1751..1752]
 r598: [1753..1754]
 r599: [1748..1749]
 r600: [1745..1746]
 r601: [1743..1744]
 r602: [1739..1741] [1735..1736]
 r603: [1737..1738]
 r604: [1732..1733]
 r605: [1728..1729]
 r606: [1724..1726] [1720..1721]
 r607: [1722..1723]
 r608: [1717..1718]
 r609: [1713..1714]
 r610: [1709..1711] [1705..1706]
 r611: [1707..1708]
 r612: [1702..1703]
 r613: [1698..1699]
 r614: [1694..1696] [1690..1691]
 r615: [1692..1693]
 r616: [1687..1688]
 r617: [1683..1684]
 r618: [1679..1681] [1675..1676]
 r619: [1677..1678]
 r620: [1672..1673]
 r621: [1669..1670]
 r622: [1667..1668]
 r623: [1663..1665] [1659..1660]
 r624: [1661..1662]
 r625: [1656..1657]
 r626: [1652..1653]
 r627: [1648..1650] [1644..1645]
 r628: [1646..1647]
 r629: [1641..1642]
 r630: [1637..1638]
 r631: [1633..1635] [1629..1630]
 r632: [1631..1632]
 r633: [1626..1627]
 r634: [1622..1623]
 r635: [1618..1620] [1614..1615]
 r636: [1616..1617]
 r637: [1611..1612]
 r638: [1607..1608]
 r639: [1603..1605] [1599..1600]
 r640: [1601..1602]
 r641: [1596..1597]
 r642: [1592..1593]
 r643: [1584..1585]
 r644: [1582..1583]
 r645: [1574..1575]
 r646: [1572..1573]
 r647: [1564..1565]
 r648: [1560..1562] [1556..1557]
 r649: [1558..1559]
 r650: [1553..1554]
 r651: [1549..1550]
 r652: [1541..1542]
 r653: [1536..1537]
 r654: [1529..1531]
 r655: [1527..1528]
 r656: [1521..1523]
 r657: [1510..1511]
 r658: [1508..1509]
 r659: [1516..1520]
 r660: [1518..1522]
 r661: [1514..1519]
 r662: [1497..1498]
 r663: [1494..1495]
 r664: [1488..1490]
 r665: [1477..1478]
 r666: [1475..1476]
 r667: [1483..1487]
 r668: [1485..1489]
 r669: [1481..1486]
 r670: [1463..1464]
 r671: [1461..1462]
 r672: [1456..1457]
 r673: [1337..1338]
 r674: [1451..1452]
 r675: [1446..1447]
 r676: [1438..1439]
 r677: [1433..1434]
 r678: [1425..1426]
 r679: [1420..1421]
 r680: [1412..1413]
 r681: [1410..1411]
 r682: [1406..1407]
 r683: [1404..1405]
 r684: [1400..1401]
 r685: [1398..1399]
 r686: [1394..1395]
 r687: [1392..1393]
 r688: [1388..1389]
 r689: [1386..1387]
 r690: [1382..1383]
 r691: [1380..1381]
 r692: [1376..1377]
 r693: [1374..1375]
 r694: [1370..1371]
 r695: [1368..1369]
 r696: [1364..1365]
 r697: [1360..1361]
 r698: [1356..1358]
 r699: [1345..1346]
 r700: [1343..1344]
 r701: [1351..1355]
 r702: [1353..1357]
 r703: [1349..1354]
 r704: [1362..1363]
 r705: [1335..1336]
 r706: [1327..1328]
 r707: [1323..1324]
 r708: [1317..1318]
 r709: [2..3]
 r710: [1315..1316]
 r711: [1311..1312]
 r712: [1306..1307]
 r713: [1301..1302]
 r714: [1297..1299]
 r715: [1286..1287]
 r716: [1284..1285]
 r717: [1292..1296]
 r718: [1294..1298]
 r719: [1290..1295]
 r720: [1276..1277]
 r721: [1270..1271]
 r722: [1266..1267]
 r723: [1264..1265]
 r724: [11..12]
 r725: [1262..1263]
 r726: [1257..1258]
 r727: [1249..1250]
 r728: [1244..1245]
 r729: [1236..1237]
 r730: [1231..1232]
 r731: [1223..1224]
 r732: [1218..1219]
 r733: [1210..1211]
 r734: [1204..1206] [1200..1201]
 r735: [1202..1203]
 r736: [1197..1198]
 r737: [1193..1194]
 r738: [1187..1189] [1183..1184]
 r739: [1185..1186]
 r740: [1180..1181]
 r741: [1177..1178]
 r742: [1175..1176]
 r743: [1173..1174]
 r744: [1167..1169] [1163..1164]
 r745: [1165..1166]
 r746: [1160..1161]
 r747: [1157..1158]
 r748: [1155..1156]
 r749: [1149..1151] [1145..1146]
 r750: [1147..1148]
 r751: [1142..1143]
 r752: [1138..1139]
 r753: [1133..1134]
 r754: [1128..1129]
 r755: [1123..1124]
 r756: [1119..1120]
 r757: [1115..1117]
 r758: [1104..1105]
 r759: [1102..1103]
 r760: [1110..1114]
 r761: [1112..1116]
 r762: [1108..1113]
 r763: [1096..1097]
 r764: [1091..1092]
 r765: [1083..1084]
 r766: [1077..1079] [1073..1074]
 r767: [1075..1076]
 r768: [1070..1071]
 r769: [1066..1067]
 r770: [1060..1062] [1056..1057]
 r771: [1058..1059]
 r772: [1053..1054]
 r773: [1050..1051]
 r774: [1045..1046]
 r775: [1035..1036]
 r776: [1029..1031] [1025..1026]
 r777: [1027..1028]
 r778: [1022..1023]
 r779: [1019..1020]
 r780: [1015..1016]
 r781: [1013..1014]
 r782: [1007..1009] [1003..1004]
 r783: [1005..1006]
 r784: [1000..1001]
 r785: [997..998]
 r786: [992..993]
 r787: [982..983]
 r788: [976..978] [972..973]
 r789: [974..975]
 r790: [969..970]
 r791: [966..967]
 r792: [964..965]
 r793: [958..960] [954..955]
 r794: [956..957]
 r795: [951..952]
 r796: [947..948]
 r797: [942..943]
 r798: [937..938]
 r799: [932..933]
 r800: [928..929]
 r801: [924..926]
 r802: [913..914]
 r803: [911..912]
 r804: [919..923]
 r805: [921..925]
 r806: [917..922]
 r807: [905..906]
 r808: [900..901]
 r809: [892..893]
 r810: [886..888] [882..883]
 r811: [884..885]
 r812: [879..880]
 r813: [875..876]
 r814: [869..871] [865..866]
 r815: [867..868]
 r816: [862..863]
 r817: [859..860]
 r818: [854..855]
 r819: [846..847]
 r820: [840..842] [836..837]
 r821: [838..839]
 r822: [833..834]
 r823: [830..831]
 r824: [825..826]
 r825: [815..816]
 r826: [809..811] [805..806]
 r827: [807..808]
 r828: [802..803]
 r829: [799..800]
 r830: [795..796]
 r831: [793..794]
 r832: [787..789] [783..784]
 r833: [785..786]
 r834: [780..781]
 r835: [776..777]
 r836: [770..772] [766..767]
 r837: [768..769]
 r838: [763..764]
 r839: [760..761]
 r840: [756..757]
 r841: [750..752] [746..747]
 r842: [748..749]
 r843: [743..744]
 r844: [740..741]
 r845: [735..736]
 r846: [725..726]
 r847: [719..721] [715..716]
 r848: [717..718]
 r849: [712..713]
 r850: [709..710]
 r851: [707..708]
 r852: [702..703]
 r853: [697..698]
 r854: [692..693]
 r855: [688..689]
 r856: [684..686]
 r857: [673..674]
 r858: [671..672]
 r859: [679..683]
 r860: [681..685]
 r861: [677..682]
 r862: [663..664]
 r863: [657..658]
 r864: [655..656]
 r865: [651..652]
 r866: [646..647]
 r867: [641..642]
 r868: [636..637]
 r869: [632..634]
 r870: [621..622]
 r871: [619..620]
 r872: [627..631]
 r873: [629..633]
 r874: [625..630]
 r875: [611..612]
 r876: [605..606]
 r877: [603..604]
 r878: [598..599]
 r879: [593..594]
 r880: [586..587]
 r881: [581..582]
 r882: [576..577]
 r883: [574..575]
 r884: [570..571]
 r885: [568..569]
 r886: [564..565]
 r887: [562..563]
 r888: [558..559]
 r889: [556..557]
 r890: [552..553]
 r891: [550..551]
 r892: [546..547]
 r893: [544..545]
 r894: [540..541]
 r895: [538..539]
 r896: [534..535]
 r897: [532..533]
 r898: [528..529]
 r899: [526..527]
 r900: [522..524]
 r901: [511..512]
 r902: [509..510]
 r903: [517..521]
 r904: [519..523]
 r905: [515..520]
 r906: [499..502]
 r907: [497..498]
 r908: [492..493]
 r909: [484..485]
 r910: [478..480] [474..475]
 r911: [476..477]
 r912: [471..472]
 r913: [465..466]
 r914: [459..461] [455..456]
 r915: [457..458]
 r916: [452..453]
 r917: [448..449]
 r918: [442..444] [438..439]
 r919: [440..441]
 r920: [435..436]
 r921: [432..433]
 r922: [430..431]
 r923: [425..426]
 r924: [417..418]
 r925: [411..413] [407..408]
 r926: [409..410]
 r927: [404..405]
 r928: [398..399]
 r929: [392..394] [388..389]
 r930: [390..391]
 r931: [385..386]
 r932: [381..382]
 r933: [375..377] [371..372]
 r934: [373..374]
 r935: [368..369]
 r936: [363..364]
 r937: [358..359]
 r938: [351..352]
 r939: [346..347]
 r940: [338..339]
 r941: [332..334] [328..329]
 r942: [330..331]
 r943: [325..326]
 r944: [321..322]
 r945: [316..317]
 r946: [308..309]
 r947: [302..304] [298..299]
 r948: [300..301]
 r949: [295..296]
 r950: [291..292]
 r951: [286..287]
 r952: [278..279]
 r953: [272..274] [268..269]
 r954: [270..271]
 r955: [265..266]
 r956: [260..261]
 r957: [255..256]
 r958: [248..249]
 r959: [243..244]
 r960: [235..236]
 r961: [229..231] [225..226]
 r962: [227..228]
 r963: [222..223]
 r964: [218..219]
 r965: [213..214]
 r966: [205..206]
 r967: [199..201] [195..196]
 r968: [197..198]
 r969: [192..193]
 r970: [188..189]
 r971: [183..184]
 r972: [175..176]
 r973: [169..171] [165..166]
 r974: [167..168]
 r975: [162..163]
 r976: [158..159]
 r977: [153..154]
 r978: [145..146]
 r979: [139..141] [135..136]
 r980: [137..138]
 r981: [132..133]
 r982: [128..129]
 r983: [123..124]
 r984: [115..116]
 r985: [112..113]
 r986: [107..108]
 r987: [100..101]
 r988: [95..96]
 r989: [90..91]
 r990: [83..84]
 r991: [78..79]
 r992: [76..77]
 r993: [73..74]
 r994: [65..66]
 r995: [60..61]
 r996: [52..53]
 r997: [47..48]
 r998: [39..40]
 r999: [34..35]
 r1000: [26..27]
 r1001: [21..22]
 r1002: [16..17]
 r1004: [1867..1868]
 r1005: [4..4]
 r1006: [1512..1517]
 r1007: [1513..1515]
 r1008: [1479..1484]
 r1009: [1480..1482]
 r1010: [1470..1471]
 r1011: [1347..1352]
 r1012: [1348..1350]
 r1013: [1288..1293]
 r1014: [1289..1291]
 r1015: [1279..1280]
 r1016: [1106..1111]
 r1017: [1107..1109]
 r1018: [915..920]
 r1019: [916..918]
 r1020: [675..680]
 r1021: [676..678]
 r1022: [666..667]
 r1023: [623..628]
 r1024: [624..626]
 r1025: [614..615]
 r1026: [513..518]
 r1027: [514..516]
 r1028: [504..505]
 r1029: [500..501]
Compressing live ranges: from 1869 to 1573 - 84%
Ranges after the compression:
 r87: [1567..1568]
 r88: [1561..1562]
 r89: [1559..1560]
 r90: [1555..1556]
 r91: [1549..1550]
 r92: [1547..1548]
 r93: [1543..1544]
 r94: [1537..1538]
 r95: [1535..1536]
 r96: [1531..1532]
 r97: [1525..1526]
 r98: [1523..1524]
 r99: [1519..1520]
 r100: [1513..1514]
 r101: [1511..1512]
 r102: [1507..1508]
 r103: [1501..1502]
 r104: [1499..1500]
 r105: [1495..1496]
 r106: [1489..1490]
 r107: [1487..1488]
 r108: [1483..1484]
 r109: [1477..1478]
 r110: [1475..1476]
 r111: [1471..1472]
 r112: [1465..1466]
 r113: [1463..1464]
 r114: [1459..1460]
 r115: [1453..1454]
 r116: [1451..1452]
 r117: [1447..1448]
 r118: [1441..1442]
 r119: [1439..1440]
 r120: [1435..1436]
 r121: [1429..1430]
 r122: [1427..1428]
 r123: [1423..1424]
 r124: [1417..1418]
 r125: [1415..1416]
 r126: [1411..1412]
 r127: [1405..1406]
 r128: [1403..1404]
 r129: [1399..1400]
 r130: [1393..1394]
 r131: [1391..1392]
 r132: [1387..1388]
 r133: [1381..1382]
 r134: [1379..1380]
 r135: [1375..1376]
 r136: [1369..1370]
 r137: [1367..1368]
 r138: [1363..1364]
 r139: [1357..1358]
 r140: [1355..1356]
 r141: [1351..1352]
 r142: [1349..1350]
 r143: [1347..1348]
 r144: [1341..1342]
 r145: [1339..1340]
 r146: [1337..1338]
 r147: [1331..1332]
 r148: [1329..1330]
 r149: [1327..1328]
 r150: [1323..1324]
 r151: [1317..1318]
 r152: [1315..1316]
 r153: [1311..1312]
 r154: [1309..1310]
 r155: [1309..1310]
 r156: [1305..1306]
 r157: [1301..1304]
 r158: [1301..1302]
 r159: [1299..1300]
 r160: [1295..1296]
 r161: [1281..1294]
 r162: [1281..1282]
 r163: [1279..1280]
 r164: [1277..1278]
 r165: [1275..1276]
 r166: [1273..1274]
 r167: [1269..1270]
 r168: [1255..1268]
 r169: [1255..1256]
 r170: [1253..1254]
 r171: [1251..1252]
 r172: [1249..1250]
 r173: [1243..1244]
 r174: [1239..1242]
 r175: [1239..1240]
 r176: [1235..1236]
 r177: [1233..1234]
 r178: [1231..1232]
 r179: [1229..1230]
 r180: [1227..1228]
 r181: [1223..1224]
 r182: [1221..1222]
 r183: [1219..1220]
 r184: [1217..1218]
 r185: [1215..1216]
 r186: [1211..1212]
 r187: [1209..1210]
 r188: [1207..1208]
 r189: [1205..1206]
 r190: [1203..1204]
 r191: [1197..1198]
 r192: [1191..1192]
 r193: [1185..1186]
 r194: [1179..1180]
 r195: [1173..1174]
 r196: [1167..1168]
 r197: [1161..1162]
 r198: [1155..1156]
 r199: [1135..1148]
 r200: [1135..1136]
 r201: [1133..1134]
 r202: [1127..1128]
 r203: [1125..1126]
 r204: [1123..1124]
 r205: [1119..1120]
 r206: [1115..1116]
 r207: [1113..1114]
 r208: [0..1]
 r209: [1107..1108]
 r210: [1103..1104]
 r211: [1099..1102]
 r212: [1099..1100]
 r213: [1083..1096]
 r214: [1083..1084]
 r215: [1081..1082]
 r216: [1077..1078]
 r217: [1075..1076]
 r218: [1071..1072]
 r219: [9..10]
 r220: [1063..1064]
 r221: [1061..1062]
 r222: [1059..1060]
 r223: [1057..1058]
 r224: [1055..1056]
 r225: [1051..1052]
 r226: [1049..1050]
 r227: [1047..1048]
 r228: [1045..1046]
 r229: [1043..1044]
 r230: [1039..1040]
 r231: [1037..1038]
 r232: [1035..1036]
 r233: [1033..1034]
 r234: [1031..1032]
 r235: [425..426]
 r236: [423..424]
 r237: [421..422]
 r238: [419..420]
 r239: [417..418]
 r240: [413..414]
 r241: [411..412]
 r242: [405..406]
 r243: [403..404]
 r244: [401..402]
 r245: [397..398]
 r246: [395..396]
 r247: [389..390]
 r248: [387..388]
 r249: [383..384]
 r250: [381..382]
 r251: [375..376]
 r252: [373..374]
 r253: [369..370]
 r254: [367..368]
 r255: [365..366]
 r256: [363..364]
 r257: [361..362]
 r258: [357..358]
 r259: [355..356]
 r260: [349..350]
 r261: [347..348]
 r262: [345..346]
 r263: [341..342]
 r264: [339..340]
 r265: [333..334]
 r266: [331..332]
 r267: [327..328]
 r268: [325..326]
 r269: [319..320]
 r270: [317..318]
 r271: [307..316]
 r272: [313..314]
 r273: [311..312]
 r274: [309..310]
 r275: [307..308]
 r276: [303..304]
 r277: [301..302]
 r278: [299..300]
 r279: [297..298]
 r280: [295..296]
 r281: [291..292]
 r282: [289..290]
 r283: [283..284]
 r284: [281..282]
 r285: [277..278]
 r286: [275..276]
 r287: [273..274]
 r288: [271..272]
 r289: [269..270]
 r290: [265..266]
 r291: [263..264]
 r292: [257..258]
 r293: [255..256]
 r294: [251..252]
 r295: [249..250]
 r296: [247..248]
 r297: [245..246]
 r298: [243..244]
 r299: [239..240]
 r300: [237..238]
 r301: [231..232]
 r302: [229..230]
 r303: [219..228]
 r304: [225..226]
 r305: [223..224]
 r306: [221..222]
 r307: [219..220]
 r308: [215..216]
 r309: [213..214]
 r310: [211..212]
 r311: [209..210]
 r312: [207..208]
 r313: [203..204]
 r314: [201..202]
 r315: [195..196]
 r316: [193..194]
 r317: [189..190]
 r318: [187..188]
 r319: [185..186]
 r320: [183..184]
 r321: [181..182]
 r322: [177..178]
 r323: [175..176]
 r324: [169..170]
 r325: [167..168]
 r326: [163..164]
 r327: [161..162]
 r328: [159..160]
 r329: [157..158]
 r330: [155..156]
 r331: [151..152]
 r332: [149..150]
 r333: [143..144]
 r334: [141..142]
 r335: [137..138]
 r336: [135..136]
 r337: [133..134]
 r338: [131..132]
 r339: [129..130]
 r340: [125..126]
 r341: [123..124]
 r342: [117..118]
 r343: [115..116]
 r344: [111..112]
 r345: [109..110]
 r346: [107..108]
 r347: [105..106]
 r348: [103..104]
 r349: [91..100]
 r350: [97..98]
 r351: [95..96]
 r352: [93..94]
 r353: [91..92]
 r354: [87..88]
 r355: [77..86]
 r356: [83..84]
 r357: [81..82]
 r358: [79..80]
 r359: [77..78]
 r360: [73..74]
 r361: [71..72]
 r362: [61..68]
 r363: [65..66]
 r364: [63..64]
 r365: [61..62]
 r366: [57..58]
 r367: [55..56]
 r368: [53..54]
 r369: [51..52]
 r370: [49..50]
 r371: [45..46]
 r372: [43..44]
 r373: [41..42]
 r374: [39..40]
 r375: [37..38]
 r376: [33..34]
 r377: [31..32]
 r378: [29..30]
 r379: [27..28]
 r380: [25..26]
 r381: [21..22]
 r382: [19..20]
 r383: [17..18]
 r384: [13..16]
 r385: [13..14]
 r386: [1027..1028]
 r387: [1025..1026]
 r388: [1023..1024]
 r389: [1021..1022]
 r390: [1019..1020]
 r391: [1015..1016]
 r392: [1013..1014]
 r393: [1007..1008]
 r394: [1005..1006]
 r395: [1001..1002]
 r396: [999..1000]
 r397: [993..994]
 r398: [991..992]
 r399: [985..986]
 r400: [983..984]
 r401: [977..978]
 r402: [975..976]
 r403: [971..972]
 r404: [969..970]
 r405: [963..964]
 r406: [961..962]
 r407: [957..958]
 r408: [955..956]
 r409: [953..954]
 r410: [949..952]
 r411: [949..950]
 r412: [945..946]
 r413: [929..942]
 r414: [929..930]
 r415: [927..928]
 r416: [923..924]
 r417: [921..922]
 r418: [919..920]
 r419: [917..918]
 r420: [915..916]
 r421: [911..912]
 r422: [909..910]
 r423: [903..904]
 r424: [901..902]
 r425: [897..898]
 r426: [895..896]
 r427: [889..890]
 r428: [875..888]
 r429: [885..886]
 r430: [883..884]
 r431: [881..882]
 r432: [879..880]
 r433: [877..878]
 r434: [875..876]
 r435: [871..872]
 r436: [869..870]
 r437: [863..864]
 r438: [859..862]
 r439: [859..860]
 r440: [853..854]
 r441: [851..852]
 r442: [845..846]
 r443: [831..844]
 r444: [841..842]
 r445: [839..840]
 r446: [837..838]
 r447: [835..836]
 r448: [833..834]
 r449: [831..832]
 r450: [827..828]
 r451: [825..826]
 r452: [819..820]
 r453: [817..818]
 r454: [813..814]
 r455: [811..812]
 r456: [805..806]
 r457: [803..804]
 r458: [799..800]
 r459: [797..798]
 r460: [795..796]
 r461: [791..794]
 r462: [791..792]
 r463: [787..788]
 r464: [771..784]
 r465: [771..772]
 r466: [769..770]
 r467: [765..766]
 r468: [763..764]
 r469: [761..762]
 r470: [759..760]
 r471: [757..758]
 r472: [753..754]
 r473: [751..752]
 r474: [745..746]
 r475: [743..744]
 r476: [739..740]
 r477: [737..738]
 r478: [731..732]
 r479: [719..730]
 r480: [727..728]
 r481: [725..726]
 r482: [723..724]
 r483: [721..722]
 r484: [719..720]
 r485: [715..716]
 r486: [713..714]
 r487: [707..708]
 r488: [693..706]
 r489: [703..704]
 r490: [701..702]
 r491: [699..700]
 r492: [697..698]
 r493: [695..696]
 r494: [693..694]
 r495: [689..690]
 r496: [687..688]
 r497: [681..682]
 r498: [677..680]
 r499: [677..678]
 r500: [671..672]
 r501: [669..670]
 r502: [663..664]
 r503: [661..662]
 r504: [657..658]
 r505: [655..656]
 r506: [649..650]
 r507: [645..648]
 r508: [645..646]
 r509: [641..642]
 r510: [639..640]
 r511: [633..634]
 r512: [619..632]
 r513: [629..630]
 r514: [627..628]
 r515: [625..626]
 r516: [623..624]
 r517: [621..622]
 r518: [619..620]
 r519: [615..616]
 r520: [613..614]
 r521: [607..608]
 r522: [605..606]
 r523: [601..602]
 r524: [599..600]
 r525: [597..598]
 r526: [593..596]
 r527: [593..594]
 r528: [589..590]
 r529: [573..586]
 r530: [573..574]
 r531: [571..572]
 r532: [567..568]
 r533: [565..566]
 r534: [559..560]
 r535: [555..556]
 r536: [553..554]
 r537: [551..552]
 r538: [547..550]
 r539: [547..548]
 r540: [531..544]
 r541: [531..532]
 r542: [529..530]
 r543: [525..526]
 r544: [523..524]
 r545: [517..518]
 r546: [515..516]
 r547: [513..514]
 r548: [507..512]
 r549: [509..510]
 r550: [507..508]
 r551: [503..504]
 r552: [499..502]
 r553: [499..500]
 r554: [493..494]
 r555: [487..488]
 r556: [481..482]
 r557: [475..476]
 r558: [469..470]
 r559: [463..464]
 r560: [457..458]
 r561: [451..452]
 r562: [433..446]
 r563: [433..434]
 r564: [431..432]
 r565: [7..8]
 r566: [5..6]
 r567: [1569..1570]
 r568: [1567..1568] [1563..1564]
 r569: [1565..1566]
 r570: [1561..1562]
 r571: [1557..1558]
 r572: [1555..1556] [1551..1552]
 r573: [1553..1554]
 r574: [1549..1550]
 r575: [1545..1546]
 r576: [1543..1544] [1539..1540]
 r577: [1541..1542]
 r578: [1537..1538]
 r579: [1535..1536]
 r580: [1533..1534]
 r581: [1531..1532] [1527..1528]
 r582: [1529..1530]
 r583: [1525..1526]
 r584: [1521..1522]
 r585: [1519..1520] [1515..1516]
 r586: [1517..1518]
 r587: [1513..1514]
 r588: [1509..1510]
 r589: [1507..1508] [1503..1504]
 r590: [1505..1506]
 r591: [1501..1502]
 r592: [1497..1498]
 r593: [1495..1496] [1491..1492]
 r594: [1493..1494]
 r595: [1489..1490]
 r596: [1485..1486]
 r597: [1483..1484] [1479..1480]
 r598: [1481..1482]
 r599: [1477..1478]
 r600: [1475..1476]
 r601: [1473..1474]
 r602: [1471..1472] [1467..1468]
 r603: [1469..1470]
 r604: [1465..1466]
 r605: [1461..1462]
 r606: [1459..1460] [1455..1456]
 r607: [1457..1458]
 r608: [1453..1454]
 r609: [1449..1450]
 r610: [1447..1448] [1443..1444]
 r611: [1445..1446]
 r612: [1441..1442]
 r613: [1437..1438]
 r614: [1435..1436] [1431..1432]
 r615: [1433..1434]
 r616: [1429..1430]
 r617: [1425..1426]
 r618: [1423..1424] [1419..1420]
 r619: [1421..1422]
 r620: [1417..1418]
 r621: [1415..1416]
 r622: [1413..1414]
 r623: [1411..1412] [1407..1408]
 r624: [1409..1410]
 r625: [1405..1406]
 r626: [1401..1402]
 r627: [1399..1400] [1395..1396]
 r628: [1397..1398]
 r629: [1393..1394]
 r630: [1389..1390]
 r631: [1387..1388] [1383..1384]
 r632: [1385..1386]
 r633: [1381..1382]
 r634: [1377..1378]
 r635: [1375..1376] [1371..1372]
 r636: [1373..1374]
 r637: [1369..1370]
 r638: [1365..1366]
 r639: [1363..1364] [1359..1360]
 r640: [1361..1362]
 r641: [1357..1358]
 r642: [1353..1354]
 r643: [1345..1346]
 r644: [1343..1344]
 r645: [1335..1336]
 r646: [1333..1334]
 r647: [1325..1326]
 r648: [1323..1324] [1319..1320]
 r649: [1321..1322]
 r650: [1317..1318]
 r651: [1313..1314]
 r652: [1307..1308]
 r653: [1303..1304]
 r654: [1299..1300]
 r655: [1297..1298]
 r656: [1293..1294]
 r657: [1285..1286]
 r658: [1283..1284]
 r659: [1289..1292]
 r660: [1291..1294]
 r661: [1287..1292]
 r662: [1273..1274]
 r663: [1271..1272]
 r664: [1267..1268]
 r665: [1259..1260]
 r666: [1257..1258]
 r667: [1263..1266]
 r668: [1265..1268]
 r669: [1261..1266]
 r670: [1247..1248]
 r671: [1245..1246]
 r672: [1241..1242]
 r673: [1131..1132]
 r674: [1237..1238]
 r675: [1233..1234]
 r676: [1225..1226]
 r677: [1221..1222]
 r678: [1213..1214]
 r679: [1209..1210]
 r680: [1201..1202]
 r681: [1199..1200]
 r682: [1195..1196]
 r683: [1193..1194]
 r684: [1189..1190]
 r685: [1187..1188]
 r686: [1183..1184]
 r687: [1181..1182]
 r688: [1177..1178]
 r689: [1175..1176]
 r690: [1171..1172]
 r691: [1169..1170]
 r692: [1165..1166]
 r693: [1163..1164]
 r694: [1159..1160]
 r695: [1157..1158]
 r696: [1153..1154]
 r697: [1149..1150]
 r698: [1147..1148]
 r699: [1139..1140]
 r700: [1137..1138]
 r701: [1143..1146]
 r702: [1145..1148]
 r703: [1141..1146]
 r704: [1151..1152]
 r705: [1129..1130]
 r706: [1121..1122]
 r707: [1117..1118]
 r708: [1111..1112]
 r709: [2..3]
 r710: [1109..1110]
 r711: [1105..1106]
 r712: [1101..1102]
 r713: [1097..1098]
 r714: [1095..1096]
 r715: [1087..1088]
 r716: [1085..1086]
 r717: [1091..1094]
 r718: [1093..1096]
 r719: [1089..1094]
 r720: [1079..1080]
 r721: [1073..1074]
 r722: [1069..1070]
 r723: [1067..1068]
 r724: [11..12]
 r725: [1065..1066]
 r726: [1061..1062]
 r727: [1053..1054]
 r728: [1049..1050]
 r729: [1041..1042]
 r730: [1037..1038]
 r731: [1029..1030]
 r732: [1025..1026]
 r733: [1017..1018]
 r734: [1013..1014] [1009..1010]
 r735: [1011..1012]
 r736: [1007..1008]
 r737: [1003..1004]
 r738: [999..1000] [995..996]
 r739: [997..998]
 r740: [993..994]
 r741: [991..992]
 r742: [989..990]
 r743: [987..988]
 r744: [983..984] [979..980]
 r745: [981..982]
 r746: [977..978]
 r747: [975..976]
 r748: [973..974]
 r749: [969..970] [965..966]
 r750: [967..968]
 r751: [963..964]
 r752: [959..960]
 r753: [955..956]
 r754: [951..952]
 r755: [947..948]
 r756: [943..944]
 r757: [941..942]
 r758: [933..934]
 r759: [931..932]
 r760: [937..940]
 r761: [939..942]
 r762: [935..940]
 r763: [925..926]
 r764: [921..922]
 r765: [913..914]
 r766: [909..910] [905..906]
 r767: [907..908]
 r768: [903..904]
 r769: [899..900]
 r770: [895..896] [891..892]
 r771: [893..894]
 r772: [889..890]
 r773: [887..888]
 r774: [883..884]
 r775: [873..874]
 r776: [869..870] [865..866]
 r777: [867..868]
 r778: [863..864]
 r779: [861..862]
 r780: [857..858]
 r781: [855..856]
 r782: [851..852] [847..848]
 r783: [849..850]
 r784: [845..846]
 r785: [843..844]
 r786: [839..840]
 r787: [829..830]
 r788: [825..826] [821..822]
 r789: [823..824]
 r790: [819..820]
 r791: [817..818]
 r792: [815..816]
 r793: [811..812] [807..808]
 r794: [809..810]
 r795: [805..806]
 r796: [801..802]
 r797: [797..798]
 r798: [793..794]
 r799: [789..790]
 r800: [785..786]
 r801: [783..784]
 r802: [775..776]
 r803: [773..774]
 r804: [779..782]
 r805: [781..784]
 r806: [777..782]
 r807: [767..768]
 r808: [763..764]
 r809: [755..756]
 r810: [751..752] [747..748]
 r811: [749..750]
 r812: [745..746]
 r813: [741..742]
 r814: [737..738] [733..734]
 r815: [735..736]
 r816: [731..732]
 r817: [729..730]
 r818: [725..726]
 r819: [717..718]
 r820: [713..714] [709..710]
 r821: [711..712]
 r822: [707..708]
 r823: [705..706]
 r824: [701..702]
 r825: [691..692]
 r826: [687..688] [683..684]
 r827: [685..686]
 r828: [681..682]
 r829: [679..680]
 r830: [675..676]
 r831: [673..674]
 r832: [669..670] [665..666]
 r833: [667..668]
 r834: [663..664]
 r835: [659..660]
 r836: [655..656] [651..652]
 r837: [653..654]
 r838: [649..650]
 r839: [647..648]
 r840: [643..644]
 r841: [639..640] [635..636]
 r842: [637..638]
 r843: [633..634]
 r844: [631..632]
 r845: [627..628]
 r846: [617..618]
 r847: [613..614] [609..610]
 r848: [611..612]
 r849: [607..608]
 r850: [605..606]
 r851: [603..604]
 r852: [599..600]
 r853: [595..596]
 r854: [591..592]
 r855: [587..588]
 r856: [585..586]
 r857: [577..578]
 r858: [575..576]
 r859: [581..584]
 r860: [583..586]
 r861: [579..584]
 r862: [569..570]
 r863: [563..564]
 r864: [561..562]
 r865: [557..558]
 r866: [553..554]
 r867: [549..550]
 r868: [545..546]
 r869: [543..544]
 r870: [535..536]
 r871: [533..534]
 r872: [539..542]
 r873: [541..544]
 r874: [537..542]
 r875: [527..528]
 r876: [521..522]
 r877: [519..520]
 r878: [515..516]
 r879: [511..512]
 r880: [505..506]
 r881: [501..502]
 r882: [497..498]
 r883: [495..496]
 r884: [491..492]
 r885: [489..490]
 r886: [485..486]
 r887: [483..484]
 r888: [479..480]
 r889: [477..478]
 r890: [473..474]
 r891: [471..472]
 r892: [467..468]
 r893: [465..466]
 r894: [461..462]
 r895: [459..460]
 r896: [455..456]
 r897: [453..454]
 r898: [449..450]
 r899: [447..448]
 r900: [445..446]
 r901: [437..438]
 r902: [435..436]
 r903: [441..444]
 r904: [443..446]
 r905: [439..444]
 r906: [429..430]
 r907: [427..428]
 r908: [423..424]
 r909: [415..416]
 r910: [411..412] [407..408]
 r911: [409..410]
 r912: [405..406]
 r913: [399..400]
 r914: [395..396] [391..392]
 r915: [393..394]
 r916: [389..390]
 r917: [385..386]
 r918: [381..382] [377..378]
 r919: [379..380]
 r920: [375..376]
 r921: [373..374]
 r922: [371..372]
 r923: [367..368]
 r924: [359..360]
 r925: [355..356] [351..352]
 r926: [353..354]
 r927: [349..350]
 r928: [343..344]
 r929: [339..340] [335..336]
 r930: [337..338]
 r931: [333..334]
 r932: [329..330]
 r933: [325..326] [321..322]
 r934: [323..324]
 r935: [319..320]
 r936: [315..316]
 r937: [311..312]
 r938: [305..306]
 r939: [301..302]
 r940: [293..294]
 r941: [289..290] [285..286]
 r942: [287..288]
 r943: [283..284]
 r944: [279..280]
 r945: [275..276]
 r946: [267..268]
 r947: [263..264] [259..260]
 r948: [261..262]
 r949: [257..258]
 r950: [253..254]
 r951: [249..250]
 r952: [241..242]
 r953: [237..238] [233..234]
 r954: [235..236]
 r955: [231..232]
 r956: [227..228]
 r957: [223..224]
 r958: [217..218]
 r959: [213..214]
 r960: [205..206]
 r961: [201..202] [197..198]
 r962: [199..200]
 r963: [195..196]
 r964: [191..192]
 r965: [187..188]
 r966: [179..180]
 r967: [175..176] [171..172]
 r968: [173..174]
 r969: [169..170]
 r970: [165..166]
 r971: [161..162]
 r972: [153..154]
 r973: [149..150] [145..146]
 r974: [147..148]
 r975: [143..144]
 r976: [139..140]
 r977: [135..136]
 r978: [127..128]
 r979: [123..124] [119..120]
 r980: [121..122]
 r981: [117..118]
 r982: [113..114]
 r983: [109..110]
 r984: [101..102]
 r985: [99..100]
 r986: [95..96]
 r987: [89..90]
 r988: [85..86]
 r989: [81..82]
 r990: [75..76]
 r991: [71..72]
 r992: [69..70]
 r993: [67..68]
 r994: [59..60]
 r995: [55..56]
 r996: [47..48]
 r997: [43..44]
 r998: [35..36]
 r999: [31..32]
 r1000: [23..24]
 r1001: [19..20]
 r1002: [15..16]
 r1004: [1571..1572]
 r1005: [4..4]
 r1006: [1287..1290]
 r1007: [1287..1288]
 r1008: [1261..1264]
 r1009: [1261..1262]
 r1010: [1253..1254]
 r1011: [1141..1144]
 r1012: [1141..1142]
 r1013: [1089..1092]
 r1014: [1089..1090]
 r1015: [1081..1082]
 r1016: [935..938]
 r1017: [935..936]
 r1018: [777..780]
 r1019: [777..778]
 r1020: [579..582]
 r1021: [579..580]
 r1022: [571..572]
 r1023: [537..540]
 r1024: [537..538]
 r1025: [529..530]
 r1026: [439..442]
 r1027: [439..440]
 r1028: [431..432]
 r1029: [429..430]

********** Assignment #1: **********

	 Assigning to 1006 (cl=CREG, orig=657, freq=3, tfirst=1006, tfreq=3)...
	   Assign 2 to reload r1006 (freq=3)
	 Assigning to 1008 (cl=CREG, orig=665, freq=3, tfirst=1008, tfreq=3)...
	   Assign 2 to reload r1008 (freq=3)
	 Assigning to 1011 (cl=CREG, orig=699, freq=3, tfirst=1011, tfreq=3)...
	   Assign 2 to reload r1011 (freq=3)
	 Assigning to 1013 (cl=CREG, orig=715, freq=3, tfirst=1013, tfreq=3)...
	   Assign 2 to reload r1013 (freq=3)
	 Assigning to 1016 (cl=CREG, orig=758, freq=3, tfirst=1016, tfreq=3)...
	   Assign 2 to reload r1016 (freq=3)
	 Assigning to 1018 (cl=CREG, orig=802, freq=3, tfirst=1018, tfreq=3)...
	   Assign 2 to reload r1018 (freq=3)
	 Assigning to 1020 (cl=CREG, orig=857, freq=3, tfirst=1020, tfreq=3)...
	   Assign 2 to reload r1020 (freq=3)
	 Assigning to 1023 (cl=CREG, orig=870, freq=3, tfirst=1023, tfreq=3)...
	   Assign 2 to reload r1023 (freq=3)
	 Assigning to 1026 (cl=CREG, orig=901, freq=3, tfirst=1026, tfreq=3)...
	   Assign 2 to reload r1026 (freq=3)
	 Assigning to 1007 (cl=DIREG, orig=659, freq=2, tfirst=1007, tfreq=2)...
	   Assign 5 to reload r1007 (freq=2)
	 Assigning to 1009 (cl=DIREG, orig=667, freq=2, tfirst=1009, tfreq=2)...
	   Assign 5 to reload r1009 (freq=2)
	 Assigning to 1012 (cl=DIREG, orig=701, freq=2, tfirst=1012, tfreq=2)...
	   Assign 5 to reload r1012 (freq=2)
	 Assigning to 1014 (cl=DIREG, orig=717, freq=2, tfirst=1014, tfreq=2)...
	   Assign 5 to reload r1014 (freq=2)
	 Assigning to 1017 (cl=DIREG, orig=760, freq=2, tfirst=1017, tfreq=2)...
	   Assign 5 to reload r1017 (freq=2)
	 Assigning to 1019 (cl=DIREG, orig=804, freq=2, tfirst=1019, tfreq=2)...
	   Assign 5 to reload r1019 (freq=2)
	 Assigning to 1021 (cl=DIREG, orig=859, freq=2, tfirst=1021, tfreq=2)...
	   Assign 5 to reload r1021 (freq=2)
	 Assigning to 1024 (cl=DIREG, orig=872, freq=2, tfirst=1024, tfreq=2)...
	   Assign 5 to reload r1024 (freq=2)
	 Assigning to 1027 (cl=DIREG, orig=903, freq=2, tfirst=1027, tfreq=2)...
	   Assign 5 to reload r1027 (freq=2)
	 Assigning to 1010 (cl=GENERAL_REGS, orig=1010, freq=2, tfirst=1010, tfreq=2)...
	   Assign 3 to reload r1010 (freq=2)
	 Assigning to 1015 (cl=GENERAL_REGS, orig=1015, freq=2, tfirst=1015, tfreq=2)...
	   Assign 3 to reload r1015 (freq=2)
	 Assigning to 1022 (cl=GENERAL_REGS, orig=1022, freq=2, tfirst=1022, tfreq=2)...
	   Assign 3 to reload r1022 (freq=2)
	 Assigning to 1025 (cl=GENERAL_REGS, orig=1025, freq=2, tfirst=1025, tfreq=2)...
	   Assign 3 to reload r1025 (freq=2)
	 Assigning to 1028 (cl=GENERAL_REGS, orig=1028, freq=2, tfirst=1028, tfreq=2)...
	   Assign 3 to reload r1028 (freq=2)
	 Assigning to 1029 (cl=GENERAL_REGS, orig=1029, freq=2, tfirst=1029, tfreq=2)...
	   Assign 3 to reload r1029 (freq=2)
	 Assigning to 1004 (cl=INDEX_REGS, orig=1004, freq=1, tfirst=1004, tfreq=1)...
	   Assign 0 to reload r1004 (freq=1)
	 Assigning to 1005 (cl=INDEX_REGS, orig=1005, freq=1, tfirst=1005, tfreq=1)...
	   Assign 3 to reload r1005 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=5120, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=5088, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 19
changing reg in insn 22
changing reg in insn 20
changing reg in insn 22
changing reg in insn 25
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 44
changing reg in insn 42
changing reg in insn 44
changing reg in insn 47
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 53
changing reg in insn 56
changing reg in insn 54
changing reg in insn 56
changing reg in insn 59
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 67
changing reg in insn 65
changing reg in insn 67
changing reg in insn 70
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 78
changing reg in insn 76
changing reg in insn 78
changing reg in insn 81
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 89
changing reg in insn 87
changing reg in insn 89
changing reg in insn 92
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 100
changing reg in insn 98
changing reg in insn 100
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 109
changing reg in insn 112
changing reg in insn 110
changing reg in insn 112
changing reg in insn 115
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 123
changing reg in insn 121
changing reg in insn 123
changing reg in insn 126
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 131
changing reg in insn 134
changing reg in insn 132
changing reg in insn 134
changing reg in insn 137
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 142
changing reg in insn 145
changing reg in insn 143
changing reg in insn 145
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 156
changing reg in insn 154
changing reg in insn 156
changing reg in insn 159
changing reg in insn 161
changing reg in insn 161
changing reg in insn 163
changing reg in insn 165
changing reg in insn 168
changing reg in insn 166
changing reg in insn 168
changing reg in insn 171
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 176
changing reg in insn 179
changing reg in insn 177
changing reg in insn 179
changing reg in insn 182
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 190
changing reg in insn 188
changing reg in insn 190
changing reg in insn 193
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 198
changing reg in insn 201
changing reg in insn 199
changing reg in insn 201
changing reg in insn 204
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 209
changing reg in insn 212
changing reg in insn 210
changing reg in insn 212
changing reg in insn 215
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 243
changing reg in insn 245
changing reg in insn 246
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 264
changing reg in insn 267
changing reg in insn 265
changing reg in insn 267
changing reg in insn 270
changing reg in insn 272
changing reg in insn 272
changing reg in insn 273
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 280
changing reg in insn 279
changing reg in insn 281
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 288
changing reg in insn 287
changing reg in insn 289
changing reg in insn 291
changing reg in insn 293
changing reg in insn 297
changing reg in insn 298
changing reg in insn 301
changing reg in insn 308
changing reg in insn 307
changing reg in insn 309
changing reg in insn 311
changing reg in insn 310
changing reg in insn 314
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 323
changing reg in insn 326
changing reg in insn 329
changing reg in insn 330
changing reg in insn 333
changing reg in insn 340
changing reg in insn 339
changing reg in insn 341
changing reg in insn 343
changing reg in insn 342
changing reg in insn 346
changing reg in insn 348
changing reg in insn 350
changing reg in insn 351
changing reg in insn 366
changing reg in insn 367
changing reg in insn 367
changing reg in insn 370
changing reg in insn 369
changing reg in insn 371
changing reg in insn 380
changing reg in insn 381
changing reg in insn 381
changing reg in insn 383
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 386
changing reg in insn 388
changing reg in insn 389
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 396
changing reg in insn 396
changing reg in insn 397
changing reg in insn 397
changing reg in insn 399
changing reg in insn 401
changing reg in insn 402
changing reg in insn 406
changing reg in insn 407
changing reg in insn 407
changing reg in insn 409
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 412
changing reg in insn 414
changing reg in insn 415
changing reg in insn 427
changing reg in insn 429
changing reg in insn 441
changing reg in insn 443
changing reg in insn 455
changing reg in insn 457
changing reg in insn 469
changing reg in insn 471
changing reg in insn 483
changing reg in insn 485
changing reg in insn 497
changing reg in insn 499
changing reg in insn 511
changing reg in insn 513
changing reg in insn 525
changing reg in insn 527
changing reg in insn 540
changing reg in insn 547
changing reg in insn 546
changing reg in insn 548
changing reg in insn 551
changing reg in insn 550
changing reg in insn 549
changing reg in insn 569
changing reg in insn 571
changing reg in insn 573
changing reg in insn 574
changing reg in insn 576
changing reg in insn 577
changing reg in insn 584
changing reg in insn 585
changing reg in insn 602
changing reg in insn 603
changing reg in insn 606
changing reg in insn 607
changing reg in insn 624
changing reg in insn 625
changing reg in insn 637
changing reg in insn 638
changing reg in insn 642
changing reg in insn 643
changing reg in insn 643
changing reg in insn 646
changing reg in insn 645
changing reg in insn 647
changing reg in insn 650
changing reg in insn 657
changing reg in insn 656
changing reg in insn 658
changing reg in insn 661
changing reg in insn 660
changing reg in insn 659
changing reg in insn 663
changing reg in insn 665
changing reg in insn 667
changing reg in insn 668
changing reg in insn 670
changing reg in insn 671
changing reg in insn 695
changing reg in insn 696
changing reg in insn 701
changing reg in insn 702
changing reg in insn 702
changing reg in insn 704
changing reg in insn 704
changing reg in insn 705
changing reg in insn 705
changing reg in insn 707
changing reg in insn 709
changing reg in insn 710
changing reg in insn 714
changing reg in insn 715
changing reg in insn 715
changing reg in insn 717
changing reg in insn 717
changing reg in insn 718
changing reg in insn 718
changing reg in insn 720
changing reg in insn 722
changing reg in insn 723
changing reg in insn 727
changing reg in insn 728
changing reg in insn 728
changing reg in insn 730
changing reg in insn 730
changing reg in insn 731
changing reg in insn 731
changing reg in insn 733
changing reg in insn 735
changing reg in insn 736
changing reg in insn 1393
changing reg in insn 1394
changing reg in insn 1394
changing reg in insn 1396
changing reg in insn 1396
changing reg in insn 1397
changing reg in insn 1397
changing reg in insn 1399
changing reg in insn 1401
changing reg in insn 1402
changing reg in insn 1406
changing reg in insn 1407
changing reg in insn 1407
changing reg in insn 1410
changing reg in insn 1408
changing reg in insn 1410
changing reg in insn 1413
changing reg in insn 1415
changing reg in insn 1415
changing reg in insn 1416
changing reg in insn 1416
changing reg in insn 1417
changing reg in insn 1421
changing reg in insn 1422
changing reg in insn 1422
changing reg in insn 1425
changing reg in insn 1423
changing reg in insn 1425
changing reg in insn 1428
changing reg in insn 1430
changing reg in insn 1430
changing reg in insn 1431
changing reg in insn 1433
changing reg in insn 1434
changing reg in insn 1434
changing reg in insn 1437
changing reg in insn 1435
changing reg in insn 1437
changing reg in insn 1440
changing reg in insn 1442
changing reg in insn 1442
changing reg in insn 1444
changing reg in insn 1457
changing reg in insn 1458
changing reg in insn 1458
changing reg in insn 1460
changing reg in insn 1460
changing reg in insn 1461
changing reg in insn 1461
changing reg in insn 1463
changing reg in insn 1465
changing reg in insn 1466
changing reg in insn 1470
changing reg in insn 1471
changing reg in insn 1471
changing reg in insn 1474
changing reg in insn 1472
changing reg in insn 1474
changing reg in insn 1477
changing reg in insn 1479
changing reg in insn 1479
changing reg in insn 1480
changing reg in insn 1480
changing reg in insn 1481
changing reg in insn 1485
changing reg in insn 1486
changing reg in insn 1486
changing reg in insn 1489
changing reg in insn 1487
changing reg in insn 1489
changing reg in insn 1492
changing reg in insn 1494
changing reg in insn 1494
changing reg in insn 1495
changing reg in insn 1498
changing reg in insn 1499
changing reg in insn 1499
changing reg in insn 1502
changing reg in insn 1500
changing reg in insn 1502
changing reg in insn 1505
changing reg in insn 1507
changing reg in insn 1507
changing reg in insn 1508
changing reg in insn 1508
changing reg in insn 1515
changing reg in insn 1510
changing reg in insn 1511
changing reg in insn 1511
changing reg in insn 1513
changing reg in insn 1513
changing reg in insn 1514
changing reg in insn 1514
changing reg in insn 1517
changing reg in insn 1532
changing reg in insn 1533
changing reg in insn 1533
changing reg in insn 1535
changing reg in insn 1535
changing reg in insn 1536
changing reg in insn 1536
changing reg in insn 1538
changing reg in insn 1540
changing reg in insn 1541
changing reg in insn 1545
changing reg in insn 1546
changing reg in insn 1546
changing reg in insn 1549
changing reg in insn 1547
changing reg in insn 1549
changing reg in insn 1552
changing reg in insn 1554
changing reg in insn 1554
changing reg in insn 1555
changing reg in insn 1561
changing reg in insn 1562
changing reg in insn 1562
changing reg in insn 1564
changing reg in insn 1564
changing reg in insn 1565
changing reg in insn 1565
changing reg in insn 1567
changing reg in insn 1569
changing reg in insn 1570
changing reg in insn 1574
changing reg in insn 1575
changing reg in insn 1575
changing reg in insn 1578
changing reg in insn 1576
changing reg in insn 1578
changing reg in insn 1581
changing reg in insn 1583
changing reg in insn 1583
changing reg in insn 1584
changing reg in insn 1590
changing reg in insn 1591
changing reg in insn 1591
changing reg in insn 1593
changing reg in insn 1593
changing reg in insn 1594
changing reg in insn 1594
changing reg in insn 1596
changing reg in insn 1598
changing reg in insn 1599
changing reg in insn 1604
changing reg in insn 1605
changing reg in insn 1605
changing reg in insn 1608
changing reg in insn 1606
changing reg in insn 1608
changing reg in insn 1611
changing reg in insn 1613
changing reg in insn 1613
changing reg in insn 1614
changing reg in insn 1614
changing reg in insn 1621
changing reg in insn 1616
changing reg in insn 1617
changing reg in insn 1617
changing reg in insn 1619
changing reg in insn 1619
changing reg in insn 1620
changing reg in insn 1620
changing reg in insn 1623
changing reg in insn 1631
changing reg in insn 1632
changing reg in insn 1632
changing reg in insn 1634
changing reg in insn 1634
changing reg in insn 1635
changing reg in insn 1635
changing reg in insn 1637
changing reg in insn 1639
changing reg in insn 1640
changing reg in insn 1644
changing reg in insn 1645
changing reg in insn 1645
changing reg in insn 1648
changing reg in insn 1646
changing reg in insn 1648
changing reg in insn 1651
changing reg in insn 1653
changing reg in insn 1653
changing reg in insn 1654
changing reg in insn 1660
changing reg in insn 1661
changing reg in insn 1661
changing reg in insn 1663
changing reg in insn 1663
changing reg in insn 1664
changing reg in insn 1664
changing reg in insn 1666
changing reg in insn 1668
changing reg in insn 1669
changing reg in insn 1673
changing reg in insn 1674
changing reg in insn 1674
changing reg in insn 1677
changing reg in insn 1675
changing reg in insn 1677
changing reg in insn 1680
changing reg in insn 1682
changing reg in insn 1682
changing reg in insn 1683
changing reg in insn 1689
changing reg in insn 1690
changing reg in insn 1690
changing reg in insn 1692
changing reg in insn 1692
changing reg in insn 1693
changing reg in insn 1693
changing reg in insn 1695
changing reg in insn 1697
changing reg in insn 1698
changing reg in insn 1702
changing reg in insn 1703
changing reg in insn 1703
changing reg in insn 1706
changing reg in insn 1704
changing reg in insn 1706
changing reg in insn 1709
changing reg in insn 1711
changing reg in insn 1711
changing reg in insn 1712
changing reg in insn 1718
changing reg in insn 1719
changing reg in insn 1719
changing reg in insn 1721
changing reg in insn 1721
changing reg in insn 1722
changing reg in insn 1722
changing reg in insn 1724
changing reg in insn 1726
changing reg in insn 1727
changing reg in insn 1731
changing reg in insn 1732
changing reg in insn 1732
changing reg in insn 1735
changing reg in insn 1733
changing reg in insn 1735
changing reg in insn 1738
changing reg in insn 1740
changing reg in insn 1740
changing reg in insn 1741
changing reg in insn 1747
changing reg in insn 1748
changing reg in insn 1748
changing reg in insn 1750
changing reg in insn 1750
changing reg in insn 1751
changing reg in insn 1751
changing reg in insn 1753
changing reg in insn 1755
changing reg in insn 1756
changing reg in insn 1761
changing reg in insn 1768
changing reg in insn 1763
changing reg in insn 1764
changing reg in insn 1764
changing reg in insn 1766
changing reg in insn 1766
changing reg in insn 1767
changing reg in insn 1767
changing reg in insn 1770
changing reg in insn 1774
changing reg in insn 1775
changing reg in insn 1775
changing reg in insn 1782
changing reg in insn 1777
changing reg in insn 1778
changing reg in insn 1778
changing reg in insn 1780
changing reg in insn 1780
changing reg in insn 1781
changing reg in insn 1781
changing reg in insn 1784
changing reg in insn 1788
changing reg in insn 1789
changing reg in insn 1789
changing reg in insn 1791
changing reg in insn 1793
changing reg in insn 1798
changing reg in insn 1795
changing reg in insn 1796
changing reg in insn 1796
changing reg in insn 1797
changing reg in insn 1797
changing reg in insn 1798
changing reg in insn 1804
changing reg in insn 1805
changing reg in insn 1805
changing reg in insn 1807
changing reg in insn 1807
changing reg in insn 1808
changing reg in insn 1808
changing reg in insn 1810
changing reg in insn 1812
changing reg in insn 1813
changing reg in insn 1823
changing reg in insn 1824
changing reg in insn 1824
changing reg in insn 1826
changing reg in insn 1826
changing reg in insn 1827
changing reg in insn 1827
changing reg in insn 1829
changing reg in insn 1831
changing reg in insn 1832
changing reg in insn 1842
changing reg in insn 1843
changing reg in insn 1843
changing reg in insn 1845
changing reg in insn 1845
changing reg in insn 1846
changing reg in insn 1846
changing reg in insn 1848
changing reg in insn 1850
changing reg in insn 1851
changing reg in insn 1858
changing reg in insn 1859
changing reg in insn 1859
changing reg in insn 1861
changing reg in insn 1861
changing reg in insn 1862
changing reg in insn 1862
changing reg in insn 1865
changing reg in insn 1864
changing reg in insn 1866
changing reg in insn 741
changing reg in insn 742
changing reg in insn 742
changing reg in insn 744
changing reg in insn 744
changing reg in insn 745
changing reg in insn 745
changing reg in insn 747
changing reg in insn 749
changing reg in insn 750
changing reg in insn 754
changing reg in insn 755
changing reg in insn 755
changing reg in insn 758
changing reg in insn 756
changing reg in insn 758
changing reg in insn 761
changing reg in insn 763
changing reg in insn 763
changing reg in insn 764
changing reg in insn 767
changing reg in insn 768
changing reg in insn 768
changing reg in insn 771
changing reg in insn 769
changing reg in insn 771
changing reg in insn 774
changing reg in insn 776
changing reg in insn 776
changing reg in insn 776
changing reg in insn 778
changing reg in insn 782
changing reg in insn 783
changing reg in insn 783
changing reg in insn 786
changing reg in insn 784
changing reg in insn 786
changing reg in insn 789
changing reg in insn 791
changing reg in insn 791
changing reg in insn 791
changing reg in insn 793
changing reg in insn 795
changing reg in insn 796
changing reg in insn 796
changing reg in insn 799
changing reg in insn 797
changing reg in insn 799
changing reg in insn 802
changing reg in insn 804
changing reg in insn 804
changing reg in insn 805
changing reg in insn 807
changing reg in insn 808
changing reg in insn 808
changing reg in insn 810
changing reg in insn 810
changing reg in insn 811
changing reg in insn 811
changing reg in insn 814
changing reg in insn 813
changing reg in insn 815
changing reg in insn 818
changing reg in insn 819
changing reg in insn 823
changing reg in insn 830
changing reg in insn 829
changing reg in insn 831
changing reg in insn 833
changing reg in insn 832
changing reg in insn 837
changing reg in insn 838
changing reg in insn 838
changing reg in insn 840
changing reg in insn 840
changing reg in insn 841
changing reg in insn 841
changing reg in insn 843
changing reg in insn 845
changing reg in insn 846
changing reg in insn 850
changing reg in insn 851
changing reg in insn 851
changing reg in insn 854
changing reg in insn 852
changing reg in insn 854
changing reg in insn 857
changing reg in insn 859
changing reg in insn 859
changing reg in insn 860
changing reg in insn 863
changing reg in insn 864
changing reg in insn 864
changing reg in insn 867
changing reg in insn 865
changing reg in insn 867
changing reg in insn 870
changing reg in insn 872
changing reg in insn 872
changing reg in insn 872
changing reg in insn 883
changing reg in insn 874
changing reg in insn 875
changing reg in insn 875
changing reg in insn 877
changing reg in insn 877
changing reg in insn 878
changing reg in insn 878
changing reg in insn 879
changing reg in insn 881
changing reg in insn 882
changing reg in insn 882
changing reg in insn 883
changing reg in insn 885
changing reg in insn 886
changing reg in insn 886
changing reg in insn 889
changing reg in insn 887
changing reg in insn 889
changing reg in insn 892
changing reg in insn 894
changing reg in insn 894
changing reg in insn 897
changing reg in insn 896
changing reg in insn 897
changing reg in insn 901
changing reg in insn 902
changing reg in insn 902
changing reg in insn 905
changing reg in insn 903
changing reg in insn 905
changing reg in insn 908
changing reg in insn 910
changing reg in insn 910
changing reg in insn 910
changing reg in insn 921
changing reg in insn 912
changing reg in insn 913
changing reg in insn 913
changing reg in insn 915
changing reg in insn 915
changing reg in insn 916
changing reg in insn 916
changing reg in insn 917
changing reg in insn 919
changing reg in insn 920
changing reg in insn 920
changing reg in insn 921
changing reg in insn 924
changing reg in insn 925
changing reg in insn 925
changing reg in insn 928
changing reg in insn 926
changing reg in insn 928
changing reg in insn 931
changing reg in insn 933
changing reg in insn 933
changing reg in insn 933
changing reg in insn 935
changing reg in insn 937
changing reg in insn 938
changing reg in insn 938
changing reg in insn 941
changing reg in insn 939
changing reg in insn 941
changing reg in insn 944
changing reg in insn 946
changing reg in insn 946
changing reg in insn 947
changing reg in insn 949
changing reg in insn 950
changing reg in insn 950
changing reg in insn 952
changing reg in insn 952
changing reg in insn 953
changing reg in insn 953
changing reg in insn 956
changing reg in insn 955
changing reg in insn 957
changing reg in insn 960
changing reg in insn 961
changing reg in insn 965
changing reg in insn 972
changing reg in insn 971
changing reg in insn 973
changing reg in insn 975
changing reg in insn 974
changing reg in insn 979
changing reg in insn 980
changing reg in insn 980
changing reg in insn 982
changing reg in insn 982
changing reg in insn 983
changing reg in insn 983
changing reg in insn 985
changing reg in insn 987
changing reg in insn 988
changing reg in insn 992
changing reg in insn 993
changing reg in insn 993
changing reg in insn 996
changing reg in insn 994
changing reg in insn 996
changing reg in insn 999
changing reg in insn 1001
changing reg in insn 1001
changing reg in insn 1002
changing reg in insn 1005
changing reg in insn 1006
changing reg in insn 1006
changing reg in insn 1009
changing reg in insn 1007
changing reg in insn 1009
changing reg in insn 1012
changing reg in insn 1014
changing reg in insn 1014
changing reg in insn 1014
changing reg in insn 1024
changing reg in insn 1016
changing reg in insn 1017
changing reg in insn 1017
changing reg in insn 1019
changing reg in insn 1019
changing reg in insn 1020
changing reg in insn 1020
changing reg in insn 1021
changing reg in insn 1023
changing reg in insn 1024
changing reg in insn 1027
changing reg in insn 1028
changing reg in insn 1028
changing reg in insn 1031
changing reg in insn 1029
changing reg in insn 1031
changing reg in insn 1034
changing reg in insn 1036
changing reg in insn 1036
changing reg in insn 1036
changing reg in insn 1047
changing reg in insn 1038
changing reg in insn 1039
changing reg in insn 1039
changing reg in insn 1041
changing reg in insn 1041
changing reg in insn 1042
changing reg in insn 1042
changing reg in insn 1043
changing reg in insn 1045
changing reg in insn 1046
changing reg in insn 1046
changing reg in insn 1047
changing reg in insn 1049
changing reg in insn 1050
changing reg in insn 1050
changing reg in insn 1053
changing reg in insn 1051
changing reg in insn 1053
changing reg in insn 1056
changing reg in insn 1058
changing reg in insn 1058
changing reg in insn 1061
changing reg in insn 1060
changing reg in insn 1061
changing reg in insn 1065
changing reg in insn 1066
changing reg in insn 1066
changing reg in insn 1069
changing reg in insn 1067
changing reg in insn 1069
changing reg in insn 1072
changing reg in insn 1074
changing reg in insn 1074
changing reg in insn 1075
changing reg in insn 1077
changing reg in insn 1078
changing reg in insn 1078
changing reg in insn 1081
changing reg in insn 1079
changing reg in insn 1081
changing reg in insn 1084
changing reg in insn 1086
changing reg in insn 1086
changing reg in insn 1086
changing reg in insn 1089
changing reg in insn 1088
changing reg in insn 1089
changing reg in insn 1091
changing reg in insn 1092
changing reg in insn 1092
changing reg in insn 1095
changing reg in insn 1093
changing reg in insn 1095
changing reg in insn 1098
changing reg in insn 1100
changing reg in insn 1100
changing reg in insn 1100
changing reg in insn 1111
changing reg in insn 1102
changing reg in insn 1103
changing reg in insn 1103
changing reg in insn 1105
changing reg in insn 1105
changing reg in insn 1106
changing reg in insn 1106
changing reg in insn 1107
changing reg in insn 1109
changing reg in insn 1110
changing reg in insn 1110
changing reg in insn 1111
changing reg in insn 1114
changing reg in insn 1115
changing reg in insn 1115
changing reg in insn 1118
changing reg in insn 1116
changing reg in insn 1118
changing reg in insn 1121
changing reg in insn 1123
changing reg in insn 1123
changing reg in insn 1123
changing reg in insn 1125
changing reg in insn 1127
changing reg in insn 1128
changing reg in insn 1128
changing reg in insn 1130
changing reg in insn 1130
changing reg in insn 1131
changing reg in insn 1131
changing reg in insn 1134
changing reg in insn 1133
changing reg in insn 1135
changing reg in insn 1138
changing reg in insn 1139
changing reg in insn 1143
changing reg in insn 1150
changing reg in insn 1149
changing reg in insn 1151
changing reg in insn 1153
changing reg in insn 1152
changing reg in insn 1157
changing reg in insn 1159
changing reg in insn 1161
changing reg in insn 1162
changing reg in insn 1177
changing reg in insn 1178
changing reg in insn 1182
changing reg in insn 1183
changing reg in insn 1183
changing reg in insn 1185
changing reg in insn 1185
changing reg in insn 1186
changing reg in insn 1186
changing reg in insn 1189
changing reg in insn 1188
changing reg in insn 1190
changing reg in insn 1193
changing reg in insn 1200
changing reg in insn 1199
changing reg in insn 1201
changing reg in insn 1203
changing reg in insn 1202
changing reg in insn 1205
changing reg in insn 1207
changing reg in insn 1209
changing reg in insn 1210
changing reg in insn 1225
changing reg in insn 1226
changing reg in insn 1226
changing reg in insn 1228
changing reg in insn 1228
changing reg in insn 1229
changing reg in insn 1229
changing reg in insn 1233
changing reg in insn 1231
changing reg in insn 1232
changing reg in insn 1232
changing reg in insn 1234
changing reg in insn 1239
changing reg in insn 1240
changing reg in insn 1240
changing reg in insn 1243
changing reg in insn 1242
changing reg in insn 1244
changing reg in insn 1255
changing reg in insn 1257
changing reg in insn 1269
changing reg in insn 1271
changing reg in insn 1283
changing reg in insn 1285
changing reg in insn 1297
changing reg in insn 1299
changing reg in insn 1311
changing reg in insn 1313
changing reg in insn 1325
changing reg in insn 1327
changing reg in insn 1339
changing reg in insn 1341
changing reg in insn 1353
changing reg in insn 1355
changing reg in insn 1368
changing reg in insn 1375
changing reg in insn 1374
changing reg in insn 1376
changing reg in insn 1378
changing reg in insn 1377
changing reg in insn 1884
changing reg in insn 1887
changing reg in insn 1887
changing reg in insn 1891
changing reg in insn 18
changing reg in insn 19
changing reg in insn 24
changing reg in insn 22
changing reg in insn 21
changing reg in insn 20
changing reg in insn 25
changing reg in insn 23
changing reg in insn 22
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
changing reg in insn 35
changing reg in insn 33
changing reg in insn 32
changing reg in insn 31
changing reg in insn 36
changing reg in insn 34
changing reg in insn 33
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 46
changing reg in insn 44
changing reg in insn 43
changing reg in insn 42
changing reg in insn 47
changing reg in insn 45
changing reg in insn 44
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 58
changing reg in insn 56
changing reg in insn 55
changing reg in insn 54
changing reg in insn 59
changing reg in insn 57
changing reg in insn 56
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 63
changing reg in insn 64
changing reg in insn 69
changing reg in insn 67
changing reg in insn 66
changing reg in insn 65
changing reg in insn 70
changing reg in insn 68
changing reg in insn 67
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 74
changing reg in insn 75
changing reg in insn 80
changing reg in insn 78
changing reg in insn 77
changing reg in insn 76
changing reg in insn 81
changing reg in insn 79
changing reg in insn 78
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 91
changing reg in insn 89
changing reg in insn 88
changing reg in insn 87
changing reg in insn 92
changing reg in insn 90
changing reg in insn 89
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 102
changing reg in insn 100
changing reg in insn 99
changing reg in insn 98
changing reg in insn 103
changing reg in insn 101
changing reg in insn 100
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 114
changing reg in insn 112
changing reg in insn 111
changing reg in insn 110
changing reg in insn 115
changing reg in insn 113
changing reg in insn 112
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 116
changing reg in insn 119
changing reg in insn 120
changing reg in insn 125
changing reg in insn 123
changing reg in insn 122
changing reg in insn 121
changing reg in insn 126
changing reg in insn 124
changing reg in insn 123
changing reg in insn 122
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 130
changing reg in insn 131
changing reg in insn 136
changing reg in insn 134
changing reg in insn 133
changing reg in insn 132
changing reg in insn 137
changing reg in insn 135
changing reg in insn 134
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 141
changing reg in insn 142
changing reg in insn 147
changing reg in insn 145
changing reg in insn 144
changing reg in insn 143
changing reg in insn 148
changing reg in insn 146
changing reg in insn 145
changing reg in insn 144
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 152
changing reg in insn 153
changing reg in insn 158
changing reg in insn 156
changing reg in insn 155
changing reg in insn 154
changing reg in insn 159
changing reg in insn 157
changing reg in insn 156
changing reg in insn 155
changing reg in insn 157
changing reg in insn 158
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 170
changing reg in insn 168
changing reg in insn 167
changing reg in insn 166
changing reg in insn 171
changing reg in insn 169
changing reg in insn 168
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 175
changing reg in insn 176
changing reg in insn 181
changing reg in insn 179
changing reg in insn 178
changing reg in insn 177
changing reg in insn 182
changing reg in insn 180
changing reg in insn 179
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 186
changing reg in insn 187
changing reg in insn 192
changing reg in insn 190
changing reg in insn 189
changing reg in insn 188
changing reg in insn 193
changing reg in insn 191
changing reg in insn 190
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 194
changing reg in insn 197
changing reg in insn 198
changing reg in insn 203
changing reg in insn 201
changing reg in insn 200
changing reg in insn 199
changing reg in insn 204
changing reg in insn 202
changing reg in insn 201
changing reg in insn 200
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 208
changing reg in insn 209
changing reg in insn 214
changing reg in insn 212
changing reg in insn 211
changing reg in insn 210
changing reg in insn 215
changing reg in insn 213
changing reg in insn 212
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 216
changing reg in insn 225
changing reg in insn 226
changing reg in insn 235
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 249
changing reg in insn 250
changing reg in insn 253
changing reg in insn 254
changing reg in insn 263
changing reg in insn 264
changing reg in insn 269
changing reg in insn 267
changing reg in insn 266
changing reg in insn 265
changing reg in insn 270
changing reg in insn 268
changing reg in insn 267
changing reg in insn 266
changing reg in insn 268
changing reg in insn 269
changing reg in insn 271
changing reg in insn 276
changing reg in insn 277
changing reg in insn 283
changing reg in insn 284
changing reg in insn 286
changing reg in insn 287
changing reg in insn 292
changing reg in insn 294
changing reg in insn 296
changing reg in insn 297
changing reg in insn 308
changing reg in insn 303
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 303
changing reg in insn 302
changing reg in insn 304
changing reg in insn 305
changing reg in insn 324
changing reg in insn 325
changing reg in insn 328
changing reg in insn 329
changing reg in insn 340
changing reg in insn 335
changing reg in insn 338
changing reg in insn 338
changing reg in insn 339
changing reg in insn 335
changing reg in insn 334
changing reg in insn 336
changing reg in insn 337
changing reg in insn 362
changing reg in insn 363
changing reg in insn 365
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 375
changing reg in insn 376
changing reg in insn 379
changing reg in insn 380
changing reg in insn 382
changing reg in insn 392
changing reg in insn 393
changing reg in insn 395
changing reg in insn 405
changing reg in insn 406
changing reg in insn 408
changing reg in insn 419
changing reg in insn 420
changing reg in insn 426
changing reg in insn 427
changing reg in insn 431
changing reg in insn 432
changing reg in insn 440
changing reg in insn 441
changing reg in insn 445
changing reg in insn 446
changing reg in insn 454
changing reg in insn 455
changing reg in insn 459
changing reg in insn 460
changing reg in insn 468
changing reg in insn 469
changing reg in insn 473
changing reg in insn 474
changing reg in insn 482
changing reg in insn 483
changing reg in insn 487
changing reg in insn 488
changing reg in insn 496
changing reg in insn 497
changing reg in insn 501
changing reg in insn 502
changing reg in insn 510
changing reg in insn 511
changing reg in insn 515
changing reg in insn 516
changing reg in insn 524
changing reg in insn 525
changing reg in insn 529
changing reg in insn 530
changing reg in insn 539
changing reg in insn 540
changing reg in insn 547
changing reg in insn 542
changing reg in insn 545
changing reg in insn 545
changing reg in insn 546
changing reg in insn 542
changing reg in insn 541
changing reg in insn 543
changing reg in insn 544
changing reg in insn 556
changing reg in insn 559
changing reg in insn 558
changing reg in insn 557
changing reg in insn 568
changing reg in insn 569
changing reg in insn 583
changing reg in insn 584
changing reg in insn 595
changing reg in insn 596
changing reg in insn 613
changing reg in insn 614
changing reg in insn 623
changing reg in insn 624
changing reg in insn 636
changing reg in insn 637
changing reg in insn 641
changing reg in insn 642
changing reg in insn 644
changing reg in insn 645
changing reg in insn 649
changing reg in insn 650
changing reg in insn 657
changing reg in insn 652
changing reg in insn 655
changing reg in insn 655
changing reg in insn 656
changing reg in insn 652
changing reg in insn 651
changing reg in insn 653
changing reg in insn 654
changing reg in insn 662
changing reg in insn 663
changing reg in insn 669
changing reg in insn 670
changing reg in insn 685
changing reg in insn 686
changing reg in insn 691
changing reg in insn 692
changing reg in insn 694
changing reg in insn 695
changing reg in insn 700
changing reg in insn 701
changing reg in insn 703
changing reg in insn 713
changing reg in insn 714
changing reg in insn 716
changing reg in insn 726
changing reg in insn 727
changing reg in insn 729
changing reg in insn 740
changing reg in insn 741
changing reg in insn 743
changing reg in insn 753
changing reg in insn 754
changing reg in insn 760
changing reg in insn 758
changing reg in insn 757
changing reg in insn 756
changing reg in insn 761
changing reg in insn 759
changing reg in insn 758
changing reg in insn 757
changing reg in insn 759
changing reg in insn 760
changing reg in insn 762
changing reg in insn 766
changing reg in insn 767
changing reg in insn 773
changing reg in insn 771
changing reg in insn 770
changing reg in insn 769
changing reg in insn 774
changing reg in insn 772
changing reg in insn 771
changing reg in insn 770
changing reg in insn 772
changing reg in insn 773
changing reg in insn 775
changing reg in insn 776
changing reg in insn 777
changing reg in insn 778
changing reg in insn 779
changing reg in insn 780
changing reg in insn 781
changing reg in insn 782
changing reg in insn 788
changing reg in insn 786
changing reg in insn 785
changing reg in insn 784
changing reg in insn 789
changing reg in insn 787
changing reg in insn 786
changing reg in insn 785
changing reg in insn 787
changing reg in insn 788
changing reg in insn 790
changing reg in insn 791
changing reg in insn 792
changing reg in insn 793
changing reg in insn 794
changing reg in insn 795
changing reg in insn 801
changing reg in insn 799
changing reg in insn 798
changing reg in insn 797
changing reg in insn 802
changing reg in insn 800
changing reg in insn 799
changing reg in insn 798
changing reg in insn 800
changing reg in insn 801
changing reg in insn 803
changing reg in insn 806
changing reg in insn 807
changing reg in insn 809
changing reg in insn 812
changing reg in insn 813
changing reg in insn 817
changing reg in insn 818
changing reg in insn 822
changing reg in insn 823
changing reg in insn 830
changing reg in insn 825
changing reg in insn 828
changing reg in insn 828
changing reg in insn 829
changing reg in insn 825
changing reg in insn 824
changing reg in insn 826
changing reg in insn 827
changing reg in insn 836
changing reg in insn 837
changing reg in insn 839
changing reg in insn 849
changing reg in insn 850
changing reg in insn 856
changing reg in insn 854
changing reg in insn 853
changing reg in insn 852
changing reg in insn 857
changing reg in insn 855
changing reg in insn 854
changing reg in insn 853
changing reg in insn 855
changing reg in insn 856
changing reg in insn 858
changing reg in insn 862
changing reg in insn 863
changing reg in insn 869
changing reg in insn 867
changing reg in insn 866
changing reg in insn 865
changing reg in insn 870
changing reg in insn 868
changing reg in insn 867
changing reg in insn 866
changing reg in insn 868
changing reg in insn 869
changing reg in insn 871
changing reg in insn 872
changing reg in insn 873
changing reg in insn 874
changing reg in insn 876
changing reg in insn 884
changing reg in insn 885
changing reg in insn 891
changing reg in insn 889
changing reg in insn 888
changing reg in insn 887
changing reg in insn 892
changing reg in insn 890
changing reg in insn 889
changing reg in insn 888
changing reg in insn 890
changing reg in insn 891
changing reg in insn 893
changing reg in insn 895
changing reg in insn 896
changing reg in insn 898
changing reg in insn 899
changing reg in insn 900
changing reg in insn 901
changing reg in insn 907
changing reg in insn 905
changing reg in insn 904
changing reg in insn 903
changing reg in insn 908
changing reg in insn 906
changing reg in insn 905
changing reg in insn 904
changing reg in insn 906
changing reg in insn 907
changing reg in insn 909
changing reg in insn 910
changing reg in insn 911
changing reg in insn 912
changing reg in insn 914
changing reg in insn 923
changing reg in insn 924
changing reg in insn 930
changing reg in insn 928
changing reg in insn 927
changing reg in insn 926
changing reg in insn 931
changing reg in insn 929
changing reg in insn 928
changing reg in insn 927
changing reg in insn 929
changing reg in insn 930
changing reg in insn 932
changing reg in insn 933
changing reg in insn 934
changing reg in insn 935
changing reg in insn 936
changing reg in insn 937
changing reg in insn 943
changing reg in insn 941
changing reg in insn 940
changing reg in insn 939
changing reg in insn 944
changing reg in insn 942
changing reg in insn 941
changing reg in insn 940
changing reg in insn 942
changing reg in insn 943
changing reg in insn 945
changing reg in insn 948
changing reg in insn 949
changing reg in insn 951
changing reg in insn 954
changing reg in insn 955
changing reg in insn 959
changing reg in insn 960
changing reg in insn 964
changing reg in insn 965
changing reg in insn 972
changing reg in insn 967
changing reg in insn 970
changing reg in insn 970
changing reg in insn 971
changing reg in insn 967
changing reg in insn 966
changing reg in insn 968
changing reg in insn 969
changing reg in insn 978
changing reg in insn 979
changing reg in insn 981
changing reg in insn 991
changing reg in insn 992
changing reg in insn 998
changing reg in insn 996
changing reg in insn 995
changing reg in insn 994
changing reg in insn 999
changing reg in insn 997
changing reg in insn 996
changing reg in insn 995
changing reg in insn 997
changing reg in insn 998
changing reg in insn 1000
changing reg in insn 1004
changing reg in insn 1005
changing reg in insn 1011
changing reg in insn 1009
changing reg in insn 1008
changing reg in insn 1007
changing reg in insn 1012
changing reg in insn 1010
changing reg in insn 1009
changing reg in insn 1008
changing reg in insn 1010
changing reg in insn 1011
changing reg in insn 1013
changing reg in insn 1014
changing reg in insn 1015
changing reg in insn 1016
changing reg in insn 1018
changing reg in insn 1026
changing reg in insn 1027
changing reg in insn 1033
changing reg in insn 1031
changing reg in insn 1030
changing reg in insn 1029
changing reg in insn 1034
changing reg in insn 1032
changing reg in insn 1031
changing reg in insn 1030
changing reg in insn 1032
changing reg in insn 1033
changing reg in insn 1035
changing reg in insn 1036
changing reg in insn 1037
changing reg in insn 1038
changing reg in insn 1040
changing reg in insn 1048
changing reg in insn 1049
changing reg in insn 1055
changing reg in insn 1053
changing reg in insn 1052
changing reg in insn 1051
changing reg in insn 1056
changing reg in insn 1054
changing reg in insn 1053
changing reg in insn 1052
changing reg in insn 1054
changing reg in insn 1055
changing reg in insn 1057
changing reg in insn 1059
changing reg in insn 1060
changing reg in insn 1062
changing reg in insn 1063
changing reg in insn 1064
changing reg in insn 1065
changing reg in insn 1071
changing reg in insn 1069
changing reg in insn 1068
changing reg in insn 1067
changing reg in insn 1072
changing reg in insn 1070
changing reg in insn 1069
changing reg in insn 1068
changing reg in insn 1070
changing reg in insn 1071
changing reg in insn 1073
changing reg in insn 1076
changing reg in insn 1077
changing reg in insn 1083
changing reg in insn 1081
changing reg in insn 1080
changing reg in insn 1079
changing reg in insn 1084
changing reg in insn 1082
changing reg in insn 1081
changing reg in insn 1080
changing reg in insn 1082
changing reg in insn 1083
changing reg in insn 1085
changing reg in insn 1086
changing reg in insn 1087
changing reg in insn 1088
changing reg in insn 1090
changing reg in insn 1091
changing reg in insn 1097
changing reg in insn 1095
changing reg in insn 1094
changing reg in insn 1093
changing reg in insn 1098
changing reg in insn 1096
changing reg in insn 1095
changing reg in insn 1094
changing reg in insn 1096
changing reg in insn 1097
changing reg in insn 1099
changing reg in insn 1100
changing reg in insn 1101
changing reg in insn 1102
changing reg in insn 1104
changing reg in insn 1113
changing reg in insn 1114
changing reg in insn 1120
changing reg in insn 1118
changing reg in insn 1117
changing reg in insn 1116
changing reg in insn 1121
changing reg in insn 1119
changing reg in insn 1118
changing reg in insn 1117
changing reg in insn 1119
changing reg in insn 1120
changing reg in insn 1122
changing reg in insn 1123
changing reg in insn 1124
changing reg in insn 1125
changing reg in insn 1126
changing reg in insn 1127
changing reg in insn 1129
changing reg in insn 1132
changing reg in insn 1133
changing reg in insn 1137
changing reg in insn 1138
changing reg in insn 1142
changing reg in insn 1143
changing reg in insn 1150
changing reg in insn 1145
changing reg in insn 1148
changing reg in insn 1148
changing reg in insn 1149
changing reg in insn 1145
changing reg in insn 1144
changing reg in insn 1146
changing reg in insn 1147
changing reg in insn 1156
changing reg in insn 1157
changing reg in insn 1173
changing reg in insn 1174
changing reg in insn 1176
changing reg in insn 1177
changing reg in insn 1181
changing reg in insn 1182
changing reg in insn 1184
changing reg in insn 1187
changing reg in insn 1188
changing reg in insn 1192
changing reg in insn 1193
changing reg in insn 1200
changing reg in insn 1195
changing reg in insn 1198
changing reg in insn 1198
changing reg in insn 1199
changing reg in insn 1195
changing reg in insn 1194
changing reg in insn 1196
changing reg in insn 1197
changing reg in insn 1204
changing reg in insn 1205
changing reg in insn 1221
changing reg in insn 1222
changing reg in insn 1224
changing reg in insn 1225
changing reg in insn 1227
changing reg in insn 1230
changing reg in insn 1231
changing reg in insn 1238
changing reg in insn 1239
changing reg in insn 1241
changing reg in insn 1242
changing reg in insn 1247
changing reg in insn 1248
changing reg in insn 1254
changing reg in insn 1255
changing reg in insn 1259
changing reg in insn 1260
changing reg in insn 1268
changing reg in insn 1269
changing reg in insn 1273
changing reg in insn 1274
changing reg in insn 1282
changing reg in insn 1283
changing reg in insn 1287
changing reg in insn 1288
changing reg in insn 1296
changing reg in insn 1297
changing reg in insn 1301
changing reg in insn 1302
changing reg in insn 1310
changing reg in insn 1311
changing reg in insn 1315
changing reg in insn 1316
changing reg in insn 1324
changing reg in insn 1325
changing reg in insn 1329
changing reg in insn 1330
changing reg in insn 1338
changing reg in insn 1339
changing reg in insn 1343
changing reg in insn 1344
changing reg in insn 1352
changing reg in insn 1353
changing reg in insn 1357
changing reg in insn 1358
changing reg in insn 1367
changing reg in insn 1368
changing reg in insn 1375
changing reg in insn 1370
changing reg in insn 1373
changing reg in insn 1373
changing reg in insn 1374
changing reg in insn 1370
changing reg in insn 1369
changing reg in insn 1371
changing reg in insn 1372
changing reg in insn 1383
changing reg in insn 1385
changing reg in insn 1384
changing reg in insn 1392
changing reg in insn 1393
changing reg in insn 1395
changing reg in insn 1405
changing reg in insn 1406
changing reg in insn 1412
changing reg in insn 1410
changing reg in insn 1409
changing reg in insn 1408
changing reg in insn 1413
changing reg in insn 1411
changing reg in insn 1410
changing reg in insn 1409
changing reg in insn 1411
changing reg in insn 1412
changing reg in insn 1414
changing reg in insn 1420
changing reg in insn 1421
changing reg in insn 1427
changing reg in insn 1425
changing reg in insn 1424
changing reg in insn 1423
changing reg in insn 1428
changing reg in insn 1426
changing reg in insn 1425
changing reg in insn 1424
changing reg in insn 1426
changing reg in insn 1427
changing reg in insn 1429
changing reg in insn 1432
changing reg in insn 1433
changing reg in insn 1439
changing reg in insn 1437
changing reg in insn 1436
changing reg in insn 1435
changing reg in insn 1440
changing reg in insn 1438
changing reg in insn 1437
changing reg in insn 1436
changing reg in insn 1438
changing reg in insn 1439
changing reg in insn 1441
changing reg in insn 1443
changing reg in insn 1444
changing reg in insn 1456
changing reg in insn 1457
changing reg in insn 1459
changing reg in insn 1469
changing reg in insn 1470
changing reg in insn 1476
changing reg in insn 1474
changing reg in insn 1473
changing reg in insn 1472
changing reg in insn 1477
changing reg in insn 1475
changing reg in insn 1474
changing reg in insn 1473
changing reg in insn 1475
changing reg in insn 1476
changing reg in insn 1478
changing reg in insn 1484
changing reg in insn 1485
changing reg in insn 1491
changing reg in insn 1489
changing reg in insn 1488
changing reg in insn 1487
changing reg in insn 1492
changing reg in insn 1490
changing reg in insn 1489
changing reg in insn 1488
changing reg in insn 1490
changing reg in insn 1491
changing reg in insn 1493
changing reg in insn 1497
changing reg in insn 1498
changing reg in insn 1504
changing reg in insn 1502
changing reg in insn 1501
changing reg in insn 1500
changing reg in insn 1505
changing reg in insn 1503
changing reg in insn 1502
changing reg in insn 1501
changing reg in insn 1503
changing reg in insn 1504
changing reg in insn 1506
changing reg in insn 1509
changing reg in insn 1510
changing reg in insn 1512
changing reg in insn 1531
changing reg in insn 1532
changing reg in insn 1534
changing reg in insn 1544
changing reg in insn 1545
changing reg in insn 1551
changing reg in insn 1549
changing reg in insn 1548
changing reg in insn 1547
changing reg in insn 1552
changing reg in insn 1550
changing reg in insn 1549
changing reg in insn 1548
changing reg in insn 1550
changing reg in insn 1551
changing reg in insn 1553
changing reg in insn 1560
changing reg in insn 1561
changing reg in insn 1563
changing reg in insn 1573
changing reg in insn 1574
changing reg in insn 1580
changing reg in insn 1578
changing reg in insn 1577
changing reg in insn 1576
changing reg in insn 1581
changing reg in insn 1579
changing reg in insn 1578
changing reg in insn 1577
changing reg in insn 1579
changing reg in insn 1580
changing reg in insn 1582
changing reg in insn 1589
changing reg in insn 1590
changing reg in insn 1592
changing reg in insn 1603
changing reg in insn 1604
changing reg in insn 1610
changing reg in insn 1608
changing reg in insn 1607
changing reg in insn 1606
changing reg in insn 1611
changing reg in insn 1609
changing reg in insn 1608
changing reg in insn 1607
changing reg in insn 1609
changing reg in insn 1610
changing reg in insn 1612
changing reg in insn 1615
changing reg in insn 1616
changing reg in insn 1618
changing reg in insn 1630
changing reg in insn 1631
changing reg in insn 1633
changing reg in insn 1643
changing reg in insn 1644
changing reg in insn 1650
changing reg in insn 1648
changing reg in insn 1647
changing reg in insn 1646
changing reg in insn 1651
changing reg in insn 1649
changing reg in insn 1648
changing reg in insn 1647
changing reg in insn 1649
changing reg in insn 1650
changing reg in insn 1652
changing reg in insn 1659
changing reg in insn 1660
changing reg in insn 1662
changing reg in insn 1672
changing reg in insn 1673
changing reg in insn 1679
changing reg in insn 1677
changing reg in insn 1676
changing reg in insn 1675
changing reg in insn 1680
changing reg in insn 1678
changing reg in insn 1677
changing reg in insn 1676
changing reg in insn 1678
changing reg in insn 1679
changing reg in insn 1681
changing reg in insn 1688
changing reg in insn 1689
changing reg in insn 1691
changing reg in insn 1701
changing reg in insn 1702
changing reg in insn 1708
changing reg in insn 1706
changing reg in insn 1705
changing reg in insn 1704
changing reg in insn 1709
changing reg in insn 1707
changing reg in insn 1706
changing reg in insn 1705
changing reg in insn 1707
changing reg in insn 1708
changing reg in insn 1710
changing reg in insn 1717
changing reg in insn 1718
changing reg in insn 1720
changing reg in insn 1730
changing reg in insn 1731
changing reg in insn 1737
changing reg in insn 1735
changing reg in insn 1734
changing reg in insn 1733
changing reg in insn 1738
changing reg in insn 1736
changing reg in insn 1735
changing reg in insn 1734
changing reg in insn 1736
changing reg in insn 1737
changing reg in insn 1739
changing reg in insn 1746
changing reg in insn 1747
changing reg in insn 1749
changing reg in insn 1760
changing reg in insn 1761
changing reg in insn 1762
changing reg in insn 1763
changing reg in insn 1765
changing reg in insn 1773
changing reg in insn 1774
changing reg in insn 1776
changing reg in insn 1777
changing reg in insn 1779
changing reg in insn 1787
changing reg in insn 1788
changing reg in insn 1790
changing reg in insn 1791
changing reg in insn 1792
changing reg in insn 1793
changing reg in insn 1794
changing reg in insn 1795
changing reg in insn 1803
changing reg in insn 1804
changing reg in insn 1806
changing reg in insn 1822
changing reg in insn 1823
changing reg in insn 1825
changing reg in insn 1841
changing reg in insn 1842
changing reg in insn 1844
changing reg in insn 1857
changing reg in insn 1858
changing reg in insn 1860
changing reg in insn 1863
changing reg in insn 1864
changing reg in insn 9
changing reg in insn 1892
deleting insn with uid = 2018.
deleting insn with uid = 2021.
deleting insn with uid = 2025.
deleting insn with uid = 2028.
deleting insn with uid = 2032.
deleting insn with uid = 881.
deleting insn with uid = 919.
deleting insn with uid = 2035.
deleting insn with uid = 1045.
deleting insn with uid = 1109.
deleting insn with uid = 2038.
deleting insn with uid = 2042.
deleting insn with uid = 2046.
deleting insn with uid = 1515.
deleting insn with uid = 1621.
deleting insn with uid = 1768.
deleting insn with uid = 1782.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 230.
verify found no changes in insn with uid = 244.
verify found no changes in insn with uid = 258.
verify found no changes in insn with uid = 282.
verify found no changes in insn with uid = 290.
verify found no changes in insn with uid = 295.
verify found no changes in insn with uid = 317.
verify found no changes in insn with uid = 327.
verify found no changes in insn with uid = 349.
verify found no changes in insn with uid = 356.
verify found no changes in insn with uid = 358.
verify found no changes in insn with uid = 364.
verify found no changes in insn with uid = 372.
verify found no changes in insn with uid = 387.
verify found no changes in insn with uid = 400.
verify found no changes in insn with uid = 413.
verify found no changes in insn with uid = 430.
verify found no changes in insn with uid = 444.
verify found no changes in insn with uid = 458.
verify found no changes in insn with uid = 472.
verify found no changes in insn with uid = 486.
verify found no changes in insn with uid = 500.
verify found no changes in insn with uid = 514.
verify found no changes in insn with uid = 528.
verify found no changes in insn with uid = 572.
verify found no changes in insn with uid = 582.
verify found no changes in insn with uid = 588.
verify found no changes in insn with uid = 591.
verify found no changes in insn with uid = 594.
verify found no changes in insn with uid = 599.
verify found no changes in insn with uid = 601.
verify found no changes in insn with uid = 612.
verify found no changes in insn with uid = 615.
verify found no changes in insn with uid = 622.
verify found no changes in insn with uid = 628.
verify found no changes in insn with uid = 630.
verify found no changes in insn with uid = 632.
verify found no changes in insn with uid = 648.
verify found no changes in insn with uid = 666.
verify found no changes in insn with uid = 674.
verify found no changes in insn with uid = 679.
verify found no changes in insn with uid = 681.
verify found no changes in insn with uid = 687.
verify found no changes in insn with uid = 708.
verify found no changes in insn with uid = 721.
verify found no changes in insn with uid = 734.
verify found no changes in insn with uid = 748.
verify found no changes in insn with uid = 816.
verify found no changes in insn with uid = 844.
verify found no changes in insn with uid = 880.
verify found no changes in insn with uid = 918.
verify found no changes in insn with uid = 958.
verify found no changes in insn with uid = 986.
verify found no changes in insn with uid = 1022.
verify found no changes in insn with uid = 1044.
verify found no changes in insn with uid = 1108.
verify found no changes in insn with uid = 1136.
verify found no changes in insn with uid = 1160.
verify found no changes in insn with uid = 1167.
verify found no changes in insn with uid = 1169.
verify found no changes in insn with uid = 1175.
verify found no changes in insn with uid = 1191.
verify found no changes in insn with uid = 1208.
verify found no changes in insn with uid = 1215.
verify found no changes in insn with uid = 1217.
verify found no changes in insn with uid = 1223.
verify found no changes in insn with uid = 1235.
verify found no changes in insn with uid = 1245.
verify found no changes in insn with uid = 1258.
verify found no changes in insn with uid = 1272.
verify found no changes in insn with uid = 1286.
verify found no changes in insn with uid = 1300.
verify found no changes in insn with uid = 1314.
verify found no changes in insn with uid = 1328.
verify found no changes in insn with uid = 1342.
verify found no changes in insn with uid = 1356.
verify found no changes in insn with uid = 1400.
verify found no changes in insn with uid = 1450.
verify found no changes in insn with uid = 1452.
verify found no changes in insn with uid = 1464.
verify found no changes in insn with uid = 1519.
verify found no changes in insn with uid = 1525.
verify found no changes in insn with uid = 1527.
verify found no changes in insn with uid = 1539.
verify found no changes in insn with uid = 1568.
verify found no changes in insn with uid = 1597.
verify found no changes in insn with uid = 1625.
verify found no changes in insn with uid = 1638.
verify found no changes in insn with uid = 1667.
verify found no changes in insn with uid = 1696.
verify found no changes in insn with uid = 1725.
verify found no changes in insn with uid = 1754.
verify found no changes in insn with uid = 1772.
verify found no changes in insn with uid = 1786.
verify found no changes in insn with uid = 1811.
verify found no changes in insn with uid = 1817.
verify found no changes in insn with uid = 1830.
verify found no changes in insn with uid = 1836.
verify found no changes in insn with uid = 1849.
verify found no changes in insn with uid = 1855.
verify found no changes in insn with uid = 1867.
verify found no changes in insn with uid = 1873.
verify found no changes in insn with uid = 1875.
verify found no changes in insn with uid = 1894.


int command_line(Preprocess*, IOFiles*, Procpar_info*, int, char**, int*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={962d,919u} r1={289d,244u,133e} r2={127d,23u,4e} r3={12d,11u} r4={182d,78u} r5={226d,113u} r6={1d,484u} r7={1d,229u} r8={104d} r9={104d} r10={104d} r11={104d} r12={104d} r13={104d} r14={104d} r15={104d} r17={550d,65u} r18={104d} r19={104d} r20={1d,1u,142e} r21={113d,12u} r22={105d} r23={105d} r24={105d} r25={105d} r26={105d} r27={105d} r28={105d} r29={104d} r30={104d} r31={104d} r32={104d} r33={104d} r34={104d} r35={104d} r36={104d} r37={105d,1u} r38={105d,1u} r39={104d} r40={104d} r45={104d} r46={104d} r47={104d} r48={104d} r49={104d} r50={104d} r51={104d} r52={104d} r53={104d} r54={104d} r55={104d} r56={104d} r57={104d} r58={104d} r59={104d} r60={104d} r61={104d} r62={104d} r63={104d} r64={104d} r65={104d} r66={104d} r67={104d} r68={104d} r69={104d} r70={104d} r71={104d} r72={104d} r73={104d} r74={104d} r75={104d} r76={104d} r77={104d} r78={104d} r79={104d} r80={104d} 
;;    total ref usage 11693{9233d,2181u,279e} in 1680{1576 regular + 104 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags]
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])
        (reg:DI 5 di [ preprocess ])) com_line.cpp:23 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])
        (reg:DI 4 si [ file ])) com_line.cpp:23 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5080 [0xffffffffffffec28])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) com_line.cpp:23 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5084 [0xffffffffffffec24])) [0 argc+0 S4 A32])
        (reg:SI 2 cx [ argc ])) com_line.cpp:23 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])
        (reg:DI 37 r8 [ argv ])) com_line.cpp:23 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])
        (reg:DI 38 r9 [ fid ])) com_line.cpp:23 89 {*movdi_internal}
     (nil))
(note 8 7 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 8 12 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.6179+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [1004])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:23 986 {stack_tls_protect_set_di}
     (nil))
(insn 12 9 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5044 [0xffffffffffffec4c])) [0 found_extension+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:26 90 {*movsi_internal}
     (nil))
(insn 13 12 220 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:33 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 220 13 14 3 3 "" [1 uses])
(note 14 220 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) com_line.cpp:33 7 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 223)
            (pc))) com_line.cpp:33 612 {*jcc_1}
     (nil)
 -> 223)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 ax [567])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:34 90 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:DI 1 dx [orig:87 D.6165 ] [87])
        (sign_extend:DI (reg:SI 0 ax [567]))) com_line.cpp:34 142 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 4 (set (reg:DI 0 ax [568])
        (reg:DI 1 dx [orig:87 D.6165 ] [87])) com_line.cpp:34 89 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg:DI 0 ax [568])
                (ashift:DI (reg:DI 0 ax [568])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:34 512 {*ashldi3_1}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg:DI 0 ax [568])
                (plus:DI (reg:DI 0 ax [568])
                    (reg:DI 1 dx [orig:87 D.6165 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:34 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:87 D.6165 ] [87])
            (const_int 9 [0x9]))
        (nil)))
(insn 23 22 24 4 (parallel [
            (set (reg:DI 0 ax [569])
                (ashift:DI (reg:DI 0 ax [568])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:34 512 {*ashldi3_1}
     (nil))
(insn 24 23 25 4 (set (reg:DI 0 ax [568])
        (reg:DI 0 ax [569])) com_line.cpp:34 89 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 1 dx [orig:88 D.6165 ] [88])
        (reg:DI 0 ax [568])) com_line.cpp:34 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg/f:DI 0 ax [570])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:34 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.6166 ] [89])
                (plus:DI (reg/f:DI 0 ax [570])
                    (reg:DI 1 dx [orig:88 D.6165 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:34 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.6165 ] [88]))
        (nil)))
(insn 28 27 29 4 (set (mem/j:SI (reg/f:DI 0 ax [orig:89 D.6166 ] [89]) [0 _38->fid_scale+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:34 90 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:SI 0 ax [571])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:35 90 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 1 dx [orig:90 D.6165 ] [90])
        (sign_extend:DI (reg:SI 0 ax [571]))) com_line.cpp:35 142 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 4 (set (reg:DI 0 ax [572])
        (reg:DI 1 dx [orig:90 D.6165 ] [90])) com_line.cpp:35 89 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:DI 0 ax [572])
                (ashift:DI (reg:DI 0 ax [572])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:35 512 {*ashldi3_1}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg:DI 0 ax [572])
                (plus:DI (reg:DI 0 ax [572])
                    (reg:DI 1 dx [orig:90 D.6165 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:35 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:90 D.6165 ] [90])
            (const_int 9 [0x9]))
        (nil)))
(insn 34 33 35 4 (parallel [
            (set (reg:DI 0 ax [573])
                (ashift:DI (reg:DI 0 ax [572])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:35 512 {*ashldi3_1}
     (nil))
(insn 35 34 36 4 (set (reg:DI 0 ax [572])
        (reg:DI 0 ax [573])) com_line.cpp:35 89 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 1 dx [orig:91 D.6165 ] [91])
        (reg:DI 0 ax [572])) com_line.cpp:35 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [574])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:35 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.6166 ] [92])
                (plus:DI (reg/f:DI 0 ax [574])
                    (reg:DI 1 dx [orig:91 D.6165 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:35 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.6165 ] [91]))
        (nil)))
(insn 39 38 40 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:92 D.6166 ] [92])
                (const_int 8 [0x8])) [0 _42->scaleby+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:35 90 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:SI 0 ax [575])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:36 90 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 1 dx [orig:93 D.6165 ] [93])
        (sign_extend:DI (reg:SI 0 ax [575]))) com_line.cpp:36 142 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 4 (set (reg:DI 0 ax [576])
        (reg:DI 1 dx [orig:93 D.6165 ] [93])) com_line.cpp:36 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 0 ax [576])
                (ashift:DI (reg:DI 0 ax [576])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:36 512 {*ashldi3_1}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg:DI 0 ax [576])
                (plus:DI (reg:DI 0 ax [576])
                    (reg:DI 1 dx [orig:93 D.6165 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:36 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:93 D.6165 ] [93])
            (const_int 9 [0x9]))
        (nil)))
(insn 45 44 46 4 (parallel [
            (set (reg:DI 0 ax [577])
                (ashift:DI (reg:DI 0 ax [576])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:36 512 {*ashldi3_1}
     (nil))
(insn 46 45 47 4 (set (reg:DI 0 ax [576])
        (reg:DI 0 ax [577])) com_line.cpp:36 89 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:DI 1 dx [orig:94 D.6165 ] [94])
        (reg:DI 0 ax [576])) com_line.cpp:36 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [578])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:36 89 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.6166 ] [95])
                (plus:DI (reg/f:DI 0 ax [578])
                    (reg:DI 1 dx [orig:94 D.6165 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:36 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.6165 ] [94]))
        (nil)))
(insn 50 49 51 4 (set (reg:SF 21 xmm0 [579])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) com_line.cpp:36 129 {*movsf_internal}
     (nil))
(insn 51 50 52 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:95 D.6166 ] [95])
                (const_int 4 [0x4])) [0 _46->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [579])) com_line.cpp:36 129 {*movsf_internal}
     (nil))
(insn 52 51 53 4 (set (reg:SI 0 ax [580])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:37 90 {*movsi_internal}
     (nil))
(insn 53 52 54 4 (set (reg:DI 1 dx [orig:96 D.6165 ] [96])
        (sign_extend:DI (reg:SI 0 ax [580]))) com_line.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 54 53 55 4 (set (reg:DI 0 ax [581])
        (reg:DI 1 dx [orig:96 D.6165 ] [96])) com_line.cpp:37 89 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (parallel [
            (set (reg:DI 0 ax [581])
                (ashift:DI (reg:DI 0 ax [581])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:37 512 {*ashldi3_1}
     (nil))
(insn 56 55 57 4 (parallel [
            (set (reg:DI 0 ax [581])
                (plus:DI (reg:DI 0 ax [581])
                    (reg:DI 1 dx [orig:96 D.6165 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:37 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:96 D.6165 ] [96])
            (const_int 9 [0x9]))
        (nil)))
(insn 57 56 58 4 (parallel [
            (set (reg:DI 0 ax [582])
                (ashift:DI (reg:DI 0 ax [581])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:37 512 {*ashldi3_1}
     (nil))
(insn 58 57 59 4 (set (reg:DI 0 ax [581])
        (reg:DI 0 ax [582])) com_line.cpp:37 89 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DI 1 dx [orig:97 D.6165 ] [97])
        (reg:DI 0 ax [581])) com_line.cpp:37 89 {*movdi_internal}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [583])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:37 89 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.6166 ] [98])
                (plus:DI (reg/f:DI 0 ax [583])
                    (reg:DI 1 dx [orig:97 D.6165 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:37 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.6165 ] [97]))
        (nil)))
(insn 62 61 63 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:98 D.6166 ] [98])
                (const_int 12 [0xc])) [0 _50->pre_ecc+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:37 90 {*movsi_internal}
     (nil))
(insn 63 62 64 4 (set (reg:SI 0 ax [584])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:38 90 {*movsi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:DI 1 dx [orig:99 D.6165 ] [99])
        (sign_extend:DI (reg:SI 0 ax [584]))) com_line.cpp:38 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 4 (set (reg:DI 0 ax [585])
        (reg:DI 1 dx [orig:99 D.6165 ] [99])) com_line.cpp:38 89 {*movdi_internal}
     (nil))
(insn 66 65 67 4 (parallel [
            (set (reg:DI 0 ax [585])
                (ashift:DI (reg:DI 0 ax [585])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:38 512 {*ashldi3_1}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg:DI 0 ax [585])
                (plus:DI (reg:DI 0 ax [585])
                    (reg:DI 1 dx [orig:99 D.6165 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:38 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:99 D.6165 ] [99])
            (const_int 9 [0x9]))
        (nil)))
(insn 68 67 69 4 (parallel [
            (set (reg:DI 0 ax [586])
                (ashift:DI (reg:DI 0 ax [585])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:38 512 {*ashldi3_1}
     (nil))
(insn 69 68 70 4 (set (reg:DI 0 ax [585])
        (reg:DI 0 ax [586])) com_line.cpp:38 89 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (set (reg:DI 1 dx [orig:100 D.6165 ] [100])
        (reg:DI 0 ax [585])) com_line.cpp:38 89 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (reg/f:DI 0 ax [587])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:38 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.6166 ] [101])
                (plus:DI (reg/f:DI 0 ax [587])
                    (reg:DI 1 dx [orig:100 D.6165 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:38 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.6165 ] [100]))
        (nil)))
(insn 73 72 74 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:101 D.6166 ] [101])
                (const_int 16 [0x10])) [0 _54->bc+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:38 90 {*movsi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SI 0 ax [588])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:39 90 {*movsi_internal}
     (nil))
(insn 75 74 76 4 (set (reg:DI 1 dx [orig:102 D.6165 ] [102])
        (sign_extend:DI (reg:SI 0 ax [588]))) com_line.cpp:39 142 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 4 (set (reg:DI 0 ax [589])
        (reg:DI 1 dx [orig:102 D.6165 ] [102])) com_line.cpp:39 89 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (parallel [
            (set (reg:DI 0 ax [589])
                (ashift:DI (reg:DI 0 ax [589])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:39 512 {*ashldi3_1}
     (nil))
(insn 78 77 79 4 (parallel [
            (set (reg:DI 0 ax [589])
                (plus:DI (reg:DI 0 ax [589])
                    (reg:DI 1 dx [orig:102 D.6165 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:39 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:102 D.6165 ] [102])
            (const_int 9 [0x9]))
        (nil)))
(insn 79 78 80 4 (parallel [
            (set (reg:DI 0 ax [590])
                (ashift:DI (reg:DI 0 ax [589])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:39 512 {*ashldi3_1}
     (nil))
(insn 80 79 81 4 (set (reg:DI 0 ax [589])
        (reg:DI 0 ax [590])) com_line.cpp:39 89 {*movdi_internal}
     (nil))
(insn 81 80 82 4 (set (reg:DI 1 dx [orig:103 D.6165 ] [103])
        (reg:DI 0 ax [589])) com_line.cpp:39 89 {*movdi_internal}
     (nil))
(insn 82 81 83 4 (set (reg/f:DI 0 ax [591])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:39 89 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.6166 ] [104])
                (plus:DI (reg/f:DI 0 ax [591])
                    (reg:DI 1 dx [orig:103 D.6165 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:39 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.6165 ] [103]))
        (nil)))
(insn 84 83 85 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:104 D.6166 ] [104])
                (const_int 20 [0x14])) [0 _58->file_type+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:39 90 {*movsi_internal}
     (nil))
(insn 85 84 86 4 (set (reg:SI 0 ax [592])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:40 90 {*movsi_internal}
     (nil))
(insn 86 85 87 4 (set (reg:DI 1 dx [orig:105 D.6165 ] [105])
        (sign_extend:DI (reg:SI 0 ax [592]))) com_line.cpp:40 142 {*extendsidi2_rex64}
     (nil))
(insn 87 86 88 4 (set (reg:DI 0 ax [593])
        (reg:DI 1 dx [orig:105 D.6165 ] [105])) com_line.cpp:40 89 {*movdi_internal}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg:DI 0 ax [593])
                (ashift:DI (reg:DI 0 ax [593])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:40 512 {*ashldi3_1}
     (nil))
(insn 89 88 90 4 (parallel [
            (set (reg:DI 0 ax [593])
                (plus:DI (reg:DI 0 ax [593])
                    (reg:DI 1 dx [orig:105 D.6165 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:40 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:105 D.6165 ] [105])
            (const_int 9 [0x9]))
        (nil)))
(insn 90 89 91 4 (parallel [
            (set (reg:DI 0 ax [594])
                (ashift:DI (reg:DI 0 ax [593])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:40 512 {*ashldi3_1}
     (nil))
(insn 91 90 92 4 (set (reg:DI 0 ax [593])
        (reg:DI 0 ax [594])) com_line.cpp:40 89 {*movdi_internal}
     (nil))
(insn 92 91 93 4 (set (reg:DI 1 dx [orig:106 D.6165 ] [106])
        (reg:DI 0 ax [593])) com_line.cpp:40 89 {*movdi_internal}
     (nil))
(insn 93 92 94 4 (set (reg/f:DI 0 ax [595])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:40 89 {*movdi_internal}
     (nil))
(insn 94 93 95 4 (parallel [
            (set (reg/f:DI 0 ax [orig:107 D.6166 ] [107])
                (plus:DI (reg/f:DI 0 ax [595])
                    (reg:DI 1 dx [orig:106 D.6165 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:40 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:106 D.6165 ] [106]))
        (nil)))
(insn 95 94 96 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:107 D.6166 ] [107])
                (const_int 24 [0x18])) [0 _62->data_zero_fill+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:40 90 {*movsi_internal}
     (nil))
(insn 96 95 97 4 (set (reg:SI 0 ax [596])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:41 90 {*movsi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:DI 1 dx [orig:108 D.6165 ] [108])
        (sign_extend:DI (reg:SI 0 ax [596]))) com_line.cpp:41 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 4 (set (reg:DI 0 ax [597])
        (reg:DI 1 dx [orig:108 D.6165 ] [108])) com_line.cpp:41 89 {*movdi_internal}
     (nil))
(insn 99 98 100 4 (parallel [
            (set (reg:DI 0 ax [597])
                (ashift:DI (reg:DI 0 ax [597])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:41 512 {*ashldi3_1}
     (nil))
(insn 100 99 101 4 (parallel [
            (set (reg:DI 0 ax [597])
                (plus:DI (reg:DI 0 ax [597])
                    (reg:DI 1 dx [orig:108 D.6165 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:41 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:108 D.6165 ] [108])
            (const_int 9 [0x9]))
        (nil)))
(insn 101 100 102 4 (parallel [
            (set (reg:DI 0 ax [598])
                (ashift:DI (reg:DI 0 ax [597])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:41 512 {*ashldi3_1}
     (nil))
(insn 102 101 103 4 (set (reg:DI 0 ax [597])
        (reg:DI 0 ax [598])) com_line.cpp:41 89 {*movdi_internal}
     (nil))
(insn 103 102 104 4 (set (reg:DI 1 dx [orig:109 D.6165 ] [109])
        (reg:DI 0 ax [597])) com_line.cpp:41 89 {*movdi_internal}
     (nil))
(insn 104 103 105 4 (set (reg/f:DI 0 ax [599])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:41 89 {*movdi_internal}
     (nil))
(insn 105 104 106 4 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.6166 ] [110])
                (plus:DI (reg/f:DI 0 ax [599])
                    (reg:DI 1 dx [orig:109 D.6165 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:41 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:109 D.6165 ] [109]))
        (nil)))
(insn 106 105 107 4 (set (reg:SF 21 xmm0 [600])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) com_line.cpp:41 129 {*movsf_internal}
     (nil))
(insn 107 106 108 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:110 D.6166 ] [110])
                (const_int 28 [0x1c])) [0 _66->comp_filter+0 S4 A32])
        (reg:SF 21 xmm0 [600])) com_line.cpp:41 129 {*movsf_internal}
     (nil))
(insn 108 107 109 4 (set (reg:SI 0 ax [601])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:42 90 {*movsi_internal}
     (nil))
(insn 109 108 110 4 (set (reg:DI 1 dx [orig:111 D.6165 ] [111])
        (sign_extend:DI (reg:SI 0 ax [601]))) com_line.cpp:42 142 {*extendsidi2_rex64}
     (nil))
(insn 110 109 111 4 (set (reg:DI 0 ax [602])
        (reg:DI 1 dx [orig:111 D.6165 ] [111])) com_line.cpp:42 89 {*movdi_internal}
     (nil))
(insn 111 110 112 4 (parallel [
            (set (reg:DI 0 ax [602])
                (ashift:DI (reg:DI 0 ax [602])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:42 512 {*ashldi3_1}
     (nil))
(insn 112 111 113 4 (parallel [
            (set (reg:DI 0 ax [602])
                (plus:DI (reg:DI 0 ax [602])
                    (reg:DI 1 dx [orig:111 D.6165 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:42 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:111 D.6165 ] [111])
            (const_int 9 [0x9]))
        (nil)))
(insn 113 112 114 4 (parallel [
            (set (reg:DI 0 ax [603])
                (ashift:DI (reg:DI 0 ax [602])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:42 512 {*ashldi3_1}
     (nil))
(insn 114 113 115 4 (set (reg:DI 0 ax [602])
        (reg:DI 0 ax [603])) com_line.cpp:42 89 {*movdi_internal}
     (nil))
(insn 115 114 116 4 (set (reg:DI 1 dx [orig:112 D.6165 ] [112])
        (reg:DI 0 ax [602])) com_line.cpp:42 89 {*movdi_internal}
     (nil))
(insn 116 115 117 4 (set (reg/f:DI 0 ax [604])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:42 89 {*movdi_internal}
     (nil))
(insn 117 116 118 4 (parallel [
            (set (reg/f:DI 0 ax [orig:113 D.6166 ] [113])
                (plus:DI (reg/f:DI 0 ax [604])
                    (reg:DI 1 dx [orig:112 D.6165 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:42 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:112 D.6165 ] [112]))
        (nil)))
(insn 118 117 119 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:113 D.6166 ] [113])
                (const_int 32 [0x20])) [0 _70->max_normalize+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:42 90 {*movsi_internal}
     (nil))
(insn 119 118 120 4 (set (reg:SI 0 ax [605])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:43 90 {*movsi_internal}
     (nil))
(insn 120 119 121 4 (set (reg:DI 1 dx [orig:114 D.6165 ] [114])
        (sign_extend:DI (reg:SI 0 ax [605]))) com_line.cpp:43 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 4 (set (reg:DI 0 ax [606])
        (reg:DI 1 dx [orig:114 D.6165 ] [114])) com_line.cpp:43 89 {*movdi_internal}
     (nil))
(insn 122 121 123 4 (parallel [
            (set (reg:DI 0 ax [606])
                (ashift:DI (reg:DI 0 ax [606])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:43 512 {*ashldi3_1}
     (nil))
(insn 123 122 124 4 (parallel [
            (set (reg:DI 0 ax [606])
                (plus:DI (reg:DI 0 ax [606])
                    (reg:DI 1 dx [orig:114 D.6165 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:43 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:114 D.6165 ] [114])
            (const_int 9 [0x9]))
        (nil)))
(insn 124 123 125 4 (parallel [
            (set (reg:DI 0 ax [607])
                (ashift:DI (reg:DI 0 ax [606])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:43 512 {*ashldi3_1}
     (nil))
(insn 125 124 126 4 (set (reg:DI 0 ax [606])
        (reg:DI 0 ax [607])) com_line.cpp:43 89 {*movdi_internal}
     (nil))
(insn 126 125 127 4 (set (reg:DI 1 dx [orig:115 D.6165 ] [115])
        (reg:DI 0 ax [606])) com_line.cpp:43 89 {*movdi_internal}
     (nil))
(insn 127 126 128 4 (set (reg/f:DI 0 ax [608])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:43 89 {*movdi_internal}
     (nil))
(insn 128 127 129 4 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.6166 ] [116])
                (plus:DI (reg/f:DI 0 ax [608])
                    (reg:DI 1 dx [orig:115 D.6165 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:43 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:115 D.6165 ] [115]))
        (nil)))
(insn 129 128 130 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:116 D.6166 ] [116])
                (const_int 36 [0x24])) [0 _74->pre_quality+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:43 90 {*movsi_internal}
     (nil))
(insn 130 129 131 4 (set (reg:SI 0 ax [609])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:44 90 {*movsi_internal}
     (nil))
(insn 131 130 132 4 (set (reg:DI 1 dx [orig:117 D.6165 ] [117])
        (sign_extend:DI (reg:SI 0 ax [609]))) com_line.cpp:44 142 {*extendsidi2_rex64}
     (nil))
(insn 132 131 133 4 (set (reg:DI 0 ax [610])
        (reg:DI 1 dx [orig:117 D.6165 ] [117])) com_line.cpp:44 89 {*movdi_internal}
     (nil))
(insn 133 132 134 4 (parallel [
            (set (reg:DI 0 ax [610])
                (ashift:DI (reg:DI 0 ax [610])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:44 512 {*ashldi3_1}
     (nil))
(insn 134 133 135 4 (parallel [
            (set (reg:DI 0 ax [610])
                (plus:DI (reg:DI 0 ax [610])
                    (reg:DI 1 dx [orig:117 D.6165 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:44 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:117 D.6165 ] [117])
            (const_int 9 [0x9]))
        (nil)))
(insn 135 134 136 4 (parallel [
            (set (reg:DI 0 ax [611])
                (ashift:DI (reg:DI 0 ax [610])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:44 512 {*ashldi3_1}
     (nil))
(insn 136 135 137 4 (set (reg:DI 0 ax [610])
        (reg:DI 0 ax [611])) com_line.cpp:44 89 {*movdi_internal}
     (nil))
(insn 137 136 138 4 (set (reg:DI 1 dx [orig:118 D.6165 ] [118])
        (reg:DI 0 ax [610])) com_line.cpp:44 89 {*movdi_internal}
     (nil))
(insn 138 137 139 4 (set (reg/f:DI 0 ax [612])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:44 89 {*movdi_internal}
     (nil))
(insn 139 138 140 4 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.6166 ] [119])
                (plus:DI (reg/f:DI 0 ax [612])
                    (reg:DI 1 dx [orig:118 D.6165 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:44 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:118 D.6165 ] [118]))
        (nil)))
(insn 140 139 141 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:119 D.6166 ] [119])
                (const_int 40 [0x28])) [0 _78->pre_quecc+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:44 90 {*movsi_internal}
     (nil))
(insn 141 140 142 4 (set (reg:SI 0 ax [613])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:45 90 {*movsi_internal}
     (nil))
(insn 142 141 143 4 (set (reg:DI 1 dx [orig:120 D.6165 ] [120])
        (sign_extend:DI (reg:SI 0 ax [613]))) com_line.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 143 142 144 4 (set (reg:DI 0 ax [614])
        (reg:DI 1 dx [orig:120 D.6165 ] [120])) com_line.cpp:45 89 {*movdi_internal}
     (nil))
(insn 144 143 145 4 (parallel [
            (set (reg:DI 0 ax [614])
                (ashift:DI (reg:DI 0 ax [614])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:45 512 {*ashldi3_1}
     (nil))
(insn 145 144 146 4 (parallel [
            (set (reg:DI 0 ax [614])
                (plus:DI (reg:DI 0 ax [614])
                    (reg:DI 1 dx [orig:120 D.6165 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:45 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:120 D.6165 ] [120])
            (const_int 9 [0x9]))
        (nil)))
(insn 146 145 147 4 (parallel [
            (set (reg:DI 0 ax [615])
                (ashift:DI (reg:DI 0 ax [614])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:45 512 {*ashldi3_1}
     (nil))
(insn 147 146 148 4 (set (reg:DI 0 ax [614])
        (reg:DI 0 ax [615])) com_line.cpp:45 89 {*movdi_internal}
     (nil))
(insn 148 147 149 4 (set (reg:DI 1 dx [orig:121 D.6165 ] [121])
        (reg:DI 0 ax [614])) com_line.cpp:45 89 {*movdi_internal}
     (nil))
(insn 149 148 150 4 (set (reg/f:DI 0 ax [616])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:45 89 {*movdi_internal}
     (nil))
(insn 150 149 151 4 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.6166 ] [122])
                (plus:DI (reg/f:DI 0 ax [616])
                    (reg:DI 1 dx [orig:121 D.6165 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:45 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.6165 ] [121]))
        (nil)))
(insn 151 150 152 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:122 D.6166 ] [122])
                (const_int 44 [0x2c])) [0 _82->pre_quecc_points+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:45 90 {*movsi_internal}
     (nil))
(insn 152 151 153 4 (set (reg:SI 0 ax [617])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:46 90 {*movsi_internal}
     (nil))
(insn 153 152 154 4 (set (reg:DI 1 dx [orig:123 D.6165 ] [123])
        (sign_extend:DI (reg:SI 0 ax [617]))) com_line.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 4 (set (reg:DI 0 ax [618])
        (reg:DI 1 dx [orig:123 D.6165 ] [123])) com_line.cpp:46 89 {*movdi_internal}
     (nil))
(insn 155 154 156 4 (parallel [
            (set (reg:DI 0 ax [618])
                (ashift:DI (reg:DI 0 ax [618])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:46 512 {*ashldi3_1}
     (nil))
(insn 156 155 157 4 (parallel [
            (set (reg:DI 0 ax [618])
                (plus:DI (reg:DI 0 ax [618])
                    (reg:DI 1 dx [orig:123 D.6165 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:46 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:123 D.6165 ] [123])
            (const_int 9 [0x9]))
        (nil)))
(insn 157 156 158 4 (parallel [
            (set (reg:DI 0 ax [619])
                (ashift:DI (reg:DI 0 ax [618])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:46 512 {*ashldi3_1}
     (nil))
(insn 158 157 159 4 (set (reg:DI 0 ax [618])
        (reg:DI 0 ax [619])) com_line.cpp:46 89 {*movdi_internal}
     (nil))
(insn 159 158 160 4 (set (reg:DI 1 dx [orig:124 D.6165 ] [124])
        (reg:DI 0 ax [618])) com_line.cpp:46 89 {*movdi_internal}
     (nil))
(insn 160 159 161 4 (set (reg/f:DI 0 ax [620])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:46 89 {*movdi_internal}
     (nil))
(insn 161 160 162 4 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.6166 ] [125])
                (plus:DI (reg/f:DI 0 ax [620])
                    (reg:DI 1 dx [orig:124 D.6165 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:46 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:124 D.6165 ] [124]))
        (nil)))
(insn 162 161 163 4 (set (reg:SF 21 xmm0 [621])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) com_line.cpp:46 129 {*movsf_internal}
     (nil))
(insn 163 162 164 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:125 D.6166 ] [125])
                (const_int 48 [0x30])) [0 _86->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [621])) com_line.cpp:46 129 {*movsf_internal}
     (nil))
(insn 164 163 165 4 (set (reg:SI 0 ax [622])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:47 90 {*movsi_internal}
     (nil))
(insn 165 164 166 4 (set (reg:DI 1 dx [orig:126 D.6165 ] [126])
        (sign_extend:DI (reg:SI 0 ax [622]))) com_line.cpp:47 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 4 (set (reg:DI 0 ax [623])
        (reg:DI 1 dx [orig:126 D.6165 ] [126])) com_line.cpp:47 89 {*movdi_internal}
     (nil))
(insn 167 166 168 4 (parallel [
            (set (reg:DI 0 ax [623])
                (ashift:DI (reg:DI 0 ax [623])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:47 512 {*ashldi3_1}
     (nil))
(insn 168 167 169 4 (parallel [
            (set (reg:DI 0 ax [623])
                (plus:DI (reg:DI 0 ax [623])
                    (reg:DI 1 dx [orig:126 D.6165 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:47 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:126 D.6165 ] [126])
            (const_int 9 [0x9]))
        (nil)))
(insn 169 168 170 4 (parallel [
            (set (reg:DI 0 ax [624])
                (ashift:DI (reg:DI 0 ax [623])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:47 512 {*ashldi3_1}
     (nil))
(insn 170 169 171 4 (set (reg:DI 0 ax [623])
        (reg:DI 0 ax [624])) com_line.cpp:47 89 {*movdi_internal}
     (nil))
(insn 171 170 172 4 (set (reg:DI 1 dx [orig:127 D.6165 ] [127])
        (reg:DI 0 ax [623])) com_line.cpp:47 89 {*movdi_internal}
     (nil))
(insn 172 171 173 4 (set (reg/f:DI 0 ax [625])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:47 89 {*movdi_internal}
     (nil))
(insn 173 172 174 4 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.6166 ] [128])
                (plus:DI (reg/f:DI 0 ax [625])
                    (reg:DI 1 dx [orig:127 D.6165 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:47 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.6165 ] [127]))
        (nil)))
(insn 174 173 175 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:128 D.6166 ] [128])
                (const_int 52 [0x34])) [0 _90->pre_quecc_if+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:47 90 {*movsi_internal}
     (nil))
(insn 175 174 176 4 (set (reg:SI 0 ax [626])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:48 90 {*movsi_internal}
     (nil))
(insn 176 175 177 4 (set (reg:DI 1 dx [orig:129 D.6165 ] [129])
        (sign_extend:DI (reg:SI 0 ax [626]))) com_line.cpp:48 142 {*extendsidi2_rex64}
     (nil))
(insn 177 176 178 4 (set (reg:DI 0 ax [627])
        (reg:DI 1 dx [orig:129 D.6165 ] [129])) com_line.cpp:48 89 {*movdi_internal}
     (nil))
(insn 178 177 179 4 (parallel [
            (set (reg:DI 0 ax [627])
                (ashift:DI (reg:DI 0 ax [627])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:48 512 {*ashldi3_1}
     (nil))
(insn 179 178 180 4 (parallel [
            (set (reg:DI 0 ax [627])
                (plus:DI (reg:DI 0 ax [627])
                    (reg:DI 1 dx [orig:129 D.6165 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:48 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:129 D.6165 ] [129])
            (const_int 9 [0x9]))
        (nil)))
(insn 180 179 181 4 (parallel [
            (set (reg:DI 0 ax [628])
                (ashift:DI (reg:DI 0 ax [627])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:48 512 {*ashldi3_1}
     (nil))
(insn 181 180 182 4 (set (reg:DI 0 ax [627])
        (reg:DI 0 ax [628])) com_line.cpp:48 89 {*movdi_internal}
     (nil))
(insn 182 181 183 4 (set (reg:DI 1 dx [orig:130 D.6165 ] [130])
        (reg:DI 0 ax [627])) com_line.cpp:48 89 {*movdi_internal}
     (nil))
(insn 183 182 184 4 (set (reg/f:DI 0 ax [629])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:48 89 {*movdi_internal}
     (nil))
(insn 184 183 185 4 (parallel [
            (set (reg/f:DI 0 ax [orig:131 D.6166 ] [131])
                (plus:DI (reg/f:DI 0 ax [629])
                    (reg:DI 1 dx [orig:130 D.6165 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:48 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:130 D.6165 ] [130]))
        (nil)))
(insn 185 184 186 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:131 D.6166 ] [131])
                (const_int 56 [0x38])) [0 _94->input_file_type+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:48 90 {*movsi_internal}
     (nil))
(insn 186 185 187 4 (set (reg:SI 0 ax [630])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:49 90 {*movsi_internal}
     (nil))
(insn 187 186 188 4 (set (reg:DI 1 dx [orig:132 D.6165 ] [132])
        (sign_extend:DI (reg:SI 0 ax [630]))) com_line.cpp:49 142 {*extendsidi2_rex64}
     (nil))
(insn 188 187 189 4 (set (reg:DI 0 ax [631])
        (reg:DI 1 dx [orig:132 D.6165 ] [132])) com_line.cpp:49 89 {*movdi_internal}
     (nil))
(insn 189 188 190 4 (parallel [
            (set (reg:DI 0 ax [631])
                (ashift:DI (reg:DI 0 ax [631])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:49 512 {*ashldi3_1}
     (nil))
(insn 190 189 191 4 (parallel [
            (set (reg:DI 0 ax [631])
                (plus:DI (reg:DI 0 ax [631])
                    (reg:DI 1 dx [orig:132 D.6165 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:49 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:132 D.6165 ] [132])
            (const_int 9 [0x9]))
        (nil)))
(insn 191 190 192 4 (parallel [
            (set (reg:DI 0 ax [632])
                (ashift:DI (reg:DI 0 ax [631])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:49 512 {*ashldi3_1}
     (nil))
(insn 192 191 193 4 (set (reg:DI 0 ax [631])
        (reg:DI 0 ax [632])) com_line.cpp:49 89 {*movdi_internal}
     (nil))
(insn 193 192 194 4 (set (reg:DI 1 dx [orig:133 D.6165 ] [133])
        (reg:DI 0 ax [631])) com_line.cpp:49 89 {*movdi_internal}
     (nil))
(insn 194 193 195 4 (set (reg/f:DI 0 ax [633])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:49 89 {*movdi_internal}
     (nil))
(insn 195 194 196 4 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6166 ] [134])
                (plus:DI (reg/f:DI 0 ax [633])
                    (reg:DI 1 dx [orig:133 D.6165 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:49 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.6165 ] [133]))
        (nil)))
(insn 196 195 197 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:134 D.6166 ] [134])
                (const_int 60 [0x3c])) [0 _98->ref_file_argument+0 S4 A32])
        (const_int 5 [0x5])) com_line.cpp:49 90 {*movsi_internal}
     (nil))
(insn 197 196 198 4 (set (reg:SI 0 ax [634])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:50 90 {*movsi_internal}
     (nil))
(insn 198 197 199 4 (set (reg:DI 1 dx [orig:135 D.6165 ] [135])
        (sign_extend:DI (reg:SI 0 ax [634]))) com_line.cpp:50 142 {*extendsidi2_rex64}
     (nil))
(insn 199 198 200 4 (set (reg:DI 0 ax [635])
        (reg:DI 1 dx [orig:135 D.6165 ] [135])) com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 200 199 201 4 (parallel [
            (set (reg:DI 0 ax [635])
                (ashift:DI (reg:DI 0 ax [635])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:50 512 {*ashldi3_1}
     (nil))
(insn 201 200 202 4 (parallel [
            (set (reg:DI 0 ax [635])
                (plus:DI (reg:DI 0 ax [635])
                    (reg:DI 1 dx [orig:135 D.6165 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:50 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:135 D.6165 ] [135])
            (const_int 9 [0x9]))
        (nil)))
(insn 202 201 203 4 (parallel [
            (set (reg:DI 0 ax [636])
                (ashift:DI (reg:DI 0 ax [635])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:50 512 {*ashldi3_1}
     (nil))
(insn 203 202 204 4 (set (reg:DI 0 ax [635])
        (reg:DI 0 ax [636])) com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 204 203 205 4 (set (reg:DI 1 dx [orig:136 D.6165 ] [136])
        (reg:DI 0 ax [635])) com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 205 204 206 4 (set (reg/f:DI 0 ax [637])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 206 205 207 4 (parallel [
            (set (reg/f:DI 0 ax [orig:137 D.6166 ] [137])
                (plus:DI (reg/f:DI 0 ax [637])
                    (reg:DI 1 dx [orig:136 D.6165 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:50 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:136 D.6165 ] [136]))
        (nil)))
(insn 207 206 208 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:137 D.6166 ] [137])
                (const_int 64 [0x40])) [0 _102->csi_reorder+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:50 90 {*movsi_internal}
     (nil))
(insn 208 207 209 4 (set (reg:SI 0 ax [638])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:51 90 {*movsi_internal}
     (nil))
(insn 209 208 210 4 (set (reg:DI 1 dx [orig:138 D.6165 ] [138])
        (sign_extend:DI (reg:SI 0 ax [638]))) com_line.cpp:51 142 {*extendsidi2_rex64}
     (nil))
(insn 210 209 211 4 (set (reg:DI 0 ax [639])
        (reg:DI 1 dx [orig:138 D.6165 ] [138])) com_line.cpp:51 89 {*movdi_internal}
     (nil))
(insn 211 210 212 4 (parallel [
            (set (reg:DI 0 ax [639])
                (ashift:DI (reg:DI 0 ax [639])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:51 512 {*ashldi3_1}
     (nil))
(insn 212 211 213 4 (parallel [
            (set (reg:DI 0 ax [639])
                (plus:DI (reg:DI 0 ax [639])
                    (reg:DI 1 dx [orig:138 D.6165 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:51 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:138 D.6165 ] [138])
            (const_int 9 [0x9]))
        (nil)))
(insn 213 212 214 4 (parallel [
            (set (reg:DI 0 ax [640])
                (ashift:DI (reg:DI 0 ax [639])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:51 512 {*ashldi3_1}
     (nil))
(insn 214 213 215 4 (set (reg:DI 0 ax [639])
        (reg:DI 0 ax [640])) com_line.cpp:51 89 {*movdi_internal}
     (nil))
(insn 215 214 216 4 (set (reg:DI 1 dx [orig:139 D.6165 ] [139])
        (reg:DI 0 ax [639])) com_line.cpp:51 89 {*movdi_internal}
     (nil))
(insn 216 215 217 4 (set (reg/f:DI 0 ax [641])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:51 89 {*movdi_internal}
     (nil))
(insn 217 216 218 4 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.6166 ] [140])
                (plus:DI (reg/f:DI 0 ax [641])
                    (reg:DI 1 dx [orig:139 D.6165 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:51 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.6165 ] [139]))
        (nil)))
(insn 218 217 219 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:140 D.6166 ] [140])
                (const_int 68 [0x44])) [0 _106->tilt+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:51 90 {*movsi_internal}
     (nil))
(insn 219 218 1907 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:33 217 {*addsi_1}
     (nil))
(jump_insn 1907 219 1908 4 (set (pc)
        (label_ref 220)) com_line.cpp:33 654 {jump}
     (nil)
 -> 220)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1908 1907 223)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 141 142 143 642
(code_label 223 1908 224 5 2 "" [1 uses])
(note 224 223 225 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 226 5 (set (reg/f:DI 0 ax [642])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:54 89 {*movdi_internal}
     (nil))
(insn 226 225 227 5 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.6167 ] [141])
                (plus:DI (reg/f:DI 0 ax [642])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:54 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 227 226 228 5 (set (reg/f:DI 0 ax [orig:142 D.6168 ] [142])
        (mem/f:DI (reg/f:DI 0 ax [orig:141 D.6167 ] [141]) [0 *_110+0 S8 A64])) com_line.cpp:54 89 {*movdi_internal}
     (nil))
(insn 228 227 229 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fbe13120e10 *.LC2>)) com_line.cpp:54 89 {*movdi_internal}
     (nil))
(insn 229 228 230 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:142 D.6168 ] [142])) com_line.cpp:54 89 {*movdi_internal}
     (nil))
(call_insn/i 230 229 231 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:54 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 231 230 232 5 (set (reg:SI 0 ax [orig:143 D.6169 ] [143])
        (reg:SI 0 ax)) com_line.cpp:54 90 {*movsi_internal}
     (nil))
(insn 232 231 233 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:143 D.6169 ] [143])
            (const_int 0 [0]))) com_line.cpp:54 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 233 232 234 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 237)
            (pc))) com_line.cpp:54 612 {*jcc_1}
     (nil)
 -> 237)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 643
(note 234 233 235 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 236 6 (set (reg/f:DI 0 ax [643])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:55 89 {*movdi_internal}
     (nil))
(insn 236 235 237 6 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [643])
                (const_int 56 [0x38])) [0 preprocess_37(D)->input_file_type+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:55 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 144 145 146 644
(code_label 237 236 238 7 4 "" [1 uses])
(note 238 237 239 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 240 7 (set (reg/f:DI 0 ax [644])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:58 89 {*movdi_internal}
     (nil))
(insn 240 239 241 7 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.6167 ] [144])
                (plus:DI (reg/f:DI 0 ax [644])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:58 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 241 240 242 7 (set (reg/f:DI 0 ax [orig:145 D.6168 ] [145])
        (mem/f:DI (reg/f:DI 0 ax [orig:144 D.6167 ] [144]) [0 *_114+0 S8 A64])) com_line.cpp:58 89 {*movdi_internal}
     (nil))
(insn 242 241 243 7 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fbe13120ea0 *.LC3>)) com_line.cpp:58 89 {*movdi_internal}
     (nil))
(insn 243 242 244 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:145 D.6168 ] [145])) com_line.cpp:58 89 {*movdi_internal}
     (nil))
(call_insn/i 244 243 245 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:58 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 245 244 246 7 (set (reg:SI 0 ax [orig:146 D.6169 ] [146])
        (reg:SI 0 ax)) com_line.cpp:58 90 {*movsi_internal}
     (nil))
(insn 246 245 247 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:146 D.6169 ] [146])
            (const_int 0 [0]))) com_line.cpp:58 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 247 246 248 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 251)
            (pc))) com_line.cpp:58 612 {*jcc_1}
     (nil)
 -> 251)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 645
(note 248 247 249 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 249 248 250 8 (set (reg/f:DI 0 ax [645])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:59 89 {*movdi_internal}
     (nil))
(insn 250 249 251 8 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [645])
                (const_int 56 [0x38])) [0 preprocess_37(D)->input_file_type+0 S4 A32])
        (const_int 2 [0x2])) com_line.cpp:59 90 {*movsi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 147 148 149 646
(code_label 251 250 252 9 5 "" [1 uses])
(note 252 251 253 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 9 (set (reg/f:DI 0 ax [646])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:62 89 {*movdi_internal}
     (nil))
(insn 254 253 255 9 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.6167 ] [147])
                (plus:DI (reg/f:DI 0 ax [646])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:62 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 255 254 256 9 (set (reg/f:DI 0 ax [orig:148 D.6168 ] [148])
        (mem/f:DI (reg/f:DI 0 ax [orig:147 D.6167 ] [147]) [0 *_118+0 S8 A64])) com_line.cpp:62 89 {*movdi_internal}
     (nil))
(insn 256 255 257 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fbe13120f30 *.LC4>)) com_line.cpp:62 89 {*movdi_internal}
     (nil))
(insn 257 256 258 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:148 D.6168 ] [148])) com_line.cpp:62 89 {*movdi_internal}
     (nil))
(call_insn/i 258 257 259 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:62 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 259 258 260 9 (set (reg:SI 0 ax [orig:149 D.6169 ] [149])
        (reg:SI 0 ax)) com_line.cpp:62 90 {*movsi_internal}
     (nil))
(insn 260 259 261 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:149 D.6169 ] [149])
            (const_int 0 [0]))) com_line.cpp:62 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 261 260 262 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 274)
            (pc))) com_line.cpp:62 612 {*jcc_1}
     (nil)
 -> 274)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 152 647 648 649 650
(note 262 261 263 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 263 262 264 10 (set (reg:SI 0 ax [647])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:63 90 {*movsi_internal}
     (nil))
(insn 264 263 265 10 (set (reg:DI 1 dx [orig:150 D.6165 ] [150])
        (sign_extend:DI (reg:SI 0 ax [647]))) com_line.cpp:63 142 {*extendsidi2_rex64}
     (nil))
(insn 265 264 266 10 (set (reg:DI 0 ax [648])
        (reg:DI 1 dx [orig:150 D.6165 ] [150])) com_line.cpp:63 89 {*movdi_internal}
     (nil))
(insn 266 265 267 10 (parallel [
            (set (reg:DI 0 ax [648])
                (ashift:DI (reg:DI 0 ax [648])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:63 512 {*ashldi3_1}
     (nil))
(insn 267 266 268 10 (parallel [
            (set (reg:DI 0 ax [648])
                (plus:DI (reg:DI 0 ax [648])
                    (reg:DI 1 dx [orig:150 D.6165 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:63 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:150 D.6165 ] [150])
            (const_int 9 [0x9]))
        (nil)))
(insn 268 267 269 10 (parallel [
            (set (reg:DI 0 ax [649])
                (ashift:DI (reg:DI 0 ax [648])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:63 512 {*ashldi3_1}
     (nil))
(insn 269 268 270 10 (set (reg:DI 0 ax [648])
        (reg:DI 0 ax [649])) com_line.cpp:63 89 {*movdi_internal}
     (nil))
(insn 270 269 271 10 (set (reg:DI 1 dx [orig:151 D.6165 ] [151])
        (reg:DI 0 ax [648])) com_line.cpp:63 89 {*movdi_internal}
     (nil))
(insn 271 270 272 10 (set (reg/f:DI 0 ax [650])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:63 89 {*movdi_internal}
     (nil))
(insn 272 271 273 10 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.6166 ] [152])
                (plus:DI (reg/f:DI 0 ax [650])
                    (reg:DI 1 dx [orig:151 D.6165 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:63 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.6165 ] [151]))
        (nil)))
(insn 273 272 274 10 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:152 D.6166 ] [152])
                (const_int 64 [0x40])) [0 _123->csi_reorder+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:63 90 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 153 154 155 156 157 158 159 160 651 652 653 654 655
(code_label 274 273 275 11 6 "" [1 uses])
(note 275 274 276 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 11 (set (reg/f:DI 0 ax [651])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:66 89 {*movdi_internal}
     (nil))
(insn 277 276 278 11 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.6167 ] [153])
                (plus:DI (reg/f:DI 0 ax [651])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:66 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 278 277 279 11 (set (reg/f:DI 1 dx [orig:154 D.6168 ] [154])
        (mem/f:DI (reg/f:DI 0 ax [orig:153 D.6167 ] [153]) [0 *_125+0 S8 A64])) com_line.cpp:66 89 {*movdi_internal}
     (nil))
(insn 279 278 280 11 (set (reg/f:DI 0 ax [orig:155 D.6170 ] [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:66 89 {*movdi_internal}
     (nil))
(insn 280 279 281 11 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:154 D.6168 ] [154])) com_line.cpp:66 89 {*movdi_internal}
     (nil))
(insn 281 280 282 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:155 D.6170 ] [155])) com_line.cpp:66 89 {*movdi_internal}
     (nil))
(call_insn 282 281 283 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:66 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 283 282 284 11 (set (reg/f:DI 0 ax [652])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:67 89 {*movdi_internal}
     (nil))
(insn 284 283 285 11 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.6167 ] [156])
                (plus:DI (reg/f:DI 0 ax [652])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:67 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 285 284 286 11 (set (reg/f:DI 0 ax [orig:157 D.6168 ] [157])
        (mem/f:DI (reg/f:DI 0 ax [orig:156 D.6167 ] [156]) [0 *_130+0 S8 A64])) com_line.cpp:67 89 {*movdi_internal}
     (nil))
(insn 286 285 287 11 (set (reg/f:DI 1 dx [653])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5080 [0xffffffffffffec28])) [0 procpar_info+0 S8 A64])) com_line.cpp:67 89 {*movdi_internal}
     (nil))
(insn 287 286 288 11 (parallel [
            (set (reg/f:DI 1 dx [orig:158 D.6170 ] [158])
                (plus:DI (reg/f:DI 1 dx [653])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:67 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5064 [0xffffffffffffec38])) [0 procpar_info+0 S8 A64])
            (const_int 34 [0x22]))
        (nil)))
(insn 288 287 289 11 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:157 D.6168 ] [157])) com_line.cpp:67 89 {*movdi_internal}
     (nil))
(insn 289 288 290 11 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:158 D.6170 ] [158])) com_line.cpp:67 89 {*movdi_internal}
     (nil))
(call_insn 290 289 291 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:67 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 291 290 292 11 (set (reg/f:DI 1 dx [orig:159 D.6170 ] [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 292 291 293 11 (parallel [
            (set (reg:DI 0 ax [654])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -5024 [0xffffffffffffec60])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:72 218 {*adddi_1}
     (nil))
(insn 293 292 294 11 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:159 D.6170 ] [159])) com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 294 293 295 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [654])) com_line.cpp:72 89 {*movdi_internal}
     (nil))
(call_insn 295 294 296 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:72 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 296 295 297 11 (set (reg/f:DI 0 ax [655])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 297 296 298 11 (set (reg:SI 0 ax [orig:160 D.6169 ] [160])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [655])
                (const_int 56 [0x38])) [0 preprocess_37(D)->input_file_type+0 S4 A32])) com_line.cpp:76 90 {*movsi_internal}
     (nil))
(insn 298 297 299 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:160 D.6169 ] [160])
            (const_int 0 [0]))) com_line.cpp:76 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 299 298 300 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 312)
            (pc))) com_line.cpp:76 612 {*jcc_1}
     (nil)
 -> 312)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 161 162 163 656 657 658 659 660 661
(note 300 299 301 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 301 300 308 12 (set (reg/f:DI 1 dx [orig:161 D.6170 ] [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 308 301 302 12 (set (reg:DI 0 ax [656])
        (reg/f:DI 1 dx [orig:161 D.6170 ] [161])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 302 308 303 12 (set (reg:DI 2 cx [660])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 303 302 304 12 (set (reg:DI 4 si [659])
        (reg:DI 0 ax [656])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 304 303 2020 12 (set (reg:QI 0 ax [661])
        (const_int 0 [0])) com_line.cpp:76 93 {*movqi_internal}
     (nil))
(insn 2020 304 305 12 (set (reg:DI 5 di [659])
        (reg:DI 4 si [659])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 305 2020 2019 12 (parallel [
            (set (reg:DI 2 cx [657])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [659]) [0  A8])
                        (reg:QI 0 ax [661])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [657])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [659]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:76 945 {*strlenqi_1}
     (nil))
(insn 2019 305 306 12 (set (reg:DI 0 ax [657])
        (reg:DI 2 cx [657])) com_line.cpp:76 89 {*movdi_internal}
     (nil))
(insn 306 2019 307 12 (set (reg:DI 0 ax [658])
        (not:DI (reg:DI 0 ax [657]))) com_line.cpp:76 494 {*one_cmpldi2_1}
     (nil))
(insn 307 306 309 12 (parallel [
            (set (reg:DI 0 ax [orig:162 D.6165 ] [162])
                (plus:DI (reg:DI 0 ax [658])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:76 218 {*adddi_1}
     (nil))
(insn 309 307 310 12 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.6170 ] [163])
                (plus:DI (reg:DI 0 ax [orig:162 D.6165 ] [162])
                    (reg/f:DI 1 dx [orig:161 D.6170 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:76 218 {*adddi_1}
     (nil))
(insn 310 309 311 12 (set (mem:SI (reg/f:DI 0 ax [orig:163 D.6170 ] [163]) [0 MEM[(void *)_140]+0 S4 A8])
        (const_int 1684629039 [0x6469662f])) com_line.cpp:76 90 {*movsi_internal}
     (nil))
(insn 311 310 312 12 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:163 D.6170 ] [163])
                (const_int 4 [0x4])) [0 MEM[(void *)_140]+4 S1 A8])
        (const_int 0 [0])) com_line.cpp:76 93 {*movqi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 164 165
(code_label 312 311 313 13 7 "" [1 uses])
(note 313 312 314 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 314 313 315 13 (set (reg/f:DI 0 ax [orig:164 D.6170 ] [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 315 314 316 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fbe13120000 *.LC5>)) com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 316 315 317 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:164 D.6170 ] [164])) com_line.cpp:81 89 {*movdi_internal}
     (nil))
(call_insn 317 316 318 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fbe13372510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:81 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 318 317 319 13 (set (reg/f:DI 0 ax [orig:165 D.6171 ] [165])
        (reg:DI 0 ax)) com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 319 318 320 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:165 D.6171 ] [165])) com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 320 319 321 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:83 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 321 320 322 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 360)
            (pc))) com_line.cpp:83 612 {*jcc_1}
     (nil)
 -> 360)
;;  succ:       14 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 166 167 662 663
(note 322 321 323 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 323 322 324 14 (set (reg/f:DI 0 ax [orig:166 D.6170 ] [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 324 323 325 14 (parallel [
            (set (reg:DI 1 dx [662])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -5024 [0xffffffffffffec60])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:87 218 {*adddi_1}
     (nil))
(insn 325 324 326 14 (set (reg:DI 4 si)
        (reg:DI 1 dx [662])) com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 326 325 327 14 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:166 D.6170 ] [166])) com_line.cpp:87 89 {*movdi_internal}
     (nil))
(call_insn 327 326 328 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:87 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 328 327 329 14 (set (reg/f:DI 0 ax [663])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 329 328 330 14 (set (reg:SI 0 ax [orig:167 D.6169 ] [167])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [663])
                (const_int 56 [0x38])) [0 preprocess_37(D)->input_file_type+0 S4 A32])) com_line.cpp:89 90 {*movsi_internal}
     (nil))
(insn 330 329 331 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:167 D.6169 ] [167])
            (const_int 0 [0]))) com_line.cpp:89 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 331 330 332 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 344)
            (pc))) com_line.cpp:89 612 {*jcc_1}
     (nil)
 -> 344)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 168 169 170 664 665 666 667 668 669
(note 332 331 333 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 333 332 340 15 (set (reg/f:DI 1 dx [orig:168 D.6170 ] [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 340 333 334 15 (set (reg:DI 0 ax [664])
        (reg/f:DI 1 dx [orig:168 D.6170 ] [168])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 334 340 335 15 (set (reg:DI 2 cx [668])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 335 334 336 15 (set (reg:DI 4 si [667])
        (reg:DI 0 ax [664])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 336 335 2023 15 (set (reg:QI 0 ax [669])
        (const_int 0 [0])) com_line.cpp:89 93 {*movqi_internal}
     (nil))
(insn 2023 336 337 15 (set (reg:DI 5 di [667])
        (reg:DI 4 si [667])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 337 2023 2022 15 (parallel [
            (set (reg:DI 2 cx [665])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [667]) [0  A8])
                        (reg:QI 0 ax [669])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [665])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [667]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:89 945 {*strlenqi_1}
     (nil))
(insn 2022 337 338 15 (set (reg:DI 0 ax [665])
        (reg:DI 2 cx [665])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 338 2022 339 15 (set (reg:DI 0 ax [666])
        (not:DI (reg:DI 0 ax [665]))) com_line.cpp:89 494 {*one_cmpldi2_1}
     (nil))
(insn 339 338 341 15 (parallel [
            (set (reg:DI 0 ax [orig:169 D.6165 ] [169])
                (plus:DI (reg:DI 0 ax [666])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:89 218 {*adddi_1}
     (nil))
(insn 341 339 342 15 (parallel [
            (set (reg/f:DI 0 ax [orig:170 D.6170 ] [170])
                (plus:DI (reg:DI 0 ax [orig:169 D.6165 ] [169])
                    (reg/f:DI 1 dx [orig:168 D.6170 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:89 218 {*adddi_1}
     (nil))
(insn 342 341 2024 15 (set (reg:DI 3 bx [1010])
        (const_int 8392585648206865967 [0x7478742e6469662f])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 2024 342 343 15 (set (mem:DI (reg/f:DI 0 ax [orig:170 D.6170 ] [170]) [0 MEM[(void *)_151]+0 S8 A8])
        (reg:DI 3 bx [1010])) com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 343 2024 344 15 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:170 D.6170 ] [170])
                (const_int 8 [0x8])) [0 MEM[(void *)_151]+8 S1 A8])
        (const_int 0 [0])) com_line.cpp:89 93 {*movqi_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 171 172
(code_label 344 343 345 16 9 "" [1 uses])
(note 345 344 346 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 346 345 347 16 (set (reg/f:DI 0 ax [orig:171 D.6170 ] [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 347 346 348 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fbe13120000 *.LC5>)) com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 348 347 349 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:171 D.6170 ] [171])) com_line.cpp:91 89 {*movdi_internal}
     (nil))
(call_insn 349 348 350 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fbe13372510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:91 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 350 349 351 16 (set (reg/f:DI 0 ax [orig:172 D.6171 ] [172])
        (reg:DI 0 ax)) com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 351 350 352 16 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:172 D.6171 ] [172])) com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 352 351 353 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:94 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 353 352 354 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 360)
            (pc))) com_line.cpp:94 612 {*jcc_1}
     (nil)
 -> 360)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 354 353 355 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 355 354 356 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fbe131201b0 *.LC6>)) com_line.cpp:96 89 {*movdi_internal}
     (nil))
(call_insn 356 355 357 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:96 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 357 356 358 17 (set (reg:SI 5 di)
        (const_int 3 [0x3])) com_line.cpp:98 90 {*movsi_internal}
     (nil))
(call_insn 358 357 359 17 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fbe135d0ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:98 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 359 358 360)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;;              16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 173 174 175 670 671 672
(code_label 360 359 361 18 8 "" [2 uses])
(note 361 360 362 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 362 361 363 18 (set (reg:DI 0 ax [670])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])) com_line.cpp:100 89 {*movdi_internal}
     (nil))
(insn 363 362 364 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [670])) com_line.cpp:100 89 {*movdi_internal}
     (nil))
(call_insn 364 363 365 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fbe133721b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) com_line.cpp:100 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 365 364 366 18 (set (reg/f:DI 0 ax [671])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:102 89 {*movdi_internal}
     (nil))
(insn 366 365 367 18 (parallel [
            (set (reg/f:DI 0 ax [orig:173 D.6167 ] [173])
                (plus:DI (reg/f:DI 0 ax [671])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:102 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 367 366 368 18 (set (reg/f:DI 0 ax [orig:174 D.6168 ] [174])
        (mem/f:DI (reg/f:DI 0 ax [orig:173 D.6167 ] [173]) [0 *_160+0 S8 A64])) com_line.cpp:102 89 {*movdi_internal}
     (nil))
(insn 368 367 369 18 (set (reg/f:DI 1 dx [672])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:102 89 {*movdi_internal}
     (nil))
(insn 369 368 370 18 (parallel [
            (set (reg/f:DI 1 dx [orig:175 D.6170 ] [175])
                (plus:DI (reg/f:DI 1 dx [672])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:102 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 370 369 371 18 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:174 D.6168 ] [174])) com_line.cpp:102 89 {*movdi_internal}
     (nil))
(insn 371 370 372 18 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:175 D.6170 ] [175])) com_line.cpp:102 89 {*movdi_internal}
     (nil))
(call_insn 372 371 373 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:102 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 373 372 563 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:105 90 {*movsi_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;;              35 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 673
(code_label 563 373 374 19 23 "" [1 uses])
(note 374 563 375 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 375 374 376 19 (set (reg:SI 0 ax [673])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:105 90 {*movsi_internal}
     (nil))
(insn 376 375 377 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [673])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5084 [0xffffffffffffec24])) [0 argc+0 S4 A32]))) com_line.cpp:105 7 {*cmpsi_1}
     (nil))
(jump_insn 377 376 378 19 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 566)
            (pc))) com_line.cpp:105 612 {*jcc_1}
     (nil)
 -> 566)
;;  succ:       36
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 176 177 178 179 180 674 675
(note 378 377 379 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 379 378 380 20 (set (reg:SI 0 ax [674])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 380 379 381 20 (set (reg:DI 0 ax [orig:176 D.6165 ] [176])
        (sign_extend:DI (reg:SI 0 ax [674]))) com_line.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 381 380 382 20 (parallel [
            (set (reg:DI 1 dx [orig:177 D.6165 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:176 D.6165 ] [176])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 512 {*ashldi3_1}
     (nil))
(insn 382 381 383 20 (set (reg/f:DI 0 ax [675])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 383 382 384 20 (parallel [
            (set (reg/f:DI 0 ax [orig:178 D.6167 ] [178])
                (plus:DI (reg/f:DI 0 ax [675])
                    (reg:DI 1 dx [orig:177 D.6165 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.6165 ] [177]))
        (nil)))
(insn 384 383 385 20 (set (reg/f:DI 0 ax [orig:179 D.6168 ] [179])
        (mem/f:DI (reg/f:DI 0 ax [orig:178 D.6167 ] [178]) [0 *_169+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 385 384 386 20 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fbe131202d0 *.LC7>)) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 386 385 387 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:179 D.6168 ] [179])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn/i 387 386 388 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:106 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 388 387 389 20 (set (reg:SI 0 ax [orig:180 D.6169 ] [180])
        (reg:SI 0 ax)) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 389 388 390 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:180 D.6169 ] [180])
            (const_int 0 [0]))) com_line.cpp:106 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 390 389 391 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 417)
            (pc))) com_line.cpp:106 612 {*jcc_1}
     (nil)
 -> 417)
;;  succ:       23
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 181 182 183 184 185 676 677
(note 391 390 392 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 392 391 393 21 (set (reg:SI 0 ax [676])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 393 392 394 21 (set (reg:DI 0 ax [orig:181 D.6165 ] [181])
        (sign_extend:DI (reg:SI 0 ax [676]))) com_line.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 394 393 395 21 (parallel [
            (set (reg:DI 1 dx [orig:182 D.6165 ] [182])
                (ashift:DI (reg:DI 0 ax [orig:181 D.6165 ] [181])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 512 {*ashldi3_1}
     (nil))
(insn 395 394 396 21 (set (reg/f:DI 0 ax [677])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 396 395 397 21 (parallel [
            (set (reg/f:DI 0 ax [orig:183 D.6167 ] [183])
                (plus:DI (reg/f:DI 0 ax [677])
                    (reg:DI 1 dx [orig:182 D.6165 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:182 D.6165 ] [182]))
        (nil)))
(insn 397 396 398 21 (set (reg/f:DI 0 ax [orig:184 D.6168 ] [184])
        (mem/f:DI (reg/f:DI 0 ax [orig:183 D.6167 ] [183]) [0 *_174+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 398 397 399 21 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fbe131203f0 *.LC8>)) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 399 398 400 21 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:184 D.6168 ] [184])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn/i 400 399 401 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:106 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 401 400 402 21 (set (reg:SI 0 ax [orig:185 D.6169 ] [185])
        (reg:SI 0 ax)) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 402 401 403 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:185 D.6169 ] [185])
            (const_int 0 [0]))) com_line.cpp:106 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 403 402 404 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 417)
            (pc))) com_line.cpp:106 612 {*jcc_1}
     (nil)
 -> 417)
;;  succ:       23
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 186 187 188 189 190 678 679
(note 404 403 405 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 405 404 406 22 (set (reg:SI 0 ax [678])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 406 405 407 22 (set (reg:DI 0 ax [orig:186 D.6165 ] [186])
        (sign_extend:DI (reg:SI 0 ax [678]))) com_line.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 407 406 408 22 (parallel [
            (set (reg:DI 1 dx [orig:187 D.6165 ] [187])
                (ashift:DI (reg:DI 0 ax [orig:186 D.6165 ] [186])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 512 {*ashldi3_1}
     (nil))
(insn 408 407 409 22 (set (reg/f:DI 0 ax [679])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 409 408 410 22 (parallel [
            (set (reg/f:DI 0 ax [orig:188 D.6167 ] [188])
                (plus:DI (reg/f:DI 0 ax [679])
                    (reg:DI 1 dx [orig:187 D.6165 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:106 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:187 D.6165 ] [187]))
        (nil)))
(insn 410 409 411 22 (set (reg/f:DI 0 ax [orig:189 D.6168 ] [189])
        (mem/f:DI (reg/f:DI 0 ax [orig:188 D.6167 ] [188]) [0 *_179+0 S8 A64])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 411 410 412 22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fbe13155000 *.LC9>)) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(insn 412 411 413 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:189 D.6168 ] [189])) com_line.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn/i 413 412 414 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:106 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 414 413 415 22 (set (reg:SI 0 ax [orig:190 D.6169 ] [190])
        (reg:SI 0 ax)) com_line.cpp:106 90 {*movsi_internal}
     (nil))
(insn 415 414 416 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:190 D.6169 ] [190])
            (const_int 0 [0]))) com_line.cpp:106 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 416 415 417 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 560)
            (pc))) com_line.cpp:106 612 {*jcc_1}
     (nil)
 -> 560)
;;  succ:       23 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;;              21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 680
(code_label 417 416 418 23 11 "" [2 uses])
(note 418 417 419 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 419 418 420 23 (set (reg:SI 0 ax [orig:680 found_extension ] [680])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5044 [0xffffffffffffec4c])) [0 found_extension+0 S4 A32])) com_line.cpp:110 90 {*movsi_internal}
     (nil))
(insn 420 419 421 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:680 found_extension ] [680])
            (const_int 0 [0]))) com_line.cpp:110 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 421 420 425 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 534)
            (pc))) com_line.cpp:110 612 {*jcc_1}
     (nil)
 -> 534)
;;  succ:       24 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 191 681 682
(note 425 421 426 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 426 425 427 24 (set (reg/f:DI 0 ax [681])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:112 89 {*movdi_internal}
     (nil))
(insn 427 426 428 24 (parallel [
            (set (reg/f:DI 0 ax [orig:191 D.6170 ] [191])
                (plus:DI (reg/f:DI 0 ax [681])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:112 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 428 427 429 24 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fbe13155090 *.LC10>)) com_line.cpp:112 89 {*movdi_internal}
     (nil))
(insn 429 428 430 24 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:191 D.6170 ] [191])) com_line.cpp:112 89 {*movdi_internal}
     (nil))
(call_insn/i 430 429 431 24 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:112 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 431 430 432 24 (set (reg:DI 0 ax [682])
        (reg:DI 0 ax)) com_line.cpp:112 89 {*movdi_internal}
     (nil))
(insn 432 431 433 24 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [682])) com_line.cpp:112 89 {*movdi_internal}
     (nil))
(insn 433 432 434 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:113 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 434 433 439 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1950)
            (pc))) com_line.cpp:113 612 {*jcc_1}
     (nil)
 -> 1950)
;;  succ:       112
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 192 683 684
(note 439 434 440 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 440 439 441 25 (set (reg/f:DI 0 ax [683])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:114 89 {*movdi_internal}
     (nil))
(insn 441 440 442 25 (parallel [
            (set (reg/f:DI 0 ax [orig:192 D.6170 ] [192])
                (plus:DI (reg/f:DI 0 ax [683])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:114 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 442 441 443 25 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fbe13155120 *.LC11>)) com_line.cpp:114 89 {*movdi_internal}
     (nil))
(insn 443 442 444 25 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:192 D.6170 ] [192])) com_line.cpp:114 89 {*movdi_internal}
     (nil))
(call_insn/i 444 443 445 25 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:114 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 445 444 446 25 (set (reg:DI 0 ax [684])
        (reg:DI 0 ax)) com_line.cpp:114 89 {*movdi_internal}
     (nil))
(insn 446 445 447 25 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [684])) com_line.cpp:114 89 {*movdi_internal}
     (nil))
(insn 447 446 448 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:115 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 448 447 453 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1955)
            (pc))) com_line.cpp:115 612 {*jcc_1}
     (nil)
 -> 1955)
;;  succ:       113
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 193 685 686
(note 453 448 454 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 454 453 455 26 (set (reg/f:DI 0 ax [685])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:116 89 {*movdi_internal}
     (nil))
(insn 455 454 456 26 (parallel [
            (set (reg/f:DI 0 ax [orig:193 D.6170 ] [193])
                (plus:DI (reg/f:DI 0 ax [685])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:116 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 456 455 457 26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fbe131551b0 *.LC12>)) com_line.cpp:116 89 {*movdi_internal}
     (nil))
(insn 457 456 458 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:193 D.6170 ] [193])) com_line.cpp:116 89 {*movdi_internal}
     (nil))
(call_insn/i 458 457 459 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:116 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 459 458 460 26 (set (reg:DI 0 ax [686])
        (reg:DI 0 ax)) com_line.cpp:116 89 {*movdi_internal}
     (nil))
(insn 460 459 461 26 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [686])) com_line.cpp:116 89 {*movdi_internal}
     (nil))
(insn 461 460 462 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:117 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 462 461 467 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1960)
            (pc))) com_line.cpp:117 612 {*jcc_1}
     (nil)
 -> 1960)
;;  succ:       114
;;              27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 194 687 688
(note 467 462 468 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 468 467 469 27 (set (reg/f:DI 0 ax [687])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 469 468 470 27 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.6170 ] [194])
                (plus:DI (reg/f:DI 0 ax [687])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:118 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 470 469 471 27 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fbe13155240 *.LC13>)) com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 471 470 472 27 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:194 D.6170 ] [194])) com_line.cpp:118 89 {*movdi_internal}
     (nil))
(call_insn/i 472 471 473 27 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:118 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 473 472 474 27 (set (reg:DI 0 ax [688])
        (reg:DI 0 ax)) com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 474 473 475 27 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [688])) com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 475 474 476 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:119 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 476 475 481 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1965)
            (pc))) com_line.cpp:119 612 {*jcc_1}
     (nil)
 -> 1965)
;;  succ:       115
;;              28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 195 689 690
(note 481 476 482 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 482 481 483 28 (set (reg/f:DI 0 ax [689])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:120 89 {*movdi_internal}
     (nil))
(insn 483 482 484 28 (parallel [
            (set (reg/f:DI 0 ax [orig:195 D.6170 ] [195])
                (plus:DI (reg/f:DI 0 ax [689])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:120 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 484 483 485 28 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7fbe131552d0 *.LC14>)) com_line.cpp:120 89 {*movdi_internal}
     (nil))
(insn 485 484 486 28 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:195 D.6170 ] [195])) com_line.cpp:120 89 {*movdi_internal}
     (nil))
(call_insn/i 486 485 487 28 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:120 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 487 486 488 28 (set (reg:DI 0 ax [690])
        (reg:DI 0 ax)) com_line.cpp:120 89 {*movdi_internal}
     (nil))
(insn 488 487 489 28 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [690])) com_line.cpp:120 89 {*movdi_internal}
     (nil))
(insn 489 488 490 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:121 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 490 489 495 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1970)
            (pc))) com_line.cpp:121 612 {*jcc_1}
     (nil)
 -> 1970)
;;  succ:       116
;;              29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 196 691 692
(note 495 490 496 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 496 495 497 29 (set (reg/f:DI 0 ax [691])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:122 89 {*movdi_internal}
     (nil))
(insn 497 496 498 29 (parallel [
            (set (reg/f:DI 0 ax [orig:196 D.6170 ] [196])
                (plus:DI (reg/f:DI 0 ax [691])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:122 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 498 497 499 29 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7fbe13155360 *.LC15>)) com_line.cpp:122 89 {*movdi_internal}
     (nil))
(insn 499 498 500 29 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:196 D.6170 ] [196])) com_line.cpp:122 89 {*movdi_internal}
     (nil))
(call_insn/i 500 499 501 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:122 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 501 500 502 29 (set (reg:DI 0 ax [692])
        (reg:DI 0 ax)) com_line.cpp:122 89 {*movdi_internal}
     (nil))
(insn 502 501 503 29 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [692])) com_line.cpp:122 89 {*movdi_internal}
     (nil))
(insn 503 502 504 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:123 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 504 503 509 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1975)
            (pc))) com_line.cpp:123 612 {*jcc_1}
     (nil)
 -> 1975)
;;  succ:       117
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 197 693 694
(note 509 504 510 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 510 509 511 30 (set (reg/f:DI 0 ax [693])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:124 89 {*movdi_internal}
     (nil))
(insn 511 510 512 30 (parallel [
            (set (reg/f:DI 0 ax [orig:197 D.6170 ] [197])
                (plus:DI (reg/f:DI 0 ax [693])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:124 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 512 511 513 30 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fbe131553f0 *.LC16>)) com_line.cpp:124 89 {*movdi_internal}
     (nil))
(insn 513 512 514 30 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:197 D.6170 ] [197])) com_line.cpp:124 89 {*movdi_internal}
     (nil))
(call_insn/i 514 513 515 30 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:124 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 515 514 516 30 (set (reg:DI 0 ax [694])
        (reg:DI 0 ax)) com_line.cpp:124 89 {*movdi_internal}
     (nil))
(insn 516 515 517 30 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [694])) com_line.cpp:124 89 {*movdi_internal}
     (nil))
(insn 517 516 518 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:125 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 518 517 523 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1980)
            (pc))) com_line.cpp:125 612 {*jcc_1}
     (nil)
 -> 1980)
;;  succ:       118
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 112, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 198 695 696
(note 523 518 524 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 524 523 525 31 (set (reg/f:DI 0 ax [695])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:126 89 {*movdi_internal}
     (nil))
(insn 525 524 526 31 (parallel [
            (set (reg/f:DI 0 ax [orig:198 D.6170 ] [198])
                (plus:DI (reg/f:DI 0 ax [695])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:126 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 526 525 527 31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7fbe13155480 *.LC17>)) com_line.cpp:126 89 {*movdi_internal}
     (nil))
(insn 527 526 528 31 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:198 D.6170 ] [198])) com_line.cpp:126 89 {*movdi_internal}
     (nil))
(call_insn/i 528 527 529 31 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:126 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 529 528 530 31 (set (reg:DI 0 ax [696])
        (reg:DI 0 ax)) com_line.cpp:126 89 {*movdi_internal}
     (nil))
(insn 530 529 531 31 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [696])) com_line.cpp:126 89 {*movdi_internal}
     (nil))
(insn 531 530 1947 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:127 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1947 531 1948 31 (set (pc)
        (label_ref 534)) 654 {jump}
     (nil)
 -> 534)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1948 1947 1950)
;; basic block 112, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 113, flags: (NEW, RTL, MODIFIED)
;;  pred:       24
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1950 1948 1949 112 68 "" [1 uses])
(note 1949 1950 1951 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(insn 1951 1949 1952 112 (const_int 0 [0]) com_line.cpp:113 684 {nop}
     (nil))
(jump_insn 1952 1951 1953 112 (set (pc)
        (label_ref 534)) 654 {jump}
     (nil)
 -> 534)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1953 1952 1955)
;; basic block 113, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 112, next block 114, flags: (NEW, RTL, MODIFIED)
;;  pred:       25
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1955 1953 1954 113 69 "" [1 uses])
(note 1954 1955 1956 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn 1956 1954 1957 113 (const_int 0 [0]) com_line.cpp:115 684 {nop}
     (nil))
(jump_insn 1957 1956 1958 113 (set (pc)
        (label_ref 534)) 654 {jump}
     (nil)
 -> 534)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1958 1957 1960)
;; basic block 114, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 113, next block 115, flags: (NEW, RTL, MODIFIED)
;;  pred:       26
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1960 1958 1959 114 70 "" [1 uses])
(note 1959 1960 1961 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(insn 1961 1959 1962 114 (const_int 0 [0]) com_line.cpp:117 684 {nop}
     (nil))
(jump_insn 1962 1961 1963 114 (set (pc)
        (label_ref 534)) 654 {jump}
     (nil)
 -> 534)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1963 1962 1965)
;; basic block 115, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 114, next block 116, flags: (NEW, RTL, MODIFIED)
;;  pred:       27
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1965 1963 1964 115 71 "" [1 uses])
(note 1964 1965 1966 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(insn 1966 1964 1967 115 (const_int 0 [0]) com_line.cpp:119 684 {nop}
     (nil))
(jump_insn 1967 1966 1968 115 (set (pc)
        (label_ref 534)) 654 {jump}
     (nil)
 -> 534)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1968 1967 1970)
;; basic block 116, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 115, next block 117, flags: (NEW, RTL, MODIFIED)
;;  pred:       28
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1970 1968 1969 116 72 "" [1 uses])
(note 1969 1970 1971 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn 1971 1969 1972 116 (const_int 0 [0]) com_line.cpp:121 684 {nop}
     (nil))
(jump_insn 1972 1971 1973 116 (set (pc)
        (label_ref 534)) 654 {jump}
     (nil)
 -> 534)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1973 1972 1975)
;; basic block 117, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 116, next block 118, flags: (NEW, RTL, MODIFIED)
;;  pred:       29
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1975 1973 1974 117 73 "" [1 uses])
(note 1974 1975 1976 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(insn 1976 1974 1977 117 (const_int 0 [0]) com_line.cpp:123 684 {nop}
     (nil))
(jump_insn 1977 1976 1978 117 (set (pc)
        (label_ref 534)) 654 {jump}
     (nil)
 -> 534)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1978 1977 1980)
;; basic block 118, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 117, next block 32, flags: (NEW, RTL, MODIFIED)
;;  pred:       30
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1980 1978 1979 118 74 "" [1 uses])
(note 1979 1980 1981 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(insn 1981 1979 534 118 (const_int 0 [0]) com_line.cpp:125 684 {nop}
     (nil))
;;  succ:       32 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 118, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;;              31 [100.0%] 
;;              112 [100.0%] 
;;              113 [100.0%] 
;;              114 [100.0%] 
;;              115 [100.0%] 
;;              116 [100.0%] 
;;              118 [100.0%]  (FALLTHRU)
;;              117 [100.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 534 1981 535 32 13 "" [8 uses])
(note 535 534 536 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 536 535 537 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:129 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 537 536 538 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 554)
            (pc))) com_line.cpp:129 612 {*jcc_1}
     (nil)
 -> 554)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 199 200 201 697 698 699 700 701 702 703
(note 538 537 539 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 539 538 540 33 (set (reg/f:DI 0 ax [697])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 540 539 547 33 (parallel [
            (set (reg/f:DI 1 dx [orig:199 D.6170 ] [199])
                (plus:DI (reg/f:DI 0 ax [697])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:130 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 547 540 541 33 (set (reg:DI 0 ax [698])
        (reg/f:DI 1 dx [orig:199 D.6170 ] [199])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 541 547 542 33 (set (reg:DI 2 cx [702])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 542 541 543 33 (set (reg:DI 4 si [701])
        (reg:DI 0 ax [698])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 543 542 2027 33 (set (reg:QI 0 ax [703])
        (const_int 0 [0])) com_line.cpp:130 93 {*movqi_internal}
     (nil))
(insn 2027 543 544 33 (set (reg:DI 5 di [701])
        (reg:DI 4 si [701])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 544 2027 2026 33 (parallel [
            (set (reg:DI 2 cx [699])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [701]) [0  A8])
                        (reg:QI 0 ax [703])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [699])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [701]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:130 945 {*strlenqi_1}
     (nil))
(insn 2026 544 545 33 (set (reg:DI 0 ax [699])
        (reg:DI 2 cx [699])) com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 545 2026 546 33 (set (reg:DI 0 ax [700])
        (not:DI (reg:DI 0 ax [699]))) com_line.cpp:130 494 {*one_cmpldi2_1}
     (nil))
(insn 546 545 548 33 (parallel [
            (set (reg:DI 0 ax [orig:200 D.6165 ] [200])
                (plus:DI (reg:DI 0 ax [700])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:130 218 {*adddi_1}
     (nil))
(insn 548 546 549 33 (parallel [
            (set (reg/f:DI 0 ax [orig:201 D.6170 ] [201])
                (plus:DI (reg:DI 0 ax [orig:200 D.6165 ] [200])
                    (reg/f:DI 1 dx [orig:199 D.6170 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:130 218 {*adddi_1}
     (nil))
(insn 549 548 550 33 (set (mem:SI (reg/f:DI 0 ax [orig:201 D.6170 ] [201]) [0 MEM[(void *)_200]+0 S4 A8])
        (const_int 1680765791 [0x642e735f])) com_line.cpp:130 90 {*movsi_internal}
     (nil))
(insn 550 549 551 33 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:201 D.6170 ] [201])
                (const_int 4 [0x4])) [0 MEM[(void *)_200]+4 S2 A8])
        (const_int 29793 [0x7461])) com_line.cpp:130 92 {*movhi_internal}
     (nil))
(insn 551 550 1909 33 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:201 D.6170 ] [201])
                (const_int 6 [0x6])) [0 MEM[(void *)_200]+6 S1 A8])
        (const_int 0 [0])) com_line.cpp:130 93 {*movqi_internal}
     (nil))
(jump_insn 1909 551 1910 33 (set (pc)
        (label_ref 560)) 654 {jump}
     (nil)
 -> 560)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1910 1909 554)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 704
(code_label 554 1910 555 34 22 "" [1 uses])
(note 555 554 556 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 556 555 557 34 (set (reg/f:DI 0 ax [704])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])) com_line.cpp:133 89 {*movdi_internal}
     (nil))
(insn 557 556 558 34 (set (mem:SI (reg/f:DI 0 ax [704]) [0 MEM[(void *)temp_extension_10]+0 S4 A8])
        (const_int 1680765791 [0x642e735f])) com_line.cpp:133 90 {*movsi_internal}
     (nil))
(insn 558 557 559 34 (set (mem:HI (plus:DI (reg/f:DI 0 ax [704])
                (const_int 4 [0x4])) [0 MEM[(void *)temp_extension_10]+4 S2 A8])
        (const_int 29793 [0x7461])) com_line.cpp:133 92 {*movhi_internal}
     (nil))
(insn 559 558 560 34 (set (mem:QI (plus:DI (reg/f:DI 0 ax [704])
                (const_int 6 [0x6])) [0 MEM[(void *)temp_extension_10]+6 S1 A8])
        (const_int 0 [0])) com_line.cpp:133 93 {*movqi_internal}
     (nil))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;;              34 (FALLTHRU)
;;              33 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 560 559 561 35 12 "" [2 uses])
(note 561 560 562 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 562 561 1911 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5052 [0xffffffffffffec44])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:105 217 {*addsi_1}
     (nil))
(jump_insn 1911 562 1912 35 (set (pc)
        (label_ref 563)) com_line.cpp:105 654 {jump}
     (nil)
 -> 563)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1912 1911 566)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 202 203 204 705
(code_label 566 1912 567 36 10 "" [1 uses])
(note 567 566 568 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 568 567 569 36 (set (reg/f:DI 0 ax [705])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:139 89 {*movdi_internal}
     (nil))
(insn 569 568 570 36 (parallel [
            (set (reg/f:DI 0 ax [orig:202 D.6170 ] [202])
                (plus:DI (reg/f:DI 0 ax [705])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:139 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 570 569 571 36 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7fbe13155510 *.LC18>)) com_line.cpp:139 89 {*movdi_internal}
     (nil))
(insn 571 570 572 36 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:202 D.6170 ] [202])) com_line.cpp:139 89 {*movdi_internal}
     (nil))
(call_insn 572 571 573 36 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fbe13372510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:139 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 573 572 574 36 (set (reg/f:DI 0 ax [orig:203 D.6171 ] [203])
        (reg:DI 0 ax)) com_line.cpp:139 89 {*movdi_internal}
     (nil))
(insn 574 573 575 36 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:203 D.6171 ] [203])) com_line.cpp:139 89 {*movdi_internal}
     (nil))
(insn 575 574 576 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:139 4 {*cmpdi_ccno_1}
     (nil))
(insn 576 575 577 36 (set (reg:QI 0 ax [orig:204 D.6172 ] [204])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) com_line.cpp:139 607 {*setcc_qi}
     (nil))
(insn 577 576 578 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:204 D.6172 ] [204])
            (const_int 0 [0]))) com_line.cpp:139 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 578 577 579 36 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 634)
            (pc))) com_line.cpp:139 612 {*jcc_1}
     (nil)
 -> 634)
;;  succ:       37 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 205 206 706 707
(note 579 578 580 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 580 579 581 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7fbe131555a0 *.LC19>)) com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 581 580 582 37 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:141 93 {*movqi_internal}
     (nil))
(call_insn 582 581 583 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fbe135b45e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:141 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 583 582 584 37 (set (reg/f:DI 0 ax [706])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:142 89 {*movdi_internal}
     (nil))
(insn 584 583 585 37 (parallel [
            (set (reg/f:DI 0 ax [orig:205 D.6170 ] [205])
                (plus:DI (reg/f:DI 0 ax [706])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:142 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 585 584 586 37 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:205 D.6170 ] [205])) com_line.cpp:142 89 {*movdi_internal}
     (nil))
(insn 586 585 587 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7fbe13155630 *.LC20>)) com_line.cpp:142 89 {*movdi_internal}
     (nil))
(insn 587 586 588 37 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:142 93 {*movqi_internal}
     (nil))
(call_insn 588 587 589 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fbe135b45e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:142 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 589 588 590 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7fbe131556c0 *.LC21>)) com_line.cpp:143 89 {*movdi_internal}
     (nil))
(insn 590 589 591 37 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:143 93 {*movqi_internal}
     (nil))
(call_insn 591 590 592 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fbe135b45e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:143 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 592 591 593 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7fbe13155750 *.LC22>)) com_line.cpp:144 89 {*movdi_internal}
     (nil))
(insn 593 592 594 37 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:144 93 {*movqi_internal}
     (nil))
(call_insn 594 593 595 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fbe135b45e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:144 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 595 594 596 37 (parallel [
            (set (reg:DI 0 ax [707])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -5053 [0xffffffffffffec43])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:145 218 {*adddi_1}
     (nil))
(insn 596 595 597 37 (set (reg:DI 4 si)
        (reg:DI 0 ax [707])) com_line.cpp:145 89 {*movdi_internal}
     (nil))
(insn 597 596 598 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7fbe131557e0 *.LC23>)) com_line.cpp:145 89 {*movdi_internal}
     (nil))
(insn 598 597 599 37 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:145 93 {*movqi_internal}
     (nil))
(call_insn 599 598 600 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("scanf") [flags 0x41]  <function_decl 0x7fbe135b55e8 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) com_line.cpp:145 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 600 599 601 37 (set (reg:DI 5 di)
        (const_int 0 [0])) com_line.cpp:146 89 {*movdi_internal}
     (nil))
(call_insn 601 600 602 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fflush") [flags 0x41]  <function_decl 0x7fbe13372288 fflush>) [0 fflush S1 A8])
            (const_int 0 [0]))) com_line.cpp:146 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 602 601 603 37 (set (reg:QI 0 ax [orig:206 D.6173 ] [206])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -5053 [0xffffffffffffec43])) [0 prompt+0 S1 A8])) com_line.cpp:147 93 {*movqi_internal}
     (nil))
(insn 603 602 604 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:206 D.6173 ] [206])
            (const_int 121 [0x79]))) com_line.cpp:147 5 {*cmpqi_1}
     (nil))
(jump_insn 604 603 605 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 609)
            (pc))) com_line.cpp:147 612 {*jcc_1}
     (nil)
 -> 609)
;;  succ:       39
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207
(note 605 604 606 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 606 605 607 38 (set (reg:QI 0 ax [orig:207 D.6173 ] [207])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -5053 [0xffffffffffffec43])) [0 prompt+0 S1 A8])) com_line.cpp:147 93 {*movqi_internal}
     (nil))
(insn 607 606 608 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:207 D.6173 ] [207])
            (const_int 89 [0x59]))) com_line.cpp:147 5 {*cmpqi_1}
     (nil))
(jump_insn 608 607 609 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 618)
            (pc))) com_line.cpp:147 612 {*jcc_1}
     (nil)
 -> 618)
;;  succ:       39 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;;              38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 708
(code_label 609 608 610 39 25 "" [1 uses])
(note 610 609 611 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 611 610 612 39 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7fbe13155870 *.LC24>)) com_line.cpp:148 89 {*movdi_internal}
     (nil))
(call_insn 612 611 613 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:148 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 613 612 614 39 (set (reg:DI 0 ax [708])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])) com_line.cpp:155 89 {*movdi_internal}
     (nil))
(insn 614 613 615 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [708])) com_line.cpp:155 89 {*movdi_internal}
     (nil))
(call_insn 615 614 1913 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fbe133721b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) com_line.cpp:155 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1913 615 1914 39 (set (pc)
        (label_ref 634)) 654 {jump}
     (nil)
 -> 634)
;;  succ:       41 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1914 1913 618)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 208 709
(code_label 618 1914 619 40 26 "" [1 uses])
(note 619 618 620 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 620 619 621 40 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7fbe13155900 *.LC25>)) com_line.cpp:150 89 {*movdi_internal}
     (nil))
(insn 621 620 622 40 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:150 93 {*movqi_internal}
     (nil))
(call_insn 622 621 623 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fbe135b45e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:150 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 623 622 624 40 (set (reg/f:DI 0 ax [709])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:151 89 {*movdi_internal}
     (nil))
(insn 624 623 625 40 (parallel [
            (set (reg/f:DI 0 ax [orig:208 D.6170 ] [208])
                (plus:DI (reg/f:DI 0 ax [709])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:151 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 625 624 626 40 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:208 D.6170 ] [208])) com_line.cpp:151 89 {*movdi_internal}
     (nil))
(insn 626 625 627 40 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7fbe13155990 *.LC26>)) com_line.cpp:151 89 {*movdi_internal}
     (nil))
(insn 627 626 628 40 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:151 93 {*movqi_internal}
     (nil))
(call_insn 628 627 629 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fbe135b45e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:151 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 629 628 630 40 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7fbe13155a20 *.LC27>)) com_line.cpp:152 89 {*movdi_internal}
     (nil))
(call_insn 630 629 631 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:152 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 631 630 632 40 (set (reg:SI 5 di)
        (const_int 3 [0x3])) com_line.cpp:153 90 {*movsi_internal}
     (nil))
(call_insn 632 631 633 40 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fbe135d0ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:153 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 633 632 634)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;;              39 [100.0%] 
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 209 710
(code_label 634 633 635 41 24 "" [2 uses])
(note 635 634 636 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 636 635 637 41 (set (reg/f:DI 0 ax [710])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 637 636 638 41 (set (reg:SI 0 ax [orig:209 D.6169 ] [209])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [710])
                (const_int 56 [0x38])) [0 preprocess_37(D)->input_file_type+0 S4 A32])) com_line.cpp:160 90 {*movsi_internal}
     (nil))
(insn 638 637 639 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:209 D.6169 ] [209])
            (const_int 0 [0]))) com_line.cpp:160 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 639 638 640 41 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 688)
            (pc))) com_line.cpp:160 612 {*jcc_1}
     (nil)
 -> 688)
;;  succ:       42 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 210 211 212 213 214 215 216 217 218 711 712 713 714 715 716 717 718 719 720 721
(note 640 639 641 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 641 640 642 42 (set (reg/f:DI 0 ax [711])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 642 641 643 42 (parallel [
            (set (reg/f:DI 0 ax [orig:210 D.6167 ] [210])
                (plus:DI (reg/f:DI 0 ax [711])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:161 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 643 642 644 42 (set (reg/f:DI 0 ax [orig:211 D.6168 ] [211])
        (mem/f:DI (reg/f:DI 0 ax [orig:210 D.6167 ] [210]) [0 *_226+0 S8 A64])) com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 644 643 645 42 (set (reg/f:DI 1 dx [712])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 645 644 646 42 (parallel [
            (set (reg/f:DI 1 dx [orig:212 D.6170 ] [212])
                (plus:DI (reg/f:DI 1 dx [712])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:161 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 646 645 647 42 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:211 D.6168 ] [211])) com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 647 646 648 42 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:212 D.6170 ] [212])) com_line.cpp:161 89 {*movdi_internal}
     (nil))
(call_insn 648 647 649 42 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:161 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 649 648 650 42 (set (reg/f:DI 0 ax [713])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 650 649 657 42 (parallel [
            (set (reg/f:DI 1 dx [orig:213 D.6170 ] [213])
                (plus:DI (reg/f:DI 0 ax [713])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:165 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 657 650 651 42 (set (reg:DI 0 ax [714])
        (reg/f:DI 1 dx [orig:213 D.6170 ] [213])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 651 657 652 42 (set (reg:DI 2 cx [718])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 652 651 653 42 (set (reg:DI 4 si [717])
        (reg:DI 0 ax [714])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 653 652 2030 42 (set (reg:QI 0 ax [719])
        (const_int 0 [0])) com_line.cpp:165 93 {*movqi_internal}
     (nil))
(insn 2030 653 654 42 (set (reg:DI 5 di [717])
        (reg:DI 4 si [717])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 654 2030 2029 42 (parallel [
            (set (reg:DI 2 cx [715])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [717]) [0  A8])
                        (reg:QI 0 ax [719])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [715])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [717]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:165 945 {*strlenqi_1}
     (nil))
(insn 2029 654 655 42 (set (reg:DI 0 ax [715])
        (reg:DI 2 cx [715])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 655 2029 656 42 (set (reg:DI 0 ax [716])
        (not:DI (reg:DI 0 ax [715]))) com_line.cpp:165 494 {*one_cmpldi2_1}
     (nil))
(insn 656 655 658 42 (parallel [
            (set (reg:DI 0 ax [orig:214 D.6165 ] [214])
                (plus:DI (reg:DI 0 ax [716])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:165 218 {*adddi_1}
     (nil))
(insn 658 656 659 42 (parallel [
            (set (reg/f:DI 0 ax [orig:215 D.6170 ] [215])
                (plus:DI (reg:DI 0 ax [orig:214 D.6165 ] [214])
                    (reg/f:DI 1 dx [orig:213 D.6170 ] [213])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:165 218 {*adddi_1}
     (nil))
(insn 659 658 2031 42 (set (reg:DI 3 bx [1015])
        (const_int 8241992365438562351 [0x726170636f72702f])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 2031 659 660 42 (set (mem:DI (reg/f:DI 0 ax [orig:215 D.6170 ] [215]) [0 MEM[(void *)_232]+0 S8 A8])
        (reg:DI 3 bx [1015])) com_line.cpp:165 89 {*movdi_internal}
     (nil))
(insn 660 2031 661 42 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:215 D.6170 ] [215])
                (const_int 8 [0x8])) [0 MEM[(void *)_232]+8 S4 A8])
        (const_int 1954051118 [0x7478742e])) com_line.cpp:165 90 {*movsi_internal}
     (nil))
(insn 661 660 662 42 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:215 D.6170 ] [215])
                (const_int 12 [0xc])) [0 MEM[(void *)_232]+12 S1 A8])
        (const_int 0 [0])) com_line.cpp:165 93 {*movqi_internal}
     (nil))
(insn 662 661 663 42 (set (reg/f:DI 0 ax [720])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:168 89 {*movdi_internal}
     (nil))
(insn 663 662 664 42 (parallel [
            (set (reg/f:DI 0 ax [orig:216 D.6170 ] [216])
                (plus:DI (reg/f:DI 0 ax [720])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:168 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 664 663 665 42 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7fbe13155510 *.LC18>)) com_line.cpp:168 89 {*movdi_internal}
     (nil))
(insn 665 664 666 42 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:216 D.6170 ] [216])) com_line.cpp:168 89 {*movdi_internal}
     (nil))
(call_insn 666 665 667 42 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fbe13372510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:168 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 667 666 668 42 (set (reg/f:DI 0 ax [orig:217 D.6171 ] [217])
        (reg:DI 0 ax)) com_line.cpp:168 89 {*movdi_internal}
     (nil))
(insn 668 667 669 42 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:217 D.6171 ] [217])) com_line.cpp:168 89 {*movdi_internal}
     (nil))
(insn 669 668 670 42 (set (reg/f:DI 0 ax [721])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:171 89 {*movdi_internal}
     (nil))
(insn 670 669 671 42 (parallel [
            (set (reg/f:DI 0 ax [orig:218 D.6170 ] [218])
                (plus:DI (reg/f:DI 0 ax [721])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:171 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 671 670 672 42 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:218 D.6170 ] [218])) com_line.cpp:171 89 {*movdi_internal}
     (nil))
(insn 672 671 673 42 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7fbe13155ab0 *.LC28>)) com_line.cpp:171 89 {*movdi_internal}
     (nil))
(insn 673 672 674 42 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:171 93 {*movqi_internal}
     (nil))
(call_insn 674 673 675 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fbe135b45e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) com_line.cpp:171 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 675 674 676 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:173 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 676 675 677 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 683)
            (pc))) com_line.cpp:173 612 {*jcc_1}
     (nil)
 -> 683)
;;  succ:       43 (FALLTHRU)
;;              44
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 677 676 678 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 678 677 679 43 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7fbe13155b40 *.LC29>)) com_line.cpp:174 89 {*movdi_internal}
     (nil))
(call_insn 679 678 680 43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:174 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 680 679 681 43 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:175 90 {*movsi_internal}
     (nil))
(call_insn 681 680 682 43 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fbe135d0ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:175 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 682 681 683)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 722
(code_label 683 682 684 44 28 "" [1 uses])
(note 684 683 685 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 685 684 686 44 (set (reg:DI 0 ax [722])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])) com_line.cpp:177 89 {*movdi_internal}
     (nil))
(insn 686 685 687 44 (set (reg:DI 5 di)
        (reg:DI 0 ax [722])) com_line.cpp:177 89 {*movdi_internal}
     (nil))
(call_insn 687 686 688 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fbe133721b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) com_line.cpp:177 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41
;;              44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 723
(code_label 688 687 689 45 27 "" [1 uses])
(note 689 688 690 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 690 689 691 45 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
        (const_int 2 [0x2])) com_line.cpp:182 90 {*movsi_internal}
     (nil))
(insn 691 690 692 45 (set (reg/f:DI 0 ax [723])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:183 89 {*movdi_internal}
     (nil))
(insn 692 691 1879 45 (set (mem:SI (reg/f:DI 0 ax [723]) [0 *fid_244(D)+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:183 90 {*movsi_internal}
     (nil))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;;              108 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 219 724
(code_label 1879 692 693 46 65 "" [1 uses])
(note 693 1879 694 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 694 693 695 46 (set (reg:SI 0 ax [724])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5084 [0xffffffffffffec24])) [0 argc+0 S4 A32])) com_line.cpp:185 90 {*movsi_internal}
     (nil))
(insn 695 694 696 46 (parallel [
            (set (reg:SI 0 ax [orig:219 D.6169 ] [219])
                (plus:SI (reg:SI 0 ax [724])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:185 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5068 [0xffffffffffffec34])) [0 argc+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 696 695 697 46 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:219 D.6169 ] [219])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32]))) com_line.cpp:185 7 {*cmpsi_1}
     (nil))
(jump_insn 697 696 698 46 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1882)
            (pc))) com_line.cpp:185 612 {*jcc_1}
     (nil)
 -> 1882)
;;  succ:       109
;;              47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 220 221 222 223 224 725 726
(note 698 697 699 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 699 698 700 47 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:187 217 {*addsi_1}
     (nil))
(insn 700 699 701 47 (set (reg:SI 0 ax [725])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:189 90 {*movsi_internal}
     (nil))
(insn 701 700 702 47 (set (reg:DI 0 ax [orig:220 D.6165 ] [220])
        (sign_extend:DI (reg:SI 0 ax [725]))) com_line.cpp:189 142 {*extendsidi2_rex64}
     (nil))
(insn 702 701 703 47 (parallel [
            (set (reg:DI 1 dx [orig:221 D.6165 ] [221])
                (ashift:DI (reg:DI 0 ax [orig:220 D.6165 ] [220])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:189 512 {*ashldi3_1}
     (nil))
(insn 703 702 704 47 (set (reg/f:DI 0 ax [726])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:189 89 {*movdi_internal}
     (nil))
(insn 704 703 705 47 (parallel [
            (set (reg/f:DI 0 ax [orig:222 D.6167 ] [222])
                (plus:DI (reg/f:DI 0 ax [726])
                    (reg:DI 1 dx [orig:221 D.6165 ] [221])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:189 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:221 D.6165 ] [221]))
        (nil)))
(insn 705 704 706 47 (set (reg/f:DI 0 ax [orig:223 D.6168 ] [223])
        (mem/f:DI (reg/f:DI 0 ax [orig:222 D.6167 ] [222]) [0 *_250+0 S8 A64])) com_line.cpp:189 89 {*movdi_internal}
     (nil))
(insn 706 705 707 47 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fbe131202d0 *.LC7>)) com_line.cpp:189 89 {*movdi_internal}
     (nil))
(insn 707 706 708 47 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:223 D.6168 ] [223])) com_line.cpp:189 89 {*movdi_internal}
     (nil))
(call_insn/i 708 707 709 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:189 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 709 708 710 47 (set (reg:SI 0 ax [orig:224 D.6169 ] [224])
        (reg:SI 0 ax)) com_line.cpp:189 90 {*movsi_internal}
     (nil))
(insn 710 709 711 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:224 D.6169 ] [224])
            (const_int 0 [0]))) com_line.cpp:189 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 711 710 712 47 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 738)
            (pc))) com_line.cpp:189 612 {*jcc_1}
     (nil)
 -> 738)
;;  succ:       50
;;              48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 225 226 227 228 229 727 728
(note 712 711 713 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 713 712 714 48 (set (reg:SI 0 ax [727])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:190 90 {*movsi_internal}
     (nil))
(insn 714 713 715 48 (set (reg:DI 0 ax [orig:225 D.6165 ] [225])
        (sign_extend:DI (reg:SI 0 ax [727]))) com_line.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 715 714 716 48 (parallel [
            (set (reg:DI 1 dx [orig:226 D.6165 ] [226])
                (ashift:DI (reg:DI 0 ax [orig:225 D.6165 ] [225])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:190 512 {*ashldi3_1}
     (nil))
(insn 716 715 717 48 (set (reg/f:DI 0 ax [728])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:190 89 {*movdi_internal}
     (nil))
(insn 717 716 718 48 (parallel [
            (set (reg/f:DI 0 ax [orig:227 D.6167 ] [227])
                (plus:DI (reg/f:DI 0 ax [728])
                    (reg:DI 1 dx [orig:226 D.6165 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:190 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:226 D.6165 ] [226]))
        (nil)))
(insn 718 717 719 48 (set (reg/f:DI 0 ax [orig:228 D.6168 ] [228])
        (mem/f:DI (reg/f:DI 0 ax [orig:227 D.6167 ] [227]) [0 *_255+0 S8 A64])) com_line.cpp:190 89 {*movdi_internal}
     (nil))
(insn 719 718 720 48 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fbe131203f0 *.LC8>)) com_line.cpp:190 89 {*movdi_internal}
     (nil))
(insn 720 719 721 48 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:228 D.6168 ] [228])) com_line.cpp:190 89 {*movdi_internal}
     (nil))
(call_insn/i 721 720 722 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:190 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 722 721 723 48 (set (reg:SI 0 ax [orig:229 D.6169 ] [229])
        (reg:SI 0 ax)) com_line.cpp:190 90 {*movsi_internal}
     (nil))
(insn 723 722 724 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:229 D.6169 ] [229])
            (const_int 0 [0]))) com_line.cpp:189 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 724 723 725 48 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 738)
            (pc))) com_line.cpp:189 612 {*jcc_1}
     (nil)
 -> 738)
;;  succ:       50
;;              49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 230 231 232 233 234 729 730
(note 725 724 726 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 726 725 727 49 (set (reg:SI 0 ax [729])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:191 90 {*movsi_internal}
     (nil))
(insn 727 726 728 49 (set (reg:DI 0 ax [orig:230 D.6165 ] [230])
        (sign_extend:DI (reg:SI 0 ax [729]))) com_line.cpp:191 142 {*extendsidi2_rex64}
     (nil))
(insn 728 727 729 49 (parallel [
            (set (reg:DI 1 dx [orig:231 D.6165 ] [231])
                (ashift:DI (reg:DI 0 ax [orig:230 D.6165 ] [230])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:191 512 {*ashldi3_1}
     (nil))
(insn 729 728 730 49 (set (reg/f:DI 0 ax [730])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:191 89 {*movdi_internal}
     (nil))
(insn 730 729 731 49 (parallel [
            (set (reg/f:DI 0 ax [orig:232 D.6167 ] [232])
                (plus:DI (reg/f:DI 0 ax [730])
                    (reg:DI 1 dx [orig:231 D.6165 ] [231])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:191 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:231 D.6165 ] [231]))
        (nil)))
(insn 731 730 732 49 (set (reg/f:DI 0 ax [orig:233 D.6168 ] [233])
        (mem/f:DI (reg/f:DI 0 ax [orig:232 D.6167 ] [232]) [0 *_260+0 S8 A64])) com_line.cpp:191 89 {*movdi_internal}
     (nil))
(insn 732 731 733 49 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fbe13155000 *.LC9>)) com_line.cpp:191 89 {*movdi_internal}
     (nil))
(insn 733 732 734 49 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:233 D.6168 ] [233])) com_line.cpp:191 89 {*movdi_internal}
     (nil))
(call_insn/i 734 733 735 49 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:191 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 735 734 736 49 (set (reg:SI 0 ax [orig:234 D.6169 ] [234])
        (reg:SI 0 ax)) com_line.cpp:191 90 {*movsi_internal}
     (nil))
(insn 736 735 737 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:234 D.6169 ] [234])
            (const_int 0 [0]))) com_line.cpp:190 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 737 736 738 49 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1390)
            (pc))) com_line.cpp:190 612 {*jcc_1}
     (nil)
 -> 1390)
;;  succ:       50 (FALLTHRU)
;;              77
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47
;;              48
;;              49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 386 387 388 389 390 731 732
(code_label 738 737 739 50 30 "" [2 uses])
(note 739 738 740 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 740 739 741 50 (set (reg:SI 0 ax [731])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:193 90 {*movsi_internal}
     (nil))
(insn 741 740 742 50 (set (reg:DI 0 ax [orig:386 D.6165 ] [386])
        (sign_extend:DI (reg:SI 0 ax [731]))) com_line.cpp:193 142 {*extendsidi2_rex64}
     (nil))
(insn 742 741 743 50 (parallel [
            (set (reg:DI 1 dx [orig:387 D.6165 ] [387])
                (ashift:DI (reg:DI 0 ax [orig:386 D.6165 ] [386])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:193 512 {*ashldi3_1}
     (nil))
(insn 743 742 744 50 (set (reg/f:DI 0 ax [732])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:193 89 {*movdi_internal}
     (nil))
(insn 744 743 745 50 (parallel [
            (set (reg/f:DI 0 ax [orig:388 D.6167 ] [388])
                (plus:DI (reg/f:DI 0 ax [732])
                    (reg:DI 1 dx [orig:387 D.6165 ] [387])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:193 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:387 D.6165 ] [387]))
        (nil)))
(insn 745 744 746 50 (set (reg/f:DI 0 ax [orig:389 D.6168 ] [389])
        (mem/f:DI (reg/f:DI 0 ax [orig:388 D.6167 ] [388]) [0 *_445+0 S8 A64])) com_line.cpp:193 89 {*movdi_internal}
     (nil))
(insn 746 745 747 50 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fbe131202d0 *.LC7>)) com_line.cpp:193 89 {*movdi_internal}
     (nil))
(insn 747 746 748 50 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:389 D.6168 ] [389])) com_line.cpp:193 89 {*movdi_internal}
     (nil))
(call_insn/i 748 747 749 50 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:193 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 749 748 750 50 (set (reg:SI 0 ax [orig:390 D.6169 ] [390])
        (reg:SI 0 ax)) com_line.cpp:193 90 {*movsi_internal}
     (nil))
(insn 750 749 751 50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:390 D.6169 ] [390])
            (const_int 0 [0]))) com_line.cpp:193 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 751 750 752 50 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 834)
            (pc))) com_line.cpp:193 612 {*jcc_1}
     (nil)
 -> 834)
;;  succ:       51 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755
(note 752 751 753 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 753 752 754 51 (set (reg/f:DI 0 ax [733])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 754 753 755 51 (set (reg:SI 0 ax [orig:391 D.6169 ] [391])
        (mem:SI (reg/f:DI 0 ax [733]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:194 90 {*movsi_internal}
     (nil))
(insn 755 754 756 51 (set (reg:DI 1 dx [orig:392 D.6165 ] [392])
        (sign_extend:DI (reg:SI 0 ax [orig:391 D.6169 ] [391]))) com_line.cpp:194 142 {*extendsidi2_rex64}
     (nil))
(insn 756 755 757 51 (set (reg:DI 0 ax [734])
        (reg:DI 1 dx [orig:392 D.6165 ] [392])) com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 757 756 758 51 (parallel [
            (set (reg:DI 0 ax [734])
                (ashift:DI (reg:DI 0 ax [734])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:194 512 {*ashldi3_1}
     (nil))
(insn 758 757 759 51 (parallel [
            (set (reg:DI 0 ax [734])
                (plus:DI (reg:DI 0 ax [734])
                    (reg:DI 1 dx [orig:392 D.6165 ] [392])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:194 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:392 D.6165 ] [392])
            (const_int 9 [0x9]))
        (nil)))
(insn 759 758 760 51 (parallel [
            (set (reg:DI 0 ax [735])
                (ashift:DI (reg:DI 0 ax [734])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:194 512 {*ashldi3_1}
     (nil))
(insn 760 759 761 51 (set (reg:DI 0 ax [734])
        (reg:DI 0 ax [735])) com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 761 760 762 51 (set (reg:DI 1 dx [orig:393 D.6165 ] [393])
        (reg:DI 0 ax [734])) com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 762 761 763 51 (set (reg/f:DI 0 ax [736])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 763 762 764 51 (parallel [
            (set (reg/f:DI 0 ax [orig:394 D.6166 ] [394])
                (plus:DI (reg/f:DI 0 ax [736])
                    (reg:DI 1 dx [orig:393 D.6165 ] [393])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:194 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:393 D.6165 ] [393]))
        (nil)))
(insn 764 763 765 51 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:394 D.6166 ] [394])
                (const_int 12 [0xc])) [0 _451->pre_ecc+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:194 90 {*movsi_internal}
     (nil))
(insn 765 764 766 51 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:195 217 {*addsi_1}
     (nil))
(insn 766 765 767 51 (set (reg/f:DI 0 ax [737])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:196 89 {*movdi_internal}
     (nil))
(insn 767 766 768 51 (set (reg:SI 0 ax [orig:395 D.6169 ] [395])
        (mem:SI (reg/f:DI 0 ax [737]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:196 90 {*movsi_internal}
     (nil))
(insn 768 767 769 51 (set (reg:DI 1 dx [orig:396 D.6165 ] [396])
        (sign_extend:DI (reg:SI 0 ax [orig:395 D.6169 ] [395]))) com_line.cpp:196 142 {*extendsidi2_rex64}
     (nil))
(insn 769 768 770 51 (set (reg:DI 0 ax [738])
        (reg:DI 1 dx [orig:396 D.6165 ] [396])) com_line.cpp:196 89 {*movdi_internal}
     (nil))
(insn 770 769 771 51 (parallel [
            (set (reg:DI 0 ax [738])
                (ashift:DI (reg:DI 0 ax [738])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:196 512 {*ashldi3_1}
     (nil))
(insn 771 770 772 51 (parallel [
            (set (reg:DI 0 ax [738])
                (plus:DI (reg:DI 0 ax [738])
                    (reg:DI 1 dx [orig:396 D.6165 ] [396])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:196 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:396 D.6165 ] [396])
            (const_int 9 [0x9]))
        (nil)))
(insn 772 771 773 51 (parallel [
            (set (reg:DI 0 ax [739])
                (ashift:DI (reg:DI 0 ax [738])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:196 512 {*ashldi3_1}
     (nil))
(insn 773 772 774 51 (set (reg:DI 0 ax [738])
        (reg:DI 0 ax [739])) com_line.cpp:196 89 {*movdi_internal}
     (nil))
(insn 774 773 775 51 (set (reg:DI 1 dx [orig:397 D.6165 ] [397])
        (reg:DI 0 ax [738])) com_line.cpp:196 89 {*movdi_internal}
     (nil))
(insn 775 774 776 51 (set (reg/f:DI 0 ax [740])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:196 89 {*movdi_internal}
     (nil))
(insn 776 775 777 51 (parallel [
            (set (reg/f:DI 1 dx [orig:398 D.6166 ] [398])
                (plus:DI (reg:DI 1 dx [orig:397 D.6165 ] [397])
                    (reg/f:DI 0 ax [740])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:196 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:397 D.6165 ] [397]))
        (nil)))
(insn 777 776 778 51 (set (reg:SI 0 ax [741])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:196 90 {*movsi_internal}
     (nil))
(insn 778 777 779 51 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:398 D.6166 ] [398])
                (const_int 60 [0x3c])) [0 _457->ref_file_argument+0 S4 A32])
        (reg:SI 0 ax [741])) com_line.cpp:196 90 {*movsi_internal}
     (nil))
(insn 779 778 780 51 (set (reg/f:DI 0 ax [742])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:197 89 {*movdi_internal}
     (nil))
(insn 780 779 781 51 (set (mem:SI (reg/f:DI 0 ax [742]) [0 *fid_244(D)+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:197 90 {*movsi_internal}
     (nil))
(insn 781 780 782 51 (set (reg/f:DI 0 ax [743])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:198 89 {*movdi_internal}
     (nil))
(insn 782 781 783 51 (set (reg:SI 0 ax [orig:399 D.6169 ] [399])
        (mem:SI (reg/f:DI 0 ax [743]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:198 90 {*movsi_internal}
     (nil))
(insn 783 782 784 51 (set (reg:DI 1 dx [orig:400 D.6165 ] [400])
        (sign_extend:DI (reg:SI 0 ax [orig:399 D.6169 ] [399]))) com_line.cpp:198 142 {*extendsidi2_rex64}
     (nil))
(insn 784 783 785 51 (set (reg:DI 0 ax [744])
        (reg:DI 1 dx [orig:400 D.6165 ] [400])) com_line.cpp:198 89 {*movdi_internal}
     (nil))
(insn 785 784 786 51 (parallel [
            (set (reg:DI 0 ax [744])
                (ashift:DI (reg:DI 0 ax [744])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:198 512 {*ashldi3_1}
     (nil))
(insn 786 785 787 51 (parallel [
            (set (reg:DI 0 ax [744])
                (plus:DI (reg:DI 0 ax [744])
                    (reg:DI 1 dx [orig:400 D.6165 ] [400])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:198 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:400 D.6165 ] [400])
            (const_int 9 [0x9]))
        (nil)))
(insn 787 786 788 51 (parallel [
            (set (reg:DI 0 ax [745])
                (ashift:DI (reg:DI 0 ax [744])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:198 512 {*ashldi3_1}
     (nil))
(insn 788 787 789 51 (set (reg:DI 0 ax [744])
        (reg:DI 0 ax [745])) com_line.cpp:198 89 {*movdi_internal}
     (nil))
(insn 789 788 790 51 (set (reg:DI 1 dx [orig:401 D.6165 ] [401])
        (reg:DI 0 ax [744])) com_line.cpp:198 89 {*movdi_internal}
     (nil))
(insn 790 789 791 51 (set (reg/f:DI 0 ax [746])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:198 89 {*movdi_internal}
     (nil))
(insn 791 790 792 51 (parallel [
            (set (reg/f:DI 1 dx [orig:402 D.6166 ] [402])
                (plus:DI (reg:DI 1 dx [orig:401 D.6165 ] [401])
                    (reg/f:DI 0 ax [746])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:198 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:401 D.6165 ] [401]))
        (nil)))
(insn 792 791 793 51 (set (reg:SI 0 ax [747])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:198 90 {*movsi_internal}
     (nil))
(insn 793 792 794 51 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:402 D.6166 ] [402])
                (const_int 60 [0x3c])) [0 _463->ref_file_argument+0 S4 A32])
        (reg:SI 0 ax [747])) com_line.cpp:198 90 {*movsi_internal}
     (nil))
(insn 794 793 795 51 (set (reg/f:DI 0 ax [748])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 795 794 796 51 (set (reg:SI 0 ax [orig:403 D.6169 ] [403])
        (mem:SI (reg/f:DI 0 ax [748]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:199 90 {*movsi_internal}
     (nil))
(insn 796 795 797 51 (set (reg:DI 1 dx [orig:404 D.6165 ] [404])
        (sign_extend:DI (reg:SI 0 ax [orig:403 D.6169 ] [403]))) com_line.cpp:199 142 {*extendsidi2_rex64}
     (nil))
(insn 797 796 798 51 (set (reg:DI 0 ax [749])
        (reg:DI 1 dx [orig:404 D.6165 ] [404])) com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 798 797 799 51 (parallel [
            (set (reg:DI 0 ax [749])
                (ashift:DI (reg:DI 0 ax [749])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:199 512 {*ashldi3_1}
     (nil))
(insn 799 798 800 51 (parallel [
            (set (reg:DI 0 ax [749])
                (plus:DI (reg:DI 0 ax [749])
                    (reg:DI 1 dx [orig:404 D.6165 ] [404])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:199 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:404 D.6165 ] [404])
            (const_int 9 [0x9]))
        (nil)))
(insn 800 799 801 51 (parallel [
            (set (reg:DI 0 ax [750])
                (ashift:DI (reg:DI 0 ax [749])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:199 512 {*ashldi3_1}
     (nil))
(insn 801 800 802 51 (set (reg:DI 0 ax [749])
        (reg:DI 0 ax [750])) com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 802 801 803 51 (set (reg:DI 1 dx [orig:405 D.6165 ] [405])
        (reg:DI 0 ax [749])) com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 803 802 804 51 (set (reg/f:DI 0 ax [751])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 804 803 805 51 (parallel [
            (set (reg/f:DI 0 ax [orig:406 D.6166 ] [406])
                (plus:DI (reg/f:DI 0 ax [751])
                    (reg:DI 1 dx [orig:405 D.6165 ] [405])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:199 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:405 D.6165 ] [405]))
        (nil)))
(insn 805 804 806 51 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:406 D.6166 ] [406])
                (const_int 12 [0xc])) [0 _468->pre_ecc+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:199 90 {*movsi_internal}
     (nil))
(insn 806 805 807 51 (set (reg:SI 0 ax [752])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:200 90 {*movsi_internal}
     (nil))
(insn 807 806 808 51 (set (reg:DI 0 ax [orig:407 D.6165 ] [407])
        (sign_extend:DI (reg:SI 0 ax [752]))) com_line.cpp:200 142 {*extendsidi2_rex64}
     (nil))
(insn 808 807 809 51 (parallel [
            (set (reg:DI 1 dx [orig:408 D.6165 ] [408])
                (ashift:DI (reg:DI 0 ax [orig:407 D.6165 ] [407])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:200 512 {*ashldi3_1}
     (nil))
(insn 809 808 810 51 (set (reg/f:DI 0 ax [753])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:200 89 {*movdi_internal}
     (nil))
(insn 810 809 811 51 (parallel [
            (set (reg/f:DI 0 ax [orig:409 D.6167 ] [409])
                (plus:DI (reg/f:DI 0 ax [753])
                    (reg:DI 1 dx [orig:408 D.6165 ] [408])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:200 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:408 D.6165 ] [408]))
        (nil)))
(insn 811 810 812 51 (set (reg/f:DI 0 ax [orig:410 D.6168 ] [410])
        (mem/f:DI (reg/f:DI 0 ax [orig:409 D.6167 ] [409]) [0 *_472+0 S8 A64])) com_line.cpp:200 89 {*movdi_internal}
     (nil))
(insn 812 811 813 51 (set (reg/f:DI 1 dx [754])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:200 89 {*movdi_internal}
     (nil))
(insn 813 812 814 51 (parallel [
            (set (reg/f:DI 1 dx [orig:411 D.6170 ] [411])
                (plus:DI (reg/f:DI 1 dx [754])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:200 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 814 813 815 51 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:410 D.6168 ] [410])) com_line.cpp:200 89 {*movdi_internal}
     (nil))
(insn 815 814 816 51 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:411 D.6170 ] [411])) com_line.cpp:200 89 {*movdi_internal}
     (nil))
(call_insn 816 815 817 51 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:200 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 817 816 818 51 (set (reg/f:DI 0 ax [755])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:201 89 {*movdi_internal}
     (nil))
(insn 818 817 819 51 (set (reg:SI 0 ax [orig:412 D.6169 ] [412])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [755])
                (const_int 56 [0x38])) [0 preprocess_37(D)->input_file_type+0 S4 A32])) com_line.cpp:201 90 {*movsi_internal}
     (nil))
(insn 819 818 820 51 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:412 D.6169 ] [412])
            (const_int 0 [0]))) com_line.cpp:201 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 820 819 821 51 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 834)
            (pc))) com_line.cpp:201 612 {*jcc_1}
     (nil)
 -> 834)
;;  succ:       52 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 413 414 415 756 757 758 759 760 761 762
(note 821 820 822 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 822 821 823 52 (set (reg/f:DI 0 ax [756])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 823 822 830 52 (parallel [
            (set (reg/f:DI 1 dx [orig:413 D.6170 ] [413])
                (plus:DI (reg/f:DI 0 ax [756])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:202 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 830 823 824 52 (set (reg:DI 0 ax [757])
        (reg/f:DI 1 dx [orig:413 D.6170 ] [413])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 824 830 825 52 (set (reg:DI 2 cx [761])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 825 824 826 52 (set (reg:DI 4 si [760])
        (reg:DI 0 ax [757])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 826 825 2034 52 (set (reg:QI 0 ax [762])
        (const_int 0 [0])) com_line.cpp:202 93 {*movqi_internal}
     (nil))
(insn 2034 826 827 52 (set (reg:DI 5 di [760])
        (reg:DI 4 si [760])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 827 2034 2033 52 (parallel [
            (set (reg:DI 2 cx [758])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [760]) [0  A8])
                        (reg:QI 0 ax [762])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [758])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [760]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:202 945 {*strlenqi_1}
     (nil))
(insn 2033 827 828 52 (set (reg:DI 0 ax [758])
        (reg:DI 2 cx [758])) com_line.cpp:202 89 {*movdi_internal}
     (nil))
(insn 828 2033 829 52 (set (reg:DI 0 ax [759])
        (not:DI (reg:DI 0 ax [758]))) com_line.cpp:202 494 {*one_cmpldi2_1}
     (nil))
(insn 829 828 831 52 (parallel [
            (set (reg:DI 0 ax [orig:414 D.6165 ] [414])
                (plus:DI (reg:DI 0 ax [759])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:202 218 {*adddi_1}
     (nil))
(insn 831 829 832 52 (parallel [
            (set (reg/f:DI 0 ax [orig:415 D.6170 ] [415])
                (plus:DI (reg:DI 0 ax [orig:414 D.6165 ] [414])
                    (reg/f:DI 1 dx [orig:413 D.6170 ] [413])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:202 218 {*adddi_1}
     (nil))
(insn 832 831 833 52 (set (mem:SI (reg/f:DI 0 ax [orig:415 D.6170 ] [415]) [0 MEM[(void *)_479]+0 S4 A8])
        (const_int 1684629039 [0x6469662f])) com_line.cpp:202 90 {*movsi_internal}
     (nil))
(insn 833 832 834 52 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:415 D.6170 ] [415])
                (const_int 4 [0x4])) [0 MEM[(void *)_479]+4 S1 A8])
        (const_int 0 [0])) com_line.cpp:202 93 {*movqi_internal}
     (nil))
;;  succ:       53 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;;              52 (FALLTHRU)
;;              51
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 416 417 418 419 420 763 764
(code_label 834 833 835 53 32 "" [2 uses])
(note 835 834 836 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 836 835 837 53 (set (reg:SI 0 ax [763])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:205 90 {*movsi_internal}
     (nil))
(insn 837 836 838 53 (set (reg:DI 0 ax [orig:416 D.6165 ] [416])
        (sign_extend:DI (reg:SI 0 ax [763]))) com_line.cpp:205 142 {*extendsidi2_rex64}
     (nil))
(insn 838 837 839 53 (parallel [
            (set (reg:DI 1 dx [orig:417 D.6165 ] [417])
                (ashift:DI (reg:DI 0 ax [orig:416 D.6165 ] [416])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:205 512 {*ashldi3_1}
     (nil))
(insn 839 838 840 53 (set (reg/f:DI 0 ax [764])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:205 89 {*movdi_internal}
     (nil))
(insn 840 839 841 53 (parallel [
            (set (reg/f:DI 0 ax [orig:418 D.6167 ] [418])
                (plus:DI (reg/f:DI 0 ax [764])
                    (reg:DI 1 dx [orig:417 D.6165 ] [417])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:205 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:417 D.6165 ] [417]))
        (nil)))
(insn 841 840 842 53 (set (reg/f:DI 0 ax [orig:419 D.6168 ] [419])
        (mem/f:DI (reg/f:DI 0 ax [orig:418 D.6167 ] [418]) [0 *_483+0 S8 A64])) com_line.cpp:205 89 {*movdi_internal}
     (nil))
(insn 842 841 843 53 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fbe131203f0 *.LC8>)) com_line.cpp:205 89 {*movdi_internal}
     (nil))
(insn 843 842 844 53 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:419 D.6168 ] [419])) com_line.cpp:205 89 {*movdi_internal}
     (nil))
(call_insn/i 844 843 845 53 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:205 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 845 844 846 53 (set (reg:SI 0 ax [orig:420 D.6169 ] [420])
        (reg:SI 0 ax)) com_line.cpp:205 90 {*movsi_internal}
     (nil))
(insn 846 845 847 53 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:420 D.6169 ] [420])
            (const_int 0 [0]))) com_line.cpp:205 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 847 846 848 53 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 976)
            (pc))) com_line.cpp:205 612 {*jcc_1}
     (nil)
 -> 976)
;;  succ:       54 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799
(note 848 847 849 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 849 848 850 54 (set (reg/f:DI 0 ax [765])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:206 89 {*movdi_internal}
     (nil))
(insn 850 849 851 54 (set (reg:SI 0 ax [orig:421 D.6169 ] [421])
        (mem:SI (reg/f:DI 0 ax [765]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:206 90 {*movsi_internal}
     (nil))
(insn 851 850 852 54 (set (reg:DI 1 dx [orig:422 D.6165 ] [422])
        (sign_extend:DI (reg:SI 0 ax [orig:421 D.6169 ] [421]))) com_line.cpp:206 142 {*extendsidi2_rex64}
     (nil))
(insn 852 851 853 54 (set (reg:DI 0 ax [766])
        (reg:DI 1 dx [orig:422 D.6165 ] [422])) com_line.cpp:206 89 {*movdi_internal}
     (nil))
(insn 853 852 854 54 (parallel [
            (set (reg:DI 0 ax [766])
                (ashift:DI (reg:DI 0 ax [766])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:206 512 {*ashldi3_1}
     (nil))
(insn 854 853 855 54 (parallel [
            (set (reg:DI 0 ax [766])
                (plus:DI (reg:DI 0 ax [766])
                    (reg:DI 1 dx [orig:422 D.6165 ] [422])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:206 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:422 D.6165 ] [422])
            (const_int 9 [0x9]))
        (nil)))
(insn 855 854 856 54 (parallel [
            (set (reg:DI 0 ax [767])
                (ashift:DI (reg:DI 0 ax [766])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:206 512 {*ashldi3_1}
     (nil))
(insn 856 855 857 54 (set (reg:DI 0 ax [766])
        (reg:DI 0 ax [767])) com_line.cpp:206 89 {*movdi_internal}
     (nil))
(insn 857 856 858 54 (set (reg:DI 1 dx [orig:423 D.6165 ] [423])
        (reg:DI 0 ax [766])) com_line.cpp:206 89 {*movdi_internal}
     (nil))
(insn 858 857 859 54 (set (reg/f:DI 0 ax [768])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:206 89 {*movdi_internal}
     (nil))
(insn 859 858 860 54 (parallel [
            (set (reg/f:DI 0 ax [orig:424 D.6166 ] [424])
                (plus:DI (reg/f:DI 0 ax [768])
                    (reg:DI 1 dx [orig:423 D.6165 ] [423])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:206 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:423 D.6165 ] [423]))
        (nil)))
(insn 860 859 861 54 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:424 D.6166 ] [424])
                (const_int 36 [0x24])) [0 _489->pre_quality+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:206 90 {*movsi_internal}
     (nil))
(insn 861 860 862 54 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:207 217 {*addsi_1}
     (nil))
(insn 862 861 863 54 (set (reg/f:DI 0 ax [769])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 863 862 864 54 (set (reg:SI 0 ax [orig:425 D.6169 ] [425])
        (mem:SI (reg/f:DI 0 ax [769]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:208 90 {*movsi_internal}
     (nil))
(insn 864 863 865 54 (set (reg:DI 1 dx [orig:426 D.6165 ] [426])
        (sign_extend:DI (reg:SI 0 ax [orig:425 D.6169 ] [425]))) com_line.cpp:208 142 {*extendsidi2_rex64}
     (nil))
(insn 865 864 866 54 (set (reg:DI 0 ax [770])
        (reg:DI 1 dx [orig:426 D.6165 ] [426])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 866 865 867 54 (parallel [
            (set (reg:DI 0 ax [770])
                (ashift:DI (reg:DI 0 ax [770])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 512 {*ashldi3_1}
     (nil))
(insn 867 866 868 54 (parallel [
            (set (reg:DI 0 ax [770])
                (plus:DI (reg:DI 0 ax [770])
                    (reg:DI 1 dx [orig:426 D.6165 ] [426])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:426 D.6165 ] [426])
            (const_int 9 [0x9]))
        (nil)))
(insn 868 867 869 54 (parallel [
            (set (reg:DI 0 ax [771])
                (ashift:DI (reg:DI 0 ax [770])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 512 {*ashldi3_1}
     (nil))
(insn 869 868 870 54 (set (reg:DI 0 ax [770])
        (reg:DI 0 ax [771])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 870 869 871 54 (set (reg:DI 1 dx [orig:427 D.6165 ] [427])
        (reg:DI 0 ax [770])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 871 870 872 54 (set (reg/f:DI 0 ax [772])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 872 871 873 54 (parallel [
            (set (reg/f:DI 3 bx [orig:428 D.6166 ] [428])
                (plus:DI (reg:DI 1 dx [orig:427 D.6165 ] [427])
                    (reg/f:DI 0 ax [772])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:427 D.6165 ] [427]))
        (nil)))
(insn 873 872 874 54 (set (reg:SI 0 ax [773])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:208 90 {*movsi_internal}
     (nil))
(insn 874 873 875 54 (set (reg:DI 0 ax [orig:429 D.6165 ] [429])
        (sign_extend:DI (reg:SI 0 ax [773]))) com_line.cpp:208 142 {*extendsidi2_rex64}
     (nil))
(insn 875 874 876 54 (parallel [
            (set (reg:DI 1 dx [orig:430 D.6165 ] [430])
                (ashift:DI (reg:DI 0 ax [orig:429 D.6165 ] [429])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 512 {*ashldi3_1}
     (nil))
(insn 876 875 877 54 (set (reg/f:DI 0 ax [774])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 877 876 878 54 (parallel [
            (set (reg/f:DI 0 ax [orig:431 D.6167 ] [431])
                (plus:DI (reg/f:DI 0 ax [774])
                    (reg:DI 1 dx [orig:430 D.6165 ] [430])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:208 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:430 D.6165 ] [430]))
        (nil)))
(insn 878 877 879 54 (set (reg/f:DI 0 ax [orig:432 D.6168 ] [432])
        (mem/f:DI (reg/f:DI 0 ax [orig:431 D.6167 ] [431]) [0 *_498+0 S8 A64])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(insn 879 878 880 54 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:432 D.6168 ] [432])) com_line.cpp:208 89 {*movdi_internal}
     (nil))
(call_insn/i 880 879 882 54 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7fbe13433af8 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) com_line.cpp:208 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 882 880 883 54 (set (reg:SF 21 xmm0 [orig:434 D.6177 ] [434])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:433 D.6176 ] [433]))) com_line.cpp:208 157 {*truncdfsf_fast_sse}
     (nil))
(insn 883 882 884 54 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:428 D.6166 ] [428])
                (const_int 48 [0x30])) [0 _495->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [orig:434 D.6177 ] [434])) com_line.cpp:208 129 {*movsf_internal}
     (nil))
(insn 884 883 885 54 (set (reg/f:DI 0 ax [775])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:209 89 {*movdi_internal}
     (nil))
(insn 885 884 886 54 (set (reg:SI 0 ax [orig:435 D.6169 ] [435])
        (mem:SI (reg/f:DI 0 ax [775]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:209 90 {*movsi_internal}
     (nil))
(insn 886 885 887 54 (set (reg:DI 1 dx [orig:436 D.6165 ] [436])
        (sign_extend:DI (reg:SI 0 ax [orig:435 D.6169 ] [435]))) com_line.cpp:209 142 {*extendsidi2_rex64}
     (nil))
(insn 887 886 888 54 (set (reg:DI 0 ax [776])
        (reg:DI 1 dx [orig:436 D.6165 ] [436])) com_line.cpp:209 89 {*movdi_internal}
     (nil))
(insn 888 887 889 54 (parallel [
            (set (reg:DI 0 ax [776])
                (ashift:DI (reg:DI 0 ax [776])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:209 512 {*ashldi3_1}
     (nil))
(insn 889 888 890 54 (parallel [
            (set (reg:DI 0 ax [776])
                (plus:DI (reg:DI 0 ax [776])
                    (reg:DI 1 dx [orig:436 D.6165 ] [436])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:209 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:436 D.6165 ] [436])
            (const_int 9 [0x9]))
        (nil)))
(insn 890 889 891 54 (parallel [
            (set (reg:DI 0 ax [777])
                (ashift:DI (reg:DI 0 ax [776])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:209 512 {*ashldi3_1}
     (nil))
(insn 891 890 892 54 (set (reg:DI 0 ax [776])
        (reg:DI 0 ax [777])) com_line.cpp:209 89 {*movdi_internal}
     (nil))
(insn 892 891 893 54 (set (reg:DI 1 dx [orig:437 D.6165 ] [437])
        (reg:DI 0 ax [776])) com_line.cpp:209 89 {*movdi_internal}
     (nil))
(insn 893 892 894 54 (set (reg/f:DI 0 ax [778])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:209 89 {*movdi_internal}
     (nil))
(insn 894 893 895 54 (parallel [
            (set (reg/f:DI 0 ax [orig:438 D.6166 ] [438])
                (plus:DI (reg/f:DI 0 ax [778])
                    (reg:DI 1 dx [orig:437 D.6165 ] [437])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:209 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:437 D.6165 ] [437]))
        (nil)))
(insn 895 894 896 54 (set (reg:SI 1 dx [779])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:209 90 {*movsi_internal}
     (nil))
(insn 896 895 897 54 (parallel [
            (set (reg:SI 1 dx [orig:439 D.6169 ] [439])
                (plus:SI (reg:SI 1 dx [779])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:209 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5032 [0xffffffffffffec58])) [0 argc_counter+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 897 896 898 54 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:438 D.6166 ] [438])
                (const_int 60 [0x3c])) [0 _506->ref_file_argument+0 S4 A32])
        (reg:SI 1 dx [orig:439 D.6169 ] [439])) com_line.cpp:209 90 {*movsi_internal}
     (nil))
(insn 898 897 899 54 (set (reg/f:DI 0 ax [780])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:210 89 {*movdi_internal}
     (nil))
(insn 899 898 900 54 (set (mem:SI (reg/f:DI 0 ax [780]) [0 *fid_244(D)+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:210 90 {*movsi_internal}
     (nil))
(insn 900 899 901 54 (set (reg/f:DI 0 ax [781])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 901 900 902 54 (set (reg:SI 0 ax [orig:440 D.6169 ] [440])
        (mem:SI (reg/f:DI 0 ax [781]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:211 90 {*movsi_internal}
     (nil))
(insn 902 901 903 54 (set (reg:DI 1 dx [orig:441 D.6165 ] [441])
        (sign_extend:DI (reg:SI 0 ax [orig:440 D.6169 ] [440]))) com_line.cpp:211 142 {*extendsidi2_rex64}
     (nil))
(insn 903 902 904 54 (set (reg:DI 0 ax [782])
        (reg:DI 1 dx [orig:441 D.6165 ] [441])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 904 903 905 54 (parallel [
            (set (reg:DI 0 ax [782])
                (ashift:DI (reg:DI 0 ax [782])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 512 {*ashldi3_1}
     (nil))
(insn 905 904 906 54 (parallel [
            (set (reg:DI 0 ax [782])
                (plus:DI (reg:DI 0 ax [782])
                    (reg:DI 1 dx [orig:441 D.6165 ] [441])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:441 D.6165 ] [441])
            (const_int 9 [0x9]))
        (nil)))
(insn 906 905 907 54 (parallel [
            (set (reg:DI 0 ax [783])
                (ashift:DI (reg:DI 0 ax [782])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 512 {*ashldi3_1}
     (nil))
(insn 907 906 908 54 (set (reg:DI 0 ax [782])
        (reg:DI 0 ax [783])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 908 907 909 54 (set (reg:DI 1 dx [orig:442 D.6165 ] [442])
        (reg:DI 0 ax [782])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 909 908 910 54 (set (reg/f:DI 0 ax [784])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 910 909 911 54 (parallel [
            (set (reg/f:DI 3 bx [orig:443 D.6166 ] [443])
                (plus:DI (reg:DI 1 dx [orig:442 D.6165 ] [442])
                    (reg/f:DI 0 ax [784])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:442 D.6165 ] [442]))
        (nil)))
(insn 911 910 912 54 (set (reg:SI 0 ax [785])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:211 90 {*movsi_internal}
     (nil))
(insn 912 911 913 54 (set (reg:DI 0 ax [orig:444 D.6165 ] [444])
        (sign_extend:DI (reg:SI 0 ax [785]))) com_line.cpp:211 142 {*extendsidi2_rex64}
     (nil))
(insn 913 912 914 54 (parallel [
            (set (reg:DI 1 dx [orig:445 D.6165 ] [445])
                (ashift:DI (reg:DI 0 ax [orig:444 D.6165 ] [444])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 512 {*ashldi3_1}
     (nil))
(insn 914 913 915 54 (set (reg/f:DI 0 ax [786])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 915 914 916 54 (parallel [
            (set (reg/f:DI 0 ax [orig:446 D.6167 ] [446])
                (plus:DI (reg/f:DI 0 ax [786])
                    (reg:DI 1 dx [orig:445 D.6165 ] [445])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:211 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:445 D.6165 ] [445]))
        (nil)))
(insn 916 915 917 54 (set (reg/f:DI 0 ax [orig:447 D.6168 ] [447])
        (mem/f:DI (reg/f:DI 0 ax [orig:446 D.6167 ] [446]) [0 *_516+0 S8 A64])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 917 916 918 54 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:447 D.6168 ] [447])) com_line.cpp:211 89 {*movdi_internal}
     (nil))
(call_insn/i 918 917 920 54 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7fbe13433af8 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) com_line.cpp:211 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 920 918 921 54 (set (reg:SF 21 xmm0 [orig:449 D.6177 ] [449])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:448 D.6176 ] [448]))) com_line.cpp:211 157 {*truncdfsf_fast_sse}
     (nil))
(insn 921 920 922 54 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:443 D.6166 ] [443])
                (const_int 48 [0x30])) [0 _513->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [orig:449 D.6177 ] [449])) com_line.cpp:211 129 {*movsf_internal}
     (nil))
(insn 922 921 923 54 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:212 217 {*addsi_1}
     (nil))
(insn 923 922 924 54 (set (reg/f:DI 0 ax [787])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 924 923 925 54 (set (reg:SI 0 ax [orig:450 D.6169 ] [450])
        (mem:SI (reg/f:DI 0 ax [787]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:213 90 {*movsi_internal}
     (nil))
(insn 925 924 926 54 (set (reg:DI 1 dx [orig:451 D.6165 ] [451])
        (sign_extend:DI (reg:SI 0 ax [orig:450 D.6169 ] [450]))) com_line.cpp:213 142 {*extendsidi2_rex64}
     (nil))
(insn 926 925 927 54 (set (reg:DI 0 ax [788])
        (reg:DI 1 dx [orig:451 D.6165 ] [451])) com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 927 926 928 54 (parallel [
            (set (reg:DI 0 ax [788])
                (ashift:DI (reg:DI 0 ax [788])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:213 512 {*ashldi3_1}
     (nil))
(insn 928 927 929 54 (parallel [
            (set (reg:DI 0 ax [788])
                (plus:DI (reg:DI 0 ax [788])
                    (reg:DI 1 dx [orig:451 D.6165 ] [451])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:213 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:451 D.6165 ] [451])
            (const_int 9 [0x9]))
        (nil)))
(insn 929 928 930 54 (parallel [
            (set (reg:DI 0 ax [789])
                (ashift:DI (reg:DI 0 ax [788])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:213 512 {*ashldi3_1}
     (nil))
(insn 930 929 931 54 (set (reg:DI 0 ax [788])
        (reg:DI 0 ax [789])) com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 931 930 932 54 (set (reg:DI 1 dx [orig:452 D.6165 ] [452])
        (reg:DI 0 ax [788])) com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 932 931 933 54 (set (reg/f:DI 0 ax [790])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 933 932 934 54 (parallel [
            (set (reg/f:DI 1 dx [orig:453 D.6166 ] [453])
                (plus:DI (reg:DI 1 dx [orig:452 D.6165 ] [452])
                    (reg/f:DI 0 ax [790])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:213 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:452 D.6165 ] [452]))
        (nil)))
(insn 934 933 935 54 (set (reg:SI 0 ax [791])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:213 90 {*movsi_internal}
     (nil))
(insn 935 934 936 54 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:453 D.6166 ] [453])
                (const_int 60 [0x3c])) [0 _525->ref_file_argument+0 S4 A32])
        (reg:SI 0 ax [791])) com_line.cpp:213 90 {*movsi_internal}
     (nil))
(insn 936 935 937 54 (set (reg/f:DI 0 ax [792])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 937 936 938 54 (set (reg:SI 0 ax [orig:454 D.6169 ] [454])
        (mem:SI (reg/f:DI 0 ax [792]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:214 90 {*movsi_internal}
     (nil))
(insn 938 937 939 54 (set (reg:DI 1 dx [orig:455 D.6165 ] [455])
        (sign_extend:DI (reg:SI 0 ax [orig:454 D.6169 ] [454]))) com_line.cpp:214 142 {*extendsidi2_rex64}
     (nil))
(insn 939 938 940 54 (set (reg:DI 0 ax [793])
        (reg:DI 1 dx [orig:455 D.6165 ] [455])) com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 940 939 941 54 (parallel [
            (set (reg:DI 0 ax [793])
                (ashift:DI (reg:DI 0 ax [793])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:214 512 {*ashldi3_1}
     (nil))
(insn 941 940 942 54 (parallel [
            (set (reg:DI 0 ax [793])
                (plus:DI (reg:DI 0 ax [793])
                    (reg:DI 1 dx [orig:455 D.6165 ] [455])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:214 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:455 D.6165 ] [455])
            (const_int 9 [0x9]))
        (nil)))
(insn 942 941 943 54 (parallel [
            (set (reg:DI 0 ax [794])
                (ashift:DI (reg:DI 0 ax [793])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:214 512 {*ashldi3_1}
     (nil))
(insn 943 942 944 54 (set (reg:DI 0 ax [793])
        (reg:DI 0 ax [794])) com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 944 943 945 54 (set (reg:DI 1 dx [orig:456 D.6165 ] [456])
        (reg:DI 0 ax [793])) com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 945 944 946 54 (set (reg/f:DI 0 ax [795])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 946 945 947 54 (parallel [
            (set (reg/f:DI 0 ax [orig:457 D.6166 ] [457])
                (plus:DI (reg/f:DI 0 ax [795])
                    (reg:DI 1 dx [orig:456 D.6165 ] [456])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:214 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:456 D.6165 ] [456]))
        (nil)))
(insn 947 946 948 54 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:457 D.6166 ] [457])
                (const_int 36 [0x24])) [0 _530->pre_quality+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:214 90 {*movsi_internal}
     (nil))
(insn 948 947 949 54 (set (reg:SI 0 ax [796])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:215 90 {*movsi_internal}
     (nil))
(insn 949 948 950 54 (set (reg:DI 0 ax [orig:458 D.6165 ] [458])
        (sign_extend:DI (reg:SI 0 ax [796]))) com_line.cpp:215 142 {*extendsidi2_rex64}
     (nil))
(insn 950 949 951 54 (parallel [
            (set (reg:DI 1 dx [orig:459 D.6165 ] [459])
                (ashift:DI (reg:DI 0 ax [orig:458 D.6165 ] [458])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:215 512 {*ashldi3_1}
     (nil))
(insn 951 950 952 54 (set (reg/f:DI 0 ax [797])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:215 89 {*movdi_internal}
     (nil))
(insn 952 951 953 54 (parallel [
            (set (reg/f:DI 0 ax [orig:460 D.6167 ] [460])
                (plus:DI (reg/f:DI 0 ax [797])
                    (reg:DI 1 dx [orig:459 D.6165 ] [459])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:215 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:459 D.6165 ] [459]))
        (nil)))
(insn 953 952 954 54 (set (reg/f:DI 0 ax [orig:461 D.6168 ] [461])
        (mem/f:DI (reg/f:DI 0 ax [orig:460 D.6167 ] [460]) [0 *_534+0 S8 A64])) com_line.cpp:215 89 {*movdi_internal}
     (nil))
(insn 954 953 955 54 (set (reg/f:DI 1 dx [798])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:215 89 {*movdi_internal}
     (nil))
(insn 955 954 956 54 (parallel [
            (set (reg/f:DI 1 dx [orig:462 D.6170 ] [462])
                (plus:DI (reg/f:DI 1 dx [798])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:215 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 956 955 957 54 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:461 D.6168 ] [461])) com_line.cpp:215 89 {*movdi_internal}
     (nil))
(insn 957 956 958 54 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:462 D.6170 ] [462])) com_line.cpp:215 89 {*movdi_internal}
     (nil))
(call_insn 958 957 959 54 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:215 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 959 958 960 54 (set (reg/f:DI 0 ax [799])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:216 89 {*movdi_internal}
     (nil))
(insn 960 959 961 54 (set (reg:SI 0 ax [orig:463 D.6169 ] [463])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [799])
                (const_int 56 [0x38])) [0 preprocess_37(D)->input_file_type+0 S4 A32])) com_line.cpp:216 90 {*movsi_internal}
     (nil))
(insn 961 960 962 54 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:463 D.6169 ] [463])
            (const_int 0 [0]))) com_line.cpp:216 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 962 961 963 54 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 976)
            (pc))) com_line.cpp:216 612 {*jcc_1}
     (nil)
 -> 976)
;;  succ:       55 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 464 465 466 800 801 802 803 804 805 806
(note 963 962 964 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 964 963 965 55 (set (reg/f:DI 0 ax [800])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 965 964 972 55 (parallel [
            (set (reg/f:DI 1 dx [orig:464 D.6170 ] [464])
                (plus:DI (reg/f:DI 0 ax [800])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:217 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 972 965 966 55 (set (reg:DI 0 ax [801])
        (reg/f:DI 1 dx [orig:464 D.6170 ] [464])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 966 972 967 55 (set (reg:DI 2 cx [805])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 967 966 968 55 (set (reg:DI 4 si [804])
        (reg:DI 0 ax [801])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 968 967 2037 55 (set (reg:QI 0 ax [806])
        (const_int 0 [0])) com_line.cpp:217 93 {*movqi_internal}
     (nil))
(insn 2037 968 969 55 (set (reg:DI 5 di [804])
        (reg:DI 4 si [804])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 969 2037 2036 55 (parallel [
            (set (reg:DI 2 cx [802])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [804]) [0  A8])
                        (reg:QI 0 ax [806])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [802])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [804]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:217 945 {*strlenqi_1}
     (nil))
(insn 2036 969 970 55 (set (reg:DI 0 ax [802])
        (reg:DI 2 cx [802])) com_line.cpp:217 89 {*movdi_internal}
     (nil))
(insn 970 2036 971 55 (set (reg:DI 0 ax [803])
        (not:DI (reg:DI 0 ax [802]))) com_line.cpp:217 494 {*one_cmpldi2_1}
     (nil))
(insn 971 970 973 55 (parallel [
            (set (reg:DI 0 ax [orig:465 D.6165 ] [465])
                (plus:DI (reg:DI 0 ax [803])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:217 218 {*adddi_1}
     (nil))
(insn 973 971 974 55 (parallel [
            (set (reg/f:DI 0 ax [orig:466 D.6170 ] [466])
                (plus:DI (reg:DI 0 ax [orig:465 D.6165 ] [465])
                    (reg/f:DI 1 dx [orig:464 D.6170 ] [464])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:217 218 {*adddi_1}
     (nil))
(insn 974 973 975 55 (set (mem:SI (reg/f:DI 0 ax [orig:466 D.6170 ] [466]) [0 MEM[(void *)_541]+0 S4 A8])
        (const_int 1684629039 [0x6469662f])) com_line.cpp:217 90 {*movsi_internal}
     (nil))
(insn 975 974 976 55 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:466 D.6170 ] [466])
                (const_int 4 [0x4])) [0 MEM[(void *)_541]+4 S1 A8])
        (const_int 0 [0])) com_line.cpp:217 93 {*movqi_internal}
     (nil))
;;  succ:       56 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53
;;              55 (FALLTHRU)
;;              54
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 467 468 469 470 471 807 808
(code_label 976 975 977 56 33 "" [2 uses])
(note 977 976 978 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 978 977 979 56 (set (reg:SI 0 ax [807])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:220 90 {*movsi_internal}
     (nil))
(insn 979 978 980 56 (set (reg:DI 0 ax [orig:467 D.6165 ] [467])
        (sign_extend:DI (reg:SI 0 ax [807]))) com_line.cpp:220 142 {*extendsidi2_rex64}
     (nil))
(insn 980 979 981 56 (parallel [
            (set (reg:DI 1 dx [orig:468 D.6165 ] [468])
                (ashift:DI (reg:DI 0 ax [orig:467 D.6165 ] [467])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:220 512 {*ashldi3_1}
     (nil))
(insn 981 980 982 56 (set (reg/f:DI 0 ax [808])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:220 89 {*movdi_internal}
     (nil))
(insn 982 981 983 56 (parallel [
            (set (reg/f:DI 0 ax [orig:469 D.6167 ] [469])
                (plus:DI (reg/f:DI 0 ax [808])
                    (reg:DI 1 dx [orig:468 D.6165 ] [468])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:220 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:468 D.6165 ] [468]))
        (nil)))
(insn 983 982 984 56 (set (reg/f:DI 0 ax [orig:470 D.6168 ] [470])
        (mem/f:DI (reg/f:DI 0 ax [orig:469 D.6167 ] [469]) [0 *_545+0 S8 A64])) com_line.cpp:220 89 {*movdi_internal}
     (nil))
(insn 984 983 985 56 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fbe13155000 *.LC9>)) com_line.cpp:220 89 {*movdi_internal}
     (nil))
(insn 985 984 986 56 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:470 D.6168 ] [470])) com_line.cpp:220 89 {*movdi_internal}
     (nil))
(call_insn/i 986 985 987 56 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:220 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 987 986 988 56 (set (reg:SI 0 ax [orig:471 D.6169 ] [471])
        (reg:SI 0 ax)) com_line.cpp:220 90 {*movsi_internal}
     (nil))
(insn 988 987 989 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:471 D.6169 ] [471])
            (const_int 0 [0]))) com_line.cpp:220 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 989 988 990 56 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1154)
            (pc))) com_line.cpp:220 612 {*jcc_1}
     (nil)
 -> 1154)
;;  succ:       57 (FALLTHRU)
;;              59
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56 (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854
(note 990 989 991 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 991 990 992 57 (set (reg/f:DI 0 ax [809])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:221 89 {*movdi_internal}
     (nil))
(insn 992 991 993 57 (set (reg:SI 0 ax [orig:472 D.6169 ] [472])
        (mem:SI (reg/f:DI 0 ax [809]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:221 90 {*movsi_internal}
     (nil))
(insn 993 992 994 57 (set (reg:DI 1 dx [orig:473 D.6165 ] [473])
        (sign_extend:DI (reg:SI 0 ax [orig:472 D.6169 ] [472]))) com_line.cpp:221 142 {*extendsidi2_rex64}
     (nil))
(insn 994 993 995 57 (set (reg:DI 0 ax [810])
        (reg:DI 1 dx [orig:473 D.6165 ] [473])) com_line.cpp:221 89 {*movdi_internal}
     (nil))
(insn 995 994 996 57 (parallel [
            (set (reg:DI 0 ax [810])
                (ashift:DI (reg:DI 0 ax [810])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:221 512 {*ashldi3_1}
     (nil))
(insn 996 995 997 57 (parallel [
            (set (reg:DI 0 ax [810])
                (plus:DI (reg:DI 0 ax [810])
                    (reg:DI 1 dx [orig:473 D.6165 ] [473])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:221 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:473 D.6165 ] [473])
            (const_int 9 [0x9]))
        (nil)))
(insn 997 996 998 57 (parallel [
            (set (reg:DI 0 ax [811])
                (ashift:DI (reg:DI 0 ax [810])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:221 512 {*ashldi3_1}
     (nil))
(insn 998 997 999 57 (set (reg:DI 0 ax [810])
        (reg:DI 0 ax [811])) com_line.cpp:221 89 {*movdi_internal}
     (nil))
(insn 999 998 1000 57 (set (reg:DI 1 dx [orig:474 D.6165 ] [474])
        (reg:DI 0 ax [810])) com_line.cpp:221 89 {*movdi_internal}
     (nil))
(insn 1000 999 1001 57 (set (reg/f:DI 0 ax [812])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:221 89 {*movdi_internal}
     (nil))
(insn 1001 1000 1002 57 (parallel [
            (set (reg/f:DI 0 ax [orig:475 D.6166 ] [475])
                (plus:DI (reg/f:DI 0 ax [812])
                    (reg:DI 1 dx [orig:474 D.6165 ] [474])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:221 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:474 D.6165 ] [474]))
        (nil)))
(insn 1002 1001 1003 57 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:475 D.6166 ] [475])
                (const_int 40 [0x28])) [0 _551->pre_quecc+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:221 90 {*movsi_internal}
     (nil))
(insn 1003 1002 1004 57 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:222 217 {*addsi_1}
     (nil))
(insn 1004 1003 1005 57 (set (reg/f:DI 0 ax [813])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1005 1004 1006 57 (set (reg:SI 0 ax [orig:476 D.6169 ] [476])
        (mem:SI (reg/f:DI 0 ax [813]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:223 90 {*movsi_internal}
     (nil))
(insn 1006 1005 1007 57 (set (reg:DI 1 dx [orig:477 D.6165 ] [477])
        (sign_extend:DI (reg:SI 0 ax [orig:476 D.6169 ] [476]))) com_line.cpp:223 142 {*extendsidi2_rex64}
     (nil))
(insn 1007 1006 1008 57 (set (reg:DI 0 ax [814])
        (reg:DI 1 dx [orig:477 D.6165 ] [477])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1008 1007 1009 57 (parallel [
            (set (reg:DI 0 ax [814])
                (ashift:DI (reg:DI 0 ax [814])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 512 {*ashldi3_1}
     (nil))
(insn 1009 1008 1010 57 (parallel [
            (set (reg:DI 0 ax [814])
                (plus:DI (reg:DI 0 ax [814])
                    (reg:DI 1 dx [orig:477 D.6165 ] [477])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:477 D.6165 ] [477])
            (const_int 9 [0x9]))
        (nil)))
(insn 1010 1009 1011 57 (parallel [
            (set (reg:DI 0 ax [815])
                (ashift:DI (reg:DI 0 ax [814])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 512 {*ashldi3_1}
     (nil))
(insn 1011 1010 1012 57 (set (reg:DI 0 ax [814])
        (reg:DI 0 ax [815])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1012 1011 1013 57 (set (reg:DI 1 dx [orig:478 D.6165 ] [478])
        (reg:DI 0 ax [814])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1013 1012 1014 57 (set (reg/f:DI 0 ax [816])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1014 1013 1015 57 (parallel [
            (set (reg/f:DI 3 bx [orig:479 D.6166 ] [479])
                (plus:DI (reg:DI 1 dx [orig:478 D.6165 ] [478])
                    (reg/f:DI 0 ax [816])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:478 D.6165 ] [478]))
        (nil)))
(insn 1015 1014 1016 57 (set (reg:SI 0 ax [817])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:223 90 {*movsi_internal}
     (nil))
(insn 1016 1015 1017 57 (set (reg:DI 0 ax [orig:480 D.6165 ] [480])
        (sign_extend:DI (reg:SI 0 ax [817]))) com_line.cpp:223 142 {*extendsidi2_rex64}
     (nil))
(insn 1017 1016 1018 57 (parallel [
            (set (reg:DI 1 dx [orig:481 D.6165 ] [481])
                (ashift:DI (reg:DI 0 ax [orig:480 D.6165 ] [480])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 512 {*ashldi3_1}
     (nil))
(insn 1018 1017 1019 57 (set (reg/f:DI 0 ax [818])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1019 1018 1020 57 (parallel [
            (set (reg/f:DI 0 ax [orig:482 D.6167 ] [482])
                (plus:DI (reg/f:DI 0 ax [818])
                    (reg:DI 1 dx [orig:481 D.6165 ] [481])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:223 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:481 D.6165 ] [481]))
        (nil)))
(insn 1020 1019 1021 57 (set (reg/f:DI 0 ax [orig:483 D.6168 ] [483])
        (mem/f:DI (reg/f:DI 0 ax [orig:482 D.6167 ] [482]) [0 *_560+0 S8 A64])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(insn 1021 1020 1022 57 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:483 D.6168 ] [483])) com_line.cpp:223 89 {*movdi_internal}
     (nil))
(call_insn/i 1022 1021 1023 57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7fbe13433bd0 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) com_line.cpp:223 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1023 1022 1024 57 (set (reg:SI 0 ax [orig:484 D.6169 ] [484])
        (reg:SI 0 ax)) com_line.cpp:223 90 {*movsi_internal}
     (nil))
(insn 1024 1023 1025 57 (set (mem/j:SI (plus:DI (reg/f:DI 3 bx [orig:479 D.6166 ] [479])
                (const_int 44 [0x2c])) [0 _557->pre_quecc_points+0 S4 A32])
        (reg:SI 0 ax [orig:484 D.6169 ] [484])) com_line.cpp:223 90 {*movsi_internal}
     (nil))
(insn 1025 1024 1026 57 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:224 217 {*addsi_1}
     (nil))
(insn 1026 1025 1027 57 (set (reg/f:DI 0 ax [819])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1027 1026 1028 57 (set (reg:SI 0 ax [orig:485 D.6169 ] [485])
        (mem:SI (reg/f:DI 0 ax [819]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:225 90 {*movsi_internal}
     (nil))
(insn 1028 1027 1029 57 (set (reg:DI 1 dx [orig:486 D.6165 ] [486])
        (sign_extend:DI (reg:SI 0 ax [orig:485 D.6169 ] [485]))) com_line.cpp:225 142 {*extendsidi2_rex64}
     (nil))
(insn 1029 1028 1030 57 (set (reg:DI 0 ax [820])
        (reg:DI 1 dx [orig:486 D.6165 ] [486])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1030 1029 1031 57 (parallel [
            (set (reg:DI 0 ax [820])
                (ashift:DI (reg:DI 0 ax [820])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 512 {*ashldi3_1}
     (nil))
(insn 1031 1030 1032 57 (parallel [
            (set (reg:DI 0 ax [820])
                (plus:DI (reg:DI 0 ax [820])
                    (reg:DI 1 dx [orig:486 D.6165 ] [486])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:486 D.6165 ] [486])
            (const_int 9 [0x9]))
        (nil)))
(insn 1032 1031 1033 57 (parallel [
            (set (reg:DI 0 ax [821])
                (ashift:DI (reg:DI 0 ax [820])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 512 {*ashldi3_1}
     (nil))
(insn 1033 1032 1034 57 (set (reg:DI 0 ax [820])
        (reg:DI 0 ax [821])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1034 1033 1035 57 (set (reg:DI 1 dx [orig:487 D.6165 ] [487])
        (reg:DI 0 ax [820])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1035 1034 1036 57 (set (reg/f:DI 0 ax [822])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1036 1035 1037 57 (parallel [
            (set (reg/f:DI 3 bx [orig:488 D.6166 ] [488])
                (plus:DI (reg:DI 1 dx [orig:487 D.6165 ] [487])
                    (reg/f:DI 0 ax [822])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:487 D.6165 ] [487]))
        (nil)))
(insn 1037 1036 1038 57 (set (reg:SI 0 ax [823])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:225 90 {*movsi_internal}
     (nil))
(insn 1038 1037 1039 57 (set (reg:DI 0 ax [orig:489 D.6165 ] [489])
        (sign_extend:DI (reg:SI 0 ax [823]))) com_line.cpp:225 142 {*extendsidi2_rex64}
     (nil))
(insn 1039 1038 1040 57 (parallel [
            (set (reg:DI 1 dx [orig:490 D.6165 ] [490])
                (ashift:DI (reg:DI 0 ax [orig:489 D.6165 ] [489])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 512 {*ashldi3_1}
     (nil))
(insn 1040 1039 1041 57 (set (reg/f:DI 0 ax [824])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1041 1040 1042 57 (parallel [
            (set (reg/f:DI 0 ax [orig:491 D.6167 ] [491])
                (plus:DI (reg/f:DI 0 ax [824])
                    (reg:DI 1 dx [orig:490 D.6165 ] [490])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:225 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:490 D.6165 ] [490]))
        (nil)))
(insn 1042 1041 1043 57 (set (reg/f:DI 0 ax [orig:492 D.6168 ] [492])
        (mem/f:DI (reg/f:DI 0 ax [orig:491 D.6167 ] [491]) [0 *_571+0 S8 A64])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(insn 1043 1042 1044 57 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:492 D.6168 ] [492])) com_line.cpp:225 89 {*movdi_internal}
     (nil))
(call_insn/i 1044 1043 1046 57 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7fbe13433af8 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) com_line.cpp:225 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1046 1044 1047 57 (set (reg:SF 21 xmm0 [orig:494 D.6177 ] [494])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:493 D.6176 ] [493]))) com_line.cpp:225 157 {*truncdfsf_fast_sse}
     (nil))
(insn 1047 1046 1048 57 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:488 D.6166 ] [488])
                (const_int 48 [0x30])) [0 _568->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [orig:494 D.6177 ] [494])) com_line.cpp:225 129 {*movsf_internal}
     (nil))
(insn 1048 1047 1049 57 (set (reg/f:DI 0 ax [825])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:226 89 {*movdi_internal}
     (nil))
(insn 1049 1048 1050 57 (set (reg:SI 0 ax [orig:495 D.6169 ] [495])
        (mem:SI (reg/f:DI 0 ax [825]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:226 90 {*movsi_internal}
     (nil))
(insn 1050 1049 1051 57 (set (reg:DI 1 dx [orig:496 D.6165 ] [496])
        (sign_extend:DI (reg:SI 0 ax [orig:495 D.6169 ] [495]))) com_line.cpp:226 142 {*extendsidi2_rex64}
     (nil))
(insn 1051 1050 1052 57 (set (reg:DI 0 ax [826])
        (reg:DI 1 dx [orig:496 D.6165 ] [496])) com_line.cpp:226 89 {*movdi_internal}
     (nil))
(insn 1052 1051 1053 57 (parallel [
            (set (reg:DI 0 ax [826])
                (ashift:DI (reg:DI 0 ax [826])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:226 512 {*ashldi3_1}
     (nil))
(insn 1053 1052 1054 57 (parallel [
            (set (reg:DI 0 ax [826])
                (plus:DI (reg:DI 0 ax [826])
                    (reg:DI 1 dx [orig:496 D.6165 ] [496])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:226 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:496 D.6165 ] [496])
            (const_int 9 [0x9]))
        (nil)))
(insn 1054 1053 1055 57 (parallel [
            (set (reg:DI 0 ax [827])
                (ashift:DI (reg:DI 0 ax [826])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:226 512 {*ashldi3_1}
     (nil))
(insn 1055 1054 1056 57 (set (reg:DI 0 ax [826])
        (reg:DI 0 ax [827])) com_line.cpp:226 89 {*movdi_internal}
     (nil))
(insn 1056 1055 1057 57 (set (reg:DI 1 dx [orig:497 D.6165 ] [497])
        (reg:DI 0 ax [826])) com_line.cpp:226 89 {*movdi_internal}
     (nil))
(insn 1057 1056 1058 57 (set (reg/f:DI 0 ax [828])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:226 89 {*movdi_internal}
     (nil))
(insn 1058 1057 1059 57 (parallel [
            (set (reg/f:DI 0 ax [orig:498 D.6166 ] [498])
                (plus:DI (reg/f:DI 0 ax [828])
                    (reg:DI 1 dx [orig:497 D.6165 ] [497])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:226 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:497 D.6165 ] [497]))
        (nil)))
(insn 1059 1058 1060 57 (set (reg:SI 1 dx [829])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:226 90 {*movsi_internal}
     (nil))
(insn 1060 1059 1061 57 (parallel [
            (set (reg:SI 1 dx [orig:499 D.6169 ] [499])
                (plus:SI (reg:SI 1 dx [829])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:226 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5032 [0xffffffffffffec58])) [0 argc_counter+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1061 1060 1062 57 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:498 D.6166 ] [498])
                (const_int 60 [0x3c])) [0 _579->ref_file_argument+0 S4 A32])
        (reg:SI 1 dx [orig:499 D.6169 ] [499])) com_line.cpp:226 90 {*movsi_internal}
     (nil))
(insn 1062 1061 1063 57 (set (reg/f:DI 0 ax [830])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:227 89 {*movdi_internal}
     (nil))
(insn 1063 1062 1064 57 (set (mem:SI (reg/f:DI 0 ax [830]) [0 *fid_244(D)+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:227 90 {*movsi_internal}
     (nil))
(insn 1064 1063 1065 57 (set (reg/f:DI 0 ax [831])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:228 89 {*movdi_internal}
     (nil))
(insn 1065 1064 1066 57 (set (reg:SI 0 ax [orig:500 D.6169 ] [500])
        (mem:SI (reg/f:DI 0 ax [831]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:228 90 {*movsi_internal}
     (nil))
(insn 1066 1065 1067 57 (set (reg:DI 1 dx [orig:501 D.6165 ] [501])
        (sign_extend:DI (reg:SI 0 ax [orig:500 D.6169 ] [500]))) com_line.cpp:228 142 {*extendsidi2_rex64}
     (nil))
(insn 1067 1066 1068 57 (set (reg:DI 0 ax [832])
        (reg:DI 1 dx [orig:501 D.6165 ] [501])) com_line.cpp:228 89 {*movdi_internal}
     (nil))
(insn 1068 1067 1069 57 (parallel [
            (set (reg:DI 0 ax [832])
                (ashift:DI (reg:DI 0 ax [832])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:228 512 {*ashldi3_1}
     (nil))
(insn 1069 1068 1070 57 (parallel [
            (set (reg:DI 0 ax [832])
                (plus:DI (reg:DI 0 ax [832])
                    (reg:DI 1 dx [orig:501 D.6165 ] [501])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:228 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:501 D.6165 ] [501])
            (const_int 9 [0x9]))
        (nil)))
(insn 1070 1069 1071 57 (parallel [
            (set (reg:DI 0 ax [833])
                (ashift:DI (reg:DI 0 ax [832])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:228 512 {*ashldi3_1}
     (nil))
(insn 1071 1070 1072 57 (set (reg:DI 0 ax [832])
        (reg:DI 0 ax [833])) com_line.cpp:228 89 {*movdi_internal}
     (nil))
(insn 1072 1071 1073 57 (set (reg:DI 1 dx [orig:502 D.6165 ] [502])
        (reg:DI 0 ax [832])) com_line.cpp:228 89 {*movdi_internal}
     (nil))
(insn 1073 1072 1074 57 (set (reg/f:DI 0 ax [834])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:228 89 {*movdi_internal}
     (nil))
(insn 1074 1073 1075 57 (parallel [
            (set (reg/f:DI 0 ax [orig:503 D.6166 ] [503])
                (plus:DI (reg/f:DI 0 ax [834])
                    (reg:DI 1 dx [orig:502 D.6165 ] [502])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:228 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:502 D.6165 ] [502]))
        (nil)))
(insn 1075 1074 1076 57 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:503 D.6166 ] [503])
                (const_int 40 [0x28])) [0 _586->pre_quecc+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:228 90 {*movsi_internal}
     (nil))
(insn 1076 1075 1077 57 (set (reg/f:DI 0 ax [835])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1077 1076 1078 57 (set (reg:SI 0 ax [orig:504 D.6169 ] [504])
        (mem:SI (reg/f:DI 0 ax [835]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:229 90 {*movsi_internal}
     (nil))
(insn 1078 1077 1079 57 (set (reg:DI 1 dx [orig:505 D.6165 ] [505])
        (sign_extend:DI (reg:SI 0 ax [orig:504 D.6169 ] [504]))) com_line.cpp:229 142 {*extendsidi2_rex64}
     (nil))
(insn 1079 1078 1080 57 (set (reg:DI 0 ax [836])
        (reg:DI 1 dx [orig:505 D.6165 ] [505])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1080 1079 1081 57 (parallel [
            (set (reg:DI 0 ax [836])
                (ashift:DI (reg:DI 0 ax [836])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:229 512 {*ashldi3_1}
     (nil))
(insn 1081 1080 1082 57 (parallel [
            (set (reg:DI 0 ax [836])
                (plus:DI (reg:DI 0 ax [836])
                    (reg:DI 1 dx [orig:505 D.6165 ] [505])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:229 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:505 D.6165 ] [505])
            (const_int 9 [0x9]))
        (nil)))
(insn 1082 1081 1083 57 (parallel [
            (set (reg:DI 0 ax [837])
                (ashift:DI (reg:DI 0 ax [836])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:229 512 {*ashldi3_1}
     (nil))
(insn 1083 1082 1084 57 (set (reg:DI 0 ax [836])
        (reg:DI 0 ax [837])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1084 1083 1085 57 (set (reg:DI 1 dx [orig:506 D.6165 ] [506])
        (reg:DI 0 ax [836])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1085 1084 1086 57 (set (reg/f:DI 0 ax [838])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1086 1085 1087 57 (parallel [
            (set (reg/f:DI 1 dx [orig:507 D.6166 ] [507])
                (plus:DI (reg:DI 1 dx [orig:506 D.6165 ] [506])
                    (reg/f:DI 0 ax [838])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:229 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:506 D.6165 ] [506]))
        (nil)))
(insn 1087 1086 1088 57 (set (reg/f:DI 0 ax [839])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 1088 1087 1089 57 (set (reg:SI 0 ax [orig:508 D.6169 ] [508])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [839])
                (const_int 44 [0x2c])) [0 preprocess_37(D)->pre_quecc_points+0 S4 A32])) com_line.cpp:229 90 {*movsi_internal}
     (nil))
(insn 1089 1088 1090 57 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:507 D.6166 ] [507])
                (const_int 44 [0x2c])) [0 _591->pre_quecc_points+0 S4 A32])
        (reg:SI 0 ax [orig:508 D.6169 ] [508])) com_line.cpp:229 90 {*movsi_internal}
     (nil))
(insn 1090 1089 1091 57 (set (reg/f:DI 0 ax [840])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1091 1090 1092 57 (set (reg:SI 0 ax [orig:509 D.6169 ] [509])
        (mem:SI (reg/f:DI 0 ax [840]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:230 90 {*movsi_internal}
     (nil))
(insn 1092 1091 1093 57 (set (reg:DI 1 dx [orig:510 D.6165 ] [510])
        (sign_extend:DI (reg:SI 0 ax [orig:509 D.6169 ] [509]))) com_line.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 1093 1092 1094 57 (set (reg:DI 0 ax [841])
        (reg:DI 1 dx [orig:510 D.6165 ] [510])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1094 1093 1095 57 (parallel [
            (set (reg:DI 0 ax [841])
                (ashift:DI (reg:DI 0 ax [841])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 512 {*ashldi3_1}
     (nil))
(insn 1095 1094 1096 57 (parallel [
            (set (reg:DI 0 ax [841])
                (plus:DI (reg:DI 0 ax [841])
                    (reg:DI 1 dx [orig:510 D.6165 ] [510])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:510 D.6165 ] [510])
            (const_int 9 [0x9]))
        (nil)))
(insn 1096 1095 1097 57 (parallel [
            (set (reg:DI 0 ax [842])
                (ashift:DI (reg:DI 0 ax [841])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 512 {*ashldi3_1}
     (nil))
(insn 1097 1096 1098 57 (set (reg:DI 0 ax [841])
        (reg:DI 0 ax [842])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1098 1097 1099 57 (set (reg:DI 1 dx [orig:511 D.6165 ] [511])
        (reg:DI 0 ax [841])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1099 1098 1100 57 (set (reg/f:DI 0 ax [843])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1100 1099 1101 57 (parallel [
            (set (reg/f:DI 3 bx [orig:512 D.6166 ] [512])
                (plus:DI (reg:DI 1 dx [orig:511 D.6165 ] [511])
                    (reg/f:DI 0 ax [843])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:511 D.6165 ] [511]))
        (nil)))
(insn 1101 1100 1102 57 (set (reg:SI 0 ax [844])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:230 90 {*movsi_internal}
     (nil))
(insn 1102 1101 1103 57 (set (reg:DI 0 ax [orig:513 D.6165 ] [513])
        (sign_extend:DI (reg:SI 0 ax [844]))) com_line.cpp:230 142 {*extendsidi2_rex64}
     (nil))
(insn 1103 1102 1104 57 (parallel [
            (set (reg:DI 1 dx [orig:514 D.6165 ] [514])
                (ashift:DI (reg:DI 0 ax [orig:513 D.6165 ] [513])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 512 {*ashldi3_1}
     (nil))
(insn 1104 1103 1105 57 (set (reg/f:DI 0 ax [845])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1105 1104 1106 57 (parallel [
            (set (reg/f:DI 0 ax [orig:515 D.6167 ] [515])
                (plus:DI (reg/f:DI 0 ax [845])
                    (reg:DI 1 dx [orig:514 D.6165 ] [514])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:230 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:514 D.6165 ] [514]))
        (nil)))
(insn 1106 1105 1107 57 (set (reg/f:DI 0 ax [orig:516 D.6168 ] [516])
        (mem/f:DI (reg/f:DI 0 ax [orig:515 D.6167 ] [515]) [0 *_600+0 S8 A64])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(insn 1107 1106 1108 57 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:516 D.6168 ] [516])) com_line.cpp:230 89 {*movdi_internal}
     (nil))
(call_insn/i 1108 1107 1110 57 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7fbe13433af8 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) com_line.cpp:230 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1110 1108 1111 57 (set (reg:SF 21 xmm0 [orig:518 D.6177 ] [518])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:517 D.6176 ] [517]))) com_line.cpp:230 157 {*truncdfsf_fast_sse}
     (nil))
(insn 1111 1110 1112 57 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:512 D.6166 ] [512])
                (const_int 48 [0x30])) [0 _597->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [orig:518 D.6177 ] [518])) com_line.cpp:230 129 {*movsf_internal}
     (nil))
(insn 1112 1111 1113 57 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:231 217 {*addsi_1}
     (nil))
(insn 1113 1112 1114 57 (set (reg/f:DI 0 ax [846])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 1114 1113 1115 57 (set (reg:SI 0 ax [orig:519 D.6169 ] [519])
        (mem:SI (reg/f:DI 0 ax [846]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:232 90 {*movsi_internal}
     (nil))
(insn 1115 1114 1116 57 (set (reg:DI 1 dx [orig:520 D.6165 ] [520])
        (sign_extend:DI (reg:SI 0 ax [orig:519 D.6169 ] [519]))) com_line.cpp:232 142 {*extendsidi2_rex64}
     (nil))
(insn 1116 1115 1117 57 (set (reg:DI 0 ax [847])
        (reg:DI 1 dx [orig:520 D.6165 ] [520])) com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 1117 1116 1118 57 (parallel [
            (set (reg:DI 0 ax [847])
                (ashift:DI (reg:DI 0 ax [847])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:232 512 {*ashldi3_1}
     (nil))
(insn 1118 1117 1119 57 (parallel [
            (set (reg:DI 0 ax [847])
                (plus:DI (reg:DI 0 ax [847])
                    (reg:DI 1 dx [orig:520 D.6165 ] [520])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:232 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:520 D.6165 ] [520])
            (const_int 9 [0x9]))
        (nil)))
(insn 1119 1118 1120 57 (parallel [
            (set (reg:DI 0 ax [848])
                (ashift:DI (reg:DI 0 ax [847])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:232 512 {*ashldi3_1}
     (nil))
(insn 1120 1119 1121 57 (set (reg:DI 0 ax [847])
        (reg:DI 0 ax [848])) com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 1121 1120 1122 57 (set (reg:DI 1 dx [orig:521 D.6165 ] [521])
        (reg:DI 0 ax [847])) com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 1122 1121 1123 57 (set (reg/f:DI 0 ax [849])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 1123 1122 1124 57 (parallel [
            (set (reg/f:DI 1 dx [orig:522 D.6166 ] [522])
                (plus:DI (reg:DI 1 dx [orig:521 D.6165 ] [521])
                    (reg/f:DI 0 ax [849])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:232 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:521 D.6165 ] [521]))
        (nil)))
(insn 1124 1123 1125 57 (set (reg:SI 0 ax [850])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:232 90 {*movsi_internal}
     (nil))
(insn 1125 1124 1126 57 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:522 D.6166 ] [522])
                (const_int 60 [0x3c])) [0 _609->ref_file_argument+0 S4 A32])
        (reg:SI 0 ax [850])) com_line.cpp:232 90 {*movsi_internal}
     (nil))
(insn 1126 1125 1127 57 (set (reg:SI 0 ax [851])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:233 90 {*movsi_internal}
     (nil))
(insn 1127 1126 1128 57 (set (reg:DI 0 ax [orig:523 D.6165 ] [523])
        (sign_extend:DI (reg:SI 0 ax [851]))) com_line.cpp:233 142 {*extendsidi2_rex64}
     (nil))
(insn 1128 1127 1129 57 (parallel [
            (set (reg:DI 1 dx [orig:524 D.6165 ] [524])
                (ashift:DI (reg:DI 0 ax [orig:523 D.6165 ] [523])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:233 512 {*ashldi3_1}
     (nil))
(insn 1129 1128 1130 57 (set (reg/f:DI 0 ax [852])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:233 89 {*movdi_internal}
     (nil))
(insn 1130 1129 1131 57 (parallel [
            (set (reg/f:DI 0 ax [orig:525 D.6167 ] [525])
                (plus:DI (reg/f:DI 0 ax [852])
                    (reg:DI 1 dx [orig:524 D.6165 ] [524])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:233 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:524 D.6165 ] [524]))
        (nil)))
(insn 1131 1130 1132 57 (set (reg/f:DI 0 ax [orig:526 D.6168 ] [526])
        (mem/f:DI (reg/f:DI 0 ax [orig:525 D.6167 ] [525]) [0 *_613+0 S8 A64])) com_line.cpp:233 89 {*movdi_internal}
     (nil))
(insn 1132 1131 1133 57 (set (reg/f:DI 1 dx [853])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:233 89 {*movdi_internal}
     (nil))
(insn 1133 1132 1134 57 (parallel [
            (set (reg/f:DI 1 dx [orig:527 D.6170 ] [527])
                (plus:DI (reg/f:DI 1 dx [853])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:233 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 1134 1133 1135 57 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:526 D.6168 ] [526])) com_line.cpp:233 89 {*movdi_internal}
     (nil))
(insn 1135 1134 1136 57 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:527 D.6170 ] [527])) com_line.cpp:233 89 {*movdi_internal}
     (nil))
(call_insn 1136 1135 1137 57 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:233 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1137 1136 1138 57 (set (reg/f:DI 0 ax [854])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:239 89 {*movdi_internal}
     (nil))
(insn 1138 1137 1139 57 (set (reg:SI 0 ax [orig:528 D.6169 ] [528])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [854])
                (const_int 56 [0x38])) [0 preprocess_37(D)->input_file_type+0 S4 A32])) com_line.cpp:239 90 {*movsi_internal}
     (nil))
(insn 1139 1138 1140 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:528 D.6169 ] [528])
            (const_int 0 [0]))) com_line.cpp:239 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1140 1139 1141 57 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1154)
            (pc))) com_line.cpp:239 612 {*jcc_1}
     (nil)
 -> 1154)
;;  succ:       58 (FALLTHRU)
;;              59
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 529 530 531 855 856 857 858 859 860 861
(note 1141 1140 1142 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 1142 1141 1143 58 (set (reg/f:DI 0 ax [855])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1143 1142 1150 58 (parallel [
            (set (reg/f:DI 1 dx [orig:529 D.6170 ] [529])
                (plus:DI (reg/f:DI 0 ax [855])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:240 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 1150 1143 1144 58 (set (reg:DI 0 ax [856])
        (reg/f:DI 1 dx [orig:529 D.6170 ] [529])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1144 1150 1145 58 (set (reg:DI 2 cx [860])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1145 1144 1146 58 (set (reg:DI 4 si [859])
        (reg:DI 0 ax [856])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1146 1145 2040 58 (set (reg:QI 0 ax [861])
        (const_int 0 [0])) com_line.cpp:240 93 {*movqi_internal}
     (nil))
(insn 2040 1146 1147 58 (set (reg:DI 5 di [859])
        (reg:DI 4 si [859])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1147 2040 2039 58 (parallel [
            (set (reg:DI 2 cx [857])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [859]) [0  A8])
                        (reg:QI 0 ax [861])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [857])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [859]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:240 945 {*strlenqi_1}
     (nil))
(insn 2039 1147 1148 58 (set (reg:DI 0 ax [857])
        (reg:DI 2 cx [857])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1148 2039 1149 58 (set (reg:DI 0 ax [858])
        (not:DI (reg:DI 0 ax [857]))) com_line.cpp:240 494 {*one_cmpldi2_1}
     (nil))
(insn 1149 1148 1151 58 (parallel [
            (set (reg:DI 0 ax [orig:530 D.6165 ] [530])
                (plus:DI (reg:DI 0 ax [858])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:240 218 {*adddi_1}
     (nil))
(insn 1151 1149 1152 58 (parallel [
            (set (reg/f:DI 0 ax [orig:531 D.6170 ] [531])
                (plus:DI (reg:DI 0 ax [orig:530 D.6165 ] [530])
                    (reg/f:DI 1 dx [orig:529 D.6170 ] [529])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:240 218 {*adddi_1}
     (nil))
(insn 1152 1151 2041 58 (set (reg:DI 3 bx [1022])
        (const_int 8392585648206865967 [0x7478742e6469662f])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 2041 1152 1153 58 (set (mem:DI (reg/f:DI 0 ax [orig:531 D.6170 ] [531]) [0 MEM[(void *)_620]+0 S8 A8])
        (reg:DI 3 bx [1022])) com_line.cpp:240 89 {*movdi_internal}
     (nil))
(insn 1153 2041 1154 58 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:531 D.6170 ] [531])
                (const_int 8 [0x8])) [0 MEM[(void *)_620]+8 S1 A8])
        (const_int 0 [0])) com_line.cpp:240 93 {*movqi_internal}
     (nil))
;;  succ:       59 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56
;;              58 (FALLTHRU)
;;              57
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 532 533 862
(code_label 1154 1153 1155 59 34 "" [2 uses])
(note 1155 1154 1156 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 1156 1155 1157 59 (set (reg/f:DI 0 ax [862])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:246 89 {*movdi_internal}
     (nil))
(insn 1157 1156 1158 59 (parallel [
            (set (reg/f:DI 0 ax [orig:532 D.6170 ] [532])
                (plus:DI (reg/f:DI 0 ax [862])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:246 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 1158 1157 1159 59 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fbe13120000 *.LC5>)) com_line.cpp:246 89 {*movdi_internal}
     (nil))
(insn 1159 1158 1160 59 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:532 D.6170 ] [532])) com_line.cpp:246 89 {*movdi_internal}
     (nil))
(call_insn 1160 1159 1161 59 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fbe13372510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:246 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1161 1160 1162 59 (set (reg/f:DI 0 ax [orig:533 D.6171 ] [533])
        (reg:DI 0 ax)) com_line.cpp:246 89 {*movdi_internal}
     (nil))
(insn 1162 1161 1163 59 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:533 D.6171 ] [533])) com_line.cpp:246 89 {*movdi_internal}
     (nil))
(insn 1163 1162 1164 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:247 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1164 1163 1165 59 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1171)
            (pc))) com_line.cpp:247 612 {*jcc_1}
     (nil)
 -> 1171)
;;  succ:       60 (FALLTHRU)
;;              61
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59 (FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1165 1164 1166 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 1166 1165 1167 60 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7fbe13155bd0 *.LC30>)) com_line.cpp:248 89 {*movdi_internal}
     (nil))
(call_insn 1167 1166 1168 60 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:248 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1168 1167 1169 60 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:249 90 {*movsi_internal}
     (nil))
(call_insn 1169 1168 1170 60 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fbe135d0ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:249 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1170 1169 1171)
;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 534 863 864
(code_label 1171 1170 1172 61 35 "" [1 uses])
(note 1172 1171 1173 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 1173 1172 1174 61 (set (reg:DI 0 ax [863])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])) com_line.cpp:251 89 {*movdi_internal}
     (nil))
(insn 1174 1173 1175 61 (set (reg:DI 5 di)
        (reg:DI 0 ax [863])) com_line.cpp:251 89 {*movdi_internal}
     (nil))
(call_insn 1175 1174 1176 61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fbe133721b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) com_line.cpp:251 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1176 1175 1177 61 (set (reg/f:DI 0 ax [864])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:254 89 {*movdi_internal}
     (nil))
(insn 1177 1176 1178 61 (set (reg:SI 0 ax [orig:534 D.6169 ] [534])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [864])
                (const_int 56 [0x38])) [0 preprocess_37(D)->input_file_type+0 S4 A32])) com_line.cpp:254 90 {*movsi_internal}
     (nil))
(insn 1178 1177 1179 61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:534 D.6169 ] [534])
            (const_int 0 [0]))) com_line.cpp:254 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1179 1178 1180 61 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1236)
            (pc))) com_line.cpp:254 612 {*jcc_1}
     (nil)
 -> 1236)
;;  succ:       62 (FALLTHRU)
;;              65
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61 (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 535 536 537 538 539 540 541 542 543 544 865 866 867 868 869 870 871 872 873 874 875
(note 1180 1179 1181 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 1181 1180 1182 62 (set (reg:SI 0 ax [865])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:255 90 {*movsi_internal}
     (nil))
(insn 1182 1181 1183 62 (set (reg:DI 0 ax [orig:535 D.6165 ] [535])
        (sign_extend:DI (reg:SI 0 ax [865]))) com_line.cpp:255 142 {*extendsidi2_rex64}
     (nil))
(insn 1183 1182 1184 62 (parallel [
            (set (reg:DI 1 dx [orig:536 D.6165 ] [536])
                (ashift:DI (reg:DI 0 ax [orig:535 D.6165 ] [535])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:255 512 {*ashldi3_1}
     (nil))
(insn 1184 1183 1185 62 (set (reg/f:DI 0 ax [866])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:255 89 {*movdi_internal}
     (nil))
(insn 1185 1184 1186 62 (parallel [
            (set (reg/f:DI 0 ax [orig:537 D.6167 ] [537])
                (plus:DI (reg/f:DI 0 ax [866])
                    (reg:DI 1 dx [orig:536 D.6165 ] [536])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:255 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:536 D.6165 ] [536]))
        (nil)))
(insn 1186 1185 1187 62 (set (reg/f:DI 0 ax [orig:538 D.6168 ] [538])
        (mem/f:DI (reg/f:DI 0 ax [orig:537 D.6167 ] [537]) [0 *_630+0 S8 A64])) com_line.cpp:255 89 {*movdi_internal}
     (nil))
(insn 1187 1186 1188 62 (set (reg/f:DI 1 dx [867])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:255 89 {*movdi_internal}
     (nil))
(insn 1188 1187 1189 62 (parallel [
            (set (reg/f:DI 1 dx [orig:539 D.6170 ] [539])
                (plus:DI (reg/f:DI 1 dx [867])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:255 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 1189 1188 1190 62 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:538 D.6168 ] [538])) com_line.cpp:255 89 {*movdi_internal}
     (nil))
(insn 1190 1189 1191 62 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:539 D.6170 ] [539])) com_line.cpp:255 89 {*movdi_internal}
     (nil))
(call_insn 1191 1190 1192 62 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:255 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1192 1191 1193 62 (set (reg/f:DI 0 ax [868])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1193 1192 1200 62 (parallel [
            (set (reg/f:DI 1 dx [orig:540 D.6170 ] [540])
                (plus:DI (reg/f:DI 0 ax [868])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:256 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 1200 1193 1194 62 (set (reg:DI 0 ax [869])
        (reg/f:DI 1 dx [orig:540 D.6170 ] [540])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1194 1200 1195 62 (set (reg:DI 2 cx [873])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1195 1194 1196 62 (set (reg:DI 4 si [872])
        (reg:DI 0 ax [869])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1196 1195 2044 62 (set (reg:QI 0 ax [874])
        (const_int 0 [0])) com_line.cpp:256 93 {*movqi_internal}
     (nil))
(insn 2044 1196 1197 62 (set (reg:DI 5 di [872])
        (reg:DI 4 si [872])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1197 2044 2043 62 (parallel [
            (set (reg:DI 2 cx [870])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [872]) [0  A8])
                        (reg:QI 0 ax [874])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [870])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [872]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:256 945 {*strlenqi_1}
     (nil))
(insn 2043 1197 1198 62 (set (reg:DI 0 ax [870])
        (reg:DI 2 cx [870])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1198 2043 1199 62 (set (reg:DI 0 ax [871])
        (not:DI (reg:DI 0 ax [870]))) com_line.cpp:256 494 {*one_cmpldi2_1}
     (nil))
(insn 1199 1198 1201 62 (parallel [
            (set (reg:DI 0 ax [orig:541 D.6165 ] [541])
                (plus:DI (reg:DI 0 ax [871])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:256 218 {*adddi_1}
     (nil))
(insn 1201 1199 1202 62 (parallel [
            (set (reg/f:DI 0 ax [orig:542 D.6170 ] [542])
                (plus:DI (reg:DI 0 ax [orig:541 D.6165 ] [541])
                    (reg/f:DI 1 dx [orig:540 D.6170 ] [540])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:256 218 {*adddi_1}
     (nil))
(insn 1202 1201 2045 62 (set (reg:DI 3 bx [1025])
        (const_int 8241992365438562351 [0x726170636f72702f])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 2045 1202 1203 62 (set (mem:DI (reg/f:DI 0 ax [orig:542 D.6170 ] [542]) [0 MEM[(void *)_636]+0 S8 A8])
        (reg:DI 3 bx [1025])) com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1203 2045 1204 62 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:542 D.6170 ] [542])
                (const_int 8 [0x8])) [0 MEM[(void *)_636]+8 S1 A8])
        (const_int 0 [0])) com_line.cpp:256 93 {*movqi_internal}
     (nil))
(insn 1204 1203 1205 62 (set (reg/f:DI 0 ax [875])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:260 89 {*movdi_internal}
     (nil))
(insn 1205 1204 1206 62 (parallel [
            (set (reg/f:DI 0 ax [orig:543 D.6170 ] [543])
                (plus:DI (reg/f:DI 0 ax [875])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:260 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 1206 1205 1207 62 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7fbe13155510 *.LC18>)) com_line.cpp:260 89 {*movdi_internal}
     (nil))
(insn 1207 1206 1208 62 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:543 D.6170 ] [543])) com_line.cpp:260 89 {*movdi_internal}
     (nil))
(call_insn 1208 1207 1209 62 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fbe13372510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) com_line.cpp:260 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1209 1208 1210 62 (set (reg/f:DI 0 ax [orig:544 D.6171 ] [544])
        (reg:DI 0 ax)) com_line.cpp:260 89 {*movdi_internal}
     (nil))
(insn 1210 1209 1211 62 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:544 D.6171 ] [544])) com_line.cpp:260 89 {*movdi_internal}
     (nil))
(insn 1211 1210 1212 62 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:261 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1212 1211 1213 62 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1219)
            (pc))) com_line.cpp:261 612 {*jcc_1}
     (nil)
 -> 1219)
;;  succ:       63 (FALLTHRU)
;;              64
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       62 (FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1213 1212 1214 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 1214 1213 1215 63 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7fbe13155c60 *.LC31>)) com_line.cpp:262 89 {*movdi_internal}
     (nil))
(call_insn 1215 1214 1216 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:262 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1216 1215 1217 63 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:263 90 {*movsi_internal}
     (nil))
(call_insn 1217 1216 1218 63 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fbe135d0ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:263 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1218 1217 1219)
;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       62
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 545 546 547 548 549 550 876 877 878 879
(code_label 1219 1218 1220 64 37 "" [1 uses])
(note 1220 1219 1221 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 1221 1220 1222 64 (set (reg:DI 0 ax [876])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5040 [0xffffffffffffec50])) [0 check_file+0 S8 A64])) com_line.cpp:265 89 {*movdi_internal}
     (nil))
(insn 1222 1221 1223 64 (set (reg:DI 5 di)
        (reg:DI 0 ax [876])) com_line.cpp:265 89 {*movdi_internal}
     (nil))
(call_insn 1223 1222 1224 64 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fbe133721b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) com_line.cpp:265 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1224 1223 1225 64 (set (reg:SI 0 ax [877])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:268 90 {*movsi_internal}
     (nil))
(insn 1225 1224 1226 64 (set (reg:DI 0 ax [orig:545 D.6165 ] [545])
        (sign_extend:DI (reg:SI 0 ax [877]))) com_line.cpp:268 142 {*extendsidi2_rex64}
     (nil))
(insn 1226 1225 1227 64 (parallel [
            (set (reg:DI 1 dx [orig:546 D.6165 ] [546])
                (ashift:DI (reg:DI 0 ax [orig:545 D.6165 ] [545])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:268 512 {*ashldi3_1}
     (nil))
(insn 1227 1226 1228 64 (set (reg/f:DI 0 ax [878])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:268 89 {*movdi_internal}
     (nil))
(insn 1228 1227 1229 64 (parallel [
            (set (reg/f:DI 0 ax [orig:547 D.6167 ] [547])
                (plus:DI (reg/f:DI 0 ax [878])
                    (reg:DI 1 dx [orig:546 D.6165 ] [546])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:268 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:546 D.6165 ] [546]))
        (nil)))
(insn 1229 1228 1230 64 (set (reg/f:DI 0 ax [orig:548 D.6168 ] [548])
        (mem/f:DI (reg/f:DI 0 ax [orig:547 D.6167 ] [547]) [0 *_645+0 S8 A64])) com_line.cpp:268 89 {*movdi_internal}
     (nil))
(insn 1230 1229 1231 64 (set (reg/f:DI 1 dx [879])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5080 [0xffffffffffffec28])) [0 procpar_info+0 S8 A64])) com_line.cpp:268 89 {*movdi_internal}
     (nil))
(insn 1231 1230 1232 64 (parallel [
            (set (reg/f:DI 1 dx [orig:549 D.6178 ] [549])
                (plus:DI (reg/f:DI 1 dx [879])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:268 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5064 [0xffffffffffffec38])) [0 procpar_info+0 S8 A64])
            (const_int 376 [0x178]))
        (nil)))
(insn 1232 1231 1233 64 (parallel [
            (set (reg/f:DI 1 dx [orig:550 D.6170 ] [550])
                (plus:DI (reg/f:DI 1 dx [orig:549 D.6178 ] [549])
                    (const_int 34 [0x22])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:268 218 {*adddi_1}
     (nil))
(insn 1233 1232 1234 64 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:548 D.6168 ] [548])) com_line.cpp:268 89 {*movdi_internal}
     (nil))
(insn 1234 1233 1235 64 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:550 D.6170 ] [550])) com_line.cpp:268 89 {*movdi_internal}
     (nil))
(call_insn 1235 1234 1236 64 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:268 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
;;  succ:       65 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61
;;              64 (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 551 552 553 880 881 882
(code_label 1236 1235 1237 65 36 "" [1 uses])
(note 1237 1236 1238 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 1238 1237 1239 65 (set (reg/f:DI 0 ax [880])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:271 89 {*movdi_internal}
     (nil))
(insn 1239 1238 1240 65 (parallel [
            (set (reg/f:DI 0 ax [orig:551 D.6167 ] [551])
                (plus:DI (reg/f:DI 0 ax [880])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:271 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 1240 1239 1241 65 (set (reg/f:DI 0 ax [orig:552 D.6168 ] [552])
        (mem/f:DI (reg/f:DI 0 ax [orig:551 D.6167 ] [551]) [0 *_652+0 S8 A64])) com_line.cpp:271 89 {*movdi_internal}
     (nil))
(insn 1241 1240 1242 65 (set (reg/f:DI 1 dx [881])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:271 89 {*movdi_internal}
     (nil))
(insn 1242 1241 1243 65 (parallel [
            (set (reg/f:DI 1 dx [orig:553 D.6170 ] [553])
                (plus:DI (reg/f:DI 1 dx [881])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:271 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1243 1242 1244 65 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:552 D.6168 ] [552])) com_line.cpp:271 89 {*movdi_internal}
     (nil))
(insn 1244 1243 1245 65 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:553 D.6170 ] [553])) com_line.cpp:271 89 {*movdi_internal}
     (nil))
(call_insn 1245 1244 1246 65 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:271 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1246 1245 1247 65 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (const_int 0 [0])) com_line.cpp:272 89 {*movdi_internal}
     (nil))
(insn 1247 1246 1248 65 (set (reg:SI 0 ax [orig:882 found_extension ] [882])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5044 [0xffffffffffffec4c])) [0 found_extension+0 S4 A32])) com_line.cpp:276 90 {*movsi_internal}
     (nil))
(insn 1248 1247 1249 65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:882 found_extension ] [882])
            (const_int 0 [0]))) com_line.cpp:276 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1249 1248 1253 65 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1362)
            (pc))) com_line.cpp:276 612 {*jcc_1}
     (nil)
 -> 1362)
;;  succ:       66 (FALLTHRU)
;;              74
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65 (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 554 883 884
(note 1253 1249 1254 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 1254 1253 1255 66 (set (reg/f:DI 0 ax [883])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:278 89 {*movdi_internal}
     (nil))
(insn 1255 1254 1256 66 (parallel [
            (set (reg/f:DI 0 ax [orig:554 D.6170 ] [554])
                (plus:DI (reg/f:DI 0 ax [883])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:278 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1256 1255 1257 66 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fbe13155090 *.LC10>)) com_line.cpp:278 89 {*movdi_internal}
     (nil))
(insn 1257 1256 1258 66 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:554 D.6170 ] [554])) com_line.cpp:278 89 {*movdi_internal}
     (nil))
(call_insn/i 1258 1257 1259 66 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:278 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1259 1258 1260 66 (set (reg:DI 0 ax [884])
        (reg:DI 0 ax)) com_line.cpp:278 89 {*movdi_internal}
     (nil))
(insn 1260 1259 1261 66 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [884])) com_line.cpp:278 89 {*movdi_internal}
     (nil))
(insn 1261 1260 1262 66 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:279 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1262 1261 1267 66 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1985)
            (pc))) com_line.cpp:279 612 {*jcc_1}
     (nil)
 -> 1985)
;;  succ:       119
;;              67 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       66 (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 555 885 886
(note 1267 1262 1268 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 1268 1267 1269 67 (set (reg/f:DI 0 ax [885])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:280 89 {*movdi_internal}
     (nil))
(insn 1269 1268 1270 67 (parallel [
            (set (reg/f:DI 0 ax [orig:555 D.6170 ] [555])
                (plus:DI (reg/f:DI 0 ax [885])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:280 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1270 1269 1271 67 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fbe13155120 *.LC11>)) com_line.cpp:280 89 {*movdi_internal}
     (nil))
(insn 1271 1270 1272 67 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:555 D.6170 ] [555])) com_line.cpp:280 89 {*movdi_internal}
     (nil))
(call_insn/i 1272 1271 1273 67 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:280 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1273 1272 1274 67 (set (reg:DI 0 ax [886])
        (reg:DI 0 ax)) com_line.cpp:280 89 {*movdi_internal}
     (nil))
(insn 1274 1273 1275 67 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [886])) com_line.cpp:280 89 {*movdi_internal}
     (nil))
(insn 1275 1274 1276 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:281 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1276 1275 1281 67 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1990)
            (pc))) com_line.cpp:281 612 {*jcc_1}
     (nil)
 -> 1990)
;;  succ:       120
;;              68 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 (FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 556 887 888
(note 1281 1276 1282 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 1282 1281 1283 68 (set (reg/f:DI 0 ax [887])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:282 89 {*movdi_internal}
     (nil))
(insn 1283 1282 1284 68 (parallel [
            (set (reg/f:DI 0 ax [orig:556 D.6170 ] [556])
                (plus:DI (reg/f:DI 0 ax [887])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:282 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1284 1283 1285 68 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fbe131551b0 *.LC12>)) com_line.cpp:282 89 {*movdi_internal}
     (nil))
(insn 1285 1284 1286 68 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:556 D.6170 ] [556])) com_line.cpp:282 89 {*movdi_internal}
     (nil))
(call_insn/i 1286 1285 1287 68 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:282 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1287 1286 1288 68 (set (reg:DI 0 ax [888])
        (reg:DI 0 ax)) com_line.cpp:282 89 {*movdi_internal}
     (nil))
(insn 1288 1287 1289 68 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [888])) com_line.cpp:282 89 {*movdi_internal}
     (nil))
(insn 1289 1288 1290 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:283 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1290 1289 1295 68 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1995)
            (pc))) com_line.cpp:283 612 {*jcc_1}
     (nil)
 -> 1995)
;;  succ:       121
;;              69 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 557 889 890
(note 1295 1290 1296 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 1296 1295 1297 69 (set (reg/f:DI 0 ax [889])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1297 1296 1298 69 (parallel [
            (set (reg/f:DI 0 ax [orig:557 D.6170 ] [557])
                (plus:DI (reg/f:DI 0 ax [889])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:284 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1298 1297 1299 69 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fbe13155240 *.LC13>)) com_line.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1299 1298 1300 69 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:557 D.6170 ] [557])) com_line.cpp:284 89 {*movdi_internal}
     (nil))
(call_insn/i 1300 1299 1301 69 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:284 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1301 1300 1302 69 (set (reg:DI 0 ax [890])
        (reg:DI 0 ax)) com_line.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1302 1301 1303 69 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [890])) com_line.cpp:284 89 {*movdi_internal}
     (nil))
(insn 1303 1302 1304 69 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:285 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1304 1303 1309 69 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2000)
            (pc))) com_line.cpp:285 612 {*jcc_1}
     (nil)
 -> 2000)
;;  succ:       122
;;              70 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69 (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 558 891 892
(note 1309 1304 1310 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 1310 1309 1311 70 (set (reg/f:DI 0 ax [891])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:286 89 {*movdi_internal}
     (nil))
(insn 1311 1310 1312 70 (parallel [
            (set (reg/f:DI 0 ax [orig:558 D.6170 ] [558])
                (plus:DI (reg/f:DI 0 ax [891])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:286 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1312 1311 1313 70 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7fbe131552d0 *.LC14>)) com_line.cpp:286 89 {*movdi_internal}
     (nil))
(insn 1313 1312 1314 70 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:558 D.6170 ] [558])) com_line.cpp:286 89 {*movdi_internal}
     (nil))
(call_insn/i 1314 1313 1315 70 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:286 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1315 1314 1316 70 (set (reg:DI 0 ax [892])
        (reg:DI 0 ax)) com_line.cpp:286 89 {*movdi_internal}
     (nil))
(insn 1316 1315 1317 70 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [892])) com_line.cpp:286 89 {*movdi_internal}
     (nil))
(insn 1317 1316 1318 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:287 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1318 1317 1323 70 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2005)
            (pc))) com_line.cpp:287 612 {*jcc_1}
     (nil)
 -> 2005)
;;  succ:       123
;;              71 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 559 893 894
(note 1323 1318 1324 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 1324 1323 1325 71 (set (reg/f:DI 0 ax [893])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:288 89 {*movdi_internal}
     (nil))
(insn 1325 1324 1326 71 (parallel [
            (set (reg/f:DI 0 ax [orig:559 D.6170 ] [559])
                (plus:DI (reg/f:DI 0 ax [893])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:288 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1326 1325 1327 71 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7fbe13155360 *.LC15>)) com_line.cpp:288 89 {*movdi_internal}
     (nil))
(insn 1327 1326 1328 71 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:559 D.6170 ] [559])) com_line.cpp:288 89 {*movdi_internal}
     (nil))
(call_insn/i 1328 1327 1329 71 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:288 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1329 1328 1330 71 (set (reg:DI 0 ax [894])
        (reg:DI 0 ax)) com_line.cpp:288 89 {*movdi_internal}
     (nil))
(insn 1330 1329 1331 71 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [894])) com_line.cpp:288 89 {*movdi_internal}
     (nil))
(insn 1331 1330 1332 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:289 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1332 1331 1337 71 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2010)
            (pc))) com_line.cpp:289 612 {*jcc_1}
     (nil)
 -> 2010)
;;  succ:       124
;;              72 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 560 895 896
(note 1337 1332 1338 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 1338 1337 1339 72 (set (reg/f:DI 0 ax [895])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:290 89 {*movdi_internal}
     (nil))
(insn 1339 1338 1340 72 (parallel [
            (set (reg/f:DI 0 ax [orig:560 D.6170 ] [560])
                (plus:DI (reg/f:DI 0 ax [895])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:290 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1340 1339 1341 72 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fbe131553f0 *.LC16>)) com_line.cpp:290 89 {*movdi_internal}
     (nil))
(insn 1341 1340 1342 72 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:560 D.6170 ] [560])) com_line.cpp:290 89 {*movdi_internal}
     (nil))
(call_insn/i 1342 1341 1343 72 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:290 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1343 1342 1344 72 (set (reg:DI 0 ax [896])
        (reg:DI 0 ax)) com_line.cpp:290 89 {*movdi_internal}
     (nil))
(insn 1344 1343 1345 72 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [896])) com_line.cpp:290 89 {*movdi_internal}
     (nil))
(insn 1345 1344 1346 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:291 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1346 1345 1351 72 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2015)
            (pc))) com_line.cpp:291 612 {*jcc_1}
     (nil)
 -> 2015)
;;  succ:       125
;;              73 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 119, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 561 897 898
(note 1351 1346 1352 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 1352 1351 1353 73 (set (reg/f:DI 0 ax [897])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:292 89 {*movdi_internal}
     (nil))
(insn 1353 1352 1354 73 (parallel [
            (set (reg/f:DI 0 ax [orig:561 D.6170 ] [561])
                (plus:DI (reg/f:DI 0 ax [897])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:292 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1354 1353 1355 73 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7fbe13155480 *.LC17>)) com_line.cpp:292 89 {*movdi_internal}
     (nil))
(insn 1355 1354 1356 73 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:561 D.6170 ] [561])) com_line.cpp:292 89 {*movdi_internal}
     (nil))
(call_insn/i 1356 1355 1357 73 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*strstr") [flags 0x41]  <function_decl 0x7fbe135ae5e8 strstr>) [0 strstr S1 A8])
            (const_int 0 [0]))) com_line.cpp:292 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1357 1356 1358 73 (set (reg:DI 0 ax [898])
        (reg:DI 0 ax)) com_line.cpp:292 89 {*movdi_internal}
     (nil))
(insn 1358 1357 1359 73 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
        (reg:DI 0 ax [898])) com_line.cpp:292 89 {*movdi_internal}
     (nil))
(insn 1359 1358 1982 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:293 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1982 1359 1983 73 (set (pc)
        (label_ref 1362)) 654 {jump}
     (nil)
 -> 1362)
;;  succ:       74 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1983 1982 1985)
;; basic block 119, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 120, flags: (NEW, RTL, MODIFIED)
;;  pred:       66
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1985 1983 1984 119 75 "" [1 uses])
(note 1984 1985 1986 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(insn 1986 1984 1987 119 (const_int 0 [0]) com_line.cpp:279 684 {nop}
     (nil))
(jump_insn 1987 1986 1988 119 (set (pc)
        (label_ref 1362)) 654 {jump}
     (nil)
 -> 1362)
;;  succ:       74 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1988 1987 1990)
;; basic block 120, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 119, next block 121, flags: (NEW, RTL, MODIFIED)
;;  pred:       67
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1990 1988 1989 120 76 "" [1 uses])
(note 1989 1990 1991 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(insn 1991 1989 1992 120 (const_int 0 [0]) com_line.cpp:281 684 {nop}
     (nil))
(jump_insn 1992 1991 1993 120 (set (pc)
        (label_ref 1362)) 654 {jump}
     (nil)
 -> 1362)
;;  succ:       74 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1993 1992 1995)
;; basic block 121, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 120, next block 122, flags: (NEW, RTL, MODIFIED)
;;  pred:       68
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1995 1993 1994 121 77 "" [1 uses])
(note 1994 1995 1996 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(insn 1996 1994 1997 121 (const_int 0 [0]) com_line.cpp:283 684 {nop}
     (nil))
(jump_insn 1997 1996 1998 121 (set (pc)
        (label_ref 1362)) 654 {jump}
     (nil)
 -> 1362)
;;  succ:       74 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1998 1997 2000)
;; basic block 122, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 121, next block 123, flags: (NEW, RTL, MODIFIED)
;;  pred:       69
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 2000 1998 1999 122 78 "" [1 uses])
(note 1999 2000 2001 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn 2001 1999 2002 122 (const_int 0 [0]) com_line.cpp:285 684 {nop}
     (nil))
(jump_insn 2002 2001 2003 122 (set (pc)
        (label_ref 1362)) 654 {jump}
     (nil)
 -> 1362)
;;  succ:       74 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 2003 2002 2005)
;; basic block 123, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 122, next block 124, flags: (NEW, RTL, MODIFIED)
;;  pred:       70
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 2005 2003 2004 123 79 "" [1 uses])
(note 2004 2005 2006 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(insn 2006 2004 2007 123 (const_int 0 [0]) com_line.cpp:287 684 {nop}
     (nil))
(jump_insn 2007 2006 2008 123 (set (pc)
        (label_ref 1362)) 654 {jump}
     (nil)
 -> 1362)
;;  succ:       74 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 2008 2007 2010)
;; basic block 124, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 123, next block 125, flags: (NEW, RTL, MODIFIED)
;;  pred:       71
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 2010 2008 2009 124 80 "" [1 uses])
(note 2009 2010 2011 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(insn 2011 2009 2012 124 (const_int 0 [0]) com_line.cpp:289 684 {nop}
     (nil))
(jump_insn 2012 2011 2013 124 (set (pc)
        (label_ref 1362)) 654 {jump}
     (nil)
 -> 1362)
;;  succ:       74 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 2013 2012 2015)
;; basic block 125, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 124, next block 74, flags: (NEW, RTL, MODIFIED)
;;  pred:       72
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 2015 2013 2014 125 81 "" [1 uses])
(note 2014 2015 2016 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(insn 2016 2014 1362 125 (const_int 0 [0]) com_line.cpp:291 684 {nop}
     (nil))
;;  succ:       74 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 125, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65
;;              73 [100.0%] 
;;              119 [100.0%] 
;;              120 [100.0%] 
;;              121 [100.0%] 
;;              122 [100.0%] 
;;              123 [100.0%] 
;;              125 [100.0%]  (FALLTHRU)
;;              124 [100.0%] 
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1362 2016 1363 74 38 "" [8 uses])
(note 1363 1362 1364 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 1364 1363 1365 74 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])
            (const_int 0 [0]))) com_line.cpp:295 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1365 1364 1366 74 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1381)
            (pc))) com_line.cpp:295 612 {*jcc_1}
     (nil)
 -> 1381)
;;  succ:       75 (FALLTHRU)
;;              76
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       74 (FALLTHRU)
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 562 563 564 899 900 901 902 903 904 905
(note 1366 1365 1367 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 1367 1366 1368 75 (set (reg/f:DI 0 ax [899])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1368 1367 1375 75 (parallel [
            (set (reg/f:DI 1 dx [orig:562 D.6170 ] [562])
                (plus:DI (reg/f:DI 0 ax [899])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:296 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1375 1368 1369 75 (set (reg:DI 0 ax [900])
        (reg/f:DI 1 dx [orig:562 D.6170 ] [562])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1369 1375 1370 75 (set (reg:DI 2 cx [904])
        (const_int -1 [0xffffffffffffffff])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1370 1369 1371 75 (set (reg:DI 4 si [903])
        (reg:DI 0 ax [900])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1371 1370 2048 75 (set (reg:QI 0 ax [905])
        (const_int 0 [0])) com_line.cpp:296 93 {*movqi_internal}
     (nil))
(insn 2048 1371 1372 75 (set (reg:DI 5 di [903])
        (reg:DI 4 si [903])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1372 2048 2047 75 (parallel [
            (set (reg:DI 2 cx [901])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [903]) [0  A8])
                        (reg:QI 0 ax [905])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [901])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [903]))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:296 945 {*strlenqi_1}
     (nil))
(insn 2047 1372 1373 75 (set (reg:DI 0 ax [901])
        (reg:DI 2 cx [901])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1373 2047 1374 75 (set (reg:DI 0 ax [902])
        (not:DI (reg:DI 0 ax [901]))) com_line.cpp:296 494 {*one_cmpldi2_1}
     (nil))
(insn 1374 1373 1376 75 (parallel [
            (set (reg:DI 0 ax [orig:563 D.6165 ] [563])
                (plus:DI (reg:DI 0 ax [902])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:296 218 {*adddi_1}
     (nil))
(insn 1376 1374 1377 75 (parallel [
            (set (reg/f:DI 0 ax [orig:564 D.6170 ] [564])
                (plus:DI (reg:DI 0 ax [orig:563 D.6165 ] [563])
                    (reg/f:DI 1 dx [orig:562 D.6170 ] [562])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:296 218 {*adddi_1}
     (nil))
(insn 1377 1376 2049 75 (set (reg:DI 3 bx [1028])
        (const_int 8386094131808466271 [0x7461642e736e755f])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 2049 1377 1378 75 (set (mem:DI (reg/f:DI 0 ax [orig:564 D.6170 ] [564]) [0 MEM[(void *)_675]+0 S8 A8])
        (reg:DI 3 bx [1028])) com_line.cpp:296 89 {*movdi_internal}
     (nil))
(insn 1378 2049 1915 75 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:564 D.6170 ] [564])
                (const_int 8 [0x8])) [0 MEM[(void *)_675]+8 S1 A8])
        (const_int 0 [0])) com_line.cpp:296 93 {*movqi_internal}
     (nil))
(jump_insn 1915 1378 1916 75 (set (pc)
        (label_ref 1877)) com_line.cpp:295 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1916 1915 1381)
;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       74
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 906
(code_label 1381 1916 1382 76 47 "" [1 uses])
(note 1382 1381 1383 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 1383 1382 1384 76 (set (reg/f:DI 0 ax [906])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5032 [0xffffffffffffec58])) [0 temp_extension+0 S8 A64])) com_line.cpp:299 89 {*movdi_internal}
     (nil))
(insn 1384 1383 2050 76 (set (reg:DI 3 bx [1029])
        (const_int 8386094131808466271 [0x7461642e736e755f])) com_line.cpp:299 89 {*movdi_internal}
     (nil))
(insn 2050 1384 1385 76 (set (mem:DI (reg/f:DI 0 ax [906]) [0 MEM[(void *)temp_extension_12]+0 S8 A8])
        (reg:DI 3 bx [1029])) com_line.cpp:299 89 {*movdi_internal}
     (nil))
(insn 1385 2050 1917 76 (set (mem:QI (plus:DI (reg/f:DI 0 ax [906])
                (const_int 8 [0x8])) [0 MEM[(void *)temp_extension_12]+8 S1 A8])
        (const_int 0 [0])) com_line.cpp:299 93 {*movqi_internal}
     (nil))
(jump_insn 1917 1385 1918 76 (set (pc)
        (label_ref 1877)) com_line.cpp:295 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1918 1917 1390)
;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 235 236 237 238 239 907 908
(code_label 1390 1918 1391 77 31 "" [1 uses])
(note 1391 1390 1392 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 1392 1391 1393 77 (set (reg:SI 0 ax [907])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:326 90 {*movsi_internal}
     (nil))
(insn 1393 1392 1394 77 (set (reg:DI 0 ax [orig:235 D.6165 ] [235])
        (sign_extend:DI (reg:SI 0 ax [907]))) com_line.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 1394 1393 1395 77 (parallel [
            (set (reg:DI 1 dx [orig:236 D.6165 ] [236])
                (ashift:DI (reg:DI 0 ax [orig:235 D.6165 ] [235])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:326 512 {*ashldi3_1}
     (nil))
(insn 1395 1394 1396 77 (set (reg/f:DI 0 ax [908])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:326 89 {*movdi_internal}
     (nil))
(insn 1396 1395 1397 77 (parallel [
            (set (reg/f:DI 0 ax [orig:237 D.6167 ] [237])
                (plus:DI (reg/f:DI 0 ax [908])
                    (reg:DI 1 dx [orig:236 D.6165 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:326 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:236 D.6165 ] [236]))
        (nil)))
(insn 1397 1396 1398 77 (set (reg/f:DI 0 ax [orig:238 D.6168 ] [238])
        (mem/f:DI (reg/f:DI 0 ax [orig:237 D.6167 ] [237]) [0 *_265+0 S8 A64])) com_line.cpp:326 89 {*movdi_internal}
     (nil))
(insn 1398 1397 1399 77 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7fbe13155cf0 *.LC32>)) com_line.cpp:326 89 {*movdi_internal}
     (nil))
(insn 1399 1398 1400 77 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:238 D.6168 ] [238])) com_line.cpp:326 89 {*movdi_internal}
     (nil))
(call_insn/i 1400 1399 1401 77 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:326 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1401 1400 1402 77 (set (reg:SI 0 ax [orig:239 D.6169 ] [239])
        (reg:SI 0 ax)) com_line.cpp:326 90 {*movsi_internal}
     (nil))
(insn 1402 1401 1403 77 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:239 D.6169 ] [239])
            (const_int 0 [0]))) com_line.cpp:326 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1403 1402 1404 77 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1454)
            (pc))) com_line.cpp:326 612 {*jcc_1}
     (nil)
 -> 1454)
;;  succ:       78 (FALLTHRU)
;;              81
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       77 (FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 240 241 242 243 244 909 910 911 912
(note 1404 1403 1405 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 1405 1404 1406 78 (set (reg/f:DI 0 ax [909])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1406 1405 1407 78 (set (reg:SI 0 ax [orig:240 D.6169 ] [240])
        (mem:SI (reg/f:DI 0 ax [909]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:328 90 {*movsi_internal}
     (nil))
(insn 1407 1406 1408 78 (set (reg:DI 1 dx [orig:241 D.6165 ] [241])
        (sign_extend:DI (reg:SI 0 ax [orig:240 D.6169 ] [240]))) com_line.cpp:328 142 {*extendsidi2_rex64}
     (nil))
(insn 1408 1407 1409 78 (set (reg:DI 0 ax [910])
        (reg:DI 1 dx [orig:241 D.6165 ] [241])) com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1409 1408 1410 78 (parallel [
            (set (reg:DI 0 ax [910])
                (ashift:DI (reg:DI 0 ax [910])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:328 512 {*ashldi3_1}
     (nil))
(insn 1410 1409 1411 78 (parallel [
            (set (reg:DI 0 ax [910])
                (plus:DI (reg:DI 0 ax [910])
                    (reg:DI 1 dx [orig:241 D.6165 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:328 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:241 D.6165 ] [241])
            (const_int 9 [0x9]))
        (nil)))
(insn 1411 1410 1412 78 (parallel [
            (set (reg:DI 0 ax [911])
                (ashift:DI (reg:DI 0 ax [910])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:328 512 {*ashldi3_1}
     (nil))
(insn 1412 1411 1413 78 (set (reg:DI 0 ax [910])
        (reg:DI 0 ax [911])) com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1413 1412 1414 78 (set (reg:DI 1 dx [orig:242 D.6165 ] [242])
        (reg:DI 0 ax [910])) com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1414 1413 1415 78 (set (reg/f:DI 0 ax [912])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1415 1414 1416 78 (parallel [
            (set (reg/f:DI 0 ax [orig:243 D.6166 ] [243])
                (plus:DI (reg/f:DI 0 ax [912])
                    (reg:DI 1 dx [orig:242 D.6165 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:328 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:242 D.6165 ] [242]))
        (nil)))
(insn 1416 1415 1417 78 (set (reg:SI 0 ax [orig:244 D.6169 ] [244])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:243 D.6166 ] [243])
                (const_int 8 [0x8])) [0 _271->scaleby+0 S4 A32])) com_line.cpp:328 90 {*movsi_internal}
     (nil))
(insn 1417 1416 1418 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:244 D.6169 ] [244])
            (const_int 0 [0]))) com_line.cpp:328 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1418 1417 1419 78 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1447)
            (pc))) com_line.cpp:328 612 {*jcc_1}
     (nil)
 -> 1447)
;;  succ:       79 (FALLTHRU)
;;              80
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 246 247 248 249 250 251 252 913 914 915 916 917 918 919 920 921
(note 1419 1418 1420 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 1420 1419 1421 79 (set (reg/f:DI 0 ax [913])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:329 89 {*movdi_internal}
     (nil))
(insn 1421 1420 1422 79 (set (reg:SI 0 ax [orig:245 D.6169 ] [245])
        (mem:SI (reg/f:DI 0 ax [913]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:329 90 {*movsi_internal}
     (nil))
(insn 1422 1421 1423 79 (set (reg:DI 1 dx [orig:246 D.6165 ] [246])
        (sign_extend:DI (reg:SI 0 ax [orig:245 D.6169 ] [245]))) com_line.cpp:329 142 {*extendsidi2_rex64}
     (nil))
(insn 1423 1422 1424 79 (set (reg:DI 0 ax [914])
        (reg:DI 1 dx [orig:246 D.6165 ] [246])) com_line.cpp:329 89 {*movdi_internal}
     (nil))
(insn 1424 1423 1425 79 (parallel [
            (set (reg:DI 0 ax [914])
                (ashift:DI (reg:DI 0 ax [914])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:329 512 {*ashldi3_1}
     (nil))
(insn 1425 1424 1426 79 (parallel [
            (set (reg:DI 0 ax [914])
                (plus:DI (reg:DI 0 ax [914])
                    (reg:DI 1 dx [orig:246 D.6165 ] [246])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:329 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:246 D.6165 ] [246])
            (const_int 9 [0x9]))
        (nil)))
(insn 1426 1425 1427 79 (parallel [
            (set (reg:DI 0 ax [915])
                (ashift:DI (reg:DI 0 ax [914])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:329 512 {*ashldi3_1}
     (nil))
(insn 1427 1426 1428 79 (set (reg:DI 0 ax [914])
        (reg:DI 0 ax [915])) com_line.cpp:329 89 {*movdi_internal}
     (nil))
(insn 1428 1427 1429 79 (set (reg:DI 1 dx [orig:247 D.6165 ] [247])
        (reg:DI 0 ax [914])) com_line.cpp:329 89 {*movdi_internal}
     (nil))
(insn 1429 1428 1430 79 (set (reg/f:DI 0 ax [916])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:329 89 {*movdi_internal}
     (nil))
(insn 1430 1429 1431 79 (parallel [
            (set (reg/f:DI 0 ax [orig:248 D.6166 ] [248])
                (plus:DI (reg/f:DI 0 ax [916])
                    (reg:DI 1 dx [orig:247 D.6165 ] [247])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:329 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:247 D.6165 ] [247]))
        (nil)))
(insn 1431 1430 1432 79 (set (mem/j:SI (reg/f:DI 0 ax [orig:248 D.6166 ] [248]) [0 _276->fid_scale+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:329 90 {*movsi_internal}
     (nil))
(insn 1432 1431 1433 79 (set (reg/f:DI 0 ax [917])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:330 89 {*movdi_internal}
     (nil))
(insn 1433 1432 1434 79 (set (reg:SI 0 ax [orig:249 D.6169 ] [249])
        (mem:SI (reg/f:DI 0 ax [917]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:330 90 {*movsi_internal}
     (nil))
(insn 1434 1433 1435 79 (set (reg:DI 1 dx [orig:250 D.6165 ] [250])
        (sign_extend:DI (reg:SI 0 ax [orig:249 D.6169 ] [249]))) com_line.cpp:330 142 {*extendsidi2_rex64}
     (nil))
(insn 1435 1434 1436 79 (set (reg:DI 0 ax [918])
        (reg:DI 1 dx [orig:250 D.6165 ] [250])) com_line.cpp:330 89 {*movdi_internal}
     (nil))
(insn 1436 1435 1437 79 (parallel [
            (set (reg:DI 0 ax [918])
                (ashift:DI (reg:DI 0 ax [918])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:330 512 {*ashldi3_1}
     (nil))
(insn 1437 1436 1438 79 (parallel [
            (set (reg:DI 0 ax [918])
                (plus:DI (reg:DI 0 ax [918])
                    (reg:DI 1 dx [orig:250 D.6165 ] [250])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:330 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:250 D.6165 ] [250])
            (const_int 9 [0x9]))
        (nil)))
(insn 1438 1437 1439 79 (parallel [
            (set (reg:DI 0 ax [919])
                (ashift:DI (reg:DI 0 ax [918])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:330 512 {*ashldi3_1}
     (nil))
(insn 1439 1438 1440 79 (set (reg:DI 0 ax [918])
        (reg:DI 0 ax [919])) com_line.cpp:330 89 {*movdi_internal}
     (nil))
(insn 1440 1439 1441 79 (set (reg:DI 1 dx [orig:251 D.6165 ] [251])
        (reg:DI 0 ax [918])) com_line.cpp:330 89 {*movdi_internal}
     (nil))
(insn 1441 1440 1442 79 (set (reg/f:DI 0 ax [920])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:330 89 {*movdi_internal}
     (nil))
(insn 1442 1441 1443 79 (parallel [
            (set (reg/f:DI 0 ax [orig:252 D.6166 ] [252])
                (plus:DI (reg/f:DI 0 ax [920])
                    (reg:DI 1 dx [orig:251 D.6165 ] [251])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:330 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:251 D.6165 ] [251]))
        (nil)))
(insn 1443 1442 1444 79 (set (reg:SF 21 xmm0 [921])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) com_line.cpp:330 129 {*movsf_internal}
     (nil))
(insn 1444 1443 1919 79 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:252 D.6166 ] [252])
                (const_int 4 [0x4])) [0 _281->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [921])) com_line.cpp:330 129 {*movsf_internal}
     (nil))
(jump_insn 1919 1444 1920 79 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1920 1919 1447)
;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 1447 1920 1448 80 51 "" [1 uses])
(note 1448 1447 1449 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 1449 1448 1450 80 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7fbe13155d80 *.LC33>)) com_line.cpp:332 89 {*movdi_internal}
     (nil))
(call_insn 1450 1449 1451 80 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:332 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1451 1450 1452 80 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:333 90 {*movsi_internal}
     (nil))
(call_insn 1452 1451 1453 80 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fbe135d0ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:333 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1453 1452 1454)
;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       77
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 253 254 255 256 257 922 923
(code_label 1454 1453 1455 81 50 "" [1 uses])
(note 1455 1454 1456 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 1456 1455 1457 81 (set (reg:SI 0 ax [922])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:336 90 {*movsi_internal}
     (nil))
(insn 1457 1456 1458 81 (set (reg:DI 0 ax [orig:253 D.6165 ] [253])
        (sign_extend:DI (reg:SI 0 ax [922]))) com_line.cpp:336 142 {*extendsidi2_rex64}
     (nil))
(insn 1458 1457 1459 81 (parallel [
            (set (reg:DI 1 dx [orig:254 D.6165 ] [254])
                (ashift:DI (reg:DI 0 ax [orig:253 D.6165 ] [253])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:336 512 {*ashldi3_1}
     (nil))
(insn 1459 1458 1460 81 (set (reg/f:DI 0 ax [923])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:336 89 {*movdi_internal}
     (nil))
(insn 1460 1459 1461 81 (parallel [
            (set (reg/f:DI 0 ax [orig:255 D.6167 ] [255])
                (plus:DI (reg/f:DI 0 ax [923])
                    (reg:DI 1 dx [orig:254 D.6165 ] [254])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:336 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:254 D.6165 ] [254]))
        (nil)))
(insn 1461 1460 1462 81 (set (reg/f:DI 0 ax [orig:256 D.6168 ] [256])
        (mem/f:DI (reg/f:DI 0 ax [orig:255 D.6167 ] [255]) [0 *_287+0 S8 A64])) com_line.cpp:336 89 {*movdi_internal}
     (nil))
(insn 1462 1461 1463 81 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7fbe13155e10 *.LC34>)) com_line.cpp:336 89 {*movdi_internal}
     (nil))
(insn 1463 1462 1464 81 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:256 D.6168 ] [256])) com_line.cpp:336 89 {*movdi_internal}
     (nil))
(call_insn/i 1464 1463 1465 81 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:336 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1465 1464 1466 81 (set (reg:SI 0 ax [orig:257 D.6169 ] [257])
        (reg:SI 0 ax)) com_line.cpp:336 90 {*movsi_internal}
     (nil))
(insn 1466 1465 1467 81 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:257 D.6169 ] [257])
            (const_int 0 [0]))) com_line.cpp:336 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1467 1466 1468 81 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1529)
            (pc))) com_line.cpp:336 612 {*jcc_1}
     (nil)
 -> 1529)
;;  succ:       82 (FALLTHRU)
;;              85
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81 (FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 258 259 260 261 262 924 925 926 927
(note 1468 1467 1469 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 1469 1468 1470 82 (set (reg/f:DI 0 ax [924])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:338 89 {*movdi_internal}
     (nil))
(insn 1470 1469 1471 82 (set (reg:SI 0 ax [orig:258 D.6169 ] [258])
        (mem:SI (reg/f:DI 0 ax [924]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:338 90 {*movsi_internal}
     (nil))
(insn 1471 1470 1472 82 (set (reg:DI 1 dx [orig:259 D.6165 ] [259])
        (sign_extend:DI (reg:SI 0 ax [orig:258 D.6169 ] [258]))) com_line.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 1472 1471 1473 82 (set (reg:DI 0 ax [925])
        (reg:DI 1 dx [orig:259 D.6165 ] [259])) com_line.cpp:338 89 {*movdi_internal}
     (nil))
(insn 1473 1472 1474 82 (parallel [
            (set (reg:DI 0 ax [925])
                (ashift:DI (reg:DI 0 ax [925])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:338 512 {*ashldi3_1}
     (nil))
(insn 1474 1473 1475 82 (parallel [
            (set (reg:DI 0 ax [925])
                (plus:DI (reg:DI 0 ax [925])
                    (reg:DI 1 dx [orig:259 D.6165 ] [259])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:338 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:259 D.6165 ] [259])
            (const_int 9 [0x9]))
        (nil)))
(insn 1475 1474 1476 82 (parallel [
            (set (reg:DI 0 ax [926])
                (ashift:DI (reg:DI 0 ax [925])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:338 512 {*ashldi3_1}
     (nil))
(insn 1476 1475 1477 82 (set (reg:DI 0 ax [925])
        (reg:DI 0 ax [926])) com_line.cpp:338 89 {*movdi_internal}
     (nil))
(insn 1477 1476 1478 82 (set (reg:DI 1 dx [orig:260 D.6165 ] [260])
        (reg:DI 0 ax [925])) com_line.cpp:338 89 {*movdi_internal}
     (nil))
(insn 1478 1477 1479 82 (set (reg/f:DI 0 ax [927])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:338 89 {*movdi_internal}
     (nil))
(insn 1479 1478 1480 82 (parallel [
            (set (reg/f:DI 0 ax [orig:261 D.6166 ] [261])
                (plus:DI (reg/f:DI 0 ax [927])
                    (reg:DI 1 dx [orig:260 D.6165 ] [260])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:338 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:260 D.6165 ] [260]))
        (nil)))
(insn 1480 1479 1481 82 (set (reg:SI 0 ax [orig:262 D.6169 ] [262])
        (mem/j:SI (reg/f:DI 0 ax [orig:261 D.6166 ] [261]) [0 _293->fid_scale+0 S4 A32])) com_line.cpp:338 90 {*movsi_internal}
     (nil))
(insn 1481 1480 1482 82 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:262 D.6169 ] [262])
            (const_int 0 [0]))) com_line.cpp:338 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1482 1481 1483 82 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1522)
            (pc))) com_line.cpp:338 612 {*jcc_1}
     (nil)
 -> 1522)
;;  succ:       83 (FALLTHRU)
;;              84
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       82 (FALLTHRU)
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 263 264 265 266 267 268 269 270 271 272 273 274 275 928 929 930 931 932 933 934 935 936 937
(note 1483 1482 1484 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1484 1483 1485 83 (set (reg/f:DI 0 ax [928])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1485 1484 1486 83 (set (reg:SI 0 ax [orig:263 D.6169 ] [263])
        (mem:SI (reg/f:DI 0 ax [928]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:339 90 {*movsi_internal}
     (nil))
(insn 1486 1485 1487 83 (set (reg:DI 1 dx [orig:264 D.6165 ] [264])
        (sign_extend:DI (reg:SI 0 ax [orig:263 D.6169 ] [263]))) com_line.cpp:339 142 {*extendsidi2_rex64}
     (nil))
(insn 1487 1486 1488 83 (set (reg:DI 0 ax [929])
        (reg:DI 1 dx [orig:264 D.6165 ] [264])) com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1488 1487 1489 83 (parallel [
            (set (reg:DI 0 ax [929])
                (ashift:DI (reg:DI 0 ax [929])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:339 512 {*ashldi3_1}
     (nil))
(insn 1489 1488 1490 83 (parallel [
            (set (reg:DI 0 ax [929])
                (plus:DI (reg:DI 0 ax [929])
                    (reg:DI 1 dx [orig:264 D.6165 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:339 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:264 D.6165 ] [264])
            (const_int 9 [0x9]))
        (nil)))
(insn 1490 1489 1491 83 (parallel [
            (set (reg:DI 0 ax [930])
                (ashift:DI (reg:DI 0 ax [929])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:339 512 {*ashldi3_1}
     (nil))
(insn 1491 1490 1492 83 (set (reg:DI 0 ax [929])
        (reg:DI 0 ax [930])) com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1492 1491 1493 83 (set (reg:DI 1 dx [orig:265 D.6165 ] [265])
        (reg:DI 0 ax [929])) com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1493 1492 1494 83 (set (reg/f:DI 0 ax [931])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1494 1493 1495 83 (parallel [
            (set (reg/f:DI 0 ax [orig:266 D.6166 ] [266])
                (plus:DI (reg/f:DI 0 ax [931])
                    (reg:DI 1 dx [orig:265 D.6165 ] [265])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:339 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:265 D.6165 ] [265]))
        (nil)))
(insn 1495 1494 1496 83 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:266 D.6166 ] [266])
                (const_int 8 [0x8])) [0 _298->scaleby+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:339 90 {*movsi_internal}
     (nil))
(insn 1496 1495 1497 83 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:340 217 {*addsi_1}
     (nil))
(insn 1497 1496 1498 83 (set (reg/f:DI 0 ax [932])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1498 1497 1499 83 (set (reg:SI 0 ax [orig:267 D.6169 ] [267])
        (mem:SI (reg/f:DI 0 ax [932]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:341 90 {*movsi_internal}
     (nil))
(insn 1499 1498 1500 83 (set (reg:DI 1 dx [orig:268 D.6165 ] [268])
        (sign_extend:DI (reg:SI 0 ax [orig:267 D.6169 ] [267]))) com_line.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 1500 1499 1501 83 (set (reg:DI 0 ax [933])
        (reg:DI 1 dx [orig:268 D.6165 ] [268])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1501 1500 1502 83 (parallel [
            (set (reg:DI 0 ax [933])
                (ashift:DI (reg:DI 0 ax [933])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 512 {*ashldi3_1}
     (nil))
(insn 1502 1501 1503 83 (parallel [
            (set (reg:DI 0 ax [933])
                (plus:DI (reg:DI 0 ax [933])
                    (reg:DI 1 dx [orig:268 D.6165 ] [268])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:268 D.6165 ] [268])
            (const_int 9 [0x9]))
        (nil)))
(insn 1503 1502 1504 83 (parallel [
            (set (reg:DI 0 ax [934])
                (ashift:DI (reg:DI 0 ax [933])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 512 {*ashldi3_1}
     (nil))
(insn 1504 1503 1505 83 (set (reg:DI 0 ax [933])
        (reg:DI 0 ax [934])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1505 1504 1506 83 (set (reg:DI 1 dx [orig:269 D.6165 ] [269])
        (reg:DI 0 ax [933])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1506 1505 1507 83 (set (reg/f:DI 0 ax [935])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1507 1506 1508 83 (parallel [
            (set (reg/f:DI 0 ax [orig:270 D.6166 ] [270])
                (plus:DI (reg/f:DI 0 ax [935])
                    (reg:DI 1 dx [orig:269 D.6165 ] [269])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:269 D.6165 ] [269]))
        (nil)))
(insn 1508 1507 1509 83 (parallel [
            (set (reg/f:DI 1 dx [orig:271 D.6174 ] [271])
                (plus:DI (reg/f:DI 0 ax [orig:270 D.6166 ] [270])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 218 {*adddi_1}
     (nil))
(insn 1509 1508 1510 83 (set (reg:SI 0 ax [936])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:341 90 {*movsi_internal}
     (nil))
(insn 1510 1509 1511 83 (set (reg:DI 0 ax [orig:272 D.6165 ] [272])
        (sign_extend:DI (reg:SI 0 ax [936]))) com_line.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 1511 1510 1512 83 (parallel [
            (set (reg:DI 2 cx [orig:273 D.6165 ] [273])
                (ashift:DI (reg:DI 0 ax [orig:272 D.6165 ] [272])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 512 {*ashldi3_1}
     (nil))
(insn 1512 1511 1513 83 (set (reg/f:DI 0 ax [937])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1513 1512 1514 83 (parallel [
            (set (reg/f:DI 0 ax [orig:274 D.6167 ] [274])
                (plus:DI (reg/f:DI 0 ax [937])
                    (reg:DI 2 cx [orig:273 D.6165 ] [273])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:341 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:273 D.6165 ] [273]))
        (nil)))
(insn 1514 1513 1516 83 (set (reg/f:DI 0 ax [orig:275 D.6168 ] [275])
        (mem/f:DI (reg/f:DI 0 ax [orig:274 D.6167 ] [274]) [0 *_308+0 S8 A64])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1516 1514 1517 83 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7fbe13155ea0 *.LC35>)) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1517 1516 1518 83 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:275 D.6168 ] [275])) com_line.cpp:341 89 {*movdi_internal}
     (nil))
(insn 1518 1517 1519 83 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:341 93 {*movqi_internal}
     (nil))
(call_insn 1519 1518 1921 83 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fbe135b5d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) com_line.cpp:341 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1921 1519 1922 83 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1922 1921 1522)
;; basic block 84, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       82
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 1522 1922 1523 84 53 "" [1 uses])
(note 1523 1522 1524 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 1524 1523 1525 84 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7fbe13155d80 *.LC33>)) com_line.cpp:343 89 {*movdi_internal}
     (nil))
(call_insn 1525 1524 1526 84 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:343 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1526 1525 1527 84 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:344 90 {*movsi_internal}
     (nil))
(call_insn 1527 1526 1528 84 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fbe135d0ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:344 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1528 1527 1529)
;; basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 276 277 278 279 280 938 939
(code_label 1529 1528 1530 85 52 "" [1 uses])
(note 1530 1529 1531 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 1531 1530 1532 85 (set (reg:SI 0 ax [938])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:347 90 {*movsi_internal}
     (nil))
(insn 1532 1531 1533 85 (set (reg:DI 0 ax [orig:276 D.6165 ] [276])
        (sign_extend:DI (reg:SI 0 ax [938]))) com_line.cpp:347 142 {*extendsidi2_rex64}
     (nil))
(insn 1533 1532 1534 85 (parallel [
            (set (reg:DI 1 dx [orig:277 D.6165 ] [277])
                (ashift:DI (reg:DI 0 ax [orig:276 D.6165 ] [276])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:347 512 {*ashldi3_1}
     (nil))
(insn 1534 1533 1535 85 (set (reg/f:DI 0 ax [939])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:347 89 {*movdi_internal}
     (nil))
(insn 1535 1534 1536 85 (parallel [
            (set (reg/f:DI 0 ax [orig:278 D.6167 ] [278])
                (plus:DI (reg/f:DI 0 ax [939])
                    (reg:DI 1 dx [orig:277 D.6165 ] [277])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:347 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:277 D.6165 ] [277]))
        (nil)))
(insn 1536 1535 1537 85 (set (reg/f:DI 0 ax [orig:279 D.6168 ] [279])
        (mem/f:DI (reg/f:DI 0 ax [orig:278 D.6167 ] [278]) [0 *_315+0 S8 A64])) com_line.cpp:347 89 {*movdi_internal}
     (nil))
(insn 1537 1536 1538 85 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7fbe13155f30 *.LC36>)) com_line.cpp:347 89 {*movdi_internal}
     (nil))
(insn 1538 1537 1539 85 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:279 D.6168 ] [279])) com_line.cpp:347 89 {*movdi_internal}
     (nil))
(call_insn/i 1539 1538 1540 85 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:347 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1540 1539 1541 85 (set (reg:SI 0 ax [orig:280 D.6169 ] [280])
        (reg:SI 0 ax)) com_line.cpp:347 90 {*movsi_internal}
     (nil))
(insn 1541 1540 1542 85 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:280 D.6169 ] [280])
            (const_int 0 [0]))) com_line.cpp:347 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1542 1541 1543 85 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1558)
            (pc))) com_line.cpp:347 612 {*jcc_1}
     (nil)
 -> 1558)
;;  succ:       86 (FALLTHRU)
;;              87
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       85 (FALLTHRU)
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 281 282 283 284 940 941 942 943
(note 1543 1542 1544 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 1544 1543 1545 86 (set (reg/f:DI 0 ax [940])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:349 89 {*movdi_internal}
     (nil))
(insn 1545 1544 1546 86 (set (reg:SI 0 ax [orig:281 D.6169 ] [281])
        (mem:SI (reg/f:DI 0 ax [940]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:349 90 {*movsi_internal}
     (nil))
(insn 1546 1545 1547 86 (set (reg:DI 1 dx [orig:282 D.6165 ] [282])
        (sign_extend:DI (reg:SI 0 ax [orig:281 D.6169 ] [281]))) com_line.cpp:349 142 {*extendsidi2_rex64}
     (nil))
(insn 1547 1546 1548 86 (set (reg:DI 0 ax [941])
        (reg:DI 1 dx [orig:282 D.6165 ] [282])) com_line.cpp:349 89 {*movdi_internal}
     (nil))
(insn 1548 1547 1549 86 (parallel [
            (set (reg:DI 0 ax [941])
                (ashift:DI (reg:DI 0 ax [941])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:349 512 {*ashldi3_1}
     (nil))
(insn 1549 1548 1550 86 (parallel [
            (set (reg:DI 0 ax [941])
                (plus:DI (reg:DI 0 ax [941])
                    (reg:DI 1 dx [orig:282 D.6165 ] [282])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:349 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:282 D.6165 ] [282])
            (const_int 9 [0x9]))
        (nil)))
(insn 1550 1549 1551 86 (parallel [
            (set (reg:DI 0 ax [942])
                (ashift:DI (reg:DI 0 ax [941])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:349 512 {*ashldi3_1}
     (nil))
(insn 1551 1550 1552 86 (set (reg:DI 0 ax [941])
        (reg:DI 0 ax [942])) com_line.cpp:349 89 {*movdi_internal}
     (nil))
(insn 1552 1551 1553 86 (set (reg:DI 1 dx [orig:283 D.6165 ] [283])
        (reg:DI 0 ax [941])) com_line.cpp:349 89 {*movdi_internal}
     (nil))
(insn 1553 1552 1554 86 (set (reg/f:DI 0 ax [943])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:349 89 {*movdi_internal}
     (nil))
(insn 1554 1553 1555 86 (parallel [
            (set (reg/f:DI 0 ax [orig:284 D.6166 ] [284])
                (plus:DI (reg/f:DI 0 ax [943])
                    (reg:DI 1 dx [orig:283 D.6165 ] [283])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:349 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:283 D.6165 ] [283]))
        (nil)))
(insn 1555 1554 1923 86 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:284 D.6166 ] [284])
                (const_int 32 [0x20])) [0 _321->max_normalize+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:349 90 {*movsi_internal}
     (nil))
(jump_insn 1923 1555 1924 86 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1924 1923 1558)
;; basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       85
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 285 286 287 288 289 944 945
(code_label 1558 1924 1559 87 54 "" [1 uses])
(note 1559 1558 1560 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 1560 1559 1561 87 (set (reg:SI 0 ax [944])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:351 90 {*movsi_internal}
     (nil))
(insn 1561 1560 1562 87 (set (reg:DI 0 ax [orig:285 D.6165 ] [285])
        (sign_extend:DI (reg:SI 0 ax [944]))) com_line.cpp:351 142 {*extendsidi2_rex64}
     (nil))
(insn 1562 1561 1563 87 (parallel [
            (set (reg:DI 1 dx [orig:286 D.6165 ] [286])
                (ashift:DI (reg:DI 0 ax [orig:285 D.6165 ] [285])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:351 512 {*ashldi3_1}
     (nil))
(insn 1563 1562 1564 87 (set (reg/f:DI 0 ax [945])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:351 89 {*movdi_internal}
     (nil))
(insn 1564 1563 1565 87 (parallel [
            (set (reg/f:DI 0 ax [orig:287 D.6167 ] [287])
                (plus:DI (reg/f:DI 0 ax [945])
                    (reg:DI 1 dx [orig:286 D.6165 ] [286])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:351 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:286 D.6165 ] [286]))
        (nil)))
(insn 1565 1564 1566 87 (set (reg/f:DI 0 ax [orig:288 D.6168 ] [288])
        (mem/f:DI (reg/f:DI 0 ax [orig:287 D.6167 ] [287]) [0 *_325+0 S8 A64])) com_line.cpp:351 89 {*movdi_internal}
     (nil))
(insn 1566 1565 1567 87 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7fbe13187000 *.LC37>)) com_line.cpp:351 89 {*movdi_internal}
     (nil))
(insn 1567 1566 1568 87 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:288 D.6168 ] [288])) com_line.cpp:351 89 {*movdi_internal}
     (nil))
(call_insn/i 1568 1567 1569 87 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:351 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1569 1568 1570 87 (set (reg:SI 0 ax [orig:289 D.6169 ] [289])
        (reg:SI 0 ax)) com_line.cpp:351 90 {*movsi_internal}
     (nil))
(insn 1570 1569 1571 87 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:289 D.6169 ] [289])
            (const_int 0 [0]))) com_line.cpp:351 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1571 1570 1572 87 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1587)
            (pc))) com_line.cpp:351 612 {*jcc_1}
     (nil)
 -> 1587)
;;  succ:       88 (FALLTHRU)
;;              89
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 89, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       87 (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 290 291 292 293 946 947 948 949
(note 1572 1571 1573 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 1573 1572 1574 88 (set (reg/f:DI 0 ax [946])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:353 89 {*movdi_internal}
     (nil))
(insn 1574 1573 1575 88 (set (reg:SI 0 ax [orig:290 D.6169 ] [290])
        (mem:SI (reg/f:DI 0 ax [946]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:353 90 {*movsi_internal}
     (nil))
(insn 1575 1574 1576 88 (set (reg:DI 1 dx [orig:291 D.6165 ] [291])
        (sign_extend:DI (reg:SI 0 ax [orig:290 D.6169 ] [290]))) com_line.cpp:353 142 {*extendsidi2_rex64}
     (nil))
(insn 1576 1575 1577 88 (set (reg:DI 0 ax [947])
        (reg:DI 1 dx [orig:291 D.6165 ] [291])) com_line.cpp:353 89 {*movdi_internal}
     (nil))
(insn 1577 1576 1578 88 (parallel [
            (set (reg:DI 0 ax [947])
                (ashift:DI (reg:DI 0 ax [947])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:353 512 {*ashldi3_1}
     (nil))
(insn 1578 1577 1579 88 (parallel [
            (set (reg:DI 0 ax [947])
                (plus:DI (reg:DI 0 ax [947])
                    (reg:DI 1 dx [orig:291 D.6165 ] [291])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:353 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:291 D.6165 ] [291])
            (const_int 9 [0x9]))
        (nil)))
(insn 1579 1578 1580 88 (parallel [
            (set (reg:DI 0 ax [948])
                (ashift:DI (reg:DI 0 ax [947])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:353 512 {*ashldi3_1}
     (nil))
(insn 1580 1579 1581 88 (set (reg:DI 0 ax [947])
        (reg:DI 0 ax [948])) com_line.cpp:353 89 {*movdi_internal}
     (nil))
(insn 1581 1580 1582 88 (set (reg:DI 1 dx [orig:292 D.6165 ] [292])
        (reg:DI 0 ax [947])) com_line.cpp:353 89 {*movdi_internal}
     (nil))
(insn 1582 1581 1583 88 (set (reg/f:DI 0 ax [949])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:353 89 {*movdi_internal}
     (nil))
(insn 1583 1582 1584 88 (parallel [
            (set (reg/f:DI 0 ax [orig:293 D.6166 ] [293])
                (plus:DI (reg/f:DI 0 ax [949])
                    (reg:DI 1 dx [orig:292 D.6165 ] [292])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:353 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:292 D.6165 ] [292]))
        (nil)))
(insn 1584 1583 1925 88 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:293 D.6166 ] [293])
                (const_int 52 [0x34])) [0 _331->pre_quecc_if+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:353 90 {*movsi_internal}
     (nil))
(jump_insn 1925 1584 1926 88 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1926 1925 1587)
;; basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 88, next block 90, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       87
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 294 295 296 297 298 950 951
(code_label 1587 1926 1588 89 55 "" [1 uses])
(note 1588 1587 1589 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 1589 1588 1590 89 (set (reg:SI 0 ax [950])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:355 90 {*movsi_internal}
     (nil))
(insn 1590 1589 1591 89 (set (reg:DI 0 ax [orig:294 D.6165 ] [294])
        (sign_extend:DI (reg:SI 0 ax [950]))) com_line.cpp:355 142 {*extendsidi2_rex64}
     (nil))
(insn 1591 1590 1592 89 (parallel [
            (set (reg:DI 1 dx [orig:295 D.6165 ] [295])
                (ashift:DI (reg:DI 0 ax [orig:294 D.6165 ] [294])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:355 512 {*ashldi3_1}
     (nil))
(insn 1592 1591 1593 89 (set (reg/f:DI 0 ax [951])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:355 89 {*movdi_internal}
     (nil))
(insn 1593 1592 1594 89 (parallel [
            (set (reg/f:DI 0 ax [orig:296 D.6167 ] [296])
                (plus:DI (reg/f:DI 0 ax [951])
                    (reg:DI 1 dx [orig:295 D.6165 ] [295])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:355 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:295 D.6165 ] [295]))
        (nil)))
(insn 1594 1593 1595 89 (set (reg/f:DI 0 ax [orig:297 D.6168 ] [297])
        (mem/f:DI (reg/f:DI 0 ax [orig:296 D.6167 ] [296]) [0 *_335+0 S8 A64])) com_line.cpp:355 89 {*movdi_internal}
     (nil))
(insn 1595 1594 1596 89 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7fbe13187090 *.LC38>)) com_line.cpp:355 89 {*movdi_internal}
     (nil))
(insn 1596 1595 1597 89 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:297 D.6168 ] [297])) com_line.cpp:355 89 {*movdi_internal}
     (nil))
(call_insn/i 1597 1596 1598 89 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:355 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1598 1597 1599 89 (set (reg:SI 0 ax [orig:298 D.6169 ] [298])
        (reg:SI 0 ax)) com_line.cpp:355 90 {*movsi_internal}
     (nil))
(insn 1599 1598 1600 89 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:298 D.6169 ] [298])
            (const_int 0 [0]))) com_line.cpp:355 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1600 1599 1601 89 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1628)
            (pc))) com_line.cpp:355 612 {*jcc_1}
     (nil)
 -> 1628)
;;  succ:       90 (FALLTHRU)
;;              91
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 90, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 89, next block 91, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       89 (FALLTHRU)
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 299 300 301 302 303 304 305 306 307 952 953 954 955 956 957
(note 1601 1600 1602 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 1602 1601 1603 90 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:357 217 {*addsi_1}
     (nil))
(insn 1603 1602 1604 90 (set (reg/f:DI 0 ax [952])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1604 1603 1605 90 (set (reg:SI 0 ax [orig:299 D.6169 ] [299])
        (mem:SI (reg/f:DI 0 ax [952]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:358 90 {*movsi_internal}
     (nil))
(insn 1605 1604 1606 90 (set (reg:DI 1 dx [orig:300 D.6165 ] [300])
        (sign_extend:DI (reg:SI 0 ax [orig:299 D.6169 ] [299]))) com_line.cpp:358 142 {*extendsidi2_rex64}
     (nil))
(insn 1606 1605 1607 90 (set (reg:DI 0 ax [953])
        (reg:DI 1 dx [orig:300 D.6165 ] [300])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1607 1606 1608 90 (parallel [
            (set (reg:DI 0 ax [953])
                (ashift:DI (reg:DI 0 ax [953])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 512 {*ashldi3_1}
     (nil))
(insn 1608 1607 1609 90 (parallel [
            (set (reg:DI 0 ax [953])
                (plus:DI (reg:DI 0 ax [953])
                    (reg:DI 1 dx [orig:300 D.6165 ] [300])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:300 D.6165 ] [300])
            (const_int 9 [0x9]))
        (nil)))
(insn 1609 1608 1610 90 (parallel [
            (set (reg:DI 0 ax [954])
                (ashift:DI (reg:DI 0 ax [953])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 512 {*ashldi3_1}
     (nil))
(insn 1610 1609 1611 90 (set (reg:DI 0 ax [953])
        (reg:DI 0 ax [954])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1611 1610 1612 90 (set (reg:DI 1 dx [orig:301 D.6165 ] [301])
        (reg:DI 0 ax [953])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1612 1611 1613 90 (set (reg/f:DI 0 ax [955])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1613 1612 1614 90 (parallel [
            (set (reg/f:DI 0 ax [orig:302 D.6166 ] [302])
                (plus:DI (reg/f:DI 0 ax [955])
                    (reg:DI 1 dx [orig:301 D.6165 ] [301])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:301 D.6165 ] [301]))
        (nil)))
(insn 1614 1613 1615 90 (parallel [
            (set (reg/f:DI 1 dx [orig:303 D.6174 ] [303])
                (plus:DI (reg/f:DI 0 ax [orig:302 D.6166 ] [302])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 218 {*adddi_1}
     (nil))
(insn 1615 1614 1616 90 (set (reg:SI 0 ax [956])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:358 90 {*movsi_internal}
     (nil))
(insn 1616 1615 1617 90 (set (reg:DI 0 ax [orig:304 D.6165 ] [304])
        (sign_extend:DI (reg:SI 0 ax [956]))) com_line.cpp:358 142 {*extendsidi2_rex64}
     (nil))
(insn 1617 1616 1618 90 (parallel [
            (set (reg:DI 2 cx [orig:305 D.6165 ] [305])
                (ashift:DI (reg:DI 0 ax [orig:304 D.6165 ] [304])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 512 {*ashldi3_1}
     (nil))
(insn 1618 1617 1619 90 (set (reg/f:DI 0 ax [957])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1619 1618 1620 90 (parallel [
            (set (reg/f:DI 0 ax [orig:306 D.6167 ] [306])
                (plus:DI (reg/f:DI 0 ax [957])
                    (reg:DI 2 cx [orig:305 D.6165 ] [305])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:358 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:305 D.6165 ] [305]))
        (nil)))
(insn 1620 1619 1622 90 (set (reg/f:DI 0 ax [orig:307 D.6168 ] [307])
        (mem/f:DI (reg/f:DI 0 ax [orig:306 D.6167 ] [306]) [0 *_346+0 S8 A64])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1622 1620 1623 90 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7fbe13155ea0 *.LC35>)) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1623 1622 1624 90 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:307 D.6168 ] [307])) com_line.cpp:358 89 {*movdi_internal}
     (nil))
(insn 1624 1623 1625 90 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:358 93 {*movqi_internal}
     (nil))
(call_insn 1625 1624 1927 90 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fbe135b5d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) com_line.cpp:358 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1927 1625 1928 90 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1928 1927 1628)
;; basic block 91, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 90, next block 92, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       89
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 308 309 310 311 312 958 959
(code_label 1628 1928 1629 91 56 "" [1 uses])
(note 1629 1628 1630 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 1630 1629 1631 91 (set (reg:SI 0 ax [958])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:360 90 {*movsi_internal}
     (nil))
(insn 1631 1630 1632 91 (set (reg:DI 0 ax [orig:308 D.6165 ] [308])
        (sign_extend:DI (reg:SI 0 ax [958]))) com_line.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 1632 1631 1633 91 (parallel [
            (set (reg:DI 1 dx [orig:309 D.6165 ] [309])
                (ashift:DI (reg:DI 0 ax [orig:308 D.6165 ] [308])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:360 512 {*ashldi3_1}
     (nil))
(insn 1633 1632 1634 91 (set (reg/f:DI 0 ax [959])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:360 89 {*movdi_internal}
     (nil))
(insn 1634 1633 1635 91 (parallel [
            (set (reg/f:DI 0 ax [orig:310 D.6167 ] [310])
                (plus:DI (reg/f:DI 0 ax [959])
                    (reg:DI 1 dx [orig:309 D.6165 ] [309])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:360 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:309 D.6165 ] [309]))
        (nil)))
(insn 1635 1634 1636 91 (set (reg/f:DI 0 ax [orig:311 D.6168 ] [311])
        (mem/f:DI (reg/f:DI 0 ax [orig:310 D.6167 ] [310]) [0 *_351+0 S8 A64])) com_line.cpp:360 89 {*movdi_internal}
     (nil))
(insn 1636 1635 1637 91 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7fbe13187120 *.LC39>)) com_line.cpp:360 89 {*movdi_internal}
     (nil))
(insn 1637 1636 1638 91 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:311 D.6168 ] [311])) com_line.cpp:360 89 {*movdi_internal}
     (nil))
(call_insn/i 1638 1637 1639 91 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:360 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1639 1638 1640 91 (set (reg:SI 0 ax [orig:312 D.6169 ] [312])
        (reg:SI 0 ax)) com_line.cpp:360 90 {*movsi_internal}
     (nil))
(insn 1640 1639 1641 91 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:312 D.6169 ] [312])
            (const_int 0 [0]))) com_line.cpp:360 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1641 1640 1642 91 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1657)
            (pc))) com_line.cpp:360 612 {*jcc_1}
     (nil)
 -> 1657)
;;  succ:       92 (FALLTHRU)
;;              93
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 92, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 91, next block 93, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91 (FALLTHRU)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 313 314 315 316 960 961 962 963
(note 1642 1641 1643 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 1643 1642 1644 92 (set (reg/f:DI 0 ax [960])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:362 89 {*movdi_internal}
     (nil))
(insn 1644 1643 1645 92 (set (reg:SI 0 ax [orig:313 D.6169 ] [313])
        (mem:SI (reg/f:DI 0 ax [960]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:362 90 {*movsi_internal}
     (nil))
(insn 1645 1644 1646 92 (set (reg:DI 1 dx [orig:314 D.6165 ] [314])
        (sign_extend:DI (reg:SI 0 ax [orig:313 D.6169 ] [313]))) com_line.cpp:362 142 {*extendsidi2_rex64}
     (nil))
(insn 1646 1645 1647 92 (set (reg:DI 0 ax [961])
        (reg:DI 1 dx [orig:314 D.6165 ] [314])) com_line.cpp:362 89 {*movdi_internal}
     (nil))
(insn 1647 1646 1648 92 (parallel [
            (set (reg:DI 0 ax [961])
                (ashift:DI (reg:DI 0 ax [961])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:362 512 {*ashldi3_1}
     (nil))
(insn 1648 1647 1649 92 (parallel [
            (set (reg:DI 0 ax [961])
                (plus:DI (reg:DI 0 ax [961])
                    (reg:DI 1 dx [orig:314 D.6165 ] [314])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:362 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:314 D.6165 ] [314])
            (const_int 9 [0x9]))
        (nil)))
(insn 1649 1648 1650 92 (parallel [
            (set (reg:DI 0 ax [962])
                (ashift:DI (reg:DI 0 ax [961])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:362 512 {*ashldi3_1}
     (nil))
(insn 1650 1649 1651 92 (set (reg:DI 0 ax [961])
        (reg:DI 0 ax [962])) com_line.cpp:362 89 {*movdi_internal}
     (nil))
(insn 1651 1650 1652 92 (set (reg:DI 1 dx [orig:315 D.6165 ] [315])
        (reg:DI 0 ax [961])) com_line.cpp:362 89 {*movdi_internal}
     (nil))
(insn 1652 1651 1653 92 (set (reg/f:DI 0 ax [963])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:362 89 {*movdi_internal}
     (nil))
(insn 1653 1652 1654 92 (parallel [
            (set (reg/f:DI 0 ax [orig:316 D.6166 ] [316])
                (plus:DI (reg/f:DI 0 ax [963])
                    (reg:DI 1 dx [orig:315 D.6165 ] [315])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:362 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:315 D.6165 ] [315]))
        (nil)))
(insn 1654 1653 1929 92 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:316 D.6166 ] [316])
                (const_int 16 [0x10])) [0 _357->bc+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:362 90 {*movsi_internal}
     (nil))
(jump_insn 1929 1654 1930 92 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1930 1929 1657)
;; basic block 93, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 92, next block 94, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 317 318 319 320 321 964 965
(code_label 1657 1930 1658 93 57 "" [1 uses])
(note 1658 1657 1659 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 1659 1658 1660 93 (set (reg:SI 0 ax [964])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:364 90 {*movsi_internal}
     (nil))
(insn 1660 1659 1661 93 (set (reg:DI 0 ax [orig:317 D.6165 ] [317])
        (sign_extend:DI (reg:SI 0 ax [964]))) com_line.cpp:364 142 {*extendsidi2_rex64}
     (nil))
(insn 1661 1660 1662 93 (parallel [
            (set (reg:DI 1 dx [orig:318 D.6165 ] [318])
                (ashift:DI (reg:DI 0 ax [orig:317 D.6165 ] [317])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:364 512 {*ashldi3_1}
     (nil))
(insn 1662 1661 1663 93 (set (reg/f:DI 0 ax [965])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:364 89 {*movdi_internal}
     (nil))
(insn 1663 1662 1664 93 (parallel [
            (set (reg/f:DI 0 ax [orig:319 D.6167 ] [319])
                (plus:DI (reg/f:DI 0 ax [965])
                    (reg:DI 1 dx [orig:318 D.6165 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:364 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:318 D.6165 ] [318]))
        (nil)))
(insn 1664 1663 1665 93 (set (reg/f:DI 0 ax [orig:320 D.6168 ] [320])
        (mem/f:DI (reg/f:DI 0 ax [orig:319 D.6167 ] [319]) [0 *_361+0 S8 A64])) com_line.cpp:364 89 {*movdi_internal}
     (nil))
(insn 1665 1664 1666 93 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x7fbe131871b0 *.LC40>)) com_line.cpp:364 89 {*movdi_internal}
     (nil))
(insn 1666 1665 1667 93 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:320 D.6168 ] [320])) com_line.cpp:364 89 {*movdi_internal}
     (nil))
(call_insn/i 1667 1666 1668 93 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:364 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1668 1667 1669 93 (set (reg:SI 0 ax [orig:321 D.6169 ] [321])
        (reg:SI 0 ax)) com_line.cpp:364 90 {*movsi_internal}
     (nil))
(insn 1669 1668 1670 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:321 D.6169 ] [321])
            (const_int 0 [0]))) com_line.cpp:364 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1670 1669 1671 93 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1686)
            (pc))) com_line.cpp:364 612 {*jcc_1}
     (nil)
 -> 1686)
;;  succ:       94 (FALLTHRU)
;;              95
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 94, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 93, next block 95, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93 (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 322 323 324 325 966 967 968 969
(note 1671 1670 1672 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 1672 1671 1673 94 (set (reg/f:DI 0 ax [966])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1673 1672 1674 94 (set (reg:SI 0 ax [orig:322 D.6169 ] [322])
        (mem:SI (reg/f:DI 0 ax [966]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:366 90 {*movsi_internal}
     (nil))
(insn 1674 1673 1675 94 (set (reg:DI 1 dx [orig:323 D.6165 ] [323])
        (sign_extend:DI (reg:SI 0 ax [orig:322 D.6169 ] [322]))) com_line.cpp:366 142 {*extendsidi2_rex64}
     (nil))
(insn 1675 1674 1676 94 (set (reg:DI 0 ax [967])
        (reg:DI 1 dx [orig:323 D.6165 ] [323])) com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1676 1675 1677 94 (parallel [
            (set (reg:DI 0 ax [967])
                (ashift:DI (reg:DI 0 ax [967])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:366 512 {*ashldi3_1}
     (nil))
(insn 1677 1676 1678 94 (parallel [
            (set (reg:DI 0 ax [967])
                (plus:DI (reg:DI 0 ax [967])
                    (reg:DI 1 dx [orig:323 D.6165 ] [323])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:366 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:323 D.6165 ] [323])
            (const_int 9 [0x9]))
        (nil)))
(insn 1678 1677 1679 94 (parallel [
            (set (reg:DI 0 ax [968])
                (ashift:DI (reg:DI 0 ax [967])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:366 512 {*ashldi3_1}
     (nil))
(insn 1679 1678 1680 94 (set (reg:DI 0 ax [967])
        (reg:DI 0 ax [968])) com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1680 1679 1681 94 (set (reg:DI 1 dx [orig:324 D.6165 ] [324])
        (reg:DI 0 ax [967])) com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1681 1680 1682 94 (set (reg/f:DI 0 ax [969])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1682 1681 1683 94 (parallel [
            (set (reg/f:DI 0 ax [orig:325 D.6166 ] [325])
                (plus:DI (reg/f:DI 0 ax [969])
                    (reg:DI 1 dx [orig:324 D.6165 ] [324])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:366 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:324 D.6165 ] [324]))
        (nil)))
(insn 1683 1682 1931 94 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:325 D.6166 ] [325])
                (const_int 68 [0x44])) [0 _367->tilt+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:366 90 {*movsi_internal}
     (nil))
(jump_insn 1931 1683 1932 94 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1932 1931 1686)
;; basic block 95, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 94, next block 96, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 326 327 328 329 330 970 971
(code_label 1686 1932 1687 95 58 "" [1 uses])
(note 1687 1686 1688 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 1688 1687 1689 95 (set (reg:SI 0 ax [970])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:368 90 {*movsi_internal}
     (nil))
(insn 1689 1688 1690 95 (set (reg:DI 0 ax [orig:326 D.6165 ] [326])
        (sign_extend:DI (reg:SI 0 ax [970]))) com_line.cpp:368 142 {*extendsidi2_rex64}
     (nil))
(insn 1690 1689 1691 95 (parallel [
            (set (reg:DI 1 dx [orig:327 D.6165 ] [327])
                (ashift:DI (reg:DI 0 ax [orig:326 D.6165 ] [326])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:368 512 {*ashldi3_1}
     (nil))
(insn 1691 1690 1692 95 (set (reg/f:DI 0 ax [971])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:368 89 {*movdi_internal}
     (nil))
(insn 1692 1691 1693 95 (parallel [
            (set (reg/f:DI 0 ax [orig:328 D.6167 ] [328])
                (plus:DI (reg/f:DI 0 ax [971])
                    (reg:DI 1 dx [orig:327 D.6165 ] [327])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:368 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:327 D.6165 ] [327]))
        (nil)))
(insn 1693 1692 1694 95 (set (reg/f:DI 0 ax [orig:329 D.6168 ] [329])
        (mem/f:DI (reg/f:DI 0 ax [orig:328 D.6167 ] [328]) [0 *_371+0 S8 A64])) com_line.cpp:368 89 {*movdi_internal}
     (nil))
(insn 1694 1693 1695 95 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC41") [flags 0x2]  <var_decl 0x7fbe13187240 *.LC41>)) com_line.cpp:368 89 {*movdi_internal}
     (nil))
(insn 1695 1694 1696 95 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:329 D.6168 ] [329])) com_line.cpp:368 89 {*movdi_internal}
     (nil))
(call_insn/i 1696 1695 1697 95 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:368 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1697 1696 1698 95 (set (reg:SI 0 ax [orig:330 D.6169 ] [330])
        (reg:SI 0 ax)) com_line.cpp:368 90 {*movsi_internal}
     (nil))
(insn 1698 1697 1699 95 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:330 D.6169 ] [330])
            (const_int 0 [0]))) com_line.cpp:368 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1699 1698 1700 95 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1715)
            (pc))) com_line.cpp:368 612 {*jcc_1}
     (nil)
 -> 1715)
;;  succ:       96 (FALLTHRU)
;;              97
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 96, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 95, next block 97, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       95 (FALLTHRU)
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 331 332 333 334 972 973 974 975
(note 1700 1699 1701 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 1701 1700 1702 96 (set (reg/f:DI 0 ax [972])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1702 1701 1703 96 (set (reg:SI 0 ax [orig:331 D.6169 ] [331])
        (mem:SI (reg/f:DI 0 ax [972]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:370 90 {*movsi_internal}
     (nil))
(insn 1703 1702 1704 96 (set (reg:DI 1 dx [orig:332 D.6165 ] [332])
        (sign_extend:DI (reg:SI 0 ax [orig:331 D.6169 ] [331]))) com_line.cpp:370 142 {*extendsidi2_rex64}
     (nil))
(insn 1704 1703 1705 96 (set (reg:DI 0 ax [973])
        (reg:DI 1 dx [orig:332 D.6165 ] [332])) com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1705 1704 1706 96 (parallel [
            (set (reg:DI 0 ax [973])
                (ashift:DI (reg:DI 0 ax [973])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:370 512 {*ashldi3_1}
     (nil))
(insn 1706 1705 1707 96 (parallel [
            (set (reg:DI 0 ax [973])
                (plus:DI (reg:DI 0 ax [973])
                    (reg:DI 1 dx [orig:332 D.6165 ] [332])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:370 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:332 D.6165 ] [332])
            (const_int 9 [0x9]))
        (nil)))
(insn 1707 1706 1708 96 (parallel [
            (set (reg:DI 0 ax [974])
                (ashift:DI (reg:DI 0 ax [973])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:370 512 {*ashldi3_1}
     (nil))
(insn 1708 1707 1709 96 (set (reg:DI 0 ax [973])
        (reg:DI 0 ax [974])) com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1709 1708 1710 96 (set (reg:DI 1 dx [orig:333 D.6165 ] [333])
        (reg:DI 0 ax [973])) com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1710 1709 1711 96 (set (reg/f:DI 0 ax [975])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1711 1710 1712 96 (parallel [
            (set (reg/f:DI 0 ax [orig:334 D.6166 ] [334])
                (plus:DI (reg/f:DI 0 ax [975])
                    (reg:DI 1 dx [orig:333 D.6165 ] [333])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:370 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:333 D.6165 ] [333]))
        (nil)))
(insn 1712 1711 1933 96 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:334 D.6166 ] [334])
                (const_int 20 [0x14])) [0 _377->file_type+0 S4 A32])
        (const_int 1 [0x1])) com_line.cpp:370 90 {*movsi_internal}
     (nil))
(jump_insn 1933 1712 1934 96 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1934 1933 1715)
;; basic block 97, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 96, next block 98, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       95
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 335 336 337 338 339 976 977
(code_label 1715 1934 1716 97 59 "" [1 uses])
(note 1716 1715 1717 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 1717 1716 1718 97 (set (reg:SI 0 ax [976])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:372 90 {*movsi_internal}
     (nil))
(insn 1718 1717 1719 97 (set (reg:DI 0 ax [orig:335 D.6165 ] [335])
        (sign_extend:DI (reg:SI 0 ax [976]))) com_line.cpp:372 142 {*extendsidi2_rex64}
     (nil))
(insn 1719 1718 1720 97 (parallel [
            (set (reg:DI 1 dx [orig:336 D.6165 ] [336])
                (ashift:DI (reg:DI 0 ax [orig:335 D.6165 ] [335])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:372 512 {*ashldi3_1}
     (nil))
(insn 1720 1719 1721 97 (set (reg/f:DI 0 ax [977])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:372 89 {*movdi_internal}
     (nil))
(insn 1721 1720 1722 97 (parallel [
            (set (reg/f:DI 0 ax [orig:337 D.6167 ] [337])
                (plus:DI (reg/f:DI 0 ax [977])
                    (reg:DI 1 dx [orig:336 D.6165 ] [336])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:372 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:336 D.6165 ] [336]))
        (nil)))
(insn 1722 1721 1723 97 (set (reg/f:DI 0 ax [orig:338 D.6168 ] [338])
        (mem/f:DI (reg/f:DI 0 ax [orig:337 D.6167 ] [337]) [0 *_381+0 S8 A64])) com_line.cpp:372 89 {*movdi_internal}
     (nil))
(insn 1723 1722 1724 97 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC42") [flags 0x2]  <var_decl 0x7fbe131872d0 *.LC42>)) com_line.cpp:372 89 {*movdi_internal}
     (nil))
(insn 1724 1723 1725 97 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:338 D.6168 ] [338])) com_line.cpp:372 89 {*movdi_internal}
     (nil))
(call_insn/i 1725 1724 1726 97 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:372 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1726 1725 1727 97 (set (reg:SI 0 ax [orig:339 D.6169 ] [339])
        (reg:SI 0 ax)) com_line.cpp:372 90 {*movsi_internal}
     (nil))
(insn 1727 1726 1728 97 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:339 D.6169 ] [339])
            (const_int 0 [0]))) com_line.cpp:372 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1728 1727 1729 97 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1744)
            (pc))) com_line.cpp:372 612 {*jcc_1}
     (nil)
 -> 1744)
;;  succ:       98 (FALLTHRU)
;;              99
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 98, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 97, next block 99, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       97 (FALLTHRU)
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 340 341 342 343 978 979 980 981
(note 1729 1728 1730 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 1730 1729 1731 98 (set (reg/f:DI 0 ax [978])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5104 [0xffffffffffffec10])) [0 fid+0 S8 A64])) com_line.cpp:374 89 {*movdi_internal}
     (nil))
(insn 1731 1730 1732 98 (set (reg:SI 0 ax [orig:340 D.6169 ] [340])
        (mem:SI (reg/f:DI 0 ax [978]) [0 *fid_244(D)+0 S4 A32])) com_line.cpp:374 90 {*movsi_internal}
     (nil))
(insn 1732 1731 1733 98 (set (reg:DI 1 dx [orig:341 D.6165 ] [341])
        (sign_extend:DI (reg:SI 0 ax [orig:340 D.6169 ] [340]))) com_line.cpp:374 142 {*extendsidi2_rex64}
     (nil))
(insn 1733 1732 1734 98 (set (reg:DI 0 ax [979])
        (reg:DI 1 dx [orig:341 D.6165 ] [341])) com_line.cpp:374 89 {*movdi_internal}
     (nil))
(insn 1734 1733 1735 98 (parallel [
            (set (reg:DI 0 ax [979])
                (ashift:DI (reg:DI 0 ax [979])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:374 512 {*ashldi3_1}
     (nil))
(insn 1735 1734 1736 98 (parallel [
            (set (reg:DI 0 ax [979])
                (plus:DI (reg:DI 0 ax [979])
                    (reg:DI 1 dx [orig:341 D.6165 ] [341])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:374 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:341 D.6165 ] [341])
            (const_int 9 [0x9]))
        (nil)))
(insn 1736 1735 1737 98 (parallel [
            (set (reg:DI 0 ax [980])
                (ashift:DI (reg:DI 0 ax [979])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:374 512 {*ashldi3_1}
     (nil))
(insn 1737 1736 1738 98 (set (reg:DI 0 ax [979])
        (reg:DI 0 ax [980])) com_line.cpp:374 89 {*movdi_internal}
     (nil))
(insn 1738 1737 1739 98 (set (reg:DI 1 dx [orig:342 D.6165 ] [342])
        (reg:DI 0 ax [979])) com_line.cpp:374 89 {*movdi_internal}
     (nil))
(insn 1739 1738 1740 98 (set (reg/f:DI 0 ax [981])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:374 89 {*movdi_internal}
     (nil))
(insn 1740 1739 1741 98 (parallel [
            (set (reg/f:DI 0 ax [orig:343 D.6166 ] [343])
                (plus:DI (reg/f:DI 0 ax [981])
                    (reg:DI 1 dx [orig:342 D.6165 ] [342])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:374 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:342 D.6165 ] [342]))
        (nil)))
(insn 1741 1740 1935 98 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:343 D.6166 ] [343])
                (const_int 20 [0x14])) [0 _387->file_type+0 S4 A32])
        (const_int 0 [0])) com_line.cpp:374 90 {*movsi_internal}
     (nil))
(jump_insn 1935 1741 1936 98 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1936 1935 1744)
;; basic block 99, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 98, next block 100, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       97
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 344 345 346 347 348 982 983
(code_label 1744 1936 1745 99 60 "" [1 uses])
(note 1745 1744 1746 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 1746 1745 1747 99 (set (reg:SI 0 ax [982])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:376 90 {*movsi_internal}
     (nil))
(insn 1747 1746 1748 99 (set (reg:DI 0 ax [orig:344 D.6165 ] [344])
        (sign_extend:DI (reg:SI 0 ax [982]))) com_line.cpp:376 142 {*extendsidi2_rex64}
     (nil))
(insn 1748 1747 1749 99 (parallel [
            (set (reg:DI 1 dx [orig:345 D.6165 ] [345])
                (ashift:DI (reg:DI 0 ax [orig:344 D.6165 ] [344])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:376 512 {*ashldi3_1}
     (nil))
(insn 1749 1748 1750 99 (set (reg/f:DI 0 ax [983])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:376 89 {*movdi_internal}
     (nil))
(insn 1750 1749 1751 99 (parallel [
            (set (reg/f:DI 0 ax [orig:346 D.6167 ] [346])
                (plus:DI (reg/f:DI 0 ax [983])
                    (reg:DI 1 dx [orig:345 D.6165 ] [345])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:376 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:345 D.6165 ] [345]))
        (nil)))
(insn 1751 1750 1752 99 (set (reg/f:DI 0 ax [orig:347 D.6168 ] [347])
        (mem/f:DI (reg/f:DI 0 ax [orig:346 D.6167 ] [346]) [0 *_391+0 S8 A64])) com_line.cpp:376 89 {*movdi_internal}
     (nil))
(insn 1752 1751 1753 99 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC43") [flags 0x2]  <var_decl 0x7fbe13187360 *.LC43>)) com_line.cpp:376 89 {*movdi_internal}
     (nil))
(insn 1753 1752 1754 99 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:347 D.6168 ] [347])) com_line.cpp:376 89 {*movdi_internal}
     (nil))
(call_insn/i 1754 1753 1755 99 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:376 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1755 1754 1756 99 (set (reg:SI 0 ax [orig:348 D.6169 ] [348])
        (reg:SI 0 ax)) com_line.cpp:376 90 {*movsi_internal}
     (nil))
(insn 1756 1755 1757 99 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:348 D.6169 ] [348])
            (const_int 0 [0]))) com_line.cpp:376 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1757 1756 1758 99 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1801)
            (pc))) com_line.cpp:376 612 {*jcc_1}
     (nil)
 -> 1801)
;;  succ:       100 (FALLTHRU)
;;              101
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 100, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 99, next block 101, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       99 (FALLTHRU)
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 984 985 986 987 988 989 990 991 992 993
(note 1758 1757 1759 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 1759 1758 1760 100 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:378 217 {*addsi_1}
     (nil))
(insn 1760 1759 1761 100 (set (reg/f:DI 0 ax [984])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1761 1760 1762 100 (parallel [
            (set (reg/f:DI 1 dx [orig:349 D.6175 ] [349])
                (plus:DI (reg/f:DI 0 ax [984])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:379 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (const_int 24 [0x18]))
        (nil)))
(insn 1762 1761 1763 100 (set (reg:SI 0 ax [985])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:379 90 {*movsi_internal}
     (nil))
(insn 1763 1762 1764 100 (set (reg:DI 0 ax [orig:350 D.6165 ] [350])
        (sign_extend:DI (reg:SI 0 ax [985]))) com_line.cpp:379 142 {*extendsidi2_rex64}
     (nil))
(insn 1764 1763 1765 100 (parallel [
            (set (reg:DI 2 cx [orig:351 D.6165 ] [351])
                (ashift:DI (reg:DI 0 ax [orig:350 D.6165 ] [350])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:379 512 {*ashldi3_1}
     (nil))
(insn 1765 1764 1766 100 (set (reg/f:DI 0 ax [986])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1766 1765 1767 100 (parallel [
            (set (reg/f:DI 0 ax [orig:352 D.6167 ] [352])
                (plus:DI (reg/f:DI 0 ax [986])
                    (reg:DI 2 cx [orig:351 D.6165 ] [351])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:379 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:351 D.6165 ] [351]))
        (nil)))
(insn 1767 1766 1769 100 (set (reg/f:DI 0 ax [orig:353 D.6168 ] [353])
        (mem/f:DI (reg/f:DI 0 ax [orig:352 D.6167 ] [352]) [0 *_398+0 S8 A64])) com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1769 1767 1770 100 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC44") [flags 0x2]  <var_decl 0x7fbe131873f0 *.LC44>)) com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1770 1769 1771 100 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:353 D.6168 ] [353])) com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1771 1770 1772 100 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:379 93 {*movqi_internal}
     (nil))
(call_insn 1772 1771 1773 100 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fbe135b5d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) com_line.cpp:379 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 1773 1772 1774 100 (set (reg/f:DI 0 ax [987])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:380 89 {*movdi_internal}
     (nil))
(insn 1774 1773 1775 100 (parallel [
            (set (reg/f:DI 0 ax [orig:354 D.6166 ] [354])
                (plus:DI (reg/f:DI 0 ax [987])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:380 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 1775 1774 1776 100 (parallel [
            (set (reg/f:DI 1 dx [orig:355 D.6175 ] [355])
                (plus:DI (reg/f:DI 0 ax [orig:354 D.6166 ] [354])
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:380 218 {*adddi_1}
     (nil))
(insn 1776 1775 1777 100 (set (reg:SI 0 ax [988])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:380 90 {*movsi_internal}
     (nil))
(insn 1777 1776 1778 100 (set (reg:DI 0 ax [orig:356 D.6165 ] [356])
        (sign_extend:DI (reg:SI 0 ax [988]))) com_line.cpp:380 142 {*extendsidi2_rex64}
     (nil))
(insn 1778 1777 1779 100 (parallel [
            (set (reg:DI 2 cx [orig:357 D.6165 ] [357])
                (ashift:DI (reg:DI 0 ax [orig:356 D.6165 ] [356])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:380 512 {*ashldi3_1}
     (nil))
(insn 1779 1778 1780 100 (set (reg/f:DI 0 ax [989])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:380 89 {*movdi_internal}
     (nil))
(insn 1780 1779 1781 100 (parallel [
            (set (reg/f:DI 0 ax [orig:358 D.6167 ] [358])
                (plus:DI (reg/f:DI 0 ax [989])
                    (reg:DI 2 cx [orig:357 D.6165 ] [357])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:380 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:357 D.6165 ] [357]))
        (nil)))
(insn 1781 1780 1783 100 (set (reg/f:DI 0 ax [orig:359 D.6168 ] [359])
        (mem/f:DI (reg/f:DI 0 ax [orig:358 D.6167 ] [358]) [0 *_405+0 S8 A64])) com_line.cpp:380 89 {*movdi_internal}
     (nil))
(insn 1783 1781 1784 100 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC44") [flags 0x2]  <var_decl 0x7fbe131873f0 *.LC44>)) com_line.cpp:380 89 {*movdi_internal}
     (nil))
(insn 1784 1783 1785 100 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:359 D.6168 ] [359])) com_line.cpp:380 89 {*movdi_internal}
     (nil))
(insn 1785 1784 1786 100 (set (reg:QI 0 ax)
        (const_int 0 [0])) com_line.cpp:380 93 {*movqi_internal}
     (nil))
(call_insn 1786 1785 1787 100 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7fbe135b5d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) com_line.cpp:380 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 1787 1786 1788 100 (set (reg/f:DI 0 ax [990])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:381 89 {*movdi_internal}
     (nil))
(insn 1788 1787 1789 100 (set (reg:SI 0 ax [orig:360 D.6169 ] [360])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [990])
                (const_int 24 [0x18])) [0 preprocess_37(D)->data_zero_fill+0 S4 A32])) com_line.cpp:381 90 {*movsi_internal}
     (nil))
(insn 1789 1788 1790 100 (parallel [
            (set (reg:SI 1 dx [orig:361 D.6169 ] [361])
                (ashift:SI (reg:SI 0 ax [orig:360 D.6169 ] [360])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:381 511 {*ashlsi3_1}
     (nil))
(insn 1790 1789 1791 100 (set (reg/f:DI 0 ax [991])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:381 89 {*movdi_internal}
     (nil))
(insn 1791 1790 1792 100 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [991])
                (const_int 24 [0x18])) [0 preprocess_37(D)->data_zero_fill+0 S4 A32])
        (reg:SI 1 dx [orig:361 D.6169 ] [361])) com_line.cpp:381 90 {*movsi_internal}
     (nil))
(insn 1792 1791 1793 100 (set (reg/f:DI 0 ax [992])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:382 89 {*movdi_internal}
     (nil))
(insn 1793 1792 1794 100 (parallel [
            (set (reg/f:DI 0 ax [orig:362 D.6166 ] [362])
                (plus:DI (reg/f:DI 0 ax [992])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:382 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 1794 1793 1795 100 (set (reg/f:DI 1 dx [993])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5064 [0xffffffffffffec38])) [0 preprocess+0 S8 A64])) com_line.cpp:382 89 {*movdi_internal}
     (nil))
(insn 1795 1794 1796 100 (parallel [
            (set (reg/f:DI 1 dx [orig:363 D.6166 ] [363])
                (plus:DI (reg/f:DI 1 dx [993])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:382 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5048 [0xffffffffffffec48])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 1796 1795 1797 100 (set (reg:SI 1 dx [orig:364 D.6169 ] [364])
        (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:363 D.6166 ] [363])
                (const_int 24 [0x18])) [0 _412->data_zero_fill+0 S4 A32])) com_line.cpp:382 90 {*movsi_internal}
     (nil))
(insn 1797 1796 1798 100 (parallel [
            (set (reg:SI 1 dx [orig:365 D.6169 ] [365])
                (ashift:SI (reg:SI 1 dx [orig:364 D.6169 ] [364])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:382 511 {*ashlsi3_1}
     (nil))
(insn 1798 1797 1937 100 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:362 D.6166 ] [362])
                (const_int 24 [0x18])) [0 _411->data_zero_fill+0 S4 A32])
        (reg:SI 1 dx [orig:365 D.6169 ] [365])) com_line.cpp:382 90 {*movsi_internal}
     (nil))
(jump_insn 1937 1798 1938 100 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1938 1937 1801)
;; basic block 101, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 100, next block 102, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       99
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 366 367 368 369 370 994 995
(code_label 1801 1938 1802 101 61 "" [1 uses])
(note 1802 1801 1803 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 1803 1802 1804 101 (set (reg:SI 0 ax [994])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:384 90 {*movsi_internal}
     (nil))
(insn 1804 1803 1805 101 (set (reg:DI 0 ax [orig:366 D.6165 ] [366])
        (sign_extend:DI (reg:SI 0 ax [994]))) com_line.cpp:384 142 {*extendsidi2_rex64}
     (nil))
(insn 1805 1804 1806 101 (parallel [
            (set (reg:DI 1 dx [orig:367 D.6165 ] [367])
                (ashift:DI (reg:DI 0 ax [orig:366 D.6165 ] [366])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:384 512 {*ashldi3_1}
     (nil))
(insn 1806 1805 1807 101 (set (reg/f:DI 0 ax [995])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:384 89 {*movdi_internal}
     (nil))
(insn 1807 1806 1808 101 (parallel [
            (set (reg/f:DI 0 ax [orig:368 D.6167 ] [368])
                (plus:DI (reg/f:DI 0 ax [995])
                    (reg:DI 1 dx [orig:367 D.6165 ] [367])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:384 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:367 D.6165 ] [367]))
        (nil)))
(insn 1808 1807 1809 101 (set (reg/f:DI 0 ax [orig:369 D.6168 ] [369])
        (mem/f:DI (reg/f:DI 0 ax [orig:368 D.6167 ] [368]) [0 *_418+0 S8 A64])) com_line.cpp:384 89 {*movdi_internal}
     (nil))
(insn 1809 1808 1810 101 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fbe13120e10 *.LC2>)) com_line.cpp:384 89 {*movdi_internal}
     (nil))
(insn 1810 1809 1811 101 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:369 D.6168 ] [369])) com_line.cpp:384 89 {*movdi_internal}
     (nil))
(call_insn/i 1811 1810 1812 101 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:384 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1812 1811 1813 101 (set (reg:SI 0 ax [orig:370 D.6169 ] [370])
        (reg:SI 0 ax)) com_line.cpp:384 90 {*movsi_internal}
     (nil))
(insn 1813 1812 1814 101 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:370 D.6169 ] [370])
            (const_int 0 [0]))) com_line.cpp:384 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1814 1813 1815 101 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1820)
            (pc))) com_line.cpp:384 612 {*jcc_1}
     (nil)
 -> 1820)
;;  succ:       102 (FALLTHRU)
;;              103
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 102, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 101, next block 103, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       101 (FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1815 1814 1816 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 1816 1815 1817 102 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC45") [flags 0x2]  <var_decl 0x7fbe13187480 *.LC45>)) com_line.cpp:385 89 {*movdi_internal}
     (nil))
(call_insn 1817 1816 1939 102 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:385 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1939 1817 1940 102 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1940 1939 1820)
;; basic block 103, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 102, next block 104, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       101
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 371 372 373 374 375 996 997
(code_label 1820 1940 1821 103 62 "" [1 uses])
(note 1821 1820 1822 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 1822 1821 1823 103 (set (reg:SI 0 ax [996])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:387 90 {*movsi_internal}
     (nil))
(insn 1823 1822 1824 103 (set (reg:DI 0 ax [orig:371 D.6165 ] [371])
        (sign_extend:DI (reg:SI 0 ax [996]))) com_line.cpp:387 142 {*extendsidi2_rex64}
     (nil))
(insn 1824 1823 1825 103 (parallel [
            (set (reg:DI 1 dx [orig:372 D.6165 ] [372])
                (ashift:DI (reg:DI 0 ax [orig:371 D.6165 ] [371])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:387 512 {*ashldi3_1}
     (nil))
(insn 1825 1824 1826 103 (set (reg/f:DI 0 ax [997])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:387 89 {*movdi_internal}
     (nil))
(insn 1826 1825 1827 103 (parallel [
            (set (reg/f:DI 0 ax [orig:373 D.6167 ] [373])
                (plus:DI (reg/f:DI 0 ax [997])
                    (reg:DI 1 dx [orig:372 D.6165 ] [372])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:387 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:372 D.6165 ] [372]))
        (nil)))
(insn 1827 1826 1828 103 (set (reg/f:DI 0 ax [orig:374 D.6168 ] [374])
        (mem/f:DI (reg/f:DI 0 ax [orig:373 D.6167 ] [373]) [0 *_424+0 S8 A64])) com_line.cpp:387 89 {*movdi_internal}
     (nil))
(insn 1828 1827 1829 103 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fbe13120ea0 *.LC3>)) com_line.cpp:387 89 {*movdi_internal}
     (nil))
(insn 1829 1828 1830 103 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:374 D.6168 ] [374])) com_line.cpp:387 89 {*movdi_internal}
     (nil))
(call_insn/i 1830 1829 1831 103 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:387 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1831 1830 1832 103 (set (reg:SI 0 ax [orig:375 D.6169 ] [375])
        (reg:SI 0 ax)) com_line.cpp:387 90 {*movsi_internal}
     (nil))
(insn 1832 1831 1833 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:375 D.6169 ] [375])
            (const_int 0 [0]))) com_line.cpp:387 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1833 1832 1834 103 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1839)
            (pc))) com_line.cpp:387 612 {*jcc_1}
     (nil)
 -> 1839)
;;  succ:       104 (FALLTHRU)
;;              105
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 104, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 103, next block 105, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       103 (FALLTHRU)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1834 1833 1835 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn 1835 1834 1836 104 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC46") [flags 0x2]  <var_decl 0x7fbe13187510 *.LC46>)) com_line.cpp:388 89 {*movdi_internal}
     (nil))
(call_insn 1836 1835 1941 104 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:388 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1941 1836 1942 104 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1942 1941 1839)
;; basic block 105, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 104, next block 106, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       103
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 376 377 378 379 380 998 999
(code_label 1839 1942 1840 105 63 "" [1 uses])
(note 1840 1839 1841 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 1841 1840 1842 105 (set (reg:SI 0 ax [998])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:390 90 {*movsi_internal}
     (nil))
(insn 1842 1841 1843 105 (set (reg:DI 0 ax [orig:376 D.6165 ] [376])
        (sign_extend:DI (reg:SI 0 ax [998]))) com_line.cpp:390 142 {*extendsidi2_rex64}
     (nil))
(insn 1843 1842 1844 105 (parallel [
            (set (reg:DI 1 dx [orig:377 D.6165 ] [377])
                (ashift:DI (reg:DI 0 ax [orig:376 D.6165 ] [376])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:390 512 {*ashldi3_1}
     (nil))
(insn 1844 1843 1845 105 (set (reg/f:DI 0 ax [999])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:390 89 {*movdi_internal}
     (nil))
(insn 1845 1844 1846 105 (parallel [
            (set (reg/f:DI 0 ax [orig:378 D.6167 ] [378])
                (plus:DI (reg/f:DI 0 ax [999])
                    (reg:DI 1 dx [orig:377 D.6165 ] [377])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:390 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:377 D.6165 ] [377]))
        (nil)))
(insn 1846 1845 1847 105 (set (reg/f:DI 0 ax [orig:379 D.6168 ] [379])
        (mem/f:DI (reg/f:DI 0 ax [orig:378 D.6167 ] [378]) [0 *_430+0 S8 A64])) com_line.cpp:390 89 {*movdi_internal}
     (nil))
(insn 1847 1846 1848 105 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fbe13120f30 *.LC4>)) com_line.cpp:390 89 {*movdi_internal}
     (nil))
(insn 1848 1847 1849 105 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:379 D.6168 ] [379])) com_line.cpp:390 89 {*movdi_internal}
     (nil))
(call_insn/i 1849 1848 1850 105 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7fbe135a9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) com_line.cpp:390 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1850 1849 1851 105 (set (reg:SI 0 ax [orig:380 D.6169 ] [380])
        (reg:SI 0 ax)) com_line.cpp:390 90 {*movsi_internal}
     (nil))
(insn 1851 1850 1852 105 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:380 D.6169 ] [380])
            (const_int 0 [0]))) com_line.cpp:390 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1852 1851 1853 105 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1870)
            (pc))) com_line.cpp:390 612 {*jcc_1}
     (nil)
 -> 1870)
;;  succ:       106 (FALLTHRU)
;;              107
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 106, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 105, next block 107, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       105 (FALLTHRU)
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 381 382 383 384 385 1000 1001 1002
(note 1853 1852 1854 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(insn 1854 1853 1855 106 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC47") [flags 0x2]  <var_decl 0x7fbe131875a0 *.LC47>)) com_line.cpp:391 89 {*movdi_internal}
     (nil))
(call_insn 1855 1854 1856 106 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:391 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1856 1855 1857 106 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:394 217 {*addsi_1}
     (nil))
(insn 1857 1856 1858 106 (set (reg:SI 0 ax [1000])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -5048 [0xffffffffffffec48])) [0 argc_counter+0 S4 A32])) com_line.cpp:395 90 {*movsi_internal}
     (nil))
(insn 1858 1857 1859 106 (set (reg:DI 0 ax [orig:381 D.6165 ] [381])
        (sign_extend:DI (reg:SI 0 ax [1000]))) com_line.cpp:395 142 {*extendsidi2_rex64}
     (nil))
(insn 1859 1858 1860 106 (parallel [
            (set (reg:DI 1 dx [orig:382 D.6165 ] [382])
                (ashift:DI (reg:DI 0 ax [orig:381 D.6165 ] [381])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:395 512 {*ashldi3_1}
     (nil))
(insn 1860 1859 1861 106 (set (reg/f:DI 0 ax [1001])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5096 [0xffffffffffffec18])) [0 argv+0 S8 A64])) com_line.cpp:395 89 {*movdi_internal}
     (nil))
(insn 1861 1860 1862 106 (parallel [
            (set (reg/f:DI 0 ax [orig:383 D.6167 ] [383])
                (plus:DI (reg/f:DI 0 ax [1001])
                    (reg:DI 1 dx [orig:382 D.6165 ] [382])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:395 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5080 [0xffffffffffffec28])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:382 D.6165 ] [382]))
        (nil)))
(insn 1862 1861 1863 106 (set (reg/f:DI 0 ax [orig:384 D.6168 ] [384])
        (mem/f:DI (reg/f:DI 0 ax [orig:383 D.6167 ] [383]) [0 *_437+0 S8 A64])) com_line.cpp:395 89 {*movdi_internal}
     (nil))
(insn 1863 1862 1864 106 (set (reg/f:DI 1 dx [1002])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -5072 [0xffffffffffffec30])) [0 file+0 S8 A64])) com_line.cpp:395 89 {*movdi_internal}
     (nil))
(insn 1864 1863 1865 106 (parallel [
            (set (reg/f:DI 1 dx [orig:385 D.6170 ] [385])
                (plus:DI (reg/f:DI 1 dx [1002])
                    (const_int 1536 [0x600])))
            (clobber (reg:CC 17 flags))
        ]) com_line.cpp:395 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -5056 [0xffffffffffffec40])) [0 file+0 S8 A64])
            (const_int 1536 [0x600]))
        (nil)))
(insn 1865 1864 1866 106 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:384 D.6168 ] [384])) com_line.cpp:395 89 {*movdi_internal}
     (nil))
(insn 1866 1865 1867 106 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:385 D.6170 ] [385])) com_line.cpp:395 89 {*movdi_internal}
     (nil))
(call_insn 1867 1866 1943 106 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7fbe135a95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) com_line.cpp:395 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 1943 1867 1944 106 (set (pc)
        (label_ref 1877)) 654 {jump}
     (nil)
 -> 1877)
;;  succ:       108 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1944 1943 1870)
;; basic block 107, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 106, next block 108, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       105
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 1870 1944 1871 107 64 "" [1 uses])
(note 1871 1870 1872 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 1872 1871 1873 107 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC48") [flags 0x2]  <var_decl 0x7fbe13187630 *.LC48>)) com_line.cpp:398 89 {*movdi_internal}
     (nil))
(call_insn 1873 1872 1874 107 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fbe135b5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) com_line.cpp:398 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1874 1873 1875 107 (set (reg:SI 5 di)
        (const_int 2 [0x2])) com_line.cpp:399 90 {*movsi_internal}
     (nil))
(call_insn 1875 1874 1876 107 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fbe135d0ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) com_line.cpp:399 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1876 1875 1877)
;; basic block 108, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 107, next block 109, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 [100.0%] 
;;              76 [100.0%] 
;;              79 [100.0%] 
;;              83 [100.0%] 
;;              86 [100.0%] 
;;              88 [100.0%] 
;;              90 [100.0%] 
;;              92 [100.0%] 
;;              94 [100.0%] 
;;              96 [100.0%] 
;;              98 [100.0%] 
;;              100 [100.0%] 
;;              102 [100.0%] 
;;              104 [100.0%] 
;;              106 [100.0%] 
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1877 1876 1878 108 49 "" [15 uses])
(note 1878 1877 1945 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1945 1878 1946 108 (set (pc)
        (label_ref 1879)) com_line.cpp:185 654 {jump}
     (nil)
 -> 1879)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1946 1945 1882)
;; basic block 109, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 108, next block 110, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 565 566
(code_label 1882 1946 1883 109 29 "" [1 uses])
(note 1883 1882 1884 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(insn 1884 1883 1887 109 (set (reg:SI 0 ax [orig:565 D.6169 ] [565])
        (const_int 1 [0x1])) com_line.cpp:403 90 {*movsi_internal}
     (nil))
(insn 1887 1884 1891 109 (set (reg:SI 0 ax [orig:566 <retval> ] [566])
        (reg:SI 0 ax [orig:565 D.6169 ] [565])) com_line.cpp:403 90 {*movsi_internal}
     (nil))
(insn 1891 1887 1892 109 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:566 <retval> ] [566])) com_line.cpp:404 90 {*movsi_internal}
     (nil))
(insn 1892 1891 1893 109 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.6179+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [1005]))
        ]) com_line.cpp:404 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 1893 1892 1901 109 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1896)
            (pc))) com_line.cpp:404 612 {*jcc_1}
     (nil)
 -> 1896)
;;  succ:       111
;;              110 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 110, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 109, next block 111, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       109 (FALLTHRU)
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1901 1893 1894 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(call_insn 1894 1901 1895 110 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fbe134b1d80 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) com_line.cpp:404 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1895 1894 1896)
;; basic block 111, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 110, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       109
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1896 1895 1902 111 67 "" [1 uses])
(note 1902 1896 1897 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(insn 1897 1902 2017 111 (use (reg/i:SI 0 ax)) com_line.cpp:404 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 2017 1897 0 NOTE_INSN_DELETED)
