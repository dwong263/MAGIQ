
;; Function int main_header_swap(Data_file_header**, int) (_Z16main_header_swapPP16Data_file_headeri, funcdef_no=2, decl_uid=5494, cgraph_uid=2, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 11
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 28:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 36:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 43:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 51:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 56
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 58:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 66:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 80:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 81:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 86
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 88:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 96:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 108
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 110:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 111:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 123
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 125:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 126:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 138
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 140:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 141:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 146
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 155:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 156:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 161
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 163:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 168
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 170:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 171:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 176
	 Choosing alt 0 in insn 176:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 178:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 183
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 185:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 186:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 191
	 Choosing alt 0 in insn 191:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 193:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 200:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 201:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 204:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 205:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 206
	 Choosing alt 0 in insn 206:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 207:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 208:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 211:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 213
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 215:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 216:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 221
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 223:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 226:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 228
	 Choosing alt 0 in insn 228:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 230:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 231:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 235:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 236
	 Choosing alt 0 in insn 236:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 237:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 238:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 241:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 243
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 245:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 246:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 251
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 252:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 253:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 258
	 Choosing alt 0 in insn 258:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 260:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 261:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 266
	 Choosing alt 0 in insn 266:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 268:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 271:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 272:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 273
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 275:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 276:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 281
	 Choosing alt 0 in insn 281:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 282:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 283:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 288
	 Choosing alt 0 in insn 288:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 289:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 290:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 291:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 294:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 295:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 296
	 Choosing alt 0 in insn 296:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 298:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 301:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 303
	 Choosing alt 0 in insn 303:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 304:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 305:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 306:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 309:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 311
	 Choosing alt 0 in insn 311:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 312:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 313:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 316:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 318
	 Choosing alt 0 in insn 318:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 319:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 320:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 321:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 324:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 325:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 326
	 Choosing alt 0 in insn 326:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 327:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 328:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 331:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 332:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 333
	 Choosing alt 0 in insn 333:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 334:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 335:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 336:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 339:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 340:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 341
	 Choosing alt 0 in insn 341:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 342:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 343:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 346:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 348
	 Choosing alt 0 in insn 348:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 350:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 351:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 354:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 355:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 356
	 Choosing alt 0 in insn 356:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 357:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 358:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 361:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 363
	 Choosing alt 0 in insn 363:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 364:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 365:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 366:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 369:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 370:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 371
	 Choosing alt 0 in insn 371:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 372:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 373:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 376:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 377:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 378
	 Choosing alt 0 in insn 378:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 379:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 380:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 381:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 383:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 384:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 385:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 386
	 Choosing alt 0 in insn 386:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 387:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 388:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 391:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 392:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 393
	 Choosing alt 0 in insn 393:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 394:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 395:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 396:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 399:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 400:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 401
	 Choosing alt 0 in insn 401:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 402:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 403:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 406:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 407:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 408
	 Choosing alt 0 in insn 408:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 409:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 410:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 411:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 414:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 416
	 Choosing alt 0 in insn 416:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 417:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 418:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 421:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 422:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 423
	 Choosing alt 0 in insn 423:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 424:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 425:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 426:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 429:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 430:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 431
	 Choosing alt 0 in insn 431:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 432:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 433:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 436:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 437:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 438
	 Choosing alt 0 in insn 438:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 439:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 440:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 441:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 444:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 445:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 446
	 Choosing alt 0 in insn 446:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 448:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 452:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 453
	 Choosing alt 0 in insn 453:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 455:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 456:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 459:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 460:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 461
	 Choosing alt 0 in insn 461:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 462:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 463:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 466:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 467:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 468
	 Choosing alt 0 in insn 468:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 469:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 470:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 471:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 474:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 475:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 476
	 Choosing alt 0 in insn 476:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 477:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 478:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 481:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 482:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 483
	 Choosing alt 0 in insn 483:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 484:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 485:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 486:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 489:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 490:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 491
	 Choosing alt 0 in insn 491:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 492:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 494:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 495:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 497
	 Choosing alt 0 in insn 497:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 498:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 499:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 500:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 501:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 502:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 504:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 505:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 506:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 515: point = 0
   Insn 514: point = 0
   Insn 510: point = 1
   Insn 507: point = 3
   Insn 506: point = 4
   Insn 505: point = 5
   Insn 504: point = 7
   Insn 503: point = 8
   Insn 502: point = 9
   Insn 501: point = 10
   Insn 500: point = 11
   Insn 499: point = 12
   Insn 498: point = 13
   Insn 497: point = 15
   Insn 496: point = 17
   Insn 495: point = 18
   Insn 494: point = 20
   Insn 493: point = 22
   Insn 492: point = 23
   Insn 491: point = 25
   Insn 490: point = 27
   Insn 489: point = 28
   Insn 488: point = 30
   Insn 487: point = 32
   Insn 486: point = 33
   Insn 485: point = 34
   Insn 484: point = 36
   Insn 483: point = 38
   Insn 482: point = 40
   Insn 481: point = 41
   Insn 480: point = 43
   Insn 479: point = 45
   Insn 478: point = 46
   Insn 477: point = 48
   Insn 476: point = 50
   Insn 475: point = 52
   Insn 474: point = 53
   Insn 473: point = 55
   Insn 472: point = 57
   Insn 471: point = 58
   Insn 470: point = 59
   Insn 469: point = 61
   Insn 468: point = 63
   Insn 467: point = 65
   Insn 466: point = 66
   Insn 465: point = 68
   Insn 464: point = 70
   Insn 463: point = 71
   Insn 462: point = 73
   Insn 461: point = 75
   Insn 460: point = 77
   Insn 459: point = 78
   Insn 458: point = 80
   Insn 457: point = 82
   Insn 456: point = 83
   Insn 455: point = 84
   Insn 454: point = 86
   Insn 453: point = 88
   Insn 452: point = 90
   Insn 451: point = 91
   Insn 450: point = 93
   Insn 449: point = 95
   Insn 448: point = 96
   Insn 447: point = 98
   Insn 446: point = 100
   Insn 445: point = 102
   Insn 444: point = 103
   Insn 443: point = 105
   Insn 442: point = 107
   Insn 441: point = 108
   Insn 440: point = 109
   Insn 439: point = 111
   Insn 438: point = 113
   Insn 437: point = 115
   Insn 436: point = 116
   Insn 435: point = 118
   Insn 434: point = 120
   Insn 433: point = 121
   Insn 432: point = 123
   Insn 431: point = 125
   Insn 430: point = 127
   Insn 429: point = 128
   Insn 428: point = 130
   Insn 427: point = 132
   Insn 426: point = 133
   Insn 425: point = 134
   Insn 424: point = 136
   Insn 423: point = 138
   Insn 422: point = 140
   Insn 421: point = 141
   Insn 420: point = 143
   Insn 419: point = 145
   Insn 418: point = 146
   Insn 417: point = 148
   Insn 416: point = 150
   Insn 415: point = 152
   Insn 414: point = 153
   Insn 413: point = 155
   Insn 412: point = 157
   Insn 411: point = 158
   Insn 410: point = 159
   Insn 409: point = 161
   Insn 408: point = 163
   Insn 407: point = 165
   Insn 406: point = 166
   Insn 405: point = 168
   Insn 404: point = 170
   Insn 403: point = 171
   Insn 402: point = 173
   Insn 401: point = 175
   Insn 400: point = 177
   Insn 399: point = 178
   Insn 398: point = 180
   Insn 397: point = 182
   Insn 396: point = 183
   Insn 395: point = 184
   Insn 394: point = 186
   Insn 393: point = 188
   Insn 392: point = 190
   Insn 391: point = 191
   Insn 390: point = 193
   Insn 389: point = 195
   Insn 388: point = 196
   Insn 387: point = 198
   Insn 386: point = 200
   Insn 385: point = 202
   Insn 384: point = 203
   Insn 383: point = 205
   Insn 382: point = 207
   Insn 381: point = 208
   Insn 380: point = 209
   Insn 379: point = 211
   Insn 378: point = 213
   Insn 377: point = 215
   Insn 376: point = 216
   Insn 375: point = 218
   Insn 374: point = 220
   Insn 373: point = 221
   Insn 372: point = 223
   Insn 371: point = 225
   Insn 370: point = 227
   Insn 369: point = 228
   Insn 368: point = 230
   Insn 367: point = 232
   Insn 366: point = 233
   Insn 365: point = 234
   Insn 364: point = 236
   Insn 363: point = 238
   Insn 362: point = 240
   Insn 361: point = 241
   Insn 360: point = 243
   Insn 359: point = 245
   Insn 358: point = 246
   Insn 357: point = 248
   Insn 356: point = 250
   Insn 355: point = 252
   Insn 354: point = 253
   Insn 353: point = 255
   Insn 352: point = 257
   Insn 351: point = 258
   Insn 350: point = 259
   Insn 349: point = 261
   Insn 348: point = 263
   Insn 347: point = 265
   Insn 346: point = 266
   Insn 345: point = 268
   Insn 344: point = 270
   Insn 343: point = 271
   Insn 342: point = 273
   Insn 341: point = 275
   Insn 340: point = 277
   Insn 339: point = 278
   Insn 338: point = 280
   Insn 337: point = 282
   Insn 336: point = 283
   Insn 335: point = 284
   Insn 334: point = 286
   Insn 333: point = 288
   Insn 332: point = 290
   Insn 331: point = 291
   Insn 330: point = 293
   Insn 329: point = 295
   Insn 328: point = 296
   Insn 327: point = 298
   Insn 326: point = 300
   Insn 325: point = 302
   Insn 324: point = 303
   Insn 323: point = 305
   Insn 322: point = 307
   Insn 321: point = 308
   Insn 320: point = 309
   Insn 319: point = 311
   Insn 318: point = 313
   Insn 317: point = 315
   Insn 316: point = 316
   Insn 315: point = 318
   Insn 314: point = 320
   Insn 313: point = 321
   Insn 312: point = 323
   Insn 311: point = 325
   Insn 310: point = 327
   Insn 309: point = 328
   Insn 308: point = 330
   Insn 307: point = 332
   Insn 306: point = 333
   Insn 305: point = 334
   Insn 304: point = 336
   Insn 303: point = 338
   Insn 302: point = 340
   Insn 301: point = 341
   Insn 300: point = 343
   Insn 299: point = 345
   Insn 298: point = 346
   Insn 297: point = 348
   Insn 296: point = 350
   Insn 295: point = 352
   Insn 294: point = 353
   Insn 293: point = 355
   Insn 292: point = 357
   Insn 291: point = 358
   Insn 290: point = 359
   Insn 289: point = 361
   Insn 288: point = 363
   Insn 287: point = 365
   Insn 286: point = 366
   Insn 285: point = 368
   Insn 284: point = 370
   Insn 283: point = 371
   Insn 282: point = 373
   Insn 281: point = 375
   Insn 280: point = 377
   Insn 279: point = 378
   Insn 278: point = 380
   Insn 277: point = 382
   Insn 276: point = 383
   Insn 275: point = 384
   Insn 274: point = 386
   Insn 273: point = 388
   Insn 272: point = 390
   Insn 271: point = 391
   Insn 270: point = 393
   Insn 269: point = 395
   Insn 268: point = 396
   Insn 267: point = 398
   Insn 266: point = 400
   Insn 265: point = 402
   Insn 264: point = 403
   Insn 263: point = 405
   Insn 262: point = 407
   Insn 261: point = 408
   Insn 260: point = 409
   Insn 259: point = 411
   Insn 258: point = 413
   Insn 257: point = 415
   Insn 256: point = 416
   Insn 255: point = 418
   Insn 254: point = 420
   Insn 253: point = 421
   Insn 252: point = 423
   Insn 251: point = 425
   Insn 250: point = 427
   Insn 249: point = 428
   Insn 248: point = 430
   Insn 247: point = 432
   Insn 246: point = 433
   Insn 245: point = 434
   Insn 244: point = 436
   Insn 243: point = 438
   Insn 242: point = 440
   Insn 241: point = 441
   Insn 240: point = 443
   Insn 239: point = 445
   Insn 238: point = 446
   Insn 237: point = 448
   Insn 236: point = 450
   Insn 235: point = 452
   Insn 234: point = 453
   Insn 233: point = 455
   Insn 232: point = 457
   Insn 231: point = 458
   Insn 230: point = 459
   Insn 229: point = 461
   Insn 228: point = 463
   Insn 227: point = 465
   Insn 226: point = 466
   Insn 225: point = 468
   Insn 224: point = 470
   Insn 223: point = 471
   Insn 222: point = 473
   Insn 221: point = 475
   Insn 220: point = 477
   Insn 219: point = 478
   Insn 218: point = 480
   Insn 217: point = 482
   Insn 216: point = 483
   Insn 215: point = 484
   Insn 214: point = 486
   Insn 213: point = 488
   Insn 212: point = 490
   Insn 211: point = 491
   Insn 210: point = 493
   Insn 209: point = 495
   Insn 208: point = 496
   Insn 207: point = 498
   Insn 206: point = 500
   Insn 205: point = 502
   Insn 204: point = 503
   Insn 203: point = 505
   Insn 202: point = 507
   Insn 201: point = 508
   Insn 200: point = 509
   Insn 199: point = 511
   Insn 198: point = 513
   Insn 197: point = 515
   Insn 196: point = 516
   Insn 195: point = 518
   Insn 194: point = 520
   Insn 193: point = 521
   Insn 192: point = 523
   Insn 191: point = 525
   Insn 190: point = 527
   Insn 189: point = 528
   Insn 188: point = 530
   Insn 187: point = 532
   Insn 186: point = 533
   Insn 185: point = 534
   Insn 184: point = 536
   Insn 183: point = 538
   Insn 182: point = 540
   Insn 181: point = 541
   Insn 180: point = 543
   Insn 179: point = 545
   Insn 178: point = 546
   Insn 177: point = 548
   Insn 176: point = 550
   Insn 175: point = 552
   Insn 174: point = 553
   Insn 173: point = 555
   Insn 172: point = 557
   Insn 171: point = 558
   Insn 170: point = 559
   Insn 169: point = 561
   Insn 168: point = 563
   Insn 167: point = 565
   Insn 166: point = 566
   Insn 165: point = 568
   Insn 164: point = 570
   Insn 163: point = 571
   Insn 162: point = 573
   Insn 161: point = 575
   Insn 160: point = 577
   Insn 159: point = 578
   Insn 158: point = 580
   Insn 157: point = 582
   Insn 156: point = 583
   Insn 155: point = 584
   Insn 154: point = 586
   Insn 153: point = 588
   Insn 152: point = 590
   Insn 151: point = 591
   Insn 150: point = 593
   Insn 149: point = 595
   Insn 148: point = 596
   Insn 147: point = 598
   Insn 146: point = 600
   Insn 145: point = 602
   Insn 144: point = 603
   Insn 143: point = 605
   Insn 142: point = 607
   Insn 141: point = 608
   Insn 140: point = 609
   Insn 139: point = 611
   Insn 138: point = 613
   Insn 137: point = 615
   Insn 136: point = 616
   Insn 135: point = 618
   Insn 134: point = 620
   Insn 133: point = 621
   Insn 132: point = 623
   Insn 131: point = 625
   Insn 130: point = 627
   Insn 129: point = 628
   Insn 128: point = 630
   Insn 127: point = 632
   Insn 126: point = 633
   Insn 125: point = 634
   Insn 124: point = 636
   Insn 123: point = 638
   Insn 122: point = 640
   Insn 121: point = 641
   Insn 120: point = 643
   Insn 119: point = 645
   Insn 118: point = 646
   Insn 117: point = 648
   Insn 116: point = 650
   Insn 115: point = 652
   Insn 114: point = 653
   Insn 113: point = 655
   Insn 112: point = 657
   Insn 111: point = 658
   Insn 110: point = 659
   Insn 109: point = 661
   Insn 108: point = 663
   Insn 107: point = 665
   Insn 106: point = 666
   Insn 105: point = 668
   Insn 104: point = 670
   Insn 103: point = 671
   Insn 102: point = 673
   Insn 101: point = 675
   Insn 100: point = 677
   Insn 99: point = 678
   Insn 98: point = 680
   Insn 97: point = 682
   Insn 96: point = 683
   Insn 95: point = 684
   Insn 94: point = 686
   Insn 93: point = 688
   Insn 92: point = 690
   Insn 91: point = 691
   Insn 90: point = 693
   Insn 89: point = 695
   Insn 88: point = 696
   Insn 87: point = 698
   Insn 86: point = 700
   Insn 85: point = 702
   Insn 84: point = 703
   Insn 83: point = 705
   Insn 82: point = 707
   Insn 81: point = 708
   Insn 80: point = 709
   Insn 79: point = 711
   Insn 78: point = 713
   Insn 77: point = 715
   Insn 76: point = 716
   Insn 75: point = 718
   Insn 74: point = 720
   Insn 73: point = 721
   Insn 72: point = 723
   Insn 71: point = 725
   Insn 70: point = 727
   Insn 69: point = 728
   Insn 68: point = 730
   Insn 67: point = 732
   Insn 66: point = 733
   Insn 65: point = 734
   Insn 64: point = 736
   Insn 63: point = 738
   Insn 62: point = 740
   Insn 61: point = 741
   Insn 60: point = 743
   Insn 59: point = 745
   Insn 58: point = 746
   Insn 57: point = 748
   Insn 56: point = 750
   Insn 55: point = 752
   Insn 54: point = 753
   Insn 53: point = 755
   Insn 52: point = 757
   Insn 51: point = 758
   Insn 50: point = 759
   Insn 49: point = 761
   Insn 48: point = 763
   Insn 47: point = 765
   Insn 46: point = 766
   Insn 45: point = 768
   Insn 44: point = 770
   Insn 43: point = 771
   Insn 42: point = 773
   Insn 41: point = 775
   Insn 40: point = 777
   Insn 39: point = 778
   Insn 38: point = 780
   Insn 37: point = 782
   Insn 36: point = 783
   Insn 35: point = 784
   Insn 34: point = 786
   Insn 33: point = 788
   Insn 32: point = 790
   Insn 31: point = 791
   Insn 30: point = 793
   Insn 29: point = 795
   Insn 28: point = 796
   Insn 27: point = 798
   Insn 26: point = 800
   Insn 25: point = 802
   Insn 24: point = 803
   Insn 23: point = 805
   Insn 22: point = 807
   Insn 21: point = 808
   Insn 20: point = 809
   Insn 19: point = 811
   Insn 18: point = 813
   Insn 17: point = 815
   Insn 16: point = 816
   Insn 15: point = 818
   Insn 14: point = 820
   Insn 13: point = 821
   Insn 12: point = 823
   Insn 11: point = 825
   Insn 10: point = 827
   Insn 9: point = 828
   Insn 8: point = 830
   Insn 7: point = 832
   Insn 3: point = 833
   Insn 2: point = 833
 r87: [829..830]
 r88: [826..828]
 r89: [824..825]
 r90: [822..823]
 r91: [808..821]
 r92: [817..818]
 r93: [814..816]
 r94: [812..813]
 r95: [810..811]
 r96: [808..809]
 r97: [804..805]
 r98: [801..803]
 r99: [799..800]
 r100: [797..798]
 r101: [783..796]
 r102: [792..793]
 r103: [789..791]
 r104: [787..788]
 r105: [785..786]
 r106: [783..784]
 r107: [779..780]
 r108: [776..778]
 r109: [774..775]
 r110: [772..773]
 r111: [758..771]
 r112: [767..768]
 r113: [764..766]
 r114: [762..763]
 r115: [760..761]
 r116: [758..759]
 r117: [754..755]
 r118: [751..753]
 r119: [749..750]
 r120: [747..748]
 r121: [733..746]
 r122: [742..743]
 r123: [739..741]
 r124: [737..738]
 r125: [735..736]
 r126: [733..734]
 r127: [729..730]
 r128: [726..728]
 r129: [724..725]
 r130: [722..723]
 r131: [708..721]
 r132: [717..718]
 r133: [714..716]
 r134: [712..713]
 r135: [710..711]
 r136: [708..709]
 r137: [704..705]
 r138: [701..703]
 r139: [699..700]
 r140: [697..698]
 r141: [683..696]
 r142: [692..693]
 r143: [689..691]
 r144: [687..688]
 r145: [685..686]
 r146: [683..684]
 r147: [679..680]
 r148: [676..678]
 r149: [674..675]
 r150: [672..673]
 r151: [658..671]
 r152: [667..668]
 r153: [664..666]
 r154: [662..663]
 r155: [660..661]
 r156: [658..659]
 r157: [654..655]
 r158: [651..653]
 r159: [649..650]
 r160: [647..648]
 r161: [633..646]
 r162: [642..643]
 r163: [639..641]
 r164: [637..638]
 r165: [635..636]
 r166: [633..634]
 r167: [629..630]
 r168: [626..628]
 r169: [624..625]
 r170: [622..623]
 r171: [608..621]
 r172: [617..618]
 r173: [614..616]
 r174: [612..613]
 r175: [610..611]
 r176: [608..609]
 r177: [604..605]
 r178: [601..603]
 r179: [599..600]
 r180: [597..598]
 r181: [583..596]
 r182: [592..593]
 r183: [589..591]
 r184: [587..588]
 r185: [585..586]
 r186: [583..584]
 r187: [579..580]
 r188: [576..578]
 r189: [574..575]
 r190: [572..573]
 r191: [558..571]
 r192: [567..568]
 r193: [564..566]
 r194: [562..563]
 r195: [560..561]
 r196: [558..559]
 r197: [554..555]
 r198: [551..553]
 r199: [549..550]
 r200: [547..548]
 r201: [533..546]
 r202: [542..543]
 r203: [539..541]
 r204: [537..538]
 r205: [535..536]
 r206: [533..534]
 r207: [529..530]
 r208: [526..528]
 r209: [524..525]
 r210: [522..523]
 r211: [508..521]
 r212: [517..518]
 r213: [514..516]
 r214: [512..513]
 r215: [510..511]
 r216: [508..509]
 r217: [504..505]
 r218: [501..503]
 r219: [499..500]
 r220: [497..498]
 r221: [483..496]
 r222: [492..493]
 r223: [489..491]
 r224: [487..488]
 r225: [485..486]
 r226: [483..484]
 r227: [479..480]
 r228: [476..478]
 r229: [474..475]
 r230: [472..473]
 r231: [458..471]
 r232: [467..468]
 r233: [464..466]
 r234: [462..463]
 r235: [460..461]
 r236: [458..459]
 r237: [454..455]
 r238: [451..453]
 r239: [449..450]
 r240: [447..448]
 r241: [433..446]
 r242: [442..443]
 r243: [439..441]
 r244: [437..438]
 r245: [435..436]
 r246: [433..434]
 r247: [429..430]
 r248: [426..428]
 r249: [424..425]
 r250: [422..423]
 r251: [408..421]
 r252: [417..418]
 r253: [414..416]
 r254: [412..413]
 r255: [410..411]
 r256: [408..409]
 r257: [404..405]
 r258: [401..403]
 r259: [399..400]
 r260: [397..398]
 r261: [383..396]
 r262: [392..393]
 r263: [389..391]
 r264: [387..388]
 r265: [385..386]
 r266: [383..384]
 r267: [379..380]
 r268: [376..378]
 r269: [374..375]
 r270: [372..373]
 r271: [358..371]
 r272: [367..368]
 r273: [364..366]
 r274: [362..363]
 r275: [360..361]
 r276: [358..359]
 r277: [354..355]
 r278: [351..353]
 r279: [349..350]
 r280: [347..348]
 r281: [333..346]
 r282: [342..343]
 r283: [339..341]
 r284: [337..338]
 r285: [335..336]
 r286: [333..334]
 r287: [329..330]
 r288: [326..328]
 r289: [324..325]
 r290: [322..323]
 r291: [308..321]
 r292: [317..318]
 r293: [314..316]
 r294: [312..313]
 r295: [310..311]
 r296: [308..309]
 r297: [304..305]
 r298: [301..303]
 r299: [299..300]
 r300: [297..298]
 r301: [283..296]
 r302: [292..293]
 r303: [289..291]
 r304: [287..288]
 r305: [285..286]
 r306: [283..284]
 r307: [279..280]
 r308: [276..278]
 r309: [274..275]
 r310: [272..273]
 r311: [258..271]
 r312: [267..268]
 r313: [264..266]
 r314: [262..263]
 r315: [260..261]
 r316: [258..259]
 r317: [254..255]
 r318: [251..253]
 r319: [249..250]
 r320: [247..248]
 r321: [233..246]
 r322: [242..243]
 r323: [239..241]
 r324: [237..238]
 r325: [235..236]
 r326: [233..234]
 r327: [229..230]
 r328: [226..228]
 r329: [224..225]
 r330: [222..223]
 r331: [208..221]
 r332: [217..218]
 r333: [214..216]
 r334: [212..213]
 r335: [210..211]
 r336: [208..209]
 r337: [204..205]
 r338: [201..203]
 r339: [199..200]
 r340: [197..198]
 r341: [183..196]
 r342: [192..193]
 r343: [189..191]
 r344: [187..188]
 r345: [185..186]
 r346: [183..184]
 r347: [179..180]
 r348: [176..178]
 r349: [174..175]
 r350: [172..173]
 r351: [158..171]
 r352: [167..168]
 r353: [164..166]
 r354: [162..163]
 r355: [160..161]
 r356: [158..159]
 r357: [154..155]
 r358: [151..153]
 r359: [149..150]
 r360: [147..148]
 r361: [133..146]
 r362: [142..143]
 r363: [139..141]
 r364: [137..138]
 r365: [135..136]
 r366: [133..134]
 r367: [129..130]
 r368: [126..128]
 r369: [124..125]
 r370: [122..123]
 r371: [108..121]
 r372: [117..118]
 r373: [114..116]
 r374: [112..113]
 r375: [110..111]
 r376: [108..109]
 r377: [104..105]
 r378: [101..103]
 r379: [99..100]
 r380: [97..98]
 r381: [83..96]
 r382: [92..93]
 r383: [89..91]
 r384: [87..88]
 r385: [85..86]
 r386: [83..84]
 r387: [79..80]
 r388: [76..78]
 r389: [74..75]
 r390: [72..73]
 r391: [58..71]
 r392: [67..68]
 r393: [64..66]
 r394: [62..63]
 r395: [60..61]
 r396: [58..59]
 r397: [54..55]
 r398: [51..53]
 r399: [49..50]
 r400: [47..48]
 r401: [33..46]
 r402: [42..43]
 r403: [39..41]
 r404: [37..38]
 r405: [35..36]
 r406: [33..34]
 r407: [29..30]
 r408: [26..28]
 r409: [24..25]
 r410: [4..23]
 r411: [19..20]
 r412: [16..18]
 r413: [14..15]
 r414: [6..13]
 r415: [2..3]
 r416: [0..1]
 r417: [831..832]
 r418: [826..827]
 r419: [819..820]
 r420: [814..815]
 r421: [806..807]
 r422: [801..802]
 r423: [794..795]
 r424: [789..790]
 r425: [781..782]
 r426: [776..777]
 r427: [769..770]
 r428: [764..765]
 r429: [756..757]
 r430: [751..752]
 r431: [744..745]
 r432: [739..740]
 r433: [731..732]
 r434: [726..727]
 r435: [719..720]
 r436: [714..715]
 r437: [706..707]
 r438: [701..702]
 r439: [694..695]
 r440: [689..690]
 r441: [681..682]
 r442: [676..677]
 r443: [669..670]
 r444: [664..665]
 r445: [656..657]
 r446: [651..652]
 r447: [644..645]
 r448: [639..640]
 r449: [631..632]
 r450: [626..627]
 r451: [619..620]
 r452: [614..615]
 r453: [606..607]
 r454: [601..602]
 r455: [594..595]
 r456: [589..590]
 r457: [581..582]
 r458: [576..577]
 r459: [569..570]
 r460: [564..565]
 r461: [556..557]
 r462: [551..552]
 r463: [544..545]
 r464: [539..540]
 r465: [531..532]
 r466: [526..527]
 r467: [519..520]
 r468: [514..515]
 r469: [506..507]
 r470: [501..502]
 r471: [494..495]
 r472: [489..490]
 r473: [481..482]
 r474: [476..477]
 r475: [469..470]
 r476: [464..465]
 r477: [456..457]
 r478: [451..452]
 r479: [444..445]
 r480: [439..440]
 r481: [431..432]
 r482: [426..427]
 r483: [419..420]
 r484: [414..415]
 r485: [406..407]
 r486: [401..402]
 r487: [394..395]
 r488: [389..390]
 r489: [381..382]
 r490: [376..377]
 r491: [369..370]
 r492: [364..365]
 r493: [356..357]
 r494: [351..352]
 r495: [344..345]
 r496: [339..340]
 r497: [331..332]
 r498: [326..327]
 r499: [319..320]
 r500: [314..315]
 r501: [306..307]
 r502: [301..302]
 r503: [294..295]
 r504: [289..290]
 r505: [281..282]
 r506: [276..277]
 r507: [269..270]
 r508: [264..265]
 r509: [256..257]
 r510: [251..252]
 r511: [244..245]
 r512: [239..240]
 r513: [231..232]
 r514: [226..227]
 r515: [219..220]
 r516: [214..215]
 r517: [206..207]
 r518: [201..202]
 r519: [194..195]
 r520: [189..190]
 r521: [181..182]
 r522: [176..177]
 r523: [169..170]
 r524: [164..165]
 r525: [156..157]
 r526: [151..152]
 r527: [144..145]
 r528: [139..140]
 r529: [131..132]
 r530: [126..127]
 r531: [119..120]
 r532: [114..115]
 r533: [106..107]
 r534: [101..102]
 r535: [94..95]
 r536: [89..90]
 r537: [81..82]
 r538: [76..77]
 r539: [69..70]
 r540: [64..65]
 r541: [56..57]
 r542: [51..52]
 r543: [44..45]
 r544: [39..40]
 r545: [31..32]
 r546: [26..27]
 r547: [21..22]
 r548: [16..17]
 r549: [11..12]
 r550: [9..10]
 r551: [7..8]
 r552: [4..5]
Compressing live ranges: from 833 to 732 - 87%
Ranges after the compression:
 r87: [728..729]
 r88: [726..727]
 r89: [724..725]
 r90: [722..723]
 r91: [710..721]
 r92: [718..719]
 r93: [716..717]
 r94: [714..715]
 r95: [712..713]
 r96: [710..711]
 r97: [706..707]
 r98: [704..705]
 r99: [702..703]
 r100: [700..701]
 r101: [688..699]
 r102: [696..697]
 r103: [694..695]
 r104: [692..693]
 r105: [690..691]
 r106: [688..689]
 r107: [684..685]
 r108: [682..683]
 r109: [680..681]
 r110: [678..679]
 r111: [666..677]
 r112: [674..675]
 r113: [672..673]
 r114: [670..671]
 r115: [668..669]
 r116: [666..667]
 r117: [662..663]
 r118: [660..661]
 r119: [658..659]
 r120: [656..657]
 r121: [644..655]
 r122: [652..653]
 r123: [650..651]
 r124: [648..649]
 r125: [646..647]
 r126: [644..645]
 r127: [640..641]
 r128: [638..639]
 r129: [636..637]
 r130: [634..635]
 r131: [622..633]
 r132: [630..631]
 r133: [628..629]
 r134: [626..627]
 r135: [624..625]
 r136: [622..623]
 r137: [618..619]
 r138: [616..617]
 r139: [614..615]
 r140: [612..613]
 r141: [600..611]
 r142: [608..609]
 r143: [606..607]
 r144: [604..605]
 r145: [602..603]
 r146: [600..601]
 r147: [596..597]
 r148: [594..595]
 r149: [592..593]
 r150: [590..591]
 r151: [578..589]
 r152: [586..587]
 r153: [584..585]
 r154: [582..583]
 r155: [580..581]
 r156: [578..579]
 r157: [574..575]
 r158: [572..573]
 r159: [570..571]
 r160: [568..569]
 r161: [556..567]
 r162: [564..565]
 r163: [562..563]
 r164: [560..561]
 r165: [558..559]
 r166: [556..557]
 r167: [552..553]
 r168: [550..551]
 r169: [548..549]
 r170: [546..547]
 r171: [534..545]
 r172: [542..543]
 r173: [540..541]
 r174: [538..539]
 r175: [536..537]
 r176: [534..535]
 r177: [530..531]
 r178: [528..529]
 r179: [526..527]
 r180: [524..525]
 r181: [512..523]
 r182: [520..521]
 r183: [518..519]
 r184: [516..517]
 r185: [514..515]
 r186: [512..513]
 r187: [508..509]
 r188: [506..507]
 r189: [504..505]
 r190: [502..503]
 r191: [490..501]
 r192: [498..499]
 r193: [496..497]
 r194: [494..495]
 r195: [492..493]
 r196: [490..491]
 r197: [486..487]
 r198: [484..485]
 r199: [482..483]
 r200: [480..481]
 r201: [468..479]
 r202: [476..477]
 r203: [474..475]
 r204: [472..473]
 r205: [470..471]
 r206: [468..469]
 r207: [464..465]
 r208: [462..463]
 r209: [460..461]
 r210: [458..459]
 r211: [446..457]
 r212: [454..455]
 r213: [452..453]
 r214: [450..451]
 r215: [448..449]
 r216: [446..447]
 r217: [442..443]
 r218: [440..441]
 r219: [438..439]
 r220: [436..437]
 r221: [424..435]
 r222: [432..433]
 r223: [430..431]
 r224: [428..429]
 r225: [426..427]
 r226: [424..425]
 r227: [420..421]
 r228: [418..419]
 r229: [416..417]
 r230: [414..415]
 r231: [402..413]
 r232: [410..411]
 r233: [408..409]
 r234: [406..407]
 r235: [404..405]
 r236: [402..403]
 r237: [398..399]
 r238: [396..397]
 r239: [394..395]
 r240: [392..393]
 r241: [380..391]
 r242: [388..389]
 r243: [386..387]
 r244: [384..385]
 r245: [382..383]
 r246: [380..381]
 r247: [376..377]
 r248: [374..375]
 r249: [372..373]
 r250: [370..371]
 r251: [358..369]
 r252: [366..367]
 r253: [364..365]
 r254: [362..363]
 r255: [360..361]
 r256: [358..359]
 r257: [354..355]
 r258: [352..353]
 r259: [350..351]
 r260: [348..349]
 r261: [336..347]
 r262: [344..345]
 r263: [342..343]
 r264: [340..341]
 r265: [338..339]
 r266: [336..337]
 r267: [332..333]
 r268: [330..331]
 r269: [328..329]
 r270: [326..327]
 r271: [314..325]
 r272: [322..323]
 r273: [320..321]
 r274: [318..319]
 r275: [316..317]
 r276: [314..315]
 r277: [310..311]
 r278: [308..309]
 r279: [306..307]
 r280: [304..305]
 r281: [292..303]
 r282: [300..301]
 r283: [298..299]
 r284: [296..297]
 r285: [294..295]
 r286: [292..293]
 r287: [288..289]
 r288: [286..287]
 r289: [284..285]
 r290: [282..283]
 r291: [270..281]
 r292: [278..279]
 r293: [276..277]
 r294: [274..275]
 r295: [272..273]
 r296: [270..271]
 r297: [266..267]
 r298: [264..265]
 r299: [262..263]
 r300: [260..261]
 r301: [248..259]
 r302: [256..257]
 r303: [254..255]
 r304: [252..253]
 r305: [250..251]
 r306: [248..249]
 r307: [244..245]
 r308: [242..243]
 r309: [240..241]
 r310: [238..239]
 r311: [226..237]
 r312: [234..235]
 r313: [232..233]
 r314: [230..231]
 r315: [228..229]
 r316: [226..227]
 r317: [222..223]
 r318: [220..221]
 r319: [218..219]
 r320: [216..217]
 r321: [204..215]
 r322: [212..213]
 r323: [210..211]
 r324: [208..209]
 r325: [206..207]
 r326: [204..205]
 r327: [200..201]
 r328: [198..199]
 r329: [196..197]
 r330: [194..195]
 r331: [182..193]
 r332: [190..191]
 r333: [188..189]
 r334: [186..187]
 r335: [184..185]
 r336: [182..183]
 r337: [178..179]
 r338: [176..177]
 r339: [174..175]
 r340: [172..173]
 r341: [160..171]
 r342: [168..169]
 r343: [166..167]
 r344: [164..165]
 r345: [162..163]
 r346: [160..161]
 r347: [156..157]
 r348: [154..155]
 r349: [152..153]
 r350: [150..151]
 r351: [138..149]
 r352: [146..147]
 r353: [144..145]
 r354: [142..143]
 r355: [140..141]
 r356: [138..139]
 r357: [134..135]
 r358: [132..133]
 r359: [130..131]
 r360: [128..129]
 r361: [116..127]
 r362: [124..125]
 r363: [122..123]
 r364: [120..121]
 r365: [118..119]
 r366: [116..117]
 r367: [112..113]
 r368: [110..111]
 r369: [108..109]
 r370: [106..107]
 r371: [94..105]
 r372: [102..103]
 r373: [100..101]
 r374: [98..99]
 r375: [96..97]
 r376: [94..95]
 r377: [90..91]
 r378: [88..89]
 r379: [86..87]
 r380: [84..85]
 r381: [72..83]
 r382: [80..81]
 r383: [78..79]
 r384: [76..77]
 r385: [74..75]
 r386: [72..73]
 r387: [68..69]
 r388: [66..67]
 r389: [64..65]
 r390: [62..63]
 r391: [50..61]
 r392: [58..59]
 r393: [56..57]
 r394: [54..55]
 r395: [52..53]
 r396: [50..51]
 r397: [46..47]
 r398: [44..45]
 r399: [42..43]
 r400: [40..41]
 r401: [28..39]
 r402: [36..37]
 r403: [34..35]
 r404: [32..33]
 r405: [30..31]
 r406: [28..29]
 r407: [24..25]
 r408: [22..23]
 r409: [20..21]
 r410: [4..19]
 r411: [16..17]
 r412: [14..15]
 r413: [12..13]
 r414: [6..11]
 r415: [2..3]
 r416: [0..1]
 r417: [730..731]
 r418: [726..727]
 r419: [720..721]
 r420: [716..717]
 r421: [708..709]
 r422: [704..705]
 r423: [698..699]
 r424: [694..695]
 r425: [686..687]
 r426: [682..683]
 r427: [676..677]
 r428: [672..673]
 r429: [664..665]
 r430: [660..661]
 r431: [654..655]
 r432: [650..651]
 r433: [642..643]
 r434: [638..639]
 r435: [632..633]
 r436: [628..629]
 r437: [620..621]
 r438: [616..617]
 r439: [610..611]
 r440: [606..607]
 r441: [598..599]
 r442: [594..595]
 r443: [588..589]
 r444: [584..585]
 r445: [576..577]
 r446: [572..573]
 r447: [566..567]
 r448: [562..563]
 r449: [554..555]
 r450: [550..551]
 r451: [544..545]
 r452: [540..541]
 r453: [532..533]
 r454: [528..529]
 r455: [522..523]
 r456: [518..519]
 r457: [510..511]
 r458: [506..507]
 r459: [500..501]
 r460: [496..497]
 r461: [488..489]
 r462: [484..485]
 r463: [478..479]
 r464: [474..475]
 r465: [466..467]
 r466: [462..463]
 r467: [456..457]
 r468: [452..453]
 r469: [444..445]
 r470: [440..441]
 r471: [434..435]
 r472: [430..431]
 r473: [422..423]
 r474: [418..419]
 r475: [412..413]
 r476: [408..409]
 r477: [400..401]
 r478: [396..397]
 r479: [390..391]
 r480: [386..387]
 r481: [378..379]
 r482: [374..375]
 r483: [368..369]
 r484: [364..365]
 r485: [356..357]
 r486: [352..353]
 r487: [346..347]
 r488: [342..343]
 r489: [334..335]
 r490: [330..331]
 r491: [324..325]
 r492: [320..321]
 r493: [312..313]
 r494: [308..309]
 r495: [302..303]
 r496: [298..299]
 r497: [290..291]
 r498: [286..287]
 r499: [280..281]
 r500: [276..277]
 r501: [268..269]
 r502: [264..265]
 r503: [258..259]
 r504: [254..255]
 r505: [246..247]
 r506: [242..243]
 r507: [236..237]
 r508: [232..233]
 r509: [224..225]
 r510: [220..221]
 r511: [214..215]
 r512: [210..211]
 r513: [202..203]
 r514: [198..199]
 r515: [192..193]
 r516: [188..189]
 r517: [180..181]
 r518: [176..177]
 r519: [170..171]
 r520: [166..167]
 r521: [158..159]
 r522: [154..155]
 r523: [148..149]
 r524: [144..145]
 r525: [136..137]
 r526: [132..133]
 r527: [126..127]
 r528: [122..123]
 r529: [114..115]
 r530: [110..111]
 r531: [104..105]
 r532: [100..101]
 r533: [92..93]
 r534: [88..89]
 r535: [82..83]
 r536: [78..79]
 r537: [70..71]
 r538: [66..67]
 r539: [60..61]
 r540: [56..57]
 r541: [48..49]
 r542: [44..45]
 r543: [38..39]
 r544: [34..35]
 r545: [26..27]
 r546: [22..23]
 r547: [18..19]
 r548: [14..15]
 r549: [10..11]
 r550: [8..9]
 r551: [6..7]
 r552: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 21
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 36
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 51
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 66
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 81
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 96
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 111
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 126
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 141
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 156
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 171
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 186
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 201
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 216
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 221
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 231
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 231
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 246
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 245
changing reg in insn 245
changing reg in insn 246
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 261
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 258
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 276
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 281
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 283
changing reg in insn 283
changing reg in insn 291
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 288
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 291
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 296
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 306
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 303
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 306
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 321
changing reg in insn 315
changing reg in insn 316
changing reg in insn 316
changing reg in insn 318
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 321
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 326
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 336
changing reg in insn 330
changing reg in insn 331
changing reg in insn 331
changing reg in insn 333
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 335
changing reg in insn 335
changing reg in insn 336
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 341
changing reg in insn 341
changing reg in insn 342
changing reg in insn 342
changing reg in insn 343
changing reg in insn 343
changing reg in insn 351
changing reg in insn 345
changing reg in insn 346
changing reg in insn 346
changing reg in insn 348
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 351
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 356
changing reg in insn 356
changing reg in insn 357
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 366
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 363
changing reg in insn 363
changing reg in insn 364
changing reg in insn 364
changing reg in insn 365
changing reg in insn 365
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 369
changing reg in insn 371
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 381
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 378
changing reg in insn 378
changing reg in insn 379
changing reg in insn 379
changing reg in insn 380
changing reg in insn 380
changing reg in insn 381
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 386
changing reg in insn 386
changing reg in insn 387
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 396
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 396
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 401
changing reg in insn 401
changing reg in insn 402
changing reg in insn 402
changing reg in insn 403
changing reg in insn 403
changing reg in insn 411
changing reg in insn 405
changing reg in insn 406
changing reg in insn 406
changing reg in insn 408
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 413
changing reg in insn 414
changing reg in insn 414
changing reg in insn 416
changing reg in insn 416
changing reg in insn 417
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 426
changing reg in insn 420
changing reg in insn 421
changing reg in insn 421
changing reg in insn 423
changing reg in insn 423
changing reg in insn 424
changing reg in insn 424
changing reg in insn 425
changing reg in insn 425
changing reg in insn 426
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 431
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 441
changing reg in insn 435
changing reg in insn 436
changing reg in insn 436
changing reg in insn 438
changing reg in insn 438
changing reg in insn 439
changing reg in insn 439
changing reg in insn 440
changing reg in insn 440
changing reg in insn 441
changing reg in insn 443
changing reg in insn 444
changing reg in insn 444
changing reg in insn 446
changing reg in insn 446
changing reg in insn 447
changing reg in insn 447
changing reg in insn 448
changing reg in insn 448
changing reg in insn 456
changing reg in insn 450
changing reg in insn 451
changing reg in insn 451
changing reg in insn 453
changing reg in insn 453
changing reg in insn 454
changing reg in insn 454
changing reg in insn 455
changing reg in insn 455
changing reg in insn 456
changing reg in insn 458
changing reg in insn 459
changing reg in insn 459
changing reg in insn 461
changing reg in insn 461
changing reg in insn 462
changing reg in insn 462
changing reg in insn 463
changing reg in insn 463
changing reg in insn 471
changing reg in insn 465
changing reg in insn 466
changing reg in insn 466
changing reg in insn 468
changing reg in insn 468
changing reg in insn 469
changing reg in insn 469
changing reg in insn 470
changing reg in insn 470
changing reg in insn 471
changing reg in insn 473
changing reg in insn 474
changing reg in insn 474
changing reg in insn 476
changing reg in insn 476
changing reg in insn 477
changing reg in insn 477
changing reg in insn 478
changing reg in insn 478
changing reg in insn 486
changing reg in insn 480
changing reg in insn 481
changing reg in insn 481
changing reg in insn 483
changing reg in insn 483
changing reg in insn 484
changing reg in insn 484
changing reg in insn 485
changing reg in insn 485
changing reg in insn 486
changing reg in insn 488
changing reg in insn 489
changing reg in insn 489
changing reg in insn 491
changing reg in insn 491
changing reg in insn 492
changing reg in insn 492
changing reg in insn 506
changing reg in insn 504
changing reg in insn 502
changing reg in insn 500
changing reg in insn 494
changing reg in insn 495
changing reg in insn 495
changing reg in insn 497
changing reg in insn 497
changing reg in insn 498
changing reg in insn 498
changing reg in insn 505
changing reg in insn 503
changing reg in insn 501
changing reg in insn 499
changing reg in insn 507
changing reg in insn 510
changing reg in insn 510
changing reg in insn 514
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 112
changing reg in insn 113
changing reg in insn 115
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 157
changing reg in insn 158
changing reg in insn 160
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 179
changing reg in insn 180
changing reg in insn 182
changing reg in insn 187
changing reg in insn 188
changing reg in insn 190
changing reg in insn 194
changing reg in insn 195
changing reg in insn 197
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 209
changing reg in insn 210
changing reg in insn 212
changing reg in insn 217
changing reg in insn 218
changing reg in insn 220
changing reg in insn 224
changing reg in insn 225
changing reg in insn 227
changing reg in insn 232
changing reg in insn 233
changing reg in insn 235
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 247
changing reg in insn 248
changing reg in insn 250
changing reg in insn 254
changing reg in insn 255
changing reg in insn 257
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 269
changing reg in insn 270
changing reg in insn 272
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 284
changing reg in insn 285
changing reg in insn 287
changing reg in insn 292
changing reg in insn 293
changing reg in insn 295
changing reg in insn 299
changing reg in insn 300
changing reg in insn 302
changing reg in insn 307
changing reg in insn 308
changing reg in insn 310
changing reg in insn 314
changing reg in insn 315
changing reg in insn 317
changing reg in insn 322
changing reg in insn 323
changing reg in insn 325
changing reg in insn 329
changing reg in insn 330
changing reg in insn 332
changing reg in insn 337
changing reg in insn 338
changing reg in insn 340
changing reg in insn 344
changing reg in insn 345
changing reg in insn 347
changing reg in insn 352
changing reg in insn 353
changing reg in insn 355
changing reg in insn 359
changing reg in insn 360
changing reg in insn 362
changing reg in insn 367
changing reg in insn 368
changing reg in insn 370
changing reg in insn 374
changing reg in insn 375
changing reg in insn 377
changing reg in insn 382
changing reg in insn 383
changing reg in insn 385
changing reg in insn 389
changing reg in insn 390
changing reg in insn 392
changing reg in insn 397
changing reg in insn 398
changing reg in insn 400
changing reg in insn 404
changing reg in insn 405
changing reg in insn 407
changing reg in insn 412
changing reg in insn 413
changing reg in insn 415
changing reg in insn 419
changing reg in insn 420
changing reg in insn 422
changing reg in insn 427
changing reg in insn 428
changing reg in insn 430
changing reg in insn 434
changing reg in insn 435
changing reg in insn 437
changing reg in insn 442
changing reg in insn 443
changing reg in insn 445
changing reg in insn 449
changing reg in insn 450
changing reg in insn 452
changing reg in insn 457
changing reg in insn 458
changing reg in insn 460
changing reg in insn 464
changing reg in insn 465
changing reg in insn 467
changing reg in insn 472
changing reg in insn 473
changing reg in insn 475
changing reg in insn 479
changing reg in insn 480
changing reg in insn 482
changing reg in insn 487
changing reg in insn 488
changing reg in insn 490
changing reg in insn 493
changing reg in insn 494
changing reg in insn 496
changing reg in insn 499
changing reg in insn 500
changing reg in insn 501
changing reg in insn 502
changing reg in insn 503
changing reg in insn 504
changing reg in insn 505
changing reg in insn 506
starting the processing of deferred insns
ending the processing of deferred insns


int main_header_swap(Data_file_header**, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={361d,364u} r1={72d,74u,33e} r2={37d,36u,33e} r4={1d,1u} r5={1d,1u} r6={1d,136u} r7={1d,2u} r17={164d} r20={1d,1u,66e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 1396{649d,615u,132e} in 506{506 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
        (reg:DI 5 di [ main_header ])) h_swap.cpp:17 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (reg:SI 4 si [ i ])) h_swap.cpp:17 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 0 ax [417])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:19 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [orig:87 D.6135 ] [87])
        (sign_extend:DI (reg:SI 0 ax [417]))) h_swap.cpp:19 142 {*extendsidi2_rex64}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:DI 1 dx [orig:88 D.6135 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.6135 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:19 512 {*ashldi3_1}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [418])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:19 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.6136 ] [89])
                (plus:DI (reg/f:DI 0 ax [418])
                    (reg:DI 1 dx [orig:88 D.6135 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:19 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.6135 ] [88]))
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [orig:90 D.6137 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [orig:89 D.6136 ] [89]) [0 *_5+0 S8 A64])) h_swap.cpp:19 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:DI 1 dx [orig:91 D.6137 ] [91])
                (plus:DI (reg/f:DI 0 ax [orig:90 D.6137 ] [90])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:19 218 {*adddi_1}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [419])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:19 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 0 ax [orig:92 D.6135 ] [92])
        (sign_extend:DI (reg:SI 0 ax [419]))) h_swap.cpp:19 142 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:DI 2 cx [orig:93 D.6135 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:92 D.6135 ] [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:19 512 {*ashldi3_1}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [420])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:19 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.6136 ] [94])
                (plus:DI (reg/f:DI 0 ax [420])
                    (reg:DI 2 cx [orig:93 D.6135 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:19 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:93 D.6135 ] [93]))
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [orig:95 D.6137 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [orig:94 D.6136 ] [94]) [0 *_11+0 S8 A64])) h_swap.cpp:19 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:QI 0 ax [orig:96 D.6138 ] [96])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:95 D.6137 ] [95])
                (const_int 3 [0x3])) [0 _12->nblocks.character+3 S1 A8])) h_swap.cpp:19 93 {*movqi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/j:QI (reg/f:DI 1 dx [orig:91 D.6137 ] [91]) [0 _8->nblocks.character+0 S1 A32])
        (reg:QI 0 ax [orig:96 D.6138 ] [96])) h_swap.cpp:19 93 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SI 0 ax [421])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:20 90 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 0 ax [orig:97 D.6135 ] [97])
        (sign_extend:DI (reg:SI 0 ax [421]))) h_swap.cpp:20 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg:DI 1 dx [orig:98 D.6135 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.6135 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:20 512 {*ashldi3_1}
     (nil))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [422])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:20 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.6136 ] [99])
                (plus:DI (reg/f:DI 0 ax [422])
                    (reg:DI 1 dx [orig:98 D.6135 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:20 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.6135 ] [98]))
        (nil)))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [orig:100 D.6137 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 D.6136 ] [99]) [0 *_17+0 S8 A64])) h_swap.cpp:20 89 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg/f:DI 1 dx [orig:101 D.6137 ] [101])
                (plus:DI (reg/f:DI 0 ax [orig:100 D.6137 ] [100])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:20 218 {*adddi_1}
     (nil))
(insn 29 28 30 2 (set (reg:SI 0 ax [423])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:20 90 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 0 ax [orig:102 D.6135 ] [102])
        (sign_extend:DI (reg:SI 0 ax [423]))) h_swap.cpp:20 142 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 2 (parallel [
            (set (reg:DI 2 cx [orig:103 D.6135 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.6135 ] [102])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:20 512 {*ashldi3_1}
     (nil))
(insn 32 31 33 2 (set (reg/f:DI 0 ax [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:20 89 {*movdi_internal}
     (nil))
(insn 33 32 34 2 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.6136 ] [104])
                (plus:DI (reg/f:DI 0 ax [424])
                    (reg:DI 2 cx [orig:103 D.6135 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:20 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:103 D.6135 ] [103]))
        (nil)))
(insn 34 33 35 2 (set (reg/f:DI 0 ax [orig:105 D.6137 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [orig:104 D.6136 ] [104]) [0 *_22+0 S8 A64])) h_swap.cpp:20 89 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:QI 0 ax [orig:106 D.6138 ] [106])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:105 D.6137 ] [105])
                (const_int 2 [0x2])) [0 _23->nblocks.character+2 S1 A16])) h_swap.cpp:20 93 {*movqi_internal}
     (nil))
(insn 36 35 37 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:101 D.6137 ] [101])
                (const_int 1 [0x1])) [0 _19->nblocks.character+1 S1 A8])
        (reg:QI 0 ax [orig:106 D.6138 ] [106])) h_swap.cpp:20 93 {*movqi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 0 ax [425])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:21 90 {*movsi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:DI 0 ax [orig:107 D.6135 ] [107])
        (sign_extend:DI (reg:SI 0 ax [425]))) h_swap.cpp:21 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 2 (parallel [
            (set (reg:DI 1 dx [orig:108 D.6135 ] [108])
                (ashift:DI (reg:DI 0 ax [orig:107 D.6135 ] [107])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:21 512 {*ashldi3_1}
     (nil))
(insn 40 39 41 2 (set (reg/f:DI 0 ax [426])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:21 89 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.6136 ] [109])
                (plus:DI (reg/f:DI 0 ax [426])
                    (reg:DI 1 dx [orig:108 D.6135 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:21 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.6135 ] [108]))
        (nil)))
(insn 42 41 43 2 (set (reg/f:DI 0 ax [orig:110 D.6137 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [orig:109 D.6136 ] [109]) [0 *_28+0 S8 A64])) h_swap.cpp:21 89 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (parallel [
            (set (reg/f:DI 1 dx [orig:111 D.6137 ] [111])
                (plus:DI (reg/f:DI 0 ax [orig:110 D.6137 ] [110])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:21 218 {*adddi_1}
     (nil))
(insn 44 43 45 2 (set (reg:SI 0 ax [427])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:21 90 {*movsi_internal}
     (nil))
(insn 45 44 46 2 (set (reg:DI 0 ax [orig:112 D.6135 ] [112])
        (sign_extend:DI (reg:SI 0 ax [427]))) h_swap.cpp:21 142 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 2 (parallel [
            (set (reg:DI 2 cx [orig:113 D.6135 ] [113])
                (ashift:DI (reg:DI 0 ax [orig:112 D.6135 ] [112])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:21 512 {*ashldi3_1}
     (nil))
(insn 47 46 48 2 (set (reg/f:DI 0 ax [428])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:21 89 {*movdi_internal}
     (nil))
(insn 48 47 49 2 (parallel [
            (set (reg/f:DI 0 ax [orig:114 D.6136 ] [114])
                (plus:DI (reg/f:DI 0 ax [428])
                    (reg:DI 2 cx [orig:113 D.6135 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:21 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:113 D.6135 ] [113]))
        (nil)))
(insn 49 48 50 2 (set (reg/f:DI 0 ax [orig:115 D.6137 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [orig:114 D.6136 ] [114]) [0 *_33+0 S8 A64])) h_swap.cpp:21 89 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:QI 0 ax [orig:116 D.6138 ] [116])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:115 D.6137 ] [115])
                (const_int 1 [0x1])) [0 _34->nblocks.character+1 S1 A8])) h_swap.cpp:21 93 {*movqi_internal}
     (nil))
(insn 51 50 52 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:111 D.6137 ] [111])
                (const_int 2 [0x2])) [0 _30->nblocks.character+2 S1 A16])
        (reg:QI 0 ax [orig:116 D.6138 ] [116])) h_swap.cpp:21 93 {*movqi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:SI 0 ax [429])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:22 90 {*movsi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:DI 0 ax [orig:117 D.6135 ] [117])
        (sign_extend:DI (reg:SI 0 ax [429]))) h_swap.cpp:22 142 {*extendsidi2_rex64}
     (nil))
(insn 54 53 55 2 (parallel [
            (set (reg:DI 1 dx [orig:118 D.6135 ] [118])
                (ashift:DI (reg:DI 0 ax [orig:117 D.6135 ] [117])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:22 512 {*ashldi3_1}
     (nil))
(insn 55 54 56 2 (set (reg/f:DI 0 ax [430])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:22 89 {*movdi_internal}
     (nil))
(insn 56 55 57 2 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.6136 ] [119])
                (plus:DI (reg/f:DI 0 ax [430])
                    (reg:DI 1 dx [orig:118 D.6135 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:22 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:118 D.6135 ] [118]))
        (nil)))
(insn 57 56 58 2 (set (reg/f:DI 0 ax [orig:120 D.6137 ] [120])
        (mem/f:DI (reg/f:DI 0 ax [orig:119 D.6136 ] [119]) [0 *_39+0 S8 A64])) h_swap.cpp:22 89 {*movdi_internal}
     (nil))
(insn 58 57 59 2 (parallel [
            (set (reg/f:DI 1 dx [orig:121 D.6137 ] [121])
                (plus:DI (reg/f:DI 0 ax [orig:120 D.6137 ] [120])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:22 218 {*adddi_1}
     (nil))
(insn 59 58 60 2 (set (reg:SI 0 ax [431])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:22 90 {*movsi_internal}
     (nil))
(insn 60 59 61 2 (set (reg:DI 0 ax [orig:122 D.6135 ] [122])
        (sign_extend:DI (reg:SI 0 ax [431]))) h_swap.cpp:22 142 {*extendsidi2_rex64}
     (nil))
(insn 61 60 62 2 (parallel [
            (set (reg:DI 2 cx [orig:123 D.6135 ] [123])
                (ashift:DI (reg:DI 0 ax [orig:122 D.6135 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:22 512 {*ashldi3_1}
     (nil))
(insn 62 61 63 2 (set (reg/f:DI 0 ax [432])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:22 89 {*movdi_internal}
     (nil))
(insn 63 62 64 2 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.6136 ] [124])
                (plus:DI (reg/f:DI 0 ax [432])
                    (reg:DI 2 cx [orig:123 D.6135 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:22 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:123 D.6135 ] [123]))
        (nil)))
(insn 64 63 65 2 (set (reg/f:DI 0 ax [orig:125 D.6137 ] [125])
        (mem/f:DI (reg/f:DI 0 ax [orig:124 D.6136 ] [124]) [0 *_44+0 S8 A64])) h_swap.cpp:22 89 {*movdi_internal}
     (nil))
(insn 65 64 66 2 (set (reg:QI 0 ax [orig:126 D.6138 ] [126])
        (mem/j:QI (reg/f:DI 0 ax [orig:125 D.6137 ] [125]) [0 _45->nblocks.character+0 S1 A32])) h_swap.cpp:22 93 {*movqi_internal}
     (nil))
(insn 66 65 67 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:121 D.6137 ] [121])
                (const_int 3 [0x3])) [0 _41->nblocks.character+3 S1 A8])
        (reg:QI 0 ax [orig:126 D.6138 ] [126])) h_swap.cpp:22 93 {*movqi_internal}
     (nil))
(insn 67 66 68 2 (set (reg:SI 0 ax [433])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:24 90 {*movsi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:DI 0 ax [orig:127 D.6135 ] [127])
        (sign_extend:DI (reg:SI 0 ax [433]))) h_swap.cpp:24 142 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 2 (parallel [
            (set (reg:DI 1 dx [orig:128 D.6135 ] [128])
                (ashift:DI (reg:DI 0 ax [orig:127 D.6135 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:24 512 {*ashldi3_1}
     (nil))
(insn 70 69 71 2 (set (reg/f:DI 0 ax [434])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:24 89 {*movdi_internal}
     (nil))
(insn 71 70 72 2 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.6136 ] [129])
                (plus:DI (reg/f:DI 0 ax [434])
                    (reg:DI 1 dx [orig:128 D.6135 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:24 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:128 D.6135 ] [128]))
        (nil)))
(insn 72 71 73 2 (set (reg/f:DI 0 ax [orig:130 D.6137 ] [130])
        (mem/f:DI (reg/f:DI 0 ax [orig:129 D.6136 ] [129]) [0 *_50+0 S8 A64])) h_swap.cpp:24 89 {*movdi_internal}
     (nil))
(insn 73 72 74 2 (parallel [
            (set (reg/f:DI 1 dx [orig:131 D.6137 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:130 D.6137 ] [130])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:24 218 {*adddi_1}
     (nil))
(insn 74 73 75 2 (set (reg:SI 0 ax [435])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:24 90 {*movsi_internal}
     (nil))
(insn 75 74 76 2 (set (reg:DI 0 ax [orig:132 D.6135 ] [132])
        (sign_extend:DI (reg:SI 0 ax [435]))) h_swap.cpp:24 142 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 2 (parallel [
            (set (reg:DI 2 cx [orig:133 D.6135 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.6135 ] [132])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:24 512 {*ashldi3_1}
     (nil))
(insn 77 76 78 2 (set (reg/f:DI 0 ax [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:24 89 {*movdi_internal}
     (nil))
(insn 78 77 79 2 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6136 ] [134])
                (plus:DI (reg/f:DI 0 ax [436])
                    (reg:DI 2 cx [orig:133 D.6135 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:24 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:133 D.6135 ] [133]))
        (nil)))
(insn 79 78 80 2 (set (reg/f:DI 0 ax [orig:135 D.6137 ] [135])
        (mem/f:DI (reg/f:DI 0 ax [orig:134 D.6136 ] [134]) [0 *_55+0 S8 A64])) h_swap.cpp:24 89 {*movdi_internal}
     (nil))
(insn 80 79 81 2 (set (reg:QI 0 ax [orig:136 D.6138 ] [136])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:135 D.6137 ] [135])
                (const_int 7 [0x7])) [0 _56->ntraces.character+3 S1 A8])) h_swap.cpp:24 93 {*movqi_internal}
     (nil))
(insn 81 80 82 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:131 D.6137 ] [131])
                (const_int 4 [0x4])) [0 _52->ntraces.character+0 S1 A32])
        (reg:QI 0 ax [orig:136 D.6138 ] [136])) h_swap.cpp:24 93 {*movqi_internal}
     (nil))
(insn 82 81 83 2 (set (reg:SI 0 ax [437])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:25 90 {*movsi_internal}
     (nil))
(insn 83 82 84 2 (set (reg:DI 0 ax [orig:137 D.6135 ] [137])
        (sign_extend:DI (reg:SI 0 ax [437]))) h_swap.cpp:25 142 {*extendsidi2_rex64}
     (nil))
(insn 84 83 85 2 (parallel [
            (set (reg:DI 1 dx [orig:138 D.6135 ] [138])
                (ashift:DI (reg:DI 0 ax [orig:137 D.6135 ] [137])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:25 512 {*ashldi3_1}
     (nil))
(insn 85 84 86 2 (set (reg/f:DI 0 ax [438])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:25 89 {*movdi_internal}
     (nil))
(insn 86 85 87 2 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.6136 ] [139])
                (plus:DI (reg/f:DI 0 ax [438])
                    (reg:DI 1 dx [orig:138 D.6135 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:25 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:138 D.6135 ] [138]))
        (nil)))
(insn 87 86 88 2 (set (reg/f:DI 0 ax [orig:140 D.6137 ] [140])
        (mem/f:DI (reg/f:DI 0 ax [orig:139 D.6136 ] [139]) [0 *_61+0 S8 A64])) h_swap.cpp:25 89 {*movdi_internal}
     (nil))
(insn 88 87 89 2 (parallel [
            (set (reg/f:DI 1 dx [orig:141 D.6137 ] [141])
                (plus:DI (reg/f:DI 0 ax [orig:140 D.6137 ] [140])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:25 218 {*adddi_1}
     (nil))
(insn 89 88 90 2 (set (reg:SI 0 ax [439])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:25 90 {*movsi_internal}
     (nil))
(insn 90 89 91 2 (set (reg:DI 0 ax [orig:142 D.6135 ] [142])
        (sign_extend:DI (reg:SI 0 ax [439]))) h_swap.cpp:25 142 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 2 (parallel [
            (set (reg:DI 2 cx [orig:143 D.6135 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.6135 ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:25 512 {*ashldi3_1}
     (nil))
(insn 92 91 93 2 (set (reg/f:DI 0 ax [440])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:25 89 {*movdi_internal}
     (nil))
(insn 93 92 94 2 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.6136 ] [144])
                (plus:DI (reg/f:DI 0 ax [440])
                    (reg:DI 2 cx [orig:143 D.6135 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:25 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:143 D.6135 ] [143]))
        (nil)))
(insn 94 93 95 2 (set (reg/f:DI 0 ax [orig:145 D.6137 ] [145])
        (mem/f:DI (reg/f:DI 0 ax [orig:144 D.6136 ] [144]) [0 *_66+0 S8 A64])) h_swap.cpp:25 89 {*movdi_internal}
     (nil))
(insn 95 94 96 2 (set (reg:QI 0 ax [orig:146 D.6138 ] [146])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:145 D.6137 ] [145])
                (const_int 6 [0x6])) [0 _67->ntraces.character+2 S1 A16])) h_swap.cpp:25 93 {*movqi_internal}
     (nil))
(insn 96 95 97 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:141 D.6137 ] [141])
                (const_int 5 [0x5])) [0 _63->ntraces.character+1 S1 A8])
        (reg:QI 0 ax [orig:146 D.6138 ] [146])) h_swap.cpp:25 93 {*movqi_internal}
     (nil))
(insn 97 96 98 2 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:26 90 {*movsi_internal}
     (nil))
(insn 98 97 99 2 (set (reg:DI 0 ax [orig:147 D.6135 ] [147])
        (sign_extend:DI (reg:SI 0 ax [441]))) h_swap.cpp:26 142 {*extendsidi2_rex64}
     (nil))
(insn 99 98 100 2 (parallel [
            (set (reg:DI 1 dx [orig:148 D.6135 ] [148])
                (ashift:DI (reg:DI 0 ax [orig:147 D.6135 ] [147])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:26 512 {*ashldi3_1}
     (nil))
(insn 100 99 101 2 (set (reg/f:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:26 89 {*movdi_internal}
     (nil))
(insn 101 100 102 2 (parallel [
            (set (reg/f:DI 0 ax [orig:149 D.6136 ] [149])
                (plus:DI (reg/f:DI 0 ax [442])
                    (reg:DI 1 dx [orig:148 D.6135 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:26 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:148 D.6135 ] [148]))
        (nil)))
(insn 102 101 103 2 (set (reg/f:DI 0 ax [orig:150 D.6137 ] [150])
        (mem/f:DI (reg/f:DI 0 ax [orig:149 D.6136 ] [149]) [0 *_72+0 S8 A64])) h_swap.cpp:26 89 {*movdi_internal}
     (nil))
(insn 103 102 104 2 (parallel [
            (set (reg/f:DI 1 dx [orig:151 D.6137 ] [151])
                (plus:DI (reg/f:DI 0 ax [orig:150 D.6137 ] [150])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:26 218 {*adddi_1}
     (nil))
(insn 104 103 105 2 (set (reg:SI 0 ax [443])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:26 90 {*movsi_internal}
     (nil))
(insn 105 104 106 2 (set (reg:DI 0 ax [orig:152 D.6135 ] [152])
        (sign_extend:DI (reg:SI 0 ax [443]))) h_swap.cpp:26 142 {*extendsidi2_rex64}
     (nil))
(insn 106 105 107 2 (parallel [
            (set (reg:DI 2 cx [orig:153 D.6135 ] [153])
                (ashift:DI (reg:DI 0 ax [orig:152 D.6135 ] [152])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:26 512 {*ashldi3_1}
     (nil))
(insn 107 106 108 2 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:26 89 {*movdi_internal}
     (nil))
(insn 108 107 109 2 (parallel [
            (set (reg/f:DI 0 ax [orig:154 D.6136 ] [154])
                (plus:DI (reg/f:DI 0 ax [444])
                    (reg:DI 2 cx [orig:153 D.6135 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:26 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:153 D.6135 ] [153]))
        (nil)))
(insn 109 108 110 2 (set (reg/f:DI 0 ax [orig:155 D.6137 ] [155])
        (mem/f:DI (reg/f:DI 0 ax [orig:154 D.6136 ] [154]) [0 *_77+0 S8 A64])) h_swap.cpp:26 89 {*movdi_internal}
     (nil))
(insn 110 109 111 2 (set (reg:QI 0 ax [orig:156 D.6138 ] [156])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:155 D.6137 ] [155])
                (const_int 5 [0x5])) [0 _78->ntraces.character+1 S1 A8])) h_swap.cpp:26 93 {*movqi_internal}
     (nil))
(insn 111 110 112 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:151 D.6137 ] [151])
                (const_int 6 [0x6])) [0 _74->ntraces.character+2 S1 A16])
        (reg:QI 0 ax [orig:156 D.6138 ] [156])) h_swap.cpp:26 93 {*movqi_internal}
     (nil))
(insn 112 111 113 2 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:27 90 {*movsi_internal}
     (nil))
(insn 113 112 114 2 (set (reg:DI 0 ax [orig:157 D.6135 ] [157])
        (sign_extend:DI (reg:SI 0 ax [445]))) h_swap.cpp:27 142 {*extendsidi2_rex64}
     (nil))
(insn 114 113 115 2 (parallel [
            (set (reg:DI 1 dx [orig:158 D.6135 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:157 D.6135 ] [157])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:27 512 {*ashldi3_1}
     (nil))
(insn 115 114 116 2 (set (reg/f:DI 0 ax [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:27 89 {*movdi_internal}
     (nil))
(insn 116 115 117 2 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.6136 ] [159])
                (plus:DI (reg/f:DI 0 ax [446])
                    (reg:DI 1 dx [orig:158 D.6135 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:27 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:158 D.6135 ] [158]))
        (nil)))
(insn 117 116 118 2 (set (reg/f:DI 0 ax [orig:160 D.6137 ] [160])
        (mem/f:DI (reg/f:DI 0 ax [orig:159 D.6136 ] [159]) [0 *_83+0 S8 A64])) h_swap.cpp:27 89 {*movdi_internal}
     (nil))
(insn 118 117 119 2 (parallel [
            (set (reg/f:DI 1 dx [orig:161 D.6137 ] [161])
                (plus:DI (reg/f:DI 0 ax [orig:160 D.6137 ] [160])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:27 218 {*adddi_1}
     (nil))
(insn 119 118 120 2 (set (reg:SI 0 ax [447])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:27 90 {*movsi_internal}
     (nil))
(insn 120 119 121 2 (set (reg:DI 0 ax [orig:162 D.6135 ] [162])
        (sign_extend:DI (reg:SI 0 ax [447]))) h_swap.cpp:27 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 2 (parallel [
            (set (reg:DI 2 cx [orig:163 D.6135 ] [163])
                (ashift:DI (reg:DI 0 ax [orig:162 D.6135 ] [162])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:27 512 {*ashldi3_1}
     (nil))
(insn 122 121 123 2 (set (reg/f:DI 0 ax [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:27 89 {*movdi_internal}
     (nil))
(insn 123 122 124 2 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.6136 ] [164])
                (plus:DI (reg/f:DI 0 ax [448])
                    (reg:DI 2 cx [orig:163 D.6135 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:27 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:163 D.6135 ] [163]))
        (nil)))
(insn 124 123 125 2 (set (reg/f:DI 0 ax [orig:165 D.6137 ] [165])
        (mem/f:DI (reg/f:DI 0 ax [orig:164 D.6136 ] [164]) [0 *_88+0 S8 A64])) h_swap.cpp:27 89 {*movdi_internal}
     (nil))
(insn 125 124 126 2 (set (reg:QI 0 ax [orig:166 D.6138 ] [166])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:165 D.6137 ] [165])
                (const_int 4 [0x4])) [0 _89->ntraces.character+0 S1 A32])) h_swap.cpp:27 93 {*movqi_internal}
     (nil))
(insn 126 125 127 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:161 D.6137 ] [161])
                (const_int 7 [0x7])) [0 _85->ntraces.character+3 S1 A8])
        (reg:QI 0 ax [orig:166 D.6138 ] [166])) h_swap.cpp:27 93 {*movqi_internal}
     (nil))
(insn 127 126 128 2 (set (reg:SI 0 ax [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:29 90 {*movsi_internal}
     (nil))
(insn 128 127 129 2 (set (reg:DI 0 ax [orig:167 D.6135 ] [167])
        (sign_extend:DI (reg:SI 0 ax [449]))) h_swap.cpp:29 142 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 2 (parallel [
            (set (reg:DI 1 dx [orig:168 D.6135 ] [168])
                (ashift:DI (reg:DI 0 ax [orig:167 D.6135 ] [167])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:29 512 {*ashldi3_1}
     (nil))
(insn 130 129 131 2 (set (reg/f:DI 0 ax [450])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:29 89 {*movdi_internal}
     (nil))
(insn 131 130 132 2 (parallel [
            (set (reg/f:DI 0 ax [orig:169 D.6136 ] [169])
                (plus:DI (reg/f:DI 0 ax [450])
                    (reg:DI 1 dx [orig:168 D.6135 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:168 D.6135 ] [168]))
        (nil)))
(insn 132 131 133 2 (set (reg/f:DI 0 ax [orig:170 D.6137 ] [170])
        (mem/f:DI (reg/f:DI 0 ax [orig:169 D.6136 ] [169]) [0 *_94+0 S8 A64])) h_swap.cpp:29 89 {*movdi_internal}
     (nil))
(insn 133 132 134 2 (parallel [
            (set (reg/f:DI 1 dx [orig:171 D.6137 ] [171])
                (plus:DI (reg/f:DI 0 ax [orig:170 D.6137 ] [170])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:29 218 {*adddi_1}
     (nil))
(insn 134 133 135 2 (set (reg:SI 0 ax [451])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:29 90 {*movsi_internal}
     (nil))
(insn 135 134 136 2 (set (reg:DI 0 ax [orig:172 D.6135 ] [172])
        (sign_extend:DI (reg:SI 0 ax [451]))) h_swap.cpp:29 142 {*extendsidi2_rex64}
     (nil))
(insn 136 135 137 2 (parallel [
            (set (reg:DI 2 cx [orig:173 D.6135 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:172 D.6135 ] [172])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:29 512 {*ashldi3_1}
     (nil))
(insn 137 136 138 2 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:29 89 {*movdi_internal}
     (nil))
(insn 138 137 139 2 (parallel [
            (set (reg/f:DI 0 ax [orig:174 D.6136 ] [174])
                (plus:DI (reg/f:DI 0 ax [452])
                    (reg:DI 2 cx [orig:173 D.6135 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:29 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:173 D.6135 ] [173]))
        (nil)))
(insn 139 138 140 2 (set (reg/f:DI 0 ax [orig:175 D.6137 ] [175])
        (mem/f:DI (reg/f:DI 0 ax [orig:174 D.6136 ] [174]) [0 *_99+0 S8 A64])) h_swap.cpp:29 89 {*movdi_internal}
     (nil))
(insn 140 139 141 2 (set (reg:QI 0 ax [orig:176 D.6138 ] [176])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:175 D.6137 ] [175])
                (const_int 11 [0xb])) [0 _100->np.character+3 S1 A8])) h_swap.cpp:29 93 {*movqi_internal}
     (nil))
(insn 141 140 142 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:171 D.6137 ] [171])
                (const_int 8 [0x8])) [0 _96->np.character+0 S1 A32])
        (reg:QI 0 ax [orig:176 D.6138 ] [176])) h_swap.cpp:29 93 {*movqi_internal}
     (nil))
(insn 142 141 143 2 (set (reg:SI 0 ax [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:30 90 {*movsi_internal}
     (nil))
(insn 143 142 144 2 (set (reg:DI 0 ax [orig:177 D.6135 ] [177])
        (sign_extend:DI (reg:SI 0 ax [453]))) h_swap.cpp:30 142 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 2 (parallel [
            (set (reg:DI 1 dx [orig:178 D.6135 ] [178])
                (ashift:DI (reg:DI 0 ax [orig:177 D.6135 ] [177])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:30 512 {*ashldi3_1}
     (nil))
(insn 145 144 146 2 (set (reg/f:DI 0 ax [454])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:30 89 {*movdi_internal}
     (nil))
(insn 146 145 147 2 (parallel [
            (set (reg/f:DI 0 ax [orig:179 D.6136 ] [179])
                (plus:DI (reg/f:DI 0 ax [454])
                    (reg:DI 1 dx [orig:178 D.6135 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:30 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:178 D.6135 ] [178]))
        (nil)))
(insn 147 146 148 2 (set (reg/f:DI 0 ax [orig:180 D.6137 ] [180])
        (mem/f:DI (reg/f:DI 0 ax [orig:179 D.6136 ] [179]) [0 *_105+0 S8 A64])) h_swap.cpp:30 89 {*movdi_internal}
     (nil))
(insn 148 147 149 2 (parallel [
            (set (reg/f:DI 1 dx [orig:181 D.6137 ] [181])
                (plus:DI (reg/f:DI 0 ax [orig:180 D.6137 ] [180])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:30 218 {*adddi_1}
     (nil))
(insn 149 148 150 2 (set (reg:SI 0 ax [455])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:30 90 {*movsi_internal}
     (nil))
(insn 150 149 151 2 (set (reg:DI 0 ax [orig:182 D.6135 ] [182])
        (sign_extend:DI (reg:SI 0 ax [455]))) h_swap.cpp:30 142 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 2 (parallel [
            (set (reg:DI 2 cx [orig:183 D.6135 ] [183])
                (ashift:DI (reg:DI 0 ax [orig:182 D.6135 ] [182])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:30 512 {*ashldi3_1}
     (nil))
(insn 152 151 153 2 (set (reg/f:DI 0 ax [456])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:30 89 {*movdi_internal}
     (nil))
(insn 153 152 154 2 (parallel [
            (set (reg/f:DI 0 ax [orig:184 D.6136 ] [184])
                (plus:DI (reg/f:DI 0 ax [456])
                    (reg:DI 2 cx [orig:183 D.6135 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:30 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:183 D.6135 ] [183]))
        (nil)))
(insn 154 153 155 2 (set (reg/f:DI 0 ax [orig:185 D.6137 ] [185])
        (mem/f:DI (reg/f:DI 0 ax [orig:184 D.6136 ] [184]) [0 *_110+0 S8 A64])) h_swap.cpp:30 89 {*movdi_internal}
     (nil))
(insn 155 154 156 2 (set (reg:QI 0 ax [orig:186 D.6138 ] [186])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:185 D.6137 ] [185])
                (const_int 10 [0xa])) [0 _111->np.character+2 S1 A16])) h_swap.cpp:30 93 {*movqi_internal}
     (nil))
(insn 156 155 157 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:181 D.6137 ] [181])
                (const_int 9 [0x9])) [0 _107->np.character+1 S1 A8])
        (reg:QI 0 ax [orig:186 D.6138 ] [186])) h_swap.cpp:30 93 {*movqi_internal}
     (nil))
(insn 157 156 158 2 (set (reg:SI 0 ax [457])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:31 90 {*movsi_internal}
     (nil))
(insn 158 157 159 2 (set (reg:DI 0 ax [orig:187 D.6135 ] [187])
        (sign_extend:DI (reg:SI 0 ax [457]))) h_swap.cpp:31 142 {*extendsidi2_rex64}
     (nil))
(insn 159 158 160 2 (parallel [
            (set (reg:DI 1 dx [orig:188 D.6135 ] [188])
                (ashift:DI (reg:DI 0 ax [orig:187 D.6135 ] [187])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:31 512 {*ashldi3_1}
     (nil))
(insn 160 159 161 2 (set (reg/f:DI 0 ax [458])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:31 89 {*movdi_internal}
     (nil))
(insn 161 160 162 2 (parallel [
            (set (reg/f:DI 0 ax [orig:189 D.6136 ] [189])
                (plus:DI (reg/f:DI 0 ax [458])
                    (reg:DI 1 dx [orig:188 D.6135 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:31 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:188 D.6135 ] [188]))
        (nil)))
(insn 162 161 163 2 (set (reg/f:DI 0 ax [orig:190 D.6137 ] [190])
        (mem/f:DI (reg/f:DI 0 ax [orig:189 D.6136 ] [189]) [0 *_116+0 S8 A64])) h_swap.cpp:31 89 {*movdi_internal}
     (nil))
(insn 163 162 164 2 (parallel [
            (set (reg/f:DI 1 dx [orig:191 D.6137 ] [191])
                (plus:DI (reg/f:DI 0 ax [orig:190 D.6137 ] [190])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:31 218 {*adddi_1}
     (nil))
(insn 164 163 165 2 (set (reg:SI 0 ax [459])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:31 90 {*movsi_internal}
     (nil))
(insn 165 164 166 2 (set (reg:DI 0 ax [orig:192 D.6135 ] [192])
        (sign_extend:DI (reg:SI 0 ax [459]))) h_swap.cpp:31 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 2 (parallel [
            (set (reg:DI 2 cx [orig:193 D.6135 ] [193])
                (ashift:DI (reg:DI 0 ax [orig:192 D.6135 ] [192])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:31 512 {*ashldi3_1}
     (nil))
(insn 167 166 168 2 (set (reg/f:DI 0 ax [460])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:31 89 {*movdi_internal}
     (nil))
(insn 168 167 169 2 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.6136 ] [194])
                (plus:DI (reg/f:DI 0 ax [460])
                    (reg:DI 2 cx [orig:193 D.6135 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:31 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:193 D.6135 ] [193]))
        (nil)))
(insn 169 168 170 2 (set (reg/f:DI 0 ax [orig:195 D.6137 ] [195])
        (mem/f:DI (reg/f:DI 0 ax [orig:194 D.6136 ] [194]) [0 *_121+0 S8 A64])) h_swap.cpp:31 89 {*movdi_internal}
     (nil))
(insn 170 169 171 2 (set (reg:QI 0 ax [orig:196 D.6138 ] [196])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:195 D.6137 ] [195])
                (const_int 9 [0x9])) [0 _122->np.character+1 S1 A8])) h_swap.cpp:31 93 {*movqi_internal}
     (nil))
(insn 171 170 172 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:191 D.6137 ] [191])
                (const_int 10 [0xa])) [0 _118->np.character+2 S1 A16])
        (reg:QI 0 ax [orig:196 D.6138 ] [196])) h_swap.cpp:31 93 {*movqi_internal}
     (nil))
(insn 172 171 173 2 (set (reg:SI 0 ax [461])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:32 90 {*movsi_internal}
     (nil))
(insn 173 172 174 2 (set (reg:DI 0 ax [orig:197 D.6135 ] [197])
        (sign_extend:DI (reg:SI 0 ax [461]))) h_swap.cpp:32 142 {*extendsidi2_rex64}
     (nil))
(insn 174 173 175 2 (parallel [
            (set (reg:DI 1 dx [orig:198 D.6135 ] [198])
                (ashift:DI (reg:DI 0 ax [orig:197 D.6135 ] [197])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:32 512 {*ashldi3_1}
     (nil))
(insn 175 174 176 2 (set (reg/f:DI 0 ax [462])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:32 89 {*movdi_internal}
     (nil))
(insn 176 175 177 2 (parallel [
            (set (reg/f:DI 0 ax [orig:199 D.6136 ] [199])
                (plus:DI (reg/f:DI 0 ax [462])
                    (reg:DI 1 dx [orig:198 D.6135 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:32 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:198 D.6135 ] [198]))
        (nil)))
(insn 177 176 178 2 (set (reg/f:DI 0 ax [orig:200 D.6137 ] [200])
        (mem/f:DI (reg/f:DI 0 ax [orig:199 D.6136 ] [199]) [0 *_127+0 S8 A64])) h_swap.cpp:32 89 {*movdi_internal}
     (nil))
(insn 178 177 179 2 (parallel [
            (set (reg/f:DI 1 dx [orig:201 D.6137 ] [201])
                (plus:DI (reg/f:DI 0 ax [orig:200 D.6137 ] [200])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:32 218 {*adddi_1}
     (nil))
(insn 179 178 180 2 (set (reg:SI 0 ax [463])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:32 90 {*movsi_internal}
     (nil))
(insn 180 179 181 2 (set (reg:DI 0 ax [orig:202 D.6135 ] [202])
        (sign_extend:DI (reg:SI 0 ax [463]))) h_swap.cpp:32 142 {*extendsidi2_rex64}
     (nil))
(insn 181 180 182 2 (parallel [
            (set (reg:DI 2 cx [orig:203 D.6135 ] [203])
                (ashift:DI (reg:DI 0 ax [orig:202 D.6135 ] [202])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:32 512 {*ashldi3_1}
     (nil))
(insn 182 181 183 2 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:32 89 {*movdi_internal}
     (nil))
(insn 183 182 184 2 (parallel [
            (set (reg/f:DI 0 ax [orig:204 D.6136 ] [204])
                (plus:DI (reg/f:DI 0 ax [464])
                    (reg:DI 2 cx [orig:203 D.6135 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:32 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:203 D.6135 ] [203]))
        (nil)))
(insn 184 183 185 2 (set (reg/f:DI 0 ax [orig:205 D.6137 ] [205])
        (mem/f:DI (reg/f:DI 0 ax [orig:204 D.6136 ] [204]) [0 *_132+0 S8 A64])) h_swap.cpp:32 89 {*movdi_internal}
     (nil))
(insn 185 184 186 2 (set (reg:QI 0 ax [orig:206 D.6138 ] [206])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:205 D.6137 ] [205])
                (const_int 8 [0x8])) [0 _133->np.character+0 S1 A32])) h_swap.cpp:32 93 {*movqi_internal}
     (nil))
(insn 186 185 187 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:201 D.6137 ] [201])
                (const_int 11 [0xb])) [0 _129->np.character+3 S1 A8])
        (reg:QI 0 ax [orig:206 D.6138 ] [206])) h_swap.cpp:32 93 {*movqi_internal}
     (nil))
(insn 187 186 188 2 (set (reg:SI 0 ax [465])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:34 90 {*movsi_internal}
     (nil))
(insn 188 187 189 2 (set (reg:DI 0 ax [orig:207 D.6135 ] [207])
        (sign_extend:DI (reg:SI 0 ax [465]))) h_swap.cpp:34 142 {*extendsidi2_rex64}
     (nil))
(insn 189 188 190 2 (parallel [
            (set (reg:DI 1 dx [orig:208 D.6135 ] [208])
                (ashift:DI (reg:DI 0 ax [orig:207 D.6135 ] [207])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:34 512 {*ashldi3_1}
     (nil))
(insn 190 189 191 2 (set (reg/f:DI 0 ax [466])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:34 89 {*movdi_internal}
     (nil))
(insn 191 190 192 2 (parallel [
            (set (reg/f:DI 0 ax [orig:209 D.6136 ] [209])
                (plus:DI (reg/f:DI 0 ax [466])
                    (reg:DI 1 dx [orig:208 D.6135 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:34 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:208 D.6135 ] [208]))
        (nil)))
(insn 192 191 193 2 (set (reg/f:DI 0 ax [orig:210 D.6137 ] [210])
        (mem/f:DI (reg/f:DI 0 ax [orig:209 D.6136 ] [209]) [0 *_138+0 S8 A64])) h_swap.cpp:34 89 {*movdi_internal}
     (nil))
(insn 193 192 194 2 (parallel [
            (set (reg/f:DI 1 dx [orig:211 D.6137 ] [211])
                (plus:DI (reg/f:DI 0 ax [orig:210 D.6137 ] [210])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:34 218 {*adddi_1}
     (nil))
(insn 194 193 195 2 (set (reg:SI 0 ax [467])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:34 90 {*movsi_internal}
     (nil))
(insn 195 194 196 2 (set (reg:DI 0 ax [orig:212 D.6135 ] [212])
        (sign_extend:DI (reg:SI 0 ax [467]))) h_swap.cpp:34 142 {*extendsidi2_rex64}
     (nil))
(insn 196 195 197 2 (parallel [
            (set (reg:DI 2 cx [orig:213 D.6135 ] [213])
                (ashift:DI (reg:DI 0 ax [orig:212 D.6135 ] [212])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:34 512 {*ashldi3_1}
     (nil))
(insn 197 196 198 2 (set (reg/f:DI 0 ax [468])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:34 89 {*movdi_internal}
     (nil))
(insn 198 197 199 2 (parallel [
            (set (reg/f:DI 0 ax [orig:214 D.6136 ] [214])
                (plus:DI (reg/f:DI 0 ax [468])
                    (reg:DI 2 cx [orig:213 D.6135 ] [213])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:34 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:213 D.6135 ] [213]))
        (nil)))
(insn 199 198 200 2 (set (reg/f:DI 0 ax [orig:215 D.6137 ] [215])
        (mem/f:DI (reg/f:DI 0 ax [orig:214 D.6136 ] [214]) [0 *_143+0 S8 A64])) h_swap.cpp:34 89 {*movdi_internal}
     (nil))
(insn 200 199 201 2 (set (reg:QI 0 ax [orig:216 D.6138 ] [216])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:215 D.6137 ] [215])
                (const_int 15 [0xf])) [0 _144->ebytes.character+3 S1 A8])) h_swap.cpp:34 93 {*movqi_internal}
     (nil))
(insn 201 200 202 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:211 D.6137 ] [211])
                (const_int 12 [0xc])) [0 _140->ebytes.character+0 S1 A32])
        (reg:QI 0 ax [orig:216 D.6138 ] [216])) h_swap.cpp:34 93 {*movqi_internal}
     (nil))
(insn 202 201 203 2 (set (reg:SI 0 ax [469])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:35 90 {*movsi_internal}
     (nil))
(insn 203 202 204 2 (set (reg:DI 0 ax [orig:217 D.6135 ] [217])
        (sign_extend:DI (reg:SI 0 ax [469]))) h_swap.cpp:35 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 2 (parallel [
            (set (reg:DI 1 dx [orig:218 D.6135 ] [218])
                (ashift:DI (reg:DI 0 ax [orig:217 D.6135 ] [217])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:35 512 {*ashldi3_1}
     (nil))
(insn 205 204 206 2 (set (reg/f:DI 0 ax [470])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:35 89 {*movdi_internal}
     (nil))
(insn 206 205 207 2 (parallel [
            (set (reg/f:DI 0 ax [orig:219 D.6136 ] [219])
                (plus:DI (reg/f:DI 0 ax [470])
                    (reg:DI 1 dx [orig:218 D.6135 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:35 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:218 D.6135 ] [218]))
        (nil)))
(insn 207 206 208 2 (set (reg/f:DI 0 ax [orig:220 D.6137 ] [220])
        (mem/f:DI (reg/f:DI 0 ax [orig:219 D.6136 ] [219]) [0 *_149+0 S8 A64])) h_swap.cpp:35 89 {*movdi_internal}
     (nil))
(insn 208 207 209 2 (parallel [
            (set (reg/f:DI 1 dx [orig:221 D.6137 ] [221])
                (plus:DI (reg/f:DI 0 ax [orig:220 D.6137 ] [220])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:35 218 {*adddi_1}
     (nil))
(insn 209 208 210 2 (set (reg:SI 0 ax [471])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:35 90 {*movsi_internal}
     (nil))
(insn 210 209 211 2 (set (reg:DI 0 ax [orig:222 D.6135 ] [222])
        (sign_extend:DI (reg:SI 0 ax [471]))) h_swap.cpp:35 142 {*extendsidi2_rex64}
     (nil))
(insn 211 210 212 2 (parallel [
            (set (reg:DI 2 cx [orig:223 D.6135 ] [223])
                (ashift:DI (reg:DI 0 ax [orig:222 D.6135 ] [222])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:35 512 {*ashldi3_1}
     (nil))
(insn 212 211 213 2 (set (reg/f:DI 0 ax [472])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:35 89 {*movdi_internal}
     (nil))
(insn 213 212 214 2 (parallel [
            (set (reg/f:DI 0 ax [orig:224 D.6136 ] [224])
                (plus:DI (reg/f:DI 0 ax [472])
                    (reg:DI 2 cx [orig:223 D.6135 ] [223])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:35 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:223 D.6135 ] [223]))
        (nil)))
(insn 214 213 215 2 (set (reg/f:DI 0 ax [orig:225 D.6137 ] [225])
        (mem/f:DI (reg/f:DI 0 ax [orig:224 D.6136 ] [224]) [0 *_154+0 S8 A64])) h_swap.cpp:35 89 {*movdi_internal}
     (nil))
(insn 215 214 216 2 (set (reg:QI 0 ax [orig:226 D.6138 ] [226])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:225 D.6137 ] [225])
                (const_int 14 [0xe])) [0 _155->ebytes.character+2 S1 A16])) h_swap.cpp:35 93 {*movqi_internal}
     (nil))
(insn 216 215 217 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:221 D.6137 ] [221])
                (const_int 13 [0xd])) [0 _151->ebytes.character+1 S1 A8])
        (reg:QI 0 ax [orig:226 D.6138 ] [226])) h_swap.cpp:35 93 {*movqi_internal}
     (nil))
(insn 217 216 218 2 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:36 90 {*movsi_internal}
     (nil))
(insn 218 217 219 2 (set (reg:DI 0 ax [orig:227 D.6135 ] [227])
        (sign_extend:DI (reg:SI 0 ax [473]))) h_swap.cpp:36 142 {*extendsidi2_rex64}
     (nil))
(insn 219 218 220 2 (parallel [
            (set (reg:DI 1 dx [orig:228 D.6135 ] [228])
                (ashift:DI (reg:DI 0 ax [orig:227 D.6135 ] [227])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:36 512 {*ashldi3_1}
     (nil))
(insn 220 219 221 2 (set (reg/f:DI 0 ax [474])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:36 89 {*movdi_internal}
     (nil))
(insn 221 220 222 2 (parallel [
            (set (reg/f:DI 0 ax [orig:229 D.6136 ] [229])
                (plus:DI (reg/f:DI 0 ax [474])
                    (reg:DI 1 dx [orig:228 D.6135 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:36 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:228 D.6135 ] [228]))
        (nil)))
(insn 222 221 223 2 (set (reg/f:DI 0 ax [orig:230 D.6137 ] [230])
        (mem/f:DI (reg/f:DI 0 ax [orig:229 D.6136 ] [229]) [0 *_160+0 S8 A64])) h_swap.cpp:36 89 {*movdi_internal}
     (nil))
(insn 223 222 224 2 (parallel [
            (set (reg/f:DI 1 dx [orig:231 D.6137 ] [231])
                (plus:DI (reg/f:DI 0 ax [orig:230 D.6137 ] [230])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:36 218 {*adddi_1}
     (nil))
(insn 224 223 225 2 (set (reg:SI 0 ax [475])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:36 90 {*movsi_internal}
     (nil))
(insn 225 224 226 2 (set (reg:DI 0 ax [orig:232 D.6135 ] [232])
        (sign_extend:DI (reg:SI 0 ax [475]))) h_swap.cpp:36 142 {*extendsidi2_rex64}
     (nil))
(insn 226 225 227 2 (parallel [
            (set (reg:DI 2 cx [orig:233 D.6135 ] [233])
                (ashift:DI (reg:DI 0 ax [orig:232 D.6135 ] [232])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:36 512 {*ashldi3_1}
     (nil))
(insn 227 226 228 2 (set (reg/f:DI 0 ax [476])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:36 89 {*movdi_internal}
     (nil))
(insn 228 227 229 2 (parallel [
            (set (reg/f:DI 0 ax [orig:234 D.6136 ] [234])
                (plus:DI (reg/f:DI 0 ax [476])
                    (reg:DI 2 cx [orig:233 D.6135 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:36 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:233 D.6135 ] [233]))
        (nil)))
(insn 229 228 230 2 (set (reg/f:DI 0 ax [orig:235 D.6137 ] [235])
        (mem/f:DI (reg/f:DI 0 ax [orig:234 D.6136 ] [234]) [0 *_165+0 S8 A64])) h_swap.cpp:36 89 {*movdi_internal}
     (nil))
(insn 230 229 231 2 (set (reg:QI 0 ax [orig:236 D.6138 ] [236])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:235 D.6137 ] [235])
                (const_int 13 [0xd])) [0 _166->ebytes.character+1 S1 A8])) h_swap.cpp:36 93 {*movqi_internal}
     (nil))
(insn 231 230 232 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:231 D.6137 ] [231])
                (const_int 14 [0xe])) [0 _162->ebytes.character+2 S1 A16])
        (reg:QI 0 ax [orig:236 D.6138 ] [236])) h_swap.cpp:36 93 {*movqi_internal}
     (nil))
(insn 232 231 233 2 (set (reg:SI 0 ax [477])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:37 90 {*movsi_internal}
     (nil))
(insn 233 232 234 2 (set (reg:DI 0 ax [orig:237 D.6135 ] [237])
        (sign_extend:DI (reg:SI 0 ax [477]))) h_swap.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 234 233 235 2 (parallel [
            (set (reg:DI 1 dx [orig:238 D.6135 ] [238])
                (ashift:DI (reg:DI 0 ax [orig:237 D.6135 ] [237])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:37 512 {*ashldi3_1}
     (nil))
(insn 235 234 236 2 (set (reg/f:DI 0 ax [478])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:37 89 {*movdi_internal}
     (nil))
(insn 236 235 237 2 (parallel [
            (set (reg/f:DI 0 ax [orig:239 D.6136 ] [239])
                (plus:DI (reg/f:DI 0 ax [478])
                    (reg:DI 1 dx [orig:238 D.6135 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:37 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:238 D.6135 ] [238]))
        (nil)))
(insn 237 236 238 2 (set (reg/f:DI 0 ax [orig:240 D.6137 ] [240])
        (mem/f:DI (reg/f:DI 0 ax [orig:239 D.6136 ] [239]) [0 *_171+0 S8 A64])) h_swap.cpp:37 89 {*movdi_internal}
     (nil))
(insn 238 237 239 2 (parallel [
            (set (reg/f:DI 1 dx [orig:241 D.6137 ] [241])
                (plus:DI (reg/f:DI 0 ax [orig:240 D.6137 ] [240])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:37 218 {*adddi_1}
     (nil))
(insn 239 238 240 2 (set (reg:SI 0 ax [479])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:37 90 {*movsi_internal}
     (nil))
(insn 240 239 241 2 (set (reg:DI 0 ax [orig:242 D.6135 ] [242])
        (sign_extend:DI (reg:SI 0 ax [479]))) h_swap.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 241 240 242 2 (parallel [
            (set (reg:DI 2 cx [orig:243 D.6135 ] [243])
                (ashift:DI (reg:DI 0 ax [orig:242 D.6135 ] [242])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:37 512 {*ashldi3_1}
     (nil))
(insn 242 241 243 2 (set (reg/f:DI 0 ax [480])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:37 89 {*movdi_internal}
     (nil))
(insn 243 242 244 2 (parallel [
            (set (reg/f:DI 0 ax [orig:244 D.6136 ] [244])
                (plus:DI (reg/f:DI 0 ax [480])
                    (reg:DI 2 cx [orig:243 D.6135 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:37 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:243 D.6135 ] [243]))
        (nil)))
(insn 244 243 245 2 (set (reg/f:DI 0 ax [orig:245 D.6137 ] [245])
        (mem/f:DI (reg/f:DI 0 ax [orig:244 D.6136 ] [244]) [0 *_176+0 S8 A64])) h_swap.cpp:37 89 {*movdi_internal}
     (nil))
(insn 245 244 246 2 (set (reg:QI 0 ax [orig:246 D.6138 ] [246])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:245 D.6137 ] [245])
                (const_int 12 [0xc])) [0 _177->ebytes.character+0 S1 A32])) h_swap.cpp:37 93 {*movqi_internal}
     (nil))
(insn 246 245 247 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:241 D.6137 ] [241])
                (const_int 15 [0xf])) [0 _173->ebytes.character+3 S1 A8])
        (reg:QI 0 ax [orig:246 D.6138 ] [246])) h_swap.cpp:37 93 {*movqi_internal}
     (nil))
(insn 247 246 248 2 (set (reg:SI 0 ax [481])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:39 90 {*movsi_internal}
     (nil))
(insn 248 247 249 2 (set (reg:DI 0 ax [orig:247 D.6135 ] [247])
        (sign_extend:DI (reg:SI 0 ax [481]))) h_swap.cpp:39 142 {*extendsidi2_rex64}
     (nil))
(insn 249 248 250 2 (parallel [
            (set (reg:DI 1 dx [orig:248 D.6135 ] [248])
                (ashift:DI (reg:DI 0 ax [orig:247 D.6135 ] [247])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:39 512 {*ashldi3_1}
     (nil))
(insn 250 249 251 2 (set (reg/f:DI 0 ax [482])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:39 89 {*movdi_internal}
     (nil))
(insn 251 250 252 2 (parallel [
            (set (reg/f:DI 0 ax [orig:249 D.6136 ] [249])
                (plus:DI (reg/f:DI 0 ax [482])
                    (reg:DI 1 dx [orig:248 D.6135 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:39 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:248 D.6135 ] [248]))
        (nil)))
(insn 252 251 253 2 (set (reg/f:DI 0 ax [orig:250 D.6137 ] [250])
        (mem/f:DI (reg/f:DI 0 ax [orig:249 D.6136 ] [249]) [0 *_182+0 S8 A64])) h_swap.cpp:39 89 {*movdi_internal}
     (nil))
(insn 253 252 254 2 (parallel [
            (set (reg/f:DI 1 dx [orig:251 D.6137 ] [251])
                (plus:DI (reg/f:DI 0 ax [orig:250 D.6137 ] [250])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:39 218 {*adddi_1}
     (nil))
(insn 254 253 255 2 (set (reg:SI 0 ax [483])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:39 90 {*movsi_internal}
     (nil))
(insn 255 254 256 2 (set (reg:DI 0 ax [orig:252 D.6135 ] [252])
        (sign_extend:DI (reg:SI 0 ax [483]))) h_swap.cpp:39 142 {*extendsidi2_rex64}
     (nil))
(insn 256 255 257 2 (parallel [
            (set (reg:DI 2 cx [orig:253 D.6135 ] [253])
                (ashift:DI (reg:DI 0 ax [orig:252 D.6135 ] [252])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:39 512 {*ashldi3_1}
     (nil))
(insn 257 256 258 2 (set (reg/f:DI 0 ax [484])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:39 89 {*movdi_internal}
     (nil))
(insn 258 257 259 2 (parallel [
            (set (reg/f:DI 0 ax [orig:254 D.6136 ] [254])
                (plus:DI (reg/f:DI 0 ax [484])
                    (reg:DI 2 cx [orig:253 D.6135 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:39 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:253 D.6135 ] [253]))
        (nil)))
(insn 259 258 260 2 (set (reg/f:DI 0 ax [orig:255 D.6137 ] [255])
        (mem/f:DI (reg/f:DI 0 ax [orig:254 D.6136 ] [254]) [0 *_187+0 S8 A64])) h_swap.cpp:39 89 {*movdi_internal}
     (nil))
(insn 260 259 261 2 (set (reg:QI 0 ax [orig:256 D.6138 ] [256])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:255 D.6137 ] [255])
                (const_int 19 [0x13])) [0 _188->tbytes.character+3 S1 A8])) h_swap.cpp:39 93 {*movqi_internal}
     (nil))
(insn 261 260 262 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:251 D.6137 ] [251])
                (const_int 16 [0x10])) [0 _184->tbytes.character+0 S1 A32])
        (reg:QI 0 ax [orig:256 D.6138 ] [256])) h_swap.cpp:39 93 {*movqi_internal}
     (nil))
(insn 262 261 263 2 (set (reg:SI 0 ax [485])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:40 90 {*movsi_internal}
     (nil))
(insn 263 262 264 2 (set (reg:DI 0 ax [orig:257 D.6135 ] [257])
        (sign_extend:DI (reg:SI 0 ax [485]))) h_swap.cpp:40 142 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 2 (parallel [
            (set (reg:DI 1 dx [orig:258 D.6135 ] [258])
                (ashift:DI (reg:DI 0 ax [orig:257 D.6135 ] [257])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:40 512 {*ashldi3_1}
     (nil))
(insn 265 264 266 2 (set (reg/f:DI 0 ax [486])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:40 89 {*movdi_internal}
     (nil))
(insn 266 265 267 2 (parallel [
            (set (reg/f:DI 0 ax [orig:259 D.6136 ] [259])
                (plus:DI (reg/f:DI 0 ax [486])
                    (reg:DI 1 dx [orig:258 D.6135 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:40 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:258 D.6135 ] [258]))
        (nil)))
(insn 267 266 268 2 (set (reg/f:DI 0 ax [orig:260 D.6137 ] [260])
        (mem/f:DI (reg/f:DI 0 ax [orig:259 D.6136 ] [259]) [0 *_193+0 S8 A64])) h_swap.cpp:40 89 {*movdi_internal}
     (nil))
(insn 268 267 269 2 (parallel [
            (set (reg/f:DI 1 dx [orig:261 D.6137 ] [261])
                (plus:DI (reg/f:DI 0 ax [orig:260 D.6137 ] [260])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:40 218 {*adddi_1}
     (nil))
(insn 269 268 270 2 (set (reg:SI 0 ax [487])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:40 90 {*movsi_internal}
     (nil))
(insn 270 269 271 2 (set (reg:DI 0 ax [orig:262 D.6135 ] [262])
        (sign_extend:DI (reg:SI 0 ax [487]))) h_swap.cpp:40 142 {*extendsidi2_rex64}
     (nil))
(insn 271 270 272 2 (parallel [
            (set (reg:DI 2 cx [orig:263 D.6135 ] [263])
                (ashift:DI (reg:DI 0 ax [orig:262 D.6135 ] [262])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:40 512 {*ashldi3_1}
     (nil))
(insn 272 271 273 2 (set (reg/f:DI 0 ax [488])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:40 89 {*movdi_internal}
     (nil))
(insn 273 272 274 2 (parallel [
            (set (reg/f:DI 0 ax [orig:264 D.6136 ] [264])
                (plus:DI (reg/f:DI 0 ax [488])
                    (reg:DI 2 cx [orig:263 D.6135 ] [263])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:40 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:263 D.6135 ] [263]))
        (nil)))
(insn 274 273 275 2 (set (reg/f:DI 0 ax [orig:265 D.6137 ] [265])
        (mem/f:DI (reg/f:DI 0 ax [orig:264 D.6136 ] [264]) [0 *_198+0 S8 A64])) h_swap.cpp:40 89 {*movdi_internal}
     (nil))
(insn 275 274 276 2 (set (reg:QI 0 ax [orig:266 D.6138 ] [266])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:265 D.6137 ] [265])
                (const_int 18 [0x12])) [0 _199->tbytes.character+2 S1 A16])) h_swap.cpp:40 93 {*movqi_internal}
     (nil))
(insn 276 275 277 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:261 D.6137 ] [261])
                (const_int 17 [0x11])) [0 _195->tbytes.character+1 S1 A8])
        (reg:QI 0 ax [orig:266 D.6138 ] [266])) h_swap.cpp:40 93 {*movqi_internal}
     (nil))
(insn 277 276 278 2 (set (reg:SI 0 ax [489])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:41 90 {*movsi_internal}
     (nil))
(insn 278 277 279 2 (set (reg:DI 0 ax [orig:267 D.6135 ] [267])
        (sign_extend:DI (reg:SI 0 ax [489]))) h_swap.cpp:41 142 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 2 (parallel [
            (set (reg:DI 1 dx [orig:268 D.6135 ] [268])
                (ashift:DI (reg:DI 0 ax [orig:267 D.6135 ] [267])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:41 512 {*ashldi3_1}
     (nil))
(insn 280 279 281 2 (set (reg/f:DI 0 ax [490])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:41 89 {*movdi_internal}
     (nil))
(insn 281 280 282 2 (parallel [
            (set (reg/f:DI 0 ax [orig:269 D.6136 ] [269])
                (plus:DI (reg/f:DI 0 ax [490])
                    (reg:DI 1 dx [orig:268 D.6135 ] [268])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:41 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:268 D.6135 ] [268]))
        (nil)))
(insn 282 281 283 2 (set (reg/f:DI 0 ax [orig:270 D.6137 ] [270])
        (mem/f:DI (reg/f:DI 0 ax [orig:269 D.6136 ] [269]) [0 *_204+0 S8 A64])) h_swap.cpp:41 89 {*movdi_internal}
     (nil))
(insn 283 282 284 2 (parallel [
            (set (reg/f:DI 1 dx [orig:271 D.6137 ] [271])
                (plus:DI (reg/f:DI 0 ax [orig:270 D.6137 ] [270])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:41 218 {*adddi_1}
     (nil))
(insn 284 283 285 2 (set (reg:SI 0 ax [491])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:41 90 {*movsi_internal}
     (nil))
(insn 285 284 286 2 (set (reg:DI 0 ax [orig:272 D.6135 ] [272])
        (sign_extend:DI (reg:SI 0 ax [491]))) h_swap.cpp:41 142 {*extendsidi2_rex64}
     (nil))
(insn 286 285 287 2 (parallel [
            (set (reg:DI 2 cx [orig:273 D.6135 ] [273])
                (ashift:DI (reg:DI 0 ax [orig:272 D.6135 ] [272])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:41 512 {*ashldi3_1}
     (nil))
(insn 287 286 288 2 (set (reg/f:DI 0 ax [492])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:41 89 {*movdi_internal}
     (nil))
(insn 288 287 289 2 (parallel [
            (set (reg/f:DI 0 ax [orig:274 D.6136 ] [274])
                (plus:DI (reg/f:DI 0 ax [492])
                    (reg:DI 2 cx [orig:273 D.6135 ] [273])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:41 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:273 D.6135 ] [273]))
        (nil)))
(insn 289 288 290 2 (set (reg/f:DI 0 ax [orig:275 D.6137 ] [275])
        (mem/f:DI (reg/f:DI 0 ax [orig:274 D.6136 ] [274]) [0 *_209+0 S8 A64])) h_swap.cpp:41 89 {*movdi_internal}
     (nil))
(insn 290 289 291 2 (set (reg:QI 0 ax [orig:276 D.6138 ] [276])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:275 D.6137 ] [275])
                (const_int 17 [0x11])) [0 _210->tbytes.character+1 S1 A8])) h_swap.cpp:41 93 {*movqi_internal}
     (nil))
(insn 291 290 292 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:271 D.6137 ] [271])
                (const_int 18 [0x12])) [0 _206->tbytes.character+2 S1 A16])
        (reg:QI 0 ax [orig:276 D.6138 ] [276])) h_swap.cpp:41 93 {*movqi_internal}
     (nil))
(insn 292 291 293 2 (set (reg:SI 0 ax [493])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:42 90 {*movsi_internal}
     (nil))
(insn 293 292 294 2 (set (reg:DI 0 ax [orig:277 D.6135 ] [277])
        (sign_extend:DI (reg:SI 0 ax [493]))) h_swap.cpp:42 142 {*extendsidi2_rex64}
     (nil))
(insn 294 293 295 2 (parallel [
            (set (reg:DI 1 dx [orig:278 D.6135 ] [278])
                (ashift:DI (reg:DI 0 ax [orig:277 D.6135 ] [277])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:42 512 {*ashldi3_1}
     (nil))
(insn 295 294 296 2 (set (reg/f:DI 0 ax [494])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:42 89 {*movdi_internal}
     (nil))
(insn 296 295 297 2 (parallel [
            (set (reg/f:DI 0 ax [orig:279 D.6136 ] [279])
                (plus:DI (reg/f:DI 0 ax [494])
                    (reg:DI 1 dx [orig:278 D.6135 ] [278])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:42 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:278 D.6135 ] [278]))
        (nil)))
(insn 297 296 298 2 (set (reg/f:DI 0 ax [orig:280 D.6137 ] [280])
        (mem/f:DI (reg/f:DI 0 ax [orig:279 D.6136 ] [279]) [0 *_215+0 S8 A64])) h_swap.cpp:42 89 {*movdi_internal}
     (nil))
(insn 298 297 299 2 (parallel [
            (set (reg/f:DI 1 dx [orig:281 D.6137 ] [281])
                (plus:DI (reg/f:DI 0 ax [orig:280 D.6137 ] [280])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:42 218 {*adddi_1}
     (nil))
(insn 299 298 300 2 (set (reg:SI 0 ax [495])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:42 90 {*movsi_internal}
     (nil))
(insn 300 299 301 2 (set (reg:DI 0 ax [orig:282 D.6135 ] [282])
        (sign_extend:DI (reg:SI 0 ax [495]))) h_swap.cpp:42 142 {*extendsidi2_rex64}
     (nil))
(insn 301 300 302 2 (parallel [
            (set (reg:DI 2 cx [orig:283 D.6135 ] [283])
                (ashift:DI (reg:DI 0 ax [orig:282 D.6135 ] [282])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:42 512 {*ashldi3_1}
     (nil))
(insn 302 301 303 2 (set (reg/f:DI 0 ax [496])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:42 89 {*movdi_internal}
     (nil))
(insn 303 302 304 2 (parallel [
            (set (reg/f:DI 0 ax [orig:284 D.6136 ] [284])
                (plus:DI (reg/f:DI 0 ax [496])
                    (reg:DI 2 cx [orig:283 D.6135 ] [283])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:42 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:283 D.6135 ] [283]))
        (nil)))
(insn 304 303 305 2 (set (reg/f:DI 0 ax [orig:285 D.6137 ] [285])
        (mem/f:DI (reg/f:DI 0 ax [orig:284 D.6136 ] [284]) [0 *_220+0 S8 A64])) h_swap.cpp:42 89 {*movdi_internal}
     (nil))
(insn 305 304 306 2 (set (reg:QI 0 ax [orig:286 D.6138 ] [286])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:285 D.6137 ] [285])
                (const_int 16 [0x10])) [0 _221->tbytes.character+0 S1 A32])) h_swap.cpp:42 93 {*movqi_internal}
     (nil))
(insn 306 305 307 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:281 D.6137 ] [281])
                (const_int 19 [0x13])) [0 _217->tbytes.character+3 S1 A8])
        (reg:QI 0 ax [orig:286 D.6138 ] [286])) h_swap.cpp:42 93 {*movqi_internal}
     (nil))
(insn 307 306 308 2 (set (reg:SI 0 ax [497])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:44 90 {*movsi_internal}
     (nil))
(insn 308 307 309 2 (set (reg:DI 0 ax [orig:287 D.6135 ] [287])
        (sign_extend:DI (reg:SI 0 ax [497]))) h_swap.cpp:44 142 {*extendsidi2_rex64}
     (nil))
(insn 309 308 310 2 (parallel [
            (set (reg:DI 1 dx [orig:288 D.6135 ] [288])
                (ashift:DI (reg:DI 0 ax [orig:287 D.6135 ] [287])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:44 512 {*ashldi3_1}
     (nil))
(insn 310 309 311 2 (set (reg/f:DI 0 ax [498])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:44 89 {*movdi_internal}
     (nil))
(insn 311 310 312 2 (parallel [
            (set (reg/f:DI 0 ax [orig:289 D.6136 ] [289])
                (plus:DI (reg/f:DI 0 ax [498])
                    (reg:DI 1 dx [orig:288 D.6135 ] [288])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:44 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:288 D.6135 ] [288]))
        (nil)))
(insn 312 311 313 2 (set (reg/f:DI 0 ax [orig:290 D.6137 ] [290])
        (mem/f:DI (reg/f:DI 0 ax [orig:289 D.6136 ] [289]) [0 *_226+0 S8 A64])) h_swap.cpp:44 89 {*movdi_internal}
     (nil))
(insn 313 312 314 2 (parallel [
            (set (reg/f:DI 1 dx [orig:291 D.6137 ] [291])
                (plus:DI (reg/f:DI 0 ax [orig:290 D.6137 ] [290])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:44 218 {*adddi_1}
     (nil))
(insn 314 313 315 2 (set (reg:SI 0 ax [499])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:44 90 {*movsi_internal}
     (nil))
(insn 315 314 316 2 (set (reg:DI 0 ax [orig:292 D.6135 ] [292])
        (sign_extend:DI (reg:SI 0 ax [499]))) h_swap.cpp:44 142 {*extendsidi2_rex64}
     (nil))
(insn 316 315 317 2 (parallel [
            (set (reg:DI 2 cx [orig:293 D.6135 ] [293])
                (ashift:DI (reg:DI 0 ax [orig:292 D.6135 ] [292])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:44 512 {*ashldi3_1}
     (nil))
(insn 317 316 318 2 (set (reg/f:DI 0 ax [500])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:44 89 {*movdi_internal}
     (nil))
(insn 318 317 319 2 (parallel [
            (set (reg/f:DI 0 ax [orig:294 D.6136 ] [294])
                (plus:DI (reg/f:DI 0 ax [500])
                    (reg:DI 2 cx [orig:293 D.6135 ] [293])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:44 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:293 D.6135 ] [293]))
        (nil)))
(insn 319 318 320 2 (set (reg/f:DI 0 ax [orig:295 D.6137 ] [295])
        (mem/f:DI (reg/f:DI 0 ax [orig:294 D.6136 ] [294]) [0 *_231+0 S8 A64])) h_swap.cpp:44 89 {*movdi_internal}
     (nil))
(insn 320 319 321 2 (set (reg:QI 0 ax [orig:296 D.6138 ] [296])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:295 D.6137 ] [295])
                (const_int 23 [0x17])) [0 _232->bbytes.character+3 S1 A8])) h_swap.cpp:44 93 {*movqi_internal}
     (nil))
(insn 321 320 322 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:291 D.6137 ] [291])
                (const_int 20 [0x14])) [0 _228->bbytes.character+0 S1 A32])
        (reg:QI 0 ax [orig:296 D.6138 ] [296])) h_swap.cpp:44 93 {*movqi_internal}
     (nil))
(insn 322 321 323 2 (set (reg:SI 0 ax [501])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:45 90 {*movsi_internal}
     (nil))
(insn 323 322 324 2 (set (reg:DI 0 ax [orig:297 D.6135 ] [297])
        (sign_extend:DI (reg:SI 0 ax [501]))) h_swap.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 324 323 325 2 (parallel [
            (set (reg:DI 1 dx [orig:298 D.6135 ] [298])
                (ashift:DI (reg:DI 0 ax [orig:297 D.6135 ] [297])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:45 512 {*ashldi3_1}
     (nil))
(insn 325 324 326 2 (set (reg/f:DI 0 ax [502])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:45 89 {*movdi_internal}
     (nil))
(insn 326 325 327 2 (parallel [
            (set (reg/f:DI 0 ax [orig:299 D.6136 ] [299])
                (plus:DI (reg/f:DI 0 ax [502])
                    (reg:DI 1 dx [orig:298 D.6135 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:45 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:298 D.6135 ] [298]))
        (nil)))
(insn 327 326 328 2 (set (reg/f:DI 0 ax [orig:300 D.6137 ] [300])
        (mem/f:DI (reg/f:DI 0 ax [orig:299 D.6136 ] [299]) [0 *_237+0 S8 A64])) h_swap.cpp:45 89 {*movdi_internal}
     (nil))
(insn 328 327 329 2 (parallel [
            (set (reg/f:DI 1 dx [orig:301 D.6137 ] [301])
                (plus:DI (reg/f:DI 0 ax [orig:300 D.6137 ] [300])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:45 218 {*adddi_1}
     (nil))
(insn 329 328 330 2 (set (reg:SI 0 ax [503])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:45 90 {*movsi_internal}
     (nil))
(insn 330 329 331 2 (set (reg:DI 0 ax [orig:302 D.6135 ] [302])
        (sign_extend:DI (reg:SI 0 ax [503]))) h_swap.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 331 330 332 2 (parallel [
            (set (reg:DI 2 cx [orig:303 D.6135 ] [303])
                (ashift:DI (reg:DI 0 ax [orig:302 D.6135 ] [302])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:45 512 {*ashldi3_1}
     (nil))
(insn 332 331 333 2 (set (reg/f:DI 0 ax [504])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:45 89 {*movdi_internal}
     (nil))
(insn 333 332 334 2 (parallel [
            (set (reg/f:DI 0 ax [orig:304 D.6136 ] [304])
                (plus:DI (reg/f:DI 0 ax [504])
                    (reg:DI 2 cx [orig:303 D.6135 ] [303])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:45 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:303 D.6135 ] [303]))
        (nil)))
(insn 334 333 335 2 (set (reg/f:DI 0 ax [orig:305 D.6137 ] [305])
        (mem/f:DI (reg/f:DI 0 ax [orig:304 D.6136 ] [304]) [0 *_242+0 S8 A64])) h_swap.cpp:45 89 {*movdi_internal}
     (nil))
(insn 335 334 336 2 (set (reg:QI 0 ax [orig:306 D.6138 ] [306])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:305 D.6137 ] [305])
                (const_int 22 [0x16])) [0 _243->bbytes.character+2 S1 A16])) h_swap.cpp:45 93 {*movqi_internal}
     (nil))
(insn 336 335 337 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:301 D.6137 ] [301])
                (const_int 21 [0x15])) [0 _239->bbytes.character+1 S1 A8])
        (reg:QI 0 ax [orig:306 D.6138 ] [306])) h_swap.cpp:45 93 {*movqi_internal}
     (nil))
(insn 337 336 338 2 (set (reg:SI 0 ax [505])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:46 90 {*movsi_internal}
     (nil))
(insn 338 337 339 2 (set (reg:DI 0 ax [orig:307 D.6135 ] [307])
        (sign_extend:DI (reg:SI 0 ax [505]))) h_swap.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 339 338 340 2 (parallel [
            (set (reg:DI 1 dx [orig:308 D.6135 ] [308])
                (ashift:DI (reg:DI 0 ax [orig:307 D.6135 ] [307])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:46 512 {*ashldi3_1}
     (nil))
(insn 340 339 341 2 (set (reg/f:DI 0 ax [506])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:46 89 {*movdi_internal}
     (nil))
(insn 341 340 342 2 (parallel [
            (set (reg/f:DI 0 ax [orig:309 D.6136 ] [309])
                (plus:DI (reg/f:DI 0 ax [506])
                    (reg:DI 1 dx [orig:308 D.6135 ] [308])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:46 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:308 D.6135 ] [308]))
        (nil)))
(insn 342 341 343 2 (set (reg/f:DI 0 ax [orig:310 D.6137 ] [310])
        (mem/f:DI (reg/f:DI 0 ax [orig:309 D.6136 ] [309]) [0 *_248+0 S8 A64])) h_swap.cpp:46 89 {*movdi_internal}
     (nil))
(insn 343 342 344 2 (parallel [
            (set (reg/f:DI 1 dx [orig:311 D.6137 ] [311])
                (plus:DI (reg/f:DI 0 ax [orig:310 D.6137 ] [310])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:46 218 {*adddi_1}
     (nil))
(insn 344 343 345 2 (set (reg:SI 0 ax [507])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:46 90 {*movsi_internal}
     (nil))
(insn 345 344 346 2 (set (reg:DI 0 ax [orig:312 D.6135 ] [312])
        (sign_extend:DI (reg:SI 0 ax [507]))) h_swap.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 346 345 347 2 (parallel [
            (set (reg:DI 2 cx [orig:313 D.6135 ] [313])
                (ashift:DI (reg:DI 0 ax [orig:312 D.6135 ] [312])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:46 512 {*ashldi3_1}
     (nil))
(insn 347 346 348 2 (set (reg/f:DI 0 ax [508])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:46 89 {*movdi_internal}
     (nil))
(insn 348 347 349 2 (parallel [
            (set (reg/f:DI 0 ax [orig:314 D.6136 ] [314])
                (plus:DI (reg/f:DI 0 ax [508])
                    (reg:DI 2 cx [orig:313 D.6135 ] [313])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:46 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:313 D.6135 ] [313]))
        (nil)))
(insn 349 348 350 2 (set (reg/f:DI 0 ax [orig:315 D.6137 ] [315])
        (mem/f:DI (reg/f:DI 0 ax [orig:314 D.6136 ] [314]) [0 *_253+0 S8 A64])) h_swap.cpp:46 89 {*movdi_internal}
     (nil))
(insn 350 349 351 2 (set (reg:QI 0 ax [orig:316 D.6138 ] [316])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:315 D.6137 ] [315])
                (const_int 21 [0x15])) [0 _254->bbytes.character+1 S1 A8])) h_swap.cpp:46 93 {*movqi_internal}
     (nil))
(insn 351 350 352 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:311 D.6137 ] [311])
                (const_int 22 [0x16])) [0 _250->bbytes.character+2 S1 A16])
        (reg:QI 0 ax [orig:316 D.6138 ] [316])) h_swap.cpp:46 93 {*movqi_internal}
     (nil))
(insn 352 351 353 2 (set (reg:SI 0 ax [509])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:47 90 {*movsi_internal}
     (nil))
(insn 353 352 354 2 (set (reg:DI 0 ax [orig:317 D.6135 ] [317])
        (sign_extend:DI (reg:SI 0 ax [509]))) h_swap.cpp:47 142 {*extendsidi2_rex64}
     (nil))
(insn 354 353 355 2 (parallel [
            (set (reg:DI 1 dx [orig:318 D.6135 ] [318])
                (ashift:DI (reg:DI 0 ax [orig:317 D.6135 ] [317])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:47 512 {*ashldi3_1}
     (nil))
(insn 355 354 356 2 (set (reg/f:DI 0 ax [510])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:47 89 {*movdi_internal}
     (nil))
(insn 356 355 357 2 (parallel [
            (set (reg/f:DI 0 ax [orig:319 D.6136 ] [319])
                (plus:DI (reg/f:DI 0 ax [510])
                    (reg:DI 1 dx [orig:318 D.6135 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:47 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:318 D.6135 ] [318]))
        (nil)))
(insn 357 356 358 2 (set (reg/f:DI 0 ax [orig:320 D.6137 ] [320])
        (mem/f:DI (reg/f:DI 0 ax [orig:319 D.6136 ] [319]) [0 *_259+0 S8 A64])) h_swap.cpp:47 89 {*movdi_internal}
     (nil))
(insn 358 357 359 2 (parallel [
            (set (reg/f:DI 1 dx [orig:321 D.6137 ] [321])
                (plus:DI (reg/f:DI 0 ax [orig:320 D.6137 ] [320])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:47 218 {*adddi_1}
     (nil))
(insn 359 358 360 2 (set (reg:SI 0 ax [511])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:47 90 {*movsi_internal}
     (nil))
(insn 360 359 361 2 (set (reg:DI 0 ax [orig:322 D.6135 ] [322])
        (sign_extend:DI (reg:SI 0 ax [511]))) h_swap.cpp:47 142 {*extendsidi2_rex64}
     (nil))
(insn 361 360 362 2 (parallel [
            (set (reg:DI 2 cx [orig:323 D.6135 ] [323])
                (ashift:DI (reg:DI 0 ax [orig:322 D.6135 ] [322])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:47 512 {*ashldi3_1}
     (nil))
(insn 362 361 363 2 (set (reg/f:DI 0 ax [512])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:47 89 {*movdi_internal}
     (nil))
(insn 363 362 364 2 (parallel [
            (set (reg/f:DI 0 ax [orig:324 D.6136 ] [324])
                (plus:DI (reg/f:DI 0 ax [512])
                    (reg:DI 2 cx [orig:323 D.6135 ] [323])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:47 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:323 D.6135 ] [323]))
        (nil)))
(insn 364 363 365 2 (set (reg/f:DI 0 ax [orig:325 D.6137 ] [325])
        (mem/f:DI (reg/f:DI 0 ax [orig:324 D.6136 ] [324]) [0 *_264+0 S8 A64])) h_swap.cpp:47 89 {*movdi_internal}
     (nil))
(insn 365 364 366 2 (set (reg:QI 0 ax [orig:326 D.6138 ] [326])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:325 D.6137 ] [325])
                (const_int 20 [0x14])) [0 _265->bbytes.character+0 S1 A32])) h_swap.cpp:47 93 {*movqi_internal}
     (nil))
(insn 366 365 367 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:321 D.6137 ] [321])
                (const_int 23 [0x17])) [0 _261->bbytes.character+3 S1 A8])
        (reg:QI 0 ax [orig:326 D.6138 ] [326])) h_swap.cpp:47 93 {*movqi_internal}
     (nil))
(insn 367 366 368 2 (set (reg:SI 0 ax [513])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:49 90 {*movsi_internal}
     (nil))
(insn 368 367 369 2 (set (reg:DI 0 ax [orig:327 D.6135 ] [327])
        (sign_extend:DI (reg:SI 0 ax [513]))) h_swap.cpp:49 142 {*extendsidi2_rex64}
     (nil))
(insn 369 368 370 2 (parallel [
            (set (reg:DI 1 dx [orig:328 D.6135 ] [328])
                (ashift:DI (reg:DI 0 ax [orig:327 D.6135 ] [327])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:49 512 {*ashldi3_1}
     (nil))
(insn 370 369 371 2 (set (reg/f:DI 0 ax [514])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:49 89 {*movdi_internal}
     (nil))
(insn 371 370 372 2 (parallel [
            (set (reg/f:DI 0 ax [orig:329 D.6136 ] [329])
                (plus:DI (reg/f:DI 0 ax [514])
                    (reg:DI 1 dx [orig:328 D.6135 ] [328])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:49 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:328 D.6135 ] [328]))
        (nil)))
(insn 372 371 373 2 (set (reg/f:DI 0 ax [orig:330 D.6137 ] [330])
        (mem/f:DI (reg/f:DI 0 ax [orig:329 D.6136 ] [329]) [0 *_270+0 S8 A64])) h_swap.cpp:49 89 {*movdi_internal}
     (nil))
(insn 373 372 374 2 (parallel [
            (set (reg/f:DI 1 dx [orig:331 D.6137 ] [331])
                (plus:DI (reg/f:DI 0 ax [orig:330 D.6137 ] [330])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:49 218 {*adddi_1}
     (nil))
(insn 374 373 375 2 (set (reg:SI 0 ax [515])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:49 90 {*movsi_internal}
     (nil))
(insn 375 374 376 2 (set (reg:DI 0 ax [orig:332 D.6135 ] [332])
        (sign_extend:DI (reg:SI 0 ax [515]))) h_swap.cpp:49 142 {*extendsidi2_rex64}
     (nil))
(insn 376 375 377 2 (parallel [
            (set (reg:DI 2 cx [orig:333 D.6135 ] [333])
                (ashift:DI (reg:DI 0 ax [orig:332 D.6135 ] [332])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:49 512 {*ashldi3_1}
     (nil))
(insn 377 376 378 2 (set (reg/f:DI 0 ax [516])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:49 89 {*movdi_internal}
     (nil))
(insn 378 377 379 2 (parallel [
            (set (reg/f:DI 0 ax [orig:334 D.6136 ] [334])
                (plus:DI (reg/f:DI 0 ax [516])
                    (reg:DI 2 cx [orig:333 D.6135 ] [333])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:49 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:333 D.6135 ] [333]))
        (nil)))
(insn 379 378 380 2 (set (reg/f:DI 0 ax [orig:335 D.6137 ] [335])
        (mem/f:DI (reg/f:DI 0 ax [orig:334 D.6136 ] [334]) [0 *_275+0 S8 A64])) h_swap.cpp:49 89 {*movdi_internal}
     (nil))
(insn 380 379 381 2 (set (reg:QI 0 ax [orig:336 D.6138 ] [336])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:335 D.6137 ] [335])
                (const_int 25 [0x19])) [0 _276->transf.character+1 S1 A8])) h_swap.cpp:49 93 {*movqi_internal}
     (nil))
(insn 381 380 382 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:331 D.6137 ] [331])
                (const_int 24 [0x18])) [0 _272->transf.character+0 S1 A32])
        (reg:QI 0 ax [orig:336 D.6138 ] [336])) h_swap.cpp:49 93 {*movqi_internal}
     (nil))
(insn 382 381 383 2 (set (reg:SI 0 ax [517])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:50 90 {*movsi_internal}
     (nil))
(insn 383 382 384 2 (set (reg:DI 0 ax [orig:337 D.6135 ] [337])
        (sign_extend:DI (reg:SI 0 ax [517]))) h_swap.cpp:50 142 {*extendsidi2_rex64}
     (nil))
(insn 384 383 385 2 (parallel [
            (set (reg:DI 1 dx [orig:338 D.6135 ] [338])
                (ashift:DI (reg:DI 0 ax [orig:337 D.6135 ] [337])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:50 512 {*ashldi3_1}
     (nil))
(insn 385 384 386 2 (set (reg/f:DI 0 ax [518])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:50 89 {*movdi_internal}
     (nil))
(insn 386 385 387 2 (parallel [
            (set (reg/f:DI 0 ax [orig:339 D.6136 ] [339])
                (plus:DI (reg/f:DI 0 ax [518])
                    (reg:DI 1 dx [orig:338 D.6135 ] [338])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:50 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:338 D.6135 ] [338]))
        (nil)))
(insn 387 386 388 2 (set (reg/f:DI 0 ax [orig:340 D.6137 ] [340])
        (mem/f:DI (reg/f:DI 0 ax [orig:339 D.6136 ] [339]) [0 *_281+0 S8 A64])) h_swap.cpp:50 89 {*movdi_internal}
     (nil))
(insn 388 387 389 2 (parallel [
            (set (reg/f:DI 1 dx [orig:341 D.6137 ] [341])
                (plus:DI (reg/f:DI 0 ax [orig:340 D.6137 ] [340])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:50 218 {*adddi_1}
     (nil))
(insn 389 388 390 2 (set (reg:SI 0 ax [519])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:50 90 {*movsi_internal}
     (nil))
(insn 390 389 391 2 (set (reg:DI 0 ax [orig:342 D.6135 ] [342])
        (sign_extend:DI (reg:SI 0 ax [519]))) h_swap.cpp:50 142 {*extendsidi2_rex64}
     (nil))
(insn 391 390 392 2 (parallel [
            (set (reg:DI 2 cx [orig:343 D.6135 ] [343])
                (ashift:DI (reg:DI 0 ax [orig:342 D.6135 ] [342])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:50 512 {*ashldi3_1}
     (nil))
(insn 392 391 393 2 (set (reg/f:DI 0 ax [520])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:50 89 {*movdi_internal}
     (nil))
(insn 393 392 394 2 (parallel [
            (set (reg/f:DI 0 ax [orig:344 D.6136 ] [344])
                (plus:DI (reg/f:DI 0 ax [520])
                    (reg:DI 2 cx [orig:343 D.6135 ] [343])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:50 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:343 D.6135 ] [343]))
        (nil)))
(insn 394 393 395 2 (set (reg/f:DI 0 ax [orig:345 D.6137 ] [345])
        (mem/f:DI (reg/f:DI 0 ax [orig:344 D.6136 ] [344]) [0 *_286+0 S8 A64])) h_swap.cpp:50 89 {*movdi_internal}
     (nil))
(insn 395 394 396 2 (set (reg:QI 0 ax [orig:346 D.6138 ] [346])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:345 D.6137 ] [345])
                (const_int 24 [0x18])) [0 _287->transf.character+0 S1 A32])) h_swap.cpp:50 93 {*movqi_internal}
     (nil))
(insn 396 395 397 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:341 D.6137 ] [341])
                (const_int 25 [0x19])) [0 _283->transf.character+1 S1 A8])
        (reg:QI 0 ax [orig:346 D.6138 ] [346])) h_swap.cpp:50 93 {*movqi_internal}
     (nil))
(insn 397 396 398 2 (set (reg:SI 0 ax [521])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:52 90 {*movsi_internal}
     (nil))
(insn 398 397 399 2 (set (reg:DI 0 ax [orig:347 D.6135 ] [347])
        (sign_extend:DI (reg:SI 0 ax [521]))) h_swap.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 399 398 400 2 (parallel [
            (set (reg:DI 1 dx [orig:348 D.6135 ] [348])
                (ashift:DI (reg:DI 0 ax [orig:347 D.6135 ] [347])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:52 512 {*ashldi3_1}
     (nil))
(insn 400 399 401 2 (set (reg/f:DI 0 ax [522])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:52 89 {*movdi_internal}
     (nil))
(insn 401 400 402 2 (parallel [
            (set (reg/f:DI 0 ax [orig:349 D.6136 ] [349])
                (plus:DI (reg/f:DI 0 ax [522])
                    (reg:DI 1 dx [orig:348 D.6135 ] [348])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:52 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:348 D.6135 ] [348]))
        (nil)))
(insn 402 401 403 2 (set (reg/f:DI 0 ax [orig:350 D.6137 ] [350])
        (mem/f:DI (reg/f:DI 0 ax [orig:349 D.6136 ] [349]) [0 *_292+0 S8 A64])) h_swap.cpp:52 89 {*movdi_internal}
     (nil))
(insn 403 402 404 2 (parallel [
            (set (reg/f:DI 1 dx [orig:351 D.6137 ] [351])
                (plus:DI (reg/f:DI 0 ax [orig:350 D.6137 ] [350])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:52 218 {*adddi_1}
     (nil))
(insn 404 403 405 2 (set (reg:SI 0 ax [523])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:52 90 {*movsi_internal}
     (nil))
(insn 405 404 406 2 (set (reg:DI 0 ax [orig:352 D.6135 ] [352])
        (sign_extend:DI (reg:SI 0 ax [523]))) h_swap.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 406 405 407 2 (parallel [
            (set (reg:DI 2 cx [orig:353 D.6135 ] [353])
                (ashift:DI (reg:DI 0 ax [orig:352 D.6135 ] [352])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:52 512 {*ashldi3_1}
     (nil))
(insn 407 406 408 2 (set (reg/f:DI 0 ax [524])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:52 89 {*movdi_internal}
     (nil))
(insn 408 407 409 2 (parallel [
            (set (reg/f:DI 0 ax [orig:354 D.6136 ] [354])
                (plus:DI (reg/f:DI 0 ax [524])
                    (reg:DI 2 cx [orig:353 D.6135 ] [353])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:52 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:353 D.6135 ] [353]))
        (nil)))
(insn 409 408 410 2 (set (reg/f:DI 0 ax [orig:355 D.6137 ] [355])
        (mem/f:DI (reg/f:DI 0 ax [orig:354 D.6136 ] [354]) [0 *_297+0 S8 A64])) h_swap.cpp:52 89 {*movdi_internal}
     (nil))
(insn 410 409 411 2 (set (reg:QI 0 ax [orig:356 D.6138 ] [356])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:355 D.6137 ] [355])
                (const_int 27 [0x1b])) [0 _298->status.character+1 S1 A8])) h_swap.cpp:52 93 {*movqi_internal}
     (nil))
(insn 411 410 412 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:351 D.6137 ] [351])
                (const_int 26 [0x1a])) [0 _294->status.character+0 S1 A16])
        (reg:QI 0 ax [orig:356 D.6138 ] [356])) h_swap.cpp:52 93 {*movqi_internal}
     (nil))
(insn 412 411 413 2 (set (reg:SI 0 ax [525])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:53 90 {*movsi_internal}
     (nil))
(insn 413 412 414 2 (set (reg:DI 0 ax [orig:357 D.6135 ] [357])
        (sign_extend:DI (reg:SI 0 ax [525]))) h_swap.cpp:53 142 {*extendsidi2_rex64}
     (nil))
(insn 414 413 415 2 (parallel [
            (set (reg:DI 1 dx [orig:358 D.6135 ] [358])
                (ashift:DI (reg:DI 0 ax [orig:357 D.6135 ] [357])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:53 512 {*ashldi3_1}
     (nil))
(insn 415 414 416 2 (set (reg/f:DI 0 ax [526])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:53 89 {*movdi_internal}
     (nil))
(insn 416 415 417 2 (parallel [
            (set (reg/f:DI 0 ax [orig:359 D.6136 ] [359])
                (plus:DI (reg/f:DI 0 ax [526])
                    (reg:DI 1 dx [orig:358 D.6135 ] [358])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:53 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:358 D.6135 ] [358]))
        (nil)))
(insn 417 416 418 2 (set (reg/f:DI 0 ax [orig:360 D.6137 ] [360])
        (mem/f:DI (reg/f:DI 0 ax [orig:359 D.6136 ] [359]) [0 *_303+0 S8 A64])) h_swap.cpp:53 89 {*movdi_internal}
     (nil))
(insn 418 417 419 2 (parallel [
            (set (reg/f:DI 1 dx [orig:361 D.6137 ] [361])
                (plus:DI (reg/f:DI 0 ax [orig:360 D.6137 ] [360])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:53 218 {*adddi_1}
     (nil))
(insn 419 418 420 2 (set (reg:SI 0 ax [527])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:53 90 {*movsi_internal}
     (nil))
(insn 420 419 421 2 (set (reg:DI 0 ax [orig:362 D.6135 ] [362])
        (sign_extend:DI (reg:SI 0 ax [527]))) h_swap.cpp:53 142 {*extendsidi2_rex64}
     (nil))
(insn 421 420 422 2 (parallel [
            (set (reg:DI 2 cx [orig:363 D.6135 ] [363])
                (ashift:DI (reg:DI 0 ax [orig:362 D.6135 ] [362])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:53 512 {*ashldi3_1}
     (nil))
(insn 422 421 423 2 (set (reg/f:DI 0 ax [528])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:53 89 {*movdi_internal}
     (nil))
(insn 423 422 424 2 (parallel [
            (set (reg/f:DI 0 ax [orig:364 D.6136 ] [364])
                (plus:DI (reg/f:DI 0 ax [528])
                    (reg:DI 2 cx [orig:363 D.6135 ] [363])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:53 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:363 D.6135 ] [363]))
        (nil)))
(insn 424 423 425 2 (set (reg/f:DI 0 ax [orig:365 D.6137 ] [365])
        (mem/f:DI (reg/f:DI 0 ax [orig:364 D.6136 ] [364]) [0 *_308+0 S8 A64])) h_swap.cpp:53 89 {*movdi_internal}
     (nil))
(insn 425 424 426 2 (set (reg:QI 0 ax [orig:366 D.6138 ] [366])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:365 D.6137 ] [365])
                (const_int 26 [0x1a])) [0 _309->status.character+0 S1 A16])) h_swap.cpp:53 93 {*movqi_internal}
     (nil))
(insn 426 425 427 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:361 D.6137 ] [361])
                (const_int 27 [0x1b])) [0 _305->status.character+1 S1 A8])
        (reg:QI 0 ax [orig:366 D.6138 ] [366])) h_swap.cpp:53 93 {*movqi_internal}
     (nil))
(insn 427 426 428 2 (set (reg:SI 0 ax [529])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:55 90 {*movsi_internal}
     (nil))
(insn 428 427 429 2 (set (reg:DI 0 ax [orig:367 D.6135 ] [367])
        (sign_extend:DI (reg:SI 0 ax [529]))) h_swap.cpp:55 142 {*extendsidi2_rex64}
     (nil))
(insn 429 428 430 2 (parallel [
            (set (reg:DI 1 dx [orig:368 D.6135 ] [368])
                (ashift:DI (reg:DI 0 ax [orig:367 D.6135 ] [367])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:55 512 {*ashldi3_1}
     (nil))
(insn 430 429 431 2 (set (reg/f:DI 0 ax [530])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:55 89 {*movdi_internal}
     (nil))
(insn 431 430 432 2 (parallel [
            (set (reg/f:DI 0 ax [orig:369 D.6136 ] [369])
                (plus:DI (reg/f:DI 0 ax [530])
                    (reg:DI 1 dx [orig:368 D.6135 ] [368])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:55 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:368 D.6135 ] [368]))
        (nil)))
(insn 432 431 433 2 (set (reg/f:DI 0 ax [orig:370 D.6137 ] [370])
        (mem/f:DI (reg/f:DI 0 ax [orig:369 D.6136 ] [369]) [0 *_314+0 S8 A64])) h_swap.cpp:55 89 {*movdi_internal}
     (nil))
(insn 433 432 434 2 (parallel [
            (set (reg/f:DI 1 dx [orig:371 D.6137 ] [371])
                (plus:DI (reg/f:DI 0 ax [orig:370 D.6137 ] [370])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:55 218 {*adddi_1}
     (nil))
(insn 434 433 435 2 (set (reg:SI 0 ax [531])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:55 90 {*movsi_internal}
     (nil))
(insn 435 434 436 2 (set (reg:DI 0 ax [orig:372 D.6135 ] [372])
        (sign_extend:DI (reg:SI 0 ax [531]))) h_swap.cpp:55 142 {*extendsidi2_rex64}
     (nil))
(insn 436 435 437 2 (parallel [
            (set (reg:DI 2 cx [orig:373 D.6135 ] [373])
                (ashift:DI (reg:DI 0 ax [orig:372 D.6135 ] [372])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:55 512 {*ashldi3_1}
     (nil))
(insn 437 436 438 2 (set (reg/f:DI 0 ax [532])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:55 89 {*movdi_internal}
     (nil))
(insn 438 437 439 2 (parallel [
            (set (reg/f:DI 0 ax [orig:374 D.6136 ] [374])
                (plus:DI (reg/f:DI 0 ax [532])
                    (reg:DI 2 cx [orig:373 D.6135 ] [373])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:55 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:373 D.6135 ] [373]))
        (nil)))
(insn 439 438 440 2 (set (reg/f:DI 0 ax [orig:375 D.6137 ] [375])
        (mem/f:DI (reg/f:DI 0 ax [orig:374 D.6136 ] [374]) [0 *_319+0 S8 A64])) h_swap.cpp:55 89 {*movdi_internal}
     (nil))
(insn 440 439 441 2 (set (reg:QI 0 ax [orig:376 D.6138 ] [376])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:375 D.6137 ] [375])
                (const_int 31 [0x1f])) [0 _320->spare1.character+3 S1 A8])) h_swap.cpp:55 93 {*movqi_internal}
     (nil))
(insn 441 440 442 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:371 D.6137 ] [371])
                (const_int 28 [0x1c])) [0 _316->spare1.character+0 S1 A32])
        (reg:QI 0 ax [orig:376 D.6138 ] [376])) h_swap.cpp:55 93 {*movqi_internal}
     (nil))
(insn 442 441 443 2 (set (reg:SI 0 ax [533])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:56 90 {*movsi_internal}
     (nil))
(insn 443 442 444 2 (set (reg:DI 0 ax [orig:377 D.6135 ] [377])
        (sign_extend:DI (reg:SI 0 ax [533]))) h_swap.cpp:56 142 {*extendsidi2_rex64}
     (nil))
(insn 444 443 445 2 (parallel [
            (set (reg:DI 1 dx [orig:378 D.6135 ] [378])
                (ashift:DI (reg:DI 0 ax [orig:377 D.6135 ] [377])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:56 512 {*ashldi3_1}
     (nil))
(insn 445 444 446 2 (set (reg/f:DI 0 ax [534])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:56 89 {*movdi_internal}
     (nil))
(insn 446 445 447 2 (parallel [
            (set (reg/f:DI 0 ax [orig:379 D.6136 ] [379])
                (plus:DI (reg/f:DI 0 ax [534])
                    (reg:DI 1 dx [orig:378 D.6135 ] [378])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:56 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:378 D.6135 ] [378]))
        (nil)))
(insn 447 446 448 2 (set (reg/f:DI 0 ax [orig:380 D.6137 ] [380])
        (mem/f:DI (reg/f:DI 0 ax [orig:379 D.6136 ] [379]) [0 *_325+0 S8 A64])) h_swap.cpp:56 89 {*movdi_internal}
     (nil))
(insn 448 447 449 2 (parallel [
            (set (reg/f:DI 1 dx [orig:381 D.6137 ] [381])
                (plus:DI (reg/f:DI 0 ax [orig:380 D.6137 ] [380])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:56 218 {*adddi_1}
     (nil))
(insn 449 448 450 2 (set (reg:SI 0 ax [535])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:56 90 {*movsi_internal}
     (nil))
(insn 450 449 451 2 (set (reg:DI 0 ax [orig:382 D.6135 ] [382])
        (sign_extend:DI (reg:SI 0 ax [535]))) h_swap.cpp:56 142 {*extendsidi2_rex64}
     (nil))
(insn 451 450 452 2 (parallel [
            (set (reg:DI 2 cx [orig:383 D.6135 ] [383])
                (ashift:DI (reg:DI 0 ax [orig:382 D.6135 ] [382])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:56 512 {*ashldi3_1}
     (nil))
(insn 452 451 453 2 (set (reg/f:DI 0 ax [536])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:56 89 {*movdi_internal}
     (nil))
(insn 453 452 454 2 (parallel [
            (set (reg/f:DI 0 ax [orig:384 D.6136 ] [384])
                (plus:DI (reg/f:DI 0 ax [536])
                    (reg:DI 2 cx [orig:383 D.6135 ] [383])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:56 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:383 D.6135 ] [383]))
        (nil)))
(insn 454 453 455 2 (set (reg/f:DI 0 ax [orig:385 D.6137 ] [385])
        (mem/f:DI (reg/f:DI 0 ax [orig:384 D.6136 ] [384]) [0 *_330+0 S8 A64])) h_swap.cpp:56 89 {*movdi_internal}
     (nil))
(insn 455 454 456 2 (set (reg:QI 0 ax [orig:386 D.6138 ] [386])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:385 D.6137 ] [385])
                (const_int 30 [0x1e])) [0 _331->spare1.character+2 S1 A16])) h_swap.cpp:56 93 {*movqi_internal}
     (nil))
(insn 456 455 457 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:381 D.6137 ] [381])
                (const_int 29 [0x1d])) [0 _327->spare1.character+1 S1 A8])
        (reg:QI 0 ax [orig:386 D.6138 ] [386])) h_swap.cpp:56 93 {*movqi_internal}
     (nil))
(insn 457 456 458 2 (set (reg:SI 0 ax [537])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:57 90 {*movsi_internal}
     (nil))
(insn 458 457 459 2 (set (reg:DI 0 ax [orig:387 D.6135 ] [387])
        (sign_extend:DI (reg:SI 0 ax [537]))) h_swap.cpp:57 142 {*extendsidi2_rex64}
     (nil))
(insn 459 458 460 2 (parallel [
            (set (reg:DI 1 dx [orig:388 D.6135 ] [388])
                (ashift:DI (reg:DI 0 ax [orig:387 D.6135 ] [387])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:57 512 {*ashldi3_1}
     (nil))
(insn 460 459 461 2 (set (reg/f:DI 0 ax [538])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:57 89 {*movdi_internal}
     (nil))
(insn 461 460 462 2 (parallel [
            (set (reg/f:DI 0 ax [orig:389 D.6136 ] [389])
                (plus:DI (reg/f:DI 0 ax [538])
                    (reg:DI 1 dx [orig:388 D.6135 ] [388])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:57 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:388 D.6135 ] [388]))
        (nil)))
(insn 462 461 463 2 (set (reg/f:DI 0 ax [orig:390 D.6137 ] [390])
        (mem/f:DI (reg/f:DI 0 ax [orig:389 D.6136 ] [389]) [0 *_336+0 S8 A64])) h_swap.cpp:57 89 {*movdi_internal}
     (nil))
(insn 463 462 464 2 (parallel [
            (set (reg/f:DI 1 dx [orig:391 D.6137 ] [391])
                (plus:DI (reg/f:DI 0 ax [orig:390 D.6137 ] [390])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:57 218 {*adddi_1}
     (nil))
(insn 464 463 465 2 (set (reg:SI 0 ax [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:57 90 {*movsi_internal}
     (nil))
(insn 465 464 466 2 (set (reg:DI 0 ax [orig:392 D.6135 ] [392])
        (sign_extend:DI (reg:SI 0 ax [539]))) h_swap.cpp:57 142 {*extendsidi2_rex64}
     (nil))
(insn 466 465 467 2 (parallel [
            (set (reg:DI 2 cx [orig:393 D.6135 ] [393])
                (ashift:DI (reg:DI 0 ax [orig:392 D.6135 ] [392])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:57 512 {*ashldi3_1}
     (nil))
(insn 467 466 468 2 (set (reg/f:DI 0 ax [540])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:57 89 {*movdi_internal}
     (nil))
(insn 468 467 469 2 (parallel [
            (set (reg/f:DI 0 ax [orig:394 D.6136 ] [394])
                (plus:DI (reg/f:DI 0 ax [540])
                    (reg:DI 2 cx [orig:393 D.6135 ] [393])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:57 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:393 D.6135 ] [393]))
        (nil)))
(insn 469 468 470 2 (set (reg/f:DI 0 ax [orig:395 D.6137 ] [395])
        (mem/f:DI (reg/f:DI 0 ax [orig:394 D.6136 ] [394]) [0 *_341+0 S8 A64])) h_swap.cpp:57 89 {*movdi_internal}
     (nil))
(insn 470 469 471 2 (set (reg:QI 0 ax [orig:396 D.6138 ] [396])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:395 D.6137 ] [395])
                (const_int 29 [0x1d])) [0 _342->spare1.character+1 S1 A8])) h_swap.cpp:57 93 {*movqi_internal}
     (nil))
(insn 471 470 472 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:391 D.6137 ] [391])
                (const_int 30 [0x1e])) [0 _338->spare1.character+2 S1 A16])
        (reg:QI 0 ax [orig:396 D.6138 ] [396])) h_swap.cpp:57 93 {*movqi_internal}
     (nil))
(insn 472 471 473 2 (set (reg:SI 0 ax [541])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:58 90 {*movsi_internal}
     (nil))
(insn 473 472 474 2 (set (reg:DI 0 ax [orig:397 D.6135 ] [397])
        (sign_extend:DI (reg:SI 0 ax [541]))) h_swap.cpp:58 142 {*extendsidi2_rex64}
     (nil))
(insn 474 473 475 2 (parallel [
            (set (reg:DI 1 dx [orig:398 D.6135 ] [398])
                (ashift:DI (reg:DI 0 ax [orig:397 D.6135 ] [397])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:58 512 {*ashldi3_1}
     (nil))
(insn 475 474 476 2 (set (reg/f:DI 0 ax [542])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:58 89 {*movdi_internal}
     (nil))
(insn 476 475 477 2 (parallel [
            (set (reg/f:DI 0 ax [orig:399 D.6136 ] [399])
                (plus:DI (reg/f:DI 0 ax [542])
                    (reg:DI 1 dx [orig:398 D.6135 ] [398])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:58 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:398 D.6135 ] [398]))
        (nil)))
(insn 477 476 478 2 (set (reg/f:DI 0 ax [orig:400 D.6137 ] [400])
        (mem/f:DI (reg/f:DI 0 ax [orig:399 D.6136 ] [399]) [0 *_347+0 S8 A64])) h_swap.cpp:58 89 {*movdi_internal}
     (nil))
(insn 478 477 479 2 (parallel [
            (set (reg/f:DI 1 dx [orig:401 D.6137 ] [401])
                (plus:DI (reg/f:DI 0 ax [orig:400 D.6137 ] [400])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:58 218 {*adddi_1}
     (nil))
(insn 479 478 480 2 (set (reg:SI 0 ax [543])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:58 90 {*movsi_internal}
     (nil))
(insn 480 479 481 2 (set (reg:DI 0 ax [orig:402 D.6135 ] [402])
        (sign_extend:DI (reg:SI 0 ax [543]))) h_swap.cpp:58 142 {*extendsidi2_rex64}
     (nil))
(insn 481 480 482 2 (parallel [
            (set (reg:DI 2 cx [orig:403 D.6135 ] [403])
                (ashift:DI (reg:DI 0 ax [orig:402 D.6135 ] [402])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:58 512 {*ashldi3_1}
     (nil))
(insn 482 481 483 2 (set (reg/f:DI 0 ax [544])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:58 89 {*movdi_internal}
     (nil))
(insn 483 482 484 2 (parallel [
            (set (reg/f:DI 0 ax [orig:404 D.6136 ] [404])
                (plus:DI (reg/f:DI 0 ax [544])
                    (reg:DI 2 cx [orig:403 D.6135 ] [403])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:58 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:403 D.6135 ] [403]))
        (nil)))
(insn 484 483 485 2 (set (reg/f:DI 0 ax [orig:405 D.6137 ] [405])
        (mem/f:DI (reg/f:DI 0 ax [orig:404 D.6136 ] [404]) [0 *_352+0 S8 A64])) h_swap.cpp:58 89 {*movdi_internal}
     (nil))
(insn 485 484 486 2 (set (reg:QI 0 ax [orig:406 D.6138 ] [406])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:405 D.6137 ] [405])
                (const_int 28 [0x1c])) [0 _353->spare1.character+0 S1 A32])) h_swap.cpp:58 93 {*movqi_internal}
     (nil))
(insn 486 485 487 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:401 D.6137 ] [401])
                (const_int 31 [0x1f])) [0 _349->spare1.character+3 S1 A8])
        (reg:QI 0 ax [orig:406 D.6138 ] [406])) h_swap.cpp:58 93 {*movqi_internal}
     (nil))
(insn 487 486 488 2 (set (reg:SI 0 ax [545])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:60 90 {*movsi_internal}
     (nil))
(insn 488 487 489 2 (set (reg:DI 0 ax [orig:407 D.6135 ] [407])
        (sign_extend:DI (reg:SI 0 ax [545]))) h_swap.cpp:60 142 {*extendsidi2_rex64}
     (nil))
(insn 489 488 490 2 (parallel [
            (set (reg:DI 1 dx [orig:408 D.6135 ] [408])
                (ashift:DI (reg:DI 0 ax [orig:407 D.6135 ] [407])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:60 512 {*ashldi3_1}
     (nil))
(insn 490 489 491 2 (set (reg/f:DI 0 ax [546])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 491 490 492 2 (parallel [
            (set (reg/f:DI 0 ax [orig:409 D.6136 ] [409])
                (plus:DI (reg/f:DI 0 ax [546])
                    (reg:DI 1 dx [orig:408 D.6135 ] [408])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:60 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:408 D.6135 ] [408]))
        (nil)))
(insn 492 491 493 2 (set (reg/f:DI 0 ax [orig:410 D.6137 ] [410])
        (mem/f:DI (reg/f:DI 0 ax [orig:409 D.6136 ] [409]) [0 *_358+0 S8 A64])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 493 492 494 2 (set (reg:SI 1 dx [547])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:60 90 {*movsi_internal}
     (nil))
(insn 494 493 495 2 (set (reg:DI 1 dx [orig:411 D.6135 ] [411])
        (sign_extend:DI (reg:SI 1 dx [547]))) h_swap.cpp:60 142 {*extendsidi2_rex64}
     (nil))
(insn 495 494 496 2 (parallel [
            (set (reg:DI 2 cx [orig:412 D.6135 ] [412])
                (ashift:DI (reg:DI 1 dx [orig:411 D.6135 ] [411])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:60 512 {*ashldi3_1}
     (nil))
(insn 496 495 497 2 (set (reg/f:DI 1 dx [548])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 497 496 498 2 (parallel [
            (set (reg/f:DI 1 dx [orig:413 D.6136 ] [413])
                (plus:DI (reg/f:DI 1 dx [548])
                    (reg:DI 2 cx [orig:412 D.6135 ] [412])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:60 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:412 D.6135 ] [412]))
        (nil)))
(insn 498 497 499 2 (set (reg/f:DI 1 dx [orig:414 D.6137 ] [414])
        (mem/f:DI (reg/f:DI 1 dx [orig:413 D.6136 ] [413]) [0 *_362+0 S8 A64])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 499 498 500 2 (set (reg:DI 2 cx [549])
        (mem:DI (plus:DI (reg/f:DI 1 dx [orig:414 D.6137 ] [414])
                (const_int 32 [0x20])) [0 MEM[(const struct Data_file_header &)_363 + 32]+0 S8 A32])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 500 499 501 2 (set (mem:DI (reg/f:DI 0 ax [orig:410 D.6137 ] [410]) [0 *_359+0 S8 A32])
        (reg:DI 2 cx [549])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 501 500 502 2 (set (reg:DI 2 cx [550])
        (mem:DI (plus:DI (reg/f:DI 1 dx [orig:414 D.6137 ] [414])
                (const_int 40 [0x28])) [0 MEM[(const struct Data_file_header &)_363 + 32]+8 S8 A32])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 502 501 503 2 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:410 D.6137 ] [410])
                (const_int 8 [0x8])) [0 *_359+8 S8 A32])
        (reg:DI 2 cx [550])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 503 502 504 2 (set (reg:DI 2 cx [551])
        (mem:DI (plus:DI (reg/f:DI 1 dx [orig:414 D.6137 ] [414])
                (const_int 48 [0x30])) [0 MEM[(const struct Data_file_header &)_363 + 32]+16 S8 A32])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 504 503 505 2 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:410 D.6137 ] [410])
                (const_int 16 [0x10])) [0 *_359+16 S8 A32])
        (reg:DI 2 cx [551])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 505 504 506 2 (set (reg:DI 1 dx [552])
        (mem:DI (plus:DI (reg/f:DI 1 dx [orig:414 D.6137 ] [414])
                (const_int 56 [0x38])) [0 MEM[(const struct Data_file_header &)_363 + 32]+24 S8 A32])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 506 505 507 2 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:410 D.6137 ] [410])
                (const_int 24 [0x18])) [0 *_359+24 S8 A32])
        (reg:DI 1 dx [552])) h_swap.cpp:60 89 {*movdi_internal}
     (nil))
(insn 507 506 510 2 (set (reg:SI 0 ax [orig:415 D.6139 ] [415])
        (const_int 1 [0x1])) h_swap.cpp:62 90 {*movsi_internal}
     (nil))
(insn 510 507 514 2 (set (reg:SI 0 ax [orig:416 <retval> ] [416])
        (reg:SI 0 ax [orig:415 D.6139 ] [415])) h_swap.cpp:62 90 {*movsi_internal}
     (nil))
(insn 514 510 515 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:416 <retval> ] [416])) h_swap.cpp:63 90 {*movsi_internal}
     (nil))
(insn 515 514 517 2 (use (reg/i:SI 0 ax)) h_swap.cpp:63 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 517 515 0 NOTE_INSN_DELETED)

;; Function int block_header_swap(Data_block_header**, int) (_Z17block_header_swapPP17Data_block_headeri, funcdef_no=3, decl_uid=5497, cgraph_uid=3, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 11
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 28:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 36:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 43:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 51:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 56
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 58:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 66:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 73:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 80:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 81:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 86
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 88:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 96:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 108
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 110:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 111:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 123
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 125:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 126:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 138
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 140:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 141:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 146
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 155:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 156:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 161
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 163:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 168
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 170:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 171:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 176
	 Choosing alt 0 in insn 176:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 178:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 183
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 185:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 186:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 191
	 Choosing alt 0 in insn 191:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 193:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 200:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 201:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 204:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 205:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 206
	 Choosing alt 0 in insn 206:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 207:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 208:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 211:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 213
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 215:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 216:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 221
	 Choosing alt 0 in insn 221:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 223:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 226:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 228
	 Choosing alt 0 in insn 228:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 230:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 231:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 235:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 236
	 Choosing alt 0 in insn 236:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 237:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 238:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 241:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 243
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 245:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 246:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 251
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 252:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 253:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 258
	 Choosing alt 0 in insn 258:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 260:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 261:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 266
	 Choosing alt 0 in insn 266:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 268:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 271:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 272:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 273
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 275:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 276:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 281
	 Choosing alt 0 in insn 281:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 282:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 283:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 288
	 Choosing alt 0 in insn 288:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 289:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 290:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 291:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 294:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 295:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 296
	 Choosing alt 0 in insn 296:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 298:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 301:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 303
	 Choosing alt 0 in insn 303:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 304:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 305:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 306:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 309:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 311
	 Choosing alt 0 in insn 311:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 312:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 313:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 316:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 318
	 Choosing alt 0 in insn 318:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 319:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 320:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 321:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 324:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 325:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 326
	 Choosing alt 0 in insn 326:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 327:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 328:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 331:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 332:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 333
	 Choosing alt 0 in insn 333:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 334:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 335:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 336:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 339:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 340:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 341
	 Choosing alt 0 in insn 341:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 342:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 343:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 346:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 348
	 Choosing alt 0 in insn 348:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 350:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 351:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 354:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 355:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 356
	 Choosing alt 0 in insn 356:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 357:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 358:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 361:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 363
	 Choosing alt 0 in insn 363:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 364:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 365:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 366:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 369:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 370:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 371
	 Choosing alt 0 in insn 371:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 372:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 373:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 376:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 377:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 378
	 Choosing alt 0 in insn 378:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 379:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 380:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 381:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 383:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 384:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 385:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 386
	 Choosing alt 0 in insn 386:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 387:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 388:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 391:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 392:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 393
	 Choosing alt 0 in insn 393:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 394:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 395:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 396:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 399:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 400:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 401
	 Choosing alt 0 in insn 401:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 402:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 403:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 406:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 407:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 408
	 Choosing alt 0 in insn 408:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 409:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 410:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 411:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 414:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 416
	 Choosing alt 0 in insn 416:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 417:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 418:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 421:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 422:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 423
	 Choosing alt 0 in insn 423:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 424:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 425:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 426:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 429:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 430:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 431
	 Choosing alt 0 in insn 431:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 432:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 434:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 435:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 436:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 437
	 Choosing alt 0 in insn 437:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 438:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 439:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 440:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 441:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 442:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 443:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 444:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 446:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 455: point = 0
   Insn 454: point = 0
   Insn 450: point = 1
   Insn 447: point = 3
   Insn 446: point = 4
   Insn 445: point = 5
   Insn 444: point = 7
   Insn 443: point = 8
   Insn 442: point = 9
   Insn 441: point = 10
   Insn 440: point = 11
   Insn 439: point = 12
   Insn 438: point = 13
   Insn 437: point = 15
   Insn 436: point = 17
   Insn 435: point = 18
   Insn 434: point = 20
   Insn 433: point = 22
   Insn 432: point = 23
   Insn 431: point = 25
   Insn 430: point = 27
   Insn 429: point = 28
   Insn 428: point = 30
   Insn 427: point = 32
   Insn 426: point = 33
   Insn 425: point = 34
   Insn 424: point = 36
   Insn 423: point = 38
   Insn 422: point = 40
   Insn 421: point = 41
   Insn 420: point = 43
   Insn 419: point = 45
   Insn 418: point = 46
   Insn 417: point = 48
   Insn 416: point = 50
   Insn 415: point = 52
   Insn 414: point = 53
   Insn 413: point = 55
   Insn 412: point = 57
   Insn 411: point = 58
   Insn 410: point = 59
   Insn 409: point = 61
   Insn 408: point = 63
   Insn 407: point = 65
   Insn 406: point = 66
   Insn 405: point = 68
   Insn 404: point = 70
   Insn 403: point = 71
   Insn 402: point = 73
   Insn 401: point = 75
   Insn 400: point = 77
   Insn 399: point = 78
   Insn 398: point = 80
   Insn 397: point = 82
   Insn 396: point = 83
   Insn 395: point = 84
   Insn 394: point = 86
   Insn 393: point = 88
   Insn 392: point = 90
   Insn 391: point = 91
   Insn 390: point = 93
   Insn 389: point = 95
   Insn 388: point = 96
   Insn 387: point = 98
   Insn 386: point = 100
   Insn 385: point = 102
   Insn 384: point = 103
   Insn 383: point = 105
   Insn 382: point = 107
   Insn 381: point = 108
   Insn 380: point = 109
   Insn 379: point = 111
   Insn 378: point = 113
   Insn 377: point = 115
   Insn 376: point = 116
   Insn 375: point = 118
   Insn 374: point = 120
   Insn 373: point = 121
   Insn 372: point = 123
   Insn 371: point = 125
   Insn 370: point = 127
   Insn 369: point = 128
   Insn 368: point = 130
   Insn 367: point = 132
   Insn 366: point = 133
   Insn 365: point = 134
   Insn 364: point = 136
   Insn 363: point = 138
   Insn 362: point = 140
   Insn 361: point = 141
   Insn 360: point = 143
   Insn 359: point = 145
   Insn 358: point = 146
   Insn 357: point = 148
   Insn 356: point = 150
   Insn 355: point = 152
   Insn 354: point = 153
   Insn 353: point = 155
   Insn 352: point = 157
   Insn 351: point = 158
   Insn 350: point = 159
   Insn 349: point = 161
   Insn 348: point = 163
   Insn 347: point = 165
   Insn 346: point = 166
   Insn 345: point = 168
   Insn 344: point = 170
   Insn 343: point = 171
   Insn 342: point = 173
   Insn 341: point = 175
   Insn 340: point = 177
   Insn 339: point = 178
   Insn 338: point = 180
   Insn 337: point = 182
   Insn 336: point = 183
   Insn 335: point = 184
   Insn 334: point = 186
   Insn 333: point = 188
   Insn 332: point = 190
   Insn 331: point = 191
   Insn 330: point = 193
   Insn 329: point = 195
   Insn 328: point = 196
   Insn 327: point = 198
   Insn 326: point = 200
   Insn 325: point = 202
   Insn 324: point = 203
   Insn 323: point = 205
   Insn 322: point = 207
   Insn 321: point = 208
   Insn 320: point = 209
   Insn 319: point = 211
   Insn 318: point = 213
   Insn 317: point = 215
   Insn 316: point = 216
   Insn 315: point = 218
   Insn 314: point = 220
   Insn 313: point = 221
   Insn 312: point = 223
   Insn 311: point = 225
   Insn 310: point = 227
   Insn 309: point = 228
   Insn 308: point = 230
   Insn 307: point = 232
   Insn 306: point = 233
   Insn 305: point = 234
   Insn 304: point = 236
   Insn 303: point = 238
   Insn 302: point = 240
   Insn 301: point = 241
   Insn 300: point = 243
   Insn 299: point = 245
   Insn 298: point = 246
   Insn 297: point = 248
   Insn 296: point = 250
   Insn 295: point = 252
   Insn 294: point = 253
   Insn 293: point = 255
   Insn 292: point = 257
   Insn 291: point = 258
   Insn 290: point = 259
   Insn 289: point = 261
   Insn 288: point = 263
   Insn 287: point = 265
   Insn 286: point = 266
   Insn 285: point = 268
   Insn 284: point = 270
   Insn 283: point = 271
   Insn 282: point = 273
   Insn 281: point = 275
   Insn 280: point = 277
   Insn 279: point = 278
   Insn 278: point = 280
   Insn 277: point = 282
   Insn 276: point = 283
   Insn 275: point = 284
   Insn 274: point = 286
   Insn 273: point = 288
   Insn 272: point = 290
   Insn 271: point = 291
   Insn 270: point = 293
   Insn 269: point = 295
   Insn 268: point = 296
   Insn 267: point = 298
   Insn 266: point = 300
   Insn 265: point = 302
   Insn 264: point = 303
   Insn 263: point = 305
   Insn 262: point = 307
   Insn 261: point = 308
   Insn 260: point = 309
   Insn 259: point = 311
   Insn 258: point = 313
   Insn 257: point = 315
   Insn 256: point = 316
   Insn 255: point = 318
   Insn 254: point = 320
   Insn 253: point = 321
   Insn 252: point = 323
   Insn 251: point = 325
   Insn 250: point = 327
   Insn 249: point = 328
   Insn 248: point = 330
   Insn 247: point = 332
   Insn 246: point = 333
   Insn 245: point = 334
   Insn 244: point = 336
   Insn 243: point = 338
   Insn 242: point = 340
   Insn 241: point = 341
   Insn 240: point = 343
   Insn 239: point = 345
   Insn 238: point = 346
   Insn 237: point = 348
   Insn 236: point = 350
   Insn 235: point = 352
   Insn 234: point = 353
   Insn 233: point = 355
   Insn 232: point = 357
   Insn 231: point = 358
   Insn 230: point = 359
   Insn 229: point = 361
   Insn 228: point = 363
   Insn 227: point = 365
   Insn 226: point = 366
   Insn 225: point = 368
   Insn 224: point = 370
   Insn 223: point = 371
   Insn 222: point = 373
   Insn 221: point = 375
   Insn 220: point = 377
   Insn 219: point = 378
   Insn 218: point = 380
   Insn 217: point = 382
   Insn 216: point = 383
   Insn 215: point = 384
   Insn 214: point = 386
   Insn 213: point = 388
   Insn 212: point = 390
   Insn 211: point = 391
   Insn 210: point = 393
   Insn 209: point = 395
   Insn 208: point = 396
   Insn 207: point = 398
   Insn 206: point = 400
   Insn 205: point = 402
   Insn 204: point = 403
   Insn 203: point = 405
   Insn 202: point = 407
   Insn 201: point = 408
   Insn 200: point = 409
   Insn 199: point = 411
   Insn 198: point = 413
   Insn 197: point = 415
   Insn 196: point = 416
   Insn 195: point = 418
   Insn 194: point = 420
   Insn 193: point = 421
   Insn 192: point = 423
   Insn 191: point = 425
   Insn 190: point = 427
   Insn 189: point = 428
   Insn 188: point = 430
   Insn 187: point = 432
   Insn 186: point = 433
   Insn 185: point = 434
   Insn 184: point = 436
   Insn 183: point = 438
   Insn 182: point = 440
   Insn 181: point = 441
   Insn 180: point = 443
   Insn 179: point = 445
   Insn 178: point = 446
   Insn 177: point = 448
   Insn 176: point = 450
   Insn 175: point = 452
   Insn 174: point = 453
   Insn 173: point = 455
   Insn 172: point = 457
   Insn 171: point = 458
   Insn 170: point = 459
   Insn 169: point = 461
   Insn 168: point = 463
   Insn 167: point = 465
   Insn 166: point = 466
   Insn 165: point = 468
   Insn 164: point = 470
   Insn 163: point = 471
   Insn 162: point = 473
   Insn 161: point = 475
   Insn 160: point = 477
   Insn 159: point = 478
   Insn 158: point = 480
   Insn 157: point = 482
   Insn 156: point = 483
   Insn 155: point = 484
   Insn 154: point = 486
   Insn 153: point = 488
   Insn 152: point = 490
   Insn 151: point = 491
   Insn 150: point = 493
   Insn 149: point = 495
   Insn 148: point = 496
   Insn 147: point = 498
   Insn 146: point = 500
   Insn 145: point = 502
   Insn 144: point = 503
   Insn 143: point = 505
   Insn 142: point = 507
   Insn 141: point = 508
   Insn 140: point = 509
   Insn 139: point = 511
   Insn 138: point = 513
   Insn 137: point = 515
   Insn 136: point = 516
   Insn 135: point = 518
   Insn 134: point = 520
   Insn 133: point = 521
   Insn 132: point = 523
   Insn 131: point = 525
   Insn 130: point = 527
   Insn 129: point = 528
   Insn 128: point = 530
   Insn 127: point = 532
   Insn 126: point = 533
   Insn 125: point = 534
   Insn 124: point = 536
   Insn 123: point = 538
   Insn 122: point = 540
   Insn 121: point = 541
   Insn 120: point = 543
   Insn 119: point = 545
   Insn 118: point = 546
   Insn 117: point = 548
   Insn 116: point = 550
   Insn 115: point = 552
   Insn 114: point = 553
   Insn 113: point = 555
   Insn 112: point = 557
   Insn 111: point = 558
   Insn 110: point = 559
   Insn 109: point = 561
   Insn 108: point = 563
   Insn 107: point = 565
   Insn 106: point = 566
   Insn 105: point = 568
   Insn 104: point = 570
   Insn 103: point = 571
   Insn 102: point = 573
   Insn 101: point = 575
   Insn 100: point = 577
   Insn 99: point = 578
   Insn 98: point = 580
   Insn 97: point = 582
   Insn 96: point = 583
   Insn 95: point = 584
   Insn 94: point = 586
   Insn 93: point = 588
   Insn 92: point = 590
   Insn 91: point = 591
   Insn 90: point = 593
   Insn 89: point = 595
   Insn 88: point = 596
   Insn 87: point = 598
   Insn 86: point = 600
   Insn 85: point = 602
   Insn 84: point = 603
   Insn 83: point = 605
   Insn 82: point = 607
   Insn 81: point = 608
   Insn 80: point = 609
   Insn 79: point = 611
   Insn 78: point = 613
   Insn 77: point = 615
   Insn 76: point = 616
   Insn 75: point = 618
   Insn 74: point = 620
   Insn 73: point = 621
   Insn 72: point = 623
   Insn 71: point = 625
   Insn 70: point = 627
   Insn 69: point = 628
   Insn 68: point = 630
   Insn 67: point = 632
   Insn 66: point = 633
   Insn 65: point = 634
   Insn 64: point = 636
   Insn 63: point = 638
   Insn 62: point = 640
   Insn 61: point = 641
   Insn 60: point = 643
   Insn 59: point = 645
   Insn 58: point = 646
   Insn 57: point = 648
   Insn 56: point = 650
   Insn 55: point = 652
   Insn 54: point = 653
   Insn 53: point = 655
   Insn 52: point = 657
   Insn 51: point = 658
   Insn 50: point = 659
   Insn 49: point = 661
   Insn 48: point = 663
   Insn 47: point = 665
   Insn 46: point = 666
   Insn 45: point = 668
   Insn 44: point = 670
   Insn 43: point = 671
   Insn 42: point = 673
   Insn 41: point = 675
   Insn 40: point = 677
   Insn 39: point = 678
   Insn 38: point = 680
   Insn 37: point = 682
   Insn 36: point = 683
   Insn 35: point = 684
   Insn 34: point = 686
   Insn 33: point = 688
   Insn 32: point = 690
   Insn 31: point = 691
   Insn 30: point = 693
   Insn 29: point = 695
   Insn 28: point = 696
   Insn 27: point = 698
   Insn 26: point = 700
   Insn 25: point = 702
   Insn 24: point = 703
   Insn 23: point = 705
   Insn 22: point = 707
   Insn 21: point = 708
   Insn 20: point = 709
   Insn 19: point = 711
   Insn 18: point = 713
   Insn 17: point = 715
   Insn 16: point = 716
   Insn 15: point = 718
   Insn 14: point = 720
   Insn 13: point = 721
   Insn 12: point = 723
   Insn 11: point = 725
   Insn 10: point = 727
   Insn 9: point = 728
   Insn 8: point = 730
   Insn 7: point = 732
   Insn 3: point = 733
   Insn 2: point = 733
 r87: [729..730]
 r88: [726..728]
 r89: [724..725]
 r90: [722..723]
 r91: [708..721]
 r92: [717..718]
 r93: [714..716]
 r94: [712..713]
 r95: [710..711]
 r96: [708..709]
 r97: [704..705]
 r98: [701..703]
 r99: [699..700]
 r100: [697..698]
 r101: [683..696]
 r102: [692..693]
 r103: [689..691]
 r104: [687..688]
 r105: [685..686]
 r106: [683..684]
 r107: [679..680]
 r108: [676..678]
 r109: [674..675]
 r110: [672..673]
 r111: [658..671]
 r112: [667..668]
 r113: [664..666]
 r114: [662..663]
 r115: [660..661]
 r116: [658..659]
 r117: [654..655]
 r118: [651..653]
 r119: [649..650]
 r120: [647..648]
 r121: [633..646]
 r122: [642..643]
 r123: [639..641]
 r124: [637..638]
 r125: [635..636]
 r126: [633..634]
 r127: [629..630]
 r128: [626..628]
 r129: [624..625]
 r130: [622..623]
 r131: [608..621]
 r132: [617..618]
 r133: [614..616]
 r134: [612..613]
 r135: [610..611]
 r136: [608..609]
 r137: [604..605]
 r138: [601..603]
 r139: [599..600]
 r140: [597..598]
 r141: [583..596]
 r142: [592..593]
 r143: [589..591]
 r144: [587..588]
 r145: [585..586]
 r146: [583..584]
 r147: [579..580]
 r148: [576..578]
 r149: [574..575]
 r150: [572..573]
 r151: [558..571]
 r152: [567..568]
 r153: [564..566]
 r154: [562..563]
 r155: [560..561]
 r156: [558..559]
 r157: [554..555]
 r158: [551..553]
 r159: [549..550]
 r160: [547..548]
 r161: [533..546]
 r162: [542..543]
 r163: [539..541]
 r164: [537..538]
 r165: [535..536]
 r166: [533..534]
 r167: [529..530]
 r168: [526..528]
 r169: [524..525]
 r170: [522..523]
 r171: [508..521]
 r172: [517..518]
 r173: [514..516]
 r174: [512..513]
 r175: [510..511]
 r176: [508..509]
 r177: [504..505]
 r178: [501..503]
 r179: [499..500]
 r180: [497..498]
 r181: [483..496]
 r182: [492..493]
 r183: [489..491]
 r184: [487..488]
 r185: [485..486]
 r186: [483..484]
 r187: [479..480]
 r188: [476..478]
 r189: [474..475]
 r190: [472..473]
 r191: [458..471]
 r192: [467..468]
 r193: [464..466]
 r194: [462..463]
 r195: [460..461]
 r196: [458..459]
 r197: [454..455]
 r198: [451..453]
 r199: [449..450]
 r200: [447..448]
 r201: [433..446]
 r202: [442..443]
 r203: [439..441]
 r204: [437..438]
 r205: [435..436]
 r206: [433..434]
 r207: [429..430]
 r208: [426..428]
 r209: [424..425]
 r210: [422..423]
 r211: [408..421]
 r212: [417..418]
 r213: [414..416]
 r214: [412..413]
 r215: [410..411]
 r216: [408..409]
 r217: [404..405]
 r218: [401..403]
 r219: [399..400]
 r220: [397..398]
 r221: [383..396]
 r222: [392..393]
 r223: [389..391]
 r224: [387..388]
 r225: [385..386]
 r226: [383..384]
 r227: [379..380]
 r228: [376..378]
 r229: [374..375]
 r230: [372..373]
 r231: [358..371]
 r232: [367..368]
 r233: [364..366]
 r234: [362..363]
 r235: [360..361]
 r236: [358..359]
 r237: [354..355]
 r238: [351..353]
 r239: [349..350]
 r240: [347..348]
 r241: [333..346]
 r242: [342..343]
 r243: [339..341]
 r244: [337..338]
 r245: [335..336]
 r246: [333..334]
 r247: [329..330]
 r248: [326..328]
 r249: [324..325]
 r250: [322..323]
 r251: [308..321]
 r252: [317..318]
 r253: [314..316]
 r254: [312..313]
 r255: [310..311]
 r256: [308..309]
 r257: [304..305]
 r258: [301..303]
 r259: [299..300]
 r260: [297..298]
 r261: [283..296]
 r262: [292..293]
 r263: [289..291]
 r264: [287..288]
 r265: [285..286]
 r266: [283..284]
 r267: [279..280]
 r268: [276..278]
 r269: [274..275]
 r270: [272..273]
 r271: [258..271]
 r272: [267..268]
 r273: [264..266]
 r274: [262..263]
 r275: [260..261]
 r276: [258..259]
 r277: [254..255]
 r278: [251..253]
 r279: [249..250]
 r280: [247..248]
 r281: [233..246]
 r282: [242..243]
 r283: [239..241]
 r284: [237..238]
 r285: [235..236]
 r286: [233..234]
 r287: [229..230]
 r288: [226..228]
 r289: [224..225]
 r290: [222..223]
 r291: [208..221]
 r292: [217..218]
 r293: [214..216]
 r294: [212..213]
 r295: [210..211]
 r296: [208..209]
 r297: [204..205]
 r298: [201..203]
 r299: [199..200]
 r300: [197..198]
 r301: [183..196]
 r302: [192..193]
 r303: [189..191]
 r304: [187..188]
 r305: [185..186]
 r306: [183..184]
 r307: [179..180]
 r308: [176..178]
 r309: [174..175]
 r310: [172..173]
 r311: [158..171]
 r312: [167..168]
 r313: [164..166]
 r314: [162..163]
 r315: [160..161]
 r316: [158..159]
 r317: [154..155]
 r318: [151..153]
 r319: [149..150]
 r320: [147..148]
 r321: [133..146]
 r322: [142..143]
 r323: [139..141]
 r324: [137..138]
 r325: [135..136]
 r326: [133..134]
 r327: [129..130]
 r328: [126..128]
 r329: [124..125]
 r330: [122..123]
 r331: [108..121]
 r332: [117..118]
 r333: [114..116]
 r334: [112..113]
 r335: [110..111]
 r336: [108..109]
 r337: [104..105]
 r338: [101..103]
 r339: [99..100]
 r340: [97..98]
 r341: [83..96]
 r342: [92..93]
 r343: [89..91]
 r344: [87..88]
 r345: [85..86]
 r346: [83..84]
 r347: [79..80]
 r348: [76..78]
 r349: [74..75]
 r350: [72..73]
 r351: [58..71]
 r352: [67..68]
 r353: [64..66]
 r354: [62..63]
 r355: [60..61]
 r356: [58..59]
 r357: [54..55]
 r358: [51..53]
 r359: [49..50]
 r360: [47..48]
 r361: [33..46]
 r362: [42..43]
 r363: [39..41]
 r364: [37..38]
 r365: [35..36]
 r366: [33..34]
 r367: [29..30]
 r368: [26..28]
 r369: [24..25]
 r370: [4..23]
 r371: [19..20]
 r372: [16..18]
 r373: [14..15]
 r374: [6..13]
 r375: [2..3]
 r376: [0..1]
 r377: [731..732]
 r378: [726..727]
 r379: [719..720]
 r380: [714..715]
 r381: [706..707]
 r382: [701..702]
 r383: [694..695]
 r384: [689..690]
 r385: [681..682]
 r386: [676..677]
 r387: [669..670]
 r388: [664..665]
 r389: [656..657]
 r390: [651..652]
 r391: [644..645]
 r392: [639..640]
 r393: [631..632]
 r394: [626..627]
 r395: [619..620]
 r396: [614..615]
 r397: [606..607]
 r398: [601..602]
 r399: [594..595]
 r400: [589..590]
 r401: [581..582]
 r402: [576..577]
 r403: [569..570]
 r404: [564..565]
 r405: [556..557]
 r406: [551..552]
 r407: [544..545]
 r408: [539..540]
 r409: [531..532]
 r410: [526..527]
 r411: [519..520]
 r412: [514..515]
 r413: [506..507]
 r414: [501..502]
 r415: [494..495]
 r416: [489..490]
 r417: [481..482]
 r418: [476..477]
 r419: [469..470]
 r420: [464..465]
 r421: [456..457]
 r422: [451..452]
 r423: [444..445]
 r424: [439..440]
 r425: [431..432]
 r426: [426..427]
 r427: [419..420]
 r428: [414..415]
 r429: [406..407]
 r430: [401..402]
 r431: [394..395]
 r432: [389..390]
 r433: [381..382]
 r434: [376..377]
 r435: [369..370]
 r436: [364..365]
 r437: [356..357]
 r438: [351..352]
 r439: [344..345]
 r440: [339..340]
 r441: [331..332]
 r442: [326..327]
 r443: [319..320]
 r444: [314..315]
 r445: [306..307]
 r446: [301..302]
 r447: [294..295]
 r448: [289..290]
 r449: [281..282]
 r450: [276..277]
 r451: [269..270]
 r452: [264..265]
 r453: [256..257]
 r454: [251..252]
 r455: [244..245]
 r456: [239..240]
 r457: [231..232]
 r458: [226..227]
 r459: [219..220]
 r460: [214..215]
 r461: [206..207]
 r462: [201..202]
 r463: [194..195]
 r464: [189..190]
 r465: [181..182]
 r466: [176..177]
 r467: [169..170]
 r468: [164..165]
 r469: [156..157]
 r470: [151..152]
 r471: [144..145]
 r472: [139..140]
 r473: [131..132]
 r474: [126..127]
 r475: [119..120]
 r476: [114..115]
 r477: [106..107]
 r478: [101..102]
 r479: [94..95]
 r480: [89..90]
 r481: [81..82]
 r482: [76..77]
 r483: [69..70]
 r484: [64..65]
 r485: [56..57]
 r486: [51..52]
 r487: [44..45]
 r488: [39..40]
 r489: [31..32]
 r490: [26..27]
 r491: [21..22]
 r492: [16..17]
 r493: [11..12]
 r494: [9..10]
 r495: [7..8]
 r496: [4..5]
Compressing live ranges: from 733 to 644 - 87%
Ranges after the compression:
 r87: [640..641]
 r88: [638..639]
 r89: [636..637]
 r90: [634..635]
 r91: [622..633]
 r92: [630..631]
 r93: [628..629]
 r94: [626..627]
 r95: [624..625]
 r96: [622..623]
 r97: [618..619]
 r98: [616..617]
 r99: [614..615]
 r100: [612..613]
 r101: [600..611]
 r102: [608..609]
 r103: [606..607]
 r104: [604..605]
 r105: [602..603]
 r106: [600..601]
 r107: [596..597]
 r108: [594..595]
 r109: [592..593]
 r110: [590..591]
 r111: [578..589]
 r112: [586..587]
 r113: [584..585]
 r114: [582..583]
 r115: [580..581]
 r116: [578..579]
 r117: [574..575]
 r118: [572..573]
 r119: [570..571]
 r120: [568..569]
 r121: [556..567]
 r122: [564..565]
 r123: [562..563]
 r124: [560..561]
 r125: [558..559]
 r126: [556..557]
 r127: [552..553]
 r128: [550..551]
 r129: [548..549]
 r130: [546..547]
 r131: [534..545]
 r132: [542..543]
 r133: [540..541]
 r134: [538..539]
 r135: [536..537]
 r136: [534..535]
 r137: [530..531]
 r138: [528..529]
 r139: [526..527]
 r140: [524..525]
 r141: [512..523]
 r142: [520..521]
 r143: [518..519]
 r144: [516..517]
 r145: [514..515]
 r146: [512..513]
 r147: [508..509]
 r148: [506..507]
 r149: [504..505]
 r150: [502..503]
 r151: [490..501]
 r152: [498..499]
 r153: [496..497]
 r154: [494..495]
 r155: [492..493]
 r156: [490..491]
 r157: [486..487]
 r158: [484..485]
 r159: [482..483]
 r160: [480..481]
 r161: [468..479]
 r162: [476..477]
 r163: [474..475]
 r164: [472..473]
 r165: [470..471]
 r166: [468..469]
 r167: [464..465]
 r168: [462..463]
 r169: [460..461]
 r170: [458..459]
 r171: [446..457]
 r172: [454..455]
 r173: [452..453]
 r174: [450..451]
 r175: [448..449]
 r176: [446..447]
 r177: [442..443]
 r178: [440..441]
 r179: [438..439]
 r180: [436..437]
 r181: [424..435]
 r182: [432..433]
 r183: [430..431]
 r184: [428..429]
 r185: [426..427]
 r186: [424..425]
 r187: [420..421]
 r188: [418..419]
 r189: [416..417]
 r190: [414..415]
 r191: [402..413]
 r192: [410..411]
 r193: [408..409]
 r194: [406..407]
 r195: [404..405]
 r196: [402..403]
 r197: [398..399]
 r198: [396..397]
 r199: [394..395]
 r200: [392..393]
 r201: [380..391]
 r202: [388..389]
 r203: [386..387]
 r204: [384..385]
 r205: [382..383]
 r206: [380..381]
 r207: [376..377]
 r208: [374..375]
 r209: [372..373]
 r210: [370..371]
 r211: [358..369]
 r212: [366..367]
 r213: [364..365]
 r214: [362..363]
 r215: [360..361]
 r216: [358..359]
 r217: [354..355]
 r218: [352..353]
 r219: [350..351]
 r220: [348..349]
 r221: [336..347]
 r222: [344..345]
 r223: [342..343]
 r224: [340..341]
 r225: [338..339]
 r226: [336..337]
 r227: [332..333]
 r228: [330..331]
 r229: [328..329]
 r230: [326..327]
 r231: [314..325]
 r232: [322..323]
 r233: [320..321]
 r234: [318..319]
 r235: [316..317]
 r236: [314..315]
 r237: [310..311]
 r238: [308..309]
 r239: [306..307]
 r240: [304..305]
 r241: [292..303]
 r242: [300..301]
 r243: [298..299]
 r244: [296..297]
 r245: [294..295]
 r246: [292..293]
 r247: [288..289]
 r248: [286..287]
 r249: [284..285]
 r250: [282..283]
 r251: [270..281]
 r252: [278..279]
 r253: [276..277]
 r254: [274..275]
 r255: [272..273]
 r256: [270..271]
 r257: [266..267]
 r258: [264..265]
 r259: [262..263]
 r260: [260..261]
 r261: [248..259]
 r262: [256..257]
 r263: [254..255]
 r264: [252..253]
 r265: [250..251]
 r266: [248..249]
 r267: [244..245]
 r268: [242..243]
 r269: [240..241]
 r270: [238..239]
 r271: [226..237]
 r272: [234..235]
 r273: [232..233]
 r274: [230..231]
 r275: [228..229]
 r276: [226..227]
 r277: [222..223]
 r278: [220..221]
 r279: [218..219]
 r280: [216..217]
 r281: [204..215]
 r282: [212..213]
 r283: [210..211]
 r284: [208..209]
 r285: [206..207]
 r286: [204..205]
 r287: [200..201]
 r288: [198..199]
 r289: [196..197]
 r290: [194..195]
 r291: [182..193]
 r292: [190..191]
 r293: [188..189]
 r294: [186..187]
 r295: [184..185]
 r296: [182..183]
 r297: [178..179]
 r298: [176..177]
 r299: [174..175]
 r300: [172..173]
 r301: [160..171]
 r302: [168..169]
 r303: [166..167]
 r304: [164..165]
 r305: [162..163]
 r306: [160..161]
 r307: [156..157]
 r308: [154..155]
 r309: [152..153]
 r310: [150..151]
 r311: [138..149]
 r312: [146..147]
 r313: [144..145]
 r314: [142..143]
 r315: [140..141]
 r316: [138..139]
 r317: [134..135]
 r318: [132..133]
 r319: [130..131]
 r320: [128..129]
 r321: [116..127]
 r322: [124..125]
 r323: [122..123]
 r324: [120..121]
 r325: [118..119]
 r326: [116..117]
 r327: [112..113]
 r328: [110..111]
 r329: [108..109]
 r330: [106..107]
 r331: [94..105]
 r332: [102..103]
 r333: [100..101]
 r334: [98..99]
 r335: [96..97]
 r336: [94..95]
 r337: [90..91]
 r338: [88..89]
 r339: [86..87]
 r340: [84..85]
 r341: [72..83]
 r342: [80..81]
 r343: [78..79]
 r344: [76..77]
 r345: [74..75]
 r346: [72..73]
 r347: [68..69]
 r348: [66..67]
 r349: [64..65]
 r350: [62..63]
 r351: [50..61]
 r352: [58..59]
 r353: [56..57]
 r354: [54..55]
 r355: [52..53]
 r356: [50..51]
 r357: [46..47]
 r358: [44..45]
 r359: [42..43]
 r360: [40..41]
 r361: [28..39]
 r362: [36..37]
 r363: [34..35]
 r364: [32..33]
 r365: [30..31]
 r366: [28..29]
 r367: [24..25]
 r368: [22..23]
 r369: [20..21]
 r370: [4..19]
 r371: [16..17]
 r372: [14..15]
 r373: [12..13]
 r374: [6..11]
 r375: [2..3]
 r376: [0..1]
 r377: [642..643]
 r378: [638..639]
 r379: [632..633]
 r380: [628..629]
 r381: [620..621]
 r382: [616..617]
 r383: [610..611]
 r384: [606..607]
 r385: [598..599]
 r386: [594..595]
 r387: [588..589]
 r388: [584..585]
 r389: [576..577]
 r390: [572..573]
 r391: [566..567]
 r392: [562..563]
 r393: [554..555]
 r394: [550..551]
 r395: [544..545]
 r396: [540..541]
 r397: [532..533]
 r398: [528..529]
 r399: [522..523]
 r400: [518..519]
 r401: [510..511]
 r402: [506..507]
 r403: [500..501]
 r404: [496..497]
 r405: [488..489]
 r406: [484..485]
 r407: [478..479]
 r408: [474..475]
 r409: [466..467]
 r410: [462..463]
 r411: [456..457]
 r412: [452..453]
 r413: [444..445]
 r414: [440..441]
 r415: [434..435]
 r416: [430..431]
 r417: [422..423]
 r418: [418..419]
 r419: [412..413]
 r420: [408..409]
 r421: [400..401]
 r422: [396..397]
 r423: [390..391]
 r424: [386..387]
 r425: [378..379]
 r426: [374..375]
 r427: [368..369]
 r428: [364..365]
 r429: [356..357]
 r430: [352..353]
 r431: [346..347]
 r432: [342..343]
 r433: [334..335]
 r434: [330..331]
 r435: [324..325]
 r436: [320..321]
 r437: [312..313]
 r438: [308..309]
 r439: [302..303]
 r440: [298..299]
 r441: [290..291]
 r442: [286..287]
 r443: [280..281]
 r444: [276..277]
 r445: [268..269]
 r446: [264..265]
 r447: [258..259]
 r448: [254..255]
 r449: [246..247]
 r450: [242..243]
 r451: [236..237]
 r452: [232..233]
 r453: [224..225]
 r454: [220..221]
 r455: [214..215]
 r456: [210..211]
 r457: [202..203]
 r458: [198..199]
 r459: [192..193]
 r460: [188..189]
 r461: [180..181]
 r462: [176..177]
 r463: [170..171]
 r464: [166..167]
 r465: [158..159]
 r466: [154..155]
 r467: [148..149]
 r468: [144..145]
 r469: [136..137]
 r470: [132..133]
 r471: [126..127]
 r472: [122..123]
 r473: [114..115]
 r474: [110..111]
 r475: [104..105]
 r476: [100..101]
 r477: [92..93]
 r478: [88..89]
 r479: [82..83]
 r480: [78..79]
 r481: [70..71]
 r482: [66..67]
 r483: [60..61]
 r484: [56..57]
 r485: [48..49]
 r486: [44..45]
 r487: [38..39]
 r488: [34..35]
 r489: [26..27]
 r490: [22..23]
 r491: [18..19]
 r492: [14..15]
 r493: [10..11]
 r494: [8..9]
 r495: [6..7]
 r496: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 21
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 36
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 51
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 66
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 81
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 96
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 111
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 126
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 141
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 156
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 171
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 186
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 201
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 216
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 221
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 231
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 231
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 246
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 245
changing reg in insn 245
changing reg in insn 246
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 261
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 258
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 276
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 281
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 283
changing reg in insn 283
changing reg in insn 291
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 288
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 291
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 296
changing reg in insn 296
changing reg in insn 297
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 306
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 303
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 306
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 321
changing reg in insn 315
changing reg in insn 316
changing reg in insn 316
changing reg in insn 318
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 321
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 326
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 336
changing reg in insn 330
changing reg in insn 331
changing reg in insn 331
changing reg in insn 333
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 335
changing reg in insn 335
changing reg in insn 336
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 341
changing reg in insn 341
changing reg in insn 342
changing reg in insn 342
changing reg in insn 343
changing reg in insn 343
changing reg in insn 351
changing reg in insn 345
changing reg in insn 346
changing reg in insn 346
changing reg in insn 348
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 351
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 356
changing reg in insn 356
changing reg in insn 357
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 366
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 363
changing reg in insn 363
changing reg in insn 364
changing reg in insn 364
changing reg in insn 365
changing reg in insn 365
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 369
changing reg in insn 371
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 381
changing reg in insn 375
changing reg in insn 376
changing reg in insn 376
changing reg in insn 378
changing reg in insn 378
changing reg in insn 379
changing reg in insn 379
changing reg in insn 380
changing reg in insn 380
changing reg in insn 381
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 386
changing reg in insn 386
changing reg in insn 387
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 396
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 396
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 401
changing reg in insn 401
changing reg in insn 402
changing reg in insn 402
changing reg in insn 403
changing reg in insn 403
changing reg in insn 411
changing reg in insn 405
changing reg in insn 406
changing reg in insn 406
changing reg in insn 408
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 413
changing reg in insn 414
changing reg in insn 414
changing reg in insn 416
changing reg in insn 416
changing reg in insn 417
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 426
changing reg in insn 420
changing reg in insn 421
changing reg in insn 421
changing reg in insn 423
changing reg in insn 423
changing reg in insn 424
changing reg in insn 424
changing reg in insn 425
changing reg in insn 425
changing reg in insn 426
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 431
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 446
changing reg in insn 444
changing reg in insn 442
changing reg in insn 440
changing reg in insn 434
changing reg in insn 435
changing reg in insn 435
changing reg in insn 437
changing reg in insn 437
changing reg in insn 438
changing reg in insn 438
changing reg in insn 445
changing reg in insn 443
changing reg in insn 441
changing reg in insn 439
changing reg in insn 447
changing reg in insn 450
changing reg in insn 450
changing reg in insn 454
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 112
changing reg in insn 113
changing reg in insn 115
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 157
changing reg in insn 158
changing reg in insn 160
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 179
changing reg in insn 180
changing reg in insn 182
changing reg in insn 187
changing reg in insn 188
changing reg in insn 190
changing reg in insn 194
changing reg in insn 195
changing reg in insn 197
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 209
changing reg in insn 210
changing reg in insn 212
changing reg in insn 217
changing reg in insn 218
changing reg in insn 220
changing reg in insn 224
changing reg in insn 225
changing reg in insn 227
changing reg in insn 232
changing reg in insn 233
changing reg in insn 235
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 247
changing reg in insn 248
changing reg in insn 250
changing reg in insn 254
changing reg in insn 255
changing reg in insn 257
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 269
changing reg in insn 270
changing reg in insn 272
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 284
changing reg in insn 285
changing reg in insn 287
changing reg in insn 292
changing reg in insn 293
changing reg in insn 295
changing reg in insn 299
changing reg in insn 300
changing reg in insn 302
changing reg in insn 307
changing reg in insn 308
changing reg in insn 310
changing reg in insn 314
changing reg in insn 315
changing reg in insn 317
changing reg in insn 322
changing reg in insn 323
changing reg in insn 325
changing reg in insn 329
changing reg in insn 330
changing reg in insn 332
changing reg in insn 337
changing reg in insn 338
changing reg in insn 340
changing reg in insn 344
changing reg in insn 345
changing reg in insn 347
changing reg in insn 352
changing reg in insn 353
changing reg in insn 355
changing reg in insn 359
changing reg in insn 360
changing reg in insn 362
changing reg in insn 367
changing reg in insn 368
changing reg in insn 370
changing reg in insn 374
changing reg in insn 375
changing reg in insn 377
changing reg in insn 382
changing reg in insn 383
changing reg in insn 385
changing reg in insn 389
changing reg in insn 390
changing reg in insn 392
changing reg in insn 397
changing reg in insn 398
changing reg in insn 400
changing reg in insn 404
changing reg in insn 405
changing reg in insn 407
changing reg in insn 412
changing reg in insn 413
changing reg in insn 415
changing reg in insn 419
changing reg in insn 420
changing reg in insn 422
changing reg in insn 427
changing reg in insn 428
changing reg in insn 430
changing reg in insn 433
changing reg in insn 434
changing reg in insn 436
changing reg in insn 439
changing reg in insn 440
changing reg in insn 441
changing reg in insn 442
changing reg in insn 443
changing reg in insn 444
changing reg in insn 445
changing reg in insn 446
starting the processing of deferred insns
ending the processing of deferred insns


int block_header_swap(Data_block_header**, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={317d,320u} r1={64d,66u,29e} r2={33d,32u,29e} r4={1d,1u} r5={1d,1u} r6={1d,120u} r7={1d,2u} r17={144d} r20={1d,1u,58e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 1232{573d,543u,116e} in 446{446 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
        (reg:DI 5 di [ block_header ])) h_swap.cpp:65 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (reg:SI 4 si [ i ])) h_swap.cpp:65 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 0 ax [377])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:67 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [orig:87 D.6140 ] [87])
        (sign_extend:DI (reg:SI 0 ax [377]))) h_swap.cpp:67 142 {*extendsidi2_rex64}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:DI 1 dx [orig:88 D.6140 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.6140 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:67 512 {*ashldi3_1}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:67 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.6141 ] [89])
                (plus:DI (reg/f:DI 0 ax [378])
                    (reg:DI 1 dx [orig:88 D.6140 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:67 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.6140 ] [88]))
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [orig:90 D.6142 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [orig:89 D.6141 ] [89]) [0 *_5+0 S8 A64])) h_swap.cpp:67 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg/f:DI 1 dx [orig:91 D.6142 ] [91])
                (plus:DI (reg/f:DI 0 ax [orig:90 D.6142 ] [90])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:67 218 {*adddi_1}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [379])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:67 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 0 ax [orig:92 D.6140 ] [92])
        (sign_extend:DI (reg:SI 0 ax [379]))) h_swap.cpp:67 142 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:DI 2 cx [orig:93 D.6140 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:92 D.6140 ] [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:67 512 {*ashldi3_1}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:67 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.6141 ] [94])
                (plus:DI (reg/f:DI 0 ax [380])
                    (reg:DI 2 cx [orig:93 D.6140 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:67 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:93 D.6140 ] [93]))
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 0 ax [orig:95 D.6142 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [orig:94 D.6141 ] [94]) [0 *_11+0 S8 A64])) h_swap.cpp:67 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:QI 0 ax [orig:96 D.6143 ] [96])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:95 D.6142 ] [95])
                (const_int 1 [0x1])) [0 _12->scale.character+1 S1 A8])) h_swap.cpp:67 93 {*movqi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/j:QI (reg/f:DI 1 dx [orig:91 D.6142 ] [91]) [0 _8->scale.character+0 S1 A32])
        (reg:QI 0 ax [orig:96 D.6143 ] [96])) h_swap.cpp:67 93 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SI 0 ax [381])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:68 90 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 0 ax [orig:97 D.6140 ] [97])
        (sign_extend:DI (reg:SI 0 ax [381]))) h_swap.cpp:68 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg:DI 1 dx [orig:98 D.6140 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.6140 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:68 512 {*ashldi3_1}
     (nil))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:68 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.6141 ] [99])
                (plus:DI (reg/f:DI 0 ax [382])
                    (reg:DI 1 dx [orig:98 D.6140 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:68 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.6140 ] [98]))
        (nil)))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [orig:100 D.6142 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 D.6141 ] [99]) [0 *_17+0 S8 A64])) h_swap.cpp:68 89 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg/f:DI 1 dx [orig:101 D.6142 ] [101])
                (plus:DI (reg/f:DI 0 ax [orig:100 D.6142 ] [100])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:68 218 {*adddi_1}
     (nil))
(insn 29 28 30 2 (set (reg:SI 0 ax [383])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:68 90 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 0 ax [orig:102 D.6140 ] [102])
        (sign_extend:DI (reg:SI 0 ax [383]))) h_swap.cpp:68 142 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 2 (parallel [
            (set (reg:DI 2 cx [orig:103 D.6140 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.6140 ] [102])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:68 512 {*ashldi3_1}
     (nil))
(insn 32 31 33 2 (set (reg/f:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:68 89 {*movdi_internal}
     (nil))
(insn 33 32 34 2 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.6141 ] [104])
                (plus:DI (reg/f:DI 0 ax [384])
                    (reg:DI 2 cx [orig:103 D.6140 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:68 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:103 D.6140 ] [103]))
        (nil)))
(insn 34 33 35 2 (set (reg/f:DI 0 ax [orig:105 D.6142 ] [105])
        (mem/f:DI (reg/f:DI 0 ax [orig:104 D.6141 ] [104]) [0 *_22+0 S8 A64])) h_swap.cpp:68 89 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:QI 0 ax [orig:106 D.6143 ] [106])
        (mem/j:QI (reg/f:DI 0 ax [orig:105 D.6142 ] [105]) [0 _23->scale.character+0 S1 A32])) h_swap.cpp:68 93 {*movqi_internal}
     (nil))
(insn 36 35 37 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:101 D.6142 ] [101])
                (const_int 1 [0x1])) [0 _19->scale.character+1 S1 A8])
        (reg:QI 0 ax [orig:106 D.6143 ] [106])) h_swap.cpp:68 93 {*movqi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 0 ax [385])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:70 90 {*movsi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:DI 0 ax [orig:107 D.6140 ] [107])
        (sign_extend:DI (reg:SI 0 ax [385]))) h_swap.cpp:70 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 2 (parallel [
            (set (reg:DI 1 dx [orig:108 D.6140 ] [108])
                (ashift:DI (reg:DI 0 ax [orig:107 D.6140 ] [107])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:70 512 {*ashldi3_1}
     (nil))
(insn 40 39 41 2 (set (reg/f:DI 0 ax [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:70 89 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (parallel [
            (set (reg/f:DI 0 ax [orig:109 D.6141 ] [109])
                (plus:DI (reg/f:DI 0 ax [386])
                    (reg:DI 1 dx [orig:108 D.6140 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:70 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.6140 ] [108]))
        (nil)))
(insn 42 41 43 2 (set (reg/f:DI 0 ax [orig:110 D.6142 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [orig:109 D.6141 ] [109]) [0 *_28+0 S8 A64])) h_swap.cpp:70 89 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (parallel [
            (set (reg/f:DI 1 dx [orig:111 D.6142 ] [111])
                (plus:DI (reg/f:DI 0 ax [orig:110 D.6142 ] [110])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:70 218 {*adddi_1}
     (nil))
(insn 44 43 45 2 (set (reg:SI 0 ax [387])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:70 90 {*movsi_internal}
     (nil))
(insn 45 44 46 2 (set (reg:DI 0 ax [orig:112 D.6140 ] [112])
        (sign_extend:DI (reg:SI 0 ax [387]))) h_swap.cpp:70 142 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 2 (parallel [
            (set (reg:DI 2 cx [orig:113 D.6140 ] [113])
                (ashift:DI (reg:DI 0 ax [orig:112 D.6140 ] [112])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:70 512 {*ashldi3_1}
     (nil))
(insn 47 46 48 2 (set (reg/f:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:70 89 {*movdi_internal}
     (nil))
(insn 48 47 49 2 (parallel [
            (set (reg/f:DI 0 ax [orig:114 D.6141 ] [114])
                (plus:DI (reg/f:DI 0 ax [388])
                    (reg:DI 2 cx [orig:113 D.6140 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:70 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:113 D.6140 ] [113]))
        (nil)))
(insn 49 48 50 2 (set (reg/f:DI 0 ax [orig:115 D.6142 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [orig:114 D.6141 ] [114]) [0 *_33+0 S8 A64])) h_swap.cpp:70 89 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:QI 0 ax [orig:116 D.6143 ] [116])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:115 D.6142 ] [115])
                (const_int 3 [0x3])) [0 _34->status.character+1 S1 A8])) h_swap.cpp:70 93 {*movqi_internal}
     (nil))
(insn 51 50 52 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:111 D.6142 ] [111])
                (const_int 2 [0x2])) [0 _30->status.character+0 S1 A16])
        (reg:QI 0 ax [orig:116 D.6143 ] [116])) h_swap.cpp:70 93 {*movqi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:SI 0 ax [389])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:71 90 {*movsi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:DI 0 ax [orig:117 D.6140 ] [117])
        (sign_extend:DI (reg:SI 0 ax [389]))) h_swap.cpp:71 142 {*extendsidi2_rex64}
     (nil))
(insn 54 53 55 2 (parallel [
            (set (reg:DI 1 dx [orig:118 D.6140 ] [118])
                (ashift:DI (reg:DI 0 ax [orig:117 D.6140 ] [117])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:71 512 {*ashldi3_1}
     (nil))
(insn 55 54 56 2 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:71 89 {*movdi_internal}
     (nil))
(insn 56 55 57 2 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.6141 ] [119])
                (plus:DI (reg/f:DI 0 ax [390])
                    (reg:DI 1 dx [orig:118 D.6140 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:71 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:118 D.6140 ] [118]))
        (nil)))
(insn 57 56 58 2 (set (reg/f:DI 0 ax [orig:120 D.6142 ] [120])
        (mem/f:DI (reg/f:DI 0 ax [orig:119 D.6141 ] [119]) [0 *_39+0 S8 A64])) h_swap.cpp:71 89 {*movdi_internal}
     (nil))
(insn 58 57 59 2 (parallel [
            (set (reg/f:DI 1 dx [orig:121 D.6142 ] [121])
                (plus:DI (reg/f:DI 0 ax [orig:120 D.6142 ] [120])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:71 218 {*adddi_1}
     (nil))
(insn 59 58 60 2 (set (reg:SI 0 ax [391])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:71 90 {*movsi_internal}
     (nil))
(insn 60 59 61 2 (set (reg:DI 0 ax [orig:122 D.6140 ] [122])
        (sign_extend:DI (reg:SI 0 ax [391]))) h_swap.cpp:71 142 {*extendsidi2_rex64}
     (nil))
(insn 61 60 62 2 (parallel [
            (set (reg:DI 2 cx [orig:123 D.6140 ] [123])
                (ashift:DI (reg:DI 0 ax [orig:122 D.6140 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:71 512 {*ashldi3_1}
     (nil))
(insn 62 61 63 2 (set (reg/f:DI 0 ax [392])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:71 89 {*movdi_internal}
     (nil))
(insn 63 62 64 2 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.6141 ] [124])
                (plus:DI (reg/f:DI 0 ax [392])
                    (reg:DI 2 cx [orig:123 D.6140 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:71 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:123 D.6140 ] [123]))
        (nil)))
(insn 64 63 65 2 (set (reg/f:DI 0 ax [orig:125 D.6142 ] [125])
        (mem/f:DI (reg/f:DI 0 ax [orig:124 D.6141 ] [124]) [0 *_44+0 S8 A64])) h_swap.cpp:71 89 {*movdi_internal}
     (nil))
(insn 65 64 66 2 (set (reg:QI 0 ax [orig:126 D.6143 ] [126])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:125 D.6142 ] [125])
                (const_int 2 [0x2])) [0 _45->status.character+0 S1 A16])) h_swap.cpp:71 93 {*movqi_internal}
     (nil))
(insn 66 65 67 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:121 D.6142 ] [121])
                (const_int 3 [0x3])) [0 _41->status.character+1 S1 A8])
        (reg:QI 0 ax [orig:126 D.6143 ] [126])) h_swap.cpp:71 93 {*movqi_internal}
     (nil))
(insn 67 66 68 2 (set (reg:SI 0 ax [393])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:73 90 {*movsi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:DI 0 ax [orig:127 D.6140 ] [127])
        (sign_extend:DI (reg:SI 0 ax [393]))) h_swap.cpp:73 142 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 2 (parallel [
            (set (reg:DI 1 dx [orig:128 D.6140 ] [128])
                (ashift:DI (reg:DI 0 ax [orig:127 D.6140 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:73 512 {*ashldi3_1}
     (nil))
(insn 70 69 71 2 (set (reg/f:DI 0 ax [394])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:73 89 {*movdi_internal}
     (nil))
(insn 71 70 72 2 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.6141 ] [129])
                (plus:DI (reg/f:DI 0 ax [394])
                    (reg:DI 1 dx [orig:128 D.6140 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:73 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:128 D.6140 ] [128]))
        (nil)))
(insn 72 71 73 2 (set (reg/f:DI 0 ax [orig:130 D.6142 ] [130])
        (mem/f:DI (reg/f:DI 0 ax [orig:129 D.6141 ] [129]) [0 *_50+0 S8 A64])) h_swap.cpp:73 89 {*movdi_internal}
     (nil))
(insn 73 72 74 2 (parallel [
            (set (reg/f:DI 1 dx [orig:131 D.6142 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:130 D.6142 ] [130])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:73 218 {*adddi_1}
     (nil))
(insn 74 73 75 2 (set (reg:SI 0 ax [395])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:73 90 {*movsi_internal}
     (nil))
(insn 75 74 76 2 (set (reg:DI 0 ax [orig:132 D.6140 ] [132])
        (sign_extend:DI (reg:SI 0 ax [395]))) h_swap.cpp:73 142 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 2 (parallel [
            (set (reg:DI 2 cx [orig:133 D.6140 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.6140 ] [132])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:73 512 {*ashldi3_1}
     (nil))
(insn 77 76 78 2 (set (reg/f:DI 0 ax [396])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:73 89 {*movdi_internal}
     (nil))
(insn 78 77 79 2 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6141 ] [134])
                (plus:DI (reg/f:DI 0 ax [396])
                    (reg:DI 2 cx [orig:133 D.6140 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:73 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:133 D.6140 ] [133]))
        (nil)))
(insn 79 78 80 2 (set (reg/f:DI 0 ax [orig:135 D.6142 ] [135])
        (mem/f:DI (reg/f:DI 0 ax [orig:134 D.6141 ] [134]) [0 *_55+0 S8 A64])) h_swap.cpp:73 89 {*movdi_internal}
     (nil))
(insn 80 79 81 2 (set (reg:QI 0 ax [orig:136 D.6143 ] [136])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:135 D.6142 ] [135])
                (const_int 5 [0x5])) [0 _56->index.character+1 S1 A8])) h_swap.cpp:73 93 {*movqi_internal}
     (nil))
(insn 81 80 82 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:131 D.6142 ] [131])
                (const_int 4 [0x4])) [0 _52->index.character+0 S1 A32])
        (reg:QI 0 ax [orig:136 D.6143 ] [136])) h_swap.cpp:73 93 {*movqi_internal}
     (nil))
(insn 82 81 83 2 (set (reg:SI 0 ax [397])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:74 90 {*movsi_internal}
     (nil))
(insn 83 82 84 2 (set (reg:DI 0 ax [orig:137 D.6140 ] [137])
        (sign_extend:DI (reg:SI 0 ax [397]))) h_swap.cpp:74 142 {*extendsidi2_rex64}
     (nil))
(insn 84 83 85 2 (parallel [
            (set (reg:DI 1 dx [orig:138 D.6140 ] [138])
                (ashift:DI (reg:DI 0 ax [orig:137 D.6140 ] [137])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:74 512 {*ashldi3_1}
     (nil))
(insn 85 84 86 2 (set (reg/f:DI 0 ax [398])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:74 89 {*movdi_internal}
     (nil))
(insn 86 85 87 2 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.6141 ] [139])
                (plus:DI (reg/f:DI 0 ax [398])
                    (reg:DI 1 dx [orig:138 D.6140 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:74 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:138 D.6140 ] [138]))
        (nil)))
(insn 87 86 88 2 (set (reg/f:DI 0 ax [orig:140 D.6142 ] [140])
        (mem/f:DI (reg/f:DI 0 ax [orig:139 D.6141 ] [139]) [0 *_61+0 S8 A64])) h_swap.cpp:74 89 {*movdi_internal}
     (nil))
(insn 88 87 89 2 (parallel [
            (set (reg/f:DI 1 dx [orig:141 D.6142 ] [141])
                (plus:DI (reg/f:DI 0 ax [orig:140 D.6142 ] [140])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:74 218 {*adddi_1}
     (nil))
(insn 89 88 90 2 (set (reg:SI 0 ax [399])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:74 90 {*movsi_internal}
     (nil))
(insn 90 89 91 2 (set (reg:DI 0 ax [orig:142 D.6140 ] [142])
        (sign_extend:DI (reg:SI 0 ax [399]))) h_swap.cpp:74 142 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 2 (parallel [
            (set (reg:DI 2 cx [orig:143 D.6140 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.6140 ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:74 512 {*ashldi3_1}
     (nil))
(insn 92 91 93 2 (set (reg/f:DI 0 ax [400])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:74 89 {*movdi_internal}
     (nil))
(insn 93 92 94 2 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.6141 ] [144])
                (plus:DI (reg/f:DI 0 ax [400])
                    (reg:DI 2 cx [orig:143 D.6140 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:74 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:143 D.6140 ] [143]))
        (nil)))
(insn 94 93 95 2 (set (reg/f:DI 0 ax [orig:145 D.6142 ] [145])
        (mem/f:DI (reg/f:DI 0 ax [orig:144 D.6141 ] [144]) [0 *_66+0 S8 A64])) h_swap.cpp:74 89 {*movdi_internal}
     (nil))
(insn 95 94 96 2 (set (reg:QI 0 ax [orig:146 D.6143 ] [146])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:145 D.6142 ] [145])
                (const_int 4 [0x4])) [0 _67->index.character+0 S1 A32])) h_swap.cpp:74 93 {*movqi_internal}
     (nil))
(insn 96 95 97 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:141 D.6142 ] [141])
                (const_int 5 [0x5])) [0 _63->index.character+1 S1 A8])
        (reg:QI 0 ax [orig:146 D.6143 ] [146])) h_swap.cpp:74 93 {*movqi_internal}
     (nil))
(insn 97 96 98 2 (set (reg:SI 0 ax [401])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:76 90 {*movsi_internal}
     (nil))
(insn 98 97 99 2 (set (reg:DI 0 ax [orig:147 D.6140 ] [147])
        (sign_extend:DI (reg:SI 0 ax [401]))) h_swap.cpp:76 142 {*extendsidi2_rex64}
     (nil))
(insn 99 98 100 2 (parallel [
            (set (reg:DI 1 dx [orig:148 D.6140 ] [148])
                (ashift:DI (reg:DI 0 ax [orig:147 D.6140 ] [147])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:76 512 {*ashldi3_1}
     (nil))
(insn 100 99 101 2 (set (reg/f:DI 0 ax [402])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:76 89 {*movdi_internal}
     (nil))
(insn 101 100 102 2 (parallel [
            (set (reg/f:DI 0 ax [orig:149 D.6141 ] [149])
                (plus:DI (reg/f:DI 0 ax [402])
                    (reg:DI 1 dx [orig:148 D.6140 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:76 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:148 D.6140 ] [148]))
        (nil)))
(insn 102 101 103 2 (set (reg/f:DI 0 ax [orig:150 D.6142 ] [150])
        (mem/f:DI (reg/f:DI 0 ax [orig:149 D.6141 ] [149]) [0 *_72+0 S8 A64])) h_swap.cpp:76 89 {*movdi_internal}
     (nil))
(insn 103 102 104 2 (parallel [
            (set (reg/f:DI 1 dx [orig:151 D.6142 ] [151])
                (plus:DI (reg/f:DI 0 ax [orig:150 D.6142 ] [150])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:76 218 {*adddi_1}
     (nil))
(insn 104 103 105 2 (set (reg:SI 0 ax [403])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:76 90 {*movsi_internal}
     (nil))
(insn 105 104 106 2 (set (reg:DI 0 ax [orig:152 D.6140 ] [152])
        (sign_extend:DI (reg:SI 0 ax [403]))) h_swap.cpp:76 142 {*extendsidi2_rex64}
     (nil))
(insn 106 105 107 2 (parallel [
            (set (reg:DI 2 cx [orig:153 D.6140 ] [153])
                (ashift:DI (reg:DI 0 ax [orig:152 D.6140 ] [152])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:76 512 {*ashldi3_1}
     (nil))
(insn 107 106 108 2 (set (reg/f:DI 0 ax [404])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:76 89 {*movdi_internal}
     (nil))
(insn 108 107 109 2 (parallel [
            (set (reg/f:DI 0 ax [orig:154 D.6141 ] [154])
                (plus:DI (reg/f:DI 0 ax [404])
                    (reg:DI 2 cx [orig:153 D.6140 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:76 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:153 D.6140 ] [153]))
        (nil)))
(insn 109 108 110 2 (set (reg/f:DI 0 ax [orig:155 D.6142 ] [155])
        (mem/f:DI (reg/f:DI 0 ax [orig:154 D.6141 ] [154]) [0 *_77+0 S8 A64])) h_swap.cpp:76 89 {*movdi_internal}
     (nil))
(insn 110 109 111 2 (set (reg:QI 0 ax [orig:156 D.6143 ] [156])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:155 D.6142 ] [155])
                (const_int 7 [0x7])) [0 _78->spare3.character+1 S1 A8])) h_swap.cpp:76 93 {*movqi_internal}
     (nil))
(insn 111 110 112 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:151 D.6142 ] [151])
                (const_int 6 [0x6])) [0 _74->spare3.character+0 S1 A16])
        (reg:QI 0 ax [orig:156 D.6143 ] [156])) h_swap.cpp:76 93 {*movqi_internal}
     (nil))
(insn 112 111 113 2 (set (reg:SI 0 ax [405])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:77 90 {*movsi_internal}
     (nil))
(insn 113 112 114 2 (set (reg:DI 0 ax [orig:157 D.6140 ] [157])
        (sign_extend:DI (reg:SI 0 ax [405]))) h_swap.cpp:77 142 {*extendsidi2_rex64}
     (nil))
(insn 114 113 115 2 (parallel [
            (set (reg:DI 1 dx [orig:158 D.6140 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:157 D.6140 ] [157])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:77 512 {*ashldi3_1}
     (nil))
(insn 115 114 116 2 (set (reg/f:DI 0 ax [406])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:77 89 {*movdi_internal}
     (nil))
(insn 116 115 117 2 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.6141 ] [159])
                (plus:DI (reg/f:DI 0 ax [406])
                    (reg:DI 1 dx [orig:158 D.6140 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:77 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:158 D.6140 ] [158]))
        (nil)))
(insn 117 116 118 2 (set (reg/f:DI 0 ax [orig:160 D.6142 ] [160])
        (mem/f:DI (reg/f:DI 0 ax [orig:159 D.6141 ] [159]) [0 *_83+0 S8 A64])) h_swap.cpp:77 89 {*movdi_internal}
     (nil))
(insn 118 117 119 2 (parallel [
            (set (reg/f:DI 1 dx [orig:161 D.6142 ] [161])
                (plus:DI (reg/f:DI 0 ax [orig:160 D.6142 ] [160])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:77 218 {*adddi_1}
     (nil))
(insn 119 118 120 2 (set (reg:SI 0 ax [407])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:77 90 {*movsi_internal}
     (nil))
(insn 120 119 121 2 (set (reg:DI 0 ax [orig:162 D.6140 ] [162])
        (sign_extend:DI (reg:SI 0 ax [407]))) h_swap.cpp:77 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 2 (parallel [
            (set (reg:DI 2 cx [orig:163 D.6140 ] [163])
                (ashift:DI (reg:DI 0 ax [orig:162 D.6140 ] [162])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:77 512 {*ashldi3_1}
     (nil))
(insn 122 121 123 2 (set (reg/f:DI 0 ax [408])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:77 89 {*movdi_internal}
     (nil))
(insn 123 122 124 2 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.6141 ] [164])
                (plus:DI (reg/f:DI 0 ax [408])
                    (reg:DI 2 cx [orig:163 D.6140 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:77 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:163 D.6140 ] [163]))
        (nil)))
(insn 124 123 125 2 (set (reg/f:DI 0 ax [orig:165 D.6142 ] [165])
        (mem/f:DI (reg/f:DI 0 ax [orig:164 D.6141 ] [164]) [0 *_88+0 S8 A64])) h_swap.cpp:77 89 {*movdi_internal}
     (nil))
(insn 125 124 126 2 (set (reg:QI 0 ax [orig:166 D.6143 ] [166])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:165 D.6142 ] [165])
                (const_int 6 [0x6])) [0 _89->spare3.character+0 S1 A16])) h_swap.cpp:77 93 {*movqi_internal}
     (nil))
(insn 126 125 127 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:161 D.6142 ] [161])
                (const_int 7 [0x7])) [0 _85->spare3.character+1 S1 A8])
        (reg:QI 0 ax [orig:166 D.6143 ] [166])) h_swap.cpp:77 93 {*movqi_internal}
     (nil))
(insn 127 126 128 2 (set (reg:SI 0 ax [409])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:79 90 {*movsi_internal}
     (nil))
(insn 128 127 129 2 (set (reg:DI 0 ax [orig:167 D.6140 ] [167])
        (sign_extend:DI (reg:SI 0 ax [409]))) h_swap.cpp:79 142 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 2 (parallel [
            (set (reg:DI 1 dx [orig:168 D.6140 ] [168])
                (ashift:DI (reg:DI 0 ax [orig:167 D.6140 ] [167])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 130 129 131 2 (set (reg/f:DI 0 ax [410])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:79 89 {*movdi_internal}
     (nil))
(insn 131 130 132 2 (parallel [
            (set (reg/f:DI 0 ax [orig:169 D.6141 ] [169])
                (plus:DI (reg/f:DI 0 ax [410])
                    (reg:DI 1 dx [orig:168 D.6140 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:168 D.6140 ] [168]))
        (nil)))
(insn 132 131 133 2 (set (reg/f:DI 0 ax [orig:170 D.6142 ] [170])
        (mem/f:DI (reg/f:DI 0 ax [orig:169 D.6141 ] [169]) [0 *_94+0 S8 A64])) h_swap.cpp:79 89 {*movdi_internal}
     (nil))
(insn 133 132 134 2 (parallel [
            (set (reg/f:DI 1 dx [orig:171 D.6142 ] [171])
                (plus:DI (reg/f:DI 0 ax [orig:170 D.6142 ] [170])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:79 218 {*adddi_1}
     (nil))
(insn 134 133 135 2 (set (reg:SI 0 ax [411])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:79 90 {*movsi_internal}
     (nil))
(insn 135 134 136 2 (set (reg:DI 0 ax [orig:172 D.6140 ] [172])
        (sign_extend:DI (reg:SI 0 ax [411]))) h_swap.cpp:79 142 {*extendsidi2_rex64}
     (nil))
(insn 136 135 137 2 (parallel [
            (set (reg:DI 2 cx [orig:173 D.6140 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:172 D.6140 ] [172])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 137 136 138 2 (set (reg/f:DI 0 ax [412])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:79 89 {*movdi_internal}
     (nil))
(insn 138 137 139 2 (parallel [
            (set (reg/f:DI 0 ax [orig:174 D.6141 ] [174])
                (plus:DI (reg/f:DI 0 ax [412])
                    (reg:DI 2 cx [orig:173 D.6140 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:173 D.6140 ] [173]))
        (nil)))
(insn 139 138 140 2 (set (reg/f:DI 0 ax [orig:175 D.6142 ] [175])
        (mem/f:DI (reg/f:DI 0 ax [orig:174 D.6141 ] [174]) [0 *_99+0 S8 A64])) h_swap.cpp:79 89 {*movdi_internal}
     (nil))
(insn 140 139 141 2 (set (reg:QI 0 ax [orig:176 D.6143 ] [176])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:175 D.6142 ] [175])
                (const_int 11 [0xb])) [0 _100->ctcount.character+3 S1 A8])) h_swap.cpp:79 93 {*movqi_internal}
     (nil))
(insn 141 140 142 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:171 D.6142 ] [171])
                (const_int 8 [0x8])) [0 _96->ctcount.character+0 S1 A32])
        (reg:QI 0 ax [orig:176 D.6143 ] [176])) h_swap.cpp:79 93 {*movqi_internal}
     (nil))
(insn 142 141 143 2 (set (reg:SI 0 ax [413])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:80 90 {*movsi_internal}
     (nil))
(insn 143 142 144 2 (set (reg:DI 0 ax [orig:177 D.6140 ] [177])
        (sign_extend:DI (reg:SI 0 ax [413]))) h_swap.cpp:80 142 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 2 (parallel [
            (set (reg:DI 1 dx [orig:178 D.6140 ] [178])
                (ashift:DI (reg:DI 0 ax [orig:177 D.6140 ] [177])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:80 512 {*ashldi3_1}
     (nil))
(insn 145 144 146 2 (set (reg/f:DI 0 ax [414])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:80 89 {*movdi_internal}
     (nil))
(insn 146 145 147 2 (parallel [
            (set (reg/f:DI 0 ax [orig:179 D.6141 ] [179])
                (plus:DI (reg/f:DI 0 ax [414])
                    (reg:DI 1 dx [orig:178 D.6140 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:80 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:178 D.6140 ] [178]))
        (nil)))
(insn 147 146 148 2 (set (reg/f:DI 0 ax [orig:180 D.6142 ] [180])
        (mem/f:DI (reg/f:DI 0 ax [orig:179 D.6141 ] [179]) [0 *_105+0 S8 A64])) h_swap.cpp:80 89 {*movdi_internal}
     (nil))
(insn 148 147 149 2 (parallel [
            (set (reg/f:DI 1 dx [orig:181 D.6142 ] [181])
                (plus:DI (reg/f:DI 0 ax [orig:180 D.6142 ] [180])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:80 218 {*adddi_1}
     (nil))
(insn 149 148 150 2 (set (reg:SI 0 ax [415])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:80 90 {*movsi_internal}
     (nil))
(insn 150 149 151 2 (set (reg:DI 0 ax [orig:182 D.6140 ] [182])
        (sign_extend:DI (reg:SI 0 ax [415]))) h_swap.cpp:80 142 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 2 (parallel [
            (set (reg:DI 2 cx [orig:183 D.6140 ] [183])
                (ashift:DI (reg:DI 0 ax [orig:182 D.6140 ] [182])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:80 512 {*ashldi3_1}
     (nil))
(insn 152 151 153 2 (set (reg/f:DI 0 ax [416])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:80 89 {*movdi_internal}
     (nil))
(insn 153 152 154 2 (parallel [
            (set (reg/f:DI 0 ax [orig:184 D.6141 ] [184])
                (plus:DI (reg/f:DI 0 ax [416])
                    (reg:DI 2 cx [orig:183 D.6140 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:80 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:183 D.6140 ] [183]))
        (nil)))
(insn 154 153 155 2 (set (reg/f:DI 0 ax [orig:185 D.6142 ] [185])
        (mem/f:DI (reg/f:DI 0 ax [orig:184 D.6141 ] [184]) [0 *_110+0 S8 A64])) h_swap.cpp:80 89 {*movdi_internal}
     (nil))
(insn 155 154 156 2 (set (reg:QI 0 ax [orig:186 D.6143 ] [186])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:185 D.6142 ] [185])
                (const_int 10 [0xa])) [0 _111->ctcount.character+2 S1 A16])) h_swap.cpp:80 93 {*movqi_internal}
     (nil))
(insn 156 155 157 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:181 D.6142 ] [181])
                (const_int 9 [0x9])) [0 _107->ctcount.character+1 S1 A8])
        (reg:QI 0 ax [orig:186 D.6143 ] [186])) h_swap.cpp:80 93 {*movqi_internal}
     (nil))
(insn 157 156 158 2 (set (reg:SI 0 ax [417])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:81 90 {*movsi_internal}
     (nil))
(insn 158 157 159 2 (set (reg:DI 0 ax [orig:187 D.6140 ] [187])
        (sign_extend:DI (reg:SI 0 ax [417]))) h_swap.cpp:81 142 {*extendsidi2_rex64}
     (nil))
(insn 159 158 160 2 (parallel [
            (set (reg:DI 1 dx [orig:188 D.6140 ] [188])
                (ashift:DI (reg:DI 0 ax [orig:187 D.6140 ] [187])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:81 512 {*ashldi3_1}
     (nil))
(insn 160 159 161 2 (set (reg/f:DI 0 ax [418])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:81 89 {*movdi_internal}
     (nil))
(insn 161 160 162 2 (parallel [
            (set (reg/f:DI 0 ax [orig:189 D.6141 ] [189])
                (plus:DI (reg/f:DI 0 ax [418])
                    (reg:DI 1 dx [orig:188 D.6140 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:81 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:188 D.6140 ] [188]))
        (nil)))
(insn 162 161 163 2 (set (reg/f:DI 0 ax [orig:190 D.6142 ] [190])
        (mem/f:DI (reg/f:DI 0 ax [orig:189 D.6141 ] [189]) [0 *_116+0 S8 A64])) h_swap.cpp:81 89 {*movdi_internal}
     (nil))
(insn 163 162 164 2 (parallel [
            (set (reg/f:DI 1 dx [orig:191 D.6142 ] [191])
                (plus:DI (reg/f:DI 0 ax [orig:190 D.6142 ] [190])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:81 218 {*adddi_1}
     (nil))
(insn 164 163 165 2 (set (reg:SI 0 ax [419])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:81 90 {*movsi_internal}
     (nil))
(insn 165 164 166 2 (set (reg:DI 0 ax [orig:192 D.6140 ] [192])
        (sign_extend:DI (reg:SI 0 ax [419]))) h_swap.cpp:81 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 2 (parallel [
            (set (reg:DI 2 cx [orig:193 D.6140 ] [193])
                (ashift:DI (reg:DI 0 ax [orig:192 D.6140 ] [192])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:81 512 {*ashldi3_1}
     (nil))
(insn 167 166 168 2 (set (reg/f:DI 0 ax [420])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:81 89 {*movdi_internal}
     (nil))
(insn 168 167 169 2 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.6141 ] [194])
                (plus:DI (reg/f:DI 0 ax [420])
                    (reg:DI 2 cx [orig:193 D.6140 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:81 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:193 D.6140 ] [193]))
        (nil)))
(insn 169 168 170 2 (set (reg/f:DI 0 ax [orig:195 D.6142 ] [195])
        (mem/f:DI (reg/f:DI 0 ax [orig:194 D.6141 ] [194]) [0 *_121+0 S8 A64])) h_swap.cpp:81 89 {*movdi_internal}
     (nil))
(insn 170 169 171 2 (set (reg:QI 0 ax [orig:196 D.6143 ] [196])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:195 D.6142 ] [195])
                (const_int 9 [0x9])) [0 _122->ctcount.character+1 S1 A8])) h_swap.cpp:81 93 {*movqi_internal}
     (nil))
(insn 171 170 172 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:191 D.6142 ] [191])
                (const_int 10 [0xa])) [0 _118->ctcount.character+2 S1 A16])
        (reg:QI 0 ax [orig:196 D.6143 ] [196])) h_swap.cpp:81 93 {*movqi_internal}
     (nil))
(insn 172 171 173 2 (set (reg:SI 0 ax [421])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:82 90 {*movsi_internal}
     (nil))
(insn 173 172 174 2 (set (reg:DI 0 ax [orig:197 D.6140 ] [197])
        (sign_extend:DI (reg:SI 0 ax [421]))) h_swap.cpp:82 142 {*extendsidi2_rex64}
     (nil))
(insn 174 173 175 2 (parallel [
            (set (reg:DI 1 dx [orig:198 D.6140 ] [198])
                (ashift:DI (reg:DI 0 ax [orig:197 D.6140 ] [197])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:82 512 {*ashldi3_1}
     (nil))
(insn 175 174 176 2 (set (reg/f:DI 0 ax [422])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:82 89 {*movdi_internal}
     (nil))
(insn 176 175 177 2 (parallel [
            (set (reg/f:DI 0 ax [orig:199 D.6141 ] [199])
                (plus:DI (reg/f:DI 0 ax [422])
                    (reg:DI 1 dx [orig:198 D.6140 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:82 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:198 D.6140 ] [198]))
        (nil)))
(insn 177 176 178 2 (set (reg/f:DI 0 ax [orig:200 D.6142 ] [200])
        (mem/f:DI (reg/f:DI 0 ax [orig:199 D.6141 ] [199]) [0 *_127+0 S8 A64])) h_swap.cpp:82 89 {*movdi_internal}
     (nil))
(insn 178 177 179 2 (parallel [
            (set (reg/f:DI 1 dx [orig:201 D.6142 ] [201])
                (plus:DI (reg/f:DI 0 ax [orig:200 D.6142 ] [200])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:82 218 {*adddi_1}
     (nil))
(insn 179 178 180 2 (set (reg:SI 0 ax [423])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:82 90 {*movsi_internal}
     (nil))
(insn 180 179 181 2 (set (reg:DI 0 ax [orig:202 D.6140 ] [202])
        (sign_extend:DI (reg:SI 0 ax [423]))) h_swap.cpp:82 142 {*extendsidi2_rex64}
     (nil))
(insn 181 180 182 2 (parallel [
            (set (reg:DI 2 cx [orig:203 D.6140 ] [203])
                (ashift:DI (reg:DI 0 ax [orig:202 D.6140 ] [202])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:82 512 {*ashldi3_1}
     (nil))
(insn 182 181 183 2 (set (reg/f:DI 0 ax [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:82 89 {*movdi_internal}
     (nil))
(insn 183 182 184 2 (parallel [
            (set (reg/f:DI 0 ax [orig:204 D.6141 ] [204])
                (plus:DI (reg/f:DI 0 ax [424])
                    (reg:DI 2 cx [orig:203 D.6140 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:82 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:203 D.6140 ] [203]))
        (nil)))
(insn 184 183 185 2 (set (reg/f:DI 0 ax [orig:205 D.6142 ] [205])
        (mem/f:DI (reg/f:DI 0 ax [orig:204 D.6141 ] [204]) [0 *_132+0 S8 A64])) h_swap.cpp:82 89 {*movdi_internal}
     (nil))
(insn 185 184 186 2 (set (reg:QI 0 ax [orig:206 D.6143 ] [206])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:205 D.6142 ] [205])
                (const_int 8 [0x8])) [0 _133->ctcount.character+0 S1 A32])) h_swap.cpp:82 93 {*movqi_internal}
     (nil))
(insn 186 185 187 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:201 D.6142 ] [201])
                (const_int 11 [0xb])) [0 _129->ctcount.character+3 S1 A8])
        (reg:QI 0 ax [orig:206 D.6143 ] [206])) h_swap.cpp:82 93 {*movqi_internal}
     (nil))
(insn 187 186 188 2 (set (reg:SI 0 ax [425])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:84 90 {*movsi_internal}
     (nil))
(insn 188 187 189 2 (set (reg:DI 0 ax [orig:207 D.6140 ] [207])
        (sign_extend:DI (reg:SI 0 ax [425]))) h_swap.cpp:84 142 {*extendsidi2_rex64}
     (nil))
(insn 189 188 190 2 (parallel [
            (set (reg:DI 1 dx [orig:208 D.6140 ] [208])
                (ashift:DI (reg:DI 0 ax [orig:207 D.6140 ] [207])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:84 512 {*ashldi3_1}
     (nil))
(insn 190 189 191 2 (set (reg/f:DI 0 ax [426])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:84 89 {*movdi_internal}
     (nil))
(insn 191 190 192 2 (parallel [
            (set (reg/f:DI 0 ax [orig:209 D.6141 ] [209])
                (plus:DI (reg/f:DI 0 ax [426])
                    (reg:DI 1 dx [orig:208 D.6140 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:84 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:208 D.6140 ] [208]))
        (nil)))
(insn 192 191 193 2 (set (reg/f:DI 0 ax [orig:210 D.6142 ] [210])
        (mem/f:DI (reg/f:DI 0 ax [orig:209 D.6141 ] [209]) [0 *_138+0 S8 A64])) h_swap.cpp:84 89 {*movdi_internal}
     (nil))
(insn 193 192 194 2 (parallel [
            (set (reg/f:DI 1 dx [orig:211 D.6142 ] [211])
                (plus:DI (reg/f:DI 0 ax [orig:210 D.6142 ] [210])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:84 218 {*adddi_1}
     (nil))
(insn 194 193 195 2 (set (reg:SI 0 ax [427])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:84 90 {*movsi_internal}
     (nil))
(insn 195 194 196 2 (set (reg:DI 0 ax [orig:212 D.6140 ] [212])
        (sign_extend:DI (reg:SI 0 ax [427]))) h_swap.cpp:84 142 {*extendsidi2_rex64}
     (nil))
(insn 196 195 197 2 (parallel [
            (set (reg:DI 2 cx [orig:213 D.6140 ] [213])
                (ashift:DI (reg:DI 0 ax [orig:212 D.6140 ] [212])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:84 512 {*ashldi3_1}
     (nil))
(insn 197 196 198 2 (set (reg/f:DI 0 ax [428])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:84 89 {*movdi_internal}
     (nil))
(insn 198 197 199 2 (parallel [
            (set (reg/f:DI 0 ax [orig:214 D.6141 ] [214])
                (plus:DI (reg/f:DI 0 ax [428])
                    (reg:DI 2 cx [orig:213 D.6140 ] [213])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:84 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:213 D.6140 ] [213]))
        (nil)))
(insn 199 198 200 2 (set (reg/f:DI 0 ax [orig:215 D.6142 ] [215])
        (mem/f:DI (reg/f:DI 0 ax [orig:214 D.6141 ] [214]) [0 *_143+0 S8 A64])) h_swap.cpp:84 89 {*movdi_internal}
     (nil))
(insn 200 199 201 2 (set (reg:QI 0 ax [orig:216 D.6143 ] [216])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:215 D.6142 ] [215])
                (const_int 15 [0xf])) [0 _144->lpval.character+3 S1 A8])) h_swap.cpp:84 93 {*movqi_internal}
     (nil))
(insn 201 200 202 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:211 D.6142 ] [211])
                (const_int 12 [0xc])) [0 _140->lpval.character+0 S1 A32])
        (reg:QI 0 ax [orig:216 D.6143 ] [216])) h_swap.cpp:84 93 {*movqi_internal}
     (nil))
(insn 202 201 203 2 (set (reg:SI 0 ax [429])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:85 90 {*movsi_internal}
     (nil))
(insn 203 202 204 2 (set (reg:DI 0 ax [orig:217 D.6140 ] [217])
        (sign_extend:DI (reg:SI 0 ax [429]))) h_swap.cpp:85 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 2 (parallel [
            (set (reg:DI 1 dx [orig:218 D.6140 ] [218])
                (ashift:DI (reg:DI 0 ax [orig:217 D.6140 ] [217])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:85 512 {*ashldi3_1}
     (nil))
(insn 205 204 206 2 (set (reg/f:DI 0 ax [430])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:85 89 {*movdi_internal}
     (nil))
(insn 206 205 207 2 (parallel [
            (set (reg/f:DI 0 ax [orig:219 D.6141 ] [219])
                (plus:DI (reg/f:DI 0 ax [430])
                    (reg:DI 1 dx [orig:218 D.6140 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:85 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:218 D.6140 ] [218]))
        (nil)))
(insn 207 206 208 2 (set (reg/f:DI 0 ax [orig:220 D.6142 ] [220])
        (mem/f:DI (reg/f:DI 0 ax [orig:219 D.6141 ] [219]) [0 *_149+0 S8 A64])) h_swap.cpp:85 89 {*movdi_internal}
     (nil))
(insn 208 207 209 2 (parallel [
            (set (reg/f:DI 1 dx [orig:221 D.6142 ] [221])
                (plus:DI (reg/f:DI 0 ax [orig:220 D.6142 ] [220])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:85 218 {*adddi_1}
     (nil))
(insn 209 208 210 2 (set (reg:SI 0 ax [431])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:85 90 {*movsi_internal}
     (nil))
(insn 210 209 211 2 (set (reg:DI 0 ax [orig:222 D.6140 ] [222])
        (sign_extend:DI (reg:SI 0 ax [431]))) h_swap.cpp:85 142 {*extendsidi2_rex64}
     (nil))
(insn 211 210 212 2 (parallel [
            (set (reg:DI 2 cx [orig:223 D.6140 ] [223])
                (ashift:DI (reg:DI 0 ax [orig:222 D.6140 ] [222])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:85 512 {*ashldi3_1}
     (nil))
(insn 212 211 213 2 (set (reg/f:DI 0 ax [432])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:85 89 {*movdi_internal}
     (nil))
(insn 213 212 214 2 (parallel [
            (set (reg/f:DI 0 ax [orig:224 D.6141 ] [224])
                (plus:DI (reg/f:DI 0 ax [432])
                    (reg:DI 2 cx [orig:223 D.6140 ] [223])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:85 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:223 D.6140 ] [223]))
        (nil)))
(insn 214 213 215 2 (set (reg/f:DI 0 ax [orig:225 D.6142 ] [225])
        (mem/f:DI (reg/f:DI 0 ax [orig:224 D.6141 ] [224]) [0 *_154+0 S8 A64])) h_swap.cpp:85 89 {*movdi_internal}
     (nil))
(insn 215 214 216 2 (set (reg:QI 0 ax [orig:226 D.6143 ] [226])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:225 D.6142 ] [225])
                (const_int 14 [0xe])) [0 _155->lpval.character+2 S1 A16])) h_swap.cpp:85 93 {*movqi_internal}
     (nil))
(insn 216 215 217 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:221 D.6142 ] [221])
                (const_int 13 [0xd])) [0 _151->lpval.character+1 S1 A8])
        (reg:QI 0 ax [orig:226 D.6143 ] [226])) h_swap.cpp:85 93 {*movqi_internal}
     (nil))
(insn 217 216 218 2 (set (reg:SI 0 ax [433])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:86 90 {*movsi_internal}
     (nil))
(insn 218 217 219 2 (set (reg:DI 0 ax [orig:227 D.6140 ] [227])
        (sign_extend:DI (reg:SI 0 ax [433]))) h_swap.cpp:86 142 {*extendsidi2_rex64}
     (nil))
(insn 219 218 220 2 (parallel [
            (set (reg:DI 1 dx [orig:228 D.6140 ] [228])
                (ashift:DI (reg:DI 0 ax [orig:227 D.6140 ] [227])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:86 512 {*ashldi3_1}
     (nil))
(insn 220 219 221 2 (set (reg/f:DI 0 ax [434])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:86 89 {*movdi_internal}
     (nil))
(insn 221 220 222 2 (parallel [
            (set (reg/f:DI 0 ax [orig:229 D.6141 ] [229])
                (plus:DI (reg/f:DI 0 ax [434])
                    (reg:DI 1 dx [orig:228 D.6140 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:86 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:228 D.6140 ] [228]))
        (nil)))
(insn 222 221 223 2 (set (reg/f:DI 0 ax [orig:230 D.6142 ] [230])
        (mem/f:DI (reg/f:DI 0 ax [orig:229 D.6141 ] [229]) [0 *_160+0 S8 A64])) h_swap.cpp:86 89 {*movdi_internal}
     (nil))
(insn 223 222 224 2 (parallel [
            (set (reg/f:DI 1 dx [orig:231 D.6142 ] [231])
                (plus:DI (reg/f:DI 0 ax [orig:230 D.6142 ] [230])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:86 218 {*adddi_1}
     (nil))
(insn 224 223 225 2 (set (reg:SI 0 ax [435])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:86 90 {*movsi_internal}
     (nil))
(insn 225 224 226 2 (set (reg:DI 0 ax [orig:232 D.6140 ] [232])
        (sign_extend:DI (reg:SI 0 ax [435]))) h_swap.cpp:86 142 {*extendsidi2_rex64}
     (nil))
(insn 226 225 227 2 (parallel [
            (set (reg:DI 2 cx [orig:233 D.6140 ] [233])
                (ashift:DI (reg:DI 0 ax [orig:232 D.6140 ] [232])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:86 512 {*ashldi3_1}
     (nil))
(insn 227 226 228 2 (set (reg/f:DI 0 ax [436])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:86 89 {*movdi_internal}
     (nil))
(insn 228 227 229 2 (parallel [
            (set (reg/f:DI 0 ax [orig:234 D.6141 ] [234])
                (plus:DI (reg/f:DI 0 ax [436])
                    (reg:DI 2 cx [orig:233 D.6140 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:86 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:233 D.6140 ] [233]))
        (nil)))
(insn 229 228 230 2 (set (reg/f:DI 0 ax [orig:235 D.6142 ] [235])
        (mem/f:DI (reg/f:DI 0 ax [orig:234 D.6141 ] [234]) [0 *_165+0 S8 A64])) h_swap.cpp:86 89 {*movdi_internal}
     (nil))
(insn 230 229 231 2 (set (reg:QI 0 ax [orig:236 D.6143 ] [236])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:235 D.6142 ] [235])
                (const_int 13 [0xd])) [0 _166->lpval.character+1 S1 A8])) h_swap.cpp:86 93 {*movqi_internal}
     (nil))
(insn 231 230 232 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:231 D.6142 ] [231])
                (const_int 14 [0xe])) [0 _162->lpval.character+2 S1 A16])
        (reg:QI 0 ax [orig:236 D.6143 ] [236])) h_swap.cpp:86 93 {*movqi_internal}
     (nil))
(insn 232 231 233 2 (set (reg:SI 0 ax [437])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:87 90 {*movsi_internal}
     (nil))
(insn 233 232 234 2 (set (reg:DI 0 ax [orig:237 D.6140 ] [237])
        (sign_extend:DI (reg:SI 0 ax [437]))) h_swap.cpp:87 142 {*extendsidi2_rex64}
     (nil))
(insn 234 233 235 2 (parallel [
            (set (reg:DI 1 dx [orig:238 D.6140 ] [238])
                (ashift:DI (reg:DI 0 ax [orig:237 D.6140 ] [237])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:87 512 {*ashldi3_1}
     (nil))
(insn 235 234 236 2 (set (reg/f:DI 0 ax [438])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:87 89 {*movdi_internal}
     (nil))
(insn 236 235 237 2 (parallel [
            (set (reg/f:DI 0 ax [orig:239 D.6141 ] [239])
                (plus:DI (reg/f:DI 0 ax [438])
                    (reg:DI 1 dx [orig:238 D.6140 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:87 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:238 D.6140 ] [238]))
        (nil)))
(insn 237 236 238 2 (set (reg/f:DI 0 ax [orig:240 D.6142 ] [240])
        (mem/f:DI (reg/f:DI 0 ax [orig:239 D.6141 ] [239]) [0 *_171+0 S8 A64])) h_swap.cpp:87 89 {*movdi_internal}
     (nil))
(insn 238 237 239 2 (parallel [
            (set (reg/f:DI 1 dx [orig:241 D.6142 ] [241])
                (plus:DI (reg/f:DI 0 ax [orig:240 D.6142 ] [240])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:87 218 {*adddi_1}
     (nil))
(insn 239 238 240 2 (set (reg:SI 0 ax [439])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:87 90 {*movsi_internal}
     (nil))
(insn 240 239 241 2 (set (reg:DI 0 ax [orig:242 D.6140 ] [242])
        (sign_extend:DI (reg:SI 0 ax [439]))) h_swap.cpp:87 142 {*extendsidi2_rex64}
     (nil))
(insn 241 240 242 2 (parallel [
            (set (reg:DI 2 cx [orig:243 D.6140 ] [243])
                (ashift:DI (reg:DI 0 ax [orig:242 D.6140 ] [242])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:87 512 {*ashldi3_1}
     (nil))
(insn 242 241 243 2 (set (reg/f:DI 0 ax [440])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:87 89 {*movdi_internal}
     (nil))
(insn 243 242 244 2 (parallel [
            (set (reg/f:DI 0 ax [orig:244 D.6141 ] [244])
                (plus:DI (reg/f:DI 0 ax [440])
                    (reg:DI 2 cx [orig:243 D.6140 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:87 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:243 D.6140 ] [243]))
        (nil)))
(insn 244 243 245 2 (set (reg/f:DI 0 ax [orig:245 D.6142 ] [245])
        (mem/f:DI (reg/f:DI 0 ax [orig:244 D.6141 ] [244]) [0 *_176+0 S8 A64])) h_swap.cpp:87 89 {*movdi_internal}
     (nil))
(insn 245 244 246 2 (set (reg:QI 0 ax [orig:246 D.6143 ] [246])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:245 D.6142 ] [245])
                (const_int 12 [0xc])) [0 _177->lpval.character+0 S1 A32])) h_swap.cpp:87 93 {*movqi_internal}
     (nil))
(insn 246 245 247 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:241 D.6142 ] [241])
                (const_int 15 [0xf])) [0 _173->lpval.character+3 S1 A8])
        (reg:QI 0 ax [orig:246 D.6143 ] [246])) h_swap.cpp:87 93 {*movqi_internal}
     (nil))
(insn 247 246 248 2 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:89 90 {*movsi_internal}
     (nil))
(insn 248 247 249 2 (set (reg:DI 0 ax [orig:247 D.6140 ] [247])
        (sign_extend:DI (reg:SI 0 ax [441]))) h_swap.cpp:89 142 {*extendsidi2_rex64}
     (nil))
(insn 249 248 250 2 (parallel [
            (set (reg:DI 1 dx [orig:248 D.6140 ] [248])
                (ashift:DI (reg:DI 0 ax [orig:247 D.6140 ] [247])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:89 512 {*ashldi3_1}
     (nil))
(insn 250 249 251 2 (set (reg/f:DI 0 ax [442])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:89 89 {*movdi_internal}
     (nil))
(insn 251 250 252 2 (parallel [
            (set (reg/f:DI 0 ax [orig:249 D.6141 ] [249])
                (plus:DI (reg/f:DI 0 ax [442])
                    (reg:DI 1 dx [orig:248 D.6140 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:89 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:248 D.6140 ] [248]))
        (nil)))
(insn 252 251 253 2 (set (reg/f:DI 0 ax [orig:250 D.6142 ] [250])
        (mem/f:DI (reg/f:DI 0 ax [orig:249 D.6141 ] [249]) [0 *_182+0 S8 A64])) h_swap.cpp:89 89 {*movdi_internal}
     (nil))
(insn 253 252 254 2 (parallel [
            (set (reg/f:DI 1 dx [orig:251 D.6142 ] [251])
                (plus:DI (reg/f:DI 0 ax [orig:250 D.6142 ] [250])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:89 218 {*adddi_1}
     (nil))
(insn 254 253 255 2 (set (reg:SI 0 ax [443])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:89 90 {*movsi_internal}
     (nil))
(insn 255 254 256 2 (set (reg:DI 0 ax [orig:252 D.6140 ] [252])
        (sign_extend:DI (reg:SI 0 ax [443]))) h_swap.cpp:89 142 {*extendsidi2_rex64}
     (nil))
(insn 256 255 257 2 (parallel [
            (set (reg:DI 2 cx [orig:253 D.6140 ] [253])
                (ashift:DI (reg:DI 0 ax [orig:252 D.6140 ] [252])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:89 512 {*ashldi3_1}
     (nil))
(insn 257 256 258 2 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:89 89 {*movdi_internal}
     (nil))
(insn 258 257 259 2 (parallel [
            (set (reg/f:DI 0 ax [orig:254 D.6141 ] [254])
                (plus:DI (reg/f:DI 0 ax [444])
                    (reg:DI 2 cx [orig:253 D.6140 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:89 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:253 D.6140 ] [253]))
        (nil)))
(insn 259 258 260 2 (set (reg/f:DI 0 ax [orig:255 D.6142 ] [255])
        (mem/f:DI (reg/f:DI 0 ax [orig:254 D.6141 ] [254]) [0 *_187+0 S8 A64])) h_swap.cpp:89 89 {*movdi_internal}
     (nil))
(insn 260 259 261 2 (set (reg:QI 0 ax [orig:256 D.6143 ] [256])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:255 D.6142 ] [255])
                (const_int 19 [0x13])) [0 _188->rpval.character+3 S1 A8])) h_swap.cpp:89 93 {*movqi_internal}
     (nil))
(insn 261 260 262 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:251 D.6142 ] [251])
                (const_int 16 [0x10])) [0 _184->rpval.character+0 S1 A32])
        (reg:QI 0 ax [orig:256 D.6143 ] [256])) h_swap.cpp:89 93 {*movqi_internal}
     (nil))
(insn 262 261 263 2 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:90 90 {*movsi_internal}
     (nil))
(insn 263 262 264 2 (set (reg:DI 0 ax [orig:257 D.6140 ] [257])
        (sign_extend:DI (reg:SI 0 ax [445]))) h_swap.cpp:90 142 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 2 (parallel [
            (set (reg:DI 1 dx [orig:258 D.6140 ] [258])
                (ashift:DI (reg:DI 0 ax [orig:257 D.6140 ] [257])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:90 512 {*ashldi3_1}
     (nil))
(insn 265 264 266 2 (set (reg/f:DI 0 ax [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:90 89 {*movdi_internal}
     (nil))
(insn 266 265 267 2 (parallel [
            (set (reg/f:DI 0 ax [orig:259 D.6141 ] [259])
                (plus:DI (reg/f:DI 0 ax [446])
                    (reg:DI 1 dx [orig:258 D.6140 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:90 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:258 D.6140 ] [258]))
        (nil)))
(insn 267 266 268 2 (set (reg/f:DI 0 ax [orig:260 D.6142 ] [260])
        (mem/f:DI (reg/f:DI 0 ax [orig:259 D.6141 ] [259]) [0 *_193+0 S8 A64])) h_swap.cpp:90 89 {*movdi_internal}
     (nil))
(insn 268 267 269 2 (parallel [
            (set (reg/f:DI 1 dx [orig:261 D.6142 ] [261])
                (plus:DI (reg/f:DI 0 ax [orig:260 D.6142 ] [260])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:90 218 {*adddi_1}
     (nil))
(insn 269 268 270 2 (set (reg:SI 0 ax [447])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:90 90 {*movsi_internal}
     (nil))
(insn 270 269 271 2 (set (reg:DI 0 ax [orig:262 D.6140 ] [262])
        (sign_extend:DI (reg:SI 0 ax [447]))) h_swap.cpp:90 142 {*extendsidi2_rex64}
     (nil))
(insn 271 270 272 2 (parallel [
            (set (reg:DI 2 cx [orig:263 D.6140 ] [263])
                (ashift:DI (reg:DI 0 ax [orig:262 D.6140 ] [262])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:90 512 {*ashldi3_1}
     (nil))
(insn 272 271 273 2 (set (reg/f:DI 0 ax [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:90 89 {*movdi_internal}
     (nil))
(insn 273 272 274 2 (parallel [
            (set (reg/f:DI 0 ax [orig:264 D.6141 ] [264])
                (plus:DI (reg/f:DI 0 ax [448])
                    (reg:DI 2 cx [orig:263 D.6140 ] [263])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:90 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:263 D.6140 ] [263]))
        (nil)))
(insn 274 273 275 2 (set (reg/f:DI 0 ax [orig:265 D.6142 ] [265])
        (mem/f:DI (reg/f:DI 0 ax [orig:264 D.6141 ] [264]) [0 *_198+0 S8 A64])) h_swap.cpp:90 89 {*movdi_internal}
     (nil))
(insn 275 274 276 2 (set (reg:QI 0 ax [orig:266 D.6143 ] [266])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:265 D.6142 ] [265])
                (const_int 18 [0x12])) [0 _199->rpval.character+2 S1 A16])) h_swap.cpp:90 93 {*movqi_internal}
     (nil))
(insn 276 275 277 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:261 D.6142 ] [261])
                (const_int 17 [0x11])) [0 _195->rpval.character+1 S1 A8])
        (reg:QI 0 ax [orig:266 D.6143 ] [266])) h_swap.cpp:90 93 {*movqi_internal}
     (nil))
(insn 277 276 278 2 (set (reg:SI 0 ax [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:91 90 {*movsi_internal}
     (nil))
(insn 278 277 279 2 (set (reg:DI 0 ax [orig:267 D.6140 ] [267])
        (sign_extend:DI (reg:SI 0 ax [449]))) h_swap.cpp:91 142 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 2 (parallel [
            (set (reg:DI 1 dx [orig:268 D.6140 ] [268])
                (ashift:DI (reg:DI 0 ax [orig:267 D.6140 ] [267])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:91 512 {*ashldi3_1}
     (nil))
(insn 280 279 281 2 (set (reg/f:DI 0 ax [450])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:91 89 {*movdi_internal}
     (nil))
(insn 281 280 282 2 (parallel [
            (set (reg/f:DI 0 ax [orig:269 D.6141 ] [269])
                (plus:DI (reg/f:DI 0 ax [450])
                    (reg:DI 1 dx [orig:268 D.6140 ] [268])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:91 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:268 D.6140 ] [268]))
        (nil)))
(insn 282 281 283 2 (set (reg/f:DI 0 ax [orig:270 D.6142 ] [270])
        (mem/f:DI (reg/f:DI 0 ax [orig:269 D.6141 ] [269]) [0 *_204+0 S8 A64])) h_swap.cpp:91 89 {*movdi_internal}
     (nil))
(insn 283 282 284 2 (parallel [
            (set (reg/f:DI 1 dx [orig:271 D.6142 ] [271])
                (plus:DI (reg/f:DI 0 ax [orig:270 D.6142 ] [270])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:91 218 {*adddi_1}
     (nil))
(insn 284 283 285 2 (set (reg:SI 0 ax [451])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:91 90 {*movsi_internal}
     (nil))
(insn 285 284 286 2 (set (reg:DI 0 ax [orig:272 D.6140 ] [272])
        (sign_extend:DI (reg:SI 0 ax [451]))) h_swap.cpp:91 142 {*extendsidi2_rex64}
     (nil))
(insn 286 285 287 2 (parallel [
            (set (reg:DI 2 cx [orig:273 D.6140 ] [273])
                (ashift:DI (reg:DI 0 ax [orig:272 D.6140 ] [272])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:91 512 {*ashldi3_1}
     (nil))
(insn 287 286 288 2 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:91 89 {*movdi_internal}
     (nil))
(insn 288 287 289 2 (parallel [
            (set (reg/f:DI 0 ax [orig:274 D.6141 ] [274])
                (plus:DI (reg/f:DI 0 ax [452])
                    (reg:DI 2 cx [orig:273 D.6140 ] [273])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:91 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:273 D.6140 ] [273]))
        (nil)))
(insn 289 288 290 2 (set (reg/f:DI 0 ax [orig:275 D.6142 ] [275])
        (mem/f:DI (reg/f:DI 0 ax [orig:274 D.6141 ] [274]) [0 *_209+0 S8 A64])) h_swap.cpp:91 89 {*movdi_internal}
     (nil))
(insn 290 289 291 2 (set (reg:QI 0 ax [orig:276 D.6143 ] [276])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:275 D.6142 ] [275])
                (const_int 17 [0x11])) [0 _210->rpval.character+1 S1 A8])) h_swap.cpp:91 93 {*movqi_internal}
     (nil))
(insn 291 290 292 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:271 D.6142 ] [271])
                (const_int 18 [0x12])) [0 _206->rpval.character+2 S1 A16])
        (reg:QI 0 ax [orig:276 D.6143 ] [276])) h_swap.cpp:91 93 {*movqi_internal}
     (nil))
(insn 292 291 293 2 (set (reg:SI 0 ax [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:92 90 {*movsi_internal}
     (nil))
(insn 293 292 294 2 (set (reg:DI 0 ax [orig:277 D.6140 ] [277])
        (sign_extend:DI (reg:SI 0 ax [453]))) h_swap.cpp:92 142 {*extendsidi2_rex64}
     (nil))
(insn 294 293 295 2 (parallel [
            (set (reg:DI 1 dx [orig:278 D.6140 ] [278])
                (ashift:DI (reg:DI 0 ax [orig:277 D.6140 ] [277])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:92 512 {*ashldi3_1}
     (nil))
(insn 295 294 296 2 (set (reg/f:DI 0 ax [454])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:92 89 {*movdi_internal}
     (nil))
(insn 296 295 297 2 (parallel [
            (set (reg/f:DI 0 ax [orig:279 D.6141 ] [279])
                (plus:DI (reg/f:DI 0 ax [454])
                    (reg:DI 1 dx [orig:278 D.6140 ] [278])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:92 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:278 D.6140 ] [278]))
        (nil)))
(insn 297 296 298 2 (set (reg/f:DI 0 ax [orig:280 D.6142 ] [280])
        (mem/f:DI (reg/f:DI 0 ax [orig:279 D.6141 ] [279]) [0 *_215+0 S8 A64])) h_swap.cpp:92 89 {*movdi_internal}
     (nil))
(insn 298 297 299 2 (parallel [
            (set (reg/f:DI 1 dx [orig:281 D.6142 ] [281])
                (plus:DI (reg/f:DI 0 ax [orig:280 D.6142 ] [280])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:92 218 {*adddi_1}
     (nil))
(insn 299 298 300 2 (set (reg:SI 0 ax [455])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:92 90 {*movsi_internal}
     (nil))
(insn 300 299 301 2 (set (reg:DI 0 ax [orig:282 D.6140 ] [282])
        (sign_extend:DI (reg:SI 0 ax [455]))) h_swap.cpp:92 142 {*extendsidi2_rex64}
     (nil))
(insn 301 300 302 2 (parallel [
            (set (reg:DI 2 cx [orig:283 D.6140 ] [283])
                (ashift:DI (reg:DI 0 ax [orig:282 D.6140 ] [282])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:92 512 {*ashldi3_1}
     (nil))
(insn 302 301 303 2 (set (reg/f:DI 0 ax [456])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:92 89 {*movdi_internal}
     (nil))
(insn 303 302 304 2 (parallel [
            (set (reg/f:DI 0 ax [orig:284 D.6141 ] [284])
                (plus:DI (reg/f:DI 0 ax [456])
                    (reg:DI 2 cx [orig:283 D.6140 ] [283])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:92 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:283 D.6140 ] [283]))
        (nil)))
(insn 304 303 305 2 (set (reg/f:DI 0 ax [orig:285 D.6142 ] [285])
        (mem/f:DI (reg/f:DI 0 ax [orig:284 D.6141 ] [284]) [0 *_220+0 S8 A64])) h_swap.cpp:92 89 {*movdi_internal}
     (nil))
(insn 305 304 306 2 (set (reg:QI 0 ax [orig:286 D.6143 ] [286])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:285 D.6142 ] [285])
                (const_int 16 [0x10])) [0 _221->rpval.character+0 S1 A32])) h_swap.cpp:92 93 {*movqi_internal}
     (nil))
(insn 306 305 307 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:281 D.6142 ] [281])
                (const_int 19 [0x13])) [0 _217->rpval.character+3 S1 A8])
        (reg:QI 0 ax [orig:286 D.6143 ] [286])) h_swap.cpp:92 93 {*movqi_internal}
     (nil))
(insn 307 306 308 2 (set (reg:SI 0 ax [457])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:94 90 {*movsi_internal}
     (nil))
(insn 308 307 309 2 (set (reg:DI 0 ax [orig:287 D.6140 ] [287])
        (sign_extend:DI (reg:SI 0 ax [457]))) h_swap.cpp:94 142 {*extendsidi2_rex64}
     (nil))
(insn 309 308 310 2 (parallel [
            (set (reg:DI 1 dx [orig:288 D.6140 ] [288])
                (ashift:DI (reg:DI 0 ax [orig:287 D.6140 ] [287])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:94 512 {*ashldi3_1}
     (nil))
(insn 310 309 311 2 (set (reg/f:DI 0 ax [458])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:94 89 {*movdi_internal}
     (nil))
(insn 311 310 312 2 (parallel [
            (set (reg/f:DI 0 ax [orig:289 D.6141 ] [289])
                (plus:DI (reg/f:DI 0 ax [458])
                    (reg:DI 1 dx [orig:288 D.6140 ] [288])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:94 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:288 D.6140 ] [288]))
        (nil)))
(insn 312 311 313 2 (set (reg/f:DI 0 ax [orig:290 D.6142 ] [290])
        (mem/f:DI (reg/f:DI 0 ax [orig:289 D.6141 ] [289]) [0 *_226+0 S8 A64])) h_swap.cpp:94 89 {*movdi_internal}
     (nil))
(insn 313 312 314 2 (parallel [
            (set (reg/f:DI 1 dx [orig:291 D.6142 ] [291])
                (plus:DI (reg/f:DI 0 ax [orig:290 D.6142 ] [290])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:94 218 {*adddi_1}
     (nil))
(insn 314 313 315 2 (set (reg:SI 0 ax [459])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:94 90 {*movsi_internal}
     (nil))
(insn 315 314 316 2 (set (reg:DI 0 ax [orig:292 D.6140 ] [292])
        (sign_extend:DI (reg:SI 0 ax [459]))) h_swap.cpp:94 142 {*extendsidi2_rex64}
     (nil))
(insn 316 315 317 2 (parallel [
            (set (reg:DI 2 cx [orig:293 D.6140 ] [293])
                (ashift:DI (reg:DI 0 ax [orig:292 D.6140 ] [292])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:94 512 {*ashldi3_1}
     (nil))
(insn 317 316 318 2 (set (reg/f:DI 0 ax [460])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:94 89 {*movdi_internal}
     (nil))
(insn 318 317 319 2 (parallel [
            (set (reg/f:DI 0 ax [orig:294 D.6141 ] [294])
                (plus:DI (reg/f:DI 0 ax [460])
                    (reg:DI 2 cx [orig:293 D.6140 ] [293])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:94 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:293 D.6140 ] [293]))
        (nil)))
(insn 319 318 320 2 (set (reg/f:DI 0 ax [orig:295 D.6142 ] [295])
        (mem/f:DI (reg/f:DI 0 ax [orig:294 D.6141 ] [294]) [0 *_231+0 S8 A64])) h_swap.cpp:94 89 {*movdi_internal}
     (nil))
(insn 320 319 321 2 (set (reg:QI 0 ax [orig:296 D.6143 ] [296])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:295 D.6142 ] [295])
                (const_int 23 [0x17])) [0 _232->lvl.character+3 S1 A8])) h_swap.cpp:94 93 {*movqi_internal}
     (nil))
(insn 321 320 322 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:291 D.6142 ] [291])
                (const_int 20 [0x14])) [0 _228->lvl.character+0 S1 A32])
        (reg:QI 0 ax [orig:296 D.6143 ] [296])) h_swap.cpp:94 93 {*movqi_internal}
     (nil))
(insn 322 321 323 2 (set (reg:SI 0 ax [461])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:95 90 {*movsi_internal}
     (nil))
(insn 323 322 324 2 (set (reg:DI 0 ax [orig:297 D.6140 ] [297])
        (sign_extend:DI (reg:SI 0 ax [461]))) h_swap.cpp:95 142 {*extendsidi2_rex64}
     (nil))
(insn 324 323 325 2 (parallel [
            (set (reg:DI 1 dx [orig:298 D.6140 ] [298])
                (ashift:DI (reg:DI 0 ax [orig:297 D.6140 ] [297])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:95 512 {*ashldi3_1}
     (nil))
(insn 325 324 326 2 (set (reg/f:DI 0 ax [462])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:95 89 {*movdi_internal}
     (nil))
(insn 326 325 327 2 (parallel [
            (set (reg/f:DI 0 ax [orig:299 D.6141 ] [299])
                (plus:DI (reg/f:DI 0 ax [462])
                    (reg:DI 1 dx [orig:298 D.6140 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:95 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:298 D.6140 ] [298]))
        (nil)))
(insn 327 326 328 2 (set (reg/f:DI 0 ax [orig:300 D.6142 ] [300])
        (mem/f:DI (reg/f:DI 0 ax [orig:299 D.6141 ] [299]) [0 *_237+0 S8 A64])) h_swap.cpp:95 89 {*movdi_internal}
     (nil))
(insn 328 327 329 2 (parallel [
            (set (reg/f:DI 1 dx [orig:301 D.6142 ] [301])
                (plus:DI (reg/f:DI 0 ax [orig:300 D.6142 ] [300])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:95 218 {*adddi_1}
     (nil))
(insn 329 328 330 2 (set (reg:SI 0 ax [463])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:95 90 {*movsi_internal}
     (nil))
(insn 330 329 331 2 (set (reg:DI 0 ax [orig:302 D.6140 ] [302])
        (sign_extend:DI (reg:SI 0 ax [463]))) h_swap.cpp:95 142 {*extendsidi2_rex64}
     (nil))
(insn 331 330 332 2 (parallel [
            (set (reg:DI 2 cx [orig:303 D.6140 ] [303])
                (ashift:DI (reg:DI 0 ax [orig:302 D.6140 ] [302])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:95 512 {*ashldi3_1}
     (nil))
(insn 332 331 333 2 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:95 89 {*movdi_internal}
     (nil))
(insn 333 332 334 2 (parallel [
            (set (reg/f:DI 0 ax [orig:304 D.6141 ] [304])
                (plus:DI (reg/f:DI 0 ax [464])
                    (reg:DI 2 cx [orig:303 D.6140 ] [303])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:95 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:303 D.6140 ] [303]))
        (nil)))
(insn 334 333 335 2 (set (reg/f:DI 0 ax [orig:305 D.6142 ] [305])
        (mem/f:DI (reg/f:DI 0 ax [orig:304 D.6141 ] [304]) [0 *_242+0 S8 A64])) h_swap.cpp:95 89 {*movdi_internal}
     (nil))
(insn 335 334 336 2 (set (reg:QI 0 ax [orig:306 D.6143 ] [306])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:305 D.6142 ] [305])
                (const_int 22 [0x16])) [0 _243->lvl.character+2 S1 A16])) h_swap.cpp:95 93 {*movqi_internal}
     (nil))
(insn 336 335 337 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:301 D.6142 ] [301])
                (const_int 21 [0x15])) [0 _239->lvl.character+1 S1 A8])
        (reg:QI 0 ax [orig:306 D.6143 ] [306])) h_swap.cpp:95 93 {*movqi_internal}
     (nil))
(insn 337 336 338 2 (set (reg:SI 0 ax [465])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:96 90 {*movsi_internal}
     (nil))
(insn 338 337 339 2 (set (reg:DI 0 ax [orig:307 D.6140 ] [307])
        (sign_extend:DI (reg:SI 0 ax [465]))) h_swap.cpp:96 142 {*extendsidi2_rex64}
     (nil))
(insn 339 338 340 2 (parallel [
            (set (reg:DI 1 dx [orig:308 D.6140 ] [308])
                (ashift:DI (reg:DI 0 ax [orig:307 D.6140 ] [307])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:96 512 {*ashldi3_1}
     (nil))
(insn 340 339 341 2 (set (reg/f:DI 0 ax [466])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:96 89 {*movdi_internal}
     (nil))
(insn 341 340 342 2 (parallel [
            (set (reg/f:DI 0 ax [orig:309 D.6141 ] [309])
                (plus:DI (reg/f:DI 0 ax [466])
                    (reg:DI 1 dx [orig:308 D.6140 ] [308])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:96 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:308 D.6140 ] [308]))
        (nil)))
(insn 342 341 343 2 (set (reg/f:DI 0 ax [orig:310 D.6142 ] [310])
        (mem/f:DI (reg/f:DI 0 ax [orig:309 D.6141 ] [309]) [0 *_248+0 S8 A64])) h_swap.cpp:96 89 {*movdi_internal}
     (nil))
(insn 343 342 344 2 (parallel [
            (set (reg/f:DI 1 dx [orig:311 D.6142 ] [311])
                (plus:DI (reg/f:DI 0 ax [orig:310 D.6142 ] [310])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:96 218 {*adddi_1}
     (nil))
(insn 344 343 345 2 (set (reg:SI 0 ax [467])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:96 90 {*movsi_internal}
     (nil))
(insn 345 344 346 2 (set (reg:DI 0 ax [orig:312 D.6140 ] [312])
        (sign_extend:DI (reg:SI 0 ax [467]))) h_swap.cpp:96 142 {*extendsidi2_rex64}
     (nil))
(insn 346 345 347 2 (parallel [
            (set (reg:DI 2 cx [orig:313 D.6140 ] [313])
                (ashift:DI (reg:DI 0 ax [orig:312 D.6140 ] [312])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:96 512 {*ashldi3_1}
     (nil))
(insn 347 346 348 2 (set (reg/f:DI 0 ax [468])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:96 89 {*movdi_internal}
     (nil))
(insn 348 347 349 2 (parallel [
            (set (reg/f:DI 0 ax [orig:314 D.6141 ] [314])
                (plus:DI (reg/f:DI 0 ax [468])
                    (reg:DI 2 cx [orig:313 D.6140 ] [313])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:96 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:313 D.6140 ] [313]))
        (nil)))
(insn 349 348 350 2 (set (reg/f:DI 0 ax [orig:315 D.6142 ] [315])
        (mem/f:DI (reg/f:DI 0 ax [orig:314 D.6141 ] [314]) [0 *_253+0 S8 A64])) h_swap.cpp:96 89 {*movdi_internal}
     (nil))
(insn 350 349 351 2 (set (reg:QI 0 ax [orig:316 D.6143 ] [316])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:315 D.6142 ] [315])
                (const_int 21 [0x15])) [0 _254->lvl.character+1 S1 A8])) h_swap.cpp:96 93 {*movqi_internal}
     (nil))
(insn 351 350 352 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:311 D.6142 ] [311])
                (const_int 22 [0x16])) [0 _250->lvl.character+2 S1 A16])
        (reg:QI 0 ax [orig:316 D.6143 ] [316])) h_swap.cpp:96 93 {*movqi_internal}
     (nil))
(insn 352 351 353 2 (set (reg:SI 0 ax [469])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:97 90 {*movsi_internal}
     (nil))
(insn 353 352 354 2 (set (reg:DI 0 ax [orig:317 D.6140 ] [317])
        (sign_extend:DI (reg:SI 0 ax [469]))) h_swap.cpp:97 142 {*extendsidi2_rex64}
     (nil))
(insn 354 353 355 2 (parallel [
            (set (reg:DI 1 dx [orig:318 D.6140 ] [318])
                (ashift:DI (reg:DI 0 ax [orig:317 D.6140 ] [317])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:97 512 {*ashldi3_1}
     (nil))
(insn 355 354 356 2 (set (reg/f:DI 0 ax [470])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:97 89 {*movdi_internal}
     (nil))
(insn 356 355 357 2 (parallel [
            (set (reg/f:DI 0 ax [orig:319 D.6141 ] [319])
                (plus:DI (reg/f:DI 0 ax [470])
                    (reg:DI 1 dx [orig:318 D.6140 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:97 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:318 D.6140 ] [318]))
        (nil)))
(insn 357 356 358 2 (set (reg/f:DI 0 ax [orig:320 D.6142 ] [320])
        (mem/f:DI (reg/f:DI 0 ax [orig:319 D.6141 ] [319]) [0 *_259+0 S8 A64])) h_swap.cpp:97 89 {*movdi_internal}
     (nil))
(insn 358 357 359 2 (parallel [
            (set (reg/f:DI 1 dx [orig:321 D.6142 ] [321])
                (plus:DI (reg/f:DI 0 ax [orig:320 D.6142 ] [320])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:97 218 {*adddi_1}
     (nil))
(insn 359 358 360 2 (set (reg:SI 0 ax [471])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:97 90 {*movsi_internal}
     (nil))
(insn 360 359 361 2 (set (reg:DI 0 ax [orig:322 D.6140 ] [322])
        (sign_extend:DI (reg:SI 0 ax [471]))) h_swap.cpp:97 142 {*extendsidi2_rex64}
     (nil))
(insn 361 360 362 2 (parallel [
            (set (reg:DI 2 cx [orig:323 D.6140 ] [323])
                (ashift:DI (reg:DI 0 ax [orig:322 D.6140 ] [322])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:97 512 {*ashldi3_1}
     (nil))
(insn 362 361 363 2 (set (reg/f:DI 0 ax [472])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:97 89 {*movdi_internal}
     (nil))
(insn 363 362 364 2 (parallel [
            (set (reg/f:DI 0 ax [orig:324 D.6141 ] [324])
                (plus:DI (reg/f:DI 0 ax [472])
                    (reg:DI 2 cx [orig:323 D.6140 ] [323])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:97 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:323 D.6140 ] [323]))
        (nil)))
(insn 364 363 365 2 (set (reg/f:DI 0 ax [orig:325 D.6142 ] [325])
        (mem/f:DI (reg/f:DI 0 ax [orig:324 D.6141 ] [324]) [0 *_264+0 S8 A64])) h_swap.cpp:97 89 {*movdi_internal}
     (nil))
(insn 365 364 366 2 (set (reg:QI 0 ax [orig:326 D.6143 ] [326])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:325 D.6142 ] [325])
                (const_int 20 [0x14])) [0 _265->lvl.character+0 S1 A32])) h_swap.cpp:97 93 {*movqi_internal}
     (nil))
(insn 366 365 367 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:321 D.6142 ] [321])
                (const_int 23 [0x17])) [0 _261->lvl.character+3 S1 A8])
        (reg:QI 0 ax [orig:326 D.6143 ] [326])) h_swap.cpp:97 93 {*movqi_internal}
     (nil))
(insn 367 366 368 2 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:99 90 {*movsi_internal}
     (nil))
(insn 368 367 369 2 (set (reg:DI 0 ax [orig:327 D.6140 ] [327])
        (sign_extend:DI (reg:SI 0 ax [473]))) h_swap.cpp:99 142 {*extendsidi2_rex64}
     (nil))
(insn 369 368 370 2 (parallel [
            (set (reg:DI 1 dx [orig:328 D.6140 ] [328])
                (ashift:DI (reg:DI 0 ax [orig:327 D.6140 ] [327])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:99 512 {*ashldi3_1}
     (nil))
(insn 370 369 371 2 (set (reg/f:DI 0 ax [474])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:99 89 {*movdi_internal}
     (nil))
(insn 371 370 372 2 (parallel [
            (set (reg/f:DI 0 ax [orig:329 D.6141 ] [329])
                (plus:DI (reg/f:DI 0 ax [474])
                    (reg:DI 1 dx [orig:328 D.6140 ] [328])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:99 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:328 D.6140 ] [328]))
        (nil)))
(insn 372 371 373 2 (set (reg/f:DI 0 ax [orig:330 D.6142 ] [330])
        (mem/f:DI (reg/f:DI 0 ax [orig:329 D.6141 ] [329]) [0 *_270+0 S8 A64])) h_swap.cpp:99 89 {*movdi_internal}
     (nil))
(insn 373 372 374 2 (parallel [
            (set (reg/f:DI 1 dx [orig:331 D.6142 ] [331])
                (plus:DI (reg/f:DI 0 ax [orig:330 D.6142 ] [330])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:99 218 {*adddi_1}
     (nil))
(insn 374 373 375 2 (set (reg:SI 0 ax [475])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:99 90 {*movsi_internal}
     (nil))
(insn 375 374 376 2 (set (reg:DI 0 ax [orig:332 D.6140 ] [332])
        (sign_extend:DI (reg:SI 0 ax [475]))) h_swap.cpp:99 142 {*extendsidi2_rex64}
     (nil))
(insn 376 375 377 2 (parallel [
            (set (reg:DI 2 cx [orig:333 D.6140 ] [333])
                (ashift:DI (reg:DI 0 ax [orig:332 D.6140 ] [332])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:99 512 {*ashldi3_1}
     (nil))
(insn 377 376 378 2 (set (reg/f:DI 0 ax [476])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:99 89 {*movdi_internal}
     (nil))
(insn 378 377 379 2 (parallel [
            (set (reg/f:DI 0 ax [orig:334 D.6141 ] [334])
                (plus:DI (reg/f:DI 0 ax [476])
                    (reg:DI 2 cx [orig:333 D.6140 ] [333])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:99 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:333 D.6140 ] [333]))
        (nil)))
(insn 379 378 380 2 (set (reg/f:DI 0 ax [orig:335 D.6142 ] [335])
        (mem/f:DI (reg/f:DI 0 ax [orig:334 D.6141 ] [334]) [0 *_275+0 S8 A64])) h_swap.cpp:99 89 {*movdi_internal}
     (nil))
(insn 380 379 381 2 (set (reg:QI 0 ax [orig:336 D.6143 ] [336])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:335 D.6142 ] [335])
                (const_int 27 [0x1b])) [0 _276->tlt.character+3 S1 A8])) h_swap.cpp:99 93 {*movqi_internal}
     (nil))
(insn 381 380 382 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:331 D.6142 ] [331])
                (const_int 24 [0x18])) [0 _272->tlt.character+0 S1 A32])
        (reg:QI 0 ax [orig:336 D.6143 ] [336])) h_swap.cpp:99 93 {*movqi_internal}
     (nil))
(insn 382 381 383 2 (set (reg:SI 0 ax [477])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:100 90 {*movsi_internal}
     (nil))
(insn 383 382 384 2 (set (reg:DI 0 ax [orig:337 D.6140 ] [337])
        (sign_extend:DI (reg:SI 0 ax [477]))) h_swap.cpp:100 142 {*extendsidi2_rex64}
     (nil))
(insn 384 383 385 2 (parallel [
            (set (reg:DI 1 dx [orig:338 D.6140 ] [338])
                (ashift:DI (reg:DI 0 ax [orig:337 D.6140 ] [337])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:100 512 {*ashldi3_1}
     (nil))
(insn 385 384 386 2 (set (reg/f:DI 0 ax [478])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:100 89 {*movdi_internal}
     (nil))
(insn 386 385 387 2 (parallel [
            (set (reg/f:DI 0 ax [orig:339 D.6141 ] [339])
                (plus:DI (reg/f:DI 0 ax [478])
                    (reg:DI 1 dx [orig:338 D.6140 ] [338])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:100 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:338 D.6140 ] [338]))
        (nil)))
(insn 387 386 388 2 (set (reg/f:DI 0 ax [orig:340 D.6142 ] [340])
        (mem/f:DI (reg/f:DI 0 ax [orig:339 D.6141 ] [339]) [0 *_281+0 S8 A64])) h_swap.cpp:100 89 {*movdi_internal}
     (nil))
(insn 388 387 389 2 (parallel [
            (set (reg/f:DI 1 dx [orig:341 D.6142 ] [341])
                (plus:DI (reg/f:DI 0 ax [orig:340 D.6142 ] [340])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:100 218 {*adddi_1}
     (nil))
(insn 389 388 390 2 (set (reg:SI 0 ax [479])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:100 90 {*movsi_internal}
     (nil))
(insn 390 389 391 2 (set (reg:DI 0 ax [orig:342 D.6140 ] [342])
        (sign_extend:DI (reg:SI 0 ax [479]))) h_swap.cpp:100 142 {*extendsidi2_rex64}
     (nil))
(insn 391 390 392 2 (parallel [
            (set (reg:DI 2 cx [orig:343 D.6140 ] [343])
                (ashift:DI (reg:DI 0 ax [orig:342 D.6140 ] [342])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:100 512 {*ashldi3_1}
     (nil))
(insn 392 391 393 2 (set (reg/f:DI 0 ax [480])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:100 89 {*movdi_internal}
     (nil))
(insn 393 392 394 2 (parallel [
            (set (reg/f:DI 0 ax [orig:344 D.6141 ] [344])
                (plus:DI (reg/f:DI 0 ax [480])
                    (reg:DI 2 cx [orig:343 D.6140 ] [343])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:100 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:343 D.6140 ] [343]))
        (nil)))
(insn 394 393 395 2 (set (reg/f:DI 0 ax [orig:345 D.6142 ] [345])
        (mem/f:DI (reg/f:DI 0 ax [orig:344 D.6141 ] [344]) [0 *_286+0 S8 A64])) h_swap.cpp:100 89 {*movdi_internal}
     (nil))
(insn 395 394 396 2 (set (reg:QI 0 ax [orig:346 D.6143 ] [346])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:345 D.6142 ] [345])
                (const_int 26 [0x1a])) [0 _287->tlt.character+2 S1 A16])) h_swap.cpp:100 93 {*movqi_internal}
     (nil))
(insn 396 395 397 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:341 D.6142 ] [341])
                (const_int 25 [0x19])) [0 _283->tlt.character+1 S1 A8])
        (reg:QI 0 ax [orig:346 D.6143 ] [346])) h_swap.cpp:100 93 {*movqi_internal}
     (nil))
(insn 397 396 398 2 (set (reg:SI 0 ax [481])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:101 90 {*movsi_internal}
     (nil))
(insn 398 397 399 2 (set (reg:DI 0 ax [orig:347 D.6140 ] [347])
        (sign_extend:DI (reg:SI 0 ax [481]))) h_swap.cpp:101 142 {*extendsidi2_rex64}
     (nil))
(insn 399 398 400 2 (parallel [
            (set (reg:DI 1 dx [orig:348 D.6140 ] [348])
                (ashift:DI (reg:DI 0 ax [orig:347 D.6140 ] [347])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:101 512 {*ashldi3_1}
     (nil))
(insn 400 399 401 2 (set (reg/f:DI 0 ax [482])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:101 89 {*movdi_internal}
     (nil))
(insn 401 400 402 2 (parallel [
            (set (reg/f:DI 0 ax [orig:349 D.6141 ] [349])
                (plus:DI (reg/f:DI 0 ax [482])
                    (reg:DI 1 dx [orig:348 D.6140 ] [348])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:101 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:348 D.6140 ] [348]))
        (nil)))
(insn 402 401 403 2 (set (reg/f:DI 0 ax [orig:350 D.6142 ] [350])
        (mem/f:DI (reg/f:DI 0 ax [orig:349 D.6141 ] [349]) [0 *_292+0 S8 A64])) h_swap.cpp:101 89 {*movdi_internal}
     (nil))
(insn 403 402 404 2 (parallel [
            (set (reg/f:DI 1 dx [orig:351 D.6142 ] [351])
                (plus:DI (reg/f:DI 0 ax [orig:350 D.6142 ] [350])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:101 218 {*adddi_1}
     (nil))
(insn 404 403 405 2 (set (reg:SI 0 ax [483])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:101 90 {*movsi_internal}
     (nil))
(insn 405 404 406 2 (set (reg:DI 0 ax [orig:352 D.6140 ] [352])
        (sign_extend:DI (reg:SI 0 ax [483]))) h_swap.cpp:101 142 {*extendsidi2_rex64}
     (nil))
(insn 406 405 407 2 (parallel [
            (set (reg:DI 2 cx [orig:353 D.6140 ] [353])
                (ashift:DI (reg:DI 0 ax [orig:352 D.6140 ] [352])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:101 512 {*ashldi3_1}
     (nil))
(insn 407 406 408 2 (set (reg/f:DI 0 ax [484])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:101 89 {*movdi_internal}
     (nil))
(insn 408 407 409 2 (parallel [
            (set (reg/f:DI 0 ax [orig:354 D.6141 ] [354])
                (plus:DI (reg/f:DI 0 ax [484])
                    (reg:DI 2 cx [orig:353 D.6140 ] [353])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:101 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:353 D.6140 ] [353]))
        (nil)))
(insn 409 408 410 2 (set (reg/f:DI 0 ax [orig:355 D.6142 ] [355])
        (mem/f:DI (reg/f:DI 0 ax [orig:354 D.6141 ] [354]) [0 *_297+0 S8 A64])) h_swap.cpp:101 89 {*movdi_internal}
     (nil))
(insn 410 409 411 2 (set (reg:QI 0 ax [orig:356 D.6143 ] [356])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:355 D.6142 ] [355])
                (const_int 25 [0x19])) [0 _298->tlt.character+1 S1 A8])) h_swap.cpp:101 93 {*movqi_internal}
     (nil))
(insn 411 410 412 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:351 D.6142 ] [351])
                (const_int 26 [0x1a])) [0 _294->tlt.character+2 S1 A16])
        (reg:QI 0 ax [orig:356 D.6143 ] [356])) h_swap.cpp:101 93 {*movqi_internal}
     (nil))
(insn 412 411 413 2 (set (reg:SI 0 ax [485])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:102 90 {*movsi_internal}
     (nil))
(insn 413 412 414 2 (set (reg:DI 0 ax [orig:357 D.6140 ] [357])
        (sign_extend:DI (reg:SI 0 ax [485]))) h_swap.cpp:102 142 {*extendsidi2_rex64}
     (nil))
(insn 414 413 415 2 (parallel [
            (set (reg:DI 1 dx [orig:358 D.6140 ] [358])
                (ashift:DI (reg:DI 0 ax [orig:357 D.6140 ] [357])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:102 512 {*ashldi3_1}
     (nil))
(insn 415 414 416 2 (set (reg/f:DI 0 ax [486])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:102 89 {*movdi_internal}
     (nil))
(insn 416 415 417 2 (parallel [
            (set (reg/f:DI 0 ax [orig:359 D.6141 ] [359])
                (plus:DI (reg/f:DI 0 ax [486])
                    (reg:DI 1 dx [orig:358 D.6140 ] [358])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:102 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:358 D.6140 ] [358]))
        (nil)))
(insn 417 416 418 2 (set (reg/f:DI 0 ax [orig:360 D.6142 ] [360])
        (mem/f:DI (reg/f:DI 0 ax [orig:359 D.6141 ] [359]) [0 *_303+0 S8 A64])) h_swap.cpp:102 89 {*movdi_internal}
     (nil))
(insn 418 417 419 2 (parallel [
            (set (reg/f:DI 1 dx [orig:361 D.6142 ] [361])
                (plus:DI (reg/f:DI 0 ax [orig:360 D.6142 ] [360])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:102 218 {*adddi_1}
     (nil))
(insn 419 418 420 2 (set (reg:SI 0 ax [487])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:102 90 {*movsi_internal}
     (nil))
(insn 420 419 421 2 (set (reg:DI 0 ax [orig:362 D.6140 ] [362])
        (sign_extend:DI (reg:SI 0 ax [487]))) h_swap.cpp:102 142 {*extendsidi2_rex64}
     (nil))
(insn 421 420 422 2 (parallel [
            (set (reg:DI 2 cx [orig:363 D.6140 ] [363])
                (ashift:DI (reg:DI 0 ax [orig:362 D.6140 ] [362])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:102 512 {*ashldi3_1}
     (nil))
(insn 422 421 423 2 (set (reg/f:DI 0 ax [488])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:102 89 {*movdi_internal}
     (nil))
(insn 423 422 424 2 (parallel [
            (set (reg/f:DI 0 ax [orig:364 D.6141 ] [364])
                (plus:DI (reg/f:DI 0 ax [488])
                    (reg:DI 2 cx [orig:363 D.6140 ] [363])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:102 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:363 D.6140 ] [363]))
        (nil)))
(insn 424 423 425 2 (set (reg/f:DI 0 ax [orig:365 D.6142 ] [365])
        (mem/f:DI (reg/f:DI 0 ax [orig:364 D.6141 ] [364]) [0 *_308+0 S8 A64])) h_swap.cpp:102 89 {*movdi_internal}
     (nil))
(insn 425 424 426 2 (set (reg:QI 0 ax [orig:366 D.6143 ] [366])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:365 D.6142 ] [365])
                (const_int 24 [0x18])) [0 _309->tlt.character+0 S1 A32])) h_swap.cpp:102 93 {*movqi_internal}
     (nil))
(insn 426 425 427 2 (set (mem/j:QI (plus:DI (reg/f:DI 1 dx [orig:361 D.6142 ] [361])
                (const_int 27 [0x1b])) [0 _305->tlt.character+3 S1 A8])
        (reg:QI 0 ax [orig:366 D.6143 ] [366])) h_swap.cpp:102 93 {*movqi_internal}
     (nil))
(insn 427 426 428 2 (set (reg:SI 0 ax [489])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:104 90 {*movsi_internal}
     (nil))
(insn 428 427 429 2 (set (reg:DI 0 ax [orig:367 D.6140 ] [367])
        (sign_extend:DI (reg:SI 0 ax [489]))) h_swap.cpp:104 142 {*extendsidi2_rex64}
     (nil))
(insn 429 428 430 2 (parallel [
            (set (reg:DI 1 dx [orig:368 D.6140 ] [368])
                (ashift:DI (reg:DI 0 ax [orig:367 D.6140 ] [367])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:104 512 {*ashldi3_1}
     (nil))
(insn 430 429 431 2 (set (reg/f:DI 0 ax [490])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:104 89 {*movdi_internal}
     (nil))
(insn 431 430 432 2 (parallel [
            (set (reg/f:DI 0 ax [orig:369 D.6141 ] [369])
                (plus:DI (reg/f:DI 0 ax [490])
                    (reg:DI 1 dx [orig:368 D.6140 ] [368])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:104 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:368 D.6140 ] [368]))
        (nil)))
(insn 432 431 433 2 (set (reg/f:DI 0 ax [orig:370 D.6142 ] [370])
        (mem/f:DI (reg/f:DI 0 ax [orig:369 D.6141 ] [369]) [0 *_314+0 S8 A64])) h_swap.cpp:104 89 {*movdi_internal}
     (nil))
(insn 433 432 434 2 (set (reg:SI 1 dx [491])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) h_swap.cpp:104 90 {*movsi_internal}
     (nil))
(insn 434 433 435 2 (set (reg:DI 1 dx [orig:371 D.6140 ] [371])
        (sign_extend:DI (reg:SI 1 dx [491]))) h_swap.cpp:104 142 {*extendsidi2_rex64}
     (nil))
(insn 435 434 436 2 (parallel [
            (set (reg:DI 2 cx [orig:372 D.6140 ] [372])
                (ashift:DI (reg:DI 1 dx [orig:371 D.6140 ] [371])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:104 512 {*ashldi3_1}
     (nil))
(insn 436 435 437 2 (set (reg/f:DI 1 dx [492])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])) h_swap.cpp:104 89 {*movdi_internal}
     (nil))
(insn 437 436 438 2 (parallel [
            (set (reg/f:DI 1 dx [orig:373 D.6141 ] [373])
                (plus:DI (reg/f:DI 1 dx [492])
                    (reg:DI 2 cx [orig:372 D.6140 ] [372])))
            (clobber (reg:CC 17 flags))
        ]) h_swap.cpp:104 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 block_header+0 S8 A64])
            (reg:DI 2 cx [orig:372 D.6140 ] [372]))
        (nil)))
(insn 438 437 439 2 (set (reg/f:DI 1 dx [orig:374 D.6142 ] [374])
        (mem/f:DI (reg/f:DI 1 dx [orig:373 D.6141 ] [373]) [0 *_318+0 S8 A64])) h_swap.cpp:104 89 {*movdi_internal}
     (nil))
(insn 439 438 440 2 (set (reg:DI 2 cx [493])
        (mem:DI (plus:DI (reg/f:DI 1 dx [orig:374 D.6142 ] [374])
                (const_int 28 [0x1c])) [0 MEM[(const struct Data_block_header &)_319 + 28]+0 S8 A32])) h_swap.cpp:104 89 {*movdi_internal}
     (nil))
(insn 440 439 441 2 (set (mem:DI (reg/f:DI 0 ax [orig:370 D.6142 ] [370]) [0 *_315+0 S8 A32])
        (reg:DI 2 cx [493])) h_swap.cpp:104 89 {*movdi_internal}
     (nil))
(insn 441 440 442 2 (set (reg:DI 2 cx [494])
        (mem:DI (plus:DI (reg/f:DI 1 dx [orig:374 D.6142 ] [374])
                (const_int 36 [0x24])) [0 MEM[(const struct Data_block_header &)_319 + 28]+8 S8 A32])) h_swap.cpp:104 89 {*movdi_internal}
     (nil))
(insn 442 441 443 2 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:370 D.6142 ] [370])
                (const_int 8 [0x8])) [0 *_315+8 S8 A32])
        (reg:DI 2 cx [494])) h_swap.cpp:104 89 {*movdi_internal}
     (nil))
(insn 443 442 444 2 (set (reg:DI 2 cx [495])
        (mem:DI (plus:DI (reg/f:DI 1 dx [orig:374 D.6142 ] [374])
                (const_int 44 [0x2c])) [0 MEM[(const struct Data_block_header &)_319 + 28]+16 S8 A32])) h_swap.cpp:104 89 {*movdi_internal}
     (nil))
(insn 444 443 445 2 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:370 D.6142 ] [370])
                (const_int 16 [0x10])) [0 *_315+16 S8 A32])
        (reg:DI 2 cx [495])) h_swap.cpp:104 89 {*movdi_internal}
     (nil))
(insn 445 444 446 2 (set (reg:SI 1 dx [496])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:374 D.6142 ] [374])
                (const_int 52 [0x34])) [0 MEM[(const struct Data_block_header &)_319 + 28]+24 S4 A32])) h_swap.cpp:104 90 {*movsi_internal}
     (nil))
(insn 446 445 447 2 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:370 D.6142 ] [370])
                (const_int 24 [0x18])) [0 *_315+24 S4 A32])
        (reg:SI 1 dx [496])) h_swap.cpp:104 90 {*movsi_internal}
     (nil))
(insn 447 446 450 2 (set (reg:SI 0 ax [orig:375 D.6144 ] [375])
        (const_int 1 [0x1])) h_swap.cpp:106 90 {*movsi_internal}
     (nil))
(insn 450 447 454 2 (set (reg:SI 0 ax [orig:376 <retval> ] [376])
        (reg:SI 0 ax [orig:375 D.6144 ] [375])) h_swap.cpp:106 90 {*movsi_internal}
     (nil))
(insn 454 450 455 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:376 <retval> ] [376])) h_swap.cpp:107 90 {*movsi_internal}
     (nil))
(insn 455 454 457 2 (use (reg/i:SI 0 ax)) h_swap.cpp:107 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 457 455 0 NOTE_INSN_DELETED)
